#ifdef WIN32
#include "stdafx.h"
#endif
#include "list_compcap.h"
#include <cstdlib>
#include <stdio.h>

CCompCapLincene::CCompCapLincene()
{
	m_compid = 0;
	m_sCompId.clear();
	mapCapbilityInfo.clear();
	//m_mapCompLinceneInfo.clear();
}

CCompCapLincene::~CCompCapLincene()
{

}

std::set<int> CCompCapLincene::GetCompIdList()
{
	return m_sCompId;
}

bool CCompCapLincene::SelectLinceneIdDB()
{
	CCriticalAutoLock MyLock(m_csCCompLincene);

	char cSelect[1024];

	sprintf(cSelect, "select cap_id,license_col from t_capbility");

#ifdef MYSQL_DB_DEF

	unsigned long long llRowNum = 0;
	MYSQL_RES *pQuery = NULL;

	std::map<unsigned long long, MYSQL_ROW> rows_set;
	rows_set.clear();

	if (!CDBConnector::GetInstance()->GetResults(cSelect, llRowNum, rows_set, &pQuery))
	{
		printf("CCompLincene::SelectAllCompLinceneDB GetResults error\r\n");
		printf(CDBConnector::GetInstance()->OutErrors());

		printf("^^^^^^^^^^111111111111^^^^^^^^^^^^^^ CCompLincene::SelectAllCompLinceneDB()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);

		CDBConnector::GetInstance()->FreeResult(pQuery);

		return false;
	}
	else
	{
		mapCapbilityInfo.clear();
		map<int, string> map_cap_temp;

		for (std::map<unsigned long long, MYSQL_ROW>::iterator row_itor = rows_set.begin();
			row_itor != rows_set.end(); row_itor++)
		{
			MYSQL_ROW ret_row = row_itor->second;
			if (ret_row)
			{

				int cap_id = 0;
				if (ret_row[0] != NULL)
				{
					cap_id = atoi(ret_row[0]);
				}

				std::string license_col;
				if (ret_row[1] != NULL)
				{
					license_col = ret_row[1];
				}
				else
				{
					license_col.clear();
				}

#ifdef WIN32
				printf("SelectLinceneIdDB::RowNum:%I64d={%d, %s,}\n", (row_itor->first) + 1, cap_id, license_col.c_str());
#elif defined LINUX
				printf("SelectLinceneIdDB::RowNum:%lld={%d, %s,}\n", (row_itor->first) + 1, cap_id, license_col.c_str());
#endif

				if (cap_id != 0)
				{
					//将db的数据存入map表
					map_cap_temp.clear();
					mapCapbilityInfo.insert(map<int, string>::value_type(cap_id, license_col));
				}
			}
		}
	}

	printf("^^^^^^^^22222222^^^^^^^^^^^^^ CCompLincene::SelectAllCompLinceneDB()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);
	CDBConnector::GetInstance()->FreeResult(pQuery);

	return true;

#elif SHENTONG_DB_DEF
	Statement *pstmt = NULL;
	ResultSet *prs = NULL;
	bool bgetok = false;

	if (!CDBConnector::GetInstance()->GetResults(cSelect, &pstmt, &prs))
	{
		printf("CCompLincene::SelectAllCompLinceneDB GetResults error\r\n");

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);

		return false;
	}
	else
	{
		if (prs != NULL)
		{
			unsigned long long ullRowNum = 0;

			m_mapCompLinceneInfo.clear();
			map<int, sLinceneInfo> map_temp;
			sLinceneInfo temp_lincene;

			// 注意：列的编号是从1开始,如果结果为空也会进入while循环,此时获取的值是0
			while (prs->next())
			{
				ullRowNum++;

				m_compid = 0;
				m_compid = prs->getInt(1);

				int cap_id = 0;
				cap_id = prs->getInt(2);

				int cap_amout = 0;
				cap_amout = prs->getInt(3);


				std::string expire_time;
				expire_time.clear();
				expire_time = prs->getString(4);

#ifdef WIN32
				printf("SelectPollList::RowNum:%I64d={%d, %d, %d, %s,}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str());
#elif defined LINUX
				printf("SelectPollList::RowNum:%lld={%d, %d, %d, %s,}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str());
#endif


				if (m_compid != 0)
				{
					//将db的数据存入map表
					map_temp.clear();
					temp_lincene.amount = cap_amout;
					temp_lincene.expiretime = expire_time;
					map_temp.insert(map<int, sLinceneInfo>::value_type(cap_id, temp_lincene));

					m_mapCompLinceneInfo.insert(map<int, map<int, sLinceneInfo>>::value_type(m_compid, map_temp));
				}
			}

			if (ullRowNum > 0)
			{
				bgetok = true;
			}
		}
		else
		{
			bgetok = false;
		}

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);
	}

	return bgetok;
#endif

}

bool CCompCapLincene::SelectSingleCompLinceneInfo(int compid, sCompLinceneInfo* linceneInfo)
{
	CCriticalAutoLock MyLock(m_csCCompLincene);

	if (compid == 0)
	{
		sr_printf(SR_LOGLEVEL_INFO, "CCompLincene::SelectSingleCompLinceneInfo() error compid == 0: \r\n");
		return false;
	}
	char cSelect[1024];

	sprintf(cSelect, "select rel.comp_id,rel.cap_id,rel.cap_amount,rel.expire_time,cap.license_col from rel_comp_cap as rel,t_capbility as cap where cap.cap_id=rel.cap_id and rel.comp_id=%d",compid);

	//获取到所有企业的授权信息
#ifdef MYSQL_DB_DEF

	unsigned long long llRowNum = 0;
	MYSQL_RES *pQuery = NULL;

	std::map<unsigned long long, MYSQL_ROW> rows_set;
	rows_set.clear();

	if (!CDBConnector::GetInstance()->GetResults(cSelect, llRowNum, rows_set, &pQuery))
	{
		printf("CCompLincene::SelectSingleCompLinceneInfo GetResults error\r\n");
		printf(CDBConnector::GetInstance()->OutErrors());

		printf("^^^^^^^^^^111111111111^^^^^^^^^^^^^^ CCompLincene::SelectSingleCompLinceneInfo()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);

		CDBConnector::GetInstance()->FreeResult(pQuery);

		return false;
	}
	else
	{

		for (std::map<unsigned long long, MYSQL_ROW>::iterator row_itor = rows_set.begin();
			row_itor != rows_set.end(); row_itor++)
		{
			MYSQL_ROW ret_row = row_itor->second;
			if (ret_row)
			{
				m_compid = 0;
				m_compid = atoi(ret_row[0]);

				int cap_id = 0;
				if (ret_row[1] != NULL)
				{
					cap_id = atoi(ret_row[1]);
				}

				int cap_amout = 0;
				if (ret_row[2] != NULL)
				{
					cap_amout = atoi(ret_row[2]);
				}

				std::string expire_time;
				if (ret_row[3] != NULL)
				{
					expire_time = ret_row[3];
				}
				else
				{
					expire_time.clear();
				}

				std::string license_col;
				if (ret_row[4] != NULL)
				{
					license_col = ret_row[4];
				}
				else
				{
					license_col.clear();
				}

#ifdef WIN32
				printf("SelectCompLinceneDB::RowNum:%I64d={%d, %d, %d, %s,}\n", (row_itor->first) + 1, m_compid, cap_id, cap_amout, expire_time.c_str());
#elif defined LINUX
				printf("SelectCompLinceneDB::RowNum:%lld={%d, %d, %d, %s,}\n", (row_itor->first) + 1, m_compid, cap_id, cap_amout, expire_time.c_str());
#endif

				//SetCapLinceneInfo(license_col, linceneInfo, cap_amout, expire_time);

				SetCapLinceneInfo(cap_id, linceneInfo, cap_amout, expire_time);
			}


		}
		sr_printf(SR_LOGLEVEL_INFO, "CCompLincene::SelectSingleCompLinceneInfo() OK linceneInfo:\
		srcnt->%d, srexptime->%s, stdcnt->%d,stdexptime->%s, livecnt->%d, liveexptime->%s,reccnt->%d, recexptime->%s, confcnt->%d\r\n",linceneInfo->srcnt, linceneInfo->srexptime, \
		linceneInfo->stdcnt, linceneInfo->stdexptime, linceneInfo->livecnt, linceneInfo->liveexptime, linceneInfo->reccnt, linceneInfo->recexptime, linceneInfo->confcnt);

		
	}

	printf("^^^^^^^^22222222^^^^^^^^^^^^^ CCompLincene::SelectSingleCompLinceneInfo()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);
	CDBConnector::GetInstance()->FreeResult(pQuery);

	return true;

#elif SHENTONG_DB_DEF
	Statement *pstmt = NULL;
	ResultSet *prs = NULL;
	bool bgetok = false;

	if (!CDBConnector::GetInstance()->GetResults(cSelect, &pstmt, &prs))
	{
		printf("CCompLincene::SelectSingleCompLinceneInfo GetResults error\r\n");

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);

		return false;
	}
	else
	{
		if (prs != NULL)
		{
			unsigned long long ullRowNum = 0;


			// 注意：列的编号是从1开始,如果结果为空也会进入while循环,此时获取的值是0
			while (prs->next())
			{
				ullRowNum++;

				m_compid = 0;
				m_compid = prs->getInt(1);

				int cap_id = 0;
				cap_id = prs->getInt(2);

				int cap_amout = 0;
				cap_amout = prs->getInt(3);


				std::string expire_time;
				expire_time.clear();
				expire_time = prs->getString(4);

				std::string license_col;
				license_col.clear();
				license_col = prs->getString(5);

#ifdef WIN32
				printf("SelectPollList::RowNum:%I64d={%d, %d, %d, %s}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str());
#elif defined LINUX
				printf("SelectPollList::RowNum:%lld={%d, %d, %d, %s}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str());
#endif

				//SetCapLinceneInfo(license_col, linceneInfo, cap_amout, expire_time);
				SetCapLinceneInfo(cap_id, linceneInfo, cap_amout, expire_time);
			}

			if (ullRowNum > 0)
			{
				bgetok = true;
			}
		}
		else
		{
			bgetok = false;
		}

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);
	}

	return bgetok;
#endif


}
bool CCompCapLincene::SelectCompLinceneDB()
{
	CCriticalAutoLock MyLock(m_csCCompLincene);

	char cSelect[1024];

	sprintf(cSelect, "select rel.comp_id,rel.cap_id,rel.cap_amount,rel.expire_time,cap.license_col  from rel_comp_cap rel left join t_capbility cap on rel.cap_id = cap.cap_id  where comp_id in (select comp.comp_id from t_company as comp where comp.comp_status=0)");

	//获取到所有企业的授权信息
#ifdef MYSQL_DB_DEF

	unsigned long long llRowNum = 0;
	MYSQL_RES *pQuery = NULL;

	std::map<unsigned long long, MYSQL_ROW> rows_set;
	rows_set.clear();

	if (!CDBConnector::GetInstance()->GetResults(cSelect, llRowNum, rows_set, &pQuery))
	{
		printf("CCompLincene::SelectCompLinceneDB GetResults error\r\n");
		printf(CDBConnector::GetInstance()->OutErrors());

		printf("^^^^^^^^^^111111111111^^^^^^^^^^^^^^ CCompLincene::SelectCompLinceneDB()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);

		CDBConnector::GetInstance()->FreeResult(pQuery);

		return false;
	}
	else
	{
		m_smapCompLinceneInfo.clear();

		for (std::map<unsigned long long, MYSQL_ROW>::iterator row_itor = rows_set.begin();
			row_itor != rows_set.end(); row_itor++)
		{
			MYSQL_ROW ret_row = row_itor->second;
			if (ret_row)
			{
				m_compid = 0;
				m_compid = atoi(ret_row[0]);

				int cap_id = 0;
				if (ret_row[1] != NULL)
				{
					cap_id = atoi(ret_row[1]);
				}

				int cap_amout = 0;
				if (ret_row[2] != NULL)
				{
					cap_amout = atoi(ret_row[2]);
				}

				std::string expire_time;
				if (ret_row[3] != NULL)
				{
					expire_time = ret_row[3];
				}
				else
				{
					expire_time.clear();
				}

				std::string license_col;
				if (ret_row[4] != NULL)
				{
					license_col = ret_row[4];
				}
				else
				{
					license_col.clear();
				}

#ifdef WIN32
				printf("SelectCompLinceneDB::RowNum:%I64d={%d, %d, %d, %s,}\n", (row_itor->first) + 1, m_compid, cap_id, cap_amout, expire_time.c_str());
#elif defined LINUX
				printf("SelectCompLinceneDB::RowNum:%lld={%d, %d, %d, %s,}\n", (row_itor->first) + 1, m_compid, cap_id, cap_amout, expire_time.c_str());
#endif

				if (m_compid != 0)
				{
					sCompLinceneInfo sTempInfo;

					//是否已经存在map表中，不存在直接添加，如果存在，需要将所有的值存入
					map<int, sCompLinceneInfo >::iterator iter_map = m_smapCompLinceneInfo.find(m_compid);
					if (iter_map != m_smapCompLinceneInfo.end())
					{
						
						sTempInfo = iter_map->second;

						//SetCapLinceneInfo(license_col, &sTempInfo, cap_amout, expire_time);
						SetCapLinceneInfo(cap_id, &sTempInfo, cap_amout, expire_time);

						m_smapCompLinceneInfo[m_compid] = sTempInfo;
					}
					else
					{
						
						//未找到
						//SetCapLinceneInfo(license_col, &sTempInfo, cap_amout, expire_time);
						SetCapLinceneInfo(cap_id, &sTempInfo, cap_amout, expire_time);
						m_smapCompLinceneInfo.insert(map<int, sCompLinceneInfo >::value_type(m_compid, sTempInfo));
					}

					//将compid存入
					m_sCompId.insert(m_compid);

					//打印日志确认数据的正确
					map<int, sCompLinceneInfo >::iterator iter_log = m_smapCompLinceneInfo.find(m_compid);

					if (iter_log != m_smapCompLinceneInfo.end())
					{
						sCompLinceneInfo loginfo = iter_log->second;

						sr_printf(SR_LOGLEVEL_INFO, "CCompLincene::SelectCompLinceneDB() OK m_smapCompLinceneInfo:\
						srcnt->%d, srexptime->%s, stdcnt->%d,stdexptime->%s, livecnt->%d, liveexptime->%s,reccnt->%d, recexptime->%s, confcnt->%d,monitorcnt->%d,recexptime->%s,voicecnt->%d,recexptime->%s \r\n", \
						loginfo.srcnt, loginfo.srexptime.c_str(), loginfo.stdcnt, loginfo.stdexptime.c_str(), loginfo.livecnt, loginfo.liveexptime.c_str(), loginfo.reccnt, loginfo.recexptime.c_str(), loginfo.confcnt, loginfo.monitorcnt,loginfo.monitorexptime.c_str(), loginfo.voicecnt,loginfo.voiceexptime.c_str());

					}


				}
			}
		}
	}

	printf("^^^^^^^^22222222^^^^^^^^^^^^^ CCompLincene::SelectCompLinceneDB()  FreeResult( pQuery = %p ) ^^^^^^^^^^^^^^^^^^\n", pQuery);
	CDBConnector::GetInstance()->FreeResult(pQuery);

	return true;

#elif SHENTONG_DB_DEF
	Statement *pstmt = NULL;
	ResultSet *prs = NULL;
	bool bgetok = false;

	if (!CDBConnector::GetInstance()->GetResults(cSelect, &pstmt, &prs))
	{
		printf("CCompLincene::SelectAllCompLinceneDB GetResults error\r\n");

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);

		return false;
	}
	else
	{
		if (prs != NULL)
		{
			unsigned long long ullRowNum = 0;
			// 注意：列的编号是从1开始,如果结果为空也会进入while循环,此时获取的值是0
			while (prs->next())
			{
				ullRowNum++;

				m_compid = 0;
				m_compid = prs->getInt(1);

				int cap_id = 0;
				cap_id = prs->getInt(2);

				int cap_amout = 0;
				cap_amout = prs->getInt(3);


				std::string expire_time;
				expire_time.clear();
				expire_time = prs->getString(4);

				std::string license_col;
				license_col.clear();
				license_col = prs->getString(5);
				

#ifdef WIN32
				printf("SelectPollList::RowNum:%I64d={%d, %d, %d, %s,%s}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str(), license_col.c_str());
#elif defined LINUX
				printf("SelectPollList::RowNum:%lld={%d, %d, %d, %s,%s}\n", ullRowNum, m_compid, cap_id, cap_amout, expire_time.c_str(), license_col.c_str());
#endif


				if (m_compid != 0)
				{

					sCompLinceneInfo sTempInfo;

					//是否已经存在map表中，不存在直接添加，如果存在，需要将所有的值存入
					map<int, sCompLinceneInfo >::iterator iter_map = m_smapCompLinceneInfo.find(m_compid);
					if (iter_map != m_smapCompLinceneInfo.end())
					{
						sTempInfo = iter_map->second;

						//SetCapLinceneInfo(license_col, &sTempInfo, cap_amout, expire_time);
						SetCapLinceneInfo(cap_id, &sTempInfo, cap_amout, expire_time);
						m_smapCompLinceneInfo[m_compid] = sTempInfo;
					}
					else
					{
						//未找到
						//SetCapLinceneInfo(license_col, &sTempInfo, cap_amout, expire_time);
						SetCapLinceneInfo(cap_id, &sTempInfo, cap_amout, expire_time);
						m_smapCompLinceneInfo.insert(map<int, sCompLinceneInfo >::value_type(m_compid, sTempInfo));
					}

					//将compid存入
					m_sCompId.insert(m_compid);
				}
			}

			if (ullRowNum > 0)
			{
				bgetok = true;
			}
		}
		else
		{
			bgetok = false;
		}

		CDBConnector::GetInstance()->FreeResult(pstmt, prs);
	}

	return bgetok;
#endif
}
bool CCompCapLincene::GetCompLinceneInfo(int compid, sCompLinceneInfo* linceneInfo)
{
	sCompLinceneInfo temp_lincene;
	
	std::map<int, sCompLinceneInfo>::iterator iter_linceneInfo;

	iter_linceneInfo = m_smapCompLinceneInfo.find(compid);

	if (iter_linceneInfo != m_smapCompLinceneInfo.end())
	{
		temp_lincene = iter_linceneInfo->second;

		memcpy(linceneInfo, &temp_lincene, sizeof(temp_lincene));

		return true;
	}
	else
	{

		return false;
	}

}
void CCompCapLincene::SetCapLinceneInfo(int cap_id, sCompLinceneInfo* linceneinfo, int amount, std::string expretime)
{
	switch (cap_id)
	{
	case 1:
		linceneinfo->srcnt = amount;
		linceneinfo->srexptime = expretime;
		break;
	case 2:
		linceneinfo->livecnt = amount;
		linceneinfo->liveexptime = expretime;
		break;
	case 4:
		linceneinfo->reccnt = amount;
		linceneinfo->recexptime = expretime;
		break;
	case 5:
		linceneinfo->monitorcnt = amount;
		linceneinfo->monitorexptime = expretime;
		break;
	case 6:
		linceneinfo->stdcnt = amount;
		linceneinfo->stdexptime = expretime;
		break;
	case 7:
		linceneinfo->voicecnt = amount;
		linceneinfo->voiceexptime = expretime;
		break;
	case 8:
		linceneinfo->confcnt = amount;
		break;
	}
}
void CCompCapLincene::SetCapLinceneInfo(std::string lincene_col, sCompLinceneInfo* linceneinfo, int amount, std::string expretime)
{
	
	if (strncmp("SR_COUNT", lincene_col.c_str(), 8)==0)
	{
		
		linceneinfo->srcnt = amount;
		linceneinfo->srexptime = expretime;

	}
	else if (strncmp("MAX_LIVE_COUNT", lincene_col.c_str(), 14)==0)
	{
		linceneinfo->livecnt = amount;
		linceneinfo->liveexptime = expretime;

	}
	else if (strncmp("RECORD_COUNT", lincene_col.c_str(), 12) == 0)
	{
		linceneinfo->reccnt = amount;
		linceneinfo->recexptime = expretime;
		
	}
	else if (strncmp("STANDARD_COUNT", lincene_col.c_str(), 14) == 0)
	{
		linceneinfo->stdcnt = amount;
		linceneinfo->stdexptime = expretime;
		
	}
	else if (strncmp("MAX_CONF_COUNT", lincene_col.c_str(), 14) == 0)
	{
		linceneinfo->confcnt = amount;
		
	}
	else if (strncmp("MONITOR_COUNT", lincene_col.c_str(), 13) == 0)
	{
		linceneinfo->monitorcnt = amount;
		linceneinfo->monitorexptime = expretime;
	
	}
	else if (strncmp("VOICE_COUNT", lincene_col.c_str(), 11) == 0)
	{
		linceneinfo->voicecnt = amount;
		linceneinfo->voiceexptime = expretime;
		
	}


}

bool CCompCapLincene::InsertDB()
{
	return true;
}

bool CCompCapLincene::UpdateDB()
{
	return true;
}

bool CCompCapLincene::DeleteDB()
{
	return true;
}