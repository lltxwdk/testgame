// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_crs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_crs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* ReqCRSCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCRSCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCRSCreateConf_NetMpAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCRSCreateConf_NetMpAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCRSDestroyConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCRSDestroyConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSTerJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSTerJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSTerLeft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSTerLeft_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToCRS_ScreensInMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToCRS_MPIsInConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPIInfoToCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPIInfoToCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndScreenInfoToCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndScreenInfoToCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSSelectVasVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSSelectVasVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSSelectVasVideo_AnalyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSSelectVasVideo_AnalyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCRSStartRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCRSStartRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCRSStopRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCRSStopRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCRSReOpenNetMPMediaPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCRSReOpenNetMPMediaPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCHeartBeatToCRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatToCRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCRSStartLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCRSStartLive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCRSStopLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCRSStopLive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCRSCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCRSCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCRSStartRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCRSStartRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCRSStopRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCRSStopRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCRSStartLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCRSStartLive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCRSStartLive_LiveAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCRSStartLive_LiveAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCRSSeleteVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCRSSeleteVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCRSSeleteVideo_TermInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCRSSeleteVideo_TermInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSHeartBeatToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSHeartBeatToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSFileStorPathToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSFileStorPathToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSLiveStateToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSLiveStateToMC_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5fcrs_2eproto() {
  protobuf_AddDesc_mc_5fcrs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_crs.proto");
  GOOGLE_CHECK(file != NULL);
  ReqCRSCreateConf_descriptor_ = file->message_type(0);
  static const int ReqCRSCreateConf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, mediaencryptalg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, encryptkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, netmpaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, videosize_),
  };
  ReqCRSCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCRSCreateConf_descriptor_,
      ReqCRSCreateConf::default_instance_,
      ReqCRSCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCRSCreateConf));
  ReqCRSCreateConf_NetMpAddr_descriptor_ = ReqCRSCreateConf_descriptor_->nested_type(0);
  static const int ReqCRSCreateConf_NetMpAddr_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, netmpmediaip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, desktopctrlrecvport_),
  };
  ReqCRSCreateConf_NetMpAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCRSCreateConf_NetMpAddr_descriptor_,
      ReqCRSCreateConf_NetMpAddr::default_instance_,
      ReqCRSCreateConf_NetMpAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSCreateConf_NetMpAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCRSCreateConf_NetMpAddr));
  CmdCRSDestroyConf_descriptor_ = file->message_type(1);
  static const int CmdCRSDestroyConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, reason_),
  };
  CmdCRSDestroyConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCRSDestroyConf_descriptor_,
      CmdCRSDestroyConf::default_instance_,
      CmdCRSDestroyConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSDestroyConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCRSDestroyConf));
  IndCRSTerJoined_descriptor_ = file->message_type(2);
  static const int IndCRSTerJoined_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, tername_),
  };
  IndCRSTerJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSTerJoined_descriptor_,
      IndCRSTerJoined::default_instance_,
      IndCRSTerJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSTerJoined));
  IndCRSTerLeft_descriptor_ = file->message_type(3);
  static const int IndCRSTerLeft_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, channelid_),
  };
  IndCRSTerLeft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSTerLeft_descriptor_,
      IndCRSTerLeft::default_instance_,
      IndCRSTerLeft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSTerLeft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSTerLeft));
  IndConfAllMPIInfoToCRS_descriptor_ = file->message_type(4);
  static const int IndConfAllMPIInfoToCRS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, mpis_),
  };
  IndConfAllMPIInfoToCRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToCRS_descriptor_,
      IndConfAllMPIInfoToCRS::default_instance_,
      IndConfAllMPIInfoToCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToCRS));
  IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_ = IndConfAllMPIInfoToCRS_descriptor_->nested_type(0);
  static const int IndConfAllMPIInfoToCRS_ScreensInMPI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_ScreensInMPI, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_ScreensInMPI, screentype_),
  };
  IndConfAllMPIInfoToCRS_ScreensInMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_,
      IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance_,
      IndConfAllMPIInfoToCRS_ScreensInMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_ScreensInMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_ScreensInMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToCRS_ScreensInMPI));
  IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_ = IndConfAllMPIInfoToCRS_descriptor_->nested_type(1);
  static const int IndConfAllMPIInfoToCRS_MPIsInConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_MPIsInConf, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_MPIsInConf, screens_),
  };
  IndConfAllMPIInfoToCRS_MPIsInConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_,
      IndConfAllMPIInfoToCRS_MPIsInConf::default_instance_,
      IndConfAllMPIInfoToCRS_MPIsInConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_MPIsInConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToCRS_MPIsInConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToCRS_MPIsInConf));
  IndMPIInfoToCRS_descriptor_ = file->message_type(5);
  static const int IndMPIInfoToCRS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, crsid_),
  };
  IndMPIInfoToCRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPIInfoToCRS_descriptor_,
      IndMPIInfoToCRS::default_instance_,
      IndMPIInfoToCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToCRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPIInfoToCRS));
  IndScreenInfoToCRS_descriptor_ = file->message_type(6);
  static const int IndScreenInfoToCRS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, crsid_),
  };
  IndScreenInfoToCRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndScreenInfoToCRS_descriptor_,
      IndScreenInfoToCRS::default_instance_,
      IndScreenInfoToCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToCRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndScreenInfoToCRS));
  IndCRSSelectVasVideo_descriptor_ = file->message_type(7);
  static const int IndCRSSelectVasVideo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo, selectvasinfos_),
  };
  IndCRSSelectVasVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSSelectVasVideo_descriptor_,
      IndCRSSelectVasVideo::default_instance_,
      IndCRSSelectVasVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSSelectVasVideo));
  IndCRSSelectVasVideo_AnalyInfo_descriptor_ = IndCRSSelectVasVideo_descriptor_->nested_type(0);
  static const int IndCRSSelectVasVideo_AnalyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, srcmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, isselect_),
  };
  IndCRSSelectVasVideo_AnalyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSSelectVasVideo_AnalyInfo_descriptor_,
      IndCRSSelectVasVideo_AnalyInfo::default_instance_,
      IndCRSSelectVasVideo_AnalyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSSelectVasVideo_AnalyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSSelectVasVideo_AnalyInfo));
  ReqCRSStartRec_descriptor_ = file->message_type(8);
  static const int ReqCRSStartRec_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, seqnum_),
  };
  ReqCRSStartRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCRSStartRec_descriptor_,
      ReqCRSStartRec::default_instance_,
      ReqCRSStartRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCRSStartRec));
  ReqCRSStopRec_descriptor_ = file->message_type(9);
  static const int ReqCRSStopRec_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, seqnum_),
  };
  ReqCRSStopRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCRSStopRec_descriptor_,
      ReqCRSStopRec::default_instance_,
      ReqCRSStopRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStopRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCRSStopRec));
  CmdCRSReOpenNetMPMediaPort_descriptor_ = file->message_type(10);
  static const int CmdCRSReOpenNetMPMediaPort_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, netmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, crschannelid_),
  };
  CmdCRSReOpenNetMPMediaPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCRSReOpenNetMPMediaPort_descriptor_,
      CmdCRSReOpenNetMPMediaPort::default_instance_,
      CmdCRSReOpenNetMPMediaPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSReOpenNetMPMediaPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCRSReOpenNetMPMediaPort));
  IndMCHeartBeatToCRS_descriptor_ = file->message_type(11);
  static const int IndMCHeartBeatToCRS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToCRS, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToCRS, crsid_),
  };
  IndMCHeartBeatToCRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatToCRS_descriptor_,
      IndMCHeartBeatToCRS::default_instance_,
      IndMCHeartBeatToCRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToCRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToCRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatToCRS));
  ReqCRSStartLive_descriptor_ = file->message_type(12);
  static const int ReqCRSStartLive_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, relatedsrsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, liveurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, livesvrtype_),
  };
  ReqCRSStartLive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCRSStartLive_descriptor_,
      ReqCRSStartLive::default_instance_,
      ReqCRSStartLive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCRSStartLive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCRSStartLive));
  CmdCRSStopLive_descriptor_ = file->message_type(13);
  static const int CmdCRSStopLive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, liveurl_),
  };
  CmdCRSStopLive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCRSStopLive_descriptor_,
      CmdCRSStopLive::default_instance_,
      CmdCRSStopLive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSStopLive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCRSStopLive));
  RspCRSCreateConf_descriptor_ = file->message_type(14);
  static const int RspCRSCreateConf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, errorcode_),
  };
  RspCRSCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCRSCreateConf_descriptor_,
      RspCRSCreateConf::default_instance_,
      RspCRSCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCRSCreateConf));
  RspCRSStartRec_descriptor_ = file->message_type(15);
  static const int RspCRSStartRec_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, errorcode_),
  };
  RspCRSStartRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCRSStartRec_descriptor_,
      RspCRSStartRec::default_instance_,
      RspCRSStartRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCRSStartRec));
  RspCRSStopRec_descriptor_ = file->message_type(16);
  static const int RspCRSStopRec_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, errorcode_),
  };
  RspCRSStopRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCRSStopRec_descriptor_,
      RspCRSStopRec::default_instance_,
      RspCRSStopRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStopRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCRSStopRec));
  RspCRSStartLive_descriptor_ = file->message_type(17);
  static const int RspCRSStartLive_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, relatedsrsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, liveurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, livesvrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, liveaddrs_),
  };
  RspCRSStartLive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCRSStartLive_descriptor_,
      RspCRSStartLive::default_instance_,
      RspCRSStartLive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCRSStartLive));
  RspCRSStartLive_LiveAddr_descriptor_ = RspCRSStartLive_descriptor_->nested_type(0);
  static const int RspCRSStartLive_LiveAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive_LiveAddr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive_LiveAddr, url_),
  };
  RspCRSStartLive_LiveAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCRSStartLive_LiveAddr_descriptor_,
      RspCRSStartLive_LiveAddr::default_instance_,
      RspCRSStartLive_LiveAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive_LiveAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCRSStartLive_LiveAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCRSStartLive_LiveAddr));
  CmdCRSSeleteVideo_descriptor_ = file->message_type(18);
  static const int CmdCRSSeleteVideo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, seleteterinfo_),
  };
  CmdCRSSeleteVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCRSSeleteVideo_descriptor_,
      CmdCRSSeleteVideo::default_instance_,
      CmdCRSSeleteVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCRSSeleteVideo));
  CmdCRSSeleteVideo_TermInfo_descriptor_ = CmdCRSSeleteVideo_descriptor_->nested_type(0);
  static const int CmdCRSSeleteVideo_TermInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, videosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, recvfps_),
  };
  CmdCRSSeleteVideo_TermInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCRSSeleteVideo_TermInfo_descriptor_,
      CmdCRSSeleteVideo_TermInfo::default_instance_,
      CmdCRSSeleteVideo_TermInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCRSSeleteVideo_TermInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCRSSeleteVideo_TermInfo));
  IndCRSHeartBeatToMC_descriptor_ = file->message_type(19);
  static const int IndCRSHeartBeatToMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSHeartBeatToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSHeartBeatToMC, crsid_),
  };
  IndCRSHeartBeatToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSHeartBeatToMC_descriptor_,
      IndCRSHeartBeatToMC::default_instance_,
      IndCRSHeartBeatToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSHeartBeatToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSHeartBeatToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSHeartBeatToMC));
  IndCRSFileStorPathToMC_descriptor_ = file->message_type(20);
  static const int IndCRSFileStorPathToMC_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, recordstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, filesize_),
  };
  IndCRSFileStorPathToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSFileStorPathToMC_descriptor_,
      IndCRSFileStorPathToMC::default_instance_,
      IndCRSFileStorPathToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStorPathToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSFileStorPathToMC));
  IndCRSLiveStateToMC_descriptor_ = file->message_type(21);
  static const int IndCRSLiveStateToMC_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, livestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, statecont_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, errorcode_),
  };
  IndCRSLiveStateToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSLiveStateToMC_descriptor_,
      IndCRSLiveStateToMC::default_instance_,
      IndCRSLiveStateToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSLiveStateToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSLiveStateToMC));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5fcrs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCRSCreateConf_descriptor_, &ReqCRSCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCRSCreateConf_NetMpAddr_descriptor_, &ReqCRSCreateConf_NetMpAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCRSDestroyConf_descriptor_, &CmdCRSDestroyConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSTerJoined_descriptor_, &IndCRSTerJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSTerLeft_descriptor_, &IndCRSTerLeft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToCRS_descriptor_, &IndConfAllMPIInfoToCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_, &IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_, &IndConfAllMPIInfoToCRS_MPIsInConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPIInfoToCRS_descriptor_, &IndMPIInfoToCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndScreenInfoToCRS_descriptor_, &IndScreenInfoToCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSSelectVasVideo_descriptor_, &IndCRSSelectVasVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSSelectVasVideo_AnalyInfo_descriptor_, &IndCRSSelectVasVideo_AnalyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCRSStartRec_descriptor_, &ReqCRSStartRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCRSStopRec_descriptor_, &ReqCRSStopRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCRSReOpenNetMPMediaPort_descriptor_, &CmdCRSReOpenNetMPMediaPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatToCRS_descriptor_, &IndMCHeartBeatToCRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCRSStartLive_descriptor_, &ReqCRSStartLive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCRSStopLive_descriptor_, &CmdCRSStopLive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCRSCreateConf_descriptor_, &RspCRSCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCRSStartRec_descriptor_, &RspCRSStartRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCRSStopRec_descriptor_, &RspCRSStopRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCRSStartLive_descriptor_, &RspCRSStartLive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCRSStartLive_LiveAddr_descriptor_, &RspCRSStartLive_LiveAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCRSSeleteVideo_descriptor_, &CmdCRSSeleteVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCRSSeleteVideo_TermInfo_descriptor_, &CmdCRSSeleteVideo_TermInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSHeartBeatToMC_descriptor_, &IndCRSHeartBeatToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSFileStorPathToMC_descriptor_, &IndCRSFileStorPathToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSLiveStateToMC_descriptor_, &IndCRSLiveStateToMC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5fcrs_2eproto() {
  delete ReqCRSCreateConf::default_instance_;
  delete ReqCRSCreateConf_reflection_;
  delete ReqCRSCreateConf_NetMpAddr::default_instance_;
  delete ReqCRSCreateConf_NetMpAddr_reflection_;
  delete CmdCRSDestroyConf::default_instance_;
  delete CmdCRSDestroyConf_reflection_;
  delete IndCRSTerJoined::default_instance_;
  delete IndCRSTerJoined_reflection_;
  delete IndCRSTerLeft::default_instance_;
  delete IndCRSTerLeft_reflection_;
  delete IndConfAllMPIInfoToCRS::default_instance_;
  delete IndConfAllMPIInfoToCRS_reflection_;
  delete IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance_;
  delete IndConfAllMPIInfoToCRS_ScreensInMPI_reflection_;
  delete IndConfAllMPIInfoToCRS_MPIsInConf::default_instance_;
  delete IndConfAllMPIInfoToCRS_MPIsInConf_reflection_;
  delete IndMPIInfoToCRS::default_instance_;
  delete IndMPIInfoToCRS_reflection_;
  delete IndScreenInfoToCRS::default_instance_;
  delete IndScreenInfoToCRS_reflection_;
  delete IndCRSSelectVasVideo::default_instance_;
  delete IndCRSSelectVasVideo_reflection_;
  delete IndCRSSelectVasVideo_AnalyInfo::default_instance_;
  delete IndCRSSelectVasVideo_AnalyInfo_reflection_;
  delete ReqCRSStartRec::default_instance_;
  delete ReqCRSStartRec_reflection_;
  delete ReqCRSStopRec::default_instance_;
  delete ReqCRSStopRec_reflection_;
  delete CmdCRSReOpenNetMPMediaPort::default_instance_;
  delete CmdCRSReOpenNetMPMediaPort_reflection_;
  delete IndMCHeartBeatToCRS::default_instance_;
  delete IndMCHeartBeatToCRS_reflection_;
  delete ReqCRSStartLive::default_instance_;
  delete ReqCRSStartLive_reflection_;
  delete CmdCRSStopLive::default_instance_;
  delete CmdCRSStopLive_reflection_;
  delete RspCRSCreateConf::default_instance_;
  delete RspCRSCreateConf_reflection_;
  delete RspCRSStartRec::default_instance_;
  delete RspCRSStartRec_reflection_;
  delete RspCRSStopRec::default_instance_;
  delete RspCRSStopRec_reflection_;
  delete RspCRSStartLive::default_instance_;
  delete RspCRSStartLive_reflection_;
  delete RspCRSStartLive_LiveAddr::default_instance_;
  delete RspCRSStartLive_LiveAddr_reflection_;
  delete CmdCRSSeleteVideo::default_instance_;
  delete CmdCRSSeleteVideo_reflection_;
  delete CmdCRSSeleteVideo_TermInfo::default_instance_;
  delete CmdCRSSeleteVideo_TermInfo_reflection_;
  delete IndCRSHeartBeatToMC::default_instance_;
  delete IndCRSHeartBeatToMC_reflection_;
  delete IndCRSFileStorPathToMC::default_instance_;
  delete IndCRSFileStorPathToMC_reflection_;
  delete IndCRSLiveStateToMC::default_instance_;
  delete IndCRSLiveStateToMC_reflection_;
}

void protobuf_AddDesc_mc_5fcrs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mc_crs.proto\022\006SRMsgs\"\227\004\n\020ReqCRSCreateC"
    "onf\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crs"
    "id\030\003 \001(\r\022\024\n\014crschannelid\030\004 \001(\r\022\027\n\017mediae"
    "ncryptalg\030\005 \001(\r\022\022\n\nencryptkey\030\006 \001(\014\0225\n\tn"
    "etmpaddr\030\007 \001(\0132\".SRMsgs.ReqCRSCreateConf"
    ".NetMpAddr\022\021\n\tvideosize\030\010 \001(\r\032\310\002\n\tNetMpA"
    "ddr\022\017\n\007netmpid\030\001 \001(\r\022\024\n\014netmpmediaip\030\002 \001"
    "(\t\022\031\n\021audiodatarecvport\030\003 \001(\r\022\031\n\021audioct"
    "rlrecvport\030\004 \001(\r\022\031\n\021videodatarecvport\030\005 "
    "\001(\r\022\031\n\021videoctrlrecvport\030\006 \001(\r\022\032\n\022video2"
    "datarecvport\030\007 \001(\r\022\032\n\022video2ctrlrecvport"
    "\030\010 \001(\r\022\032\n\022video3datarecvport\030\t \001(\r\022\032\n\022vi"
    "deo3ctrlrecvport\030\n \001(\r\022\033\n\023desktopdatarec"
    "vport\030\013 \001(\r\022\033\n\023desktopctrlrecvport\030\014 \001(\r"
    "\"f\n\021CmdCRSDestroyConf\022\016\n\006confid\030\001 \001(\004\022\014\n"
    "\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022\024\n\014crschannel"
    "id\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\"q\n\017IndCRSTerJoi"
    "ned\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crs"
    "id\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001"
    "(\r\022\017\n\007tername\030\006 \001(\t\"^\n\rIndCRSTerLeft\022\016\n\006"
    "confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001("
    "\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\"\226\002\n\026"
    "IndConfAllMPIInfoToCRS\022\016\n\006confid\030\001 \001(\004\022\014"
    "\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\0227\n\004mpis\030\004 \003("
    "\0132).SRMsgs.IndConfAllMPIInfoToCRS.MPIsIn"
    "Conf\0324\n\014ScreensInMPI\022\020\n\010screenid\030\001 \001(\r\022\022"
    "\n\nscreentype\030\002 \001(\r\032`\n\nMPIsInConf\022\024\n\014mpic"
    "hannelid\030\001 \001(\r\022<\n\007screens\030\002 \003(\0132+.SRMsgs"
    ".IndConfAllMPIInfoToCRS.ScreensInMPI\"X\n\017"
    "IndMPIInfoToCRS\022\016\n\006confid\030\001 \001(\004\022\024\n\014mpich"
    "annelid\030\002 \001(\r\022\020\n\010addordel\030\003 \001(\r\022\r\n\005crsid"
    "\030\004 \001(\r\"\201\001\n\022IndScreenInfoToCRS\022\016\n\006confid\030"
    "\001 \001(\004\022\024\n\014mpichannelid\030\002 \001(\r\022\020\n\010screenid\030"
    "\003 \001(\r\022\022\n\nscreentype\030\004 \001(\r\022\020\n\010addordel\030\005 "
    "\001(\r\022\r\n\005crsid\030\006 \001(\r\"\335\001\n\024IndCRSSelectVasVi"
    "deo\022\016\n\006confid\030\001 \001(\004\022\r\n\005crsid\030\002 \001(\r\022>\n\016se"
    "lectvasinfos\030\003 \003(\0132&.SRMsgs.IndCRSSelect"
    "VasVideo.AnalyInfo\032f\n\tAnalyInfo\022\r\n\005terid"
    "\030\001 \001(\r\022\020\n\010screenid\030\002 \001(\r\022\024\n\014vaschannelid"
    "\030\003 \001(\r\022\020\n\010srcmapid\030\004 \001(\r\022\020\n\010isselect\030\005 \001"
    "(\010\"\234\001\n\016ReqCRSStartRec\022\016\n\006confid\030\001 \001(\004\022\014\n"
    "\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022\024\n\014crschannel"
    "id\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\020\n\010screenid\030"
    "\006 \001(\r\022\022\n\nscreentype\030\007 \001(\r\022\016\n\006seqnum\030\010 \001("
    "\r\"\233\001\n\rReqCRSStopRec\022\016\n\006confid\030\001 \001(\004\022\014\n\004m"
    "cid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022\024\n\014crschannelid"
    "\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\020\n\010screenid\030\006 "
    "\001(\r\022\022\n\nscreentype\030\007 \001(\r\022\016\n\006seqnum\030\010 \001(\r\""
    "\206\003\n\032CmdCRSReOpenNetMPMediaPort\022\017\n\007netmpi"
    "p\030\001 \001(\t\022\031\n\021audiodatarecvport\030\002 \001(\r\022\031\n\021au"
    "dioctrlrecvport\030\003 \001(\r\022\031\n\021videodatarecvpo"
    "rt\030\004 \001(\r\022\031\n\021videoctrlrecvport\030\005 \001(\r\022\032\n\022v"
    "ideo2datarecvport\030\006 \001(\r\022\032\n\022video2ctrlrec"
    "vport\030\007 \001(\r\022\032\n\022video3datarecvport\030\010 \001(\r\022"
    "\032\n\022video3ctrlrecvport\030\t \001(\r\022\033\n\023desktopda"
    "tarecvport\030\n \001(\r\022\033\n\023desktopctrlrecvport\030"
    "\013 \001(\r\022\016\n\006confid\030\014 \001(\004\022\014\n\004mcid\030\r \001(\r\022\r\n\005c"
    "rsid\030\016 \001(\r\022\024\n\014crschannelid\030\017 \001(\r\"2\n\023IndM"
    "CHeartBeatToCRS\022\014\n\004mcid\030\001 \001(\r\022\r\n\005crsid\030\002"
    " \001(\r\"\331\001\n\017ReqCRSStartLive\022\016\n\006confid\030\001 \001(\004"
    "\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022\024\n\014crschan"
    "nelid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\020\n\010screen"
    "id\030\006 \001(\r\022\022\n\nscreentype\030\007 \001(\r\022\016\n\006seqnum\030\010"
    " \001(\r\022\024\n\014relatedsrsid\030\t \001(\r\022\017\n\007liveurl\030\n "
    "\001(\t\022\023\n\013livesvrtype\030\013 \001(\r\"\235\001\n\016CmdCRSStopL"
    "ive\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crs"
    "id\030\003 \001(\r\022\024\n\014crschannelid\030\004 \001(\r\022\021\n\tchanne"
    "lid\030\005 \001(\r\022\020\n\010screenid\030\006 \001(\r\022\022\n\nscreentyp"
    "e\030\007 \001(\r\022\017\n\007liveurl\030\010 \001(\t\"\242\001\n\020RspCRSCreat"
    "eConf\022\014\n\004isok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014\n\004m"
    "cid\030\003 \001(\r\022\r\n\005crsid\030\004 \001(\r\022\024\n\014crschannelid"
    "\030\005 \001(\r\022\026\n\016relatednetmpid\030\006 \001(\r\022\022\n\nfailre"
    "ason\030\007 \001(\t\022\021\n\terrorcode\030\010 \001(\r\"\251\002\n\016RspCRS"
    "StartRec\022\014\n\004isok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014"
    "\n\004mcid\030\003 \001(\r\022\r\n\005crsid\030\004 \001(\r\022\024\n\014crschanne"
    "lid\030\005 \001(\r\022\021\n\tchannelid\030\006 \001(\r\022\020\n\010screenid"
    "\030\007 \001(\r\022\022\n\nscreentype\030\010 \001(\r\022\025\n\rfilestorsv"
    "rip\030\t \001(\t\022\024\n\014filestorpath\030\n \001(\t\022\023\n\013sdefi"
    "lepath\030\013 \001(\t\022\022\n\nfailreason\030\014 \001(\t\022\024\n\014rela"
    "tivepath\030\r \001(\t\022\016\n\006seqnum\030\016 \001(\r\022\021\n\terrorc"
    "ode\030\017 \001(\r\"\272\002\n\rRspCRSStopRec\022\014\n\004isok\030\001 \001("
    "\010\022\016\n\006confid\030\002 \001(\004\022\014\n\004mcid\030\003 \001(\r\022\r\n\005crsid"
    "\030\004 \001(\r\022\024\n\014crschannelid\030\005 \001(\r\022\021\n\tchanneli"
    "d\030\006 \001(\r\022\020\n\010screenid\030\007 \001(\r\022\022\n\nscreentype\030"
    "\010 \001(\r\022\025\n\rfilestorsvrip\030\t \001(\t\022\024\n\014filestor"
    "path\030\n \001(\t\022\023\n\013sdefilepath\030\013 \001(\t\022\022\n\nfailr"
    "eason\030\014 \001(\t\022\024\n\014relativepath\030\r \001(\t\022\016\n\006seq"
    "num\030\016 \001(\r\022\020\n\010filesize\030\017 \001(\004\022\021\n\terrorcode"
    "\030\020 \001(\r\"\352\002\n\017RspCRSStartLive\022\014\n\004isok\030\001 \001(\010"
    "\022\016\n\006confid\030\002 \001(\004\022\014\n\004mcid\030\003 \001(\r\022\r\n\005crsid\030"
    "\004 \001(\r\022\024\n\014crschannelid\030\005 \001(\r\022\021\n\tchannelid"
    "\030\006 \001(\r\022\020\n\010screenid\030\007 \001(\r\022\022\n\nscreentype\030\010"
    " \001(\r\022\024\n\014relatedsrsid\030\t \001(\r\022\017\n\007liveurl\030\n "
    "\001(\t\022\016\n\006seqnum\030\013 \001(\r\022\022\n\nfailreason\030\014 \001(\t\022"
    "\021\n\terrorcode\030\r \001(\r\022\023\n\013livesvrtype\030\016 \001(\r\022"
    "3\n\tliveaddrs\030\017 \003(\0132 .SRMsgs.RspCRSStartL"
    "ive.LiveAddr\032%\n\010LiveAddr\022\014\n\004type\030\001 \001(\r\022\013"
    "\n\003url\030\002 \001(\t\"\342\001\n\021CmdCRSSeleteVideo\022\016\n\006con"
    "fid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022\024"
    "\n\014crschannelid\030\004 \001(\r\0229\n\rseleteterinfo\030\005 "
    "\003(\0132\".SRMsgs.CmdCRSSeleteVideo.TermInfo\032"
    "O\n\010TermInfo\022\r\n\005terid\030\001 \001(\r\022\020\n\010screenid\030\002"
    " \001(\r\022\021\n\tvideosize\030\003 \001(\r\022\017\n\007recvfps\030\004 \001(\r"
    "\"2\n\023IndCRSHeartBeatToMC\022\014\n\004mcid\030\001 \001(\r\022\r\n"
    "\005crsid\030\002 \001(\r\"\223\002\n\026IndCRSFileStorPathToMC\022"
    "\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003"
    " \001(\r\022\024\n\014crschannelid\030\004 \001(\r\022\021\n\tchannelid\030"
    "\005 \001(\r\022\020\n\010screenid\030\006 \001(\r\022\022\n\nscreentype\030\007 "
    "\001(\r\022\025\n\rfilestorsvrip\030\010 \001(\t\022\024\n\014filestorpa"
    "th\030\t \001(\t\022\023\n\013sdefilepath\030\n \001(\t\022\024\n\014relativ"
    "epath\030\013 \001(\t\022\023\n\013recordstate\030\014 \001(\r\022\020\n\010file"
    "size\030\r \001(\004\"\312\001\n\023IndCRSLiveStateToMC\022\016\n\006co"
    "nfid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005crsid\030\003 \001(\r\022"
    "\024\n\014crschannelid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r"
    "\022\020\n\010screenid\030\006 \001(\r\022\022\n\nscreentype\030\007 \001(\r\022\021"
    "\n\tlivestate\030\010 \001(\r\022\021\n\tstatecont\030\t \001(\t\022\021\n\t"
    "errorcode\030\n \001(\r", 4655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_crs.proto", &protobuf_RegisterTypes);
  ReqCRSCreateConf::default_instance_ = new ReqCRSCreateConf();
  ReqCRSCreateConf_NetMpAddr::default_instance_ = new ReqCRSCreateConf_NetMpAddr();
  CmdCRSDestroyConf::default_instance_ = new CmdCRSDestroyConf();
  IndCRSTerJoined::default_instance_ = new IndCRSTerJoined();
  IndCRSTerLeft::default_instance_ = new IndCRSTerLeft();
  IndConfAllMPIInfoToCRS::default_instance_ = new IndConfAllMPIInfoToCRS();
  IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance_ = new IndConfAllMPIInfoToCRS_ScreensInMPI();
  IndConfAllMPIInfoToCRS_MPIsInConf::default_instance_ = new IndConfAllMPIInfoToCRS_MPIsInConf();
  IndMPIInfoToCRS::default_instance_ = new IndMPIInfoToCRS();
  IndScreenInfoToCRS::default_instance_ = new IndScreenInfoToCRS();
  IndCRSSelectVasVideo::default_instance_ = new IndCRSSelectVasVideo();
  IndCRSSelectVasVideo_AnalyInfo::default_instance_ = new IndCRSSelectVasVideo_AnalyInfo();
  ReqCRSStartRec::default_instance_ = new ReqCRSStartRec();
  ReqCRSStopRec::default_instance_ = new ReqCRSStopRec();
  CmdCRSReOpenNetMPMediaPort::default_instance_ = new CmdCRSReOpenNetMPMediaPort();
  IndMCHeartBeatToCRS::default_instance_ = new IndMCHeartBeatToCRS();
  ReqCRSStartLive::default_instance_ = new ReqCRSStartLive();
  CmdCRSStopLive::default_instance_ = new CmdCRSStopLive();
  RspCRSCreateConf::default_instance_ = new RspCRSCreateConf();
  RspCRSStartRec::default_instance_ = new RspCRSStartRec();
  RspCRSStopRec::default_instance_ = new RspCRSStopRec();
  RspCRSStartLive::default_instance_ = new RspCRSStartLive();
  RspCRSStartLive_LiveAddr::default_instance_ = new RspCRSStartLive_LiveAddr();
  CmdCRSSeleteVideo::default_instance_ = new CmdCRSSeleteVideo();
  CmdCRSSeleteVideo_TermInfo::default_instance_ = new CmdCRSSeleteVideo_TermInfo();
  IndCRSHeartBeatToMC::default_instance_ = new IndCRSHeartBeatToMC();
  IndCRSFileStorPathToMC::default_instance_ = new IndCRSFileStorPathToMC();
  IndCRSLiveStateToMC::default_instance_ = new IndCRSLiveStateToMC();
  ReqCRSCreateConf::default_instance_->InitAsDefaultInstance();
  ReqCRSCreateConf_NetMpAddr::default_instance_->InitAsDefaultInstance();
  CmdCRSDestroyConf::default_instance_->InitAsDefaultInstance();
  IndCRSTerJoined::default_instance_->InitAsDefaultInstance();
  IndCRSTerLeft::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToCRS::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToCRS_MPIsInConf::default_instance_->InitAsDefaultInstance();
  IndMPIInfoToCRS::default_instance_->InitAsDefaultInstance();
  IndScreenInfoToCRS::default_instance_->InitAsDefaultInstance();
  IndCRSSelectVasVideo::default_instance_->InitAsDefaultInstance();
  IndCRSSelectVasVideo_AnalyInfo::default_instance_->InitAsDefaultInstance();
  ReqCRSStartRec::default_instance_->InitAsDefaultInstance();
  ReqCRSStopRec::default_instance_->InitAsDefaultInstance();
  CmdCRSReOpenNetMPMediaPort::default_instance_->InitAsDefaultInstance();
  IndMCHeartBeatToCRS::default_instance_->InitAsDefaultInstance();
  ReqCRSStartLive::default_instance_->InitAsDefaultInstance();
  CmdCRSStopLive::default_instance_->InitAsDefaultInstance();
  RspCRSCreateConf::default_instance_->InitAsDefaultInstance();
  RspCRSStartRec::default_instance_->InitAsDefaultInstance();
  RspCRSStopRec::default_instance_->InitAsDefaultInstance();
  RspCRSStartLive::default_instance_->InitAsDefaultInstance();
  RspCRSStartLive_LiveAddr::default_instance_->InitAsDefaultInstance();
  CmdCRSSeleteVideo::default_instance_->InitAsDefaultInstance();
  CmdCRSSeleteVideo_TermInfo::default_instance_->InitAsDefaultInstance();
  IndCRSHeartBeatToMC::default_instance_->InitAsDefaultInstance();
  IndCRSFileStorPathToMC::default_instance_->InitAsDefaultInstance();
  IndCRSLiveStateToMC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5fcrs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5fcrs_2eproto {
  StaticDescriptorInitializer_mc_5fcrs_2eproto() {
    protobuf_AddDesc_mc_5fcrs_2eproto();
  }
} static_descriptor_initializer_mc_5fcrs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqCRSCreateConf_NetMpAddr::kNetmpidFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kNetmpmediaipFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kAudiodatarecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kAudioctrlrecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideodatarecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideoctrlrecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideo2DatarecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideo2CtrlrecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideo3DatarecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kVideo3CtrlrecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kDesktopdatarecvportFieldNumber;
const int ReqCRSCreateConf_NetMpAddr::kDesktopctrlrecvportFieldNumber;
#endif  // !_MSC_VER

ReqCRSCreateConf_NetMpAddr::ReqCRSCreateConf_NetMpAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqCRSCreateConf.NetMpAddr)
}

void ReqCRSCreateConf_NetMpAddr::InitAsDefaultInstance() {
}

ReqCRSCreateConf_NetMpAddr::ReqCRSCreateConf_NetMpAddr(const ReqCRSCreateConf_NetMpAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqCRSCreateConf.NetMpAddr)
}

void ReqCRSCreateConf_NetMpAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpid_ = 0u;
  netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCRSCreateConf_NetMpAddr::~ReqCRSCreateConf_NetMpAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  SharedDtor();
}

void ReqCRSCreateConf_NetMpAddr::SharedDtor() {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpmediaip_;
  }
  if (this != default_instance_) {
  }
}

void ReqCRSCreateConf_NetMpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCRSCreateConf_NetMpAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCRSCreateConf_NetMpAddr_descriptor_;
}

const ReqCRSCreateConf_NetMpAddr& ReqCRSCreateConf_NetMpAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

ReqCRSCreateConf_NetMpAddr* ReqCRSCreateConf_NetMpAddr::default_instance_ = NULL;

ReqCRSCreateConf_NetMpAddr* ReqCRSCreateConf_NetMpAddr::New() const {
  return new ReqCRSCreateConf_NetMpAddr;
}

void ReqCRSCreateConf_NetMpAddr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqCRSCreateConf_NetMpAddr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(netmpid_, video2ctrlrecvport_);
    if (has_netmpmediaip()) {
      if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpmediaip_->clear();
      }
    }
  }
  ZR_(video3datarecvport_, desktopctrlrecvport_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCRSCreateConf_NetMpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 netmpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_netmpmediaip;
        break;
      }

      // optional string netmpmediaip = 2;
      case 2: {
        if (tag == 18) {
         parse_netmpmediaip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpmediaip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpmediaip().data(), this->netmpmediaip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpmediaip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  return false;
#undef DO_
}

void ReqCRSCreateConf_NetMpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->netmpid(), output);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->netmpmediaip(), output);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->desktopctrlrecvport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqCRSCreateConf.NetMpAddr)
}

::google::protobuf::uint8* ReqCRSCreateConf_NetMpAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->netmpid(), target);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->netmpmediaip(), target);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->desktopctrlrecvport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqCRSCreateConf.NetMpAddr)
  return target;
}

int ReqCRSCreateConf_NetMpAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 netmpid = 1;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string netmpmediaip = 2;
    if (has_netmpmediaip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpmediaip());
    }

    // optional uint32 audiodatarecvport = 3;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 4;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 5;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 6;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 7;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 8;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3datarecvport = 9;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 10;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 11;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 12;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCRSCreateConf_NetMpAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCRSCreateConf_NetMpAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCRSCreateConf_NetMpAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCRSCreateConf_NetMpAddr::MergeFrom(const ReqCRSCreateConf_NetMpAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_netmpmediaip()) {
      set_netmpmediaip(from.netmpmediaip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCRSCreateConf_NetMpAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCRSCreateConf_NetMpAddr::CopyFrom(const ReqCRSCreateConf_NetMpAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCRSCreateConf_NetMpAddr::IsInitialized() const {

  return true;
}

void ReqCRSCreateConf_NetMpAddr::Swap(ReqCRSCreateConf_NetMpAddr* other) {
  if (other != this) {
    std::swap(netmpid_, other->netmpid_);
    std::swap(netmpmediaip_, other->netmpmediaip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCRSCreateConf_NetMpAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCRSCreateConf_NetMpAddr_descriptor_;
  metadata.reflection = ReqCRSCreateConf_NetMpAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqCRSCreateConf::kConfidFieldNumber;
const int ReqCRSCreateConf::kMcidFieldNumber;
const int ReqCRSCreateConf::kCrsidFieldNumber;
const int ReqCRSCreateConf::kCrschannelidFieldNumber;
const int ReqCRSCreateConf::kMediaencryptalgFieldNumber;
const int ReqCRSCreateConf::kEncryptkeyFieldNumber;
const int ReqCRSCreateConf::kNetmpaddrFieldNumber;
const int ReqCRSCreateConf::kVideosizeFieldNumber;
#endif  // !_MSC_VER

ReqCRSCreateConf::ReqCRSCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqCRSCreateConf)
}

void ReqCRSCreateConf::InitAsDefaultInstance() {
  netmpaddr_ = const_cast< ::SRMsgs::ReqCRSCreateConf_NetMpAddr*>(&::SRMsgs::ReqCRSCreateConf_NetMpAddr::default_instance());
}

ReqCRSCreateConf::ReqCRSCreateConf(const ReqCRSCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqCRSCreateConf)
}

void ReqCRSCreateConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  mediaencryptalg_ = 0u;
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpaddr_ = NULL;
  videosize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCRSCreateConf::~ReqCRSCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqCRSCreateConf)
  SharedDtor();
}

void ReqCRSCreateConf::SharedDtor() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
    delete netmpaddr_;
  }
}

void ReqCRSCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCRSCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCRSCreateConf_descriptor_;
}

const ReqCRSCreateConf& ReqCRSCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

ReqCRSCreateConf* ReqCRSCreateConf::default_instance_ = NULL;

ReqCRSCreateConf* ReqCRSCreateConf::New() const {
  return new ReqCRSCreateConf;
}

void ReqCRSCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqCRSCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, mediaencryptalg_);
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
    if (has_netmpaddr()) {
      if (netmpaddr_ != NULL) netmpaddr_->::SRMsgs::ReqCRSCreateConf_NetMpAddr::Clear();
    }
    videosize_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCRSCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqCRSCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mediaencryptalg;
        break;
      }

      // optional uint32 mediaencryptalg = 5;
      case 5: {
        if (tag == 40) {
         parse_mediaencryptalg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mediaencryptalg_)));
          set_has_mediaencryptalg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_encryptkey;
        break;
      }

      // optional bytes encryptkey = 6;
      case 6: {
        if (tag == 50) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_netmpaddr;
        break;
      }

      // optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
      case 7: {
        if (tag == 58) {
         parse_netmpaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netmpaddr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 8;
      case 8: {
        if (tag == 64) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqCRSCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqCRSCreateConf)
  return false;
#undef DO_
}

void ReqCRSCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqCRSCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 mediaencryptalg = 5;
  if (has_mediaencryptalg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mediaencryptalg(), output);
  }

  // optional bytes encryptkey = 6;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->encryptkey(), output);
  }

  // optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
  if (has_netmpaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->netmpaddr(), output);
  }

  // optional uint32 videosize = 8;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->videosize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqCRSCreateConf)
}

::google::protobuf::uint8* ReqCRSCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqCRSCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 mediaencryptalg = 5;
  if (has_mediaencryptalg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mediaencryptalg(), target);
  }

  // optional bytes encryptkey = 6;
  if (has_encryptkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->encryptkey(), target);
  }

  // optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
  if (has_netmpaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->netmpaddr(), target);
  }

  // optional uint32 videosize = 8;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->videosize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqCRSCreateConf)
  return target;
}

int ReqCRSCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 mediaencryptalg = 5;
    if (has_mediaencryptalg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mediaencryptalg());
    }

    // optional bytes encryptkey = 6;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptkey());
    }

    // optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
    if (has_netmpaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netmpaddr());
    }

    // optional uint32 videosize = 8;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCRSCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCRSCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCRSCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCRSCreateConf::MergeFrom(const ReqCRSCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_mediaencryptalg()) {
      set_mediaencryptalg(from.mediaencryptalg());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
    if (from.has_netmpaddr()) {
      mutable_netmpaddr()->::SRMsgs::ReqCRSCreateConf_NetMpAddr::MergeFrom(from.netmpaddr());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCRSCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCRSCreateConf::CopyFrom(const ReqCRSCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCRSCreateConf::IsInitialized() const {

  return true;
}

void ReqCRSCreateConf::Swap(ReqCRSCreateConf* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(mediaencryptalg_, other->mediaencryptalg_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(netmpaddr_, other->netmpaddr_);
    std::swap(videosize_, other->videosize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCRSCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCRSCreateConf_descriptor_;
  metadata.reflection = ReqCRSCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCRSDestroyConf::kConfidFieldNumber;
const int CmdCRSDestroyConf::kMcidFieldNumber;
const int CmdCRSDestroyConf::kCrsidFieldNumber;
const int CmdCRSDestroyConf::kCrschannelidFieldNumber;
const int CmdCRSDestroyConf::kReasonFieldNumber;
#endif  // !_MSC_VER

CmdCRSDestroyConf::CmdCRSDestroyConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdCRSDestroyConf)
}

void CmdCRSDestroyConf::InitAsDefaultInstance() {
}

CmdCRSDestroyConf::CmdCRSDestroyConf(const CmdCRSDestroyConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdCRSDestroyConf)
}

void CmdCRSDestroyConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCRSDestroyConf::~CmdCRSDestroyConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdCRSDestroyConf)
  SharedDtor();
}

void CmdCRSDestroyConf::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CmdCRSDestroyConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCRSDestroyConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCRSDestroyConf_descriptor_;
}

const CmdCRSDestroyConf& CmdCRSDestroyConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

CmdCRSDestroyConf* CmdCRSDestroyConf::default_instance_ = NULL;

CmdCRSDestroyConf* CmdCRSDestroyConf::New() const {
  return new CmdCRSDestroyConf;
}

void CmdCRSDestroyConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdCRSDestroyConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, crsid_);
    crschannelid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCRSDestroyConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdCRSDestroyConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdCRSDestroyConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdCRSDestroyConf)
  return false;
#undef DO_
}

void CmdCRSDestroyConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdCRSDestroyConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdCRSDestroyConf)
}

::google::protobuf::uint8* CmdCRSDestroyConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdCRSDestroyConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdCRSDestroyConf)
  return target;
}

int CmdCRSDestroyConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCRSDestroyConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCRSDestroyConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCRSDestroyConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCRSDestroyConf::MergeFrom(const CmdCRSDestroyConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCRSDestroyConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCRSDestroyConf::CopyFrom(const CmdCRSDestroyConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCRSDestroyConf::IsInitialized() const {

  return true;
}

void CmdCRSDestroyConf::Swap(CmdCRSDestroyConf* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCRSDestroyConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCRSDestroyConf_descriptor_;
  metadata.reflection = CmdCRSDestroyConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSTerJoined::kConfidFieldNumber;
const int IndCRSTerJoined::kMcidFieldNumber;
const int IndCRSTerJoined::kCrsidFieldNumber;
const int IndCRSTerJoined::kTeridFieldNumber;
const int IndCRSTerJoined::kChannelidFieldNumber;
const int IndCRSTerJoined::kTernameFieldNumber;
#endif  // !_MSC_VER

IndCRSTerJoined::IndCRSTerJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSTerJoined)
}

void IndCRSTerJoined::InitAsDefaultInstance() {
}

IndCRSTerJoined::IndCRSTerJoined(const IndCRSTerJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSTerJoined)
}

void IndCRSTerJoined::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSTerJoined::~IndCRSTerJoined() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSTerJoined)
  SharedDtor();
}

void IndCRSTerJoined::SharedDtor() {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tername_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSTerJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSTerJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSTerJoined_descriptor_;
}

const IndCRSTerJoined& IndCRSTerJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSTerJoined* IndCRSTerJoined::default_instance_ = NULL;

IndCRSTerJoined* IndCRSTerJoined::New() const {
  return new IndCRSTerJoined;
}

void IndCRSTerJoined::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSTerJoined*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    if (has_tername()) {
      if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSTerJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSTerJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tername;
        break;
      }

      // optional string tername = 6;
      case 6: {
        if (tag == 50) {
         parse_tername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tername().data(), this->tername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSTerJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSTerJoined)
  return false;
#undef DO_
}

void IndCRSTerJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional string tername = 6;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSTerJoined)
}

::google::protobuf::uint8* IndCRSTerJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional string tername = 6;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSTerJoined)
  return target;
}

int IndCRSTerJoined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional string tername = 6;
    if (has_tername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSTerJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSTerJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSTerJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSTerJoined::MergeFrom(const IndCRSTerJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_tername()) {
      set_tername(from.tername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSTerJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSTerJoined::CopyFrom(const IndCRSTerJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSTerJoined::IsInitialized() const {

  return true;
}

void IndCRSTerJoined::Swap(IndCRSTerJoined* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(tername_, other->tername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSTerJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSTerJoined_descriptor_;
  metadata.reflection = IndCRSTerJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSTerLeft::kConfidFieldNumber;
const int IndCRSTerLeft::kMcidFieldNumber;
const int IndCRSTerLeft::kCrsidFieldNumber;
const int IndCRSTerLeft::kTeridFieldNumber;
const int IndCRSTerLeft::kChannelidFieldNumber;
#endif  // !_MSC_VER

IndCRSTerLeft::IndCRSTerLeft()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSTerLeft)
}

void IndCRSTerLeft::InitAsDefaultInstance() {
}

IndCRSTerLeft::IndCRSTerLeft(const IndCRSTerLeft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSTerLeft)
}

void IndCRSTerLeft::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSTerLeft::~IndCRSTerLeft() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSTerLeft)
  SharedDtor();
}

void IndCRSTerLeft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSTerLeft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSTerLeft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSTerLeft_descriptor_;
}

const IndCRSTerLeft& IndCRSTerLeft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSTerLeft* IndCRSTerLeft::default_instance_ = NULL;

IndCRSTerLeft* IndCRSTerLeft::New() const {
  return new IndCRSTerLeft;
}

void IndCRSTerLeft::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSTerLeft*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSTerLeft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSTerLeft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSTerLeft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSTerLeft)
  return false;
#undef DO_
}

void IndCRSTerLeft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSTerLeft)
}

::google::protobuf::uint8* IndCRSTerLeft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSTerLeft)
  return target;
}

int IndCRSTerLeft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSTerLeft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSTerLeft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSTerLeft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSTerLeft::MergeFrom(const IndCRSTerLeft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSTerLeft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSTerLeft::CopyFrom(const IndCRSTerLeft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSTerLeft::IsInitialized() const {

  return true;
}

void IndCRSTerLeft::Swap(IndCRSTerLeft* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSTerLeft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSTerLeft_descriptor_;
  metadata.reflection = IndCRSTerLeft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllMPIInfoToCRS_ScreensInMPI::kScreenidFieldNumber;
const int IndConfAllMPIInfoToCRS_ScreensInMPI::kScreentypeFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToCRS_ScreensInMPI::IndConfAllMPIInfoToCRS_ScreensInMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToCRS_ScreensInMPI::IndConfAllMPIInfoToCRS_ScreensInMPI(const IndConfAllMPIInfoToCRS_ScreensInMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::SharedCtor() {
  _cached_size_ = 0;
  screenid_ = 0u;
  screentype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToCRS_ScreensInMPI::~IndConfAllMPIInfoToCRS_ScreensInMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  SharedDtor();
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS_ScreensInMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_;
}

const IndConfAllMPIInfoToCRS_ScreensInMPI& IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToCRS_ScreensInMPI* IndConfAllMPIInfoToCRS_ScreensInMPI::default_instance_ = NULL;

IndConfAllMPIInfoToCRS_ScreensInMPI* IndConfAllMPIInfoToCRS_ScreensInMPI::New() const {
  return new IndConfAllMPIInfoToCRS_ScreensInMPI;
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToCRS_ScreensInMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(screenid_, screentype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToCRS_ScreensInMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 screenid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 2;
      case 2: {
        if (tag == 16) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->screenid(), output);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
}

::google::protobuf::uint8* IndConfAllMPIInfoToCRS_ScreensInMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->screenid(), target);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
  return target;
}

int IndConfAllMPIInfoToCRS_ScreensInMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 screenid = 1;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 2;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToCRS_ScreensInMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToCRS_ScreensInMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::MergeFrom(const IndConfAllMPIInfoToCRS_ScreensInMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::CopyFrom(const IndConfAllMPIInfoToCRS_ScreensInMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToCRS_ScreensInMPI::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToCRS_ScreensInMPI::Swap(IndConfAllMPIInfoToCRS_ScreensInMPI* other) {
  if (other != this) {
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToCRS_ScreensInMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToCRS_ScreensInMPI_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToCRS_ScreensInMPI_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToCRS_MPIsInConf::kMpichannelidFieldNumber;
const int IndConfAllMPIInfoToCRS_MPIsInConf::kScreensFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToCRS_MPIsInConf::IndConfAllMPIInfoToCRS_MPIsInConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
}

void IndConfAllMPIInfoToCRS_MPIsInConf::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToCRS_MPIsInConf::IndConfAllMPIInfoToCRS_MPIsInConf(const IndConfAllMPIInfoToCRS_MPIsInConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
}

void IndConfAllMPIInfoToCRS_MPIsInConf::SharedCtor() {
  _cached_size_ = 0;
  mpichannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToCRS_MPIsInConf::~IndConfAllMPIInfoToCRS_MPIsInConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  SharedDtor();
}

void IndConfAllMPIInfoToCRS_MPIsInConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToCRS_MPIsInConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS_MPIsInConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_;
}

const IndConfAllMPIInfoToCRS_MPIsInConf& IndConfAllMPIInfoToCRS_MPIsInConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToCRS_MPIsInConf* IndConfAllMPIInfoToCRS_MPIsInConf::default_instance_ = NULL;

IndConfAllMPIInfoToCRS_MPIsInConf* IndConfAllMPIInfoToCRS_MPIsInConf::New() const {
  return new IndConfAllMPIInfoToCRS_MPIsInConf;
}

void IndConfAllMPIInfoToCRS_MPIsInConf::Clear() {
  mpichannelid_ = 0u;
  screens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToCRS_MPIsInConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mpichannelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_screens;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
      case 2: {
        if (tag == 18) {
         parse_screens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_screens;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToCRS_MPIsInConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mpichannelid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
  for (int i = 0; i < this->screens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->screens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
}

::google::protobuf::uint8* IndConfAllMPIInfoToCRS_MPIsInConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mpichannelid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
  for (int i = 0; i < this->screens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->screens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
  return target;
}

int IndConfAllMPIInfoToCRS_MPIsInConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mpichannelid = 1;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
  total_size += 1 * this->screens_size();
  for (int i = 0; i < this->screens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToCRS_MPIsInConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToCRS_MPIsInConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToCRS_MPIsInConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToCRS_MPIsInConf::MergeFrom(const IndConfAllMPIInfoToCRS_MPIsInConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  screens_.MergeFrom(from.screens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToCRS_MPIsInConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToCRS_MPIsInConf::CopyFrom(const IndConfAllMPIInfoToCRS_MPIsInConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToCRS_MPIsInConf::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToCRS_MPIsInConf::Swap(IndConfAllMPIInfoToCRS_MPIsInConf* other) {
  if (other != this) {
    std::swap(mpichannelid_, other->mpichannelid_);
    screens_.Swap(&other->screens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToCRS_MPIsInConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToCRS_MPIsInConf_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToCRS_MPIsInConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToCRS::kConfidFieldNumber;
const int IndConfAllMPIInfoToCRS::kMcidFieldNumber;
const int IndConfAllMPIInfoToCRS::kCrsidFieldNumber;
const int IndConfAllMPIInfoToCRS::kMpisFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToCRS::IndConfAllMPIInfoToCRS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToCRS)
}

void IndConfAllMPIInfoToCRS::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToCRS::IndConfAllMPIInfoToCRS(const IndConfAllMPIInfoToCRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToCRS)
}

void IndConfAllMPIInfoToCRS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToCRS::~IndConfAllMPIInfoToCRS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToCRS)
  SharedDtor();
}

void IndConfAllMPIInfoToCRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToCRS_descriptor_;
}

const IndConfAllMPIInfoToCRS& IndConfAllMPIInfoToCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToCRS* IndConfAllMPIInfoToCRS::default_instance_ = NULL;

IndConfAllMPIInfoToCRS* IndConfAllMPIInfoToCRS::New() const {
  return new IndConfAllMPIInfoToCRS;
}

void IndConfAllMPIInfoToCRS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToCRS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, crsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mpis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToCRS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
      case 4: {
        if (tag == 34) {
         parse_mpis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mpis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToCRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToCRS)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mpis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToCRS)
}

::google::protobuf::uint8* IndConfAllMPIInfoToCRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mpis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToCRS)
  return target;
}

int IndConfAllMPIInfoToCRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
  total_size += 1 * this->mpis_size();
  for (int i = 0; i < this->mpis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mpis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToCRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToCRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToCRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToCRS::MergeFrom(const IndConfAllMPIInfoToCRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  mpis_.MergeFrom(from.mpis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToCRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToCRS::CopyFrom(const IndConfAllMPIInfoToCRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToCRS::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToCRS::Swap(IndConfAllMPIInfoToCRS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    mpis_.Swap(&other->mpis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToCRS_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToCRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPIInfoToCRS::kConfidFieldNumber;
const int IndMPIInfoToCRS::kMpichannelidFieldNumber;
const int IndMPIInfoToCRS::kAddordelFieldNumber;
const int IndMPIInfoToCRS::kCrsidFieldNumber;
#endif  // !_MSC_VER

IndMPIInfoToCRS::IndMPIInfoToCRS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPIInfoToCRS)
}

void IndMPIInfoToCRS::InitAsDefaultInstance() {
}

IndMPIInfoToCRS::IndMPIInfoToCRS(const IndMPIInfoToCRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPIInfoToCRS)
}

void IndMPIInfoToCRS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mpichannelid_ = 0u;
  addordel_ = 0u;
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPIInfoToCRS::~IndMPIInfoToCRS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPIInfoToCRS)
  SharedDtor();
}

void IndMPIInfoToCRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPIInfoToCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPIInfoToCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPIInfoToCRS_descriptor_;
}

const IndMPIInfoToCRS& IndMPIInfoToCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndMPIInfoToCRS* IndMPIInfoToCRS::default_instance_ = NULL;

IndMPIInfoToCRS* IndMPIInfoToCRS::New() const {
  return new IndMPIInfoToCRS;
}

void IndMPIInfoToCRS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPIInfoToCRS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, crsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPIInfoToCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPIInfoToCRS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 3;
      case 3: {
        if (tag == 24) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPIInfoToCRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPIInfoToCRS)
  return false;
#undef DO_
}

void IndMPIInfoToCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPIInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpichannelid(), output);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addordel(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPIInfoToCRS)
}

::google::protobuf::uint8* IndMPIInfoToCRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPIInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpichannelid(), target);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addordel(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPIInfoToCRS)
  return target;
}

int IndMPIInfoToCRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mpichannelid = 2;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 addordel = 3;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPIInfoToCRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPIInfoToCRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPIInfoToCRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPIInfoToCRS::MergeFrom(const IndMPIInfoToCRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPIInfoToCRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPIInfoToCRS::CopyFrom(const IndMPIInfoToCRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPIInfoToCRS::IsInitialized() const {

  return true;
}

void IndMPIInfoToCRS::Swap(IndMPIInfoToCRS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(crsid_, other->crsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPIInfoToCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPIInfoToCRS_descriptor_;
  metadata.reflection = IndMPIInfoToCRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndScreenInfoToCRS::kConfidFieldNumber;
const int IndScreenInfoToCRS::kMpichannelidFieldNumber;
const int IndScreenInfoToCRS::kScreenidFieldNumber;
const int IndScreenInfoToCRS::kScreentypeFieldNumber;
const int IndScreenInfoToCRS::kAddordelFieldNumber;
const int IndScreenInfoToCRS::kCrsidFieldNumber;
#endif  // !_MSC_VER

IndScreenInfoToCRS::IndScreenInfoToCRS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndScreenInfoToCRS)
}

void IndScreenInfoToCRS::InitAsDefaultInstance() {
}

IndScreenInfoToCRS::IndScreenInfoToCRS(const IndScreenInfoToCRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndScreenInfoToCRS)
}

void IndScreenInfoToCRS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mpichannelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  addordel_ = 0u;
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndScreenInfoToCRS::~IndScreenInfoToCRS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndScreenInfoToCRS)
  SharedDtor();
}

void IndScreenInfoToCRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndScreenInfoToCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndScreenInfoToCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndScreenInfoToCRS_descriptor_;
}

const IndScreenInfoToCRS& IndScreenInfoToCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndScreenInfoToCRS* IndScreenInfoToCRS::default_instance_ = NULL;

IndScreenInfoToCRS* IndScreenInfoToCRS::New() const {
  return new IndScreenInfoToCRS;
}

void IndScreenInfoToCRS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndScreenInfoToCRS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, crsid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndScreenInfoToCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndScreenInfoToCRS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 3;
      case 3: {
        if (tag == 24) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 4;
      case 4: {
        if (tag == 32) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 5;
      case 5: {
        if (tag == 40) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 6;
      case 6: {
        if (tag == 48) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndScreenInfoToCRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndScreenInfoToCRS)
  return false;
#undef DO_
}

void IndScreenInfoToCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndScreenInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpichannelid(), output);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screenid(), output);
  }

  // optional uint32 screentype = 4;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->screentype(), output);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addordel(), output);
  }

  // optional uint32 crsid = 6;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->crsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndScreenInfoToCRS)
}

::google::protobuf::uint8* IndScreenInfoToCRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndScreenInfoToCRS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpichannelid(), target);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screenid(), target);
  }

  // optional uint32 screentype = 4;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->screentype(), target);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addordel(), target);
  }

  // optional uint32 crsid = 6;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->crsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndScreenInfoToCRS)
  return target;
}

int IndScreenInfoToCRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mpichannelid = 2;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 screenid = 3;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 4;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 addordel = 5;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint32 crsid = 6;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndScreenInfoToCRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndScreenInfoToCRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndScreenInfoToCRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndScreenInfoToCRS::MergeFrom(const IndScreenInfoToCRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndScreenInfoToCRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndScreenInfoToCRS::CopyFrom(const IndScreenInfoToCRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndScreenInfoToCRS::IsInitialized() const {

  return true;
}

void IndScreenInfoToCRS::Swap(IndScreenInfoToCRS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(addordel_, other->addordel_);
    std::swap(crsid_, other->crsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndScreenInfoToCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndScreenInfoToCRS_descriptor_;
  metadata.reflection = IndScreenInfoToCRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSSelectVasVideo_AnalyInfo::kTeridFieldNumber;
const int IndCRSSelectVasVideo_AnalyInfo::kScreenidFieldNumber;
const int IndCRSSelectVasVideo_AnalyInfo::kVaschannelidFieldNumber;
const int IndCRSSelectVasVideo_AnalyInfo::kSrcmapidFieldNumber;
const int IndCRSSelectVasVideo_AnalyInfo::kIsselectFieldNumber;
#endif  // !_MSC_VER

IndCRSSelectVasVideo_AnalyInfo::IndCRSSelectVasVideo_AnalyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
}

void IndCRSSelectVasVideo_AnalyInfo::InitAsDefaultInstance() {
}

IndCRSSelectVasVideo_AnalyInfo::IndCRSSelectVasVideo_AnalyInfo(const IndCRSSelectVasVideo_AnalyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
}

void IndCRSSelectVasVideo_AnalyInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  screenid_ = 0u;
  vaschannelid_ = 0u;
  srcmapid_ = 0u;
  isselect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSSelectVasVideo_AnalyInfo::~IndCRSSelectVasVideo_AnalyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  SharedDtor();
}

void IndCRSSelectVasVideo_AnalyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSSelectVasVideo_AnalyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSSelectVasVideo_AnalyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSSelectVasVideo_AnalyInfo_descriptor_;
}

const IndCRSSelectVasVideo_AnalyInfo& IndCRSSelectVasVideo_AnalyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSSelectVasVideo_AnalyInfo* IndCRSSelectVasVideo_AnalyInfo::default_instance_ = NULL;

IndCRSSelectVasVideo_AnalyInfo* IndCRSSelectVasVideo_AnalyInfo::New() const {
  return new IndCRSSelectVasVideo_AnalyInfo;
}

void IndCRSSelectVasVideo_AnalyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSSelectVasVideo_AnalyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(terid_, isselect_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSSelectVasVideo_AnalyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 3;
      case 3: {
        if (tag == 24) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcmapid;
        break;
      }

      // optional uint32 srcmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcmapid_)));
          set_has_srcmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isselect;
        break;
      }

      // optional bool isselect = 5;
      case 5: {
        if (tag == 40) {
         parse_isselect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselect_)));
          set_has_isselect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  return false;
#undef DO_
}

void IndCRSSelectVasVideo_AnalyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaschannelid(), output);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcmapid(), output);
  }

  // optional bool isselect = 5;
  if (has_isselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isselect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
}

::google::protobuf::uint8* IndCRSSelectVasVideo_AnalyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaschannelid(), target);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcmapid(), target);
  }

  // optional bool isselect = 5;
  if (has_isselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isselect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
  return target;
}

int IndCRSSelectVasVideo_AnalyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 vaschannelid = 3;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 srcmapid = 4;
    if (has_srcmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcmapid());
    }

    // optional bool isselect = 5;
    if (has_isselect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSSelectVasVideo_AnalyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSSelectVasVideo_AnalyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSSelectVasVideo_AnalyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSSelectVasVideo_AnalyInfo::MergeFrom(const IndCRSSelectVasVideo_AnalyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_srcmapid()) {
      set_srcmapid(from.srcmapid());
    }
    if (from.has_isselect()) {
      set_isselect(from.isselect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSSelectVasVideo_AnalyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSSelectVasVideo_AnalyInfo::CopyFrom(const IndCRSSelectVasVideo_AnalyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSSelectVasVideo_AnalyInfo::IsInitialized() const {

  return true;
}

void IndCRSSelectVasVideo_AnalyInfo::Swap(IndCRSSelectVasVideo_AnalyInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(screenid_, other->screenid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(srcmapid_, other->srcmapid_);
    std::swap(isselect_, other->isselect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSSelectVasVideo_AnalyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSSelectVasVideo_AnalyInfo_descriptor_;
  metadata.reflection = IndCRSSelectVasVideo_AnalyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCRSSelectVasVideo::kConfidFieldNumber;
const int IndCRSSelectVasVideo::kCrsidFieldNumber;
const int IndCRSSelectVasVideo::kSelectvasinfosFieldNumber;
#endif  // !_MSC_VER

IndCRSSelectVasVideo::IndCRSSelectVasVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSSelectVasVideo)
}

void IndCRSSelectVasVideo::InitAsDefaultInstance() {
}

IndCRSSelectVasVideo::IndCRSSelectVasVideo(const IndCRSSelectVasVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSSelectVasVideo)
}

void IndCRSSelectVasVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSSelectVasVideo::~IndCRSSelectVasVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSSelectVasVideo)
  SharedDtor();
}

void IndCRSSelectVasVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSSelectVasVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSSelectVasVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSSelectVasVideo_descriptor_;
}

const IndCRSSelectVasVideo& IndCRSSelectVasVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSSelectVasVideo* IndCRSSelectVasVideo::default_instance_ = NULL;

IndCRSSelectVasVideo* IndCRSSelectVasVideo::New() const {
  return new IndCRSSelectVasVideo;
}

void IndCRSSelectVasVideo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    confid_ = GOOGLE_ULONGLONG(0);
    crsid_ = 0u;
  }
  selectvasinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSSelectVasVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSSelectVasVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 2;
      case 2: {
        if (tag == 16) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_selectvasinfos;
        break;
      }

      // repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_selectvasinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectvasinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_selectvasinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSSelectVasVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSSelectVasVideo)
  return false;
#undef DO_
}

void IndCRSSelectVasVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSSelectVasVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crsid(), output);
  }

  // repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
  for (int i = 0; i < this->selectvasinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selectvasinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSSelectVasVideo)
}

::google::protobuf::uint8* IndCRSSelectVasVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSSelectVasVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crsid(), target);
  }

  // repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
  for (int i = 0; i < this->selectvasinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selectvasinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSSelectVasVideo)
  return target;
}

int IndCRSSelectVasVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 2;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  // repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
  total_size += 1 * this->selectvasinfos_size();
  for (int i = 0; i < this->selectvasinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectvasinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSSelectVasVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSSelectVasVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSSelectVasVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSSelectVasVideo::MergeFrom(const IndCRSSelectVasVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectvasinfos_.MergeFrom(from.selectvasinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSSelectVasVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSSelectVasVideo::CopyFrom(const IndCRSSelectVasVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSSelectVasVideo::IsInitialized() const {

  return true;
}

void IndCRSSelectVasVideo::Swap(IndCRSSelectVasVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    selectvasinfos_.Swap(&other->selectvasinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSSelectVasVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSSelectVasVideo_descriptor_;
  metadata.reflection = IndCRSSelectVasVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCRSStartRec::kConfidFieldNumber;
const int ReqCRSStartRec::kMcidFieldNumber;
const int ReqCRSStartRec::kCrsidFieldNumber;
const int ReqCRSStartRec::kCrschannelidFieldNumber;
const int ReqCRSStartRec::kChannelidFieldNumber;
const int ReqCRSStartRec::kScreenidFieldNumber;
const int ReqCRSStartRec::kScreentypeFieldNumber;
const int ReqCRSStartRec::kSeqnumFieldNumber;
#endif  // !_MSC_VER

ReqCRSStartRec::ReqCRSStartRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqCRSStartRec)
}

void ReqCRSStartRec::InitAsDefaultInstance() {
}

ReqCRSStartRec::ReqCRSStartRec(const ReqCRSStartRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqCRSStartRec)
}

void ReqCRSStartRec::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  seqnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCRSStartRec::~ReqCRSStartRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqCRSStartRec)
  SharedDtor();
}

void ReqCRSStartRec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCRSStartRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCRSStartRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCRSStartRec_descriptor_;
}

const ReqCRSStartRec& ReqCRSStartRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

ReqCRSStartRec* ReqCRSStartRec::default_instance_ = NULL;

ReqCRSStartRec* ReqCRSStartRec::New() const {
  return new ReqCRSStartRec;
}

void ReqCRSStartRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqCRSStartRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, seqnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCRSStartRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqCRSStartRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 8;
      case 8: {
        if (tag == 64) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqCRSStartRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqCRSStartRec)
  return false;
#undef DO_
}

void ReqCRSStartRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqCRSStartRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seqnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqCRSStartRec)
}

::google::protobuf::uint8* ReqCRSStartRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqCRSStartRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seqnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqCRSStartRec)
  return target;
}

int ReqCRSStartRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 seqnum = 8;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCRSStartRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCRSStartRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCRSStartRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCRSStartRec::MergeFrom(const ReqCRSStartRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCRSStartRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCRSStartRec::CopyFrom(const ReqCRSStartRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCRSStartRec::IsInitialized() const {

  return true;
}

void ReqCRSStartRec::Swap(ReqCRSStartRec* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCRSStartRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCRSStartRec_descriptor_;
  metadata.reflection = ReqCRSStartRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCRSStopRec::kConfidFieldNumber;
const int ReqCRSStopRec::kMcidFieldNumber;
const int ReqCRSStopRec::kCrsidFieldNumber;
const int ReqCRSStopRec::kCrschannelidFieldNumber;
const int ReqCRSStopRec::kChannelidFieldNumber;
const int ReqCRSStopRec::kScreenidFieldNumber;
const int ReqCRSStopRec::kScreentypeFieldNumber;
const int ReqCRSStopRec::kSeqnumFieldNumber;
#endif  // !_MSC_VER

ReqCRSStopRec::ReqCRSStopRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqCRSStopRec)
}

void ReqCRSStopRec::InitAsDefaultInstance() {
}

ReqCRSStopRec::ReqCRSStopRec(const ReqCRSStopRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqCRSStopRec)
}

void ReqCRSStopRec::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  seqnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCRSStopRec::~ReqCRSStopRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqCRSStopRec)
  SharedDtor();
}

void ReqCRSStopRec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCRSStopRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCRSStopRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCRSStopRec_descriptor_;
}

const ReqCRSStopRec& ReqCRSStopRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

ReqCRSStopRec* ReqCRSStopRec::default_instance_ = NULL;

ReqCRSStopRec* ReqCRSStopRec::New() const {
  return new ReqCRSStopRec;
}

void ReqCRSStopRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqCRSStopRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, seqnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCRSStopRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqCRSStopRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 8;
      case 8: {
        if (tag == 64) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqCRSStopRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqCRSStopRec)
  return false;
#undef DO_
}

void ReqCRSStopRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqCRSStopRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seqnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqCRSStopRec)
}

::google::protobuf::uint8* ReqCRSStopRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqCRSStopRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seqnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqCRSStopRec)
  return target;
}

int ReqCRSStopRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 seqnum = 8;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCRSStopRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCRSStopRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCRSStopRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCRSStopRec::MergeFrom(const ReqCRSStopRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCRSStopRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCRSStopRec::CopyFrom(const ReqCRSStopRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCRSStopRec::IsInitialized() const {

  return true;
}

void ReqCRSStopRec::Swap(ReqCRSStopRec* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCRSStopRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCRSStopRec_descriptor_;
  metadata.reflection = ReqCRSStopRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCRSReOpenNetMPMediaPort::kNetmpipFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kAudiodatarecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kAudioctrlrecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideodatarecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideoctrlrecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideo2DatarecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideo2CtrlrecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideo3DatarecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kVideo3CtrlrecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kDesktopdatarecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kDesktopctrlrecvportFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kConfidFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kMcidFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kCrsidFieldNumber;
const int CmdCRSReOpenNetMPMediaPort::kCrschannelidFieldNumber;
#endif  // !_MSC_VER

CmdCRSReOpenNetMPMediaPort::CmdCRSReOpenNetMPMediaPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdCRSReOpenNetMPMediaPort)
}

void CmdCRSReOpenNetMPMediaPort::InitAsDefaultInstance() {
}

CmdCRSReOpenNetMPMediaPort::CmdCRSReOpenNetMPMediaPort(const CmdCRSReOpenNetMPMediaPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdCRSReOpenNetMPMediaPort)
}

void CmdCRSReOpenNetMPMediaPort::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCRSReOpenNetMPMediaPort::~CmdCRSReOpenNetMPMediaPort() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  SharedDtor();
}

void CmdCRSReOpenNetMPMediaPort::SharedDtor() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (this != default_instance_) {
  }
}

void CmdCRSReOpenNetMPMediaPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCRSReOpenNetMPMediaPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCRSReOpenNetMPMediaPort_descriptor_;
}

const CmdCRSReOpenNetMPMediaPort& CmdCRSReOpenNetMPMediaPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

CmdCRSReOpenNetMPMediaPort* CmdCRSReOpenNetMPMediaPort::default_instance_ = NULL;

CmdCRSReOpenNetMPMediaPort* CmdCRSReOpenNetMPMediaPort::New() const {
  return new CmdCRSReOpenNetMPMediaPort;
}

void CmdCRSReOpenNetMPMediaPort::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdCRSReOpenNetMPMediaPort*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiodatarecvport_, video3datarecvport_);
    if (has_netmpip()) {
      if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(video3ctrlrecvport_, crschannelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCRSReOpenNetMPMediaPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string netmpip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpip().data(), this->netmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 2;
      case 2: {
        if (tag == 16) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 12;
      case 12: {
        if (tag == 96) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 13;
      case 13: {
        if (tag == 104) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 14;
      case 14: {
        if (tag == 112) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 15;
      case 15: {
        if (tag == 120) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  return false;
#undef DO_
}

void CmdCRSReOpenNetMPMediaPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->netmpip(), output);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopctrlrecvport(), output);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->confid(), output);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mcid(), output);
  }

  // optional uint32 crsid = 14;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->crsid(), output);
  }

  // optional uint32 crschannelid = 15;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->crschannelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdCRSReOpenNetMPMediaPort)
}

::google::protobuf::uint8* CmdCRSReOpenNetMPMediaPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->netmpip(), target);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopctrlrecvport(), target);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->confid(), target);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mcid(), target);
  }

  // optional uint32 crsid = 14;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->crsid(), target);
  }

  // optional uint32 crschannelid = 15;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->crschannelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdCRSReOpenNetMPMediaPort)
  return target;
}

int CmdCRSReOpenNetMPMediaPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string netmpip = 1;
    if (has_netmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpip());
    }

    // optional uint32 audiodatarecvport = 2;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 3;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 4;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 5;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 6;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 7;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 8;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3ctrlrecvport = 9;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 10;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 11;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional uint64 confid = 12;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 13;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 14;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 15;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCRSReOpenNetMPMediaPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCRSReOpenNetMPMediaPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCRSReOpenNetMPMediaPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCRSReOpenNetMPMediaPort::MergeFrom(const CmdCRSReOpenNetMPMediaPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpip()) {
      set_netmpip(from.netmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCRSReOpenNetMPMediaPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCRSReOpenNetMPMediaPort::CopyFrom(const CmdCRSReOpenNetMPMediaPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCRSReOpenNetMPMediaPort::IsInitialized() const {

  return true;
}

void CmdCRSReOpenNetMPMediaPort::Swap(CmdCRSReOpenNetMPMediaPort* other) {
  if (other != this) {
    std::swap(netmpip_, other->netmpip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCRSReOpenNetMPMediaPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCRSReOpenNetMPMediaPort_descriptor_;
  metadata.reflection = CmdCRSReOpenNetMPMediaPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatToCRS::kMcidFieldNumber;
const int IndMCHeartBeatToCRS::kCrsidFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatToCRS::IndMCHeartBeatToCRS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatToCRS)
}

void IndMCHeartBeatToCRS::InitAsDefaultInstance() {
}

IndMCHeartBeatToCRS::IndMCHeartBeatToCRS(const IndMCHeartBeatToCRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatToCRS)
}

void IndMCHeartBeatToCRS::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatToCRS::~IndMCHeartBeatToCRS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatToCRS)
  SharedDtor();
}

void IndMCHeartBeatToCRS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatToCRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatToCRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatToCRS_descriptor_;
}

const IndMCHeartBeatToCRS& IndMCHeartBeatToCRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndMCHeartBeatToCRS* IndMCHeartBeatToCRS::default_instance_ = NULL;

IndMCHeartBeatToCRS* IndMCHeartBeatToCRS::New() const {
  return new IndMCHeartBeatToCRS;
}

void IndMCHeartBeatToCRS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatToCRS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, crsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatToCRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatToCRS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 2;
      case 2: {
        if (tag == 16) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatToCRS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatToCRS)
  return false;
#undef DO_
}

void IndMCHeartBeatToCRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatToCRS)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatToCRS)
}

::google::protobuf::uint8* IndMCHeartBeatToCRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatToCRS)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatToCRS)
  return target;
}

int IndMCHeartBeatToCRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 2;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatToCRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatToCRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatToCRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatToCRS::MergeFrom(const IndMCHeartBeatToCRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatToCRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatToCRS::CopyFrom(const IndMCHeartBeatToCRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatToCRS::IsInitialized() const {

  return true;
}

void IndMCHeartBeatToCRS::Swap(IndMCHeartBeatToCRS* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatToCRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatToCRS_descriptor_;
  metadata.reflection = IndMCHeartBeatToCRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCRSStartLive::kConfidFieldNumber;
const int ReqCRSStartLive::kMcidFieldNumber;
const int ReqCRSStartLive::kCrsidFieldNumber;
const int ReqCRSStartLive::kCrschannelidFieldNumber;
const int ReqCRSStartLive::kChannelidFieldNumber;
const int ReqCRSStartLive::kScreenidFieldNumber;
const int ReqCRSStartLive::kScreentypeFieldNumber;
const int ReqCRSStartLive::kSeqnumFieldNumber;
const int ReqCRSStartLive::kRelatedsrsidFieldNumber;
const int ReqCRSStartLive::kLiveurlFieldNumber;
const int ReqCRSStartLive::kLivesvrtypeFieldNumber;
#endif  // !_MSC_VER

ReqCRSStartLive::ReqCRSStartLive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqCRSStartLive)
}

void ReqCRSStartLive::InitAsDefaultInstance() {
}

ReqCRSStartLive::ReqCRSStartLive(const ReqCRSStartLive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqCRSStartLive)
}

void ReqCRSStartLive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  seqnum_ = 0u;
  relatedsrsid_ = 0u;
  liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livesvrtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCRSStartLive::~ReqCRSStartLive() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqCRSStartLive)
  SharedDtor();
}

void ReqCRSStartLive::SharedDtor() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (this != default_instance_) {
  }
}

void ReqCRSStartLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCRSStartLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCRSStartLive_descriptor_;
}

const ReqCRSStartLive& ReqCRSStartLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

ReqCRSStartLive* ReqCRSStartLive::default_instance_ = NULL;

ReqCRSStartLive* ReqCRSStartLive::New() const {
  return new ReqCRSStartLive;
}

void ReqCRSStartLive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqCRSStartLive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, seqnum_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    relatedsrsid_ = 0u;
    if (has_liveurl()) {
      if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveurl_->clear();
      }
    }
    livesvrtype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCRSStartLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqCRSStartLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 8;
      case 8: {
        if (tag == 64) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_relatedsrsid;
        break;
      }

      // optional uint32 relatedsrsid = 9;
      case 9: {
        if (tag == 72) {
         parse_relatedsrsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedsrsid_)));
          set_has_relatedsrsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_liveurl;
        break;
      }

      // optional string liveurl = 10;
      case 10: {
        if (tag == 82) {
         parse_liveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveurl().data(), this->liveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_livesvrtype;
        break;
      }

      // optional uint32 livesvrtype = 11;
      case 11: {
        if (tag == 88) {
         parse_livesvrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livesvrtype_)));
          set_has_livesvrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqCRSStartLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqCRSStartLive)
  return false;
#undef DO_
}

void ReqCRSStartLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqCRSStartLive)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seqnum(), output);
  }

  // optional uint32 relatedsrsid = 9;
  if (has_relatedsrsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->relatedsrsid(), output);
  }

  // optional string liveurl = 10;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->liveurl(), output);
  }

  // optional uint32 livesvrtype = 11;
  if (has_livesvrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->livesvrtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqCRSStartLive)
}

::google::protobuf::uint8* ReqCRSStartLive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqCRSStartLive)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional uint32 seqnum = 8;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seqnum(), target);
  }

  // optional uint32 relatedsrsid = 9;
  if (has_relatedsrsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->relatedsrsid(), target);
  }

  // optional string liveurl = 10;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->liveurl(), target);
  }

  // optional uint32 livesvrtype = 11;
  if (has_livesvrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->livesvrtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqCRSStartLive)
  return target;
}

int ReqCRSStartLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 seqnum = 8;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 relatedsrsid = 9;
    if (has_relatedsrsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedsrsid());
    }

    // optional string liveurl = 10;
    if (has_liveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveurl());
    }

    // optional uint32 livesvrtype = 11;
    if (has_livesvrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livesvrtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCRSStartLive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCRSStartLive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCRSStartLive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCRSStartLive::MergeFrom(const ReqCRSStartLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relatedsrsid()) {
      set_relatedsrsid(from.relatedsrsid());
    }
    if (from.has_liveurl()) {
      set_liveurl(from.liveurl());
    }
    if (from.has_livesvrtype()) {
      set_livesvrtype(from.livesvrtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCRSStartLive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCRSStartLive::CopyFrom(const ReqCRSStartLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCRSStartLive::IsInitialized() const {

  return true;
}

void ReqCRSStartLive::Swap(ReqCRSStartLive* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(relatedsrsid_, other->relatedsrsid_);
    std::swap(liveurl_, other->liveurl_);
    std::swap(livesvrtype_, other->livesvrtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCRSStartLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCRSStartLive_descriptor_;
  metadata.reflection = ReqCRSStartLive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCRSStopLive::kConfidFieldNumber;
const int CmdCRSStopLive::kMcidFieldNumber;
const int CmdCRSStopLive::kCrsidFieldNumber;
const int CmdCRSStopLive::kCrschannelidFieldNumber;
const int CmdCRSStopLive::kChannelidFieldNumber;
const int CmdCRSStopLive::kScreenidFieldNumber;
const int CmdCRSStopLive::kScreentypeFieldNumber;
const int CmdCRSStopLive::kLiveurlFieldNumber;
#endif  // !_MSC_VER

CmdCRSStopLive::CmdCRSStopLive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdCRSStopLive)
}

void CmdCRSStopLive::InitAsDefaultInstance() {
}

CmdCRSStopLive::CmdCRSStopLive(const CmdCRSStopLive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdCRSStopLive)
}

void CmdCRSStopLive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCRSStopLive::~CmdCRSStopLive() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdCRSStopLive)
  SharedDtor();
}

void CmdCRSStopLive::SharedDtor() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (this != default_instance_) {
  }
}

void CmdCRSStopLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCRSStopLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCRSStopLive_descriptor_;
}

const CmdCRSStopLive& CmdCRSStopLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

CmdCRSStopLive* CmdCRSStopLive::default_instance_ = NULL;

CmdCRSStopLive* CmdCRSStopLive::New() const {
  return new CmdCRSStopLive;
}

void CmdCRSStopLive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdCRSStopLive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screentype_);
    if (has_liveurl()) {
      if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveurl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCRSStopLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdCRSStopLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_liveurl;
        break;
      }

      // optional string liveurl = 8;
      case 8: {
        if (tag == 66) {
         parse_liveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveurl().data(), this->liveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdCRSStopLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdCRSStopLive)
  return false;
#undef DO_
}

void CmdCRSStopLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdCRSStopLive)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional string liveurl = 8;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->liveurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdCRSStopLive)
}

::google::protobuf::uint8* CmdCRSStopLive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdCRSStopLive)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional string liveurl = 8;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->liveurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdCRSStopLive)
  return target;
}

int CmdCRSStopLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional string liveurl = 8;
    if (has_liveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveurl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCRSStopLive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCRSStopLive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCRSStopLive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCRSStopLive::MergeFrom(const CmdCRSStopLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_liveurl()) {
      set_liveurl(from.liveurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCRSStopLive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCRSStopLive::CopyFrom(const CmdCRSStopLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCRSStopLive::IsInitialized() const {

  return true;
}

void CmdCRSStopLive::Swap(CmdCRSStopLive* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(liveurl_, other->liveurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCRSStopLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCRSStopLive_descriptor_;
  metadata.reflection = CmdCRSStopLive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCRSCreateConf::kIsokFieldNumber;
const int RspCRSCreateConf::kConfidFieldNumber;
const int RspCRSCreateConf::kMcidFieldNumber;
const int RspCRSCreateConf::kCrsidFieldNumber;
const int RspCRSCreateConf::kCrschannelidFieldNumber;
const int RspCRSCreateConf::kRelatednetmpidFieldNumber;
const int RspCRSCreateConf::kFailreasonFieldNumber;
const int RspCRSCreateConf::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspCRSCreateConf::RspCRSCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspCRSCreateConf)
}

void RspCRSCreateConf::InitAsDefaultInstance() {
}

RspCRSCreateConf::RspCRSCreateConf(const RspCRSCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspCRSCreateConf)
}

void RspCRSCreateConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  relatednetmpid_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCRSCreateConf::~RspCRSCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspCRSCreateConf)
  SharedDtor();
}

void RspCRSCreateConf::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspCRSCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCRSCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCRSCreateConf_descriptor_;
}

const RspCRSCreateConf& RspCRSCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

RspCRSCreateConf* RspCRSCreateConf::default_instance_ = NULL;

RspCRSCreateConf* RspCRSCreateConf::New() const {
  return new RspCRSCreateConf;
}

void RspCRSCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspCRSCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, crschannelid_);
    ZR_(relatednetmpid_, errorcode_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCRSCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspCRSCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_failreason;
        break;
      }

      // optional string failreason = 7;
      case 7: {
        if (tag == 58) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 8;
      case 8: {
        if (tag == 64) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspCRSCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspCRSCreateConf)
  return false;
#undef DO_
}

void RspCRSCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspCRSCreateConf)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crschannelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->failreason(), output);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspCRSCreateConf)
}

::google::protobuf::uint8* RspCRSCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspCRSCreateConf)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crschannelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->failreason(), target);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspCRSCreateConf)
  return target;
}

int RspCRSCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 5;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional string failreason = 7;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint32 errorcode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCRSCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCRSCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCRSCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCRSCreateConf::MergeFrom(const RspCRSCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCRSCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCRSCreateConf::CopyFrom(const RspCRSCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCRSCreateConf::IsInitialized() const {

  return true;
}

void RspCRSCreateConf::Swap(RspCRSCreateConf* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(failreason_, other->failreason_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCRSCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCRSCreateConf_descriptor_;
  metadata.reflection = RspCRSCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCRSStartRec::kIsokFieldNumber;
const int RspCRSStartRec::kConfidFieldNumber;
const int RspCRSStartRec::kMcidFieldNumber;
const int RspCRSStartRec::kCrsidFieldNumber;
const int RspCRSStartRec::kCrschannelidFieldNumber;
const int RspCRSStartRec::kChannelidFieldNumber;
const int RspCRSStartRec::kScreenidFieldNumber;
const int RspCRSStartRec::kScreentypeFieldNumber;
const int RspCRSStartRec::kFilestorsvripFieldNumber;
const int RspCRSStartRec::kFilestorpathFieldNumber;
const int RspCRSStartRec::kSdefilepathFieldNumber;
const int RspCRSStartRec::kFailreasonFieldNumber;
const int RspCRSStartRec::kRelativepathFieldNumber;
const int RspCRSStartRec::kSeqnumFieldNumber;
const int RspCRSStartRec::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspCRSStartRec::RspCRSStartRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspCRSStartRec)
}

void RspCRSStartRec::InitAsDefaultInstance() {
}

RspCRSStartRec::RspCRSStartRec(const RspCRSStartRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspCRSStartRec)
}

void RspCRSStartRec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqnum_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCRSStartRec::~RspCRSStartRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspCRSStartRec)
  SharedDtor();
}

void RspCRSStartRec::SharedDtor() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (this != default_instance_) {
  }
}

void RspCRSStartRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCRSStartRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCRSStartRec_descriptor_;
}

const RspCRSStartRec& RspCRSStartRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

RspCRSStartRec* RspCRSStartRec::default_instance_ = NULL;

RspCRSStartRec* RspCRSStartRec::New() const {
  return new RspCRSStartRec;
}

void RspCRSStartRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspCRSStartRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screenid_);
    screentype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
    seqnum_ = 0u;
    errorcode_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCRSStartRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspCRSStartRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 7;
      case 7: {
        if (tag == 56) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 8;
      case 8: {
        if (tag == 64) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 9;
      case 9: {
        if (tag == 74) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 10;
      case 10: {
        if (tag == 82) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 11;
      case 11: {
        if (tag == 90) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_failreason;
        break;
      }

      // optional string failreason = 12;
      case 12: {
        if (tag == 98) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 13;
      case 13: {
        if (tag == 106) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 14;
      case 14: {
        if (tag == 112) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 15;
      case 15: {
        if (tag == 120) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspCRSStartRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspCRSStartRec)
  return false;
#undef DO_
}

void RspCRSStartRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspCRSStartRec)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crschannelid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenid(), output);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screentype(), output);
  }

  // optional string filestorsvrip = 9;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 10;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filestorpath(), output);
  }

  // optional string sdefilepath = 11;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdefilepath(), output);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->failreason(), output);
  }

  // optional string relativepath = 13;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->relativepath(), output);
  }

  // optional uint32 seqnum = 14;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->seqnum(), output);
  }

  // optional uint32 errorcode = 15;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspCRSStartRec)
}

::google::protobuf::uint8* RspCRSStartRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspCRSStartRec)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crschannelid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenid(), target);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screentype(), target);
  }

  // optional string filestorsvrip = 9;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 10;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filestorpath(), target);
  }

  // optional string sdefilepath = 11;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sdefilepath(), target);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->failreason(), target);
  }

  // optional string relativepath = 13;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->relativepath(), target);
  }

  // optional uint32 seqnum = 14;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->seqnum(), target);
  }

  // optional uint32 errorcode = 15;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspCRSStartRec)
  return target;
}

int RspCRSStartRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 5;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 7;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 8;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filestorsvrip = 9;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

    // optional string filestorpath = 10;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 11;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string failreason = 12;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional string relativepath = 13;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // optional uint32 seqnum = 14;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

    // optional uint32 errorcode = 15;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCRSStartRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCRSStartRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCRSStartRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCRSStartRec::MergeFrom(const RspCRSStartRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCRSStartRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCRSStartRec::CopyFrom(const RspCRSStartRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCRSStartRec::IsInitialized() const {

  return true;
}

void RspCRSStartRec::Swap(RspCRSStartRec* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(failreason_, other->failreason_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCRSStartRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCRSStartRec_descriptor_;
  metadata.reflection = RspCRSStartRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCRSStopRec::kIsokFieldNumber;
const int RspCRSStopRec::kConfidFieldNumber;
const int RspCRSStopRec::kMcidFieldNumber;
const int RspCRSStopRec::kCrsidFieldNumber;
const int RspCRSStopRec::kCrschannelidFieldNumber;
const int RspCRSStopRec::kChannelidFieldNumber;
const int RspCRSStopRec::kScreenidFieldNumber;
const int RspCRSStopRec::kScreentypeFieldNumber;
const int RspCRSStopRec::kFilestorsvripFieldNumber;
const int RspCRSStopRec::kFilestorpathFieldNumber;
const int RspCRSStopRec::kSdefilepathFieldNumber;
const int RspCRSStopRec::kFailreasonFieldNumber;
const int RspCRSStopRec::kRelativepathFieldNumber;
const int RspCRSStopRec::kSeqnumFieldNumber;
const int RspCRSStopRec::kFilesizeFieldNumber;
const int RspCRSStopRec::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspCRSStopRec::RspCRSStopRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspCRSStopRec)
}

void RspCRSStopRec::InitAsDefaultInstance() {
}

RspCRSStopRec::RspCRSStopRec(const RspCRSStopRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspCRSStopRec)
}

void RspCRSStopRec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqnum_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCRSStopRec::~RspCRSStopRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspCRSStopRec)
  SharedDtor();
}

void RspCRSStopRec::SharedDtor() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (this != default_instance_) {
  }
}

void RspCRSStopRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCRSStopRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCRSStopRec_descriptor_;
}

const RspCRSStopRec& RspCRSStopRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

RspCRSStopRec* RspCRSStopRec::default_instance_ = NULL;

RspCRSStopRec* RspCRSStopRec::New() const {
  return new RspCRSStopRec;
}

void RspCRSStopRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspCRSStopRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screenid_);
    screentype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(filesize_, errorcode_);
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
    seqnum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCRSStopRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspCRSStopRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 7;
      case 7: {
        if (tag == 56) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 8;
      case 8: {
        if (tag == 64) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 9;
      case 9: {
        if (tag == 74) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 10;
      case 10: {
        if (tag == 82) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 11;
      case 11: {
        if (tag == 90) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_failreason;
        break;
      }

      // optional string failreason = 12;
      case 12: {
        if (tag == 98) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 13;
      case 13: {
        if (tag == 106) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 14;
      case 14: {
        if (tag == 112) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_filesize;
        break;
      }

      // optional uint64 filesize = 15;
      case 15: {
        if (tag == 120) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 16;
      case 16: {
        if (tag == 128) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspCRSStopRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspCRSStopRec)
  return false;
#undef DO_
}

void RspCRSStopRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspCRSStopRec)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crschannelid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenid(), output);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screentype(), output);
  }

  // optional string filestorsvrip = 9;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 10;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filestorpath(), output);
  }

  // optional string sdefilepath = 11;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdefilepath(), output);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->failreason(), output);
  }

  // optional string relativepath = 13;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->relativepath(), output);
  }

  // optional uint32 seqnum = 14;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->seqnum(), output);
  }

  // optional uint64 filesize = 15;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->filesize(), output);
  }

  // optional uint32 errorcode = 16;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspCRSStopRec)
}

::google::protobuf::uint8* RspCRSStopRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspCRSStopRec)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crschannelid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenid(), target);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screentype(), target);
  }

  // optional string filestorsvrip = 9;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 10;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filestorpath(), target);
  }

  // optional string sdefilepath = 11;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sdefilepath(), target);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->failreason(), target);
  }

  // optional string relativepath = 13;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->relativepath(), target);
  }

  // optional uint32 seqnum = 14;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->seqnum(), target);
  }

  // optional uint64 filesize = 15;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->filesize(), target);
  }

  // optional uint32 errorcode = 16;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspCRSStopRec)
  return target;
}

int RspCRSStopRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 5;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 7;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 8;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filestorsvrip = 9;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

    // optional string filestorpath = 10;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 11;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string failreason = 12;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional string relativepath = 13;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // optional uint32 seqnum = 14;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

    // optional uint64 filesize = 15;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesize());
    }

    // optional uint32 errorcode = 16;
    if (has_errorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCRSStopRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCRSStopRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCRSStopRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCRSStopRec::MergeFrom(const RspCRSStopRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCRSStopRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCRSStopRec::CopyFrom(const RspCRSStopRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCRSStopRec::IsInitialized() const {

  return true;
}

void RspCRSStopRec::Swap(RspCRSStopRec* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(failreason_, other->failreason_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(filesize_, other->filesize_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCRSStopRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCRSStopRec_descriptor_;
  metadata.reflection = RspCRSStopRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCRSStartLive_LiveAddr::kTypeFieldNumber;
const int RspCRSStartLive_LiveAddr::kUrlFieldNumber;
#endif  // !_MSC_VER

RspCRSStartLive_LiveAddr::RspCRSStartLive_LiveAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspCRSStartLive.LiveAddr)
}

void RspCRSStartLive_LiveAddr::InitAsDefaultInstance() {
}

RspCRSStartLive_LiveAddr::RspCRSStartLive_LiveAddr(const RspCRSStartLive_LiveAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspCRSStartLive.LiveAddr)
}

void RspCRSStartLive_LiveAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCRSStartLive_LiveAddr::~RspCRSStartLive_LiveAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspCRSStartLive.LiveAddr)
  SharedDtor();
}

void RspCRSStartLive_LiveAddr::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void RspCRSStartLive_LiveAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCRSStartLive_LiveAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCRSStartLive_LiveAddr_descriptor_;
}

const RspCRSStartLive_LiveAddr& RspCRSStartLive_LiveAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

RspCRSStartLive_LiveAddr* RspCRSStartLive_LiveAddr::default_instance_ = NULL;

RspCRSStartLive_LiveAddr* RspCRSStartLive_LiveAddr::New() const {
  return new RspCRSStartLive_LiveAddr;
}

void RspCRSStartLive_LiveAddr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCRSStartLive_LiveAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspCRSStartLive.LiveAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspCRSStartLive.LiveAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspCRSStartLive.LiveAddr)
  return false;
#undef DO_
}

void RspCRSStartLive_LiveAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspCRSStartLive.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspCRSStartLive.LiveAddr)
}

::google::protobuf::uint8* RspCRSStartLive_LiveAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspCRSStartLive.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspCRSStartLive.LiveAddr)
  return target;
}

int RspCRSStartLive_LiveAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCRSStartLive_LiveAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCRSStartLive_LiveAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCRSStartLive_LiveAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCRSStartLive_LiveAddr::MergeFrom(const RspCRSStartLive_LiveAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCRSStartLive_LiveAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCRSStartLive_LiveAddr::CopyFrom(const RspCRSStartLive_LiveAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCRSStartLive_LiveAddr::IsInitialized() const {

  return true;
}

void RspCRSStartLive_LiveAddr::Swap(RspCRSStartLive_LiveAddr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCRSStartLive_LiveAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCRSStartLive_LiveAddr_descriptor_;
  metadata.reflection = RspCRSStartLive_LiveAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspCRSStartLive::kIsokFieldNumber;
const int RspCRSStartLive::kConfidFieldNumber;
const int RspCRSStartLive::kMcidFieldNumber;
const int RspCRSStartLive::kCrsidFieldNumber;
const int RspCRSStartLive::kCrschannelidFieldNumber;
const int RspCRSStartLive::kChannelidFieldNumber;
const int RspCRSStartLive::kScreenidFieldNumber;
const int RspCRSStartLive::kScreentypeFieldNumber;
const int RspCRSStartLive::kRelatedsrsidFieldNumber;
const int RspCRSStartLive::kLiveurlFieldNumber;
const int RspCRSStartLive::kSeqnumFieldNumber;
const int RspCRSStartLive::kFailreasonFieldNumber;
const int RspCRSStartLive::kErrorcodeFieldNumber;
const int RspCRSStartLive::kLivesvrtypeFieldNumber;
const int RspCRSStartLive::kLiveaddrsFieldNumber;
#endif  // !_MSC_VER

RspCRSStartLive::RspCRSStartLive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspCRSStartLive)
}

void RspCRSStartLive::InitAsDefaultInstance() {
}

RspCRSStartLive::RspCRSStartLive(const RspCRSStartLive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspCRSStartLive)
}

void RspCRSStartLive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  relatedsrsid_ = 0u;
  liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqnum_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  livesvrtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCRSStartLive::~RspCRSStartLive() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspCRSStartLive)
  SharedDtor();
}

void RspCRSStartLive::SharedDtor() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspCRSStartLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCRSStartLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCRSStartLive_descriptor_;
}

const RspCRSStartLive& RspCRSStartLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

RspCRSStartLive* RspCRSStartLive::default_instance_ = NULL;

RspCRSStartLive* RspCRSStartLive::New() const {
  return new RspCRSStartLive;
}

void RspCRSStartLive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspCRSStartLive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screentype_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(seqnum_, errorcode_);
    relatedsrsid_ = 0u;
    if (has_liveurl()) {
      if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveurl_->clear();
      }
    }
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
    livesvrtype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  liveaddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCRSStartLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspCRSStartLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 7;
      case 7: {
        if (tag == 56) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 8;
      case 8: {
        if (tag == 64) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_relatedsrsid;
        break;
      }

      // optional uint32 relatedsrsid = 9;
      case 9: {
        if (tag == 72) {
         parse_relatedsrsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedsrsid_)));
          set_has_relatedsrsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_liveurl;
        break;
      }

      // optional string liveurl = 10;
      case 10: {
        if (tag == 82) {
         parse_liveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveurl().data(), this->liveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 11;
      case 11: {
        if (tag == 88) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_failreason;
        break;
      }

      // optional string failreason = 12;
      case 12: {
        if (tag == 98) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 13;
      case 13: {
        if (tag == 104) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_livesvrtype;
        break;
      }

      // optional uint32 livesvrtype = 14;
      case 14: {
        if (tag == 112) {
         parse_livesvrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livesvrtype_)));
          set_has_livesvrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_liveaddrs;
        break;
      }

      // repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
      case 15: {
        if (tag == 122) {
         parse_liveaddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveaddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_liveaddrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspCRSStartLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspCRSStartLive)
  return false;
#undef DO_
}

void RspCRSStartLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspCRSStartLive)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crschannelid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenid(), output);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screentype(), output);
  }

  // optional uint32 relatedsrsid = 9;
  if (has_relatedsrsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->relatedsrsid(), output);
  }

  // optional string liveurl = 10;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->liveurl(), output);
  }

  // optional uint32 seqnum = 11;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seqnum(), output);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->failreason(), output);
  }

  // optional uint32 errorcode = 13;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->errorcode(), output);
  }

  // optional uint32 livesvrtype = 14;
  if (has_livesvrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->livesvrtype(), output);
  }

  // repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->liveaddrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspCRSStartLive)
}

::google::protobuf::uint8* RspCRSStartLive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspCRSStartLive)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crschannelid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenid(), target);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screentype(), target);
  }

  // optional uint32 relatedsrsid = 9;
  if (has_relatedsrsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->relatedsrsid(), target);
  }

  // optional string liveurl = 10;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->liveurl(), target);
  }

  // optional uint32 seqnum = 11;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seqnum(), target);
  }

  // optional string failreason = 12;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->failreason(), target);
  }

  // optional uint32 errorcode = 13;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->errorcode(), target);
  }

  // optional uint32 livesvrtype = 14;
  if (has_livesvrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->livesvrtype(), target);
  }

  // repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->liveaddrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspCRSStartLive)
  return target;
}

int RspCRSStartLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 5;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 7;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 8;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 relatedsrsid = 9;
    if (has_relatedsrsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedsrsid());
    }

    // optional string liveurl = 10;
    if (has_liveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveurl());
    }

    // optional uint32 seqnum = 11;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

    // optional string failreason = 12;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint32 errorcode = 13;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 livesvrtype = 14;
    if (has_livesvrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livesvrtype());
    }

  }
  // repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
  total_size += 1 * this->liveaddrs_size();
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveaddrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCRSStartLive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCRSStartLive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCRSStartLive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCRSStartLive::MergeFrom(const RspCRSStartLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  liveaddrs_.MergeFrom(from.liveaddrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relatedsrsid()) {
      set_relatedsrsid(from.relatedsrsid());
    }
    if (from.has_liveurl()) {
      set_liveurl(from.liveurl());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_livesvrtype()) {
      set_livesvrtype(from.livesvrtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCRSStartLive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCRSStartLive::CopyFrom(const RspCRSStartLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCRSStartLive::IsInitialized() const {

  return true;
}

void RspCRSStartLive::Swap(RspCRSStartLive* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(relatedsrsid_, other->relatedsrsid_);
    std::swap(liveurl_, other->liveurl_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(failreason_, other->failreason_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(livesvrtype_, other->livesvrtype_);
    liveaddrs_.Swap(&other->liveaddrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCRSStartLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCRSStartLive_descriptor_;
  metadata.reflection = RspCRSStartLive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCRSSeleteVideo_TermInfo::kTeridFieldNumber;
const int CmdCRSSeleteVideo_TermInfo::kScreenidFieldNumber;
const int CmdCRSSeleteVideo_TermInfo::kVideosizeFieldNumber;
const int CmdCRSSeleteVideo_TermInfo::kRecvfpsFieldNumber;
#endif  // !_MSC_VER

CmdCRSSeleteVideo_TermInfo::CmdCRSSeleteVideo_TermInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdCRSSeleteVideo.TermInfo)
}

void CmdCRSSeleteVideo_TermInfo::InitAsDefaultInstance() {
}

CmdCRSSeleteVideo_TermInfo::CmdCRSSeleteVideo_TermInfo(const CmdCRSSeleteVideo_TermInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdCRSSeleteVideo.TermInfo)
}

void CmdCRSSeleteVideo_TermInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  screenid_ = 0u;
  videosize_ = 0u;
  recvfps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCRSSeleteVideo_TermInfo::~CmdCRSSeleteVideo_TermInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  SharedDtor();
}

void CmdCRSSeleteVideo_TermInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdCRSSeleteVideo_TermInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCRSSeleteVideo_TermInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCRSSeleteVideo_TermInfo_descriptor_;
}

const CmdCRSSeleteVideo_TermInfo& CmdCRSSeleteVideo_TermInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

CmdCRSSeleteVideo_TermInfo* CmdCRSSeleteVideo_TermInfo::default_instance_ = NULL;

CmdCRSSeleteVideo_TermInfo* CmdCRSSeleteVideo_TermInfo::New() const {
  return new CmdCRSSeleteVideo_TermInfo;
}

void CmdCRSSeleteVideo_TermInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdCRSSeleteVideo_TermInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, recvfps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCRSSeleteVideo_TermInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 3;
      case 3: {
        if (tag == 24) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvfps;
        break;
      }

      // optional uint32 recvfps = 4;
      case 4: {
        if (tag == 32) {
         parse_recvfps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvfps_)));
          set_has_recvfps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  return false;
#undef DO_
}

void CmdCRSSeleteVideo_TermInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->videosize(), output);
  }

  // optional uint32 recvfps = 4;
  if (has_recvfps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recvfps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdCRSSeleteVideo.TermInfo)
}

::google::protobuf::uint8* CmdCRSSeleteVideo_TermInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->videosize(), target);
  }

  // optional uint32 recvfps = 4;
  if (has_recvfps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recvfps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdCRSSeleteVideo.TermInfo)
  return target;
}

int CmdCRSSeleteVideo_TermInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 videosize = 3;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

    // optional uint32 recvfps = 4;
    if (has_recvfps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvfps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCRSSeleteVideo_TermInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCRSSeleteVideo_TermInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCRSSeleteVideo_TermInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCRSSeleteVideo_TermInfo::MergeFrom(const CmdCRSSeleteVideo_TermInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
    if (from.has_recvfps()) {
      set_recvfps(from.recvfps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCRSSeleteVideo_TermInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCRSSeleteVideo_TermInfo::CopyFrom(const CmdCRSSeleteVideo_TermInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCRSSeleteVideo_TermInfo::IsInitialized() const {

  return true;
}

void CmdCRSSeleteVideo_TermInfo::Swap(CmdCRSSeleteVideo_TermInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(screenid_, other->screenid_);
    std::swap(videosize_, other->videosize_);
    std::swap(recvfps_, other->recvfps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCRSSeleteVideo_TermInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCRSSeleteVideo_TermInfo_descriptor_;
  metadata.reflection = CmdCRSSeleteVideo_TermInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdCRSSeleteVideo::kConfidFieldNumber;
const int CmdCRSSeleteVideo::kMcidFieldNumber;
const int CmdCRSSeleteVideo::kCrsidFieldNumber;
const int CmdCRSSeleteVideo::kCrschannelidFieldNumber;
const int CmdCRSSeleteVideo::kSeleteterinfoFieldNumber;
#endif  // !_MSC_VER

CmdCRSSeleteVideo::CmdCRSSeleteVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdCRSSeleteVideo)
}

void CmdCRSSeleteVideo::InitAsDefaultInstance() {
}

CmdCRSSeleteVideo::CmdCRSSeleteVideo(const CmdCRSSeleteVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdCRSSeleteVideo)
}

void CmdCRSSeleteVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCRSSeleteVideo::~CmdCRSSeleteVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdCRSSeleteVideo)
  SharedDtor();
}

void CmdCRSSeleteVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdCRSSeleteVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCRSSeleteVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCRSSeleteVideo_descriptor_;
}

const CmdCRSSeleteVideo& CmdCRSSeleteVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

CmdCRSSeleteVideo* CmdCRSSeleteVideo::default_instance_ = NULL;

CmdCRSSeleteVideo* CmdCRSSeleteVideo::New() const {
  return new CmdCRSSeleteVideo;
}

void CmdCRSSeleteVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdCRSSeleteVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, crsid_);
    crschannelid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seleteterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCRSSeleteVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdCRSSeleteVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seleteterinfo;
        break;
      }

      // repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_seleteterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seleteterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seleteterinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdCRSSeleteVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdCRSSeleteVideo)
  return false;
#undef DO_
}

void CmdCRSSeleteVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdCRSSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seleteterinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdCRSSeleteVideo)
}

::google::protobuf::uint8* CmdCRSSeleteVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdCRSSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->seleteterinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdCRSSeleteVideo)
  return target;
}

int CmdCRSSeleteVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

  }
  // repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
  total_size += 1 * this->seleteterinfo_size();
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seleteterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCRSSeleteVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCRSSeleteVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCRSSeleteVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCRSSeleteVideo::MergeFrom(const CmdCRSSeleteVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  seleteterinfo_.MergeFrom(from.seleteterinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCRSSeleteVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCRSSeleteVideo::CopyFrom(const CmdCRSSeleteVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCRSSeleteVideo::IsInitialized() const {

  return true;
}

void CmdCRSSeleteVideo::Swap(CmdCRSSeleteVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    seleteterinfo_.Swap(&other->seleteterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCRSSeleteVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCRSSeleteVideo_descriptor_;
  metadata.reflection = CmdCRSSeleteVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSHeartBeatToMC::kMcidFieldNumber;
const int IndCRSHeartBeatToMC::kCrsidFieldNumber;
#endif  // !_MSC_VER

IndCRSHeartBeatToMC::IndCRSHeartBeatToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSHeartBeatToMC)
}

void IndCRSHeartBeatToMC::InitAsDefaultInstance() {
}

IndCRSHeartBeatToMC::IndCRSHeartBeatToMC(const IndCRSHeartBeatToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSHeartBeatToMC)
}

void IndCRSHeartBeatToMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  crsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSHeartBeatToMC::~IndCRSHeartBeatToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSHeartBeatToMC)
  SharedDtor();
}

void IndCRSHeartBeatToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSHeartBeatToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSHeartBeatToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSHeartBeatToMC_descriptor_;
}

const IndCRSHeartBeatToMC& IndCRSHeartBeatToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSHeartBeatToMC* IndCRSHeartBeatToMC::default_instance_ = NULL;

IndCRSHeartBeatToMC* IndCRSHeartBeatToMC::New() const {
  return new IndCRSHeartBeatToMC;
}

void IndCRSHeartBeatToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSHeartBeatToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, crsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSHeartBeatToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSHeartBeatToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 2;
      case 2: {
        if (tag == 16) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSHeartBeatToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSHeartBeatToMC)
  return false;
#undef DO_
}

void IndCRSHeartBeatToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSHeartBeatToMC)
}

::google::protobuf::uint8* IndCRSHeartBeatToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 crsid = 2;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSHeartBeatToMC)
  return target;
}

int IndCRSHeartBeatToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 2;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSHeartBeatToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSHeartBeatToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSHeartBeatToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSHeartBeatToMC::MergeFrom(const IndCRSHeartBeatToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSHeartBeatToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSHeartBeatToMC::CopyFrom(const IndCRSHeartBeatToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSHeartBeatToMC::IsInitialized() const {

  return true;
}

void IndCRSHeartBeatToMC::Swap(IndCRSHeartBeatToMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSHeartBeatToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSHeartBeatToMC_descriptor_;
  metadata.reflection = IndCRSHeartBeatToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSFileStorPathToMC::kConfidFieldNumber;
const int IndCRSFileStorPathToMC::kMcidFieldNumber;
const int IndCRSFileStorPathToMC::kCrsidFieldNumber;
const int IndCRSFileStorPathToMC::kCrschannelidFieldNumber;
const int IndCRSFileStorPathToMC::kChannelidFieldNumber;
const int IndCRSFileStorPathToMC::kScreenidFieldNumber;
const int IndCRSFileStorPathToMC::kScreentypeFieldNumber;
const int IndCRSFileStorPathToMC::kFilestorsvripFieldNumber;
const int IndCRSFileStorPathToMC::kFilestorpathFieldNumber;
const int IndCRSFileStorPathToMC::kSdefilepathFieldNumber;
const int IndCRSFileStorPathToMC::kRelativepathFieldNumber;
const int IndCRSFileStorPathToMC::kRecordstateFieldNumber;
const int IndCRSFileStorPathToMC::kFilesizeFieldNumber;
#endif  // !_MSC_VER

IndCRSFileStorPathToMC::IndCRSFileStorPathToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSFileStorPathToMC)
}

void IndCRSFileStorPathToMC::InitAsDefaultInstance() {
}

IndCRSFileStorPathToMC::IndCRSFileStorPathToMC(const IndCRSFileStorPathToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSFileStorPathToMC)
}

void IndCRSFileStorPathToMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordstate_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSFileStorPathToMC::~IndCRSFileStorPathToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSFileStorPathToMC)
  SharedDtor();
}

void IndCRSFileStorPathToMC::SharedDtor() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSFileStorPathToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSFileStorPathToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSFileStorPathToMC_descriptor_;
}

const IndCRSFileStorPathToMC& IndCRSFileStorPathToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSFileStorPathToMC* IndCRSFileStorPathToMC::default_instance_ = NULL;

IndCRSFileStorPathToMC* IndCRSFileStorPathToMC::New() const {
  return new IndCRSFileStorPathToMC;
}

void IndCRSFileStorPathToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSFileStorPathToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screentype_);
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(filesize_, recordstate_);
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSFileStorPathToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSFileStorPathToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 8;
      case 8: {
        if (tag == 66) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 9;
      case 9: {
        if (tag == 74) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 10;
      case 10: {
        if (tag == 82) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 11;
      case 11: {
        if (tag == 90) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_recordstate;
        break;
      }

      // optional uint32 recordstate = 12;
      case 12: {
        if (tag == 96) {
         parse_recordstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordstate_)));
          set_has_recordstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_filesize;
        break;
      }

      // optional uint64 filesize = 13;
      case 13: {
        if (tag == 104) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSFileStorPathToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSFileStorPathToMC)
  return false;
#undef DO_
}

void IndCRSFileStorPathToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSFileStorPathToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional string filestorsvrip = 8;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 9;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filestorpath(), output);
  }

  // optional string sdefilepath = 10;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sdefilepath(), output);
  }

  // optional string relativepath = 11;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->relativepath(), output);
  }

  // optional uint32 recordstate = 12;
  if (has_recordstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->recordstate(), output);
  }

  // optional uint64 filesize = 13;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->filesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSFileStorPathToMC)
}

::google::protobuf::uint8* IndCRSFileStorPathToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSFileStorPathToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional string filestorsvrip = 8;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 9;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filestorpath(), target);
  }

  // optional string sdefilepath = 10;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sdefilepath(), target);
  }

  // optional string relativepath = 11;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->relativepath(), target);
  }

  // optional uint32 recordstate = 12;
  if (has_recordstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->recordstate(), target);
  }

  // optional uint64 filesize = 13;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->filesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSFileStorPathToMC)
  return target;
}

int IndCRSFileStorPathToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional string filestorsvrip = 8;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filestorpath = 9;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 10;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string relativepath = 11;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // optional uint32 recordstate = 12;
    if (has_recordstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordstate());
    }

    // optional uint64 filesize = 13;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSFileStorPathToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSFileStorPathToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSFileStorPathToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSFileStorPathToMC::MergeFrom(const IndCRSFileStorPathToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_recordstate()) {
      set_recordstate(from.recordstate());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSFileStorPathToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSFileStorPathToMC::CopyFrom(const IndCRSFileStorPathToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSFileStorPathToMC::IsInitialized() const {

  return true;
}

void IndCRSFileStorPathToMC::Swap(IndCRSFileStorPathToMC* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(recordstate_, other->recordstate_);
    std::swap(filesize_, other->filesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSFileStorPathToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSFileStorPathToMC_descriptor_;
  metadata.reflection = IndCRSFileStorPathToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSLiveStateToMC::kConfidFieldNumber;
const int IndCRSLiveStateToMC::kMcidFieldNumber;
const int IndCRSLiveStateToMC::kCrsidFieldNumber;
const int IndCRSLiveStateToMC::kCrschannelidFieldNumber;
const int IndCRSLiveStateToMC::kChannelidFieldNumber;
const int IndCRSLiveStateToMC::kScreenidFieldNumber;
const int IndCRSLiveStateToMC::kScreentypeFieldNumber;
const int IndCRSLiveStateToMC::kLivestateFieldNumber;
const int IndCRSLiveStateToMC::kStatecontFieldNumber;
const int IndCRSLiveStateToMC::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

IndCRSLiveStateToMC::IndCRSLiveStateToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSLiveStateToMC)
}

void IndCRSLiveStateToMC::InitAsDefaultInstance() {
}

IndCRSLiveStateToMC::IndCRSLiveStateToMC(const IndCRSLiveStateToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSLiveStateToMC)
}

void IndCRSLiveStateToMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  livestate_ = 0u;
  statecont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSLiveStateToMC::~IndCRSLiveStateToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSLiveStateToMC)
  SharedDtor();
}

void IndCRSLiveStateToMC::SharedDtor() {
  if (statecont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statecont_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSLiveStateToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSLiveStateToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSLiveStateToMC_descriptor_;
}

const IndCRSLiveStateToMC& IndCRSLiveStateToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fcrs_2eproto();
  return *default_instance_;
}

IndCRSLiveStateToMC* IndCRSLiveStateToMC::default_instance_ = NULL;

IndCRSLiveStateToMC* IndCRSLiveStateToMC::New() const {
  return new IndCRSLiveStateToMC;
}

void IndCRSLiveStateToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSLiveStateToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screentype_);
    livestate_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_statecont()) {
      if (statecont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statecont_->clear();
      }
    }
    errorcode_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSLiveStateToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSLiveStateToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 3;
      case 3: {
        if (tag == 24) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 6;
      case 6: {
        if (tag == 48) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 7;
      case 7: {
        if (tag == 56) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_livestate;
        break;
      }

      // optional uint32 livestate = 8;
      case 8: {
        if (tag == 64) {
         parse_livestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livestate_)));
          set_has_livestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_statecont;
        break;
      }

      // optional string statecont = 9;
      case 9: {
        if (tag == 74) {
         parse_statecont:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statecont()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statecont().data(), this->statecont().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statecont");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 10;
      case 10: {
        if (tag == 80) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSLiveStateToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSLiveStateToMC)
  return false;
#undef DO_
}

void IndCRSLiveStateToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSLiveStateToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crsid(), output);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crschannelid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screenid(), output);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screentype(), output);
  }

  // optional uint32 livestate = 8;
  if (has_livestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->livestate(), output);
  }

  // optional string statecont = 9;
  if (has_statecont()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statecont().data(), this->statecont().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statecont");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->statecont(), output);
  }

  // optional uint32 errorcode = 10;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSLiveStateToMC)
}

::google::protobuf::uint8* IndCRSLiveStateToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSLiveStateToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 crsid = 3;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crsid(), target);
  }

  // optional uint32 crschannelid = 4;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crschannelid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 screenid = 6;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screenid(), target);
  }

  // optional uint32 screentype = 7;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screentype(), target);
  }

  // optional uint32 livestate = 8;
  if (has_livestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->livestate(), target);
  }

  // optional string statecont = 9;
  if (has_statecont()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statecont().data(), this->statecont().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statecont");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->statecont(), target);
  }

  // optional uint32 errorcode = 10;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSLiveStateToMC)
  return target;
}

int IndCRSLiveStateToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 crsid = 3;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 4;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 6;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 7;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 livestate = 8;
    if (has_livestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livestate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string statecont = 9;
    if (has_statecont()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statecont());
    }

    // optional uint32 errorcode = 10;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSLiveStateToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSLiveStateToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSLiveStateToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSLiveStateToMC::MergeFrom(const IndCRSLiveStateToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_livestate()) {
      set_livestate(from.livestate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_statecont()) {
      set_statecont(from.statecont());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSLiveStateToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSLiveStateToMC::CopyFrom(const IndCRSLiveStateToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSLiveStateToMC::IsInitialized() const {

  return true;
}

void IndCRSLiveStateToMC::Swap(IndCRSLiveStateToMC* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(livestate_, other->livestate_);
    std::swap(statecont_, other->statecont_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSLiveStateToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSLiveStateToMC_descriptor_;
  metadata.reflection = IndCRSLiveStateToMC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
