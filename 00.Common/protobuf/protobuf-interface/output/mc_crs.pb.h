// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_crs.proto

#ifndef PROTOBUF_mc_5fcrs_2eproto__INCLUDED
#define PROTOBUF_mc_5fcrs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mc_5fcrs_2eproto();
void protobuf_AssignDesc_mc_5fcrs_2eproto();
void protobuf_ShutdownFile_mc_5fcrs_2eproto();

class ReqCRSCreateConf;
class ReqCRSCreateConf_NetMpAddr;
class CmdCRSDestroyConf;
class IndCRSTerJoined;
class IndCRSTerLeft;
class IndConfAllMPIInfoToCRS;
class IndConfAllMPIInfoToCRS_ScreensInMPI;
class IndConfAllMPIInfoToCRS_MPIsInConf;
class IndMPIInfoToCRS;
class IndScreenInfoToCRS;
class IndCRSSelectVasVideo;
class IndCRSSelectVasVideo_AnalyInfo;
class ReqCRSStartRec;
class ReqCRSStopRec;
class CmdCRSReOpenNetMPMediaPort;
class IndMCHeartBeatToCRS;
class ReqCRSStartLive;
class CmdCRSStopLive;
class RspCRSCreateConf;
class RspCRSStartRec;
class RspCRSStopRec;
class RspCRSStartLive;
class RspCRSStartLive_LiveAddr;
class CmdCRSSeleteVideo;
class CmdCRSSeleteVideo_TermInfo;
class IndCRSHeartBeatToMC;
class IndCRSFileStorPathToMC;
class IndCRSLiveStateToMC;

// ===================================================================

class ReqCRSCreateConf_NetMpAddr : public ::google::protobuf::Message {
 public:
  ReqCRSCreateConf_NetMpAddr();
  virtual ~ReqCRSCreateConf_NetMpAddr();

  ReqCRSCreateConf_NetMpAddr(const ReqCRSCreateConf_NetMpAddr& from);

  inline ReqCRSCreateConf_NetMpAddr& operator=(const ReqCRSCreateConf_NetMpAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCRSCreateConf_NetMpAddr& default_instance();

  void Swap(ReqCRSCreateConf_NetMpAddr* other);

  // implements Message ----------------------------------------------

  ReqCRSCreateConf_NetMpAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCRSCreateConf_NetMpAddr& from);
  void MergeFrom(const ReqCRSCreateConf_NetMpAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 netmpid = 1;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 1;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional string netmpmediaip = 2;
  inline bool has_netmpmediaip() const;
  inline void clear_netmpmediaip();
  static const int kNetmpmediaipFieldNumber = 2;
  inline const ::std::string& netmpmediaip() const;
  inline void set_netmpmediaip(const ::std::string& value);
  inline void set_netmpmediaip(const char* value);
  inline void set_netmpmediaip(const char* value, size_t size);
  inline ::std::string* mutable_netmpmediaip();
  inline ::std::string* release_netmpmediaip();
  inline void set_allocated_netmpmediaip(::std::string* netmpmediaip);

  // optional uint32 audiodatarecvport = 3;
  inline bool has_audiodatarecvport() const;
  inline void clear_audiodatarecvport();
  static const int kAudiodatarecvportFieldNumber = 3;
  inline ::google::protobuf::uint32 audiodatarecvport() const;
  inline void set_audiodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 audioctrlrecvport = 4;
  inline bool has_audioctrlrecvport() const;
  inline void clear_audioctrlrecvport();
  static const int kAudioctrlrecvportFieldNumber = 4;
  inline ::google::protobuf::uint32 audioctrlrecvport() const;
  inline void set_audioctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 videodatarecvport = 5;
  inline bool has_videodatarecvport() const;
  inline void clear_videodatarecvport();
  static const int kVideodatarecvportFieldNumber = 5;
  inline ::google::protobuf::uint32 videodatarecvport() const;
  inline void set_videodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 videoctrlrecvport = 6;
  inline bool has_videoctrlrecvport() const;
  inline void clear_videoctrlrecvport();
  static const int kVideoctrlrecvportFieldNumber = 6;
  inline ::google::protobuf::uint32 videoctrlrecvport() const;
  inline void set_videoctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video2datarecvport = 7;
  inline bool has_video2datarecvport() const;
  inline void clear_video2datarecvport();
  static const int kVideo2DatarecvportFieldNumber = 7;
  inline ::google::protobuf::uint32 video2datarecvport() const;
  inline void set_video2datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video2ctrlrecvport = 8;
  inline bool has_video2ctrlrecvport() const;
  inline void clear_video2ctrlrecvport();
  static const int kVideo2CtrlrecvportFieldNumber = 8;
  inline ::google::protobuf::uint32 video2ctrlrecvport() const;
  inline void set_video2ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video3datarecvport = 9;
  inline bool has_video3datarecvport() const;
  inline void clear_video3datarecvport();
  static const int kVideo3DatarecvportFieldNumber = 9;
  inline ::google::protobuf::uint32 video3datarecvport() const;
  inline void set_video3datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video3ctrlrecvport = 10;
  inline bool has_video3ctrlrecvport() const;
  inline void clear_video3ctrlrecvport();
  static const int kVideo3CtrlrecvportFieldNumber = 10;
  inline ::google::protobuf::uint32 video3ctrlrecvport() const;
  inline void set_video3ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopdatarecvport = 11;
  inline bool has_desktopdatarecvport() const;
  inline void clear_desktopdatarecvport();
  static const int kDesktopdatarecvportFieldNumber = 11;
  inline ::google::protobuf::uint32 desktopdatarecvport() const;
  inline void set_desktopdatarecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopctrlrecvport = 12;
  inline bool has_desktopctrlrecvport() const;
  inline void clear_desktopctrlrecvport();
  static const int kDesktopctrlrecvportFieldNumber = 12;
  inline ::google::protobuf::uint32 desktopctrlrecvport() const;
  inline void set_desktopctrlrecvport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqCRSCreateConf.NetMpAddr)
 private:
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_netmpmediaip();
  inline void clear_has_netmpmediaip();
  inline void set_has_audiodatarecvport();
  inline void clear_has_audiodatarecvport();
  inline void set_has_audioctrlrecvport();
  inline void clear_has_audioctrlrecvport();
  inline void set_has_videodatarecvport();
  inline void clear_has_videodatarecvport();
  inline void set_has_videoctrlrecvport();
  inline void clear_has_videoctrlrecvport();
  inline void set_has_video2datarecvport();
  inline void clear_has_video2datarecvport();
  inline void set_has_video2ctrlrecvport();
  inline void clear_has_video2ctrlrecvport();
  inline void set_has_video3datarecvport();
  inline void clear_has_video3datarecvport();
  inline void set_has_video3ctrlrecvport();
  inline void clear_has_video3ctrlrecvport();
  inline void set_has_desktopdatarecvport();
  inline void clear_has_desktopdatarecvport();
  inline void set_has_desktopctrlrecvport();
  inline void clear_has_desktopctrlrecvport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* netmpmediaip_;
  ::google::protobuf::uint32 netmpid_;
  ::google::protobuf::uint32 audiodatarecvport_;
  ::google::protobuf::uint32 audioctrlrecvport_;
  ::google::protobuf::uint32 videodatarecvport_;
  ::google::protobuf::uint32 videoctrlrecvport_;
  ::google::protobuf::uint32 video2datarecvport_;
  ::google::protobuf::uint32 video2ctrlrecvport_;
  ::google::protobuf::uint32 video3datarecvport_;
  ::google::protobuf::uint32 video3ctrlrecvport_;
  ::google::protobuf::uint32 desktopdatarecvport_;
  ::google::protobuf::uint32 desktopctrlrecvport_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static ReqCRSCreateConf_NetMpAddr* default_instance_;
};
// -------------------------------------------------------------------

class ReqCRSCreateConf : public ::google::protobuf::Message {
 public:
  ReqCRSCreateConf();
  virtual ~ReqCRSCreateConf();

  ReqCRSCreateConf(const ReqCRSCreateConf& from);

  inline ReqCRSCreateConf& operator=(const ReqCRSCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCRSCreateConf& default_instance();

  void Swap(ReqCRSCreateConf* other);

  // implements Message ----------------------------------------------

  ReqCRSCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCRSCreateConf& from);
  void MergeFrom(const ReqCRSCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqCRSCreateConf_NetMpAddr NetMpAddr;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 mediaencryptalg = 5;
  inline bool has_mediaencryptalg() const;
  inline void clear_mediaencryptalg();
  static const int kMediaencryptalgFieldNumber = 5;
  inline ::google::protobuf::uint32 mediaencryptalg() const;
  inline void set_mediaencryptalg(::google::protobuf::uint32 value);

  // optional bytes encryptkey = 6;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 6;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const void* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
  inline bool has_netmpaddr() const;
  inline void clear_netmpaddr();
  static const int kNetmpaddrFieldNumber = 7;
  inline const ::SRMsgs::ReqCRSCreateConf_NetMpAddr& netmpaddr() const;
  inline ::SRMsgs::ReqCRSCreateConf_NetMpAddr* mutable_netmpaddr();
  inline ::SRMsgs::ReqCRSCreateConf_NetMpAddr* release_netmpaddr();
  inline void set_allocated_netmpaddr(::SRMsgs::ReqCRSCreateConf_NetMpAddr* netmpaddr);

  // optional uint32 videosize = 8;
  inline bool has_videosize() const;
  inline void clear_videosize();
  static const int kVideosizeFieldNumber = 8;
  inline ::google::protobuf::uint32 videosize() const;
  inline void set_videosize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqCRSCreateConf)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_mediaencryptalg();
  inline void clear_has_mediaencryptalg();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();
  inline void set_has_netmpaddr();
  inline void clear_has_netmpaddr();
  inline void set_has_videosize();
  inline void clear_has_videosize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 mediaencryptalg_;
  ::std::string* encryptkey_;
  ::SRMsgs::ReqCRSCreateConf_NetMpAddr* netmpaddr_;
  ::google::protobuf::uint32 videosize_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static ReqCRSCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class CmdCRSDestroyConf : public ::google::protobuf::Message {
 public:
  CmdCRSDestroyConf();
  virtual ~CmdCRSDestroyConf();

  CmdCRSDestroyConf(const CmdCRSDestroyConf& from);

  inline CmdCRSDestroyConf& operator=(const CmdCRSDestroyConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdCRSDestroyConf& default_instance();

  void Swap(CmdCRSDestroyConf* other);

  // implements Message ----------------------------------------------

  CmdCRSDestroyConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdCRSDestroyConf& from);
  void MergeFrom(const CmdCRSDestroyConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdCRSDestroyConf)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::std::string* reason_;
  ::google::protobuf::uint32 crschannelid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static CmdCRSDestroyConf* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSTerJoined : public ::google::protobuf::Message {
 public:
  IndCRSTerJoined();
  virtual ~IndCRSTerJoined();

  IndCRSTerJoined(const IndCRSTerJoined& from);

  inline IndCRSTerJoined& operator=(const IndCRSTerJoined& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSTerJoined& default_instance();

  void Swap(IndCRSTerJoined* other);

  // implements Message ----------------------------------------------

  IndCRSTerJoined* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSTerJoined& from);
  void MergeFrom(const IndCRSTerJoined& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 terid = 4;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 4;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional string tername = 6;
  inline bool has_tername() const;
  inline void clear_tername();
  static const int kTernameFieldNumber = 6;
  inline const ::std::string& tername() const;
  inline void set_tername(const ::std::string& value);
  inline void set_tername(const char* value);
  inline void set_tername(const char* value, size_t size);
  inline ::std::string* mutable_tername();
  inline ::std::string* release_tername();
  inline void set_allocated_tername(::std::string* tername);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSTerJoined)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_tername();
  inline void clear_has_tername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 channelid_;
  ::std::string* tername_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSTerJoined* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSTerLeft : public ::google::protobuf::Message {
 public:
  IndCRSTerLeft();
  virtual ~IndCRSTerLeft();

  IndCRSTerLeft(const IndCRSTerLeft& from);

  inline IndCRSTerLeft& operator=(const IndCRSTerLeft& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSTerLeft& default_instance();

  void Swap(IndCRSTerLeft* other);

  // implements Message ----------------------------------------------

  IndCRSTerLeft* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSTerLeft& from);
  void MergeFrom(const IndCRSTerLeft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 terid = 4;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 4;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSTerLeft)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 channelid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSTerLeft* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToCRS_ScreensInMPI : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToCRS_ScreensInMPI();
  virtual ~IndConfAllMPIInfoToCRS_ScreensInMPI();

  IndConfAllMPIInfoToCRS_ScreensInMPI(const IndConfAllMPIInfoToCRS_ScreensInMPI& from);

  inline IndConfAllMPIInfoToCRS_ScreensInMPI& operator=(const IndConfAllMPIInfoToCRS_ScreensInMPI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToCRS_ScreensInMPI& default_instance();

  void Swap(IndConfAllMPIInfoToCRS_ScreensInMPI* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToCRS_ScreensInMPI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToCRS_ScreensInMPI& from);
  void MergeFrom(const IndConfAllMPIInfoToCRS_ScreensInMPI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 screenid = 1;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 1;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 2;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 2;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI)
 private:
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToCRS_ScreensInMPI* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToCRS_MPIsInConf : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToCRS_MPIsInConf();
  virtual ~IndConfAllMPIInfoToCRS_MPIsInConf();

  IndConfAllMPIInfoToCRS_MPIsInConf(const IndConfAllMPIInfoToCRS_MPIsInConf& from);

  inline IndConfAllMPIInfoToCRS_MPIsInConf& operator=(const IndConfAllMPIInfoToCRS_MPIsInConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToCRS_MPIsInConf& default_instance();

  void Swap(IndConfAllMPIInfoToCRS_MPIsInConf* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToCRS_MPIsInConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToCRS_MPIsInConf& from);
  void MergeFrom(const IndConfAllMPIInfoToCRS_MPIsInConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mpichannelid = 1;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
  inline int screens_size() const;
  inline void clear_screens();
  static const int kScreensFieldNumber = 2;
  inline const ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI& screens(int index) const;
  inline ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI* mutable_screens(int index);
  inline ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI* add_screens();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI >&
      screens() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI >*
      mutable_screens();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf)
 private:
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI > screens_;
  ::google::protobuf::uint32 mpichannelid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToCRS_MPIsInConf* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToCRS : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToCRS();
  virtual ~IndConfAllMPIInfoToCRS();

  IndConfAllMPIInfoToCRS(const IndConfAllMPIInfoToCRS& from);

  inline IndConfAllMPIInfoToCRS& operator=(const IndConfAllMPIInfoToCRS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToCRS& default_instance();

  void Swap(IndConfAllMPIInfoToCRS* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToCRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToCRS& from);
  void MergeFrom(const IndConfAllMPIInfoToCRS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndConfAllMPIInfoToCRS_ScreensInMPI ScreensInMPI;
  typedef IndConfAllMPIInfoToCRS_MPIsInConf MPIsInConf;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
  inline int mpis_size() const;
  inline void clear_mpis();
  static const int kMpisFieldNumber = 4;
  inline const ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf& mpis(int index) const;
  inline ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf* mutable_mpis(int index);
  inline ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf* add_mpis();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf >&
      mpis() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf >*
      mutable_mpis();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToCRS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf > mpis_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToCRS* default_instance_;
};
// -------------------------------------------------------------------

class IndMPIInfoToCRS : public ::google::protobuf::Message {
 public:
  IndMPIInfoToCRS();
  virtual ~IndMPIInfoToCRS();

  IndMPIInfoToCRS(const IndMPIInfoToCRS& from);

  inline IndMPIInfoToCRS& operator=(const IndMPIInfoToCRS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMPIInfoToCRS& default_instance();

  void Swap(IndMPIInfoToCRS* other);

  // implements Message ----------------------------------------------

  IndMPIInfoToCRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMPIInfoToCRS& from);
  void MergeFrom(const IndMPIInfoToCRS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mpichannelid = 2;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 2;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMPIInfoToCRS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();
  inline void set_has_addordel();
  inline void clear_has_addordel();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mpichannelid_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::uint32 crsid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndMPIInfoToCRS* default_instance_;
};
// -------------------------------------------------------------------

class IndScreenInfoToCRS : public ::google::protobuf::Message {
 public:
  IndScreenInfoToCRS();
  virtual ~IndScreenInfoToCRS();

  IndScreenInfoToCRS(const IndScreenInfoToCRS& from);

  inline IndScreenInfoToCRS& operator=(const IndScreenInfoToCRS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndScreenInfoToCRS& default_instance();

  void Swap(IndScreenInfoToCRS* other);

  // implements Message ----------------------------------------------

  IndScreenInfoToCRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndScreenInfoToCRS& from);
  void MergeFrom(const IndScreenInfoToCRS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mpichannelid = 2;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 2;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 3;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 3;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 4;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 4;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 addordel = 5;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 5;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // optional uint32 crsid = 6;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 6;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndScreenInfoToCRS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_addordel();
  inline void clear_has_addordel();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mpichannelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::uint32 crsid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndScreenInfoToCRS* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSSelectVasVideo_AnalyInfo : public ::google::protobuf::Message {
 public:
  IndCRSSelectVasVideo_AnalyInfo();
  virtual ~IndCRSSelectVasVideo_AnalyInfo();

  IndCRSSelectVasVideo_AnalyInfo(const IndCRSSelectVasVideo_AnalyInfo& from);

  inline IndCRSSelectVasVideo_AnalyInfo& operator=(const IndCRSSelectVasVideo_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSSelectVasVideo_AnalyInfo& default_instance();

  void Swap(IndCRSSelectVasVideo_AnalyInfo* other);

  // implements Message ----------------------------------------------

  IndCRSSelectVasVideo_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSSelectVasVideo_AnalyInfo& from);
  void MergeFrom(const IndCRSSelectVasVideo_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // optional bool isselect = 5;
  inline bool has_isselect() const;
  inline void clear_isselect();
  static const int kIsselectFieldNumber = 5;
  inline bool isselect() const;
  inline void set_isselect(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSSelectVasVideo.AnalyInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();
  inline void set_has_isselect();
  inline void clear_has_isselect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  bool isselect_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSSelectVasVideo_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSSelectVasVideo : public ::google::protobuf::Message {
 public:
  IndCRSSelectVasVideo();
  virtual ~IndCRSSelectVasVideo();

  IndCRSSelectVasVideo(const IndCRSSelectVasVideo& from);

  inline IndCRSSelectVasVideo& operator=(const IndCRSSelectVasVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSSelectVasVideo& default_instance();

  void Swap(IndCRSSelectVasVideo* other);

  // implements Message ----------------------------------------------

  IndCRSSelectVasVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSSelectVasVideo& from);
  void MergeFrom(const IndCRSSelectVasVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndCRSSelectVasVideo_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 2;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 2;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
  inline int selectvasinfos_size() const;
  inline void clear_selectvasinfos();
  static const int kSelectvasinfosFieldNumber = 3;
  inline const ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo& selectvasinfos(int index) const;
  inline ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo* mutable_selectvasinfos(int index);
  inline ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo* add_selectvasinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo >&
      selectvasinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo >*
      mutable_selectvasinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSSelectVasVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo > selectvasinfos_;
  ::google::protobuf::uint32 crsid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSSelectVasVideo* default_instance_;
};
// -------------------------------------------------------------------

class ReqCRSStartRec : public ::google::protobuf::Message {
 public:
  ReqCRSStartRec();
  virtual ~ReqCRSStartRec();

  ReqCRSStartRec(const ReqCRSStartRec& from);

  inline ReqCRSStartRec& operator=(const ReqCRSStartRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCRSStartRec& default_instance();

  void Swap(ReqCRSStartRec* other);

  // implements Message ----------------------------------------------

  ReqCRSStartRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCRSStartRec& from);
  void MergeFrom(const ReqCRSStartRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 seqnum = 8;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 8;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqCRSStartRec)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 seqnum_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static ReqCRSStartRec* default_instance_;
};
// -------------------------------------------------------------------

class ReqCRSStopRec : public ::google::protobuf::Message {
 public:
  ReqCRSStopRec();
  virtual ~ReqCRSStopRec();

  ReqCRSStopRec(const ReqCRSStopRec& from);

  inline ReqCRSStopRec& operator=(const ReqCRSStopRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCRSStopRec& default_instance();

  void Swap(ReqCRSStopRec* other);

  // implements Message ----------------------------------------------

  ReqCRSStopRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCRSStopRec& from);
  void MergeFrom(const ReqCRSStopRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 seqnum = 8;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 8;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqCRSStopRec)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 seqnum_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static ReqCRSStopRec* default_instance_;
};
// -------------------------------------------------------------------

class CmdCRSReOpenNetMPMediaPort : public ::google::protobuf::Message {
 public:
  CmdCRSReOpenNetMPMediaPort();
  virtual ~CmdCRSReOpenNetMPMediaPort();

  CmdCRSReOpenNetMPMediaPort(const CmdCRSReOpenNetMPMediaPort& from);

  inline CmdCRSReOpenNetMPMediaPort& operator=(const CmdCRSReOpenNetMPMediaPort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdCRSReOpenNetMPMediaPort& default_instance();

  void Swap(CmdCRSReOpenNetMPMediaPort* other);

  // implements Message ----------------------------------------------

  CmdCRSReOpenNetMPMediaPort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdCRSReOpenNetMPMediaPort& from);
  void MergeFrom(const CmdCRSReOpenNetMPMediaPort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string netmpip = 1;
  inline bool has_netmpip() const;
  inline void clear_netmpip();
  static const int kNetmpipFieldNumber = 1;
  inline const ::std::string& netmpip() const;
  inline void set_netmpip(const ::std::string& value);
  inline void set_netmpip(const char* value);
  inline void set_netmpip(const char* value, size_t size);
  inline ::std::string* mutable_netmpip();
  inline ::std::string* release_netmpip();
  inline void set_allocated_netmpip(::std::string* netmpip);

  // optional uint32 audiodatarecvport = 2;
  inline bool has_audiodatarecvport() const;
  inline void clear_audiodatarecvport();
  static const int kAudiodatarecvportFieldNumber = 2;
  inline ::google::protobuf::uint32 audiodatarecvport() const;
  inline void set_audiodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 audioctrlrecvport = 3;
  inline bool has_audioctrlrecvport() const;
  inline void clear_audioctrlrecvport();
  static const int kAudioctrlrecvportFieldNumber = 3;
  inline ::google::protobuf::uint32 audioctrlrecvport() const;
  inline void set_audioctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 videodatarecvport = 4;
  inline bool has_videodatarecvport() const;
  inline void clear_videodatarecvport();
  static const int kVideodatarecvportFieldNumber = 4;
  inline ::google::protobuf::uint32 videodatarecvport() const;
  inline void set_videodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 videoctrlrecvport = 5;
  inline bool has_videoctrlrecvport() const;
  inline void clear_videoctrlrecvport();
  static const int kVideoctrlrecvportFieldNumber = 5;
  inline ::google::protobuf::uint32 videoctrlrecvport() const;
  inline void set_videoctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video2datarecvport = 6;
  inline bool has_video2datarecvport() const;
  inline void clear_video2datarecvport();
  static const int kVideo2DatarecvportFieldNumber = 6;
  inline ::google::protobuf::uint32 video2datarecvport() const;
  inline void set_video2datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video2ctrlrecvport = 7;
  inline bool has_video2ctrlrecvport() const;
  inline void clear_video2ctrlrecvport();
  static const int kVideo2CtrlrecvportFieldNumber = 7;
  inline ::google::protobuf::uint32 video2ctrlrecvport() const;
  inline void set_video2ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video3datarecvport = 8;
  inline bool has_video3datarecvport() const;
  inline void clear_video3datarecvport();
  static const int kVideo3DatarecvportFieldNumber = 8;
  inline ::google::protobuf::uint32 video3datarecvport() const;
  inline void set_video3datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video3ctrlrecvport = 9;
  inline bool has_video3ctrlrecvport() const;
  inline void clear_video3ctrlrecvport();
  static const int kVideo3CtrlrecvportFieldNumber = 9;
  inline ::google::protobuf::uint32 video3ctrlrecvport() const;
  inline void set_video3ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopdatarecvport = 10;
  inline bool has_desktopdatarecvport() const;
  inline void clear_desktopdatarecvport();
  static const int kDesktopdatarecvportFieldNumber = 10;
  inline ::google::protobuf::uint32 desktopdatarecvport() const;
  inline void set_desktopdatarecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopctrlrecvport = 11;
  inline bool has_desktopctrlrecvport() const;
  inline void clear_desktopctrlrecvport();
  static const int kDesktopctrlrecvportFieldNumber = 11;
  inline ::google::protobuf::uint32 desktopctrlrecvport() const;
  inline void set_desktopctrlrecvport(::google::protobuf::uint32 value);

  // optional uint64 confid = 12;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 12;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 13;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 13;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 14;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 14;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 15;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 15;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdCRSReOpenNetMPMediaPort)
 private:
  inline void set_has_netmpip();
  inline void clear_has_netmpip();
  inline void set_has_audiodatarecvport();
  inline void clear_has_audiodatarecvport();
  inline void set_has_audioctrlrecvport();
  inline void clear_has_audioctrlrecvport();
  inline void set_has_videodatarecvport();
  inline void clear_has_videodatarecvport();
  inline void set_has_videoctrlrecvport();
  inline void clear_has_videoctrlrecvport();
  inline void set_has_video2datarecvport();
  inline void clear_has_video2datarecvport();
  inline void set_has_video2ctrlrecvport();
  inline void clear_has_video2ctrlrecvport();
  inline void set_has_video3datarecvport();
  inline void clear_has_video3datarecvport();
  inline void set_has_video3ctrlrecvport();
  inline void clear_has_video3ctrlrecvport();
  inline void set_has_desktopdatarecvport();
  inline void clear_has_desktopdatarecvport();
  inline void set_has_desktopctrlrecvport();
  inline void clear_has_desktopctrlrecvport();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* netmpip_;
  ::google::protobuf::uint32 audiodatarecvport_;
  ::google::protobuf::uint32 audioctrlrecvport_;
  ::google::protobuf::uint32 videodatarecvport_;
  ::google::protobuf::uint32 videoctrlrecvport_;
  ::google::protobuf::uint32 video2datarecvport_;
  ::google::protobuf::uint32 video2ctrlrecvport_;
  ::google::protobuf::uint32 video3datarecvport_;
  ::google::protobuf::uint32 video3ctrlrecvport_;
  ::google::protobuf::uint32 desktopdatarecvport_;
  ::google::protobuf::uint32 desktopctrlrecvport_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static CmdCRSReOpenNetMPMediaPort* default_instance_;
};
// -------------------------------------------------------------------

class IndMCHeartBeatToCRS : public ::google::protobuf::Message {
 public:
  IndMCHeartBeatToCRS();
  virtual ~IndMCHeartBeatToCRS();

  IndMCHeartBeatToCRS(const IndMCHeartBeatToCRS& from);

  inline IndMCHeartBeatToCRS& operator=(const IndMCHeartBeatToCRS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCHeartBeatToCRS& default_instance();

  void Swap(IndMCHeartBeatToCRS* other);

  // implements Message ----------------------------------------------

  IndMCHeartBeatToCRS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCHeartBeatToCRS& from);
  void MergeFrom(const IndMCHeartBeatToCRS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 2;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 2;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCHeartBeatToCRS)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndMCHeartBeatToCRS* default_instance_;
};
// -------------------------------------------------------------------

class ReqCRSStartLive : public ::google::protobuf::Message {
 public:
  ReqCRSStartLive();
  virtual ~ReqCRSStartLive();

  ReqCRSStartLive(const ReqCRSStartLive& from);

  inline ReqCRSStartLive& operator=(const ReqCRSStartLive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCRSStartLive& default_instance();

  void Swap(ReqCRSStartLive* other);

  // implements Message ----------------------------------------------

  ReqCRSStartLive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCRSStartLive& from);
  void MergeFrom(const ReqCRSStartLive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 seqnum = 8;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 8;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // optional uint32 relatedsrsid = 9;
  inline bool has_relatedsrsid() const;
  inline void clear_relatedsrsid();
  static const int kRelatedsrsidFieldNumber = 9;
  inline ::google::protobuf::uint32 relatedsrsid() const;
  inline void set_relatedsrsid(::google::protobuf::uint32 value);

  // optional string liveurl = 10;
  inline bool has_liveurl() const;
  inline void clear_liveurl();
  static const int kLiveurlFieldNumber = 10;
  inline const ::std::string& liveurl() const;
  inline void set_liveurl(const ::std::string& value);
  inline void set_liveurl(const char* value);
  inline void set_liveurl(const char* value, size_t size);
  inline ::std::string* mutable_liveurl();
  inline ::std::string* release_liveurl();
  inline void set_allocated_liveurl(::std::string* liveurl);

  // optional uint32 livesvrtype = 11;
  inline bool has_livesvrtype() const;
  inline void clear_livesvrtype();
  static const int kLivesvrtypeFieldNumber = 11;
  inline ::google::protobuf::uint32 livesvrtype() const;
  inline void set_livesvrtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqCRSStartLive)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();
  inline void set_has_relatedsrsid();
  inline void clear_has_relatedsrsid();
  inline void set_has_liveurl();
  inline void clear_has_liveurl();
  inline void set_has_livesvrtype();
  inline void clear_has_livesvrtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 seqnum_;
  ::google::protobuf::uint32 relatedsrsid_;
  ::std::string* liveurl_;
  ::google::protobuf::uint32 livesvrtype_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static ReqCRSStartLive* default_instance_;
};
// -------------------------------------------------------------------

class CmdCRSStopLive : public ::google::protobuf::Message {
 public:
  CmdCRSStopLive();
  virtual ~CmdCRSStopLive();

  CmdCRSStopLive(const CmdCRSStopLive& from);

  inline CmdCRSStopLive& operator=(const CmdCRSStopLive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdCRSStopLive& default_instance();

  void Swap(CmdCRSStopLive* other);

  // implements Message ----------------------------------------------

  CmdCRSStopLive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdCRSStopLive& from);
  void MergeFrom(const CmdCRSStopLive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional string liveurl = 8;
  inline bool has_liveurl() const;
  inline void clear_liveurl();
  static const int kLiveurlFieldNumber = 8;
  inline const ::std::string& liveurl() const;
  inline void set_liveurl(const ::std::string& value);
  inline void set_liveurl(const char* value);
  inline void set_liveurl(const char* value, size_t size);
  inline ::std::string* mutable_liveurl();
  inline ::std::string* release_liveurl();
  inline void set_allocated_liveurl(::std::string* liveurl);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdCRSStopLive)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_liveurl();
  inline void clear_has_liveurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::std::string* liveurl_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static CmdCRSStopLive* default_instance_;
};
// -------------------------------------------------------------------

class RspCRSCreateConf : public ::google::protobuf::Message {
 public:
  RspCRSCreateConf();
  virtual ~RspCRSCreateConf();

  RspCRSCreateConf(const RspCRSCreateConf& from);

  inline RspCRSCreateConf& operator=(const RspCRSCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCRSCreateConf& default_instance();

  void Swap(RspCRSCreateConf* other);

  // implements Message ----------------------------------------------

  RspCRSCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCRSCreateConf& from);
  void MergeFrom(const RspCRSCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 5;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 relatednetmpid = 6;
  inline bool has_relatednetmpid() const;
  inline void clear_relatednetmpid();
  static const int kRelatednetmpidFieldNumber = 6;
  inline ::google::protobuf::uint32 relatednetmpid() const;
  inline void set_relatednetmpid(::google::protobuf::uint32 value);

  // optional string failreason = 7;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 7;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspCRSCreateConf)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_relatednetmpid();
  inline void clear_has_relatednetmpid();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::std::string* failreason_;
  ::google::protobuf::uint32 relatednetmpid_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static RspCRSCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class RspCRSStartRec : public ::google::protobuf::Message {
 public:
  RspCRSStartRec();
  virtual ~RspCRSStartRec();

  RspCRSStartRec(const RspCRSStartRec& from);

  inline RspCRSStartRec& operator=(const RspCRSStartRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCRSStartRec& default_instance();

  void Swap(RspCRSStartRec* other);

  // implements Message ----------------------------------------------

  RspCRSStartRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCRSStartRec& from);
  void MergeFrom(const RspCRSStartRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 5;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 6;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 6;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 7;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 7;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 8;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 8;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 9;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 9;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 10;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 10;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 11;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 11;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string failreason = 12;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 12;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional string relativepath = 13;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 13;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional uint32 seqnum = 14;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 14;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // optional uint32 errorcode = 15;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 15;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspCRSStartRec)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 seqnum_;
  ::std::string* failreason_;
  ::std::string* relativepath_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static RspCRSStartRec* default_instance_;
};
// -------------------------------------------------------------------

class RspCRSStopRec : public ::google::protobuf::Message {
 public:
  RspCRSStopRec();
  virtual ~RspCRSStopRec();

  RspCRSStopRec(const RspCRSStopRec& from);

  inline RspCRSStopRec& operator=(const RspCRSStopRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCRSStopRec& default_instance();

  void Swap(RspCRSStopRec* other);

  // implements Message ----------------------------------------------

  RspCRSStopRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCRSStopRec& from);
  void MergeFrom(const RspCRSStopRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 5;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 6;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 6;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 7;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 7;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 8;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 8;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 9;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 9;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 10;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 10;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 11;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 11;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string failreason = 12;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 12;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional string relativepath = 13;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 13;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional uint32 seqnum = 14;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 14;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // optional uint64 filesize = 15;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 15;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // optional uint32 errorcode = 16;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 16;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspCRSStopRec)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 seqnum_;
  ::std::string* failreason_;
  ::std::string* relativepath_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static RspCRSStopRec* default_instance_;
};
// -------------------------------------------------------------------

class RspCRSStartLive_LiveAddr : public ::google::protobuf::Message {
 public:
  RspCRSStartLive_LiveAddr();
  virtual ~RspCRSStartLive_LiveAddr();

  RspCRSStartLive_LiveAddr(const RspCRSStartLive_LiveAddr& from);

  inline RspCRSStartLive_LiveAddr& operator=(const RspCRSStartLive_LiveAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCRSStartLive_LiveAddr& default_instance();

  void Swap(RspCRSStartLive_LiveAddr* other);

  // implements Message ----------------------------------------------

  RspCRSStartLive_LiveAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCRSStartLive_LiveAddr& from);
  void MergeFrom(const RspCRSStartLive_LiveAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspCRSStartLive.LiveAddr)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static RspCRSStartLive_LiveAddr* default_instance_;
};
// -------------------------------------------------------------------

class RspCRSStartLive : public ::google::protobuf::Message {
 public:
  RspCRSStartLive();
  virtual ~RspCRSStartLive();

  RspCRSStartLive(const RspCRSStartLive& from);

  inline RspCRSStartLive& operator=(const RspCRSStartLive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCRSStartLive& default_instance();

  void Swap(RspCRSStartLive* other);

  // implements Message ----------------------------------------------

  RspCRSStartLive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCRSStartLive& from);
  void MergeFrom(const RspCRSStartLive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspCRSStartLive_LiveAddr LiveAddr;

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 5;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 6;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 6;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 7;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 7;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 8;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 8;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 relatedsrsid = 9;
  inline bool has_relatedsrsid() const;
  inline void clear_relatedsrsid();
  static const int kRelatedsrsidFieldNumber = 9;
  inline ::google::protobuf::uint32 relatedsrsid() const;
  inline void set_relatedsrsid(::google::protobuf::uint32 value);

  // optional string liveurl = 10;
  inline bool has_liveurl() const;
  inline void clear_liveurl();
  static const int kLiveurlFieldNumber = 10;
  inline const ::std::string& liveurl() const;
  inline void set_liveurl(const ::std::string& value);
  inline void set_liveurl(const char* value);
  inline void set_liveurl(const char* value, size_t size);
  inline ::std::string* mutable_liveurl();
  inline ::std::string* release_liveurl();
  inline void set_allocated_liveurl(::std::string* liveurl);

  // optional uint32 seqnum = 11;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 11;
  inline ::google::protobuf::uint32 seqnum() const;
  inline void set_seqnum(::google::protobuf::uint32 value);

  // optional string failreason = 12;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 12;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint32 errorcode = 13;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 13;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional uint32 livesvrtype = 14;
  inline bool has_livesvrtype() const;
  inline void clear_livesvrtype();
  static const int kLivesvrtypeFieldNumber = 14;
  inline ::google::protobuf::uint32 livesvrtype() const;
  inline void set_livesvrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
  inline int liveaddrs_size() const;
  inline void clear_liveaddrs();
  static const int kLiveaddrsFieldNumber = 15;
  inline const ::SRMsgs::RspCRSStartLive_LiveAddr& liveaddrs(int index) const;
  inline ::SRMsgs::RspCRSStartLive_LiveAddr* mutable_liveaddrs(int index);
  inline ::SRMsgs::RspCRSStartLive_LiveAddr* add_liveaddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspCRSStartLive_LiveAddr >&
      liveaddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspCRSStartLive_LiveAddr >*
      mutable_liveaddrs();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspCRSStartLive)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_relatedsrsid();
  inline void clear_has_relatedsrsid();
  inline void set_has_liveurl();
  inline void clear_has_liveurl();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_livesvrtype();
  inline void clear_has_livesvrtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 relatedsrsid_;
  ::std::string* liveurl_;
  ::std::string* failreason_;
  ::google::protobuf::uint32 seqnum_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspCRSStartLive_LiveAddr > liveaddrs_;
  ::google::protobuf::uint32 livesvrtype_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static RspCRSStartLive* default_instance_;
};
// -------------------------------------------------------------------

class CmdCRSSeleteVideo_TermInfo : public ::google::protobuf::Message {
 public:
  CmdCRSSeleteVideo_TermInfo();
  virtual ~CmdCRSSeleteVideo_TermInfo();

  CmdCRSSeleteVideo_TermInfo(const CmdCRSSeleteVideo_TermInfo& from);

  inline CmdCRSSeleteVideo_TermInfo& operator=(const CmdCRSSeleteVideo_TermInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdCRSSeleteVideo_TermInfo& default_instance();

  void Swap(CmdCRSSeleteVideo_TermInfo* other);

  // implements Message ----------------------------------------------

  CmdCRSSeleteVideo_TermInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdCRSSeleteVideo_TermInfo& from);
  void MergeFrom(const CmdCRSSeleteVideo_TermInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 videosize = 3;
  inline bool has_videosize() const;
  inline void clear_videosize();
  static const int kVideosizeFieldNumber = 3;
  inline ::google::protobuf::uint32 videosize() const;
  inline void set_videosize(::google::protobuf::uint32 value);

  // optional uint32 recvfps = 4;
  inline bool has_recvfps() const;
  inline void clear_recvfps();
  static const int kRecvfpsFieldNumber = 4;
  inline ::google::protobuf::uint32 recvfps() const;
  inline void set_recvfps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdCRSSeleteVideo.TermInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_videosize();
  inline void clear_has_videosize();
  inline void set_has_recvfps();
  inline void clear_has_recvfps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 videosize_;
  ::google::protobuf::uint32 recvfps_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static CmdCRSSeleteVideo_TermInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdCRSSeleteVideo : public ::google::protobuf::Message {
 public:
  CmdCRSSeleteVideo();
  virtual ~CmdCRSSeleteVideo();

  CmdCRSSeleteVideo(const CmdCRSSeleteVideo& from);

  inline CmdCRSSeleteVideo& operator=(const CmdCRSSeleteVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdCRSSeleteVideo& default_instance();

  void Swap(CmdCRSSeleteVideo* other);

  // implements Message ----------------------------------------------

  CmdCRSSeleteVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdCRSSeleteVideo& from);
  void MergeFrom(const CmdCRSSeleteVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdCRSSeleteVideo_TermInfo TermInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
  inline int seleteterinfo_size() const;
  inline void clear_seleteterinfo();
  static const int kSeleteterinfoFieldNumber = 5;
  inline const ::SRMsgs::CmdCRSSeleteVideo_TermInfo& seleteterinfo(int index) const;
  inline ::SRMsgs::CmdCRSSeleteVideo_TermInfo* mutable_seleteterinfo(int index);
  inline ::SRMsgs::CmdCRSSeleteVideo_TermInfo* add_seleteterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdCRSSeleteVideo_TermInfo >&
      seleteterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdCRSSeleteVideo_TermInfo >*
      mutable_seleteterinfo();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdCRSSeleteVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdCRSSeleteVideo_TermInfo > seleteterinfo_;
  ::google::protobuf::uint32 crschannelid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static CmdCRSSeleteVideo* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSHeartBeatToMC : public ::google::protobuf::Message {
 public:
  IndCRSHeartBeatToMC();
  virtual ~IndCRSHeartBeatToMC();

  IndCRSHeartBeatToMC(const IndCRSHeartBeatToMC& from);

  inline IndCRSHeartBeatToMC& operator=(const IndCRSHeartBeatToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSHeartBeatToMC& default_instance();

  void Swap(IndCRSHeartBeatToMC* other);

  // implements Message ----------------------------------------------

  IndCRSHeartBeatToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSHeartBeatToMC& from);
  void MergeFrom(const IndCRSHeartBeatToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 2;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 2;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSHeartBeatToMC)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSHeartBeatToMC* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSFileStorPathToMC : public ::google::protobuf::Message {
 public:
  IndCRSFileStorPathToMC();
  virtual ~IndCRSFileStorPathToMC();

  IndCRSFileStorPathToMC(const IndCRSFileStorPathToMC& from);

  inline IndCRSFileStorPathToMC& operator=(const IndCRSFileStorPathToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSFileStorPathToMC& default_instance();

  void Swap(IndCRSFileStorPathToMC* other);

  // implements Message ----------------------------------------------

  IndCRSFileStorPathToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSFileStorPathToMC& from);
  void MergeFrom(const IndCRSFileStorPathToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 8;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 8;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 9;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 9;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 10;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 10;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string relativepath = 11;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 11;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional uint32 recordstate = 12;
  inline bool has_recordstate() const;
  inline void clear_recordstate();
  static const int kRecordstateFieldNumber = 12;
  inline ::google::protobuf::uint32 recordstate() const;
  inline void set_recordstate(::google::protobuf::uint32 value);

  // optional uint64 filesize = 13;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 13;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSFileStorPathToMC)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_recordstate();
  inline void clear_has_recordstate();
  inline void set_has_filesize();
  inline void clear_has_filesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::std::string* relativepath_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 recordstate_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSFileStorPathToMC* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSLiveStateToMC : public ::google::protobuf::Message {
 public:
  IndCRSLiveStateToMC();
  virtual ~IndCRSLiveStateToMC();

  IndCRSLiveStateToMC(const IndCRSLiveStateToMC& from);

  inline IndCRSLiveStateToMC& operator=(const IndCRSLiveStateToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSLiveStateToMC& default_instance();

  void Swap(IndCRSLiveStateToMC* other);

  // implements Message ----------------------------------------------

  IndCRSLiveStateToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSLiveStateToMC& from);
  void MergeFrom(const IndCRSLiveStateToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 crsid = 3;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 3;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional uint32 crschannelid = 4;
  inline bool has_crschannelid() const;
  inline void clear_crschannelid();
  static const int kCrschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 crschannelid() const;
  inline void set_crschannelid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 5;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 7;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 7;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 livestate = 8;
  inline bool has_livestate() const;
  inline void clear_livestate();
  static const int kLivestateFieldNumber = 8;
  inline ::google::protobuf::uint32 livestate() const;
  inline void set_livestate(::google::protobuf::uint32 value);

  // optional string statecont = 9;
  inline bool has_statecont() const;
  inline void clear_statecont();
  static const int kStatecontFieldNumber = 9;
  inline const ::std::string& statecont() const;
  inline void set_statecont(const ::std::string& value);
  inline void set_statecont(const char* value);
  inline void set_statecont(const char* value, size_t size);
  inline ::std::string* mutable_statecont();
  inline ::std::string* release_statecont();
  inline void set_allocated_statecont(::std::string* statecont);

  // optional uint32 errorcode = 10;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 10;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSLiveStateToMC)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_crschannelid();
  inline void clear_has_crschannelid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_livestate();
  inline void clear_has_livestate();
  inline void set_has_statecont();
  inline void clear_has_statecont();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint32 crschannelid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::std::string* statecont_;
  ::google::protobuf::uint32 livestate_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5fcrs_2eproto();
  friend void protobuf_AssignDesc_mc_5fcrs_2eproto();
  friend void protobuf_ShutdownFile_mc_5fcrs_2eproto();

  void InitAsDefaultInstance();
  static IndCRSLiveStateToMC* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqCRSCreateConf_NetMpAddr

// optional uint32 netmpid = 1;
inline bool ReqCRSCreateConf_NetMpAddr::has_netmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_netmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpid)
  return netmpid_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpid)
}

// optional string netmpmediaip = 2;
inline bool ReqCRSCreateConf_NetMpAddr::has_netmpmediaip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_netmpmediaip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_netmpmediaip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_netmpmediaip() {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_->clear();
  }
  clear_has_netmpmediaip();
}
inline const ::std::string& ReqCRSCreateConf_NetMpAddr::netmpmediaip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
  return *netmpmediaip_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_netmpmediaip(const ::std::string& value) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
}
inline void ReqCRSCreateConf_NetMpAddr::set_netmpmediaip(const char* value) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
}
inline void ReqCRSCreateConf_NetMpAddr::set_netmpmediaip(const char* value, size_t size) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
}
inline ::std::string* ReqCRSCreateConf_NetMpAddr::mutable_netmpmediaip() {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
  return netmpmediaip_;
}
inline ::std::string* ReqCRSCreateConf_NetMpAddr::release_netmpmediaip() {
  clear_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netmpmediaip_;
    netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqCRSCreateConf_NetMpAddr::set_allocated_netmpmediaip(::std::string* netmpmediaip) {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpmediaip_;
  }
  if (netmpmediaip) {
    set_has_netmpmediaip();
    netmpmediaip_ = netmpmediaip;
  } else {
    clear_has_netmpmediaip();
    netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqCRSCreateConf.NetMpAddr.netmpmediaip)
}

// optional uint32 audiodatarecvport = 3;
inline bool ReqCRSCreateConf_NetMpAddr::has_audiodatarecvport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_audiodatarecvport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_audiodatarecvport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_audiodatarecvport() {
  audiodatarecvport_ = 0u;
  clear_has_audiodatarecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::audiodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.audiodatarecvport)
  return audiodatarecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_audiodatarecvport(::google::protobuf::uint32 value) {
  set_has_audiodatarecvport();
  audiodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.audiodatarecvport)
}

// optional uint32 audioctrlrecvport = 4;
inline bool ReqCRSCreateConf_NetMpAddr::has_audioctrlrecvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_audioctrlrecvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_audioctrlrecvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_audioctrlrecvport() {
  audioctrlrecvport_ = 0u;
  clear_has_audioctrlrecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::audioctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.audioctrlrecvport)
  return audioctrlrecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_audioctrlrecvport(::google::protobuf::uint32 value) {
  set_has_audioctrlrecvport();
  audioctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.audioctrlrecvport)
}

// optional uint32 videodatarecvport = 5;
inline bool ReqCRSCreateConf_NetMpAddr::has_videodatarecvport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_videodatarecvport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_videodatarecvport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_videodatarecvport() {
  videodatarecvport_ = 0u;
  clear_has_videodatarecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::videodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.videodatarecvport)
  return videodatarecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_videodatarecvport(::google::protobuf::uint32 value) {
  set_has_videodatarecvport();
  videodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.videodatarecvport)
}

// optional uint32 videoctrlrecvport = 6;
inline bool ReqCRSCreateConf_NetMpAddr::has_videoctrlrecvport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_videoctrlrecvport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_videoctrlrecvport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_videoctrlrecvport() {
  videoctrlrecvport_ = 0u;
  clear_has_videoctrlrecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::videoctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.videoctrlrecvport)
  return videoctrlrecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_videoctrlrecvport(::google::protobuf::uint32 value) {
  set_has_videoctrlrecvport();
  videoctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.videoctrlrecvport)
}

// optional uint32 video2datarecvport = 7;
inline bool ReqCRSCreateConf_NetMpAddr::has_video2datarecvport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_video2datarecvport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_video2datarecvport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_video2datarecvport() {
  video2datarecvport_ = 0u;
  clear_has_video2datarecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::video2datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.video2datarecvport)
  return video2datarecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_video2datarecvport(::google::protobuf::uint32 value) {
  set_has_video2datarecvport();
  video2datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.video2datarecvport)
}

// optional uint32 video2ctrlrecvport = 8;
inline bool ReqCRSCreateConf_NetMpAddr::has_video2ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_video2ctrlrecvport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_video2ctrlrecvport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_video2ctrlrecvport() {
  video2ctrlrecvport_ = 0u;
  clear_has_video2ctrlrecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::video2ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.video2ctrlrecvport)
  return video2ctrlrecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_video2ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video2ctrlrecvport();
  video2ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.video2ctrlrecvport)
}

// optional uint32 video3datarecvport = 9;
inline bool ReqCRSCreateConf_NetMpAddr::has_video3datarecvport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_video3datarecvport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_video3datarecvport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_video3datarecvport() {
  video3datarecvport_ = 0u;
  clear_has_video3datarecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::video3datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.video3datarecvport)
  return video3datarecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_video3datarecvport(::google::protobuf::uint32 value) {
  set_has_video3datarecvport();
  video3datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.video3datarecvport)
}

// optional uint32 video3ctrlrecvport = 10;
inline bool ReqCRSCreateConf_NetMpAddr::has_video3ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_video3ctrlrecvport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_video3ctrlrecvport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_video3ctrlrecvport() {
  video3ctrlrecvport_ = 0u;
  clear_has_video3ctrlrecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::video3ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.video3ctrlrecvport)
  return video3ctrlrecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_video3ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video3ctrlrecvport();
  video3ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.video3ctrlrecvport)
}

// optional uint32 desktopdatarecvport = 11;
inline bool ReqCRSCreateConf_NetMpAddr::has_desktopdatarecvport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_desktopdatarecvport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_desktopdatarecvport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_desktopdatarecvport() {
  desktopdatarecvport_ = 0u;
  clear_has_desktopdatarecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::desktopdatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.desktopdatarecvport)
  return desktopdatarecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_desktopdatarecvport(::google::protobuf::uint32 value) {
  set_has_desktopdatarecvport();
  desktopdatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.desktopdatarecvport)
}

// optional uint32 desktopctrlrecvport = 12;
inline bool ReqCRSCreateConf_NetMpAddr::has_desktopctrlrecvport() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqCRSCreateConf_NetMpAddr::set_has_desktopctrlrecvport() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_has_desktopctrlrecvport() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqCRSCreateConf_NetMpAddr::clear_desktopctrlrecvport() {
  desktopctrlrecvport_ = 0u;
  clear_has_desktopctrlrecvport();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf_NetMpAddr::desktopctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.NetMpAddr.desktopctrlrecvport)
  return desktopctrlrecvport_;
}
inline void ReqCRSCreateConf_NetMpAddr::set_desktopctrlrecvport(::google::protobuf::uint32 value) {
  set_has_desktopctrlrecvport();
  desktopctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.NetMpAddr.desktopctrlrecvport)
}

// -------------------------------------------------------------------

// ReqCRSCreateConf

// optional uint64 confid = 1;
inline bool ReqCRSCreateConf::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCRSCreateConf::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCRSCreateConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCRSCreateConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqCRSCreateConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.confid)
  return confid_;
}
inline void ReqCRSCreateConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.confid)
}

// optional uint32 mcid = 2;
inline bool ReqCRSCreateConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCRSCreateConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCRSCreateConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCRSCreateConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.mcid)
  return mcid_;
}
inline void ReqCRSCreateConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.mcid)
}

// optional uint32 crsid = 3;
inline bool ReqCRSCreateConf::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCRSCreateConf::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCRSCreateConf::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCRSCreateConf::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.crsid)
  return crsid_;
}
inline void ReqCRSCreateConf::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.crsid)
}

// optional uint32 crschannelid = 4;
inline bool ReqCRSCreateConf::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCRSCreateConf::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCRSCreateConf::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCRSCreateConf::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.crschannelid)
  return crschannelid_;
}
inline void ReqCRSCreateConf::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.crschannelid)
}

// optional uint32 mediaencryptalg = 5;
inline bool ReqCRSCreateConf::has_mediaencryptalg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCRSCreateConf::set_has_mediaencryptalg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCRSCreateConf::clear_has_mediaencryptalg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCRSCreateConf::clear_mediaencryptalg() {
  mediaencryptalg_ = 0u;
  clear_has_mediaencryptalg();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf::mediaencryptalg() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.mediaencryptalg)
  return mediaencryptalg_;
}
inline void ReqCRSCreateConf::set_mediaencryptalg(::google::protobuf::uint32 value) {
  set_has_mediaencryptalg();
  mediaencryptalg_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.mediaencryptalg)
}

// optional bytes encryptkey = 6;
inline bool ReqCRSCreateConf::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCRSCreateConf::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCRSCreateConf::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCRSCreateConf::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& ReqCRSCreateConf::encryptkey() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.encryptkey)
  return *encryptkey_;
}
inline void ReqCRSCreateConf::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.encryptkey)
}
inline void ReqCRSCreateConf::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqCRSCreateConf.encryptkey)
}
inline void ReqCRSCreateConf::set_encryptkey(const void* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqCRSCreateConf.encryptkey)
}
inline ::std::string* ReqCRSCreateConf::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqCRSCreateConf.encryptkey)
  return encryptkey_;
}
inline ::std::string* ReqCRSCreateConf::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqCRSCreateConf::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqCRSCreateConf.encryptkey)
}

// optional .SRMsgs.ReqCRSCreateConf.NetMpAddr netmpaddr = 7;
inline bool ReqCRSCreateConf::has_netmpaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCRSCreateConf::set_has_netmpaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCRSCreateConf::clear_has_netmpaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCRSCreateConf::clear_netmpaddr() {
  if (netmpaddr_ != NULL) netmpaddr_->::SRMsgs::ReqCRSCreateConf_NetMpAddr::Clear();
  clear_has_netmpaddr();
}
inline const ::SRMsgs::ReqCRSCreateConf_NetMpAddr& ReqCRSCreateConf::netmpaddr() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.netmpaddr)
  return netmpaddr_ != NULL ? *netmpaddr_ : *default_instance_->netmpaddr_;
}
inline ::SRMsgs::ReqCRSCreateConf_NetMpAddr* ReqCRSCreateConf::mutable_netmpaddr() {
  set_has_netmpaddr();
  if (netmpaddr_ == NULL) netmpaddr_ = new ::SRMsgs::ReqCRSCreateConf_NetMpAddr;
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqCRSCreateConf.netmpaddr)
  return netmpaddr_;
}
inline ::SRMsgs::ReqCRSCreateConf_NetMpAddr* ReqCRSCreateConf::release_netmpaddr() {
  clear_has_netmpaddr();
  ::SRMsgs::ReqCRSCreateConf_NetMpAddr* temp = netmpaddr_;
  netmpaddr_ = NULL;
  return temp;
}
inline void ReqCRSCreateConf::set_allocated_netmpaddr(::SRMsgs::ReqCRSCreateConf_NetMpAddr* netmpaddr) {
  delete netmpaddr_;
  netmpaddr_ = netmpaddr;
  if (netmpaddr) {
    set_has_netmpaddr();
  } else {
    clear_has_netmpaddr();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqCRSCreateConf.netmpaddr)
}

// optional uint32 videosize = 8;
inline bool ReqCRSCreateConf::has_videosize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqCRSCreateConf::set_has_videosize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqCRSCreateConf::clear_has_videosize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqCRSCreateConf::clear_videosize() {
  videosize_ = 0u;
  clear_has_videosize();
}
inline ::google::protobuf::uint32 ReqCRSCreateConf::videosize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSCreateConf.videosize)
  return videosize_;
}
inline void ReqCRSCreateConf::set_videosize(::google::protobuf::uint32 value) {
  set_has_videosize();
  videosize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSCreateConf.videosize)
}

// -------------------------------------------------------------------

// CmdCRSDestroyConf

// optional uint64 confid = 1;
inline bool CmdCRSDestroyConf::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdCRSDestroyConf::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdCRSDestroyConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdCRSDestroyConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdCRSDestroyConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSDestroyConf.confid)
  return confid_;
}
inline void CmdCRSDestroyConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSDestroyConf.confid)
}

// optional uint32 mcid = 2;
inline bool CmdCRSDestroyConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdCRSDestroyConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdCRSDestroyConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdCRSDestroyConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdCRSDestroyConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSDestroyConf.mcid)
  return mcid_;
}
inline void CmdCRSDestroyConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSDestroyConf.mcid)
}

// optional uint32 crsid = 3;
inline bool CmdCRSDestroyConf::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdCRSDestroyConf::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdCRSDestroyConf::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdCRSDestroyConf::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 CmdCRSDestroyConf::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSDestroyConf.crsid)
  return crsid_;
}
inline void CmdCRSDestroyConf::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSDestroyConf.crsid)
}

// optional uint32 crschannelid = 4;
inline bool CmdCRSDestroyConf::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdCRSDestroyConf::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdCRSDestroyConf::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdCRSDestroyConf::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 CmdCRSDestroyConf::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSDestroyConf.crschannelid)
  return crschannelid_;
}
inline void CmdCRSDestroyConf::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSDestroyConf.crschannelid)
}

// optional string reason = 5;
inline bool CmdCRSDestroyConf::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdCRSDestroyConf::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdCRSDestroyConf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdCRSDestroyConf::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& CmdCRSDestroyConf::reason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSDestroyConf.reason)
  return *reason_;
}
inline void CmdCRSDestroyConf::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSDestroyConf.reason)
}
inline void CmdCRSDestroyConf::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdCRSDestroyConf.reason)
}
inline void CmdCRSDestroyConf::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdCRSDestroyConf.reason)
}
inline ::std::string* CmdCRSDestroyConf::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdCRSDestroyConf.reason)
  return reason_;
}
inline ::std::string* CmdCRSDestroyConf::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdCRSDestroyConf::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdCRSDestroyConf.reason)
}

// -------------------------------------------------------------------

// IndCRSTerJoined

// optional uint64 confid = 1;
inline bool IndCRSTerJoined::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSTerJoined::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSTerJoined::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSTerJoined::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSTerJoined::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.confid)
  return confid_;
}
inline void IndCRSTerJoined::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.confid)
}

// optional uint32 mcid = 2;
inline bool IndCRSTerJoined::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSTerJoined::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSTerJoined::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSTerJoined::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndCRSTerJoined::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.mcid)
  return mcid_;
}
inline void IndCRSTerJoined::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.mcid)
}

// optional uint32 crsid = 3;
inline bool IndCRSTerJoined::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSTerJoined::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSTerJoined::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSTerJoined::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSTerJoined::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.crsid)
  return crsid_;
}
inline void IndCRSTerJoined::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.crsid)
}

// optional uint32 terid = 4;
inline bool IndCRSTerJoined::has_terid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSTerJoined::set_has_terid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSTerJoined::clear_has_terid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSTerJoined::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndCRSTerJoined::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.terid)
  return terid_;
}
inline void IndCRSTerJoined::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.terid)
}

// optional uint32 channelid = 5;
inline bool IndCRSTerJoined::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSTerJoined::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSTerJoined::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSTerJoined::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndCRSTerJoined::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.channelid)
  return channelid_;
}
inline void IndCRSTerJoined::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.channelid)
}

// optional string tername = 6;
inline bool IndCRSTerJoined::has_tername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSTerJoined::set_has_tername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSTerJoined::clear_has_tername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSTerJoined::clear_tername() {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tername_->clear();
  }
  clear_has_tername();
}
inline const ::std::string& IndCRSTerJoined::tername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerJoined.tername)
  return *tername_;
}
inline void IndCRSTerJoined::set_tername(const ::std::string& value) {
  set_has_tername();
  if (tername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tername_ = new ::std::string;
  }
  tername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerJoined.tername)
}
inline void IndCRSTerJoined::set_tername(const char* value) {
  set_has_tername();
  if (tername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tername_ = new ::std::string;
  }
  tername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSTerJoined.tername)
}
inline void IndCRSTerJoined::set_tername(const char* value, size_t size) {
  set_has_tername();
  if (tername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tername_ = new ::std::string;
  }
  tername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSTerJoined.tername)
}
inline ::std::string* IndCRSTerJoined::mutable_tername() {
  set_has_tername();
  if (tername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSTerJoined.tername)
  return tername_;
}
inline ::std::string* IndCRSTerJoined::release_tername() {
  clear_has_tername();
  if (tername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tername_;
    tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSTerJoined::set_allocated_tername(::std::string* tername) {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tername_;
  }
  if (tername) {
    set_has_tername();
    tername_ = tername;
  } else {
    clear_has_tername();
    tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSTerJoined.tername)
}

// -------------------------------------------------------------------

// IndCRSTerLeft

// optional uint64 confid = 1;
inline bool IndCRSTerLeft::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSTerLeft::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSTerLeft::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSTerLeft::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSTerLeft::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerLeft.confid)
  return confid_;
}
inline void IndCRSTerLeft::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerLeft.confid)
}

// optional uint32 mcid = 2;
inline bool IndCRSTerLeft::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSTerLeft::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSTerLeft::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSTerLeft::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndCRSTerLeft::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerLeft.mcid)
  return mcid_;
}
inline void IndCRSTerLeft::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerLeft.mcid)
}

// optional uint32 crsid = 3;
inline bool IndCRSTerLeft::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSTerLeft::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSTerLeft::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSTerLeft::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSTerLeft::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerLeft.crsid)
  return crsid_;
}
inline void IndCRSTerLeft::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerLeft.crsid)
}

// optional uint32 terid = 4;
inline bool IndCRSTerLeft::has_terid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSTerLeft::set_has_terid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSTerLeft::clear_has_terid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSTerLeft::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndCRSTerLeft::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerLeft.terid)
  return terid_;
}
inline void IndCRSTerLeft::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerLeft.terid)
}

// optional uint32 channelid = 5;
inline bool IndCRSTerLeft::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSTerLeft::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSTerLeft::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSTerLeft::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndCRSTerLeft::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSTerLeft.channelid)
  return channelid_;
}
inline void IndCRSTerLeft::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSTerLeft.channelid)
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToCRS_ScreensInMPI

// optional uint32 screenid = 1;
inline bool IndConfAllMPIInfoToCRS_ScreensInMPI::has_screenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::set_has_screenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToCRS_ScreensInMPI::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI.screenid)
  return screenid_;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI.screenid)
}

// optional uint32 screentype = 2;
inline bool IndConfAllMPIInfoToCRS_ScreensInMPI::has_screentype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::set_has_screentype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToCRS_ScreensInMPI::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI.screentype)
  return screentype_;
}
inline void IndConfAllMPIInfoToCRS_ScreensInMPI::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI.screentype)
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToCRS_MPIsInConf

// optional uint32 mpichannelid = 1;
inline bool IndConfAllMPIInfoToCRS_MPIsInConf::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToCRS_MPIsInConf::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToCRS_MPIsInConf::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToCRS_MPIsInConf::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToCRS_MPIsInConf::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.mpichannelid)
  return mpichannelid_;
}
inline void IndConfAllMPIInfoToCRS_MPIsInConf::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.mpichannelid)
}

// repeated .SRMsgs.IndConfAllMPIInfoToCRS.ScreensInMPI screens = 2;
inline int IndConfAllMPIInfoToCRS_MPIsInConf::screens_size() const {
  return screens_.size();
}
inline void IndConfAllMPIInfoToCRS_MPIsInConf::clear_screens() {
  screens_.Clear();
}
inline const ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI& IndConfAllMPIInfoToCRS_MPIsInConf::screens(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.screens)
  return screens_.Get(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI* IndConfAllMPIInfoToCRS_MPIsInConf::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.screens)
  return screens_.Mutable(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI* IndConfAllMPIInfoToCRS_MPIsInConf::add_screens() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.screens)
  return screens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI >&
IndConfAllMPIInfoToCRS_MPIsInConf::screens() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.screens)
  return screens_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_ScreensInMPI >*
IndConfAllMPIInfoToCRS_MPIsInConf::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf.screens)
  return &screens_;
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToCRS

// optional uint64 confid = 1;
inline bool IndConfAllMPIInfoToCRS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToCRS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToCRS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToCRS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndConfAllMPIInfoToCRS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.confid)
  return confid_;
}
inline void IndConfAllMPIInfoToCRS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.confid)
}

// optional uint32 mcid = 2;
inline bool IndConfAllMPIInfoToCRS::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndConfAllMPIInfoToCRS::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndConfAllMPIInfoToCRS::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndConfAllMPIInfoToCRS::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToCRS::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.mcid)
  return mcid_;
}
inline void IndConfAllMPIInfoToCRS::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.mcid)
}

// optional uint32 crsid = 3;
inline bool IndConfAllMPIInfoToCRS::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndConfAllMPIInfoToCRS::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndConfAllMPIInfoToCRS::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndConfAllMPIInfoToCRS::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToCRS::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.crsid)
  return crsid_;
}
inline void IndConfAllMPIInfoToCRS::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToCRS.crsid)
}

// repeated .SRMsgs.IndConfAllMPIInfoToCRS.MPIsInConf mpis = 4;
inline int IndConfAllMPIInfoToCRS::mpis_size() const {
  return mpis_.size();
}
inline void IndConfAllMPIInfoToCRS::clear_mpis() {
  mpis_.Clear();
}
inline const ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf& IndConfAllMPIInfoToCRS::mpis(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToCRS.mpis)
  return mpis_.Get(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf* IndConfAllMPIInfoToCRS::mutable_mpis(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndConfAllMPIInfoToCRS.mpis)
  return mpis_.Mutable(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf* IndConfAllMPIInfoToCRS::add_mpis() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndConfAllMPIInfoToCRS.mpis)
  return mpis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf >&
IndConfAllMPIInfoToCRS::mpis() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndConfAllMPIInfoToCRS.mpis)
  return mpis_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToCRS_MPIsInConf >*
IndConfAllMPIInfoToCRS::mutable_mpis() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndConfAllMPIInfoToCRS.mpis)
  return &mpis_;
}

// -------------------------------------------------------------------

// IndMPIInfoToCRS

// optional uint64 confid = 1;
inline bool IndMPIInfoToCRS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMPIInfoToCRS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMPIInfoToCRS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMPIInfoToCRS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndMPIInfoToCRS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToCRS.confid)
  return confid_;
}
inline void IndMPIInfoToCRS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToCRS.confid)
}

// optional uint32 mpichannelid = 2;
inline bool IndMPIInfoToCRS::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMPIInfoToCRS::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMPIInfoToCRS::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMPIInfoToCRS::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndMPIInfoToCRS::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToCRS.mpichannelid)
  return mpichannelid_;
}
inline void IndMPIInfoToCRS::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToCRS.mpichannelid)
}

// optional uint32 addordel = 3;
inline bool IndMPIInfoToCRS::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMPIInfoToCRS::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMPIInfoToCRS::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMPIInfoToCRS::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndMPIInfoToCRS::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToCRS.addordel)
  return addordel_;
}
inline void IndMPIInfoToCRS::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToCRS.addordel)
}

// optional uint32 crsid = 4;
inline bool IndMPIInfoToCRS::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndMPIInfoToCRS::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndMPIInfoToCRS::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndMPIInfoToCRS::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndMPIInfoToCRS::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToCRS.crsid)
  return crsid_;
}
inline void IndMPIInfoToCRS::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToCRS.crsid)
}

// -------------------------------------------------------------------

// IndScreenInfoToCRS

// optional uint64 confid = 1;
inline bool IndScreenInfoToCRS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndScreenInfoToCRS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndScreenInfoToCRS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndScreenInfoToCRS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndScreenInfoToCRS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.confid)
  return confid_;
}
inline void IndScreenInfoToCRS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.confid)
}

// optional uint32 mpichannelid = 2;
inline bool IndScreenInfoToCRS::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndScreenInfoToCRS::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndScreenInfoToCRS::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndScreenInfoToCRS::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndScreenInfoToCRS::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.mpichannelid)
  return mpichannelid_;
}
inline void IndScreenInfoToCRS::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.mpichannelid)
}

// optional uint32 screenid = 3;
inline bool IndScreenInfoToCRS::has_screenid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndScreenInfoToCRS::set_has_screenid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndScreenInfoToCRS::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndScreenInfoToCRS::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndScreenInfoToCRS::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.screenid)
  return screenid_;
}
inline void IndScreenInfoToCRS::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.screenid)
}

// optional uint32 screentype = 4;
inline bool IndScreenInfoToCRS::has_screentype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndScreenInfoToCRS::set_has_screentype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndScreenInfoToCRS::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndScreenInfoToCRS::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndScreenInfoToCRS::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.screentype)
  return screentype_;
}
inline void IndScreenInfoToCRS::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.screentype)
}

// optional uint32 addordel = 5;
inline bool IndScreenInfoToCRS::has_addordel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndScreenInfoToCRS::set_has_addordel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndScreenInfoToCRS::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndScreenInfoToCRS::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndScreenInfoToCRS::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.addordel)
  return addordel_;
}
inline void IndScreenInfoToCRS::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.addordel)
}

// optional uint32 crsid = 6;
inline bool IndScreenInfoToCRS::has_crsid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndScreenInfoToCRS::set_has_crsid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndScreenInfoToCRS::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndScreenInfoToCRS::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndScreenInfoToCRS::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToCRS.crsid)
  return crsid_;
}
inline void IndScreenInfoToCRS::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToCRS.crsid)
}

// -------------------------------------------------------------------

// IndCRSSelectVasVideo_AnalyInfo

// optional uint32 terid = 1;
inline bool IndCRSSelectVasVideo_AnalyInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndCRSSelectVasVideo_AnalyInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.terid)
  return terid_;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.terid)
}

// optional uint32 screenid = 2;
inline bool IndCRSSelectVasVideo_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndCRSSelectVasVideo_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.screenid)
  return screenid_;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool IndCRSSelectVasVideo_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 IndCRSSelectVasVideo_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool IndCRSSelectVasVideo_AnalyInfo::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 IndCRSSelectVasVideo_AnalyInfo::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.srcmapid)
  return srcmapid_;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.srcmapid)
}

// optional bool isselect = 5;
inline bool IndCRSSelectVasVideo_AnalyInfo::has_isselect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_has_isselect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_has_isselect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSSelectVasVideo_AnalyInfo::clear_isselect() {
  isselect_ = false;
  clear_has_isselect();
}
inline bool IndCRSSelectVasVideo_AnalyInfo::isselect() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.isselect)
  return isselect_;
}
inline void IndCRSSelectVasVideo_AnalyInfo::set_isselect(bool value) {
  set_has_isselect();
  isselect_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.AnalyInfo.isselect)
}

// -------------------------------------------------------------------

// IndCRSSelectVasVideo

// optional uint64 confid = 1;
inline bool IndCRSSelectVasVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSSelectVasVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSSelectVasVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSSelectVasVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSSelectVasVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.confid)
  return confid_;
}
inline void IndCRSSelectVasVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.confid)
}

// optional uint32 crsid = 2;
inline bool IndCRSSelectVasVideo::has_crsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSSelectVasVideo::set_has_crsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSSelectVasVideo::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSSelectVasVideo::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSSelectVasVideo::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.crsid)
  return crsid_;
}
inline void IndCRSSelectVasVideo::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSSelectVasVideo.crsid)
}

// repeated .SRMsgs.IndCRSSelectVasVideo.AnalyInfo selectvasinfos = 3;
inline int IndCRSSelectVasVideo::selectvasinfos_size() const {
  return selectvasinfos_.size();
}
inline void IndCRSSelectVasVideo::clear_selectvasinfos() {
  selectvasinfos_.Clear();
}
inline const ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo& IndCRSSelectVasVideo::selectvasinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Get(index);
}
inline ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo* IndCRSSelectVasVideo::mutable_selectvasinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Mutable(index);
}
inline ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo* IndCRSSelectVasVideo::add_selectvasinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndCRSSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo >&
IndCRSSelectVasVideo::selectvasinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndCRSSelectVasVideo.selectvasinfos)
  return selectvasinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSSelectVasVideo_AnalyInfo >*
IndCRSSelectVasVideo::mutable_selectvasinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndCRSSelectVasVideo.selectvasinfos)
  return &selectvasinfos_;
}

// -------------------------------------------------------------------

// ReqCRSStartRec

// optional uint64 confid = 1;
inline bool ReqCRSStartRec::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCRSStartRec::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCRSStartRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCRSStartRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqCRSStartRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.confid)
  return confid_;
}
inline void ReqCRSStartRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.confid)
}

// optional uint32 mcid = 2;
inline bool ReqCRSStartRec::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCRSStartRec::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCRSStartRec::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCRSStartRec::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.mcid)
  return mcid_;
}
inline void ReqCRSStartRec::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.mcid)
}

// optional uint32 crsid = 3;
inline bool ReqCRSStartRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCRSStartRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCRSStartRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCRSStartRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.crsid)
  return crsid_;
}
inline void ReqCRSStartRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.crsid)
}

// optional uint32 crschannelid = 4;
inline bool ReqCRSStartRec::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCRSStartRec::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCRSStartRec::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCRSStartRec::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.crschannelid)
  return crschannelid_;
}
inline void ReqCRSStartRec::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.crschannelid)
}

// optional uint32 channelid = 5;
inline bool ReqCRSStartRec::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCRSStartRec::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCRSStartRec::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCRSStartRec::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.channelid)
  return channelid_;
}
inline void ReqCRSStartRec::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.channelid)
}

// optional uint32 screenid = 6;
inline bool ReqCRSStartRec::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCRSStartRec::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCRSStartRec::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCRSStartRec::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.screenid)
  return screenid_;
}
inline void ReqCRSStartRec::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.screenid)
}

// optional uint32 screentype = 7;
inline bool ReqCRSStartRec::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCRSStartRec::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCRSStartRec::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCRSStartRec::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.screentype)
  return screentype_;
}
inline void ReqCRSStartRec::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.screentype)
}

// optional uint32 seqnum = 8;
inline bool ReqCRSStartRec::has_seqnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqCRSStartRec::set_has_seqnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqCRSStartRec::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqCRSStartRec::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 ReqCRSStartRec::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartRec.seqnum)
  return seqnum_;
}
inline void ReqCRSStartRec::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartRec.seqnum)
}

// -------------------------------------------------------------------

// ReqCRSStopRec

// optional uint64 confid = 1;
inline bool ReqCRSStopRec::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCRSStopRec::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCRSStopRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCRSStopRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqCRSStopRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.confid)
  return confid_;
}
inline void ReqCRSStopRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.confid)
}

// optional uint32 mcid = 2;
inline bool ReqCRSStopRec::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCRSStopRec::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCRSStopRec::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCRSStopRec::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.mcid)
  return mcid_;
}
inline void ReqCRSStopRec::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.mcid)
}

// optional uint32 crsid = 3;
inline bool ReqCRSStopRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCRSStopRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCRSStopRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCRSStopRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.crsid)
  return crsid_;
}
inline void ReqCRSStopRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.crsid)
}

// optional uint32 crschannelid = 4;
inline bool ReqCRSStopRec::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCRSStopRec::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCRSStopRec::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCRSStopRec::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.crschannelid)
  return crschannelid_;
}
inline void ReqCRSStopRec::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.crschannelid)
}

// optional uint32 channelid = 5;
inline bool ReqCRSStopRec::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCRSStopRec::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCRSStopRec::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCRSStopRec::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.channelid)
  return channelid_;
}
inline void ReqCRSStopRec::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.channelid)
}

// optional uint32 screenid = 6;
inline bool ReqCRSStopRec::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCRSStopRec::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCRSStopRec::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCRSStopRec::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.screenid)
  return screenid_;
}
inline void ReqCRSStopRec::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.screenid)
}

// optional uint32 screentype = 7;
inline bool ReqCRSStopRec::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCRSStopRec::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCRSStopRec::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCRSStopRec::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.screentype)
  return screentype_;
}
inline void ReqCRSStopRec::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.screentype)
}

// optional uint32 seqnum = 8;
inline bool ReqCRSStopRec::has_seqnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqCRSStopRec::set_has_seqnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqCRSStopRec::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqCRSStopRec::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 ReqCRSStopRec::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStopRec.seqnum)
  return seqnum_;
}
inline void ReqCRSStopRec::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStopRec.seqnum)
}

// -------------------------------------------------------------------

// CmdCRSReOpenNetMPMediaPort

// optional string netmpip = 1;
inline bool CmdCRSReOpenNetMPMediaPort::has_netmpip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_netmpip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_netmpip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_netmpip() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_->clear();
  }
  clear_has_netmpip();
}
inline const ::std::string& CmdCRSReOpenNetMPMediaPort::netmpip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
  return *netmpip_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_netmpip(const ::std::string& value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
}
inline void CmdCRSReOpenNetMPMediaPort::set_netmpip(const char* value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
}
inline void CmdCRSReOpenNetMPMediaPort::set_netmpip(const char* value, size_t size) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
}
inline ::std::string* CmdCRSReOpenNetMPMediaPort::mutable_netmpip() {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
  return netmpip_;
}
inline ::std::string* CmdCRSReOpenNetMPMediaPort::release_netmpip() {
  clear_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netmpip_;
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdCRSReOpenNetMPMediaPort::set_allocated_netmpip(::std::string* netmpip) {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (netmpip) {
    set_has_netmpip();
    netmpip_ = netmpip;
  } else {
    clear_has_netmpip();
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdCRSReOpenNetMPMediaPort.netmpip)
}

// optional uint32 audiodatarecvport = 2;
inline bool CmdCRSReOpenNetMPMediaPort::has_audiodatarecvport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_audiodatarecvport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_audiodatarecvport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_audiodatarecvport() {
  audiodatarecvport_ = 0u;
  clear_has_audiodatarecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::audiodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.audiodatarecvport)
  return audiodatarecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_audiodatarecvport(::google::protobuf::uint32 value) {
  set_has_audiodatarecvport();
  audiodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.audiodatarecvport)
}

// optional uint32 audioctrlrecvport = 3;
inline bool CmdCRSReOpenNetMPMediaPort::has_audioctrlrecvport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_audioctrlrecvport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_audioctrlrecvport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_audioctrlrecvport() {
  audioctrlrecvport_ = 0u;
  clear_has_audioctrlrecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::audioctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.audioctrlrecvport)
  return audioctrlrecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_audioctrlrecvport(::google::protobuf::uint32 value) {
  set_has_audioctrlrecvport();
  audioctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.audioctrlrecvport)
}

// optional uint32 videodatarecvport = 4;
inline bool CmdCRSReOpenNetMPMediaPort::has_videodatarecvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_videodatarecvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_videodatarecvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_videodatarecvport() {
  videodatarecvport_ = 0u;
  clear_has_videodatarecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::videodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.videodatarecvport)
  return videodatarecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_videodatarecvport(::google::protobuf::uint32 value) {
  set_has_videodatarecvport();
  videodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.videodatarecvport)
}

// optional uint32 videoctrlrecvport = 5;
inline bool CmdCRSReOpenNetMPMediaPort::has_videoctrlrecvport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_videoctrlrecvport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_videoctrlrecvport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_videoctrlrecvport() {
  videoctrlrecvport_ = 0u;
  clear_has_videoctrlrecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::videoctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.videoctrlrecvport)
  return videoctrlrecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_videoctrlrecvport(::google::protobuf::uint32 value) {
  set_has_videoctrlrecvport();
  videoctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.videoctrlrecvport)
}

// optional uint32 video2datarecvport = 6;
inline bool CmdCRSReOpenNetMPMediaPort::has_video2datarecvport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_video2datarecvport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_video2datarecvport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_video2datarecvport() {
  video2datarecvport_ = 0u;
  clear_has_video2datarecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::video2datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.video2datarecvport)
  return video2datarecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_video2datarecvport(::google::protobuf::uint32 value) {
  set_has_video2datarecvport();
  video2datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.video2datarecvport)
}

// optional uint32 video2ctrlrecvport = 7;
inline bool CmdCRSReOpenNetMPMediaPort::has_video2ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_video2ctrlrecvport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_video2ctrlrecvport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_video2ctrlrecvport() {
  video2ctrlrecvport_ = 0u;
  clear_has_video2ctrlrecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::video2ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.video2ctrlrecvport)
  return video2ctrlrecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_video2ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video2ctrlrecvport();
  video2ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.video2ctrlrecvport)
}

// optional uint32 video3datarecvport = 8;
inline bool CmdCRSReOpenNetMPMediaPort::has_video3datarecvport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_video3datarecvport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_video3datarecvport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_video3datarecvport() {
  video3datarecvport_ = 0u;
  clear_has_video3datarecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::video3datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.video3datarecvport)
  return video3datarecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_video3datarecvport(::google::protobuf::uint32 value) {
  set_has_video3datarecvport();
  video3datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.video3datarecvport)
}

// optional uint32 video3ctrlrecvport = 9;
inline bool CmdCRSReOpenNetMPMediaPort::has_video3ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_video3ctrlrecvport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_video3ctrlrecvport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_video3ctrlrecvport() {
  video3ctrlrecvport_ = 0u;
  clear_has_video3ctrlrecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::video3ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.video3ctrlrecvport)
  return video3ctrlrecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_video3ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video3ctrlrecvport();
  video3ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.video3ctrlrecvport)
}

// optional uint32 desktopdatarecvport = 10;
inline bool CmdCRSReOpenNetMPMediaPort::has_desktopdatarecvport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_desktopdatarecvport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_desktopdatarecvport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_desktopdatarecvport() {
  desktopdatarecvport_ = 0u;
  clear_has_desktopdatarecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::desktopdatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.desktopdatarecvport)
  return desktopdatarecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_desktopdatarecvport(::google::protobuf::uint32 value) {
  set_has_desktopdatarecvport();
  desktopdatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.desktopdatarecvport)
}

// optional uint32 desktopctrlrecvport = 11;
inline bool CmdCRSReOpenNetMPMediaPort::has_desktopctrlrecvport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_desktopctrlrecvport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_desktopctrlrecvport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_desktopctrlrecvport() {
  desktopctrlrecvport_ = 0u;
  clear_has_desktopctrlrecvport();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::desktopctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.desktopctrlrecvport)
  return desktopctrlrecvport_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_desktopctrlrecvport(::google::protobuf::uint32 value) {
  set_has_desktopctrlrecvport();
  desktopctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.desktopctrlrecvport)
}

// optional uint64 confid = 12;
inline bool CmdCRSReOpenNetMPMediaPort::has_confid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_confid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_confid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdCRSReOpenNetMPMediaPort::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.confid)
  return confid_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.confid)
}

// optional uint32 mcid = 13;
inline bool CmdCRSReOpenNetMPMediaPort::has_mcid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_mcid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_mcid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.mcid)
  return mcid_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.mcid)
}

// optional uint32 crsid = 14;
inline bool CmdCRSReOpenNetMPMediaPort::has_crsid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_crsid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_crsid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.crsid)
  return crsid_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.crsid)
}

// optional uint32 crschannelid = 15;
inline bool CmdCRSReOpenNetMPMediaPort::has_crschannelid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CmdCRSReOpenNetMPMediaPort::set_has_crschannelid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CmdCRSReOpenNetMPMediaPort::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 CmdCRSReOpenNetMPMediaPort::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSReOpenNetMPMediaPort.crschannelid)
  return crschannelid_;
}
inline void CmdCRSReOpenNetMPMediaPort::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSReOpenNetMPMediaPort.crschannelid)
}

// -------------------------------------------------------------------

// IndMCHeartBeatToCRS

// optional uint32 mcid = 1;
inline bool IndMCHeartBeatToCRS::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCHeartBeatToCRS::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCHeartBeatToCRS::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCHeartBeatToCRS::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToCRS::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToCRS.mcid)
  return mcid_;
}
inline void IndMCHeartBeatToCRS::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToCRS.mcid)
}

// optional uint32 crsid = 2;
inline bool IndMCHeartBeatToCRS::has_crsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCHeartBeatToCRS::set_has_crsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCHeartBeatToCRS::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCHeartBeatToCRS::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToCRS::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToCRS.crsid)
  return crsid_;
}
inline void IndMCHeartBeatToCRS::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToCRS.crsid)
}

// -------------------------------------------------------------------

// ReqCRSStartLive

// optional uint64 confid = 1;
inline bool ReqCRSStartLive::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCRSStartLive::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCRSStartLive::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCRSStartLive::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqCRSStartLive::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.confid)
  return confid_;
}
inline void ReqCRSStartLive::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.confid)
}

// optional uint32 mcid = 2;
inline bool ReqCRSStartLive::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCRSStartLive::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCRSStartLive::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCRSStartLive::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.mcid)
  return mcid_;
}
inline void ReqCRSStartLive::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.mcid)
}

// optional uint32 crsid = 3;
inline bool ReqCRSStartLive::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCRSStartLive::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCRSStartLive::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCRSStartLive::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.crsid)
  return crsid_;
}
inline void ReqCRSStartLive::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.crsid)
}

// optional uint32 crschannelid = 4;
inline bool ReqCRSStartLive::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCRSStartLive::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCRSStartLive::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCRSStartLive::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.crschannelid)
  return crschannelid_;
}
inline void ReqCRSStartLive::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.crschannelid)
}

// optional uint32 channelid = 5;
inline bool ReqCRSStartLive::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCRSStartLive::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCRSStartLive::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCRSStartLive::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.channelid)
  return channelid_;
}
inline void ReqCRSStartLive::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.channelid)
}

// optional uint32 screenid = 6;
inline bool ReqCRSStartLive::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCRSStartLive::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCRSStartLive::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCRSStartLive::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.screenid)
  return screenid_;
}
inline void ReqCRSStartLive::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.screenid)
}

// optional uint32 screentype = 7;
inline bool ReqCRSStartLive::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCRSStartLive::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCRSStartLive::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCRSStartLive::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.screentype)
  return screentype_;
}
inline void ReqCRSStartLive::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.screentype)
}

// optional uint32 seqnum = 8;
inline bool ReqCRSStartLive::has_seqnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqCRSStartLive::set_has_seqnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqCRSStartLive::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqCRSStartLive::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.seqnum)
  return seqnum_;
}
inline void ReqCRSStartLive::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.seqnum)
}

// optional uint32 relatedsrsid = 9;
inline bool ReqCRSStartLive::has_relatedsrsid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqCRSStartLive::set_has_relatedsrsid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqCRSStartLive::clear_has_relatedsrsid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqCRSStartLive::clear_relatedsrsid() {
  relatedsrsid_ = 0u;
  clear_has_relatedsrsid();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::relatedsrsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.relatedsrsid)
  return relatedsrsid_;
}
inline void ReqCRSStartLive::set_relatedsrsid(::google::protobuf::uint32 value) {
  set_has_relatedsrsid();
  relatedsrsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.relatedsrsid)
}

// optional string liveurl = 10;
inline bool ReqCRSStartLive::has_liveurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqCRSStartLive::set_has_liveurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqCRSStartLive::clear_has_liveurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqCRSStartLive::clear_liveurl() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_->clear();
  }
  clear_has_liveurl();
}
inline const ::std::string& ReqCRSStartLive::liveurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.liveurl)
  return *liveurl_;
}
inline void ReqCRSStartLive::set_liveurl(const ::std::string& value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.liveurl)
}
inline void ReqCRSStartLive::set_liveurl(const char* value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqCRSStartLive.liveurl)
}
inline void ReqCRSStartLive::set_liveurl(const char* value, size_t size) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqCRSStartLive.liveurl)
}
inline ::std::string* ReqCRSStartLive::mutable_liveurl() {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqCRSStartLive.liveurl)
  return liveurl_;
}
inline ::std::string* ReqCRSStartLive::release_liveurl() {
  clear_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liveurl_;
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqCRSStartLive::set_allocated_liveurl(::std::string* liveurl) {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (liveurl) {
    set_has_liveurl();
    liveurl_ = liveurl;
  } else {
    clear_has_liveurl();
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqCRSStartLive.liveurl)
}

// optional uint32 livesvrtype = 11;
inline bool ReqCRSStartLive::has_livesvrtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqCRSStartLive::set_has_livesvrtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqCRSStartLive::clear_has_livesvrtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqCRSStartLive::clear_livesvrtype() {
  livesvrtype_ = 0u;
  clear_has_livesvrtype();
}
inline ::google::protobuf::uint32 ReqCRSStartLive::livesvrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqCRSStartLive.livesvrtype)
  return livesvrtype_;
}
inline void ReqCRSStartLive::set_livesvrtype(::google::protobuf::uint32 value) {
  set_has_livesvrtype();
  livesvrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqCRSStartLive.livesvrtype)
}

// -------------------------------------------------------------------

// CmdCRSStopLive

// optional uint64 confid = 1;
inline bool CmdCRSStopLive::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdCRSStopLive::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdCRSStopLive::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdCRSStopLive::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdCRSStopLive::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.confid)
  return confid_;
}
inline void CmdCRSStopLive::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.confid)
}

// optional uint32 mcid = 2;
inline bool CmdCRSStopLive::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdCRSStopLive::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdCRSStopLive::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdCRSStopLive::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.mcid)
  return mcid_;
}
inline void CmdCRSStopLive::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.mcid)
}

// optional uint32 crsid = 3;
inline bool CmdCRSStopLive::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdCRSStopLive::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdCRSStopLive::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdCRSStopLive::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.crsid)
  return crsid_;
}
inline void CmdCRSStopLive::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.crsid)
}

// optional uint32 crschannelid = 4;
inline bool CmdCRSStopLive::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdCRSStopLive::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdCRSStopLive::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdCRSStopLive::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.crschannelid)
  return crschannelid_;
}
inline void CmdCRSStopLive::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.crschannelid)
}

// optional uint32 channelid = 5;
inline bool CmdCRSStopLive::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdCRSStopLive::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdCRSStopLive::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdCRSStopLive::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.channelid)
  return channelid_;
}
inline void CmdCRSStopLive::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.channelid)
}

// optional uint32 screenid = 6;
inline bool CmdCRSStopLive::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdCRSStopLive::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdCRSStopLive::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdCRSStopLive::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.screenid)
  return screenid_;
}
inline void CmdCRSStopLive::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.screenid)
}

// optional uint32 screentype = 7;
inline bool CmdCRSStopLive::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdCRSStopLive::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdCRSStopLive::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdCRSStopLive::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 CmdCRSStopLive::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.screentype)
  return screentype_;
}
inline void CmdCRSStopLive::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.screentype)
}

// optional string liveurl = 8;
inline bool CmdCRSStopLive::has_liveurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdCRSStopLive::set_has_liveurl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdCRSStopLive::clear_has_liveurl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdCRSStopLive::clear_liveurl() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_->clear();
  }
  clear_has_liveurl();
}
inline const ::std::string& CmdCRSStopLive::liveurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSStopLive.liveurl)
  return *liveurl_;
}
inline void CmdCRSStopLive::set_liveurl(const ::std::string& value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSStopLive.liveurl)
}
inline void CmdCRSStopLive::set_liveurl(const char* value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdCRSStopLive.liveurl)
}
inline void CmdCRSStopLive::set_liveurl(const char* value, size_t size) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdCRSStopLive.liveurl)
}
inline ::std::string* CmdCRSStopLive::mutable_liveurl() {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdCRSStopLive.liveurl)
  return liveurl_;
}
inline ::std::string* CmdCRSStopLive::release_liveurl() {
  clear_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liveurl_;
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdCRSStopLive::set_allocated_liveurl(::std::string* liveurl) {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (liveurl) {
    set_has_liveurl();
    liveurl_ = liveurl;
  } else {
    clear_has_liveurl();
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdCRSStopLive.liveurl)
}

// -------------------------------------------------------------------

// RspCRSCreateConf

// optional bool isok = 1;
inline bool RspCRSCreateConf::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCRSCreateConf::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCRSCreateConf::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCRSCreateConf::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspCRSCreateConf::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.isok)
  return isok_;
}
inline void RspCRSCreateConf::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.isok)
}

// optional uint64 confid = 2;
inline bool RspCRSCreateConf::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCRSCreateConf::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCRSCreateConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCRSCreateConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspCRSCreateConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.confid)
  return confid_;
}
inline void RspCRSCreateConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.confid)
}

// optional uint32 mcid = 3;
inline bool RspCRSCreateConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspCRSCreateConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspCRSCreateConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspCRSCreateConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspCRSCreateConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.mcid)
  return mcid_;
}
inline void RspCRSCreateConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.mcid)
}

// optional uint32 crsid = 4;
inline bool RspCRSCreateConf::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspCRSCreateConf::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspCRSCreateConf::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspCRSCreateConf::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 RspCRSCreateConf::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.crsid)
  return crsid_;
}
inline void RspCRSCreateConf::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.crsid)
}

// optional uint32 crschannelid = 5;
inline bool RspCRSCreateConf::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspCRSCreateConf::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspCRSCreateConf::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspCRSCreateConf::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 RspCRSCreateConf::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.crschannelid)
  return crschannelid_;
}
inline void RspCRSCreateConf::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.crschannelid)
}

// optional uint32 relatednetmpid = 6;
inline bool RspCRSCreateConf::has_relatednetmpid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspCRSCreateConf::set_has_relatednetmpid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspCRSCreateConf::clear_has_relatednetmpid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspCRSCreateConf::clear_relatednetmpid() {
  relatednetmpid_ = 0u;
  clear_has_relatednetmpid();
}
inline ::google::protobuf::uint32 RspCRSCreateConf::relatednetmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.relatednetmpid)
  return relatednetmpid_;
}
inline void RspCRSCreateConf::set_relatednetmpid(::google::protobuf::uint32 value) {
  set_has_relatednetmpid();
  relatednetmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.relatednetmpid)
}

// optional string failreason = 7;
inline bool RspCRSCreateConf::has_failreason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspCRSCreateConf::set_has_failreason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspCRSCreateConf::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspCRSCreateConf::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspCRSCreateConf::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.failreason)
  return *failreason_;
}
inline void RspCRSCreateConf::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.failreason)
}
inline void RspCRSCreateConf::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSCreateConf.failreason)
}
inline void RspCRSCreateConf::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSCreateConf.failreason)
}
inline ::std::string* RspCRSCreateConf::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSCreateConf.failreason)
  return failreason_;
}
inline ::std::string* RspCRSCreateConf::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSCreateConf::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSCreateConf.failreason)
}

// optional uint32 errorcode = 8;
inline bool RspCRSCreateConf::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspCRSCreateConf::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspCRSCreateConf::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspCRSCreateConf::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspCRSCreateConf::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSCreateConf.errorcode)
  return errorcode_;
}
inline void RspCRSCreateConf::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSCreateConf.errorcode)
}

// -------------------------------------------------------------------

// RspCRSStartRec

// optional bool isok = 1;
inline bool RspCRSStartRec::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCRSStartRec::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCRSStartRec::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCRSStartRec::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspCRSStartRec::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.isok)
  return isok_;
}
inline void RspCRSStartRec::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.isok)
}

// optional uint64 confid = 2;
inline bool RspCRSStartRec::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCRSStartRec::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCRSStartRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCRSStartRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspCRSStartRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.confid)
  return confid_;
}
inline void RspCRSStartRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.confid)
}

// optional uint32 mcid = 3;
inline bool RspCRSStartRec::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspCRSStartRec::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspCRSStartRec::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspCRSStartRec::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspCRSStartRec::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.mcid)
  return mcid_;
}
inline void RspCRSStartRec::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.mcid)
}

// optional uint32 crsid = 4;
inline bool RspCRSStartRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspCRSStartRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspCRSStartRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspCRSStartRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 RspCRSStartRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.crsid)
  return crsid_;
}
inline void RspCRSStartRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.crsid)
}

// optional uint32 crschannelid = 5;
inline bool RspCRSStartRec::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspCRSStartRec::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspCRSStartRec::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspCRSStartRec::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 RspCRSStartRec::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.crschannelid)
  return crschannelid_;
}
inline void RspCRSStartRec::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.crschannelid)
}

// optional uint32 channelid = 6;
inline bool RspCRSStartRec::has_channelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspCRSStartRec::set_has_channelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspCRSStartRec::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspCRSStartRec::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 RspCRSStartRec::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.channelid)
  return channelid_;
}
inline void RspCRSStartRec::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.channelid)
}

// optional uint32 screenid = 7;
inline bool RspCRSStartRec::has_screenid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspCRSStartRec::set_has_screenid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspCRSStartRec::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspCRSStartRec::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 RspCRSStartRec::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.screenid)
  return screenid_;
}
inline void RspCRSStartRec::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.screenid)
}

// optional uint32 screentype = 8;
inline bool RspCRSStartRec::has_screentype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspCRSStartRec::set_has_screentype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspCRSStartRec::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspCRSStartRec::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 RspCRSStartRec::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.screentype)
  return screentype_;
}
inline void RspCRSStartRec::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.screentype)
}

// optional string filestorsvrip = 9;
inline bool RspCRSStartRec::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspCRSStartRec::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspCRSStartRec::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspCRSStartRec::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& RspCRSStartRec::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.filestorsvrip)
  return *filestorsvrip_;
}
inline void RspCRSStartRec::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.filestorsvrip)
}
inline void RspCRSStartRec::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartRec.filestorsvrip)
}
inline void RspCRSStartRec::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartRec.filestorsvrip)
}
inline ::std::string* RspCRSStartRec::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartRec.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* RspCRSStartRec::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartRec::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartRec.filestorsvrip)
}

// optional string filestorpath = 10;
inline bool RspCRSStartRec::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspCRSStartRec::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspCRSStartRec::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspCRSStartRec::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& RspCRSStartRec::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.filestorpath)
  return *filestorpath_;
}
inline void RspCRSStartRec::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.filestorpath)
}
inline void RspCRSStartRec::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartRec.filestorpath)
}
inline void RspCRSStartRec::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartRec.filestorpath)
}
inline ::std::string* RspCRSStartRec::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartRec.filestorpath)
  return filestorpath_;
}
inline ::std::string* RspCRSStartRec::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartRec::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartRec.filestorpath)
}

// optional string sdefilepath = 11;
inline bool RspCRSStartRec::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspCRSStartRec::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspCRSStartRec::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspCRSStartRec::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& RspCRSStartRec::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.sdefilepath)
  return *sdefilepath_;
}
inline void RspCRSStartRec::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.sdefilepath)
}
inline void RspCRSStartRec::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartRec.sdefilepath)
}
inline void RspCRSStartRec::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartRec.sdefilepath)
}
inline ::std::string* RspCRSStartRec::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartRec.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* RspCRSStartRec::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartRec::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartRec.sdefilepath)
}

// optional string failreason = 12;
inline bool RspCRSStartRec::has_failreason() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspCRSStartRec::set_has_failreason() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspCRSStartRec::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspCRSStartRec::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspCRSStartRec::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.failreason)
  return *failreason_;
}
inline void RspCRSStartRec::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.failreason)
}
inline void RspCRSStartRec::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartRec.failreason)
}
inline void RspCRSStartRec::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartRec.failreason)
}
inline ::std::string* RspCRSStartRec::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartRec.failreason)
  return failreason_;
}
inline ::std::string* RspCRSStartRec::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartRec::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartRec.failreason)
}

// optional string relativepath = 13;
inline bool RspCRSStartRec::has_relativepath() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspCRSStartRec::set_has_relativepath() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspCRSStartRec::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspCRSStartRec::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& RspCRSStartRec::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.relativepath)
  return *relativepath_;
}
inline void RspCRSStartRec::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.relativepath)
}
inline void RspCRSStartRec::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartRec.relativepath)
}
inline void RspCRSStartRec::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartRec.relativepath)
}
inline ::std::string* RspCRSStartRec::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartRec.relativepath)
  return relativepath_;
}
inline ::std::string* RspCRSStartRec::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartRec::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartRec.relativepath)
}

// optional uint32 seqnum = 14;
inline bool RspCRSStartRec::has_seqnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspCRSStartRec::set_has_seqnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspCRSStartRec::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspCRSStartRec::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 RspCRSStartRec::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.seqnum)
  return seqnum_;
}
inline void RspCRSStartRec::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.seqnum)
}

// optional uint32 errorcode = 15;
inline bool RspCRSStartRec::has_errorcode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RspCRSStartRec::set_has_errorcode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RspCRSStartRec::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RspCRSStartRec::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspCRSStartRec::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartRec.errorcode)
  return errorcode_;
}
inline void RspCRSStartRec::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartRec.errorcode)
}

// -------------------------------------------------------------------

// RspCRSStopRec

// optional bool isok = 1;
inline bool RspCRSStopRec::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCRSStopRec::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCRSStopRec::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCRSStopRec::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspCRSStopRec::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.isok)
  return isok_;
}
inline void RspCRSStopRec::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.isok)
}

// optional uint64 confid = 2;
inline bool RspCRSStopRec::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCRSStopRec::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCRSStopRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCRSStopRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspCRSStopRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.confid)
  return confid_;
}
inline void RspCRSStopRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.confid)
}

// optional uint32 mcid = 3;
inline bool RspCRSStopRec::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspCRSStopRec::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspCRSStopRec::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspCRSStopRec::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspCRSStopRec::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.mcid)
  return mcid_;
}
inline void RspCRSStopRec::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.mcid)
}

// optional uint32 crsid = 4;
inline bool RspCRSStopRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspCRSStopRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspCRSStopRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspCRSStopRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 RspCRSStopRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.crsid)
  return crsid_;
}
inline void RspCRSStopRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.crsid)
}

// optional uint32 crschannelid = 5;
inline bool RspCRSStopRec::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspCRSStopRec::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspCRSStopRec::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspCRSStopRec::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 RspCRSStopRec::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.crschannelid)
  return crschannelid_;
}
inline void RspCRSStopRec::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.crschannelid)
}

// optional uint32 channelid = 6;
inline bool RspCRSStopRec::has_channelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspCRSStopRec::set_has_channelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspCRSStopRec::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspCRSStopRec::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 RspCRSStopRec::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.channelid)
  return channelid_;
}
inline void RspCRSStopRec::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.channelid)
}

// optional uint32 screenid = 7;
inline bool RspCRSStopRec::has_screenid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspCRSStopRec::set_has_screenid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspCRSStopRec::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspCRSStopRec::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 RspCRSStopRec::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.screenid)
  return screenid_;
}
inline void RspCRSStopRec::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.screenid)
}

// optional uint32 screentype = 8;
inline bool RspCRSStopRec::has_screentype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspCRSStopRec::set_has_screentype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspCRSStopRec::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspCRSStopRec::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 RspCRSStopRec::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.screentype)
  return screentype_;
}
inline void RspCRSStopRec::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.screentype)
}

// optional string filestorsvrip = 9;
inline bool RspCRSStopRec::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspCRSStopRec::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspCRSStopRec::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspCRSStopRec::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& RspCRSStopRec::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.filestorsvrip)
  return *filestorsvrip_;
}
inline void RspCRSStopRec::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.filestorsvrip)
}
inline void RspCRSStopRec::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStopRec.filestorsvrip)
}
inline void RspCRSStopRec::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStopRec.filestorsvrip)
}
inline ::std::string* RspCRSStopRec::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStopRec.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* RspCRSStopRec::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStopRec::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStopRec.filestorsvrip)
}

// optional string filestorpath = 10;
inline bool RspCRSStopRec::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspCRSStopRec::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspCRSStopRec::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspCRSStopRec::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& RspCRSStopRec::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.filestorpath)
  return *filestorpath_;
}
inline void RspCRSStopRec::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.filestorpath)
}
inline void RspCRSStopRec::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStopRec.filestorpath)
}
inline void RspCRSStopRec::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStopRec.filestorpath)
}
inline ::std::string* RspCRSStopRec::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStopRec.filestorpath)
  return filestorpath_;
}
inline ::std::string* RspCRSStopRec::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStopRec::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStopRec.filestorpath)
}

// optional string sdefilepath = 11;
inline bool RspCRSStopRec::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspCRSStopRec::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspCRSStopRec::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspCRSStopRec::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& RspCRSStopRec::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.sdefilepath)
  return *sdefilepath_;
}
inline void RspCRSStopRec::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.sdefilepath)
}
inline void RspCRSStopRec::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStopRec.sdefilepath)
}
inline void RspCRSStopRec::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStopRec.sdefilepath)
}
inline ::std::string* RspCRSStopRec::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStopRec.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* RspCRSStopRec::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStopRec::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStopRec.sdefilepath)
}

// optional string failreason = 12;
inline bool RspCRSStopRec::has_failreason() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspCRSStopRec::set_has_failreason() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspCRSStopRec::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspCRSStopRec::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspCRSStopRec::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.failreason)
  return *failreason_;
}
inline void RspCRSStopRec::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.failreason)
}
inline void RspCRSStopRec::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStopRec.failreason)
}
inline void RspCRSStopRec::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStopRec.failreason)
}
inline ::std::string* RspCRSStopRec::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStopRec.failreason)
  return failreason_;
}
inline ::std::string* RspCRSStopRec::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStopRec::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStopRec.failreason)
}

// optional string relativepath = 13;
inline bool RspCRSStopRec::has_relativepath() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspCRSStopRec::set_has_relativepath() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspCRSStopRec::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspCRSStopRec::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& RspCRSStopRec::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.relativepath)
  return *relativepath_;
}
inline void RspCRSStopRec::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.relativepath)
}
inline void RspCRSStopRec::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStopRec.relativepath)
}
inline void RspCRSStopRec::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStopRec.relativepath)
}
inline ::std::string* RspCRSStopRec::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStopRec.relativepath)
  return relativepath_;
}
inline ::std::string* RspCRSStopRec::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStopRec::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStopRec.relativepath)
}

// optional uint32 seqnum = 14;
inline bool RspCRSStopRec::has_seqnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspCRSStopRec::set_has_seqnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspCRSStopRec::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspCRSStopRec::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 RspCRSStopRec::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.seqnum)
  return seqnum_;
}
inline void RspCRSStopRec::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.seqnum)
}

// optional uint64 filesize = 15;
inline bool RspCRSStopRec::has_filesize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RspCRSStopRec::set_has_filesize() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RspCRSStopRec::clear_has_filesize() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RspCRSStopRec::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 RspCRSStopRec::filesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.filesize)
  return filesize_;
}
inline void RspCRSStopRec::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.filesize)
}

// optional uint32 errorcode = 16;
inline bool RspCRSStopRec::has_errorcode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RspCRSStopRec::set_has_errorcode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RspCRSStopRec::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RspCRSStopRec::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspCRSStopRec::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStopRec.errorcode)
  return errorcode_;
}
inline void RspCRSStopRec::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStopRec.errorcode)
}

// -------------------------------------------------------------------

// RspCRSStartLive_LiveAddr

// optional uint32 type = 1;
inline bool RspCRSStartLive_LiveAddr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCRSStartLive_LiveAddr::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCRSStartLive_LiveAddr::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCRSStartLive_LiveAddr::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RspCRSStartLive_LiveAddr::type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.LiveAddr.type)
  return type_;
}
inline void RspCRSStartLive_LiveAddr::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.LiveAddr.type)
}

// optional string url = 2;
inline bool RspCRSStartLive_LiveAddr::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCRSStartLive_LiveAddr::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCRSStartLive_LiveAddr::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCRSStartLive_LiveAddr::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& RspCRSStartLive_LiveAddr::url() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.LiveAddr.url)
  return *url_;
}
inline void RspCRSStartLive_LiveAddr::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.LiveAddr.url)
}
inline void RspCRSStartLive_LiveAddr::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartLive.LiveAddr.url)
}
inline void RspCRSStartLive_LiveAddr::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartLive.LiveAddr.url)
}
inline ::std::string* RspCRSStartLive_LiveAddr::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartLive.LiveAddr.url)
  return url_;
}
inline ::std::string* RspCRSStartLive_LiveAddr::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartLive_LiveAddr::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartLive.LiveAddr.url)
}

// -------------------------------------------------------------------

// RspCRSStartLive

// optional bool isok = 1;
inline bool RspCRSStartLive::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCRSStartLive::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCRSStartLive::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCRSStartLive::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspCRSStartLive::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.isok)
  return isok_;
}
inline void RspCRSStartLive::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.isok)
}

// optional uint64 confid = 2;
inline bool RspCRSStartLive::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCRSStartLive::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCRSStartLive::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCRSStartLive::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspCRSStartLive::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.confid)
  return confid_;
}
inline void RspCRSStartLive::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.confid)
}

// optional uint32 mcid = 3;
inline bool RspCRSStartLive::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspCRSStartLive::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspCRSStartLive::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspCRSStartLive::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.mcid)
  return mcid_;
}
inline void RspCRSStartLive::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.mcid)
}

// optional uint32 crsid = 4;
inline bool RspCRSStartLive::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspCRSStartLive::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspCRSStartLive::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspCRSStartLive::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.crsid)
  return crsid_;
}
inline void RspCRSStartLive::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.crsid)
}

// optional uint32 crschannelid = 5;
inline bool RspCRSStartLive::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspCRSStartLive::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspCRSStartLive::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspCRSStartLive::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.crschannelid)
  return crschannelid_;
}
inline void RspCRSStartLive::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.crschannelid)
}

// optional uint32 channelid = 6;
inline bool RspCRSStartLive::has_channelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspCRSStartLive::set_has_channelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspCRSStartLive::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspCRSStartLive::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.channelid)
  return channelid_;
}
inline void RspCRSStartLive::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.channelid)
}

// optional uint32 screenid = 7;
inline bool RspCRSStartLive::has_screenid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspCRSStartLive::set_has_screenid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspCRSStartLive::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspCRSStartLive::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.screenid)
  return screenid_;
}
inline void RspCRSStartLive::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.screenid)
}

// optional uint32 screentype = 8;
inline bool RspCRSStartLive::has_screentype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspCRSStartLive::set_has_screentype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspCRSStartLive::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspCRSStartLive::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 RspCRSStartLive::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.screentype)
  return screentype_;
}
inline void RspCRSStartLive::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.screentype)
}

// optional uint32 relatedsrsid = 9;
inline bool RspCRSStartLive::has_relatedsrsid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspCRSStartLive::set_has_relatedsrsid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspCRSStartLive::clear_has_relatedsrsid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspCRSStartLive::clear_relatedsrsid() {
  relatedsrsid_ = 0u;
  clear_has_relatedsrsid();
}
inline ::google::protobuf::uint32 RspCRSStartLive::relatedsrsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.relatedsrsid)
  return relatedsrsid_;
}
inline void RspCRSStartLive::set_relatedsrsid(::google::protobuf::uint32 value) {
  set_has_relatedsrsid();
  relatedsrsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.relatedsrsid)
}

// optional string liveurl = 10;
inline bool RspCRSStartLive::has_liveurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspCRSStartLive::set_has_liveurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspCRSStartLive::clear_has_liveurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspCRSStartLive::clear_liveurl() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_->clear();
  }
  clear_has_liveurl();
}
inline const ::std::string& RspCRSStartLive::liveurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.liveurl)
  return *liveurl_;
}
inline void RspCRSStartLive::set_liveurl(const ::std::string& value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.liveurl)
}
inline void RspCRSStartLive::set_liveurl(const char* value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartLive.liveurl)
}
inline void RspCRSStartLive::set_liveurl(const char* value, size_t size) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartLive.liveurl)
}
inline ::std::string* RspCRSStartLive::mutable_liveurl() {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartLive.liveurl)
  return liveurl_;
}
inline ::std::string* RspCRSStartLive::release_liveurl() {
  clear_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liveurl_;
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartLive::set_allocated_liveurl(::std::string* liveurl) {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (liveurl) {
    set_has_liveurl();
    liveurl_ = liveurl;
  } else {
    clear_has_liveurl();
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartLive.liveurl)
}

// optional uint32 seqnum = 11;
inline bool RspCRSStartLive::has_seqnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspCRSStartLive::set_has_seqnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspCRSStartLive::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspCRSStartLive::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
inline ::google::protobuf::uint32 RspCRSStartLive::seqnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.seqnum)
  return seqnum_;
}
inline void RspCRSStartLive::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.seqnum)
}

// optional string failreason = 12;
inline bool RspCRSStartLive::has_failreason() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspCRSStartLive::set_has_failreason() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspCRSStartLive::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspCRSStartLive::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspCRSStartLive::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.failreason)
  return *failreason_;
}
inline void RspCRSStartLive::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.failreason)
}
inline void RspCRSStartLive::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspCRSStartLive.failreason)
}
inline void RspCRSStartLive::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspCRSStartLive.failreason)
}
inline ::std::string* RspCRSStartLive::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartLive.failreason)
  return failreason_;
}
inline ::std::string* RspCRSStartLive::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspCRSStartLive::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspCRSStartLive.failreason)
}

// optional uint32 errorcode = 13;
inline bool RspCRSStartLive::has_errorcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspCRSStartLive::set_has_errorcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspCRSStartLive::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspCRSStartLive::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspCRSStartLive::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.errorcode)
  return errorcode_;
}
inline void RspCRSStartLive::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.errorcode)
}

// optional uint32 livesvrtype = 14;
inline bool RspCRSStartLive::has_livesvrtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspCRSStartLive::set_has_livesvrtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspCRSStartLive::clear_has_livesvrtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspCRSStartLive::clear_livesvrtype() {
  livesvrtype_ = 0u;
  clear_has_livesvrtype();
}
inline ::google::protobuf::uint32 RspCRSStartLive::livesvrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.livesvrtype)
  return livesvrtype_;
}
inline void RspCRSStartLive::set_livesvrtype(::google::protobuf::uint32 value) {
  set_has_livesvrtype();
  livesvrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspCRSStartLive.livesvrtype)
}

// repeated .SRMsgs.RspCRSStartLive.LiveAddr liveaddrs = 15;
inline int RspCRSStartLive::liveaddrs_size() const {
  return liveaddrs_.size();
}
inline void RspCRSStartLive::clear_liveaddrs() {
  liveaddrs_.Clear();
}
inline const ::SRMsgs::RspCRSStartLive_LiveAddr& RspCRSStartLive::liveaddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspCRSStartLive.liveaddrs)
  return liveaddrs_.Get(index);
}
inline ::SRMsgs::RspCRSStartLive_LiveAddr* RspCRSStartLive::mutable_liveaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspCRSStartLive.liveaddrs)
  return liveaddrs_.Mutable(index);
}
inline ::SRMsgs::RspCRSStartLive_LiveAddr* RspCRSStartLive::add_liveaddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspCRSStartLive.liveaddrs)
  return liveaddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspCRSStartLive_LiveAddr >&
RspCRSStartLive::liveaddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspCRSStartLive.liveaddrs)
  return liveaddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspCRSStartLive_LiveAddr >*
RspCRSStartLive::mutable_liveaddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspCRSStartLive.liveaddrs)
  return &liveaddrs_;
}

// -------------------------------------------------------------------

// CmdCRSSeleteVideo_TermInfo

// optional uint32 terid = 1;
inline bool CmdCRSSeleteVideo_TermInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdCRSSeleteVideo_TermInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo_TermInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.TermInfo.terid)
  return terid_;
}
inline void CmdCRSSeleteVideo_TermInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.TermInfo.terid)
}

// optional uint32 screenid = 2;
inline bool CmdCRSSeleteVideo_TermInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdCRSSeleteVideo_TermInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo_TermInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.TermInfo.screenid)
  return screenid_;
}
inline void CmdCRSSeleteVideo_TermInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.TermInfo.screenid)
}

// optional uint32 videosize = 3;
inline bool CmdCRSSeleteVideo_TermInfo::has_videosize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdCRSSeleteVideo_TermInfo::set_has_videosize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_has_videosize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_videosize() {
  videosize_ = 0u;
  clear_has_videosize();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo_TermInfo::videosize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.TermInfo.videosize)
  return videosize_;
}
inline void CmdCRSSeleteVideo_TermInfo::set_videosize(::google::protobuf::uint32 value) {
  set_has_videosize();
  videosize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.TermInfo.videosize)
}

// optional uint32 recvfps = 4;
inline bool CmdCRSSeleteVideo_TermInfo::has_recvfps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdCRSSeleteVideo_TermInfo::set_has_recvfps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_has_recvfps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdCRSSeleteVideo_TermInfo::clear_recvfps() {
  recvfps_ = 0u;
  clear_has_recvfps();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo_TermInfo::recvfps() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.TermInfo.recvfps)
  return recvfps_;
}
inline void CmdCRSSeleteVideo_TermInfo::set_recvfps(::google::protobuf::uint32 value) {
  set_has_recvfps();
  recvfps_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.TermInfo.recvfps)
}

// -------------------------------------------------------------------

// CmdCRSSeleteVideo

// optional uint64 confid = 1;
inline bool CmdCRSSeleteVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdCRSSeleteVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdCRSSeleteVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdCRSSeleteVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdCRSSeleteVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.confid)
  return confid_;
}
inline void CmdCRSSeleteVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.confid)
}

// optional uint32 mcid = 2;
inline bool CmdCRSSeleteVideo::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdCRSSeleteVideo::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdCRSSeleteVideo::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdCRSSeleteVideo::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.mcid)
  return mcid_;
}
inline void CmdCRSSeleteVideo::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.mcid)
}

// optional uint32 crsid = 3;
inline bool CmdCRSSeleteVideo::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdCRSSeleteVideo::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdCRSSeleteVideo::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdCRSSeleteVideo::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.crsid)
  return crsid_;
}
inline void CmdCRSSeleteVideo::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.crsid)
}

// optional uint32 crschannelid = 4;
inline bool CmdCRSSeleteVideo::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdCRSSeleteVideo::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdCRSSeleteVideo::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdCRSSeleteVideo::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 CmdCRSSeleteVideo::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.crschannelid)
  return crschannelid_;
}
inline void CmdCRSSeleteVideo::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdCRSSeleteVideo.crschannelid)
}

// repeated .SRMsgs.CmdCRSSeleteVideo.TermInfo seleteterinfo = 5;
inline int CmdCRSSeleteVideo::seleteterinfo_size() const {
  return seleteterinfo_.size();
}
inline void CmdCRSSeleteVideo::clear_seleteterinfo() {
  seleteterinfo_.Clear();
}
inline const ::SRMsgs::CmdCRSSeleteVideo_TermInfo& CmdCRSSeleteVideo::seleteterinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdCRSSeleteVideo.seleteterinfo)
  return seleteterinfo_.Get(index);
}
inline ::SRMsgs::CmdCRSSeleteVideo_TermInfo* CmdCRSSeleteVideo::mutable_seleteterinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdCRSSeleteVideo.seleteterinfo)
  return seleteterinfo_.Mutable(index);
}
inline ::SRMsgs::CmdCRSSeleteVideo_TermInfo* CmdCRSSeleteVideo::add_seleteterinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdCRSSeleteVideo.seleteterinfo)
  return seleteterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdCRSSeleteVideo_TermInfo >&
CmdCRSSeleteVideo::seleteterinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdCRSSeleteVideo.seleteterinfo)
  return seleteterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdCRSSeleteVideo_TermInfo >*
CmdCRSSeleteVideo::mutable_seleteterinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdCRSSeleteVideo.seleteterinfo)
  return &seleteterinfo_;
}

// -------------------------------------------------------------------

// IndCRSHeartBeatToMC

// optional uint32 mcid = 1;
inline bool IndCRSHeartBeatToMC::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSHeartBeatToMC::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSHeartBeatToMC::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSHeartBeatToMC::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndCRSHeartBeatToMC::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSHeartBeatToMC.mcid)
  return mcid_;
}
inline void IndCRSHeartBeatToMC::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSHeartBeatToMC.mcid)
}

// optional uint32 crsid = 2;
inline bool IndCRSHeartBeatToMC::has_crsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSHeartBeatToMC::set_has_crsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSHeartBeatToMC::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSHeartBeatToMC::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSHeartBeatToMC::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSHeartBeatToMC.crsid)
  return crsid_;
}
inline void IndCRSHeartBeatToMC::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSHeartBeatToMC.crsid)
}

// -------------------------------------------------------------------

// IndCRSFileStorPathToMC

// optional uint64 confid = 1;
inline bool IndCRSFileStorPathToMC::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSFileStorPathToMC::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSFileStorPathToMC::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSFileStorPathToMC::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.confid)
  return confid_;
}
inline void IndCRSFileStorPathToMC::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.confid)
}

// optional uint32 mcid = 2;
inline bool IndCRSFileStorPathToMC::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSFileStorPathToMC::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSFileStorPathToMC::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.mcid)
  return mcid_;
}
inline void IndCRSFileStorPathToMC::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.mcid)
}

// optional uint32 crsid = 3;
inline bool IndCRSFileStorPathToMC::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSFileStorPathToMC::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSFileStorPathToMC::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.crsid)
  return crsid_;
}
inline void IndCRSFileStorPathToMC::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.crsid)
}

// optional uint32 crschannelid = 4;
inline bool IndCRSFileStorPathToMC::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSFileStorPathToMC::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSFileStorPathToMC::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.crschannelid)
  return crschannelid_;
}
inline void IndCRSFileStorPathToMC::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.crschannelid)
}

// optional uint32 channelid = 5;
inline bool IndCRSFileStorPathToMC::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSFileStorPathToMC::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSFileStorPathToMC::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.channelid)
  return channelid_;
}
inline void IndCRSFileStorPathToMC::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.channelid)
}

// optional uint32 screenid = 6;
inline bool IndCRSFileStorPathToMC::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSFileStorPathToMC::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSFileStorPathToMC::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.screenid)
  return screenid_;
}
inline void IndCRSFileStorPathToMC::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.screenid)
}

// optional uint32 screentype = 7;
inline bool IndCRSFileStorPathToMC::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSFileStorPathToMC::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSFileStorPathToMC::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.screentype)
  return screentype_;
}
inline void IndCRSFileStorPathToMC::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.screentype)
}

// optional string filestorsvrip = 8;
inline bool IndCRSFileStorPathToMC::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSFileStorPathToMC::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSFileStorPathToMC::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& IndCRSFileStorPathToMC::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
  return *filestorsvrip_;
}
inline void IndCRSFileStorPathToMC::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
}
inline void IndCRSFileStorPathToMC::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
}
inline void IndCRSFileStorPathToMC::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
}
inline ::std::string* IndCRSFileStorPathToMC::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* IndCRSFileStorPathToMC::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStorPathToMC::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStorPathToMC.filestorsvrip)
}

// optional string filestorpath = 9;
inline bool IndCRSFileStorPathToMC::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSFileStorPathToMC::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSFileStorPathToMC::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& IndCRSFileStorPathToMC::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
  return *filestorpath_;
}
inline void IndCRSFileStorPathToMC::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
}
inline void IndCRSFileStorPathToMC::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
}
inline void IndCRSFileStorPathToMC::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
}
inline ::std::string* IndCRSFileStorPathToMC::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
  return filestorpath_;
}
inline ::std::string* IndCRSFileStorPathToMC::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStorPathToMC::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStorPathToMC.filestorpath)
}

// optional string sdefilepath = 10;
inline bool IndCRSFileStorPathToMC::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSFileStorPathToMC::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSFileStorPathToMC::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& IndCRSFileStorPathToMC::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
  return *sdefilepath_;
}
inline void IndCRSFileStorPathToMC::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
}
inline void IndCRSFileStorPathToMC::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
}
inline void IndCRSFileStorPathToMC::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
}
inline ::std::string* IndCRSFileStorPathToMC::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* IndCRSFileStorPathToMC::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStorPathToMC::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStorPathToMC.sdefilepath)
}

// optional string relativepath = 11;
inline bool IndCRSFileStorPathToMC::has_relativepath() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_relativepath() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndCRSFileStorPathToMC::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndCRSFileStorPathToMC::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& IndCRSFileStorPathToMC::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.relativepath)
  return *relativepath_;
}
inline void IndCRSFileStorPathToMC::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.relativepath)
}
inline void IndCRSFileStorPathToMC::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStorPathToMC.relativepath)
}
inline void IndCRSFileStorPathToMC::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStorPathToMC.relativepath)
}
inline ::std::string* IndCRSFileStorPathToMC::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStorPathToMC.relativepath)
  return relativepath_;
}
inline ::std::string* IndCRSFileStorPathToMC::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStorPathToMC::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStorPathToMC.relativepath)
}

// optional uint32 recordstate = 12;
inline bool IndCRSFileStorPathToMC::has_recordstate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_recordstate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndCRSFileStorPathToMC::clear_has_recordstate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndCRSFileStorPathToMC::clear_recordstate() {
  recordstate_ = 0u;
  clear_has_recordstate();
}
inline ::google::protobuf::uint32 IndCRSFileStorPathToMC::recordstate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.recordstate)
  return recordstate_;
}
inline void IndCRSFileStorPathToMC::set_recordstate(::google::protobuf::uint32 value) {
  set_has_recordstate();
  recordstate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.recordstate)
}

// optional uint64 filesize = 13;
inline bool IndCRSFileStorPathToMC::has_filesize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IndCRSFileStorPathToMC::set_has_filesize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IndCRSFileStorPathToMC::clear_has_filesize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IndCRSFileStorPathToMC::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 IndCRSFileStorPathToMC::filesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStorPathToMC.filesize)
  return filesize_;
}
inline void IndCRSFileStorPathToMC::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStorPathToMC.filesize)
}

// -------------------------------------------------------------------

// IndCRSLiveStateToMC

// optional uint64 confid = 1;
inline bool IndCRSLiveStateToMC::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSLiveStateToMC::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSLiveStateToMC::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSLiveStateToMC::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.confid)
  return confid_;
}
inline void IndCRSLiveStateToMC::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.confid)
}

// optional uint32 mcid = 2;
inline bool IndCRSLiveStateToMC::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSLiveStateToMC::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSLiveStateToMC::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.mcid)
  return mcid_;
}
inline void IndCRSLiveStateToMC::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.mcid)
}

// optional uint32 crsid = 3;
inline bool IndCRSLiveStateToMC::has_crsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_crsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSLiveStateToMC::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSLiveStateToMC::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.crsid)
  return crsid_;
}
inline void IndCRSLiveStateToMC::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.crsid)
}

// optional uint32 crschannelid = 4;
inline bool IndCRSLiveStateToMC::has_crschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_crschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSLiveStateToMC::clear_has_crschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSLiveStateToMC::clear_crschannelid() {
  crschannelid_ = 0u;
  clear_has_crschannelid();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::crschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.crschannelid)
  return crschannelid_;
}
inline void IndCRSLiveStateToMC::set_crschannelid(::google::protobuf::uint32 value) {
  set_has_crschannelid();
  crschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.crschannelid)
}

// optional uint32 channelid = 5;
inline bool IndCRSLiveStateToMC::has_channelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_channelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSLiveStateToMC::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSLiveStateToMC::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.channelid)
  return channelid_;
}
inline void IndCRSLiveStateToMC::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.channelid)
}

// optional uint32 screenid = 6;
inline bool IndCRSLiveStateToMC::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSLiveStateToMC::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSLiveStateToMC::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.screenid)
  return screenid_;
}
inline void IndCRSLiveStateToMC::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.screenid)
}

// optional uint32 screentype = 7;
inline bool IndCRSLiveStateToMC::has_screentype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_screentype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSLiveStateToMC::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSLiveStateToMC::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.screentype)
  return screentype_;
}
inline void IndCRSLiveStateToMC::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.screentype)
}

// optional uint32 livestate = 8;
inline bool IndCRSLiveStateToMC::has_livestate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_livestate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSLiveStateToMC::clear_has_livestate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSLiveStateToMC::clear_livestate() {
  livestate_ = 0u;
  clear_has_livestate();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::livestate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.livestate)
  return livestate_;
}
inline void IndCRSLiveStateToMC::set_livestate(::google::protobuf::uint32 value) {
  set_has_livestate();
  livestate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.livestate)
}

// optional string statecont = 9;
inline bool IndCRSLiveStateToMC::has_statecont() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_statecont() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSLiveStateToMC::clear_has_statecont() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSLiveStateToMC::clear_statecont() {
  if (statecont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statecont_->clear();
  }
  clear_has_statecont();
}
inline const ::std::string& IndCRSLiveStateToMC::statecont() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.statecont)
  return *statecont_;
}
inline void IndCRSLiveStateToMC::set_statecont(const ::std::string& value) {
  set_has_statecont();
  if (statecont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statecont_ = new ::std::string;
  }
  statecont_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.statecont)
}
inline void IndCRSLiveStateToMC::set_statecont(const char* value) {
  set_has_statecont();
  if (statecont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statecont_ = new ::std::string;
  }
  statecont_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSLiveStateToMC.statecont)
}
inline void IndCRSLiveStateToMC::set_statecont(const char* value, size_t size) {
  set_has_statecont();
  if (statecont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statecont_ = new ::std::string;
  }
  statecont_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSLiveStateToMC.statecont)
}
inline ::std::string* IndCRSLiveStateToMC::mutable_statecont() {
  set_has_statecont();
  if (statecont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statecont_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSLiveStateToMC.statecont)
  return statecont_;
}
inline ::std::string* IndCRSLiveStateToMC::release_statecont() {
  clear_has_statecont();
  if (statecont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statecont_;
    statecont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSLiveStateToMC::set_allocated_statecont(::std::string* statecont) {
  if (statecont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statecont_;
  }
  if (statecont) {
    set_has_statecont();
    statecont_ = statecont;
  } else {
    clear_has_statecont();
    statecont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSLiveStateToMC.statecont)
}

// optional uint32 errorcode = 10;
inline bool IndCRSLiveStateToMC::has_errorcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSLiveStateToMC::set_has_errorcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSLiveStateToMC::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSLiveStateToMC::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 IndCRSLiveStateToMC::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSLiveStateToMC.errorcode)
  return errorcode_;
}
inline void IndCRSLiveStateToMC::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSLiveStateToMC.errorcode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mc_5fcrs_2eproto__INCLUDED
