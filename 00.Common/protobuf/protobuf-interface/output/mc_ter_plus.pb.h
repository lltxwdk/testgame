// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_ter_plus.proto

#ifndef PROTOBUF_mc_5fter_5fplus_2eproto__INCLUDED
#define PROTOBUF_mc_5fter_5fplus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

class ReqConfGroupMeetingRoomTerLists;
class ReqConfGroupMeetingRoomTerLists_IPPORT;
class ReqConfGroupMeetingRoomTerLists_AddrInfo;
class ReqConfGroupMeetingRoomTerLists_DomainInfo;
class ReqConfGroupMeetingRoomTerLists_GMRInfo;
class ReqConfRollCallInfo;
class ReqConfRollCallInfo_IPPORT;
class ReqConfRollCallInfo_AddrInfo;
class ReqConfRollCallInfo_DomainInfo;
class ReqSendAssistVideo;
class ReqSendAssistVideo_IPPORT;
class ReqSendAssistVideo_AddrInfo;
class ReqSendAssistVideo_DomainInfo;
class RspSendAssistVideoProxy;
class RspSendAssistVideoProxy_IPPORT;
class RspSendAssistVideoProxy_AddrInfo;
class RspSendAssistVideoProxy_DomainInfo;
class IndExitGroupMeetingRoom;
class IndExitGroupMeetingRoom_IPPORT;
class IndExitGroupMeetingRoom_AddrInfo;
class IndExitGroupMeetingRoom_DomainInfo;
class IndGroupMeetingRoomTerBeatToMC;
class IndGroupMeetingRoomTerBeatToMC_IPPORT;
class IndGroupMeetingRoomTerBeatToMC_AddrInfo;
class IndGroupMeetingRoomTerBeatToMC_DomainInfo;
class IndAssistVideoStart;
class IndAssistVideoStart_IPPORT;
class IndAssistVideoStart_AddrInfo;
class IndAssistVideoStart_DomainInfo;
class IndAssistVideoClose;
class IndAssistVideoClose_IPPORT;
class IndAssistVideoClose_AddrInfo;
class IndAssistVideoClose_DomainInfo;
class IndSendAssistVideoRelease;
class IndSendAssistVideoRelease_IPPORT;
class IndSendAssistVideoRelease_AddrInfo;
class IndSendAssistVideoRelease_DomainInfo;
class IndNewAudioSourceJoined;
class IndNewAudioSourceJoined_IPPORT;
class IndNewAudioSourceJoined_AddrInfo;
class IndNewAudioSourceJoined_DomainInfo;
class IndNewAudioSourceJoined_SourceInfo;
class IndAudioSourceLeave;
class IndAudioSourceLeave_IPPORT;
class IndAudioSourceLeave_AddrInfo;
class IndAudioSourceLeave_DomainInfo;
class IndAudioSourceLeave_SourceInfo;
class IndNewVideoSourceJoined;
class IndNewVideoSourceJoined_IPPORT;
class IndNewVideoSourceJoined_AddrInfo;
class IndNewVideoSourceJoined_DomainInfo;
class IndNewVideoSourceJoined_SourceInfo;
class IndVideoSourceLeave;
class IndVideoSourceLeave_IPPORT;
class IndVideoSourceLeave_AddrInfo;
class IndVideoSourceLeave_DomainInfo;
class IndVideoSourceLeave_SourceInfo;
class CmdSetCallWaitingState;
class CmdSetCallWaitingState_IPPORT;
class CmdSetCallWaitingState_AddrInfo;
class CmdSetCallWaitingState_DomainInfo;
class CmdTerJoinGroupMeetingRoom;
class CmdTerJoinGroupMeetingRoom_IPPORT;
class CmdTerJoinGroupMeetingRoom_AddrInfo;
class CmdTerJoinGroupMeetingRoom_DomainInfo;
class CmdTerJoinGroupMeetingRoom_TerInfo;
class CmdTerJoinGroupMeetingRoom_GMRInfo;
class CmdTerJoinGroupMeetingRoom_MoveInfo;
class CmdTerExitGroupMeetingRoom;
class CmdTerExitGroupMeetingRoom_IPPORT;
class CmdTerExitGroupMeetingRoom_AddrInfo;
class CmdTerExitGroupMeetingRoom_DomainInfo;
class CmdTerExitGroupMeetingRoom_TerInfo;
class CmdTerExitGroupMeetingRoom_GMRInfo;
class CmdTerExitGroupMeetingRoom_ExitInfo;
class CmdMCSetConfRollCallList;
class CmdMCSetConfRollCallList_IPPORT;
class CmdMCSetConfRollCallList_AddrInfo;
class CmdMCSetConfRollCallList_DomainInfo;
class CmdMCSetConfRollCallList_ParticipantInfo;
class CmdMCSetConfRollCallList_RollCallInfo;
class CmdMCUpdateParticipantsOrder;
class CmdMCUpdateParticipantsOrder_IPPORT;
class CmdMCUpdateParticipantsOrder_AddrInfo;
class CmdMCUpdateParticipantsOrder_DomainInfo;
class CmdMCUpdateParticipantsOrder_ParticipantInfo;
class CmdMCSetConfRollCallState;
class CmdMCSetConfRollCallState_IPPORT;
class CmdMCSetConfRollCallState_AddrInfo;
class CmdMCSetConfRollCallState_DomainInfo;
class CmdMCRollCallTer;
class CmdMCRollCallTer_IPPORT;
class CmdMCRollCallTer_AddrInfo;
class CmdMCRollCallTer_DomainInfo;
class CmdMCRollCallTer_RollCallTerInfo;
class CmdMCRollCallTerResult;
class CmdMCRollCallTerResult_IPPORT;
class CmdMCRollCallTerResult_AddrInfo;
class CmdMCRollCallTerResult_DomainInfo;
class CmdMCRollCallTerResult_RollCallTerInfo;
class CmdSetAssistChairman;
class CmdSetAssistChairman_IPPORT;
class CmdSetAssistChairman_AddrInfo;
class CmdSetAssistChairman_DomainInfo;
class CmdTerSelectAssistVideo;
class CmdTerSelectAssistVideo_IPPORT;
class CmdTerSelectAssistVideo_AddrInfo;
class CmdTerSelectAssistVideo_DomainInfo;
class CmdSendAssistVideolabel;
class CmdSendAssistVideolabel_IPPORT;
class CmdSendAssistVideolabel_AddrInfo;
class CmdSendAssistVideolabel_DomainInfo;
class CmdMCSetAnaly;
class CmdMCSetAnaly_IPPORT;
class CmdMCSetAnaly_AddrInfo;
class CmdMCSetAnaly_DomainInfo;
class CmdMCStartAnaly;
class CmdMCStartAnaly_IPPORT;
class CmdMCStartAnaly_AddrInfo;
class CmdMCStartAnaly_DomainInfo;
class CmdMCStartAnaly_AnalyInfo;
class CmdMCStopAnaly;
class CmdMCStopAnaly_IPPORT;
class CmdMCStopAnaly_AddrInfo;
class CmdMCStopAnaly_DomainInfo;
class CmdMCStopAnaly_AnalyInfo;
class CmdMCUpdateAnaly;
class CmdMCUpdateAnaly_IPPORT;
class CmdMCUpdateAnaly_AddrInfo;
class CmdMCUpdateAnaly_DomainInfo;
class CmdMCUpdateAnaly_AnalyInfo;
class CmdChangeVideoSourceName;
class CmdChangeVideoSourceName_IPPORT;
class CmdChangeVideoSourceName_AddrInfo;
class CmdChangeVideoSourceName_DomainInfo;
class CmdChangeVideoSourceName_SourceInfo;
class CmdChangeVideoSourcePriority;
class CmdChangeVideoSourcePriority_IPPORT;
class CmdChangeVideoSourcePriority_AddrInfo;
class CmdChangeVideoSourcePriority_DomainInfo;
class CmdChangeVideoSourcePriority_SourceInfo;
class CmdChangePreset;
class CmdChangePreset_IPPORT;
class CmdChangePreset_AddrInfo;
class CmdChangePreset_DomainInfo;
class CmdChangePreset_PresetInfo;
class CmdFilterNoVideo;
class CmdFilterNoVideo_IPPORT;
class CmdFilterNoVideo_AddrInfo;
class CmdFilterNoVideo_DomainInfo;
class CmdMCUpdateAutoPollInfo;
class CmdMCUpdateAutoPollInfo_IPPORT;
class CmdMCUpdateAutoPollInfo_AddrInfo;
class CmdMCUpdateAutoPollInfo_DomainInfo;
class CmdMCUpdateAutoPollInfo_ParticipantInfo;
class CmdMCUpdateAutoPollInfo_AutoPollInfo;
class ReqSendAssistVideoProxy;
class ReqSendAssistVideoProxy_IPPORT;
class ReqSendAssistVideoProxy_AddrInfo;
class ReqSendAssistVideoProxy_DomainInfo;
class RspConfGroupMeetingRoomTerLists;
class RspConfGroupMeetingRoomTerLists_IPPORT;
class RspConfGroupMeetingRoomTerLists_AddrInfo;
class RspConfGroupMeetingRoomTerLists_DomainInfo;
class RspConfGroupMeetingRoomTerLists_TerInfo;
class RspConfGroupMeetingRoomTerLists_GMRInfo;
class RspConfGroupMeetingRoomTerLists_GMRTerListInfo;
class RspConfRollCallInfo;
class RspConfRollCallInfo_IPPORT;
class RspConfRollCallInfo_AddrInfo;
class RspConfRollCallInfo_DomainInfo;
class RspConfRollCallInfo_ParticipantInfo;
class RspConfRollCallInfo_RollCallInfo;
class RspConfRollCallInfo_RollCallTerInfo;
class RspConfRollCallInfo_RollCallPassDetail;
class RspSendAssistVideo;
class RspSendAssistVideo_IPPORT;
class RspSendAssistVideo_AddrInfo;
class RspSendAssistVideo_DomainInfo;
class IndTerJoinedGroupMeetingRoom;
class IndTerJoinedGroupMeetingRoom_IPPORT;
class IndTerJoinedGroupMeetingRoom_AddrInfo;
class IndTerJoinedGroupMeetingRoom_DomainInfo;
class IndTerJoinedGroupMeetingRoom_MediaAddrInfo;
class IndTerEnterGroupMeetingRoom;
class IndTerEnterGroupMeetingRoom_IPPORT;
class IndTerEnterGroupMeetingRoom_AddrInfo;
class IndTerEnterGroupMeetingRoom_DomainInfo;
class IndTerLeaveGroupMeetingRoom;
class IndTerLeaveGroupMeetingRoom_IPPORT;
class IndTerLeaveGroupMeetingRoom_AddrInfo;
class IndTerLeaveGroupMeetingRoom_DomainInfo;
class IndMCBeatToGroupMeetingRoomTer;
class IndMCBeatToGroupMeetingRoomTer_IPPORT;
class IndMCBeatToGroupMeetingRoomTer_AddrInfo;
class IndMCBeatToGroupMeetingRoomTer_DomainInfo;
class IndTerTransferToOtherGroupMeetingRoom;
class IndTerTransferToOtherGroupMeetingRoom_IPPORT;
class IndTerTransferToOtherGroupMeetingRoom_AddrInfo;
class IndTerTransferToOtherGroupMeetingRoom_DomainInfo;
class IndTerConfCallWaitingState;
class IndTerConfCallWaitingState_IPPORT;
class IndTerConfCallWaitingState_AddrInfo;
class IndTerConfCallWaitingState_DomainInfo;
class IndAssistVideoTokenOwner;
class IndAssistVideoTokenOwner_IPPORT;
class IndAssistVideoTokenOwner_AddrInfo;
class IndAssistVideoTokenOwner_DomainInfo;
class IndAssistVideoOn;
class IndAssistVideoOn_IPPORT;
class IndAssistVideoOn_AddrInfo;
class IndAssistVideoOn_DomainInfo;
class IndAssistVideoOff;
class IndAssistVideoOff_IPPORT;
class IndAssistVideoOff_AddrInfo;
class IndAssistVideoOff_DomainInfo;
class IndTerModifyConfCallList;
class IndTerModifyConfCallList_IPPORT;
class IndTerModifyConfCallList_AddrInfo;
class IndTerModifyConfCallList_DomainInfo;
class IndTerModifyConfCallList_ParticipantInfo;
class IndTerModifyConfCallList_RollCallInfo;
class IndTerConfRollCallState;
class IndTerConfRollCallState_IPPORT;
class IndTerConfRollCallState_AddrInfo;
class IndTerConfRollCallState_DomainInfo;
class IndRollCallTer;
class IndRollCallTer_IPPORT;
class IndRollCallTer_AddrInfo;
class IndRollCallTer_DomainInfo;
class IndRollCallTer_RollCallTerInfo;
class IndRollCallTerResult;
class IndRollCallTerResult_IPPORT;
class IndRollCallTerResult_AddrInfo;
class IndRollCallTerResult_DomainInfo;
class IndRollCallTerResult_RollCallTerInfo;
class IndSendAssistVideolabel;
class IndSendAssistVideolabel_IPPORT;
class IndSendAssistVideolabel_AddrInfo;
class IndSendAssistVideolabel_DomainInfo;
class IndTerChangeConfCryptoKey;
class IndTerChangeConfCryptoKey_IPPORT;
class IndTerChangeConfCryptoKey_AddrInfo;
class IndTerChangeConfCryptoKey_DomainInfo;
class IndChangeVideoSourceName;
class IndChangeVideoSourceName_IPPORT;
class IndChangeVideoSourceName_AddrInfo;
class IndChangeVideoSourceName_DomainInfo;
class IndChangeVideoSourceName_SourceInfo;
class IndChangeVideoSourcePriority;
class IndChangeVideoSourcePriority_IPPORT;
class IndChangeVideoSourcePriority_AddrInfo;
class IndChangeVideoSourcePriority_DomainInfo;
class IndChangeVideoSourcePriority_SourceInfo;
class IndTerChangeDeviceInfos;
class IndTerChangeDeviceInfos_IPPORT;
class IndTerChangeDeviceInfos_AddrInfo;
class IndTerChangeDeviceInfos_DomainInfo;
class IndTerChangeDeviceInfos_PresetInfo;
class IndTerChangeDeviceInfos_SourceInfo;
class IndTerChangeDeviceInfos_DeviceInfo;
class IndTerNewAudioSourceJoined;
class IndTerNewAudioSourceJoined_IPPORT;
class IndTerNewAudioSourceJoined_AddrInfo;
class IndTerNewAudioSourceJoined_DomainInfo;
class IndTerNewAudioSourceJoined_SourceInfo;
class IndTerAudioSourceLeave;
class IndTerAudioSourceLeave_IPPORT;
class IndTerAudioSourceLeave_AddrInfo;
class IndTerAudioSourceLeave_DomainInfo;
class IndTerAudioSourceLeave_SourceInfo;
class IndTerNewVideoSourceJoined;
class IndTerNewVideoSourceJoined_IPPORT;
class IndTerNewVideoSourceJoined_AddrInfo;
class IndTerNewVideoSourceJoined_DomainInfo;
class IndTerNewVideoSourceJoined_SourceInfo;
class IndTerVideoSourceLeave;
class IndTerVideoSourceLeave_IPPORT;
class IndTerVideoSourceLeave_AddrInfo;
class IndTerVideoSourceLeave_DomainInfo;
class IndTerVideoSourceLeave_SourceInfo;
class IndTerSetAnalyState;
class IndTerSetAnalyState_IPPORT;
class IndTerSetAnalyState_AddrInfo;
class IndTerSetAnalyState_DomainInfo;
class IndTerSelectVasVideo;
class IndTerSelectVasVideo_IPPORT;
class IndTerSelectVasVideo_AddrInfo;
class IndTerSelectVasVideo_DomainInfo;
class IndTerSelectVasVideo_AnalyInfo;
class IndChangePreset;
class IndChangePreset_IPPORT;
class IndChangePreset_AddrInfo;
class IndChangePreset_DomainInfo;
class IndChangePreset_PresetInfo;
class IndFilterNoVideo;
class IndFilterNoVideo_IPPORT;
class IndFilterNoVideo_AddrInfo;
class IndFilterNoVideo_DomainInfo;
class IndTerAutoPollInfo;
class IndTerAutoPollInfo_IPPORT;
class IndTerAutoPollInfo_AddrInfo;
class IndTerAutoPollInfo_DomainInfo;
class IndTerAutoPollInfo_ParticipantInfo;
class IndTerAutoPollInfo_AutoPollInfo;
class IndParticipantsOrder;
class IndParticipantsOrder_IPPORT;
class IndParticipantsOrder_AddrInfo;
class IndParticipantsOrder_DomainInfo;
class IndParticipantsOrder_ParticipantInfo;
class IndChangeTerInfo;
class IndChangeTerInfo_IPPORT;
class IndChangeTerInfo_AddrInfo;
class IndChangeTerInfo_DomainInfo;
class IndChangeTerInfo_TerInfo;

// ===================================================================

class ReqConfGroupMeetingRoomTerLists_IPPORT : public ::google::protobuf::Message {
 public:
  ReqConfGroupMeetingRoomTerLists_IPPORT();
  virtual ~ReqConfGroupMeetingRoomTerLists_IPPORT();

  ReqConfGroupMeetingRoomTerLists_IPPORT(const ReqConfGroupMeetingRoomTerLists_IPPORT& from);

  inline ReqConfGroupMeetingRoomTerLists_IPPORT& operator=(const ReqConfGroupMeetingRoomTerLists_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfGroupMeetingRoomTerLists_IPPORT& default_instance();

  void Swap(ReqConfGroupMeetingRoomTerLists_IPPORT* other);

  // implements Message ----------------------------------------------

  ReqConfGroupMeetingRoomTerLists_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfGroupMeetingRoomTerLists_IPPORT& from);
  void MergeFrom(const ReqConfGroupMeetingRoomTerLists_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfGroupMeetingRoomTerLists_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfGroupMeetingRoomTerLists_AddrInfo : public ::google::protobuf::Message {
 public:
  ReqConfGroupMeetingRoomTerLists_AddrInfo();
  virtual ~ReqConfGroupMeetingRoomTerLists_AddrInfo();

  ReqConfGroupMeetingRoomTerLists_AddrInfo(const ReqConfGroupMeetingRoomTerLists_AddrInfo& from);

  inline ReqConfGroupMeetingRoomTerLists_AddrInfo& operator=(const ReqConfGroupMeetingRoomTerLists_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfGroupMeetingRoomTerLists_AddrInfo& default_instance();

  void Swap(ReqConfGroupMeetingRoomTerLists_AddrInfo* other);

  // implements Message ----------------------------------------------

  ReqConfGroupMeetingRoomTerLists_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfGroupMeetingRoomTerLists_AddrInfo& from);
  void MergeFrom(const ReqConfGroupMeetingRoomTerLists_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfGroupMeetingRoomTerLists_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfGroupMeetingRoomTerLists_DomainInfo : public ::google::protobuf::Message {
 public:
  ReqConfGroupMeetingRoomTerLists_DomainInfo();
  virtual ~ReqConfGroupMeetingRoomTerLists_DomainInfo();

  ReqConfGroupMeetingRoomTerLists_DomainInfo(const ReqConfGroupMeetingRoomTerLists_DomainInfo& from);

  inline ReqConfGroupMeetingRoomTerLists_DomainInfo& operator=(const ReqConfGroupMeetingRoomTerLists_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfGroupMeetingRoomTerLists_DomainInfo& default_instance();

  void Swap(ReqConfGroupMeetingRoomTerLists_DomainInfo* other);

  // implements Message ----------------------------------------------

  ReqConfGroupMeetingRoomTerLists_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfGroupMeetingRoomTerLists_DomainInfo& from);
  void MergeFrom(const ReqConfGroupMeetingRoomTerLists_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfGroupMeetingRoomTerLists_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfGroupMeetingRoomTerLists_GMRInfo : public ::google::protobuf::Message {
 public:
  ReqConfGroupMeetingRoomTerLists_GMRInfo();
  virtual ~ReqConfGroupMeetingRoomTerLists_GMRInfo();

  ReqConfGroupMeetingRoomTerLists_GMRInfo(const ReqConfGroupMeetingRoomTerLists_GMRInfo& from);

  inline ReqConfGroupMeetingRoomTerLists_GMRInfo& operator=(const ReqConfGroupMeetingRoomTerLists_GMRInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfGroupMeetingRoomTerLists_GMRInfo& default_instance();

  void Swap(ReqConfGroupMeetingRoomTerLists_GMRInfo* other);

  // implements Message ----------------------------------------------

  ReqConfGroupMeetingRoomTerLists_GMRInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfGroupMeetingRoomTerLists_GMRInfo& from);
  void MergeFrom(const ReqConfGroupMeetingRoomTerLists_GMRInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gmrtype = 1;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 2;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 2;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo)
 private:
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gmrtype_;
  ::google::protobuf::uint32 gmrid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfGroupMeetingRoomTerLists_GMRInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfGroupMeetingRoomTerLists : public ::google::protobuf::Message {
 public:
  ReqConfGroupMeetingRoomTerLists();
  virtual ~ReqConfGroupMeetingRoomTerLists();

  ReqConfGroupMeetingRoomTerLists(const ReqConfGroupMeetingRoomTerLists& from);

  inline ReqConfGroupMeetingRoomTerLists& operator=(const ReqConfGroupMeetingRoomTerLists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfGroupMeetingRoomTerLists& default_instance();

  void Swap(ReqConfGroupMeetingRoomTerLists* other);

  // implements Message ----------------------------------------------

  ReqConfGroupMeetingRoomTerLists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfGroupMeetingRoomTerLists& from);
  void MergeFrom(const ReqConfGroupMeetingRoomTerLists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqConfGroupMeetingRoomTerLists_IPPORT IPPORT;
  typedef ReqConfGroupMeetingRoomTerLists_AddrInfo AddrInfo;
  typedef ReqConfGroupMeetingRoomTerLists_DomainInfo DomainInfo;
  typedef ReqConfGroupMeetingRoomTerLists_GMRInfo GMRInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo reqgmrters = 4;
  inline int reqgmrters_size() const;
  inline void clear_reqgmrters();
  static const int kReqgmrtersFieldNumber = 4;
  inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo& reqgmrters(int index) const;
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo* mutable_reqgmrters(int index);
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo* add_reqgmrters();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo >&
      reqgmrters() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo >*
      mutable_reqgmrters();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo& domains(int index) const;
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfGroupMeetingRoomTerLists)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo > reqgmrters_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfGroupMeetingRoomTerLists* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfRollCallInfo_IPPORT : public ::google::protobuf::Message {
 public:
  ReqConfRollCallInfo_IPPORT();
  virtual ~ReqConfRollCallInfo_IPPORT();

  ReqConfRollCallInfo_IPPORT(const ReqConfRollCallInfo_IPPORT& from);

  inline ReqConfRollCallInfo_IPPORT& operator=(const ReqConfRollCallInfo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfRollCallInfo_IPPORT& default_instance();

  void Swap(ReqConfRollCallInfo_IPPORT* other);

  // implements Message ----------------------------------------------

  ReqConfRollCallInfo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfRollCallInfo_IPPORT& from);
  void MergeFrom(const ReqConfRollCallInfo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfRollCallInfo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfRollCallInfo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfRollCallInfo_AddrInfo : public ::google::protobuf::Message {
 public:
  ReqConfRollCallInfo_AddrInfo();
  virtual ~ReqConfRollCallInfo_AddrInfo();

  ReqConfRollCallInfo_AddrInfo(const ReqConfRollCallInfo_AddrInfo& from);

  inline ReqConfRollCallInfo_AddrInfo& operator=(const ReqConfRollCallInfo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfRollCallInfo_AddrInfo& default_instance();

  void Swap(ReqConfRollCallInfo_AddrInfo* other);

  // implements Message ----------------------------------------------

  ReqConfRollCallInfo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfRollCallInfo_AddrInfo& from);
  void MergeFrom(const ReqConfRollCallInfo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqConfRollCallInfo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::ReqConfRollCallInfo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::ReqConfRollCallInfo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::ReqConfRollCallInfo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfRollCallInfo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfRollCallInfo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfRollCallInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  ReqConfRollCallInfo_DomainInfo();
  virtual ~ReqConfRollCallInfo_DomainInfo();

  ReqConfRollCallInfo_DomainInfo(const ReqConfRollCallInfo_DomainInfo& from);

  inline ReqConfRollCallInfo_DomainInfo& operator=(const ReqConfRollCallInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfRollCallInfo_DomainInfo& default_instance();

  void Swap(ReqConfRollCallInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  ReqConfRollCallInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfRollCallInfo_DomainInfo& from);
  void MergeFrom(const ReqConfRollCallInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfRollCallInfo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfRollCallInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfRollCallInfo : public ::google::protobuf::Message {
 public:
  ReqConfRollCallInfo();
  virtual ~ReqConfRollCallInfo();

  ReqConfRollCallInfo(const ReqConfRollCallInfo& from);

  inline ReqConfRollCallInfo& operator=(const ReqConfRollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfRollCallInfo& default_instance();

  void Swap(ReqConfRollCallInfo* other);

  // implements Message ----------------------------------------------

  ReqConfRollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfRollCallInfo& from);
  void MergeFrom(const ReqConfRollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqConfRollCallInfo_IPPORT IPPORT;
  typedef ReqConfRollCallInfo_AddrInfo AddrInfo;
  typedef ReqConfRollCallInfo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.ReqConfRollCallInfo.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::ReqConfRollCallInfo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::ReqConfRollCallInfo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::ReqConfRollCallInfo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.ReqConfRollCallInfo.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::ReqConfRollCallInfo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::ReqConfRollCallInfo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::ReqConfRollCallInfo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfRollCallInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqConfRollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideo_IPPORT : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideo_IPPORT();
  virtual ~ReqSendAssistVideo_IPPORT();

  ReqSendAssistVideo_IPPORT(const ReqSendAssistVideo_IPPORT& from);

  inline ReqSendAssistVideo_IPPORT& operator=(const ReqSendAssistVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideo_IPPORT& default_instance();

  void Swap(ReqSendAssistVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideo_IPPORT& from);
  void MergeFrom(const ReqSendAssistVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideo_AddrInfo();
  virtual ~ReqSendAssistVideo_AddrInfo();

  ReqSendAssistVideo_AddrInfo(const ReqSendAssistVideo_AddrInfo& from);

  inline ReqSendAssistVideo_AddrInfo& operator=(const ReqSendAssistVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideo_AddrInfo& default_instance();

  void Swap(ReqSendAssistVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideo_AddrInfo& from);
  void MergeFrom(const ReqSendAssistVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqSendAssistVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::ReqSendAssistVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::ReqSendAssistVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::ReqSendAssistVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideo_DomainInfo();
  virtual ~ReqSendAssistVideo_DomainInfo();

  ReqSendAssistVideo_DomainInfo(const ReqSendAssistVideo_DomainInfo& from);

  inline ReqSendAssistVideo_DomainInfo& operator=(const ReqSendAssistVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideo_DomainInfo& default_instance();

  void Swap(ReqSendAssistVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideo_DomainInfo& from);
  void MergeFrom(const ReqSendAssistVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideo : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideo();
  virtual ~ReqSendAssistVideo();

  ReqSendAssistVideo(const ReqSendAssistVideo& from);

  inline ReqSendAssistVideo& operator=(const ReqSendAssistVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideo& default_instance();

  void Swap(ReqSendAssistVideo* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideo& from);
  void MergeFrom(const ReqSendAssistVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqSendAssistVideo_IPPORT IPPORT;
  typedef ReqSendAssistVideo_AddrInfo AddrInfo;
  typedef ReqSendAssistVideo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.ReqSendAssistVideo.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::ReqSendAssistVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::ReqSendAssistVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::ReqSendAssistVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.ReqSendAssistVideo.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::ReqSendAssistVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::ReqSendAssistVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::ReqSendAssistVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideoProxy_IPPORT : public ::google::protobuf::Message {
 public:
  RspSendAssistVideoProxy_IPPORT();
  virtual ~RspSendAssistVideoProxy_IPPORT();

  RspSendAssistVideoProxy_IPPORT(const RspSendAssistVideoProxy_IPPORT& from);

  inline RspSendAssistVideoProxy_IPPORT& operator=(const RspSendAssistVideoProxy_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideoProxy_IPPORT& default_instance();

  void Swap(RspSendAssistVideoProxy_IPPORT* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideoProxy_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideoProxy_IPPORT& from);
  void MergeFrom(const RspSendAssistVideoProxy_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideoProxy.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideoProxy_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideoProxy_AddrInfo : public ::google::protobuf::Message {
 public:
  RspSendAssistVideoProxy_AddrInfo();
  virtual ~RspSendAssistVideoProxy_AddrInfo();

  RspSendAssistVideoProxy_AddrInfo(const RspSendAssistVideoProxy_AddrInfo& from);

  inline RspSendAssistVideoProxy_AddrInfo& operator=(const RspSendAssistVideoProxy_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideoProxy_AddrInfo& default_instance();

  void Swap(RspSendAssistVideoProxy_AddrInfo* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideoProxy_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideoProxy_AddrInfo& from);
  void MergeFrom(const RspSendAssistVideoProxy_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspSendAssistVideoProxy.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::RspSendAssistVideoProxy_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::RspSendAssistVideoProxy_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::RspSendAssistVideoProxy_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideoProxy.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideoProxy_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideoProxy_DomainInfo : public ::google::protobuf::Message {
 public:
  RspSendAssistVideoProxy_DomainInfo();
  virtual ~RspSendAssistVideoProxy_DomainInfo();

  RspSendAssistVideoProxy_DomainInfo(const RspSendAssistVideoProxy_DomainInfo& from);

  inline RspSendAssistVideoProxy_DomainInfo& operator=(const RspSendAssistVideoProxy_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideoProxy_DomainInfo& default_instance();

  void Swap(RspSendAssistVideoProxy_DomainInfo* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideoProxy_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideoProxy_DomainInfo& from);
  void MergeFrom(const RspSendAssistVideoProxy_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideoProxy.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideoProxy_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideoProxy : public ::google::protobuf::Message {
 public:
  RspSendAssistVideoProxy();
  virtual ~RspSendAssistVideoProxy();

  RspSendAssistVideoProxy(const RspSendAssistVideoProxy& from);

  inline RspSendAssistVideoProxy& operator=(const RspSendAssistVideoProxy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideoProxy& default_instance();

  void Swap(RspSendAssistVideoProxy* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideoProxy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideoProxy& from);
  void MergeFrom(const RspSendAssistVideoProxy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspSendAssistVideoProxy_IPPORT IPPORT;
  typedef RspSendAssistVideoProxy_AddrInfo AddrInfo;
  typedef RspSendAssistVideoProxy_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional bool isok = 3;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 3;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint32 avterid = 4;
  inline bool has_avterid() const;
  inline void clear_avterid();
  static const int kAvteridFieldNumber = 4;
  inline ::google::protobuf::uint32 avterid() const;
  inline void set_avterid(::google::protobuf::uint32 value);

  // optional string failreason = 5;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 5;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional string domainname = 6;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 6;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.RspSendAssistVideoProxy.AddrInfo svraddrs = 7;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 7;
  inline const ::SRMsgs::RspSendAssistVideoProxy_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::RspSendAssistVideoProxy_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::RspSendAssistVideoProxy_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.RspSendAssistVideoProxy.DomainInfo domains = 8;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 8;
  inline const ::SRMsgs::RspSendAssistVideoProxy_DomainInfo& domains(int index) const;
  inline ::SRMsgs::RspSendAssistVideoProxy_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::RspSendAssistVideoProxy_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_DomainInfo >*
      mutable_domains();

  // optional uint32 errorcode = 9;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 9;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideoProxy)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_avterid();
  inline void clear_has_avterid();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  bool isok_;
  ::std::string* failreason_;
  ::std::string* domainname_;
  ::google::protobuf::uint32 avterid_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideoProxy* default_instance_;
};
// -------------------------------------------------------------------

class IndExitGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  IndExitGroupMeetingRoom_IPPORT();
  virtual ~IndExitGroupMeetingRoom_IPPORT();

  IndExitGroupMeetingRoom_IPPORT(const IndExitGroupMeetingRoom_IPPORT& from);

  inline IndExitGroupMeetingRoom_IPPORT& operator=(const IndExitGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndExitGroupMeetingRoom_IPPORT& default_instance();

  void Swap(IndExitGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  IndExitGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndExitGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const IndExitGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndExitGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndExitGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndExitGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  IndExitGroupMeetingRoom_AddrInfo();
  virtual ~IndExitGroupMeetingRoom_AddrInfo();

  IndExitGroupMeetingRoom_AddrInfo(const IndExitGroupMeetingRoom_AddrInfo& from);

  inline IndExitGroupMeetingRoom_AddrInfo& operator=(const IndExitGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndExitGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(IndExitGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndExitGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndExitGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const IndExitGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndExitGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndExitGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndExitGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndExitGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndExitGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndExitGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndExitGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  IndExitGroupMeetingRoom_DomainInfo();
  virtual ~IndExitGroupMeetingRoom_DomainInfo();

  IndExitGroupMeetingRoom_DomainInfo(const IndExitGroupMeetingRoom_DomainInfo& from);

  inline IndExitGroupMeetingRoom_DomainInfo& operator=(const IndExitGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndExitGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(IndExitGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndExitGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndExitGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const IndExitGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndExitGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndExitGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndExitGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  IndExitGroupMeetingRoom();
  virtual ~IndExitGroupMeetingRoom();

  IndExitGroupMeetingRoom(const IndExitGroupMeetingRoom& from);

  inline IndExitGroupMeetingRoom& operator=(const IndExitGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndExitGroupMeetingRoom& default_instance();

  void Swap(IndExitGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  IndExitGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndExitGroupMeetingRoom& from);
  void MergeFrom(const IndExitGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndExitGroupMeetingRoom_IPPORT IPPORT;
  typedef IndExitGroupMeetingRoom_AddrInfo AddrInfo;
  typedef IndExitGroupMeetingRoom_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 3;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 4;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string exitreason = 5;
  inline bool has_exitreason() const;
  inline void clear_exitreason();
  static const int kExitreasonFieldNumber = 5;
  inline const ::std::string& exitreason() const;
  inline void set_exitreason(const ::std::string& value);
  inline void set_exitreason(const char* value);
  inline void set_exitreason(const char* value, size_t size);
  inline ::std::string* mutable_exitreason();
  inline ::std::string* release_exitreason();
  inline void set_allocated_exitreason(::std::string* exitreason);

  // optional uint32 errorcode = 6;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 6;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndExitGroupMeetingRoom.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndExitGroupMeetingRoom.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // optional uint32 termtype = 10;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 10;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 11;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 11;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndExitGroupMeetingRoom)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_exitreason();
  inline void clear_has_exitreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 gmrtype_;
  ::std::string* exitreason_;
  ::google::protobuf::uint32 gmrid_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo > domains_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndExitGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class IndGroupMeetingRoomTerBeatToMC_IPPORT : public ::google::protobuf::Message {
 public:
  IndGroupMeetingRoomTerBeatToMC_IPPORT();
  virtual ~IndGroupMeetingRoomTerBeatToMC_IPPORT();

  IndGroupMeetingRoomTerBeatToMC_IPPORT(const IndGroupMeetingRoomTerBeatToMC_IPPORT& from);

  inline IndGroupMeetingRoomTerBeatToMC_IPPORT& operator=(const IndGroupMeetingRoomTerBeatToMC_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndGroupMeetingRoomTerBeatToMC_IPPORT& default_instance();

  void Swap(IndGroupMeetingRoomTerBeatToMC_IPPORT* other);

  // implements Message ----------------------------------------------

  IndGroupMeetingRoomTerBeatToMC_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndGroupMeetingRoomTerBeatToMC_IPPORT& from);
  void MergeFrom(const IndGroupMeetingRoomTerBeatToMC_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndGroupMeetingRoomTerBeatToMC_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndGroupMeetingRoomTerBeatToMC_AddrInfo : public ::google::protobuf::Message {
 public:
  IndGroupMeetingRoomTerBeatToMC_AddrInfo();
  virtual ~IndGroupMeetingRoomTerBeatToMC_AddrInfo();

  IndGroupMeetingRoomTerBeatToMC_AddrInfo(const IndGroupMeetingRoomTerBeatToMC_AddrInfo& from);

  inline IndGroupMeetingRoomTerBeatToMC_AddrInfo& operator=(const IndGroupMeetingRoomTerBeatToMC_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndGroupMeetingRoomTerBeatToMC_AddrInfo& default_instance();

  void Swap(IndGroupMeetingRoomTerBeatToMC_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndGroupMeetingRoomTerBeatToMC_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndGroupMeetingRoomTerBeatToMC_AddrInfo& from);
  void MergeFrom(const IndGroupMeetingRoomTerBeatToMC_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndGroupMeetingRoomTerBeatToMC_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndGroupMeetingRoomTerBeatToMC_DomainInfo : public ::google::protobuf::Message {
 public:
  IndGroupMeetingRoomTerBeatToMC_DomainInfo();
  virtual ~IndGroupMeetingRoomTerBeatToMC_DomainInfo();

  IndGroupMeetingRoomTerBeatToMC_DomainInfo(const IndGroupMeetingRoomTerBeatToMC_DomainInfo& from);

  inline IndGroupMeetingRoomTerBeatToMC_DomainInfo& operator=(const IndGroupMeetingRoomTerBeatToMC_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndGroupMeetingRoomTerBeatToMC_DomainInfo& default_instance();

  void Swap(IndGroupMeetingRoomTerBeatToMC_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndGroupMeetingRoomTerBeatToMC_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndGroupMeetingRoomTerBeatToMC_DomainInfo& from);
  void MergeFrom(const IndGroupMeetingRoomTerBeatToMC_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndGroupMeetingRoomTerBeatToMC_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndGroupMeetingRoomTerBeatToMC : public ::google::protobuf::Message {
 public:
  IndGroupMeetingRoomTerBeatToMC();
  virtual ~IndGroupMeetingRoomTerBeatToMC();

  IndGroupMeetingRoomTerBeatToMC(const IndGroupMeetingRoomTerBeatToMC& from);

  inline IndGroupMeetingRoomTerBeatToMC& operator=(const IndGroupMeetingRoomTerBeatToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndGroupMeetingRoomTerBeatToMC& default_instance();

  void Swap(IndGroupMeetingRoomTerBeatToMC* other);

  // implements Message ----------------------------------------------

  IndGroupMeetingRoomTerBeatToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndGroupMeetingRoomTerBeatToMC& from);
  void MergeFrom(const IndGroupMeetingRoomTerBeatToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndGroupMeetingRoomTerBeatToMC_IPPORT IPPORT;
  typedef IndGroupMeetingRoomTerBeatToMC_AddrInfo AddrInfo;
  typedef IndGroupMeetingRoomTerBeatToMC_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 3;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 4;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo >*
      mutable_domains();

  // optional uint32 termtype = 8;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 8;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT selfaddrs = 9;
  inline int selfaddrs_size() const;
  inline void clear_selfaddrs();
  static const int kSelfaddrsFieldNumber = 9;
  inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT& selfaddrs(int index) const;
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* mutable_selfaddrs(int index);
  inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* add_selfaddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >&
      selfaddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >*
      mutable_selfaddrs();

  // optional uint32 producttype = 10;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 10;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndGroupMeetingRoomTerBeatToMC)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 gmrtype_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo > svraddrs_;
  ::google::protobuf::uint32 gmrid_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo > domains_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT > selfaddrs_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndGroupMeetingRoomTerBeatToMC* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoStart_IPPORT : public ::google::protobuf::Message {
 public:
  IndAssistVideoStart_IPPORT();
  virtual ~IndAssistVideoStart_IPPORT();

  IndAssistVideoStart_IPPORT(const IndAssistVideoStart_IPPORT& from);

  inline IndAssistVideoStart_IPPORT& operator=(const IndAssistVideoStart_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoStart_IPPORT& default_instance();

  void Swap(IndAssistVideoStart_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAssistVideoStart_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoStart_IPPORT& from);
  void MergeFrom(const IndAssistVideoStart_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoStart.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoStart_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoStart_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoStart_AddrInfo();
  virtual ~IndAssistVideoStart_AddrInfo();

  IndAssistVideoStart_AddrInfo(const IndAssistVideoStart_AddrInfo& from);

  inline IndAssistVideoStart_AddrInfo& operator=(const IndAssistVideoStart_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoStart_AddrInfo& default_instance();

  void Swap(IndAssistVideoStart_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoStart_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoStart_AddrInfo& from);
  void MergeFrom(const IndAssistVideoStart_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAssistVideoStart.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAssistVideoStart_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAssistVideoStart_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAssistVideoStart_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoStart.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoStart_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoStart_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoStart_DomainInfo();
  virtual ~IndAssistVideoStart_DomainInfo();

  IndAssistVideoStart_DomainInfo(const IndAssistVideoStart_DomainInfo& from);

  inline IndAssistVideoStart_DomainInfo& operator=(const IndAssistVideoStart_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoStart_DomainInfo& default_instance();

  void Swap(IndAssistVideoStart_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoStart_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoStart_DomainInfo& from);
  void MergeFrom(const IndAssistVideoStart_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoStart.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoStart_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoStart : public ::google::protobuf::Message {
 public:
  IndAssistVideoStart();
  virtual ~IndAssistVideoStart();

  IndAssistVideoStart(const IndAssistVideoStart& from);

  inline IndAssistVideoStart& operator=(const IndAssistVideoStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoStart& default_instance();

  void Swap(IndAssistVideoStart* other);

  // implements Message ----------------------------------------------

  IndAssistVideoStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoStart& from);
  void MergeFrom(const IndAssistVideoStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAssistVideoStart_IPPORT IPPORT;
  typedef IndAssistVideoStart_AddrInfo AddrInfo;
  typedef IndAssistVideoStart_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAssistVideoStart.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::IndAssistVideoStart_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAssistVideoStart_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAssistVideoStart_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAssistVideoStart.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::IndAssistVideoStart_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAssistVideoStart_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAssistVideoStart_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_DomainInfo >*
      mutable_domains();

  // optional uint32 avtype = 6;
  inline bool has_avtype() const;
  inline void clear_avtype();
  static const int kAvtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 avtype() const;
  inline void set_avtype(::google::protobuf::uint32 value);

  // optional uint32 sharedaudio = 7;
  inline bool has_sharedaudio() const;
  inline void clear_sharedaudio();
  static const int kSharedaudioFieldNumber = 7;
  inline ::google::protobuf::uint32 sharedaudio() const;
  inline void set_sharedaudio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoStart)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_avtype();
  inline void clear_has_avtype();
  inline void set_has_sharedaudio();
  inline void clear_has_sharedaudio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_AddrInfo > svraddrs_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 avtype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_DomainInfo > domains_;
  ::google::protobuf::uint32 sharedaudio_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoStart* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoClose_IPPORT : public ::google::protobuf::Message {
 public:
  IndAssistVideoClose_IPPORT();
  virtual ~IndAssistVideoClose_IPPORT();

  IndAssistVideoClose_IPPORT(const IndAssistVideoClose_IPPORT& from);

  inline IndAssistVideoClose_IPPORT& operator=(const IndAssistVideoClose_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoClose_IPPORT& default_instance();

  void Swap(IndAssistVideoClose_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAssistVideoClose_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoClose_IPPORT& from);
  void MergeFrom(const IndAssistVideoClose_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoClose.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoClose_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoClose_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoClose_AddrInfo();
  virtual ~IndAssistVideoClose_AddrInfo();

  IndAssistVideoClose_AddrInfo(const IndAssistVideoClose_AddrInfo& from);

  inline IndAssistVideoClose_AddrInfo& operator=(const IndAssistVideoClose_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoClose_AddrInfo& default_instance();

  void Swap(IndAssistVideoClose_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoClose_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoClose_AddrInfo& from);
  void MergeFrom(const IndAssistVideoClose_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAssistVideoClose.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAssistVideoClose_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAssistVideoClose_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAssistVideoClose_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoClose.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoClose_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoClose_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoClose_DomainInfo();
  virtual ~IndAssistVideoClose_DomainInfo();

  IndAssistVideoClose_DomainInfo(const IndAssistVideoClose_DomainInfo& from);

  inline IndAssistVideoClose_DomainInfo& operator=(const IndAssistVideoClose_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoClose_DomainInfo& default_instance();

  void Swap(IndAssistVideoClose_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoClose_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoClose_DomainInfo& from);
  void MergeFrom(const IndAssistVideoClose_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoClose.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoClose_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoClose : public ::google::protobuf::Message {
 public:
  IndAssistVideoClose();
  virtual ~IndAssistVideoClose();

  IndAssistVideoClose(const IndAssistVideoClose& from);

  inline IndAssistVideoClose& operator=(const IndAssistVideoClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoClose& default_instance();

  void Swap(IndAssistVideoClose* other);

  // implements Message ----------------------------------------------

  IndAssistVideoClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoClose& from);
  void MergeFrom(const IndAssistVideoClose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAssistVideoClose_IPPORT IPPORT;
  typedef IndAssistVideoClose_AddrInfo AddrInfo;
  typedef IndAssistVideoClose_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAssistVideoClose.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::IndAssistVideoClose_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAssistVideoClose_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAssistVideoClose_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAssistVideoClose.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::IndAssistVideoClose_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAssistVideoClose_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAssistVideoClose_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoClose)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoClose* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideoRelease_IPPORT : public ::google::protobuf::Message {
 public:
  IndSendAssistVideoRelease_IPPORT();
  virtual ~IndSendAssistVideoRelease_IPPORT();

  IndSendAssistVideoRelease_IPPORT(const IndSendAssistVideoRelease_IPPORT& from);

  inline IndSendAssistVideoRelease_IPPORT& operator=(const IndSendAssistVideoRelease_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideoRelease_IPPORT& default_instance();

  void Swap(IndSendAssistVideoRelease_IPPORT* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideoRelease_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideoRelease_IPPORT& from);
  void MergeFrom(const IndSendAssistVideoRelease_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideoRelease.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideoRelease_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideoRelease_AddrInfo : public ::google::protobuf::Message {
 public:
  IndSendAssistVideoRelease_AddrInfo();
  virtual ~IndSendAssistVideoRelease_AddrInfo();

  IndSendAssistVideoRelease_AddrInfo(const IndSendAssistVideoRelease_AddrInfo& from);

  inline IndSendAssistVideoRelease_AddrInfo& operator=(const IndSendAssistVideoRelease_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideoRelease_AddrInfo& default_instance();

  void Swap(IndSendAssistVideoRelease_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideoRelease_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideoRelease_AddrInfo& from);
  void MergeFrom(const IndSendAssistVideoRelease_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndSendAssistVideoRelease.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndSendAssistVideoRelease_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndSendAssistVideoRelease_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndSendAssistVideoRelease_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideoRelease.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideoRelease_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideoRelease_DomainInfo : public ::google::protobuf::Message {
 public:
  IndSendAssistVideoRelease_DomainInfo();
  virtual ~IndSendAssistVideoRelease_DomainInfo();

  IndSendAssistVideoRelease_DomainInfo(const IndSendAssistVideoRelease_DomainInfo& from);

  inline IndSendAssistVideoRelease_DomainInfo& operator=(const IndSendAssistVideoRelease_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideoRelease_DomainInfo& default_instance();

  void Swap(IndSendAssistVideoRelease_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideoRelease_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideoRelease_DomainInfo& from);
  void MergeFrom(const IndSendAssistVideoRelease_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideoRelease.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideoRelease_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideoRelease : public ::google::protobuf::Message {
 public:
  IndSendAssistVideoRelease();
  virtual ~IndSendAssistVideoRelease();

  IndSendAssistVideoRelease(const IndSendAssistVideoRelease& from);

  inline IndSendAssistVideoRelease& operator=(const IndSendAssistVideoRelease& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideoRelease& default_instance();

  void Swap(IndSendAssistVideoRelease* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideoRelease* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideoRelease& from);
  void MergeFrom(const IndSendAssistVideoRelease& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndSendAssistVideoRelease_IPPORT IPPORT;
  typedef IndSendAssistVideoRelease_AddrInfo AddrInfo;
  typedef IndSendAssistVideoRelease_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndSendAssistVideoRelease.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::IndSendAssistVideoRelease_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndSendAssistVideoRelease_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndSendAssistVideoRelease_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndSendAssistVideoRelease.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::IndSendAssistVideoRelease_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndSendAssistVideoRelease_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndSendAssistVideoRelease_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideoRelease)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideoRelease* default_instance_;
};
// -------------------------------------------------------------------

class IndNewAudioSourceJoined_IPPORT : public ::google::protobuf::Message {
 public:
  IndNewAudioSourceJoined_IPPORT();
  virtual ~IndNewAudioSourceJoined_IPPORT();

  IndNewAudioSourceJoined_IPPORT(const IndNewAudioSourceJoined_IPPORT& from);

  inline IndNewAudioSourceJoined_IPPORT& operator=(const IndNewAudioSourceJoined_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewAudioSourceJoined_IPPORT& default_instance();

  void Swap(IndNewAudioSourceJoined_IPPORT* other);

  // implements Message ----------------------------------------------

  IndNewAudioSourceJoined_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewAudioSourceJoined_IPPORT& from);
  void MergeFrom(const IndNewAudioSourceJoined_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewAudioSourceJoined.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewAudioSourceJoined_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndNewAudioSourceJoined_AddrInfo : public ::google::protobuf::Message {
 public:
  IndNewAudioSourceJoined_AddrInfo();
  virtual ~IndNewAudioSourceJoined_AddrInfo();

  IndNewAudioSourceJoined_AddrInfo(const IndNewAudioSourceJoined_AddrInfo& from);

  inline IndNewAudioSourceJoined_AddrInfo& operator=(const IndNewAudioSourceJoined_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewAudioSourceJoined_AddrInfo& default_instance();

  void Swap(IndNewAudioSourceJoined_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndNewAudioSourceJoined_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewAudioSourceJoined_AddrInfo& from);
  void MergeFrom(const IndNewAudioSourceJoined_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndNewAudioSourceJoined.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndNewAudioSourceJoined_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndNewAudioSourceJoined_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndNewAudioSourceJoined_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewAudioSourceJoined.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewAudioSourceJoined_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewAudioSourceJoined_DomainInfo : public ::google::protobuf::Message {
 public:
  IndNewAudioSourceJoined_DomainInfo();
  virtual ~IndNewAudioSourceJoined_DomainInfo();

  IndNewAudioSourceJoined_DomainInfo(const IndNewAudioSourceJoined_DomainInfo& from);

  inline IndNewAudioSourceJoined_DomainInfo& operator=(const IndNewAudioSourceJoined_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewAudioSourceJoined_DomainInfo& default_instance();

  void Swap(IndNewAudioSourceJoined_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndNewAudioSourceJoined_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewAudioSourceJoined_DomainInfo& from);
  void MergeFrom(const IndNewAudioSourceJoined_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewAudioSourceJoined.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewAudioSourceJoined_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewAudioSourceJoined_SourceInfo : public ::google::protobuf::Message {
 public:
  IndNewAudioSourceJoined_SourceInfo();
  virtual ~IndNewAudioSourceJoined_SourceInfo();

  IndNewAudioSourceJoined_SourceInfo(const IndNewAudioSourceJoined_SourceInfo& from);

  inline IndNewAudioSourceJoined_SourceInfo& operator=(const IndNewAudioSourceJoined_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewAudioSourceJoined_SourceInfo& default_instance();

  void Swap(IndNewAudioSourceJoined_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndNewAudioSourceJoined_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewAudioSourceJoined_SourceInfo& from);
  void MergeFrom(const IndNewAudioSourceJoined_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewAudioSourceJoined.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewAudioSourceJoined_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewAudioSourceJoined : public ::google::protobuf::Message {
 public:
  IndNewAudioSourceJoined();
  virtual ~IndNewAudioSourceJoined();

  IndNewAudioSourceJoined(const IndNewAudioSourceJoined& from);

  inline IndNewAudioSourceJoined& operator=(const IndNewAudioSourceJoined& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewAudioSourceJoined& default_instance();

  void Swap(IndNewAudioSourceJoined* other);

  // implements Message ----------------------------------------------

  IndNewAudioSourceJoined* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewAudioSourceJoined& from);
  void MergeFrom(const IndNewAudioSourceJoined& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndNewAudioSourceJoined_IPPORT IPPORT;
  typedef IndNewAudioSourceJoined_AddrInfo AddrInfo;
  typedef IndNewAudioSourceJoined_DomainInfo DomainInfo;
  typedef IndNewAudioSourceJoined_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndNewAudioSourceJoined.SourceInfo srcinfos = 3;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 3;
  inline const ::SRMsgs::IndNewAudioSourceJoined_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::IndNewAudioSourceJoined_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::IndNewAudioSourceJoined_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndNewAudioSourceJoined.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndNewAudioSourceJoined_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndNewAudioSourceJoined_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndNewAudioSourceJoined_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndNewAudioSourceJoined.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndNewAudioSourceJoined_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndNewAudioSourceJoined_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndNewAudioSourceJoined_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewAudioSourceJoined)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewAudioSourceJoined* default_instance_;
};
// -------------------------------------------------------------------

class IndAudioSourceLeave_IPPORT : public ::google::protobuf::Message {
 public:
  IndAudioSourceLeave_IPPORT();
  virtual ~IndAudioSourceLeave_IPPORT();

  IndAudioSourceLeave_IPPORT(const IndAudioSourceLeave_IPPORT& from);

  inline IndAudioSourceLeave_IPPORT& operator=(const IndAudioSourceLeave_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAudioSourceLeave_IPPORT& default_instance();

  void Swap(IndAudioSourceLeave_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAudioSourceLeave_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAudioSourceLeave_IPPORT& from);
  void MergeFrom(const IndAudioSourceLeave_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAudioSourceLeave.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAudioSourceLeave_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAudioSourceLeave_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAudioSourceLeave_AddrInfo();
  virtual ~IndAudioSourceLeave_AddrInfo();

  IndAudioSourceLeave_AddrInfo(const IndAudioSourceLeave_AddrInfo& from);

  inline IndAudioSourceLeave_AddrInfo& operator=(const IndAudioSourceLeave_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAudioSourceLeave_AddrInfo& default_instance();

  void Swap(IndAudioSourceLeave_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAudioSourceLeave_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAudioSourceLeave_AddrInfo& from);
  void MergeFrom(const IndAudioSourceLeave_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAudioSourceLeave.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAudioSourceLeave_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAudioSourceLeave_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAudioSourceLeave_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAudioSourceLeave.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAudioSourceLeave_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAudioSourceLeave_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAudioSourceLeave_DomainInfo();
  virtual ~IndAudioSourceLeave_DomainInfo();

  IndAudioSourceLeave_DomainInfo(const IndAudioSourceLeave_DomainInfo& from);

  inline IndAudioSourceLeave_DomainInfo& operator=(const IndAudioSourceLeave_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAudioSourceLeave_DomainInfo& default_instance();

  void Swap(IndAudioSourceLeave_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAudioSourceLeave_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAudioSourceLeave_DomainInfo& from);
  void MergeFrom(const IndAudioSourceLeave_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAudioSourceLeave.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAudioSourceLeave_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAudioSourceLeave_SourceInfo : public ::google::protobuf::Message {
 public:
  IndAudioSourceLeave_SourceInfo();
  virtual ~IndAudioSourceLeave_SourceInfo();

  IndAudioSourceLeave_SourceInfo(const IndAudioSourceLeave_SourceInfo& from);

  inline IndAudioSourceLeave_SourceInfo& operator=(const IndAudioSourceLeave_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAudioSourceLeave_SourceInfo& default_instance();

  void Swap(IndAudioSourceLeave_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndAudioSourceLeave_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAudioSourceLeave_SourceInfo& from);
  void MergeFrom(const IndAudioSourceLeave_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAudioSourceLeave.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 srcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAudioSourceLeave_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAudioSourceLeave : public ::google::protobuf::Message {
 public:
  IndAudioSourceLeave();
  virtual ~IndAudioSourceLeave();

  IndAudioSourceLeave(const IndAudioSourceLeave& from);

  inline IndAudioSourceLeave& operator=(const IndAudioSourceLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAudioSourceLeave& default_instance();

  void Swap(IndAudioSourceLeave* other);

  // implements Message ----------------------------------------------

  IndAudioSourceLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAudioSourceLeave& from);
  void MergeFrom(const IndAudioSourceLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAudioSourceLeave_IPPORT IPPORT;
  typedef IndAudioSourceLeave_AddrInfo AddrInfo;
  typedef IndAudioSourceLeave_DomainInfo DomainInfo;
  typedef IndAudioSourceLeave_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAudioSourceLeave.SourceInfo srcinfos = 3;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 3;
  inline const ::SRMsgs::IndAudioSourceLeave_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::IndAudioSourceLeave_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::IndAudioSourceLeave_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAudioSourceLeave.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndAudioSourceLeave_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAudioSourceLeave_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAudioSourceLeave_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAudioSourceLeave.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndAudioSourceLeave_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAudioSourceLeave_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAudioSourceLeave_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAudioSourceLeave)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAudioSourceLeave* default_instance_;
};
// -------------------------------------------------------------------

class IndNewVideoSourceJoined_IPPORT : public ::google::protobuf::Message {
 public:
  IndNewVideoSourceJoined_IPPORT();
  virtual ~IndNewVideoSourceJoined_IPPORT();

  IndNewVideoSourceJoined_IPPORT(const IndNewVideoSourceJoined_IPPORT& from);

  inline IndNewVideoSourceJoined_IPPORT& operator=(const IndNewVideoSourceJoined_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewVideoSourceJoined_IPPORT& default_instance();

  void Swap(IndNewVideoSourceJoined_IPPORT* other);

  // implements Message ----------------------------------------------

  IndNewVideoSourceJoined_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewVideoSourceJoined_IPPORT& from);
  void MergeFrom(const IndNewVideoSourceJoined_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewVideoSourceJoined.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewVideoSourceJoined_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndNewVideoSourceJoined_AddrInfo : public ::google::protobuf::Message {
 public:
  IndNewVideoSourceJoined_AddrInfo();
  virtual ~IndNewVideoSourceJoined_AddrInfo();

  IndNewVideoSourceJoined_AddrInfo(const IndNewVideoSourceJoined_AddrInfo& from);

  inline IndNewVideoSourceJoined_AddrInfo& operator=(const IndNewVideoSourceJoined_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewVideoSourceJoined_AddrInfo& default_instance();

  void Swap(IndNewVideoSourceJoined_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndNewVideoSourceJoined_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewVideoSourceJoined_AddrInfo& from);
  void MergeFrom(const IndNewVideoSourceJoined_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndNewVideoSourceJoined.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndNewVideoSourceJoined_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndNewVideoSourceJoined_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndNewVideoSourceJoined_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewVideoSourceJoined.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewVideoSourceJoined_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewVideoSourceJoined_DomainInfo : public ::google::protobuf::Message {
 public:
  IndNewVideoSourceJoined_DomainInfo();
  virtual ~IndNewVideoSourceJoined_DomainInfo();

  IndNewVideoSourceJoined_DomainInfo(const IndNewVideoSourceJoined_DomainInfo& from);

  inline IndNewVideoSourceJoined_DomainInfo& operator=(const IndNewVideoSourceJoined_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewVideoSourceJoined_DomainInfo& default_instance();

  void Swap(IndNewVideoSourceJoined_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndNewVideoSourceJoined_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewVideoSourceJoined_DomainInfo& from);
  void MergeFrom(const IndNewVideoSourceJoined_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewVideoSourceJoined.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewVideoSourceJoined_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewVideoSourceJoined_SourceInfo : public ::google::protobuf::Message {
 public:
  IndNewVideoSourceJoined_SourceInfo();
  virtual ~IndNewVideoSourceJoined_SourceInfo();

  IndNewVideoSourceJoined_SourceInfo(const IndNewVideoSourceJoined_SourceInfo& from);

  inline IndNewVideoSourceJoined_SourceInfo& operator=(const IndNewVideoSourceJoined_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewVideoSourceJoined_SourceInfo& default_instance();

  void Swap(IndNewVideoSourceJoined_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndNewVideoSourceJoined_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewVideoSourceJoined_SourceInfo& from);
  void MergeFrom(const IndNewVideoSourceJoined_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewVideoSourceJoined.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewVideoSourceJoined_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewVideoSourceJoined : public ::google::protobuf::Message {
 public:
  IndNewVideoSourceJoined();
  virtual ~IndNewVideoSourceJoined();

  IndNewVideoSourceJoined(const IndNewVideoSourceJoined& from);

  inline IndNewVideoSourceJoined& operator=(const IndNewVideoSourceJoined& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewVideoSourceJoined& default_instance();

  void Swap(IndNewVideoSourceJoined* other);

  // implements Message ----------------------------------------------

  IndNewVideoSourceJoined* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewVideoSourceJoined& from);
  void MergeFrom(const IndNewVideoSourceJoined& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndNewVideoSourceJoined_IPPORT IPPORT;
  typedef IndNewVideoSourceJoined_AddrInfo AddrInfo;
  typedef IndNewVideoSourceJoined_DomainInfo DomainInfo;
  typedef IndNewVideoSourceJoined_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndNewVideoSourceJoined.SourceInfo newsrcinfos = 3;
  inline int newsrcinfos_size() const;
  inline void clear_newsrcinfos();
  static const int kNewsrcinfosFieldNumber = 3;
  inline const ::SRMsgs::IndNewVideoSourceJoined_SourceInfo& newsrcinfos(int index) const;
  inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* mutable_newsrcinfos(int index);
  inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* add_newsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >&
      newsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >*
      mutable_newsrcinfos();

  // repeated .SRMsgs.IndNewVideoSourceJoined.SourceInfo allsrcinfos = 4;
  inline int allsrcinfos_size() const;
  inline void clear_allsrcinfos();
  static const int kAllsrcinfosFieldNumber = 4;
  inline const ::SRMsgs::IndNewVideoSourceJoined_SourceInfo& allsrcinfos(int index) const;
  inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* mutable_allsrcinfos(int index);
  inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* add_allsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >&
      allsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >*
      mutable_allsrcinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndNewVideoSourceJoined.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndNewVideoSourceJoined_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndNewVideoSourceJoined_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndNewVideoSourceJoined_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndNewVideoSourceJoined.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndNewVideoSourceJoined_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndNewVideoSourceJoined_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndNewVideoSourceJoined_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewVideoSourceJoined)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo > newsrcinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo > allsrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndNewVideoSourceJoined* default_instance_;
};
// -------------------------------------------------------------------

class IndVideoSourceLeave_IPPORT : public ::google::protobuf::Message {
 public:
  IndVideoSourceLeave_IPPORT();
  virtual ~IndVideoSourceLeave_IPPORT();

  IndVideoSourceLeave_IPPORT(const IndVideoSourceLeave_IPPORT& from);

  inline IndVideoSourceLeave_IPPORT& operator=(const IndVideoSourceLeave_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVideoSourceLeave_IPPORT& default_instance();

  void Swap(IndVideoSourceLeave_IPPORT* other);

  // implements Message ----------------------------------------------

  IndVideoSourceLeave_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVideoSourceLeave_IPPORT& from);
  void MergeFrom(const IndVideoSourceLeave_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVideoSourceLeave.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndVideoSourceLeave_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndVideoSourceLeave_AddrInfo : public ::google::protobuf::Message {
 public:
  IndVideoSourceLeave_AddrInfo();
  virtual ~IndVideoSourceLeave_AddrInfo();

  IndVideoSourceLeave_AddrInfo(const IndVideoSourceLeave_AddrInfo& from);

  inline IndVideoSourceLeave_AddrInfo& operator=(const IndVideoSourceLeave_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVideoSourceLeave_AddrInfo& default_instance();

  void Swap(IndVideoSourceLeave_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndVideoSourceLeave_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVideoSourceLeave_AddrInfo& from);
  void MergeFrom(const IndVideoSourceLeave_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndVideoSourceLeave.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndVideoSourceLeave_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndVideoSourceLeave_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndVideoSourceLeave_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVideoSourceLeave.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndVideoSourceLeave_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndVideoSourceLeave_DomainInfo : public ::google::protobuf::Message {
 public:
  IndVideoSourceLeave_DomainInfo();
  virtual ~IndVideoSourceLeave_DomainInfo();

  IndVideoSourceLeave_DomainInfo(const IndVideoSourceLeave_DomainInfo& from);

  inline IndVideoSourceLeave_DomainInfo& operator=(const IndVideoSourceLeave_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVideoSourceLeave_DomainInfo& default_instance();

  void Swap(IndVideoSourceLeave_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndVideoSourceLeave_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVideoSourceLeave_DomainInfo& from);
  void MergeFrom(const IndVideoSourceLeave_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVideoSourceLeave.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndVideoSourceLeave_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndVideoSourceLeave_SourceInfo : public ::google::protobuf::Message {
 public:
  IndVideoSourceLeave_SourceInfo();
  virtual ~IndVideoSourceLeave_SourceInfo();

  IndVideoSourceLeave_SourceInfo(const IndVideoSourceLeave_SourceInfo& from);

  inline IndVideoSourceLeave_SourceInfo& operator=(const IndVideoSourceLeave_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVideoSourceLeave_SourceInfo& default_instance();

  void Swap(IndVideoSourceLeave_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndVideoSourceLeave_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVideoSourceLeave_SourceInfo& from);
  void MergeFrom(const IndVideoSourceLeave_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVideoSourceLeave.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndVideoSourceLeave_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndVideoSourceLeave : public ::google::protobuf::Message {
 public:
  IndVideoSourceLeave();
  virtual ~IndVideoSourceLeave();

  IndVideoSourceLeave(const IndVideoSourceLeave& from);

  inline IndVideoSourceLeave& operator=(const IndVideoSourceLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVideoSourceLeave& default_instance();

  void Swap(IndVideoSourceLeave* other);

  // implements Message ----------------------------------------------

  IndVideoSourceLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVideoSourceLeave& from);
  void MergeFrom(const IndVideoSourceLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndVideoSourceLeave_IPPORT IPPORT;
  typedef IndVideoSourceLeave_AddrInfo AddrInfo;
  typedef IndVideoSourceLeave_DomainInfo DomainInfo;
  typedef IndVideoSourceLeave_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndVideoSourceLeave.SourceInfo delsrcinfos = 3;
  inline int delsrcinfos_size() const;
  inline void clear_delsrcinfos();
  static const int kDelsrcinfosFieldNumber = 3;
  inline const ::SRMsgs::IndVideoSourceLeave_SourceInfo& delsrcinfos(int index) const;
  inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* mutable_delsrcinfos(int index);
  inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* add_delsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >&
      delsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >*
      mutable_delsrcinfos();

  // repeated .SRMsgs.IndVideoSourceLeave.SourceInfo cursrcinfos = 4;
  inline int cursrcinfos_size() const;
  inline void clear_cursrcinfos();
  static const int kCursrcinfosFieldNumber = 4;
  inline const ::SRMsgs::IndVideoSourceLeave_SourceInfo& cursrcinfos(int index) const;
  inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* mutable_cursrcinfos(int index);
  inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* add_cursrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >&
      cursrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >*
      mutable_cursrcinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndVideoSourceLeave.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndVideoSourceLeave_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndVideoSourceLeave_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndVideoSourceLeave_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndVideoSourceLeave.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndVideoSourceLeave_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndVideoSourceLeave_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndVideoSourceLeave_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVideoSourceLeave)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo > delsrcinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo > cursrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndVideoSourceLeave* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetCallWaitingState_IPPORT : public ::google::protobuf::Message {
 public:
  CmdSetCallWaitingState_IPPORT();
  virtual ~CmdSetCallWaitingState_IPPORT();

  CmdSetCallWaitingState_IPPORT(const CmdSetCallWaitingState_IPPORT& from);

  inline CmdSetCallWaitingState_IPPORT& operator=(const CmdSetCallWaitingState_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetCallWaitingState_IPPORT& default_instance();

  void Swap(CmdSetCallWaitingState_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdSetCallWaitingState_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetCallWaitingState_IPPORT& from);
  void MergeFrom(const CmdSetCallWaitingState_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetCallWaitingState.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetCallWaitingState_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetCallWaitingState_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdSetCallWaitingState_AddrInfo();
  virtual ~CmdSetCallWaitingState_AddrInfo();

  CmdSetCallWaitingState_AddrInfo(const CmdSetCallWaitingState_AddrInfo& from);

  inline CmdSetCallWaitingState_AddrInfo& operator=(const CmdSetCallWaitingState_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetCallWaitingState_AddrInfo& default_instance();

  void Swap(CmdSetCallWaitingState_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdSetCallWaitingState_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetCallWaitingState_AddrInfo& from);
  void MergeFrom(const CmdSetCallWaitingState_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdSetCallWaitingState.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdSetCallWaitingState_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdSetCallWaitingState_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdSetCallWaitingState_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetCallWaitingState.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetCallWaitingState_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetCallWaitingState_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdSetCallWaitingState_DomainInfo();
  virtual ~CmdSetCallWaitingState_DomainInfo();

  CmdSetCallWaitingState_DomainInfo(const CmdSetCallWaitingState_DomainInfo& from);

  inline CmdSetCallWaitingState_DomainInfo& operator=(const CmdSetCallWaitingState_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetCallWaitingState_DomainInfo& default_instance();

  void Swap(CmdSetCallWaitingState_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdSetCallWaitingState_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetCallWaitingState_DomainInfo& from);
  void MergeFrom(const CmdSetCallWaitingState_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetCallWaitingState.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetCallWaitingState_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetCallWaitingState : public ::google::protobuf::Message {
 public:
  CmdSetCallWaitingState();
  virtual ~CmdSetCallWaitingState();

  CmdSetCallWaitingState(const CmdSetCallWaitingState& from);

  inline CmdSetCallWaitingState& operator=(const CmdSetCallWaitingState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetCallWaitingState& default_instance();

  void Swap(CmdSetCallWaitingState* other);

  // implements Message ----------------------------------------------

  CmdSetCallWaitingState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetCallWaitingState& from);
  void MergeFrom(const CmdSetCallWaitingState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdSetCallWaitingState_IPPORT IPPORT;
  typedef CmdSetCallWaitingState_AddrInfo AddrInfo;
  typedef CmdSetCallWaitingState_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdSetCallWaitingState.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdSetCallWaitingState_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdSetCallWaitingState_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdSetCallWaitingState_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdSetCallWaitingState.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdSetCallWaitingState_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdSetCallWaitingState_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdSetCallWaitingState_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_DomainInfo >*
      mutable_domains();

  // optional bool iscallwaiting = 7;
  inline bool has_iscallwaiting() const;
  inline void clear_iscallwaiting();
  static const int kIscallwaitingFieldNumber = 7;
  inline bool iscallwaiting() const;
  inline void set_iscallwaiting(bool value);

  // optional bool allallow = 8;
  inline bool has_allallow() const;
  inline void clear_allallow();
  static const int kAllallowFieldNumber = 8;
  inline bool allallow() const;
  inline void set_allallow(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetCallWaitingState)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_iscallwaiting();
  inline void clear_has_iscallwaiting();
  inline void set_has_allallow();
  inline void clear_has_allallow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_DomainInfo > domains_;
  bool iscallwaiting_;
  bool allallow_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetCallWaitingState* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_IPPORT();
  virtual ~CmdTerJoinGroupMeetingRoom_IPPORT();

  CmdTerJoinGroupMeetingRoom_IPPORT(const CmdTerJoinGroupMeetingRoom_IPPORT& from);

  inline CmdTerJoinGroupMeetingRoom_IPPORT& operator=(const CmdTerJoinGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_IPPORT& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_AddrInfo();
  virtual ~CmdTerJoinGroupMeetingRoom_AddrInfo();

  CmdTerJoinGroupMeetingRoom_AddrInfo(const CmdTerJoinGroupMeetingRoom_AddrInfo& from);

  inline CmdTerJoinGroupMeetingRoom_AddrInfo& operator=(const CmdTerJoinGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_DomainInfo();
  virtual ~CmdTerJoinGroupMeetingRoom_DomainInfo();

  CmdTerJoinGroupMeetingRoom_DomainInfo(const CmdTerJoinGroupMeetingRoom_DomainInfo& from);

  inline CmdTerJoinGroupMeetingRoom_DomainInfo& operator=(const CmdTerJoinGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_TerInfo : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_TerInfo();
  virtual ~CmdTerJoinGroupMeetingRoom_TerInfo();

  CmdTerJoinGroupMeetingRoom_TerInfo(const CmdTerJoinGroupMeetingRoom_TerInfo& from);

  inline CmdTerJoinGroupMeetingRoom_TerInfo& operator=(const CmdTerJoinGroupMeetingRoom_TerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_TerInfo& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_TerInfo* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_TerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_TerInfo& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_TerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string terdname = 3;
  inline bool has_terdname() const;
  inline void clear_terdname();
  static const int kTerdnameFieldNumber = 3;
  inline const ::std::string& terdname() const;
  inline void set_terdname(const ::std::string& value);
  inline void set_terdname(const char* value);
  inline void set_terdname(const char* value, size_t size);
  inline ::std::string* mutable_terdname();
  inline ::std::string* release_terdname();
  inline void set_allocated_terdname(::std::string* terdname);

  // optional uint32 termtype = 4;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 5;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 5;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_terdname();
  inline void clear_has_terdname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 termtype_;
  ::std::string* terdname_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_TerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_GMRInfo : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_GMRInfo();
  virtual ~CmdTerJoinGroupMeetingRoom_GMRInfo();

  CmdTerJoinGroupMeetingRoom_GMRInfo(const CmdTerJoinGroupMeetingRoom_GMRInfo& from);

  inline CmdTerJoinGroupMeetingRoom_GMRInfo& operator=(const CmdTerJoinGroupMeetingRoom_GMRInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_GMRInfo& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_GMRInfo* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_GMRInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_GMRInfo& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_GMRInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gmrdname = 1;
  inline bool has_gmrdname() const;
  inline void clear_gmrdname();
  static const int kGmrdnameFieldNumber = 1;
  inline const ::std::string& gmrdname() const;
  inline void set_gmrdname(const ::std::string& value);
  inline void set_gmrdname(const char* value);
  inline void set_gmrdname(const char* value, size_t size);
  inline ::std::string* mutable_gmrdname();
  inline ::std::string* release_gmrdname();
  inline void set_allocated_gmrdname(::std::string* gmrdname);

  // optional uint64 gmrconfid = 2;
  inline bool has_gmrconfid() const;
  inline void clear_gmrconfid();
  static const int kGmrconfidFieldNumber = 2;
  inline ::google::protobuf::uint64 gmrconfid() const;
  inline void set_gmrconfid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 3;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 4;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string gmrname = 5;
  inline bool has_gmrname() const;
  inline void clear_gmrname();
  static const int kGmrnameFieldNumber = 5;
  inline const ::std::string& gmrname() const;
  inline void set_gmrname(const ::std::string& value);
  inline void set_gmrname(const char* value);
  inline void set_gmrname(const char* value, size_t size);
  inline ::std::string* mutable_gmrname();
  inline ::std::string* release_gmrname();
  inline void set_allocated_gmrname(::std::string* gmrname);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo)
 private:
  inline void set_has_gmrdname();
  inline void clear_has_gmrdname();
  inline void set_has_gmrconfid();
  inline void clear_has_gmrconfid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_gmrname();
  inline void clear_has_gmrname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gmrdname_;
  ::google::protobuf::uint64 gmrconfid_;
  ::google::protobuf::uint32 gmrtype_;
  ::google::protobuf::uint32 gmrid_;
  ::std::string* gmrname_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_GMRInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom_MoveInfo : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom_MoveInfo();
  virtual ~CmdTerJoinGroupMeetingRoom_MoveInfo();

  CmdTerJoinGroupMeetingRoom_MoveInfo(const CmdTerJoinGroupMeetingRoom_MoveInfo& from);

  inline CmdTerJoinGroupMeetingRoom_MoveInfo& operator=(const CmdTerJoinGroupMeetingRoom_MoveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom_MoveInfo& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom_MoveInfo* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom_MoveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom_MoveInfo& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom_MoveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo from_gmrinfo = 1;
  inline bool has_from_gmrinfo() const;
  inline void clear_from_gmrinfo();
  static const int kFromGmrinfoFieldNumber = 1;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo& from_gmrinfo() const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* mutable_from_gmrinfo();
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* release_from_gmrinfo();
  inline void set_allocated_from_gmrinfo(::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* from_gmrinfo);

  // optional .SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo to_gmrinfo = 2;
  inline bool has_to_gmrinfo() const;
  inline void clear_to_gmrinfo();
  static const int kToGmrinfoFieldNumber = 2;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo& to_gmrinfo() const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* mutable_to_gmrinfo();
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* release_to_gmrinfo();
  inline void set_allocated_to_gmrinfo(::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* to_gmrinfo);

  // repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo moveters = 3;
  inline int moveters_size() const;
  inline void clear_moveters();
  static const int kMovetersFieldNumber = 3;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo& moveters(int index) const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo* mutable_moveters(int index);
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo* add_moveters();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo >&
      moveters() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo >*
      mutable_moveters();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo)
 private:
  inline void set_has_from_gmrinfo();
  inline void clear_has_from_gmrinfo();
  inline void set_has_to_gmrinfo();
  inline void clear_has_to_gmrinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* from_gmrinfo_;
  ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* to_gmrinfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo > moveters_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom_MoveInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerJoinGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  CmdTerJoinGroupMeetingRoom();
  virtual ~CmdTerJoinGroupMeetingRoom();

  CmdTerJoinGroupMeetingRoom(const CmdTerJoinGroupMeetingRoom& from);

  inline CmdTerJoinGroupMeetingRoom& operator=(const CmdTerJoinGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerJoinGroupMeetingRoom& default_instance();

  void Swap(CmdTerJoinGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  CmdTerJoinGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerJoinGroupMeetingRoom& from);
  void MergeFrom(const CmdTerJoinGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdTerJoinGroupMeetingRoom_IPPORT IPPORT;
  typedef CmdTerJoinGroupMeetingRoom_AddrInfo AddrInfo;
  typedef CmdTerJoinGroupMeetingRoom_DomainInfo DomainInfo;
  typedef CmdTerJoinGroupMeetingRoom_TerInfo TerInfo;
  typedef CmdTerJoinGroupMeetingRoom_GMRInfo GMRInfo;
  typedef CmdTerJoinGroupMeetingRoom_MoveInfo MoveInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo moveinfos = 7;
  inline int moveinfos_size() const;
  inline void clear_moveinfos();
  static const int kMoveinfosFieldNumber = 7;
  inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo& moveinfos(int index) const;
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo* mutable_moveinfos(int index);
  inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo* add_moveinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo >&
      moveinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo >*
      mutable_moveinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerJoinGroupMeetingRoom)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo > domains_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo > moveinfos_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerJoinGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_IPPORT();
  virtual ~CmdTerExitGroupMeetingRoom_IPPORT();

  CmdTerExitGroupMeetingRoom_IPPORT(const CmdTerExitGroupMeetingRoom_IPPORT& from);

  inline CmdTerExitGroupMeetingRoom_IPPORT& operator=(const CmdTerExitGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_IPPORT& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_AddrInfo();
  virtual ~CmdTerExitGroupMeetingRoom_AddrInfo();

  CmdTerExitGroupMeetingRoom_AddrInfo(const CmdTerExitGroupMeetingRoom_AddrInfo& from);

  inline CmdTerExitGroupMeetingRoom_AddrInfo& operator=(const CmdTerExitGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_DomainInfo();
  virtual ~CmdTerExitGroupMeetingRoom_DomainInfo();

  CmdTerExitGroupMeetingRoom_DomainInfo(const CmdTerExitGroupMeetingRoom_DomainInfo& from);

  inline CmdTerExitGroupMeetingRoom_DomainInfo& operator=(const CmdTerExitGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_TerInfo : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_TerInfo();
  virtual ~CmdTerExitGroupMeetingRoom_TerInfo();

  CmdTerExitGroupMeetingRoom_TerInfo(const CmdTerExitGroupMeetingRoom_TerInfo& from);

  inline CmdTerExitGroupMeetingRoom_TerInfo& operator=(const CmdTerExitGroupMeetingRoom_TerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_TerInfo& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_TerInfo* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_TerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_TerInfo& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_TerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string terdname = 2;
  inline bool has_terdname() const;
  inline void clear_terdname();
  static const int kTerdnameFieldNumber = 2;
  inline const ::std::string& terdname() const;
  inline void set_terdname(const ::std::string& value);
  inline void set_terdname(const char* value);
  inline void set_terdname(const char* value, size_t size);
  inline ::std::string* mutable_terdname();
  inline ::std::string* release_terdname();
  inline void set_allocated_terdname(::std::string* terdname);

  // optional uint32 termtype = 3;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 4;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 4;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_terdname();
  inline void clear_has_terdname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* terdname_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_TerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_GMRInfo : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_GMRInfo();
  virtual ~CmdTerExitGroupMeetingRoom_GMRInfo();

  CmdTerExitGroupMeetingRoom_GMRInfo(const CmdTerExitGroupMeetingRoom_GMRInfo& from);

  inline CmdTerExitGroupMeetingRoom_GMRInfo& operator=(const CmdTerExitGroupMeetingRoom_GMRInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_GMRInfo& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_GMRInfo* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_GMRInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_GMRInfo& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_GMRInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gmrtype = 1;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 2;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 2;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo)
 private:
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gmrtype_;
  ::google::protobuf::uint32 gmrid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_GMRInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom_ExitInfo : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom_ExitInfo();
  virtual ~CmdTerExitGroupMeetingRoom_ExitInfo();

  CmdTerExitGroupMeetingRoom_ExitInfo(const CmdTerExitGroupMeetingRoom_ExitInfo& from);

  inline CmdTerExitGroupMeetingRoom_ExitInfo& operator=(const CmdTerExitGroupMeetingRoom_ExitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom_ExitInfo& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom_ExitInfo* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom_ExitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom_ExitInfo& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom_ExitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo exitgmrinfo = 1;
  inline bool has_exitgmrinfo() const;
  inline void clear_exitgmrinfo();
  static const int kExitgmrinfoFieldNumber = 1;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo& exitgmrinfo() const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* mutable_exitgmrinfo();
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* release_exitgmrinfo();
  inline void set_allocated_exitgmrinfo(::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* exitgmrinfo);

  // repeated .SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo exitters = 2;
  inline int exitters_size() const;
  inline void clear_exitters();
  static const int kExittersFieldNumber = 2;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo& exitters(int index) const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo* mutable_exitters(int index);
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo* add_exitters();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo >&
      exitters() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo >*
      mutable_exitters();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo)
 private:
  inline void set_has_exitgmrinfo();
  inline void clear_has_exitgmrinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* exitgmrinfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo > exitters_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom_ExitInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerExitGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  CmdTerExitGroupMeetingRoom();
  virtual ~CmdTerExitGroupMeetingRoom();

  CmdTerExitGroupMeetingRoom(const CmdTerExitGroupMeetingRoom& from);

  inline CmdTerExitGroupMeetingRoom& operator=(const CmdTerExitGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerExitGroupMeetingRoom& default_instance();

  void Swap(CmdTerExitGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  CmdTerExitGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerExitGroupMeetingRoom& from);
  void MergeFrom(const CmdTerExitGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdTerExitGroupMeetingRoom_IPPORT IPPORT;
  typedef CmdTerExitGroupMeetingRoom_AddrInfo AddrInfo;
  typedef CmdTerExitGroupMeetingRoom_DomainInfo DomainInfo;
  typedef CmdTerExitGroupMeetingRoom_TerInfo TerInfo;
  typedef CmdTerExitGroupMeetingRoom_GMRInfo GMRInfo;
  typedef CmdTerExitGroupMeetingRoom_ExitInfo ExitInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // repeated .SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo exitinfos = 7;
  inline int exitinfos_size() const;
  inline void clear_exitinfos();
  static const int kExitinfosFieldNumber = 7;
  inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo& exitinfos(int index) const;
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo* mutable_exitinfos(int index);
  inline ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo* add_exitinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo >&
      exitinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo >*
      mutable_exitinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerExitGroupMeetingRoom)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo > domains_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo > exitinfos_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerExitGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList_IPPORT();
  virtual ~CmdMCSetConfRollCallList_IPPORT();

  CmdMCSetConfRollCallList_IPPORT(const CmdMCSetConfRollCallList_IPPORT& from);

  inline CmdMCSetConfRollCallList_IPPORT& operator=(const CmdMCSetConfRollCallList_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList_IPPORT& default_instance();

  void Swap(CmdMCSetConfRollCallList_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList_IPPORT& from);
  void MergeFrom(const CmdMCSetConfRollCallList_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList_AddrInfo();
  virtual ~CmdMCSetConfRollCallList_AddrInfo();

  CmdMCSetConfRollCallList_AddrInfo(const CmdMCSetConfRollCallList_AddrInfo& from);

  inline CmdMCSetConfRollCallList_AddrInfo& operator=(const CmdMCSetConfRollCallList_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList_AddrInfo& default_instance();

  void Swap(CmdMCSetConfRollCallList_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList_AddrInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallList_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCSetConfRollCallList.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCSetConfRollCallList_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallList_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallList_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList_DomainInfo();
  virtual ~CmdMCSetConfRollCallList_DomainInfo();

  CmdMCSetConfRollCallList_DomainInfo(const CmdMCSetConfRollCallList_DomainInfo& from);

  inline CmdMCSetConfRollCallList_DomainInfo& operator=(const CmdMCSetConfRollCallList_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList_DomainInfo& default_instance();

  void Swap(CmdMCSetConfRollCallList_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList_DomainInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallList_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList_ParticipantInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList_ParticipantInfo();
  virtual ~CmdMCSetConfRollCallList_ParticipantInfo();

  CmdMCSetConfRollCallList_ParticipantInfo(const CmdMCSetConfRollCallList_ParticipantInfo& from);

  inline CmdMCSetConfRollCallList_ParticipantInfo& operator=(const CmdMCSetConfRollCallList_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList_ParticipantInfo& default_instance();

  void Swap(CmdMCSetConfRollCallList_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList_ParticipantInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallList_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList_RollCallInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList_RollCallInfo();
  virtual ~CmdMCSetConfRollCallList_RollCallInfo();

  CmdMCSetConfRollCallList_RollCallInfo(const CmdMCSetConfRollCallList_RollCallInfo& from);

  inline CmdMCSetConfRollCallList_RollCallInfo& operator=(const CmdMCSetConfRollCallList_RollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList_RollCallInfo& default_instance();

  void Swap(CmdMCSetConfRollCallList_RollCallInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList_RollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList_RollCallInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallList_RollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // repeated .SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList_RollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallList : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallList();
  virtual ~CmdMCSetConfRollCallList();

  CmdMCSetConfRollCallList(const CmdMCSetConfRollCallList& from);

  inline CmdMCSetConfRollCallList& operator=(const CmdMCSetConfRollCallList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallList& default_instance();

  void Swap(CmdMCSetConfRollCallList* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallList& from);
  void MergeFrom(const CmdMCSetConfRollCallList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCSetConfRollCallList_IPPORT IPPORT;
  typedef CmdMCSetConfRollCallList_AddrInfo AddrInfo;
  typedef CmdMCSetConfRollCallList_DomainInfo DomainInfo;
  typedef CmdMCSetConfRollCallList_ParticipantInfo ParticipantInfo;
  typedef CmdMCSetConfRollCallList_RollCallInfo RollCallInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 optype = 4;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 4;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // optional .SRMsgs.CmdMCSetConfRollCallList.RollCallInfo rollcalllist = 5;
  inline bool has_rollcalllist() const;
  inline void clear_rollcalllist();
  static const int kRollcalllistFieldNumber = 5;
  inline const ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo& rollcalllist() const;
  inline ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* mutable_rollcalllist();
  inline ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* release_rollcalllist();
  inline void set_allocated_rollcalllist(::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* rollcalllist);

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCSetConfRollCallList.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCSetConfRollCallList.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallList)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_rollcalllist();
  inline void clear_has_rollcalllist();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* rollcalllist_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo > domains_;
  ::google::protobuf::uint32 optype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallList* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateParticipantsOrder_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCUpdateParticipantsOrder_IPPORT();
  virtual ~CmdMCUpdateParticipantsOrder_IPPORT();

  CmdMCUpdateParticipantsOrder_IPPORT(const CmdMCUpdateParticipantsOrder_IPPORT& from);

  inline CmdMCUpdateParticipantsOrder_IPPORT& operator=(const CmdMCUpdateParticipantsOrder_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateParticipantsOrder_IPPORT& default_instance();

  void Swap(CmdMCUpdateParticipantsOrder_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateParticipantsOrder_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateParticipantsOrder_IPPORT& from);
  void MergeFrom(const CmdMCUpdateParticipantsOrder_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateParticipantsOrder_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateParticipantsOrder_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateParticipantsOrder_AddrInfo();
  virtual ~CmdMCUpdateParticipantsOrder_AddrInfo();

  CmdMCUpdateParticipantsOrder_AddrInfo(const CmdMCUpdateParticipantsOrder_AddrInfo& from);

  inline CmdMCUpdateParticipantsOrder_AddrInfo& operator=(const CmdMCUpdateParticipantsOrder_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateParticipantsOrder_AddrInfo& default_instance();

  void Swap(CmdMCUpdateParticipantsOrder_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateParticipantsOrder_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateParticipantsOrder_AddrInfo& from);
  void MergeFrom(const CmdMCUpdateParticipantsOrder_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateParticipantsOrder_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateParticipantsOrder_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateParticipantsOrder_DomainInfo();
  virtual ~CmdMCUpdateParticipantsOrder_DomainInfo();

  CmdMCUpdateParticipantsOrder_DomainInfo(const CmdMCUpdateParticipantsOrder_DomainInfo& from);

  inline CmdMCUpdateParticipantsOrder_DomainInfo& operator=(const CmdMCUpdateParticipantsOrder_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateParticipantsOrder_DomainInfo& default_instance();

  void Swap(CmdMCUpdateParticipantsOrder_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateParticipantsOrder_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateParticipantsOrder_DomainInfo& from);
  void MergeFrom(const CmdMCUpdateParticipantsOrder_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateParticipantsOrder_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateParticipantsOrder_ParticipantInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateParticipantsOrder_ParticipantInfo();
  virtual ~CmdMCUpdateParticipantsOrder_ParticipantInfo();

  CmdMCUpdateParticipantsOrder_ParticipantInfo(const CmdMCUpdateParticipantsOrder_ParticipantInfo& from);

  inline CmdMCUpdateParticipantsOrder_ParticipantInfo& operator=(const CmdMCUpdateParticipantsOrder_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateParticipantsOrder_ParticipantInfo& default_instance();

  void Swap(CmdMCUpdateParticipantsOrder_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateParticipantsOrder_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateParticipantsOrder_ParticipantInfo& from);
  void MergeFrom(const CmdMCUpdateParticipantsOrder_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional uint32 orderno = 2;
  inline bool has_orderno() const;
  inline void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  inline ::google::protobuf::uint32 orderno() const;
  inline void set_orderno(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_orderno();
  inline void clear_has_orderno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 psuid_;
  ::google::protobuf::uint32 orderno_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateParticipantsOrder_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateParticipantsOrder : public ::google::protobuf::Message {
 public:
  CmdMCUpdateParticipantsOrder();
  virtual ~CmdMCUpdateParticipantsOrder();

  CmdMCUpdateParticipantsOrder(const CmdMCUpdateParticipantsOrder& from);

  inline CmdMCUpdateParticipantsOrder& operator=(const CmdMCUpdateParticipantsOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateParticipantsOrder& default_instance();

  void Swap(CmdMCUpdateParticipantsOrder* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateParticipantsOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateParticipantsOrder& from);
  void MergeFrom(const CmdMCUpdateParticipantsOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCUpdateParticipantsOrder_IPPORT IPPORT;
  typedef CmdMCUpdateParticipantsOrder_AddrInfo AddrInfo;
  typedef CmdMCUpdateParticipantsOrder_DomainInfo DomainInfo;
  typedef CmdMCUpdateParticipantsOrder_ParticipantInfo ParticipantInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo participants = 4;
  inline int participants_size() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 4;
  inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo& participants(int index) const;
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo* mutable_participants(int index);
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo* add_participants();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo >&
      participants() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo >*
      mutable_participants();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateParticipantsOrder)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo > participants_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateParticipantsOrder* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallState_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallState_IPPORT();
  virtual ~CmdMCSetConfRollCallState_IPPORT();

  CmdMCSetConfRollCallState_IPPORT(const CmdMCSetConfRollCallState_IPPORT& from);

  inline CmdMCSetConfRollCallState_IPPORT& operator=(const CmdMCSetConfRollCallState_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallState_IPPORT& default_instance();

  void Swap(CmdMCSetConfRollCallState_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallState_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallState_IPPORT& from);
  void MergeFrom(const CmdMCSetConfRollCallState_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallState.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallState_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallState_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallState_AddrInfo();
  virtual ~CmdMCSetConfRollCallState_AddrInfo();

  CmdMCSetConfRollCallState_AddrInfo(const CmdMCSetConfRollCallState_AddrInfo& from);

  inline CmdMCSetConfRollCallState_AddrInfo& operator=(const CmdMCSetConfRollCallState_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallState_AddrInfo& default_instance();

  void Swap(CmdMCSetConfRollCallState_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallState_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallState_AddrInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallState_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCSetConfRollCallState.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCSetConfRollCallState_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallState_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallState_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallState.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallState_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallState_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallState_DomainInfo();
  virtual ~CmdMCSetConfRollCallState_DomainInfo();

  CmdMCSetConfRollCallState_DomainInfo(const CmdMCSetConfRollCallState_DomainInfo& from);

  inline CmdMCSetConfRollCallState_DomainInfo& operator=(const CmdMCSetConfRollCallState_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallState_DomainInfo& default_instance();

  void Swap(CmdMCSetConfRollCallState_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallState_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallState_DomainInfo& from);
  void MergeFrom(const CmdMCSetConfRollCallState_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallState.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallState_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetConfRollCallState : public ::google::protobuf::Message {
 public:
  CmdMCSetConfRollCallState();
  virtual ~CmdMCSetConfRollCallState();

  CmdMCSetConfRollCallState(const CmdMCSetConfRollCallState& from);

  inline CmdMCSetConfRollCallState& operator=(const CmdMCSetConfRollCallState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetConfRollCallState& default_instance();

  void Swap(CmdMCSetConfRollCallState* other);

  // implements Message ----------------------------------------------

  CmdMCSetConfRollCallState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetConfRollCallState& from);
  void MergeFrom(const CmdMCSetConfRollCallState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCSetConfRollCallState_IPPORT IPPORT;
  typedef CmdMCSetConfRollCallState_AddrInfo AddrInfo;
  typedef CmdMCSetConfRollCallState_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional bool isrollcall = 4;
  inline bool has_isrollcall() const;
  inline void clear_isrollcall();
  static const int kIsrollcallFieldNumber = 4;
  inline bool isrollcall() const;
  inline void set_isrollcall(bool value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCSetConfRollCallState.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCSetConfRollCallState.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetConfRollCallState)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_isrollcall();
  inline void clear_has_isrollcall();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo > domains_;
  bool isrollcall_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetConfRollCallState* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTer_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTer_IPPORT();
  virtual ~CmdMCRollCallTer_IPPORT();

  CmdMCRollCallTer_IPPORT(const CmdMCRollCallTer_IPPORT& from);

  inline CmdMCRollCallTer_IPPORT& operator=(const CmdMCRollCallTer_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTer_IPPORT& default_instance();

  void Swap(CmdMCRollCallTer_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTer_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTer_IPPORT& from);
  void MergeFrom(const CmdMCRollCallTer_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTer.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTer_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTer_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTer_AddrInfo();
  virtual ~CmdMCRollCallTer_AddrInfo();

  CmdMCRollCallTer_AddrInfo(const CmdMCRollCallTer_AddrInfo& from);

  inline CmdMCRollCallTer_AddrInfo& operator=(const CmdMCRollCallTer_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTer_AddrInfo& default_instance();

  void Swap(CmdMCRollCallTer_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTer_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTer_AddrInfo& from);
  void MergeFrom(const CmdMCRollCallTer_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCRollCallTer.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCRollCallTer_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCRollCallTer_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCRollCallTer_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTer.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTer_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTer_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTer_DomainInfo();
  virtual ~CmdMCRollCallTer_DomainInfo();

  CmdMCRollCallTer_DomainInfo(const CmdMCRollCallTer_DomainInfo& from);

  inline CmdMCRollCallTer_DomainInfo& operator=(const CmdMCRollCallTer_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTer_DomainInfo& default_instance();

  void Swap(CmdMCRollCallTer_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTer_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTer_DomainInfo& from);
  void MergeFrom(const CmdMCRollCallTer_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTer.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTer_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTer_RollCallTerInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTer_RollCallTerInfo();
  virtual ~CmdMCRollCallTer_RollCallTerInfo();

  CmdMCRollCallTer_RollCallTerInfo(const CmdMCRollCallTer_RollCallTerInfo& from);

  inline CmdMCRollCallTer_RollCallTerInfo& operator=(const CmdMCRollCallTer_RollCallTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTer_RollCallTerInfo& default_instance();

  void Swap(CmdMCRollCallTer_RollCallTerInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTer_RollCallTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTer_RollCallTerInfo& from);
  void MergeFrom(const CmdMCRollCallTer_RollCallTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // optional uint32 psuid = 3;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 3;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTer.RollCallTerInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTer_RollCallTerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTer : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTer();
  virtual ~CmdMCRollCallTer();

  CmdMCRollCallTer(const CmdMCRollCallTer& from);

  inline CmdMCRollCallTer& operator=(const CmdMCRollCallTer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTer& default_instance();

  void Swap(CmdMCRollCallTer* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTer& from);
  void MergeFrom(const CmdMCRollCallTer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCRollCallTer_IPPORT IPPORT;
  typedef CmdMCRollCallTer_AddrInfo AddrInfo;
  typedef CmdMCRollCallTer_DomainInfo DomainInfo;
  typedef CmdMCRollCallTer_RollCallTerInfo RollCallTerInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional .SRMsgs.CmdMCRollCallTer.RollCallTerInfo currcterinfo = 4;
  inline bool has_currcterinfo() const;
  inline void clear_currcterinfo();
  static const int kCurrcterinfoFieldNumber = 4;
  inline const ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo& currcterinfo() const;
  inline ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* mutable_currcterinfo();
  inline ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* release_currcterinfo();
  inline void set_allocated_currcterinfo(::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* currcterinfo);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCRollCallTer.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCRollCallTer_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCRollCallTer_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCRollCallTer_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCRollCallTer.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCRollCallTer_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCRollCallTer_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCRollCallTer_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTer)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_currcterinfo();
  inline void clear_has_currcterinfo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* currcterinfo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTer* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTerResult_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTerResult_IPPORT();
  virtual ~CmdMCRollCallTerResult_IPPORT();

  CmdMCRollCallTerResult_IPPORT(const CmdMCRollCallTerResult_IPPORT& from);

  inline CmdMCRollCallTerResult_IPPORT& operator=(const CmdMCRollCallTerResult_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTerResult_IPPORT& default_instance();

  void Swap(CmdMCRollCallTerResult_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTerResult_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTerResult_IPPORT& from);
  void MergeFrom(const CmdMCRollCallTerResult_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTerResult.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTerResult_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTerResult_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTerResult_AddrInfo();
  virtual ~CmdMCRollCallTerResult_AddrInfo();

  CmdMCRollCallTerResult_AddrInfo(const CmdMCRollCallTerResult_AddrInfo& from);

  inline CmdMCRollCallTerResult_AddrInfo& operator=(const CmdMCRollCallTerResult_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTerResult_AddrInfo& default_instance();

  void Swap(CmdMCRollCallTerResult_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTerResult_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTerResult_AddrInfo& from);
  void MergeFrom(const CmdMCRollCallTerResult_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCRollCallTerResult.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCRollCallTerResult_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCRollCallTerResult_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCRollCallTerResult_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTerResult.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTerResult_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTerResult_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTerResult_DomainInfo();
  virtual ~CmdMCRollCallTerResult_DomainInfo();

  CmdMCRollCallTerResult_DomainInfo(const CmdMCRollCallTerResult_DomainInfo& from);

  inline CmdMCRollCallTerResult_DomainInfo& operator=(const CmdMCRollCallTerResult_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTerResult_DomainInfo& default_instance();

  void Swap(CmdMCRollCallTerResult_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTerResult_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTerResult_DomainInfo& from);
  void MergeFrom(const CmdMCRollCallTerResult_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTerResult.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTerResult_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTerResult_RollCallTerInfo : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTerResult_RollCallTerInfo();
  virtual ~CmdMCRollCallTerResult_RollCallTerInfo();

  CmdMCRollCallTerResult_RollCallTerInfo(const CmdMCRollCallTerResult_RollCallTerInfo& from);

  inline CmdMCRollCallTerResult_RollCallTerInfo& operator=(const CmdMCRollCallTerResult_RollCallTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTerResult_RollCallTerInfo& default_instance();

  void Swap(CmdMCRollCallTerResult_RollCallTerInfo* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTerResult_RollCallTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTerResult_RollCallTerInfo& from);
  void MergeFrom(const CmdMCRollCallTerResult_RollCallTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // optional uint32 psuid = 3;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 3;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTerResult_RollCallTerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCRollCallTerResult : public ::google::protobuf::Message {
 public:
  CmdMCRollCallTerResult();
  virtual ~CmdMCRollCallTerResult();

  CmdMCRollCallTerResult(const CmdMCRollCallTerResult& from);

  inline CmdMCRollCallTerResult& operator=(const CmdMCRollCallTerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCRollCallTerResult& default_instance();

  void Swap(CmdMCRollCallTerResult* other);

  // implements Message ----------------------------------------------

  CmdMCRollCallTerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCRollCallTerResult& from);
  void MergeFrom(const CmdMCRollCallTerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCRollCallTerResult_IPPORT IPPORT;
  typedef CmdMCRollCallTerResult_AddrInfo AddrInfo;
  typedef CmdMCRollCallTerResult_DomainInfo DomainInfo;
  typedef CmdMCRollCallTerResult_RollCallTerInfo RollCallTerInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional .SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo rcterinfo = 4;
  inline bool has_rcterinfo() const;
  inline void clear_rcterinfo();
  static const int kRcterinfoFieldNumber = 4;
  inline const ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo& rcterinfo() const;
  inline ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* mutable_rcterinfo();
  inline ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* release_rcterinfo();
  inline void set_allocated_rcterinfo(::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* rcterinfo);

  // optional bool ispass = 5;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIspassFieldNumber = 5;
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // optional string domainname = 6;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 6;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCRollCallTerResult.AddrInfo svraddrs = 7;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCRollCallTerResult_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCRollCallTerResult_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCRollCallTerResult_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCRollCallTerResult.DomainInfo domains = 8;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 8;
  inline const ::SRMsgs::CmdMCRollCallTerResult_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCRollCallTerResult_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCRollCallTerResult_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCRollCallTerResult)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_rcterinfo();
  inline void clear_has_rcterinfo();
  inline void set_has_ispass();
  inline void clear_has_ispass();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* rcterinfo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_DomainInfo > domains_;
  bool ispass_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCRollCallTerResult* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetAssistChairman_IPPORT : public ::google::protobuf::Message {
 public:
  CmdSetAssistChairman_IPPORT();
  virtual ~CmdSetAssistChairman_IPPORT();

  CmdSetAssistChairman_IPPORT(const CmdSetAssistChairman_IPPORT& from);

  inline CmdSetAssistChairman_IPPORT& operator=(const CmdSetAssistChairman_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetAssistChairman_IPPORT& default_instance();

  void Swap(CmdSetAssistChairman_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdSetAssistChairman_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetAssistChairman_IPPORT& from);
  void MergeFrom(const CmdSetAssistChairman_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetAssistChairman.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetAssistChairman_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetAssistChairman_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdSetAssistChairman_AddrInfo();
  virtual ~CmdSetAssistChairman_AddrInfo();

  CmdSetAssistChairman_AddrInfo(const CmdSetAssistChairman_AddrInfo& from);

  inline CmdSetAssistChairman_AddrInfo& operator=(const CmdSetAssistChairman_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetAssistChairman_AddrInfo& default_instance();

  void Swap(CmdSetAssistChairman_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdSetAssistChairman_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetAssistChairman_AddrInfo& from);
  void MergeFrom(const CmdSetAssistChairman_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdSetAssistChairman.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdSetAssistChairman_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdSetAssistChairman_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdSetAssistChairman_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetAssistChairman.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetAssistChairman_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetAssistChairman_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdSetAssistChairman_DomainInfo();
  virtual ~CmdSetAssistChairman_DomainInfo();

  CmdSetAssistChairman_DomainInfo(const CmdSetAssistChairman_DomainInfo& from);

  inline CmdSetAssistChairman_DomainInfo& operator=(const CmdSetAssistChairman_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetAssistChairman_DomainInfo& default_instance();

  void Swap(CmdSetAssistChairman_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdSetAssistChairman_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetAssistChairman_DomainInfo& from);
  void MergeFrom(const CmdSetAssistChairman_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetAssistChairman.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetAssistChairman_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSetAssistChairman : public ::google::protobuf::Message {
 public:
  CmdSetAssistChairman();
  virtual ~CmdSetAssistChairman();

  CmdSetAssistChairman(const CmdSetAssistChairman& from);

  inline CmdSetAssistChairman& operator=(const CmdSetAssistChairman& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetAssistChairman& default_instance();

  void Swap(CmdSetAssistChairman* other);

  // implements Message ----------------------------------------------

  CmdSetAssistChairman* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSetAssistChairman& from);
  void MergeFrom(const CmdSetAssistChairman& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdSetAssistChairman_IPPORT IPPORT;
  typedef CmdSetAssistChairman_AddrInfo AddrInfo;
  typedef CmdSetAssistChairman_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 sponsortype = 1;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 nachterid = 4;
  inline bool has_nachterid() const;
  inline void clear_nachterid();
  static const int kNachteridFieldNumber = 4;
  inline ::google::protobuf::uint32 nachterid() const;
  inline void set_nachterid(::google::protobuf::uint32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdSetAssistChairman.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdSetAssistChairman_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdSetAssistChairman_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdSetAssistChairman_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdSetAssistChairman.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdSetAssistChairman_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdSetAssistChairman_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdSetAssistChairman_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSetAssistChairman)
 private:
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_nachterid();
  inline void clear_has_nachterid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_DomainInfo > domains_;
  ::google::protobuf::uint32 nachterid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSetAssistChairman* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerSelectAssistVideo_IPPORT : public ::google::protobuf::Message {
 public:
  CmdTerSelectAssistVideo_IPPORT();
  virtual ~CmdTerSelectAssistVideo_IPPORT();

  CmdTerSelectAssistVideo_IPPORT(const CmdTerSelectAssistVideo_IPPORT& from);

  inline CmdTerSelectAssistVideo_IPPORT& operator=(const CmdTerSelectAssistVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerSelectAssistVideo_IPPORT& default_instance();

  void Swap(CmdTerSelectAssistVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdTerSelectAssistVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerSelectAssistVideo_IPPORT& from);
  void MergeFrom(const CmdTerSelectAssistVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerSelectAssistVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerSelectAssistVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerSelectAssistVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdTerSelectAssistVideo_AddrInfo();
  virtual ~CmdTerSelectAssistVideo_AddrInfo();

  CmdTerSelectAssistVideo_AddrInfo(const CmdTerSelectAssistVideo_AddrInfo& from);

  inline CmdTerSelectAssistVideo_AddrInfo& operator=(const CmdTerSelectAssistVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerSelectAssistVideo_AddrInfo& default_instance();

  void Swap(CmdTerSelectAssistVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdTerSelectAssistVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerSelectAssistVideo_AddrInfo& from);
  void MergeFrom(const CmdTerSelectAssistVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdTerSelectAssistVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdTerSelectAssistVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdTerSelectAssistVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdTerSelectAssistVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerSelectAssistVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerSelectAssistVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerSelectAssistVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdTerSelectAssistVideo_DomainInfo();
  virtual ~CmdTerSelectAssistVideo_DomainInfo();

  CmdTerSelectAssistVideo_DomainInfo(const CmdTerSelectAssistVideo_DomainInfo& from);

  inline CmdTerSelectAssistVideo_DomainInfo& operator=(const CmdTerSelectAssistVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerSelectAssistVideo_DomainInfo& default_instance();

  void Swap(CmdTerSelectAssistVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdTerSelectAssistVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerSelectAssistVideo_DomainInfo& from);
  void MergeFrom(const CmdTerSelectAssistVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerSelectAssistVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerSelectAssistVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdTerSelectAssistVideo : public ::google::protobuf::Message {
 public:
  CmdTerSelectAssistVideo();
  virtual ~CmdTerSelectAssistVideo();

  CmdTerSelectAssistVideo(const CmdTerSelectAssistVideo& from);

  inline CmdTerSelectAssistVideo& operator=(const CmdTerSelectAssistVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdTerSelectAssistVideo& default_instance();

  void Swap(CmdTerSelectAssistVideo* other);

  // implements Message ----------------------------------------------

  CmdTerSelectAssistVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdTerSelectAssistVideo& from);
  void MergeFrom(const CmdTerSelectAssistVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdTerSelectAssistVideo_IPPORT IPPORT;
  typedef CmdTerSelectAssistVideo_AddrInfo AddrInfo;
  typedef CmdTerSelectAssistVideo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 recvfmt = 3;
  inline bool has_recvfmt() const;
  inline void clear_recvfmt();
  static const int kRecvfmtFieldNumber = 3;
  inline ::google::protobuf::uint32 recvfmt() const;
  inline void set_recvfmt(::google::protobuf::uint32 value);

  // optional uint32 recvsize = 4;
  inline bool has_recvsize() const;
  inline void clear_recvsize();
  static const int kRecvsizeFieldNumber = 4;
  inline ::google::protobuf::uint32 recvsize() const;
  inline void set_recvsize(::google::protobuf::uint32 value);

  // optional uint32 selterid = 5;
  inline bool has_selterid() const;
  inline void clear_selterid();
  static const int kSelteridFieldNumber = 5;
  inline ::google::protobuf::uint32 selterid() const;
  inline void set_selterid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 6;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 6;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdTerSelectAssistVideo.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdTerSelectAssistVideo.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdTerSelectAssistVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_recvfmt();
  inline void clear_has_recvfmt();
  inline void set_has_recvsize();
  inline void clear_has_recvsize();
  inline void set_has_selterid();
  inline void clear_has_selterid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 recvfmt_;
  ::google::protobuf::uint32 recvsize_;
  ::google::protobuf::uint32 selterid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo > domains_;
  ::google::protobuf::uint32 screenid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdTerSelectAssistVideo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSendAssistVideolabel_IPPORT : public ::google::protobuf::Message {
 public:
  CmdSendAssistVideolabel_IPPORT();
  virtual ~CmdSendAssistVideolabel_IPPORT();

  CmdSendAssistVideolabel_IPPORT(const CmdSendAssistVideolabel_IPPORT& from);

  inline CmdSendAssistVideolabel_IPPORT& operator=(const CmdSendAssistVideolabel_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSendAssistVideolabel_IPPORT& default_instance();

  void Swap(CmdSendAssistVideolabel_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdSendAssistVideolabel_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSendAssistVideolabel_IPPORT& from);
  void MergeFrom(const CmdSendAssistVideolabel_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSendAssistVideolabel.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSendAssistVideolabel_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdSendAssistVideolabel_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdSendAssistVideolabel_AddrInfo();
  virtual ~CmdSendAssistVideolabel_AddrInfo();

  CmdSendAssistVideolabel_AddrInfo(const CmdSendAssistVideolabel_AddrInfo& from);

  inline CmdSendAssistVideolabel_AddrInfo& operator=(const CmdSendAssistVideolabel_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSendAssistVideolabel_AddrInfo& default_instance();

  void Swap(CmdSendAssistVideolabel_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdSendAssistVideolabel_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSendAssistVideolabel_AddrInfo& from);
  void MergeFrom(const CmdSendAssistVideolabel_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdSendAssistVideolabel.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdSendAssistVideolabel_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdSendAssistVideolabel_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdSendAssistVideolabel_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSendAssistVideolabel.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSendAssistVideolabel_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSendAssistVideolabel_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdSendAssistVideolabel_DomainInfo();
  virtual ~CmdSendAssistVideolabel_DomainInfo();

  CmdSendAssistVideolabel_DomainInfo(const CmdSendAssistVideolabel_DomainInfo& from);

  inline CmdSendAssistVideolabel_DomainInfo& operator=(const CmdSendAssistVideolabel_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSendAssistVideolabel_DomainInfo& default_instance();

  void Swap(CmdSendAssistVideolabel_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdSendAssistVideolabel_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSendAssistVideolabel_DomainInfo& from);
  void MergeFrom(const CmdSendAssistVideolabel_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSendAssistVideolabel.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSendAssistVideolabel_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdSendAssistVideolabel : public ::google::protobuf::Message {
 public:
  CmdSendAssistVideolabel();
  virtual ~CmdSendAssistVideolabel();

  CmdSendAssistVideolabel(const CmdSendAssistVideolabel& from);

  inline CmdSendAssistVideolabel& operator=(const CmdSendAssistVideolabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSendAssistVideolabel& default_instance();

  void Swap(CmdSendAssistVideolabel* other);

  // implements Message ----------------------------------------------

  CmdSendAssistVideolabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdSendAssistVideolabel& from);
  void MergeFrom(const CmdSendAssistVideolabel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdSendAssistVideolabel_IPPORT IPPORT;
  typedef CmdSendAssistVideolabel_AddrInfo AddrInfo;
  typedef CmdSendAssistVideolabel_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 operatetype = 3;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperatetypeFieldNumber = 3;
  inline ::google::protobuf::uint32 operatetype() const;
  inline void set_operatetype(::google::protobuf::uint32 value);

  // optional uint32 labletype = 4;
  inline bool has_labletype() const;
  inline void clear_labletype();
  static const int kLabletypeFieldNumber = 4;
  inline ::google::protobuf::uint32 labletype() const;
  inline void set_labletype(::google::protobuf::uint32 value);

  // optional uint32 lablesize = 5;
  inline bool has_lablesize() const;
  inline void clear_lablesize();
  static const int kLablesizeFieldNumber = 5;
  inline ::google::protobuf::uint32 lablesize() const;
  inline void set_lablesize(::google::protobuf::uint32 value);

  // optional uint32 lablecolor = 6;
  inline bool has_lablecolor() const;
  inline void clear_lablecolor();
  static const int kLablecolorFieldNumber = 6;
  inline ::google::protobuf::uint32 lablecolor() const;
  inline void set_lablecolor(::google::protobuf::uint32 value);

  // optional uint32 linetype = 7;
  inline bool has_linetype() const;
  inline void clear_linetype();
  static const int kLinetypeFieldNumber = 7;
  inline ::google::protobuf::uint32 linetype() const;
  inline void set_linetype(::google::protobuf::uint32 value);

  // optional uint32 leftuppoints_x = 8;
  inline bool has_leftuppoints_x() const;
  inline void clear_leftuppoints_x();
  static const int kLeftuppointsXFieldNumber = 8;
  inline ::google::protobuf::uint32 leftuppoints_x() const;
  inline void set_leftuppoints_x(::google::protobuf::uint32 value);

  // optional uint32 leftuppoints_y = 9;
  inline bool has_leftuppoints_y() const;
  inline void clear_leftuppoints_y();
  static const int kLeftuppointsYFieldNumber = 9;
  inline ::google::protobuf::uint32 leftuppoints_y() const;
  inline void set_leftuppoints_y(::google::protobuf::uint32 value);

  // optional uint32 rightdownpoints_x = 10;
  inline bool has_rightdownpoints_x() const;
  inline void clear_rightdownpoints_x();
  static const int kRightdownpointsXFieldNumber = 10;
  inline ::google::protobuf::uint32 rightdownpoints_x() const;
  inline void set_rightdownpoints_x(::google::protobuf::uint32 value);

  // optional uint32 rightdownpoints_y = 11;
  inline bool has_rightdownpoints_y() const;
  inline void clear_rightdownpoints_y();
  static const int kRightdownpointsYFieldNumber = 11;
  inline ::google::protobuf::uint32 rightdownpoints_y() const;
  inline void set_rightdownpoints_y(::google::protobuf::uint32 value);

  // optional uint32 resolution_x = 12;
  inline bool has_resolution_x() const;
  inline void clear_resolution_x();
  static const int kResolutionXFieldNumber = 12;
  inline ::google::protobuf::uint32 resolution_x() const;
  inline void set_resolution_x(::google::protobuf::uint32 value);

  // optional uint32 resolution_y = 13;
  inline bool has_resolution_y() const;
  inline void clear_resolution_y();
  static const int kResolutionYFieldNumber = 13;
  inline ::google::protobuf::uint32 resolution_y() const;
  inline void set_resolution_y(::google::protobuf::uint32 value);

  // optional string domainname = 14;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 14;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdSendAssistVideolabel.AddrInfo svraddrs = 15;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 15;
  inline const ::SRMsgs::CmdSendAssistVideolabel_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdSendAssistVideolabel_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdSendAssistVideolabel_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdSendAssistVideolabel.DomainInfo domains = 16;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 16;
  inline const ::SRMsgs::CmdSendAssistVideolabel_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdSendAssistVideolabel_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdSendAssistVideolabel_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdSendAssistVideolabel)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_labletype();
  inline void clear_has_labletype();
  inline void set_has_lablesize();
  inline void clear_has_lablesize();
  inline void set_has_lablecolor();
  inline void clear_has_lablecolor();
  inline void set_has_linetype();
  inline void clear_has_linetype();
  inline void set_has_leftuppoints_x();
  inline void clear_has_leftuppoints_x();
  inline void set_has_leftuppoints_y();
  inline void clear_has_leftuppoints_y();
  inline void set_has_rightdownpoints_x();
  inline void clear_has_rightdownpoints_x();
  inline void set_has_rightdownpoints_y();
  inline void clear_has_rightdownpoints_y();
  inline void set_has_resolution_x();
  inline void clear_has_resolution_x();
  inline void set_has_resolution_y();
  inline void clear_has_resolution_y();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 operatetype_;
  ::google::protobuf::uint32 labletype_;
  ::google::protobuf::uint32 lablesize_;
  ::google::protobuf::uint32 lablecolor_;
  ::google::protobuf::uint32 linetype_;
  ::google::protobuf::uint32 leftuppoints_x_;
  ::google::protobuf::uint32 leftuppoints_y_;
  ::google::protobuf::uint32 rightdownpoints_x_;
  ::google::protobuf::uint32 rightdownpoints_y_;
  ::google::protobuf::uint32 resolution_x_;
  ::google::protobuf::uint32 resolution_y_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdSendAssistVideolabel* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetAnaly_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCSetAnaly_IPPORT();
  virtual ~CmdMCSetAnaly_IPPORT();

  CmdMCSetAnaly_IPPORT(const CmdMCSetAnaly_IPPORT& from);

  inline CmdMCSetAnaly_IPPORT& operator=(const CmdMCSetAnaly_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetAnaly_IPPORT& default_instance();

  void Swap(CmdMCSetAnaly_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCSetAnaly_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetAnaly_IPPORT& from);
  void MergeFrom(const CmdMCSetAnaly_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetAnaly.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetAnaly_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetAnaly_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetAnaly_AddrInfo();
  virtual ~CmdMCSetAnaly_AddrInfo();

  CmdMCSetAnaly_AddrInfo(const CmdMCSetAnaly_AddrInfo& from);

  inline CmdMCSetAnaly_AddrInfo& operator=(const CmdMCSetAnaly_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetAnaly_AddrInfo& default_instance();

  void Swap(CmdMCSetAnaly_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetAnaly_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetAnaly_AddrInfo& from);
  void MergeFrom(const CmdMCSetAnaly_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCSetAnaly.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCSetAnaly_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCSetAnaly_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCSetAnaly_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetAnaly.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetAnaly_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetAnaly_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCSetAnaly_DomainInfo();
  virtual ~CmdMCSetAnaly_DomainInfo();

  CmdMCSetAnaly_DomainInfo(const CmdMCSetAnaly_DomainInfo& from);

  inline CmdMCSetAnaly_DomainInfo& operator=(const CmdMCSetAnaly_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetAnaly_DomainInfo& default_instance();

  void Swap(CmdMCSetAnaly_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCSetAnaly_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetAnaly_DomainInfo& from);
  void MergeFrom(const CmdMCSetAnaly_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetAnaly.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetAnaly_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCSetAnaly : public ::google::protobuf::Message {
 public:
  CmdMCSetAnaly();
  virtual ~CmdMCSetAnaly();

  CmdMCSetAnaly(const CmdMCSetAnaly& from);

  inline CmdMCSetAnaly& operator=(const CmdMCSetAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCSetAnaly& default_instance();

  void Swap(CmdMCSetAnaly* other);

  // implements Message ----------------------------------------------

  CmdMCSetAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCSetAnaly& from);
  void MergeFrom(const CmdMCSetAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCSetAnaly_IPPORT IPPORT;
  typedef CmdMCSetAnaly_AddrInfo AddrInfo;
  typedef CmdMCSetAnaly_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional bool isstart = 4;
  inline bool has_isstart() const;
  inline void clear_isstart();
  static const int kIsstartFieldNumber = 4;
  inline bool isstart() const;
  inline void set_isstart(bool value);

  // optional uint32 analymode = 5;
  inline bool has_analymode() const;
  inline void clear_analymode();
  static const int kAnalymodeFieldNumber = 5;
  inline ::google::protobuf::uint32 analymode() const;
  inline void set_analymode(::google::protobuf::uint32 value);

  // optional string domainname = 6;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 6;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCSetAnaly.AddrInfo svraddrs = 7;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCSetAnaly_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCSetAnaly_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCSetAnaly_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCSetAnaly.DomainInfo domains = 8;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 8;
  inline const ::SRMsgs::CmdMCSetAnaly_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCSetAnaly_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCSetAnaly_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCSetAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_isstart();
  inline void clear_has_isstart();
  inline void set_has_analymode();
  inline void clear_has_analymode();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  bool isstart_;
  ::google::protobuf::uint32 analymode_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCSetAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStartAnaly_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCStartAnaly_IPPORT();
  virtual ~CmdMCStartAnaly_IPPORT();

  CmdMCStartAnaly_IPPORT(const CmdMCStartAnaly_IPPORT& from);

  inline CmdMCStartAnaly_IPPORT& operator=(const CmdMCStartAnaly_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStartAnaly_IPPORT& default_instance();

  void Swap(CmdMCStartAnaly_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCStartAnaly_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStartAnaly_IPPORT& from);
  void MergeFrom(const CmdMCStartAnaly_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStartAnaly.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStartAnaly_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStartAnaly_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCStartAnaly_AddrInfo();
  virtual ~CmdMCStartAnaly_AddrInfo();

  CmdMCStartAnaly_AddrInfo(const CmdMCStartAnaly_AddrInfo& from);

  inline CmdMCStartAnaly_AddrInfo& operator=(const CmdMCStartAnaly_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStartAnaly_AddrInfo& default_instance();

  void Swap(CmdMCStartAnaly_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStartAnaly_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStartAnaly_AddrInfo& from);
  void MergeFrom(const CmdMCStartAnaly_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCStartAnaly.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCStartAnaly_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCStartAnaly_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCStartAnaly_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStartAnaly.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStartAnaly_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStartAnaly_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCStartAnaly_DomainInfo();
  virtual ~CmdMCStartAnaly_DomainInfo();

  CmdMCStartAnaly_DomainInfo(const CmdMCStartAnaly_DomainInfo& from);

  inline CmdMCStartAnaly_DomainInfo& operator=(const CmdMCStartAnaly_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStartAnaly_DomainInfo& default_instance();

  void Swap(CmdMCStartAnaly_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStartAnaly_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStartAnaly_DomainInfo& from);
  void MergeFrom(const CmdMCStartAnaly_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStartAnaly.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStartAnaly_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStartAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdMCStartAnaly_AnalyInfo();
  virtual ~CmdMCStartAnaly_AnalyInfo();

  CmdMCStartAnaly_AnalyInfo(const CmdMCStartAnaly_AnalyInfo& from);

  inline CmdMCStartAnaly_AnalyInfo& operator=(const CmdMCStartAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStartAnaly_AnalyInfo& default_instance();

  void Swap(CmdMCStartAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStartAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStartAnaly_AnalyInfo& from);
  void MergeFrom(const CmdMCStartAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // repeated uint32 userids = 3;
  inline int userids_size() const;
  inline void clear_userids();
  static const int kUseridsFieldNumber = 3;
  inline ::google::protobuf::uint32 userids(int index) const;
  inline void set_userids(int index, ::google::protobuf::uint32 value);
  inline void add_userids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      userids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_userids();

  // optional bool isdispmnum = 4;
  inline bool has_isdispmnum() const;
  inline void clear_isdispmnum();
  static const int kIsdispmnumFieldNumber = 4;
  inline bool isdispmnum() const;
  inline void set_isdispmnum(bool value);

  // optional bool isdispmname = 5;
  inline bool has_isdispmname() const;
  inline void clear_isdispmname();
  static const int kIsdispmnameFieldNumber = 5;
  inline bool isdispmname() const;
  inline void set_isdispmname(bool value);

  // optional uint32 vaschannelid = 6;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 6;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStartAnaly.AnalyInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_isdispmnum();
  inline void clear_has_isdispmnum();
  inline void set_has_isdispmname();
  inline void clear_has_isdispmname();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > userids_;
  bool isdispmnum_;
  bool isdispmname_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStartAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStartAnaly : public ::google::protobuf::Message {
 public:
  CmdMCStartAnaly();
  virtual ~CmdMCStartAnaly();

  CmdMCStartAnaly(const CmdMCStartAnaly& from);

  inline CmdMCStartAnaly& operator=(const CmdMCStartAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStartAnaly& default_instance();

  void Swap(CmdMCStartAnaly* other);

  // implements Message ----------------------------------------------

  CmdMCStartAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStartAnaly& from);
  void MergeFrom(const CmdMCStartAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCStartAnaly_IPPORT IPPORT;
  typedef CmdMCStartAnaly_AddrInfo AddrInfo;
  typedef CmdMCStartAnaly_DomainInfo DomainInfo;
  typedef CmdMCStartAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCStartAnaly.AnalyInfo startanalyinfos = 4;
  inline int startanalyinfos_size() const;
  inline void clear_startanalyinfos();
  static const int kStartanalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdMCStartAnaly_AnalyInfo& startanalyinfos(int index) const;
  inline ::SRMsgs::CmdMCStartAnaly_AnalyInfo* mutable_startanalyinfos(int index);
  inline ::SRMsgs::CmdMCStartAnaly_AnalyInfo* add_startanalyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AnalyInfo >&
      startanalyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AnalyInfo >*
      mutable_startanalyinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCStartAnaly.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCStartAnaly_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCStartAnaly_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCStartAnaly_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCStartAnaly.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCStartAnaly_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCStartAnaly_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCStartAnaly_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStartAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AnalyInfo > startanalyinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStartAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStopAnaly_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCStopAnaly_IPPORT();
  virtual ~CmdMCStopAnaly_IPPORT();

  CmdMCStopAnaly_IPPORT(const CmdMCStopAnaly_IPPORT& from);

  inline CmdMCStopAnaly_IPPORT& operator=(const CmdMCStopAnaly_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStopAnaly_IPPORT& default_instance();

  void Swap(CmdMCStopAnaly_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCStopAnaly_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStopAnaly_IPPORT& from);
  void MergeFrom(const CmdMCStopAnaly_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStopAnaly.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStopAnaly_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStopAnaly_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCStopAnaly_AddrInfo();
  virtual ~CmdMCStopAnaly_AddrInfo();

  CmdMCStopAnaly_AddrInfo(const CmdMCStopAnaly_AddrInfo& from);

  inline CmdMCStopAnaly_AddrInfo& operator=(const CmdMCStopAnaly_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStopAnaly_AddrInfo& default_instance();

  void Swap(CmdMCStopAnaly_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStopAnaly_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStopAnaly_AddrInfo& from);
  void MergeFrom(const CmdMCStopAnaly_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCStopAnaly.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCStopAnaly_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCStopAnaly_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCStopAnaly_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStopAnaly.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStopAnaly_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStopAnaly_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCStopAnaly_DomainInfo();
  virtual ~CmdMCStopAnaly_DomainInfo();

  CmdMCStopAnaly_DomainInfo(const CmdMCStopAnaly_DomainInfo& from);

  inline CmdMCStopAnaly_DomainInfo& operator=(const CmdMCStopAnaly_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStopAnaly_DomainInfo& default_instance();

  void Swap(CmdMCStopAnaly_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStopAnaly_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStopAnaly_DomainInfo& from);
  void MergeFrom(const CmdMCStopAnaly_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStopAnaly.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStopAnaly_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStopAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdMCStopAnaly_AnalyInfo();
  virtual ~CmdMCStopAnaly_AnalyInfo();

  CmdMCStopAnaly_AnalyInfo(const CmdMCStopAnaly_AnalyInfo& from);

  inline CmdMCStopAnaly_AnalyInfo& operator=(const CmdMCStopAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStopAnaly_AnalyInfo& default_instance();

  void Swap(CmdMCStopAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdMCStopAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStopAnaly_AnalyInfo& from);
  void MergeFrom(const CmdMCStopAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStopAnaly.AnalyInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStopAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCStopAnaly : public ::google::protobuf::Message {
 public:
  CmdMCStopAnaly();
  virtual ~CmdMCStopAnaly();

  CmdMCStopAnaly(const CmdMCStopAnaly& from);

  inline CmdMCStopAnaly& operator=(const CmdMCStopAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCStopAnaly& default_instance();

  void Swap(CmdMCStopAnaly* other);

  // implements Message ----------------------------------------------

  CmdMCStopAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCStopAnaly& from);
  void MergeFrom(const CmdMCStopAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCStopAnaly_IPPORT IPPORT;
  typedef CmdMCStopAnaly_AddrInfo AddrInfo;
  typedef CmdMCStopAnaly_DomainInfo DomainInfo;
  typedef CmdMCStopAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCStopAnaly.AnalyInfo stopanalyinfos = 4;
  inline int stopanalyinfos_size() const;
  inline void clear_stopanalyinfos();
  static const int kStopanalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdMCStopAnaly_AnalyInfo& stopanalyinfos(int index) const;
  inline ::SRMsgs::CmdMCStopAnaly_AnalyInfo* mutable_stopanalyinfos(int index);
  inline ::SRMsgs::CmdMCStopAnaly_AnalyInfo* add_stopanalyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AnalyInfo >&
      stopanalyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AnalyInfo >*
      mutable_stopanalyinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCStopAnaly.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCStopAnaly_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCStopAnaly_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCStopAnaly_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCStopAnaly.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCStopAnaly_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCStopAnaly_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCStopAnaly_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCStopAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AnalyInfo > stopanalyinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCStopAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAnaly_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAnaly_IPPORT();
  virtual ~CmdMCUpdateAnaly_IPPORT();

  CmdMCUpdateAnaly_IPPORT(const CmdMCUpdateAnaly_IPPORT& from);

  inline CmdMCUpdateAnaly_IPPORT& operator=(const CmdMCUpdateAnaly_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAnaly_IPPORT& default_instance();

  void Swap(CmdMCUpdateAnaly_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAnaly_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAnaly_IPPORT& from);
  void MergeFrom(const CmdMCUpdateAnaly_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAnaly.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAnaly_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAnaly_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAnaly_AddrInfo();
  virtual ~CmdMCUpdateAnaly_AddrInfo();

  CmdMCUpdateAnaly_AddrInfo(const CmdMCUpdateAnaly_AddrInfo& from);

  inline CmdMCUpdateAnaly_AddrInfo& operator=(const CmdMCUpdateAnaly_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAnaly_AddrInfo& default_instance();

  void Swap(CmdMCUpdateAnaly_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAnaly_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAnaly_AddrInfo& from);
  void MergeFrom(const CmdMCUpdateAnaly_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateAnaly.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCUpdateAnaly_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCUpdateAnaly_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCUpdateAnaly_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAnaly.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAnaly_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAnaly_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAnaly_DomainInfo();
  virtual ~CmdMCUpdateAnaly_DomainInfo();

  CmdMCUpdateAnaly_DomainInfo(const CmdMCUpdateAnaly_DomainInfo& from);

  inline CmdMCUpdateAnaly_DomainInfo& operator=(const CmdMCUpdateAnaly_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAnaly_DomainInfo& default_instance();

  void Swap(CmdMCUpdateAnaly_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAnaly_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAnaly_DomainInfo& from);
  void MergeFrom(const CmdMCUpdateAnaly_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAnaly.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAnaly_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAnaly_AnalyInfo();
  virtual ~CmdMCUpdateAnaly_AnalyInfo();

  CmdMCUpdateAnaly_AnalyInfo(const CmdMCUpdateAnaly_AnalyInfo& from);

  inline CmdMCUpdateAnaly_AnalyInfo& operator=(const CmdMCUpdateAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAnaly_AnalyInfo& default_instance();

  void Swap(CmdMCUpdateAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAnaly_AnalyInfo& from);
  void MergeFrom(const CmdMCUpdateAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 newuserids = 3;
  inline bool has_newuserids() const;
  inline void clear_newuserids();
  static const int kNewuseridsFieldNumber = 3;
  inline ::google::protobuf::uint32 newuserids() const;
  inline void set_newuserids(::google::protobuf::uint32 value);

  // optional bool isdispmnum = 4;
  inline bool has_isdispmnum() const;
  inline void clear_isdispmnum();
  static const int kIsdispmnumFieldNumber = 4;
  inline bool isdispmnum() const;
  inline void set_isdispmnum(bool value);

  // optional bool isdispmname = 5;
  inline bool has_isdispmname() const;
  inline void clear_isdispmname();
  static const int kIsdispmnameFieldNumber = 5;
  inline bool isdispmname() const;
  inline void set_isdispmname(bool value);

  // optional uint32 vaschannelid = 6;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 6;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAnaly.AnalyInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_newuserids();
  inline void clear_has_newuserids();
  inline void set_has_isdispmnum();
  inline void clear_has_isdispmnum();
  inline void set_has_isdispmname();
  inline void clear_has_isdispmname();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 newuserids_;
  bool isdispmnum_;
  bool isdispmname_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAnaly : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAnaly();
  virtual ~CmdMCUpdateAnaly();

  CmdMCUpdateAnaly(const CmdMCUpdateAnaly& from);

  inline CmdMCUpdateAnaly& operator=(const CmdMCUpdateAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAnaly& default_instance();

  void Swap(CmdMCUpdateAnaly* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAnaly& from);
  void MergeFrom(const CmdMCUpdateAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCUpdateAnaly_IPPORT IPPORT;
  typedef CmdMCUpdateAnaly_AddrInfo AddrInfo;
  typedef CmdMCUpdateAnaly_DomainInfo DomainInfo;
  typedef CmdMCUpdateAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateAnaly.AnalyInfo updateanalyinfos = 4;
  inline int updateanalyinfos_size() const;
  inline void clear_updateanalyinfos();
  static const int kUpdateanalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo& updateanalyinfos(int index) const;
  inline ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo* mutable_updateanalyinfos(int index);
  inline ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo* add_updateanalyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo >&
      updateanalyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo >*
      mutable_updateanalyinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCUpdateAnaly.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCUpdateAnaly_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCUpdateAnaly_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCUpdateAnaly_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCUpdateAnaly.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCUpdateAnaly_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCUpdateAnaly_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCUpdateAnaly_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo > updateanalyinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourceName_IPPORT : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourceName_IPPORT();
  virtual ~CmdChangeVideoSourceName_IPPORT();

  CmdChangeVideoSourceName_IPPORT(const CmdChangeVideoSourceName_IPPORT& from);

  inline CmdChangeVideoSourceName_IPPORT& operator=(const CmdChangeVideoSourceName_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourceName_IPPORT& default_instance();

  void Swap(CmdChangeVideoSourceName_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourceName_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourceName_IPPORT& from);
  void MergeFrom(const CmdChangeVideoSourceName_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourceName.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourceName_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourceName_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourceName_AddrInfo();
  virtual ~CmdChangeVideoSourceName_AddrInfo();

  CmdChangeVideoSourceName_AddrInfo(const CmdChangeVideoSourceName_AddrInfo& from);

  inline CmdChangeVideoSourceName_AddrInfo& operator=(const CmdChangeVideoSourceName_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourceName_AddrInfo& default_instance();

  void Swap(CmdChangeVideoSourceName_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourceName_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourceName_AddrInfo& from);
  void MergeFrom(const CmdChangeVideoSourceName_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangeVideoSourceName.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdChangeVideoSourceName_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourceName_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdChangeVideoSourceName_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourceName.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourceName_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourceName_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourceName_DomainInfo();
  virtual ~CmdChangeVideoSourceName_DomainInfo();

  CmdChangeVideoSourceName_DomainInfo(const CmdChangeVideoSourceName_DomainInfo& from);

  inline CmdChangeVideoSourceName_DomainInfo& operator=(const CmdChangeVideoSourceName_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourceName_DomainInfo& default_instance();

  void Swap(CmdChangeVideoSourceName_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourceName_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourceName_DomainInfo& from);
  void MergeFrom(const CmdChangeVideoSourceName_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourceName.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourceName_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourceName_SourceInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourceName_SourceInfo();
  virtual ~CmdChangeVideoSourceName_SourceInfo();

  CmdChangeVideoSourceName_SourceInfo(const CmdChangeVideoSourceName_SourceInfo& from);

  inline CmdChangeVideoSourceName_SourceInfo& operator=(const CmdChangeVideoSourceName_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourceName_SourceInfo& default_instance();

  void Swap(CmdChangeVideoSourceName_SourceInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourceName_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourceName_SourceInfo& from);
  void MergeFrom(const CmdChangeVideoSourceName_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourceName.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourceName_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourceName : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourceName();
  virtual ~CmdChangeVideoSourceName();

  CmdChangeVideoSourceName(const CmdChangeVideoSourceName& from);

  inline CmdChangeVideoSourceName& operator=(const CmdChangeVideoSourceName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourceName& default_instance();

  void Swap(CmdChangeVideoSourceName* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourceName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourceName& from);
  void MergeFrom(const CmdChangeVideoSourceName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdChangeVideoSourceName_IPPORT IPPORT;
  typedef CmdChangeVideoSourceName_AddrInfo AddrInfo;
  typedef CmdChangeVideoSourceName_DomainInfo DomainInfo;
  typedef CmdChangeVideoSourceName_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangeVideoSourceName.SourceInfo srcinfos = 3;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 3;
  inline const ::SRMsgs::CmdChangeVideoSourceName_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourceName_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::CmdChangeVideoSourceName_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdChangeVideoSourceName.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdChangeVideoSourceName_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourceName_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdChangeVideoSourceName_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdChangeVideoSourceName.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdChangeVideoSourceName_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourceName_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdChangeVideoSourceName_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourceName)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourceName* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourcePriority_IPPORT : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourcePriority_IPPORT();
  virtual ~CmdChangeVideoSourcePriority_IPPORT();

  CmdChangeVideoSourcePriority_IPPORT(const CmdChangeVideoSourcePriority_IPPORT& from);

  inline CmdChangeVideoSourcePriority_IPPORT& operator=(const CmdChangeVideoSourcePriority_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourcePriority_IPPORT& default_instance();

  void Swap(CmdChangeVideoSourcePriority_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourcePriority_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourcePriority_IPPORT& from);
  void MergeFrom(const CmdChangeVideoSourcePriority_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourcePriority.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourcePriority_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourcePriority_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourcePriority_AddrInfo();
  virtual ~CmdChangeVideoSourcePriority_AddrInfo();

  CmdChangeVideoSourcePriority_AddrInfo(const CmdChangeVideoSourcePriority_AddrInfo& from);

  inline CmdChangeVideoSourcePriority_AddrInfo& operator=(const CmdChangeVideoSourcePriority_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourcePriority_AddrInfo& default_instance();

  void Swap(CmdChangeVideoSourcePriority_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourcePriority_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourcePriority_AddrInfo& from);
  void MergeFrom(const CmdChangeVideoSourcePriority_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangeVideoSourcePriority.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourcePriority_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourcePriority_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourcePriority_DomainInfo();
  virtual ~CmdChangeVideoSourcePriority_DomainInfo();

  CmdChangeVideoSourcePriority_DomainInfo(const CmdChangeVideoSourcePriority_DomainInfo& from);

  inline CmdChangeVideoSourcePriority_DomainInfo& operator=(const CmdChangeVideoSourcePriority_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourcePriority_DomainInfo& default_instance();

  void Swap(CmdChangeVideoSourcePriority_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourcePriority_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourcePriority_DomainInfo& from);
  void MergeFrom(const CmdChangeVideoSourcePriority_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourcePriority_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourcePriority_SourceInfo : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourcePriority_SourceInfo();
  virtual ~CmdChangeVideoSourcePriority_SourceInfo();

  CmdChangeVideoSourcePriority_SourceInfo(const CmdChangeVideoSourcePriority_SourceInfo& from);

  inline CmdChangeVideoSourcePriority_SourceInfo& operator=(const CmdChangeVideoSourcePriority_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourcePriority_SourceInfo& default_instance();

  void Swap(CmdChangeVideoSourcePriority_SourceInfo* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourcePriority_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourcePriority_SourceInfo& from);
  void MergeFrom(const CmdChangeVideoSourcePriority_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional uint32 priority = 2;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 2;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourcePriority.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourcePriority_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangeVideoSourcePriority : public ::google::protobuf::Message {
 public:
  CmdChangeVideoSourcePriority();
  virtual ~CmdChangeVideoSourcePriority();

  CmdChangeVideoSourcePriority(const CmdChangeVideoSourcePriority& from);

  inline CmdChangeVideoSourcePriority& operator=(const CmdChangeVideoSourcePriority& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangeVideoSourcePriority& default_instance();

  void Swap(CmdChangeVideoSourcePriority* other);

  // implements Message ----------------------------------------------

  CmdChangeVideoSourcePriority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangeVideoSourcePriority& from);
  void MergeFrom(const CmdChangeVideoSourcePriority& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdChangeVideoSourcePriority_IPPORT IPPORT;
  typedef CmdChangeVideoSourcePriority_AddrInfo AddrInfo;
  typedef CmdChangeVideoSourcePriority_DomainInfo DomainInfo;
  typedef CmdChangeVideoSourcePriority_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangeVideoSourcePriority.SourceInfo allsrcinfos = 3;
  inline int allsrcinfos_size() const;
  inline void clear_allsrcinfos();
  static const int kAllsrcinfosFieldNumber = 3;
  inline const ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo& allsrcinfos(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo* mutable_allsrcinfos(int index);
  inline ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo* add_allsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo >&
      allsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo >*
      mutable_allsrcinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdChangeVideoSourcePriority.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdChangeVideoSourcePriority.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangeVideoSourcePriority)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo > allsrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangeVideoSourcePriority* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangePreset_IPPORT : public ::google::protobuf::Message {
 public:
  CmdChangePreset_IPPORT();
  virtual ~CmdChangePreset_IPPORT();

  CmdChangePreset_IPPORT(const CmdChangePreset_IPPORT& from);

  inline CmdChangePreset_IPPORT& operator=(const CmdChangePreset_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangePreset_IPPORT& default_instance();

  void Swap(CmdChangePreset_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdChangePreset_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangePreset_IPPORT& from);
  void MergeFrom(const CmdChangePreset_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangePreset.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangePreset_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangePreset_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdChangePreset_AddrInfo();
  virtual ~CmdChangePreset_AddrInfo();

  CmdChangePreset_AddrInfo(const CmdChangePreset_AddrInfo& from);

  inline CmdChangePreset_AddrInfo& operator=(const CmdChangePreset_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangePreset_AddrInfo& default_instance();

  void Swap(CmdChangePreset_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdChangePreset_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangePreset_AddrInfo& from);
  void MergeFrom(const CmdChangePreset_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangePreset.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdChangePreset_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdChangePreset_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdChangePreset_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangePreset.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangePreset_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangePreset_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdChangePreset_DomainInfo();
  virtual ~CmdChangePreset_DomainInfo();

  CmdChangePreset_DomainInfo(const CmdChangePreset_DomainInfo& from);

  inline CmdChangePreset_DomainInfo& operator=(const CmdChangePreset_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangePreset_DomainInfo& default_instance();

  void Swap(CmdChangePreset_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdChangePreset_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangePreset_DomainInfo& from);
  void MergeFrom(const CmdChangePreset_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangePreset.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangePreset_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangePreset_PresetInfo : public ::google::protobuf::Message {
 public:
  CmdChangePreset_PresetInfo();
  virtual ~CmdChangePreset_PresetInfo();

  CmdChangePreset_PresetInfo(const CmdChangePreset_PresetInfo& from);

  inline CmdChangePreset_PresetInfo& operator=(const CmdChangePreset_PresetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangePreset_PresetInfo& default_instance();

  void Swap(CmdChangePreset_PresetInfo* other);

  // implements Message ----------------------------------------------

  CmdChangePreset_PresetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangePreset_PresetInfo& from);
  void MergeFrom(const CmdChangePreset_PresetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 presetid = 1;
  inline bool has_presetid() const;
  inline void clear_presetid();
  static const int kPresetidFieldNumber = 1;
  inline ::google::protobuf::uint32 presetid() const;
  inline void set_presetid(::google::protobuf::uint32 value);

  // optional string presetname = 2;
  inline bool has_presetname() const;
  inline void clear_presetname();
  static const int kPresetnameFieldNumber = 2;
  inline const ::std::string& presetname() const;
  inline void set_presetname(const ::std::string& value);
  inline void set_presetname(const char* value);
  inline void set_presetname(const char* value, size_t size);
  inline ::std::string* mutable_presetname();
  inline ::std::string* release_presetname();
  inline void set_allocated_presetname(::std::string* presetname);

  // optional uint32 relatedvsrcid = 3;
  inline bool has_relatedvsrcid() const;
  inline void clear_relatedvsrcid();
  static const int kRelatedvsrcidFieldNumber = 3;
  inline ::google::protobuf::uint32 relatedvsrcid() const;
  inline void set_relatedvsrcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangePreset.PresetInfo)
 private:
  inline void set_has_presetid();
  inline void clear_has_presetid();
  inline void set_has_presetname();
  inline void clear_has_presetname();
  inline void set_has_relatedvsrcid();
  inline void clear_has_relatedvsrcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* presetname_;
  ::google::protobuf::uint32 presetid_;
  ::google::protobuf::uint32 relatedvsrcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangePreset_PresetInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdChangePreset : public ::google::protobuf::Message {
 public:
  CmdChangePreset();
  virtual ~CmdChangePreset();

  CmdChangePreset(const CmdChangePreset& from);

  inline CmdChangePreset& operator=(const CmdChangePreset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdChangePreset& default_instance();

  void Swap(CmdChangePreset* other);

  // implements Message ----------------------------------------------

  CmdChangePreset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdChangePreset& from);
  void MergeFrom(const CmdChangePreset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdChangePreset_IPPORT IPPORT;
  typedef CmdChangePreset_AddrInfo AddrInfo;
  typedef CmdChangePreset_DomainInfo DomainInfo;
  typedef CmdChangePreset_PresetInfo PresetInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdChangePreset.PresetInfo cpresetinfos = 3;
  inline int cpresetinfos_size() const;
  inline void clear_cpresetinfos();
  static const int kCpresetinfosFieldNumber = 3;
  inline const ::SRMsgs::CmdChangePreset_PresetInfo& cpresetinfos(int index) const;
  inline ::SRMsgs::CmdChangePreset_PresetInfo* mutable_cpresetinfos(int index);
  inline ::SRMsgs::CmdChangePreset_PresetInfo* add_cpresetinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_PresetInfo >&
      cpresetinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_PresetInfo >*
      mutable_cpresetinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdChangePreset.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::CmdChangePreset_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdChangePreset_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdChangePreset_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdChangePreset.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::CmdChangePreset_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdChangePreset_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdChangePreset_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdChangePreset)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_PresetInfo > cpresetinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdChangePreset* default_instance_;
};
// -------------------------------------------------------------------

class CmdFilterNoVideo_IPPORT : public ::google::protobuf::Message {
 public:
  CmdFilterNoVideo_IPPORT();
  virtual ~CmdFilterNoVideo_IPPORT();

  CmdFilterNoVideo_IPPORT(const CmdFilterNoVideo_IPPORT& from);

  inline CmdFilterNoVideo_IPPORT& operator=(const CmdFilterNoVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdFilterNoVideo_IPPORT& default_instance();

  void Swap(CmdFilterNoVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdFilterNoVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdFilterNoVideo_IPPORT& from);
  void MergeFrom(const CmdFilterNoVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdFilterNoVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdFilterNoVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdFilterNoVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdFilterNoVideo_AddrInfo();
  virtual ~CmdFilterNoVideo_AddrInfo();

  CmdFilterNoVideo_AddrInfo(const CmdFilterNoVideo_AddrInfo& from);

  inline CmdFilterNoVideo_AddrInfo& operator=(const CmdFilterNoVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdFilterNoVideo_AddrInfo& default_instance();

  void Swap(CmdFilterNoVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdFilterNoVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdFilterNoVideo_AddrInfo& from);
  void MergeFrom(const CmdFilterNoVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdFilterNoVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdFilterNoVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdFilterNoVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdFilterNoVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdFilterNoVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdFilterNoVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdFilterNoVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdFilterNoVideo_DomainInfo();
  virtual ~CmdFilterNoVideo_DomainInfo();

  CmdFilterNoVideo_DomainInfo(const CmdFilterNoVideo_DomainInfo& from);

  inline CmdFilterNoVideo_DomainInfo& operator=(const CmdFilterNoVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdFilterNoVideo_DomainInfo& default_instance();

  void Swap(CmdFilterNoVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdFilterNoVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdFilterNoVideo_DomainInfo& from);
  void MergeFrom(const CmdFilterNoVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdFilterNoVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdFilterNoVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdFilterNoVideo : public ::google::protobuf::Message {
 public:
  CmdFilterNoVideo();
  virtual ~CmdFilterNoVideo();

  CmdFilterNoVideo(const CmdFilterNoVideo& from);

  inline CmdFilterNoVideo& operator=(const CmdFilterNoVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdFilterNoVideo& default_instance();

  void Swap(CmdFilterNoVideo* other);

  // implements Message ----------------------------------------------

  CmdFilterNoVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdFilterNoVideo& from);
  void MergeFrom(const CmdFilterNoVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdFilterNoVideo_IPPORT IPPORT;
  typedef CmdFilterNoVideo_AddrInfo AddrInfo;
  typedef CmdFilterNoVideo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // optional uint32 filternovideo = 4;
  inline bool has_filternovideo() const;
  inline void clear_filternovideo();
  static const int kFilternovideoFieldNumber = 4;
  inline ::google::protobuf::uint32 filternovideo() const;
  inline void set_filternovideo(::google::protobuf::uint32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdFilterNoVideo.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdFilterNoVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdFilterNoVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdFilterNoVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdFilterNoVideo.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdFilterNoVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdFilterNoVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdFilterNoVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdFilterNoVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_filternovideo();
  inline void clear_has_filternovideo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_DomainInfo > domains_;
  ::google::protobuf::uint32 filternovideo_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdFilterNoVideo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo_IPPORT : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo_IPPORT();
  virtual ~CmdMCUpdateAutoPollInfo_IPPORT();

  CmdMCUpdateAutoPollInfo_IPPORT(const CmdMCUpdateAutoPollInfo_IPPORT& from);

  inline CmdMCUpdateAutoPollInfo_IPPORT& operator=(const CmdMCUpdateAutoPollInfo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo_IPPORT& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo_IPPORT* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo_IPPORT& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo_AddrInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo_AddrInfo();
  virtual ~CmdMCUpdateAutoPollInfo_AddrInfo();

  CmdMCUpdateAutoPollInfo_AddrInfo(const CmdMCUpdateAutoPollInfo_AddrInfo& from);

  inline CmdMCUpdateAutoPollInfo_AddrInfo& operator=(const CmdMCUpdateAutoPollInfo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo_AddrInfo& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo_AddrInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo_AddrInfo& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo_DomainInfo();
  virtual ~CmdMCUpdateAutoPollInfo_DomainInfo();

  CmdMCUpdateAutoPollInfo_DomainInfo(const CmdMCUpdateAutoPollInfo_DomainInfo& from);

  inline CmdMCUpdateAutoPollInfo_DomainInfo& operator=(const CmdMCUpdateAutoPollInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo_DomainInfo& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo_DomainInfo& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo_ParticipantInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo_ParticipantInfo();
  virtual ~CmdMCUpdateAutoPollInfo_ParticipantInfo();

  CmdMCUpdateAutoPollInfo_ParticipantInfo(const CmdMCUpdateAutoPollInfo_ParticipantInfo& from);

  inline CmdMCUpdateAutoPollInfo_ParticipantInfo& operator=(const CmdMCUpdateAutoPollInfo_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo_ParticipantInfo& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo_ParticipantInfo& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo_AutoPollInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo_AutoPollInfo();
  virtual ~CmdMCUpdateAutoPollInfo_AutoPollInfo();

  CmdMCUpdateAutoPollInfo_AutoPollInfo(const CmdMCUpdateAutoPollInfo_AutoPollInfo& from);

  inline CmdMCUpdateAutoPollInfo_AutoPollInfo& operator=(const CmdMCUpdateAutoPollInfo_AutoPollInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo_AutoPollInfo& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo_AutoPollInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo_AutoPollInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo_AutoPollInfo& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo_AutoPollInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apid = 1;
  inline bool has_apid() const;
  inline void clear_apid();
  static const int kApidFieldNumber = 1;
  inline ::google::protobuf::uint64 apid() const;
  inline void set_apid(::google::protobuf::uint64 value);

  // optional string apname = 2;
  inline bool has_apname() const;
  inline void clear_apname();
  static const int kApnameFieldNumber = 2;
  inline const ::std::string& apname() const;
  inline void set_apname(const ::std::string& value);
  inline void set_apname(const char* value);
  inline void set_apname(const char* value, size_t size);
  inline ::std::string* mutable_apname();
  inline ::std::string* release_apname();
  inline void set_allocated_apname(::std::string* apname);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateAutoPollInfo.ParticipantInfo parts = 4;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 4;
  inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo)
 private:
  inline void set_has_apid();
  inline void clear_has_apid();
  inline void set_has_apname();
  inline void clear_has_apname();
  inline void set_has_addordel();
  inline void clear_has_addordel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 apid_;
  ::std::string* apname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo > parts_;
  ::google::protobuf::uint32 addordel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo_AutoPollInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCUpdateAutoPollInfo : public ::google::protobuf::Message {
 public:
  CmdMCUpdateAutoPollInfo();
  virtual ~CmdMCUpdateAutoPollInfo();

  CmdMCUpdateAutoPollInfo(const CmdMCUpdateAutoPollInfo& from);

  inline CmdMCUpdateAutoPollInfo& operator=(const CmdMCUpdateAutoPollInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCUpdateAutoPollInfo& default_instance();

  void Swap(CmdMCUpdateAutoPollInfo* other);

  // implements Message ----------------------------------------------

  CmdMCUpdateAutoPollInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCUpdateAutoPollInfo& from);
  void MergeFrom(const CmdMCUpdateAutoPollInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCUpdateAutoPollInfo_IPPORT IPPORT;
  typedef CmdMCUpdateAutoPollInfo_AddrInfo AddrInfo;
  typedef CmdMCUpdateAutoPollInfo_DomainInfo DomainInfo;
  typedef CmdMCUpdateAutoPollInfo_ParticipantInfo ParticipantInfo;
  typedef CmdMCUpdateAutoPollInfo_AutoPollInfo AutoPollInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 sponsortype = 3;
  inline bool has_sponsortype() const;
  inline void clear_sponsortype();
  static const int kSponsortypeFieldNumber = 3;
  inline ::google::protobuf::uint32 sponsortype() const;
  inline void set_sponsortype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo autopolllist = 4;
  inline int autopolllist_size() const;
  inline void clear_autopolllist();
  static const int kAutopolllistFieldNumber = 4;
  inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo& autopolllist(int index) const;
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo* mutable_autopolllist(int index);
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo* add_autopolllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo >&
      autopolllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo >*
      mutable_autopolllist();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCUpdateAutoPollInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_sponsortype();
  inline void clear_has_sponsortype();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 sponsortype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo > autopolllist_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static CmdMCUpdateAutoPollInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideoProxy_IPPORT : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideoProxy_IPPORT();
  virtual ~ReqSendAssistVideoProxy_IPPORT();

  ReqSendAssistVideoProxy_IPPORT(const ReqSendAssistVideoProxy_IPPORT& from);

  inline ReqSendAssistVideoProxy_IPPORT& operator=(const ReqSendAssistVideoProxy_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideoProxy_IPPORT& default_instance();

  void Swap(ReqSendAssistVideoProxy_IPPORT* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideoProxy_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideoProxy_IPPORT& from);
  void MergeFrom(const ReqSendAssistVideoProxy_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideoProxy.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideoProxy_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideoProxy_AddrInfo : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideoProxy_AddrInfo();
  virtual ~ReqSendAssistVideoProxy_AddrInfo();

  ReqSendAssistVideoProxy_AddrInfo(const ReqSendAssistVideoProxy_AddrInfo& from);

  inline ReqSendAssistVideoProxy_AddrInfo& operator=(const ReqSendAssistVideoProxy_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideoProxy_AddrInfo& default_instance();

  void Swap(ReqSendAssistVideoProxy_AddrInfo* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideoProxy_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideoProxy_AddrInfo& from);
  void MergeFrom(const ReqSendAssistVideoProxy_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqSendAssistVideoProxy.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::ReqSendAssistVideoProxy_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::ReqSendAssistVideoProxy_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::ReqSendAssistVideoProxy_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideoProxy.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideoProxy_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideoProxy_DomainInfo : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideoProxy_DomainInfo();
  virtual ~ReqSendAssistVideoProxy_DomainInfo();

  ReqSendAssistVideoProxy_DomainInfo(const ReqSendAssistVideoProxy_DomainInfo& from);

  inline ReqSendAssistVideoProxy_DomainInfo& operator=(const ReqSendAssistVideoProxy_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideoProxy_DomainInfo& default_instance();

  void Swap(ReqSendAssistVideoProxy_DomainInfo* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideoProxy_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideoProxy_DomainInfo& from);
  void MergeFrom(const ReqSendAssistVideoProxy_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideoProxy.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideoProxy_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqSendAssistVideoProxy : public ::google::protobuf::Message {
 public:
  ReqSendAssistVideoProxy();
  virtual ~ReqSendAssistVideoProxy();

  ReqSendAssistVideoProxy(const ReqSendAssistVideoProxy& from);

  inline ReqSendAssistVideoProxy& operator=(const ReqSendAssistVideoProxy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendAssistVideoProxy& default_instance();

  void Swap(ReqSendAssistVideoProxy* other);

  // implements Message ----------------------------------------------

  ReqSendAssistVideoProxy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendAssistVideoProxy& from);
  void MergeFrom(const ReqSendAssistVideoProxy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqSendAssistVideoProxy_IPPORT IPPORT;
  typedef ReqSendAssistVideoProxy_AddrInfo AddrInfo;
  typedef ReqSendAssistVideoProxy_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 avterid = 3;
  inline bool has_avterid() const;
  inline void clear_avterid();
  static const int kAvteridFieldNumber = 3;
  inline ::google::protobuf::uint32 avterid() const;
  inline void set_avterid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.ReqSendAssistVideoProxy.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.ReqSendAssistVideoProxy.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo& domains(int index) const;
  inline ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqSendAssistVideoProxy)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_avterid();
  inline void clear_has_avterid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 avterid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static ReqSendAssistVideoProxy* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_IPPORT : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_IPPORT();
  virtual ~RspConfGroupMeetingRoomTerLists_IPPORT();

  RspConfGroupMeetingRoomTerLists_IPPORT(const RspConfGroupMeetingRoomTerLists_IPPORT& from);

  inline RspConfGroupMeetingRoomTerLists_IPPORT& operator=(const RspConfGroupMeetingRoomTerLists_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_IPPORT& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_IPPORT* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_IPPORT& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_AddrInfo : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_AddrInfo();
  virtual ~RspConfGroupMeetingRoomTerLists_AddrInfo();

  RspConfGroupMeetingRoomTerLists_AddrInfo(const RspConfGroupMeetingRoomTerLists_AddrInfo& from);

  inline RspConfGroupMeetingRoomTerLists_AddrInfo& operator=(const RspConfGroupMeetingRoomTerLists_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_AddrInfo& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_AddrInfo* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_AddrInfo& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_DomainInfo : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_DomainInfo();
  virtual ~RspConfGroupMeetingRoomTerLists_DomainInfo();

  RspConfGroupMeetingRoomTerLists_DomainInfo(const RspConfGroupMeetingRoomTerLists_DomainInfo& from);

  inline RspConfGroupMeetingRoomTerLists_DomainInfo& operator=(const RspConfGroupMeetingRoomTerLists_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_DomainInfo& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_DomainInfo* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_DomainInfo& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_TerInfo : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_TerInfo();
  virtual ~RspConfGroupMeetingRoomTerLists_TerInfo();

  RspConfGroupMeetingRoomTerLists_TerInfo(const RspConfGroupMeetingRoomTerLists_TerInfo& from);

  inline RspConfGroupMeetingRoomTerLists_TerInfo& operator=(const RspConfGroupMeetingRoomTerLists_TerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_TerInfo& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_TerInfo* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_TerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_TerInfo& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_TerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string terdname = 3;
  inline bool has_terdname() const;
  inline void clear_terdname();
  static const int kTerdnameFieldNumber = 3;
  inline const ::std::string& terdname() const;
  inline void set_terdname(const ::std::string& value);
  inline void set_terdname(const char* value);
  inline void set_terdname(const char* value, size_t size);
  inline ::std::string* mutable_terdname();
  inline ::std::string* release_terdname();
  inline void set_allocated_terdname(::std::string* terdname);

  // optional uint32 termtype = 4;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 fromtype = 5;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromtypeFieldNumber = 5;
  inline ::google::protobuf::uint32 fromtype() const;
  inline void set_fromtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 6;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 6;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_terdname();
  inline void clear_has_terdname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 termtype_;
  ::std::string* terdname_;
  ::google::protobuf::uint32 fromtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_TerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_GMRInfo : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_GMRInfo();
  virtual ~RspConfGroupMeetingRoomTerLists_GMRInfo();

  RspConfGroupMeetingRoomTerLists_GMRInfo(const RspConfGroupMeetingRoomTerLists_GMRInfo& from);

  inline RspConfGroupMeetingRoomTerLists_GMRInfo& operator=(const RspConfGroupMeetingRoomTerLists_GMRInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_GMRInfo& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_GMRInfo* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_GMRInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_GMRInfo& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_GMRInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gmrtype = 1;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 2;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 2;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo)
 private:
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gmrtype_;
  ::google::protobuf::uint32 gmrid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_GMRInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists_GMRTerListInfo : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists_GMRTerListInfo();
  virtual ~RspConfGroupMeetingRoomTerLists_GMRTerListInfo();

  RspConfGroupMeetingRoomTerLists_GMRTerListInfo(const RspConfGroupMeetingRoomTerLists_GMRTerListInfo& from);

  inline RspConfGroupMeetingRoomTerLists_GMRTerListInfo& operator=(const RspConfGroupMeetingRoomTerLists_GMRTerListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists_GMRTerListInfo& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists_GMRTerListInfo* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists_GMRTerListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists_GMRTerListInfo& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists_GMRTerListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo gmrinfo = 1;
  inline bool has_gmrinfo() const;
  inline void clear_gmrinfo();
  static const int kGmrinfoFieldNumber = 1;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo& gmrinfo() const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* mutable_gmrinfo();
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* release_gmrinfo();
  inline void set_allocated_gmrinfo(::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* gmrinfo);

  // repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo terlists = 3;
  inline int terlists_size() const;
  inline void clear_terlists();
  static const int kTerlistsFieldNumber = 3;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo& terlists(int index) const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo* mutable_terlists(int index);
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo* add_terlists();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo >&
      terlists() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo >*
      mutable_terlists();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo)
 private:
  inline void set_has_gmrinfo();
  inline void clear_has_gmrinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* gmrinfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo > terlists_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists_GMRTerListInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfGroupMeetingRoomTerLists : public ::google::protobuf::Message {
 public:
  RspConfGroupMeetingRoomTerLists();
  virtual ~RspConfGroupMeetingRoomTerLists();

  RspConfGroupMeetingRoomTerLists(const RspConfGroupMeetingRoomTerLists& from);

  inline RspConfGroupMeetingRoomTerLists& operator=(const RspConfGroupMeetingRoomTerLists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfGroupMeetingRoomTerLists& default_instance();

  void Swap(RspConfGroupMeetingRoomTerLists* other);

  // implements Message ----------------------------------------------

  RspConfGroupMeetingRoomTerLists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfGroupMeetingRoomTerLists& from);
  void MergeFrom(const RspConfGroupMeetingRoomTerLists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspConfGroupMeetingRoomTerLists_IPPORT IPPORT;
  typedef RspConfGroupMeetingRoomTerLists_AddrInfo AddrInfo;
  typedef RspConfGroupMeetingRoomTerLists_DomainInfo DomainInfo;
  typedef RspConfGroupMeetingRoomTerLists_TerInfo TerInfo;
  typedef RspConfGroupMeetingRoomTerLists_GMRInfo GMRInfo;
  typedef RspConfGroupMeetingRoomTerLists_GMRTerListInfo GMRTerListInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo& domains(int index) const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo >*
      mutable_domains();

  // optional bool isok = 6;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 6;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional string failreason = 7;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 7;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional uint32 totalnums = 9;
  inline bool has_totalnums() const;
  inline void clear_totalnums();
  static const int kTotalnumsFieldNumber = 9;
  inline ::google::protobuf::uint32 totalnums() const;
  inline void set_totalnums(::google::protobuf::uint32 value);

  // optional uint32 alreadynums = 10;
  inline bool has_alreadynums() const;
  inline void clear_alreadynums();
  static const int kAlreadynumsFieldNumber = 10;
  inline ::google::protobuf::uint32 alreadynums() const;
  inline void set_alreadynums(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo gmrterlists = 11;
  inline int gmrterlists_size() const;
  inline void clear_gmrterlists();
  static const int kGmrterlistsFieldNumber = 11;
  inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo& gmrterlists(int index) const;
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo* mutable_gmrterlists(int index);
  inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo* add_gmrterlists();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo >&
      gmrterlists() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo >*
      mutable_gmrterlists();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfGroupMeetingRoomTerLists)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_totalnums();
  inline void clear_has_totalnums();
  inline void set_has_alreadynums();
  inline void clear_has_alreadynums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo > svraddrs_;
  ::google::protobuf::uint32 terid_;
  bool isok_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo > domains_;
  ::std::string* failreason_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::uint32 totalnums_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo > gmrterlists_;
  ::google::protobuf::uint32 alreadynums_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfGroupMeetingRoomTerLists* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_IPPORT : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_IPPORT();
  virtual ~RspConfRollCallInfo_IPPORT();

  RspConfRollCallInfo_IPPORT(const RspConfRollCallInfo_IPPORT& from);

  inline RspConfRollCallInfo_IPPORT& operator=(const RspConfRollCallInfo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_IPPORT& default_instance();

  void Swap(RspConfRollCallInfo_IPPORT* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_IPPORT& from);
  void MergeFrom(const RspConfRollCallInfo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_AddrInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_AddrInfo();
  virtual ~RspConfRollCallInfo_AddrInfo();

  RspConfRollCallInfo_AddrInfo(const RspConfRollCallInfo_AddrInfo& from);

  inline RspConfRollCallInfo_AddrInfo& operator=(const RspConfRollCallInfo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_AddrInfo& default_instance();

  void Swap(RspConfRollCallInfo_AddrInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_AddrInfo& from);
  void MergeFrom(const RspConfRollCallInfo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfRollCallInfo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::RspConfRollCallInfo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::RspConfRollCallInfo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_DomainInfo();
  virtual ~RspConfRollCallInfo_DomainInfo();

  RspConfRollCallInfo_DomainInfo(const RspConfRollCallInfo_DomainInfo& from);

  inline RspConfRollCallInfo_DomainInfo& operator=(const RspConfRollCallInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_DomainInfo& default_instance();

  void Swap(RspConfRollCallInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_DomainInfo& from);
  void MergeFrom(const RspConfRollCallInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_ParticipantInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_ParticipantInfo();
  virtual ~RspConfRollCallInfo_ParticipantInfo();

  RspConfRollCallInfo_ParticipantInfo(const RspConfRollCallInfo_ParticipantInfo& from);

  inline RspConfRollCallInfo_ParticipantInfo& operator=(const RspConfRollCallInfo_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_ParticipantInfo& default_instance();

  void Swap(RspConfRollCallInfo_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_ParticipantInfo& from);
  void MergeFrom(const RspConfRollCallInfo_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_RollCallInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_RollCallInfo();
  virtual ~RspConfRollCallInfo_RollCallInfo();

  RspConfRollCallInfo_RollCallInfo(const RspConfRollCallInfo_RollCallInfo& from);

  inline RspConfRollCallInfo_RollCallInfo& operator=(const RspConfRollCallInfo_RollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_RollCallInfo& default_instance();

  void Swap(RspConfRollCallInfo_RollCallInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_RollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_RollCallInfo& from);
  void MergeFrom(const RspConfRollCallInfo_RollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // repeated .SRMsgs.RspConfRollCallInfo.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::RspConfRollCallInfo_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::RspConfRollCallInfo_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.RollCallInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_RollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_RollCallTerInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_RollCallTerInfo();
  virtual ~RspConfRollCallInfo_RollCallTerInfo();

  RspConfRollCallInfo_RollCallTerInfo(const RspConfRollCallInfo_RollCallTerInfo& from);

  inline RspConfRollCallInfo_RollCallTerInfo& operator=(const RspConfRollCallInfo_RollCallTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_RollCallTerInfo& default_instance();

  void Swap(RspConfRollCallInfo_RollCallTerInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_RollCallTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_RollCallTerInfo& from);
  void MergeFrom(const RspConfRollCallInfo_RollCallTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // optional uint32 psuid = 3;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 3;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string rcstarttime = 5;
  inline bool has_rcstarttime() const;
  inline void clear_rcstarttime();
  static const int kRcstarttimeFieldNumber = 5;
  inline const ::std::string& rcstarttime() const;
  inline void set_rcstarttime(const ::std::string& value);
  inline void set_rcstarttime(const char* value);
  inline void set_rcstarttime(const char* value, size_t size);
  inline ::std::string* mutable_rcstarttime();
  inline ::std::string* release_rcstarttime();
  inline void set_allocated_rcstarttime(::std::string* rcstarttime);

  // optional string rcendtime = 6;
  inline bool has_rcendtime() const;
  inline void clear_rcendtime();
  static const int kRcendtimeFieldNumber = 6;
  inline const ::std::string& rcendtime() const;
  inline void set_rcendtime(const ::std::string& value);
  inline void set_rcendtime(const char* value);
  inline void set_rcendtime(const char* value, size_t size);
  inline ::std::string* mutable_rcendtime();
  inline ::std::string* release_rcendtime();
  inline void set_allocated_rcendtime(::std::string* rcendtime);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.RollCallTerInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_rcstarttime();
  inline void clear_has_rcstarttime();
  inline void set_has_rcendtime();
  inline void clear_has_rcendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::std::string* nickname_;
  ::std::string* rcstarttime_;
  ::std::string* rcendtime_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_RollCallTerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo_RollCallPassDetail : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo_RollCallPassDetail();
  virtual ~RspConfRollCallInfo_RollCallPassDetail();

  RspConfRollCallInfo_RollCallPassDetail(const RspConfRollCallInfo_RollCallPassDetail& from);

  inline RspConfRollCallInfo_RollCallPassDetail& operator=(const RspConfRollCallInfo_RollCallPassDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo_RollCallPassDetail& default_instance();

  void Swap(RspConfRollCallInfo_RollCallPassDetail* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo_RollCallPassDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo_RollCallPassDetail& from);
  void MergeFrom(const RspConfRollCallInfo_RollCallPassDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfRollCallInfo.RollCallTerInfo parts = 2;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 2;
  inline const ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo& parts(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* mutable_parts(int index);
  inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo.RollCallPassDetail)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo > parts_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo_RollCallPassDetail* default_instance_;
};
// -------------------------------------------------------------------

class RspConfRollCallInfo : public ::google::protobuf::Message {
 public:
  RspConfRollCallInfo();
  virtual ~RspConfRollCallInfo();

  RspConfRollCallInfo(const RspConfRollCallInfo& from);

  inline RspConfRollCallInfo& operator=(const RspConfRollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfRollCallInfo& default_instance();

  void Swap(RspConfRollCallInfo* other);

  // implements Message ----------------------------------------------

  RspConfRollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfRollCallInfo& from);
  void MergeFrom(const RspConfRollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspConfRollCallInfo_IPPORT IPPORT;
  typedef RspConfRollCallInfo_AddrInfo AddrInfo;
  typedef RspConfRollCallInfo_DomainInfo DomainInfo;
  typedef RspConfRollCallInfo_ParticipantInfo ParticipantInfo;
  typedef RspConfRollCallInfo_RollCallInfo RollCallInfo;
  typedef RspConfRollCallInfo_RollCallTerInfo RollCallTerInfo;
  typedef RspConfRollCallInfo_RollCallPassDetail RollCallPassDetail;

  // accessors -------------------------------------------------------

  // optional bool isrollcall = 1;
  inline bool has_isrollcall() const;
  inline void clear_isrollcall();
  static const int kIsrollcallFieldNumber = 1;
  inline bool isrollcall() const;
  inline void set_isrollcall(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfRollCallInfo.RollCallInfo rollcalllist = 4;
  inline int rollcalllist_size() const;
  inline void clear_rollcalllist();
  static const int kRollcalllistFieldNumber = 4;
  inline const ::SRMsgs::RspConfRollCallInfo_RollCallInfo& rollcalllist(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_RollCallInfo* mutable_rollcalllist(int index);
  inline ::SRMsgs::RspConfRollCallInfo_RollCallInfo* add_rollcalllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallInfo >&
      rollcalllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallInfo >*
      mutable_rollcalllist();

  // optional sint32 rcitersuid = 5;
  inline bool has_rcitersuid() const;
  inline void clear_rcitersuid();
  static const int kRcitersuidFieldNumber = 5;
  inline ::google::protobuf::int32 rcitersuid() const;
  inline void set_rcitersuid(::google::protobuf::int32 value);

  // optional .SRMsgs.RspConfRollCallInfo.RollCallTerInfo currcterinfo = 6;
  inline bool has_currcterinfo() const;
  inline void clear_currcterinfo();
  static const int kCurrcterinfoFieldNumber = 6;
  inline const ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo& currcterinfo() const;
  inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* mutable_currcterinfo();
  inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* release_currcterinfo();
  inline void set_allocated_currcterinfo(::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* currcterinfo);

  // repeated .SRMsgs.RspConfRollCallInfo.RollCallPassDetail rcpdetails = 7;
  inline int rcpdetails_size() const;
  inline void clear_rcpdetails();
  static const int kRcpdetailsFieldNumber = 7;
  inline const ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail& rcpdetails(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail* mutable_rcpdetails(int index);
  inline ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail* add_rcpdetails();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail >&
      rcpdetails() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail >*
      mutable_rcpdetails();

  // optional string domainname = 8;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 8;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.RspConfRollCallInfo.AddrInfo svraddrs = 9;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 9;
  inline const ::SRMsgs::RspConfRollCallInfo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::RspConfRollCallInfo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.RspConfRollCallInfo.DomainInfo domains = 10;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 10;
  inline const ::SRMsgs::RspConfRollCallInfo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::RspConfRollCallInfo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::RspConfRollCallInfo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfRollCallInfo)
 private:
  inline void set_has_isrollcall();
  inline void clear_has_isrollcall();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_rcitersuid();
  inline void clear_has_rcitersuid();
  inline void set_has_currcterinfo();
  inline void clear_has_currcterinfo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isrollcall_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallInfo > rollcalllist_;
  ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* currcterinfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail > rcpdetails_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_DomainInfo > domains_;
  ::google::protobuf::int32 rcitersuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspConfRollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideo_IPPORT : public ::google::protobuf::Message {
 public:
  RspSendAssistVideo_IPPORT();
  virtual ~RspSendAssistVideo_IPPORT();

  RspSendAssistVideo_IPPORT(const RspSendAssistVideo_IPPORT& from);

  inline RspSendAssistVideo_IPPORT& operator=(const RspSendAssistVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideo_IPPORT& default_instance();

  void Swap(RspSendAssistVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideo_IPPORT& from);
  void MergeFrom(const RspSendAssistVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  RspSendAssistVideo_AddrInfo();
  virtual ~RspSendAssistVideo_AddrInfo();

  RspSendAssistVideo_AddrInfo(const RspSendAssistVideo_AddrInfo& from);

  inline RspSendAssistVideo_AddrInfo& operator=(const RspSendAssistVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideo_AddrInfo& default_instance();

  void Swap(RspSendAssistVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideo_AddrInfo& from);
  void MergeFrom(const RspSendAssistVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspSendAssistVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::RspSendAssistVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::RspSendAssistVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::RspSendAssistVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  RspSendAssistVideo_DomainInfo();
  virtual ~RspSendAssistVideo_DomainInfo();

  RspSendAssistVideo_DomainInfo(const RspSendAssistVideo_DomainInfo& from);

  inline RspSendAssistVideo_DomainInfo& operator=(const RspSendAssistVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideo_DomainInfo& default_instance();

  void Swap(RspSendAssistVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideo_DomainInfo& from);
  void MergeFrom(const RspSendAssistVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSendAssistVideo : public ::google::protobuf::Message {
 public:
  RspSendAssistVideo();
  virtual ~RspSendAssistVideo();

  RspSendAssistVideo(const RspSendAssistVideo& from);

  inline RspSendAssistVideo& operator=(const RspSendAssistVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSendAssistVideo& default_instance();

  void Swap(RspSendAssistVideo* other);

  // implements Message ----------------------------------------------

  RspSendAssistVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSendAssistVideo& from);
  void MergeFrom(const RspSendAssistVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspSendAssistVideo_IPPORT IPPORT;
  typedef RspSendAssistVideo_AddrInfo AddrInfo;
  typedef RspSendAssistVideo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string failreason = 4;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 4;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.RspSendAssistVideo.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::RspSendAssistVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::RspSendAssistVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::RspSendAssistVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.RspSendAssistVideo.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::RspSendAssistVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::RspSendAssistVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::RspSendAssistVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_DomainInfo >*
      mutable_domains();

  // optional uint32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspSendAssistVideo)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 terid_;
  ::std::string* failreason_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_DomainInfo > domains_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static RspSendAssistVideo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerJoinedGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerJoinedGroupMeetingRoom_IPPORT();
  virtual ~IndTerJoinedGroupMeetingRoom_IPPORT();

  IndTerJoinedGroupMeetingRoom_IPPORT(const IndTerJoinedGroupMeetingRoom_IPPORT& from);

  inline IndTerJoinedGroupMeetingRoom_IPPORT& operator=(const IndTerJoinedGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerJoinedGroupMeetingRoom_IPPORT& default_instance();

  void Swap(IndTerJoinedGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerJoinedGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerJoinedGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const IndTerJoinedGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerJoinedGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerJoinedGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerJoinedGroupMeetingRoom_AddrInfo();
  virtual ~IndTerJoinedGroupMeetingRoom_AddrInfo();

  IndTerJoinedGroupMeetingRoom_AddrInfo(const IndTerJoinedGroupMeetingRoom_AddrInfo& from);

  inline IndTerJoinedGroupMeetingRoom_AddrInfo& operator=(const IndTerJoinedGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerJoinedGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(IndTerJoinedGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerJoinedGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerJoinedGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const IndTerJoinedGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerJoinedGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerJoinedGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerJoinedGroupMeetingRoom_DomainInfo();
  virtual ~IndTerJoinedGroupMeetingRoom_DomainInfo();

  IndTerJoinedGroupMeetingRoom_DomainInfo(const IndTerJoinedGroupMeetingRoom_DomainInfo& from);

  inline IndTerJoinedGroupMeetingRoom_DomainInfo& operator=(const IndTerJoinedGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerJoinedGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(IndTerJoinedGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerJoinedGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerJoinedGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const IndTerJoinedGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerJoinedGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerJoinedGroupMeetingRoom_MediaAddrInfo : public ::google::protobuf::Message {
 public:
  IndTerJoinedGroupMeetingRoom_MediaAddrInfo();
  virtual ~IndTerJoinedGroupMeetingRoom_MediaAddrInfo();

  IndTerJoinedGroupMeetingRoom_MediaAddrInfo(const IndTerJoinedGroupMeetingRoom_MediaAddrInfo& from);

  inline IndTerJoinedGroupMeetingRoom_MediaAddrInfo& operator=(const IndTerJoinedGroupMeetingRoom_MediaAddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerJoinedGroupMeetingRoom_MediaAddrInfo& default_instance();

  void Swap(IndTerJoinedGroupMeetingRoom_MediaAddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerJoinedGroupMeetingRoom_MediaAddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerJoinedGroupMeetingRoom_MediaAddrInfo& from);
  void MergeFrom(const IndTerJoinedGroupMeetingRoom_MediaAddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string netmpip = 1;
  inline bool has_netmpip() const;
  inline void clear_netmpip();
  static const int kNetmpipFieldNumber = 1;
  inline const ::std::string& netmpip() const;
  inline void set_netmpip(const ::std::string& value);
  inline void set_netmpip(const char* value);
  inline void set_netmpip(const char* value, size_t size);
  inline ::std::string* mutable_netmpip();
  inline ::std::string* release_netmpip();
  inline void set_allocated_netmpip(::std::string* netmpip);

  // optional uint32 audiodatarecvport = 2;
  inline bool has_audiodatarecvport() const;
  inline void clear_audiodatarecvport();
  static const int kAudiodatarecvportFieldNumber = 2;
  inline ::google::protobuf::uint32 audiodatarecvport() const;
  inline void set_audiodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 audioctrlrecvport = 3;
  inline bool has_audioctrlrecvport() const;
  inline void clear_audioctrlrecvport();
  static const int kAudioctrlrecvportFieldNumber = 3;
  inline ::google::protobuf::uint32 audioctrlrecvport() const;
  inline void set_audioctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 videodatarecvport = 4;
  inline bool has_videodatarecvport() const;
  inline void clear_videodatarecvport();
  static const int kVideodatarecvportFieldNumber = 4;
  inline ::google::protobuf::uint32 videodatarecvport() const;
  inline void set_videodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 videoctrlrecvport = 5;
  inline bool has_videoctrlrecvport() const;
  inline void clear_videoctrlrecvport();
  static const int kVideoctrlrecvportFieldNumber = 5;
  inline ::google::protobuf::uint32 videoctrlrecvport() const;
  inline void set_videoctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video2datarecvport = 6;
  inline bool has_video2datarecvport() const;
  inline void clear_video2datarecvport();
  static const int kVideo2DatarecvportFieldNumber = 6;
  inline ::google::protobuf::uint32 video2datarecvport() const;
  inline void set_video2datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video2ctrlrecvport = 7;
  inline bool has_video2ctrlrecvport() const;
  inline void clear_video2ctrlrecvport();
  static const int kVideo2CtrlrecvportFieldNumber = 7;
  inline ::google::protobuf::uint32 video2ctrlrecvport() const;
  inline void set_video2ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video3datarecvport = 8;
  inline bool has_video3datarecvport() const;
  inline void clear_video3datarecvport();
  static const int kVideo3DatarecvportFieldNumber = 8;
  inline ::google::protobuf::uint32 video3datarecvport() const;
  inline void set_video3datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video3ctrlrecvport = 9;
  inline bool has_video3ctrlrecvport() const;
  inline void clear_video3ctrlrecvport();
  static const int kVideo3CtrlrecvportFieldNumber = 9;
  inline ::google::protobuf::uint32 video3ctrlrecvport() const;
  inline void set_video3ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopdatarecvport = 10;
  inline bool has_desktopdatarecvport() const;
  inline void clear_desktopdatarecvport();
  static const int kDesktopdatarecvportFieldNumber = 10;
  inline ::google::protobuf::uint32 desktopdatarecvport() const;
  inline void set_desktopdatarecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopctrlrecvport = 11;
  inline bool has_desktopctrlrecvport() const;
  inline void clear_desktopctrlrecvport();
  static const int kDesktopctrlrecvportFieldNumber = 11;
  inline ::google::protobuf::uint32 desktopctrlrecvport() const;
  inline void set_desktopctrlrecvport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo)
 private:
  inline void set_has_netmpip();
  inline void clear_has_netmpip();
  inline void set_has_audiodatarecvport();
  inline void clear_has_audiodatarecvport();
  inline void set_has_audioctrlrecvport();
  inline void clear_has_audioctrlrecvport();
  inline void set_has_videodatarecvport();
  inline void clear_has_videodatarecvport();
  inline void set_has_videoctrlrecvport();
  inline void clear_has_videoctrlrecvport();
  inline void set_has_video2datarecvport();
  inline void clear_has_video2datarecvport();
  inline void set_has_video2ctrlrecvport();
  inline void clear_has_video2ctrlrecvport();
  inline void set_has_video3datarecvport();
  inline void clear_has_video3datarecvport();
  inline void set_has_video3ctrlrecvport();
  inline void clear_has_video3ctrlrecvport();
  inline void set_has_desktopdatarecvport();
  inline void clear_has_desktopdatarecvport();
  inline void set_has_desktopctrlrecvport();
  inline void clear_has_desktopctrlrecvport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* netmpip_;
  ::google::protobuf::uint32 audiodatarecvport_;
  ::google::protobuf::uint32 audioctrlrecvport_;
  ::google::protobuf::uint32 videodatarecvport_;
  ::google::protobuf::uint32 videoctrlrecvport_;
  ::google::protobuf::uint32 video2datarecvport_;
  ::google::protobuf::uint32 video2ctrlrecvport_;
  ::google::protobuf::uint32 video3datarecvport_;
  ::google::protobuf::uint32 video3ctrlrecvport_;
  ::google::protobuf::uint32 desktopdatarecvport_;
  ::google::protobuf::uint32 desktopctrlrecvport_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerJoinedGroupMeetingRoom_MediaAddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerJoinedGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  IndTerJoinedGroupMeetingRoom();
  virtual ~IndTerJoinedGroupMeetingRoom();

  IndTerJoinedGroupMeetingRoom(const IndTerJoinedGroupMeetingRoom& from);

  inline IndTerJoinedGroupMeetingRoom& operator=(const IndTerJoinedGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerJoinedGroupMeetingRoom& default_instance();

  void Swap(IndTerJoinedGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  IndTerJoinedGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerJoinedGroupMeetingRoom& from);
  void MergeFrom(const IndTerJoinedGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerJoinedGroupMeetingRoom_IPPORT IPPORT;
  typedef IndTerJoinedGroupMeetingRoom_AddrInfo AddrInfo;
  typedef IndTerJoinedGroupMeetingRoom_DomainInfo DomainInfo;
  typedef IndTerJoinedGroupMeetingRoom_MediaAddrInfo MediaAddrInfo;

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 channelid = 2;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 2;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 4;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 5;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 5;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string gmrname = 6;
  inline bool has_gmrname() const;
  inline void clear_gmrname();
  static const int kGmrnameFieldNumber = 6;
  inline const ::std::string& gmrname() const;
  inline void set_gmrname(const ::std::string& value);
  inline void set_gmrname(const char* value);
  inline void set_gmrname(const char* value, size_t size);
  inline ::std::string* mutable_gmrname();
  inline ::std::string* release_gmrname();
  inline void set_allocated_gmrname(::std::string* gmrname);

  // optional uint32 mediaencryptalg = 7;
  inline bool has_mediaencryptalg() const;
  inline void clear_mediaencryptalg();
  static const int kMediaencryptalgFieldNumber = 7;
  inline ::google::protobuf::uint32 mediaencryptalg() const;
  inline void set_mediaencryptalg(::google::protobuf::uint32 value);

  // optional bytes encryptionkey = 8;
  inline bool has_encryptionkey() const;
  inline void clear_encryptionkey();
  static const int kEncryptionkeyFieldNumber = 8;
  inline const ::std::string& encryptionkey() const;
  inline void set_encryptionkey(const ::std::string& value);
  inline void set_encryptionkey(const char* value);
  inline void set_encryptionkey(const void* value, size_t size);
  inline ::std::string* mutable_encryptionkey();
  inline ::std::string* release_encryptionkey();
  inline void set_allocated_encryptionkey(::std::string* encryptionkey);

  // optional string subject = 9;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 9;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional .SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo mediaaddrs = 10;
  inline bool has_mediaaddrs() const;
  inline void clear_mediaaddrs();
  static const int kMediaaddrsFieldNumber = 10;
  inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo& mediaaddrs() const;
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* mutable_mediaaddrs();
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* release_mediaaddrs();
  inline void set_allocated_mediaaddrs(::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* mediaaddrs);

  // optional string domainname = 11;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 11;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo svraddrs = 12;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 12;
  inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo domains = 13;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 13;
  inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerJoinedGroupMeetingRoom)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_gmrname();
  inline void clear_has_gmrname();
  inline void set_has_mediaencryptalg();
  inline void clear_has_mediaencryptalg();
  inline void set_has_encryptionkey();
  inline void clear_has_encryptionkey();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_mediaaddrs();
  inline void clear_has_mediaaddrs();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 gmrtype_;
  ::google::protobuf::uint32 gmrid_;
  ::std::string* gmrname_;
  ::std::string* encryptionkey_;
  ::std::string* subject_;
  ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* mediaaddrs_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo > domains_;
  ::google::protobuf::uint32 mediaencryptalg_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerJoinedGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class IndTerEnterGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerEnterGroupMeetingRoom_IPPORT();
  virtual ~IndTerEnterGroupMeetingRoom_IPPORT();

  IndTerEnterGroupMeetingRoom_IPPORT(const IndTerEnterGroupMeetingRoom_IPPORT& from);

  inline IndTerEnterGroupMeetingRoom_IPPORT& operator=(const IndTerEnterGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerEnterGroupMeetingRoom_IPPORT& default_instance();

  void Swap(IndTerEnterGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerEnterGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerEnterGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const IndTerEnterGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerEnterGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerEnterGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerEnterGroupMeetingRoom_AddrInfo();
  virtual ~IndTerEnterGroupMeetingRoom_AddrInfo();

  IndTerEnterGroupMeetingRoom_AddrInfo(const IndTerEnterGroupMeetingRoom_AddrInfo& from);

  inline IndTerEnterGroupMeetingRoom_AddrInfo& operator=(const IndTerEnterGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerEnterGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(IndTerEnterGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerEnterGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerEnterGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const IndTerEnterGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerEnterGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerEnterGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerEnterGroupMeetingRoom_DomainInfo();
  virtual ~IndTerEnterGroupMeetingRoom_DomainInfo();

  IndTerEnterGroupMeetingRoom_DomainInfo(const IndTerEnterGroupMeetingRoom_DomainInfo& from);

  inline IndTerEnterGroupMeetingRoom_DomainInfo& operator=(const IndTerEnterGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerEnterGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(IndTerEnterGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerEnterGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerEnterGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const IndTerEnterGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerEnterGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerEnterGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  IndTerEnterGroupMeetingRoom();
  virtual ~IndTerEnterGroupMeetingRoom();

  IndTerEnterGroupMeetingRoom(const IndTerEnterGroupMeetingRoom& from);

  inline IndTerEnterGroupMeetingRoom& operator=(const IndTerEnterGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerEnterGroupMeetingRoom& default_instance();

  void Swap(IndTerEnterGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  IndTerEnterGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerEnterGroupMeetingRoom& from);
  void MergeFrom(const IndTerEnterGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerEnterGroupMeetingRoom_IPPORT IPPORT;
  typedef IndTerEnterGroupMeetingRoom_AddrInfo AddrInfo;
  typedef IndTerEnterGroupMeetingRoom_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // optional uint32 entergmrteruid = 6;
  inline bool has_entergmrteruid() const;
  inline void clear_entergmrteruid();
  static const int kEntergmrteruidFieldNumber = 6;
  inline ::google::protobuf::uint32 entergmrteruid() const;
  inline void set_entergmrteruid(::google::protobuf::uint32 value);

  // optional string entergmrtername = 7;
  inline bool has_entergmrtername() const;
  inline void clear_entergmrtername();
  static const int kEntergmrternameFieldNumber = 7;
  inline const ::std::string& entergmrtername() const;
  inline void set_entergmrtername(const ::std::string& value);
  inline void set_entergmrtername(const char* value);
  inline void set_entergmrtername(const char* value, size_t size);
  inline ::std::string* mutable_entergmrtername();
  inline ::std::string* release_entergmrtername();
  inline void set_allocated_entergmrtername(::std::string* entergmrtername);

  // optional string entergmrterdname = 8;
  inline bool has_entergmrterdname() const;
  inline void clear_entergmrterdname();
  static const int kEntergmrterdnameFieldNumber = 8;
  inline const ::std::string& entergmrterdname() const;
  inline void set_entergmrterdname(const ::std::string& value);
  inline void set_entergmrterdname(const char* value);
  inline void set_entergmrterdname(const char* value, size_t size);
  inline ::std::string* mutable_entergmrterdname();
  inline ::std::string* release_entergmrterdname();
  inline void set_allocated_entergmrterdname(::std::string* entergmrterdname);

  // optional uint32 entergmrtype = 9;
  inline bool has_entergmrtype() const;
  inline void clear_entergmrtype();
  static const int kEntergmrtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 entergmrtype() const;
  inline void set_entergmrtype(::google::protobuf::uint32 value);

  // optional uint32 entergmrid = 10;
  inline bool has_entergmrid() const;
  inline void clear_entergmrid();
  static const int kEntergmridFieldNumber = 10;
  inline ::google::protobuf::uint32 entergmrid() const;
  inline void set_entergmrid(::google::protobuf::uint32 value);

  // optional string entergmrname = 11;
  inline bool has_entergmrname() const;
  inline void clear_entergmrname();
  static const int kEntergmrnameFieldNumber = 11;
  inline const ::std::string& entergmrname() const;
  inline void set_entergmrname(const ::std::string& value);
  inline void set_entergmrname(const char* value);
  inline void set_entergmrname(const char* value, size_t size);
  inline ::std::string* mutable_entergmrname();
  inline ::std::string* release_entergmrname();
  inline void set_allocated_entergmrname(::std::string* entergmrname);

  // optional uint32 entergmrtermtype = 12;
  inline bool has_entergmrtermtype() const;
  inline void clear_entergmrtermtype();
  static const int kEntergmrtermtypeFieldNumber = 12;
  inline ::google::protobuf::uint32 entergmrtermtype() const;
  inline void set_entergmrtermtype(::google::protobuf::uint32 value);

  // optional uint32 entergmrterprodtype = 13;
  inline bool has_entergmrterprodtype() const;
  inline void clear_entergmrterprodtype();
  static const int kEntergmrterprodtypeFieldNumber = 13;
  inline ::google::protobuf::uint32 entergmrterprodtype() const;
  inline void set_entergmrterprodtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerEnterGroupMeetingRoom)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_entergmrteruid();
  inline void clear_has_entergmrteruid();
  inline void set_has_entergmrtername();
  inline void clear_has_entergmrtername();
  inline void set_has_entergmrterdname();
  inline void clear_has_entergmrterdname();
  inline void set_has_entergmrtype();
  inline void clear_has_entergmrtype();
  inline void set_has_entergmrid();
  inline void clear_has_entergmrid();
  inline void set_has_entergmrname();
  inline void clear_has_entergmrname();
  inline void set_has_entergmrtermtype();
  inline void clear_has_entergmrtermtype();
  inline void set_has_entergmrterprodtype();
  inline void clear_has_entergmrterprodtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 entergmrteruid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo > domains_;
  ::std::string* entergmrtername_;
  ::std::string* entergmrterdname_;
  ::google::protobuf::uint32 entergmrtype_;
  ::google::protobuf::uint32 entergmrid_;
  ::std::string* entergmrname_;
  ::google::protobuf::uint32 entergmrtermtype_;
  ::google::protobuf::uint32 entergmrterprodtype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerEnterGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class IndTerLeaveGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerLeaveGroupMeetingRoom_IPPORT();
  virtual ~IndTerLeaveGroupMeetingRoom_IPPORT();

  IndTerLeaveGroupMeetingRoom_IPPORT(const IndTerLeaveGroupMeetingRoom_IPPORT& from);

  inline IndTerLeaveGroupMeetingRoom_IPPORT& operator=(const IndTerLeaveGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerLeaveGroupMeetingRoom_IPPORT& default_instance();

  void Swap(IndTerLeaveGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerLeaveGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerLeaveGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const IndTerLeaveGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerLeaveGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerLeaveGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerLeaveGroupMeetingRoom_AddrInfo();
  virtual ~IndTerLeaveGroupMeetingRoom_AddrInfo();

  IndTerLeaveGroupMeetingRoom_AddrInfo(const IndTerLeaveGroupMeetingRoom_AddrInfo& from);

  inline IndTerLeaveGroupMeetingRoom_AddrInfo& operator=(const IndTerLeaveGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerLeaveGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(IndTerLeaveGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerLeaveGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerLeaveGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const IndTerLeaveGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerLeaveGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerLeaveGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerLeaveGroupMeetingRoom_DomainInfo();
  virtual ~IndTerLeaveGroupMeetingRoom_DomainInfo();

  IndTerLeaveGroupMeetingRoom_DomainInfo(const IndTerLeaveGroupMeetingRoom_DomainInfo& from);

  inline IndTerLeaveGroupMeetingRoom_DomainInfo& operator=(const IndTerLeaveGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerLeaveGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(IndTerLeaveGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerLeaveGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerLeaveGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const IndTerLeaveGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerLeaveGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerLeaveGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  IndTerLeaveGroupMeetingRoom();
  virtual ~IndTerLeaveGroupMeetingRoom();

  IndTerLeaveGroupMeetingRoom(const IndTerLeaveGroupMeetingRoom& from);

  inline IndTerLeaveGroupMeetingRoom& operator=(const IndTerLeaveGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerLeaveGroupMeetingRoom& default_instance();

  void Swap(IndTerLeaveGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  IndTerLeaveGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerLeaveGroupMeetingRoom& from);
  void MergeFrom(const IndTerLeaveGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerLeaveGroupMeetingRoom_IPPORT IPPORT;
  typedef IndTerLeaveGroupMeetingRoom_AddrInfo AddrInfo;
  typedef IndTerLeaveGroupMeetingRoom_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional string domainname = 3;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 3;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo svraddrs = 4;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 4;
  inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo domains = 5;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 5;
  inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // optional uint32 leavesuid = 6;
  inline bool has_leavesuid() const;
  inline void clear_leavesuid();
  static const int kLeavesuidFieldNumber = 6;
  inline ::google::protobuf::uint32 leavesuid() const;
  inline void set_leavesuid(::google::protobuf::uint32 value);

  // optional string leavetername = 7;
  inline bool has_leavetername() const;
  inline void clear_leavetername();
  static const int kLeaveternameFieldNumber = 7;
  inline const ::std::string& leavetername() const;
  inline void set_leavetername(const ::std::string& value);
  inline void set_leavetername(const char* value);
  inline void set_leavetername(const char* value, size_t size);
  inline ::std::string* mutable_leavetername();
  inline ::std::string* release_leavetername();
  inline void set_allocated_leavetername(::std::string* leavetername);

  // optional string leaveterdname = 8;
  inline bool has_leaveterdname() const;
  inline void clear_leaveterdname();
  static const int kLeaveterdnameFieldNumber = 8;
  inline const ::std::string& leaveterdname() const;
  inline void set_leaveterdname(const ::std::string& value);
  inline void set_leaveterdname(const char* value);
  inline void set_leaveterdname(const char* value, size_t size);
  inline ::std::string* mutable_leaveterdname();
  inline ::std::string* release_leaveterdname();
  inline void set_allocated_leaveterdname(::std::string* leaveterdname);

  // optional uint32 leavegmrtype = 9;
  inline bool has_leavegmrtype() const;
  inline void clear_leavegmrtype();
  static const int kLeavegmrtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 leavegmrtype() const;
  inline void set_leavegmrtype(::google::protobuf::uint32 value);

  // optional uint32 leavegmrid = 10;
  inline bool has_leavegmrid() const;
  inline void clear_leavegmrid();
  static const int kLeavegmridFieldNumber = 10;
  inline ::google::protobuf::uint32 leavegmrid() const;
  inline void set_leavegmrid(::google::protobuf::uint32 value);

  // optional string leavegmrname = 11;
  inline bool has_leavegmrname() const;
  inline void clear_leavegmrname();
  static const int kLeavegmrnameFieldNumber = 11;
  inline const ::std::string& leavegmrname() const;
  inline void set_leavegmrname(const ::std::string& value);
  inline void set_leavegmrname(const char* value);
  inline void set_leavegmrname(const char* value, size_t size);
  inline ::std::string* mutable_leavegmrname();
  inline ::std::string* release_leavegmrname();
  inline void set_allocated_leavegmrname(::std::string* leavegmrname);

  // optional string leavereason = 12;
  inline bool has_leavereason() const;
  inline void clear_leavereason();
  static const int kLeavereasonFieldNumber = 12;
  inline const ::std::string& leavereason() const;
  inline void set_leavereason(const ::std::string& value);
  inline void set_leavereason(const char* value);
  inline void set_leavereason(const char* value, size_t size);
  inline ::std::string* mutable_leavereason();
  inline ::std::string* release_leavereason();
  inline void set_allocated_leavereason(::std::string* leavereason);

  // optional uint32 errorcode = 13;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 13;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional uint32 leavetermtype = 14;
  inline bool has_leavetermtype() const;
  inline void clear_leavetermtype();
  static const int kLeavetermtypeFieldNumber = 14;
  inline ::google::protobuf::uint32 leavetermtype() const;
  inline void set_leavetermtype(::google::protobuf::uint32 value);

  // optional uint32 leaveterprodtype = 15;
  inline bool has_leaveterprodtype() const;
  inline void clear_leaveterprodtype();
  static const int kLeaveterprodtypeFieldNumber = 15;
  inline ::google::protobuf::uint32 leaveterprodtype() const;
  inline void set_leaveterprodtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerLeaveGroupMeetingRoom)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_leavesuid();
  inline void clear_has_leavesuid();
  inline void set_has_leavetername();
  inline void clear_has_leavetername();
  inline void set_has_leaveterdname();
  inline void clear_has_leaveterdname();
  inline void set_has_leavegmrtype();
  inline void clear_has_leavegmrtype();
  inline void set_has_leavegmrid();
  inline void clear_has_leavegmrid();
  inline void set_has_leavegmrname();
  inline void clear_has_leavegmrname();
  inline void set_has_leavereason();
  inline void clear_has_leavereason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_leavetermtype();
  inline void clear_has_leavetermtype();
  inline void set_has_leaveterprodtype();
  inline void clear_has_leaveterprodtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* domainname_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 leavesuid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo > domains_;
  ::std::string* leavetername_;
  ::std::string* leaveterdname_;
  ::google::protobuf::uint32 leavegmrtype_;
  ::google::protobuf::uint32 leavegmrid_;
  ::std::string* leavegmrname_;
  ::std::string* leavereason_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::uint32 leavetermtype_;
  ::google::protobuf::uint32 leaveterprodtype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerLeaveGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class IndMCBeatToGroupMeetingRoomTer_IPPORT : public ::google::protobuf::Message {
 public:
  IndMCBeatToGroupMeetingRoomTer_IPPORT();
  virtual ~IndMCBeatToGroupMeetingRoomTer_IPPORT();

  IndMCBeatToGroupMeetingRoomTer_IPPORT(const IndMCBeatToGroupMeetingRoomTer_IPPORT& from);

  inline IndMCBeatToGroupMeetingRoomTer_IPPORT& operator=(const IndMCBeatToGroupMeetingRoomTer_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCBeatToGroupMeetingRoomTer_IPPORT& default_instance();

  void Swap(IndMCBeatToGroupMeetingRoomTer_IPPORT* other);

  // implements Message ----------------------------------------------

  IndMCBeatToGroupMeetingRoomTer_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCBeatToGroupMeetingRoomTer_IPPORT& from);
  void MergeFrom(const IndMCBeatToGroupMeetingRoomTer_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndMCBeatToGroupMeetingRoomTer_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndMCBeatToGroupMeetingRoomTer_AddrInfo : public ::google::protobuf::Message {
 public:
  IndMCBeatToGroupMeetingRoomTer_AddrInfo();
  virtual ~IndMCBeatToGroupMeetingRoomTer_AddrInfo();

  IndMCBeatToGroupMeetingRoomTer_AddrInfo(const IndMCBeatToGroupMeetingRoomTer_AddrInfo& from);

  inline IndMCBeatToGroupMeetingRoomTer_AddrInfo& operator=(const IndMCBeatToGroupMeetingRoomTer_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCBeatToGroupMeetingRoomTer_AddrInfo& default_instance();

  void Swap(IndMCBeatToGroupMeetingRoomTer_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndMCBeatToGroupMeetingRoomTer_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCBeatToGroupMeetingRoomTer_AddrInfo& from);
  void MergeFrom(const IndMCBeatToGroupMeetingRoomTer_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndMCBeatToGroupMeetingRoomTer_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndMCBeatToGroupMeetingRoomTer_DomainInfo : public ::google::protobuf::Message {
 public:
  IndMCBeatToGroupMeetingRoomTer_DomainInfo();
  virtual ~IndMCBeatToGroupMeetingRoomTer_DomainInfo();

  IndMCBeatToGroupMeetingRoomTer_DomainInfo(const IndMCBeatToGroupMeetingRoomTer_DomainInfo& from);

  inline IndMCBeatToGroupMeetingRoomTer_DomainInfo& operator=(const IndMCBeatToGroupMeetingRoomTer_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCBeatToGroupMeetingRoomTer_DomainInfo& default_instance();

  void Swap(IndMCBeatToGroupMeetingRoomTer_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndMCBeatToGroupMeetingRoomTer_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCBeatToGroupMeetingRoomTer_DomainInfo& from);
  void MergeFrom(const IndMCBeatToGroupMeetingRoomTer_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndMCBeatToGroupMeetingRoomTer_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndMCBeatToGroupMeetingRoomTer : public ::google::protobuf::Message {
 public:
  IndMCBeatToGroupMeetingRoomTer();
  virtual ~IndMCBeatToGroupMeetingRoomTer();

  IndMCBeatToGroupMeetingRoomTer(const IndMCBeatToGroupMeetingRoomTer& from);

  inline IndMCBeatToGroupMeetingRoomTer& operator=(const IndMCBeatToGroupMeetingRoomTer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCBeatToGroupMeetingRoomTer& default_instance();

  void Swap(IndMCBeatToGroupMeetingRoomTer* other);

  // implements Message ----------------------------------------------

  IndMCBeatToGroupMeetingRoomTer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCBeatToGroupMeetingRoomTer& from);
  void MergeFrom(const IndMCBeatToGroupMeetingRoomTer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndMCBeatToGroupMeetingRoomTer_IPPORT IPPORT;
  typedef IndMCBeatToGroupMeetingRoomTer_AddrInfo AddrInfo;
  typedef IndMCBeatToGroupMeetingRoomTer_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 3;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 4;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo >*
      mutable_domains();

  // optional uint32 termtype = 8;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 8;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 9;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 9;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCBeatToGroupMeetingRoomTer)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 gmrtype_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo > svraddrs_;
  ::google::protobuf::uint32 gmrid_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo > domains_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndMCBeatToGroupMeetingRoomTer* default_instance_;
};
// -------------------------------------------------------------------

class IndTerTransferToOtherGroupMeetingRoom_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerTransferToOtherGroupMeetingRoom_IPPORT();
  virtual ~IndTerTransferToOtherGroupMeetingRoom_IPPORT();

  IndTerTransferToOtherGroupMeetingRoom_IPPORT(const IndTerTransferToOtherGroupMeetingRoom_IPPORT& from);

  inline IndTerTransferToOtherGroupMeetingRoom_IPPORT& operator=(const IndTerTransferToOtherGroupMeetingRoom_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerTransferToOtherGroupMeetingRoom_IPPORT& default_instance();

  void Swap(IndTerTransferToOtherGroupMeetingRoom_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerTransferToOtherGroupMeetingRoom_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerTransferToOtherGroupMeetingRoom_IPPORT& from);
  void MergeFrom(const IndTerTransferToOtherGroupMeetingRoom_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerTransferToOtherGroupMeetingRoom_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerTransferToOtherGroupMeetingRoom_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerTransferToOtherGroupMeetingRoom_AddrInfo();
  virtual ~IndTerTransferToOtherGroupMeetingRoom_AddrInfo();

  IndTerTransferToOtherGroupMeetingRoom_AddrInfo(const IndTerTransferToOtherGroupMeetingRoom_AddrInfo& from);

  inline IndTerTransferToOtherGroupMeetingRoom_AddrInfo& operator=(const IndTerTransferToOtherGroupMeetingRoom_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerTransferToOtherGroupMeetingRoom_AddrInfo& default_instance();

  void Swap(IndTerTransferToOtherGroupMeetingRoom_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerTransferToOtherGroupMeetingRoom_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerTransferToOtherGroupMeetingRoom_AddrInfo& from);
  void MergeFrom(const IndTerTransferToOtherGroupMeetingRoom_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerTransferToOtherGroupMeetingRoom_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerTransferToOtherGroupMeetingRoom_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerTransferToOtherGroupMeetingRoom_DomainInfo();
  virtual ~IndTerTransferToOtherGroupMeetingRoom_DomainInfo();

  IndTerTransferToOtherGroupMeetingRoom_DomainInfo(const IndTerTransferToOtherGroupMeetingRoom_DomainInfo& from);

  inline IndTerTransferToOtherGroupMeetingRoom_DomainInfo& operator=(const IndTerTransferToOtherGroupMeetingRoom_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerTransferToOtherGroupMeetingRoom_DomainInfo& default_instance();

  void Swap(IndTerTransferToOtherGroupMeetingRoom_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerTransferToOtherGroupMeetingRoom_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerTransferToOtherGroupMeetingRoom_DomainInfo& from);
  void MergeFrom(const IndTerTransferToOtherGroupMeetingRoom_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerTransferToOtherGroupMeetingRoom_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerTransferToOtherGroupMeetingRoom : public ::google::protobuf::Message {
 public:
  IndTerTransferToOtherGroupMeetingRoom();
  virtual ~IndTerTransferToOtherGroupMeetingRoom();

  IndTerTransferToOtherGroupMeetingRoom(const IndTerTransferToOtherGroupMeetingRoom& from);

  inline IndTerTransferToOtherGroupMeetingRoom& operator=(const IndTerTransferToOtherGroupMeetingRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerTransferToOtherGroupMeetingRoom& default_instance();

  void Swap(IndTerTransferToOtherGroupMeetingRoom* other);

  // implements Message ----------------------------------------------

  IndTerTransferToOtherGroupMeetingRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerTransferToOtherGroupMeetingRoom& from);
  void MergeFrom(const IndTerTransferToOtherGroupMeetingRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerTransferToOtherGroupMeetingRoom_IPPORT IPPORT;
  typedef IndTerTransferToOtherGroupMeetingRoom_AddrInfo AddrInfo;
  typedef IndTerTransferToOtherGroupMeetingRoom_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 gmrtype = 3;
  inline bool has_gmrtype() const;
  inline void clear_gmrtype();
  static const int kGmrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 gmrtype() const;
  inline void set_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 gmrid = 4;
  inline bool has_gmrid() const;
  inline void clear_gmrid();
  static const int kGmridFieldNumber = 4;
  inline ::google::protobuf::uint32 gmrid() const;
  inline void set_gmrid(::google::protobuf::uint32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo >*
      mutable_domains();

  // optional string to_dname = 8;
  inline bool has_to_dname() const;
  inline void clear_to_dname();
  static const int kToDnameFieldNumber = 8;
  inline const ::std::string& to_dname() const;
  inline void set_to_dname(const ::std::string& value);
  inline void set_to_dname(const char* value);
  inline void set_to_dname(const char* value, size_t size);
  inline ::std::string* mutable_to_dname();
  inline ::std::string* release_to_dname();
  inline void set_allocated_to_dname(::std::string* to_dname);

  // optional uint64 to_confid = 9;
  inline bool has_to_confid() const;
  inline void clear_to_confid();
  static const int kToConfidFieldNumber = 9;
  inline ::google::protobuf::uint64 to_confid() const;
  inline void set_to_confid(::google::protobuf::uint64 value);

  // optional uint32 to_gmrtype = 10;
  inline bool has_to_gmrtype() const;
  inline void clear_to_gmrtype();
  static const int kToGmrtypeFieldNumber = 10;
  inline ::google::protobuf::uint32 to_gmrtype() const;
  inline void set_to_gmrtype(::google::protobuf::uint32 value);

  // optional uint32 to_gmrid = 11;
  inline bool has_to_gmrid() const;
  inline void clear_to_gmrid();
  static const int kToGmridFieldNumber = 11;
  inline ::google::protobuf::uint32 to_gmrid() const;
  inline void set_to_gmrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerTransferToOtherGroupMeetingRoom)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_gmrtype();
  inline void clear_has_gmrtype();
  inline void set_has_gmrid();
  inline void clear_has_gmrid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_to_dname();
  inline void clear_has_to_dname();
  inline void set_has_to_confid();
  inline void clear_has_to_confid();
  inline void set_has_to_gmrtype();
  inline void clear_has_to_gmrtype();
  inline void set_has_to_gmrid();
  inline void clear_has_to_gmrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 gmrtype_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo > domains_;
  ::google::protobuf::uint32 gmrid_;
  ::google::protobuf::uint32 to_gmrtype_;
  ::std::string* to_dname_;
  ::google::protobuf::uint64 to_confid_;
  ::google::protobuf::uint32 to_gmrid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerTransferToOtherGroupMeetingRoom* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfCallWaitingState_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerConfCallWaitingState_IPPORT();
  virtual ~IndTerConfCallWaitingState_IPPORT();

  IndTerConfCallWaitingState_IPPORT(const IndTerConfCallWaitingState_IPPORT& from);

  inline IndTerConfCallWaitingState_IPPORT& operator=(const IndTerConfCallWaitingState_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfCallWaitingState_IPPORT& default_instance();

  void Swap(IndTerConfCallWaitingState_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerConfCallWaitingState_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfCallWaitingState_IPPORT& from);
  void MergeFrom(const IndTerConfCallWaitingState_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfCallWaitingState.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfCallWaitingState_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfCallWaitingState_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerConfCallWaitingState_AddrInfo();
  virtual ~IndTerConfCallWaitingState_AddrInfo();

  IndTerConfCallWaitingState_AddrInfo(const IndTerConfCallWaitingState_AddrInfo& from);

  inline IndTerConfCallWaitingState_AddrInfo& operator=(const IndTerConfCallWaitingState_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfCallWaitingState_AddrInfo& default_instance();

  void Swap(IndTerConfCallWaitingState_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerConfCallWaitingState_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfCallWaitingState_AddrInfo& from);
  void MergeFrom(const IndTerConfCallWaitingState_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerConfCallWaitingState.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerConfCallWaitingState_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerConfCallWaitingState_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerConfCallWaitingState_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfCallWaitingState.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfCallWaitingState_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfCallWaitingState_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerConfCallWaitingState_DomainInfo();
  virtual ~IndTerConfCallWaitingState_DomainInfo();

  IndTerConfCallWaitingState_DomainInfo(const IndTerConfCallWaitingState_DomainInfo& from);

  inline IndTerConfCallWaitingState_DomainInfo& operator=(const IndTerConfCallWaitingState_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfCallWaitingState_DomainInfo& default_instance();

  void Swap(IndTerConfCallWaitingState_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerConfCallWaitingState_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfCallWaitingState_DomainInfo& from);
  void MergeFrom(const IndTerConfCallWaitingState_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfCallWaitingState.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfCallWaitingState_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfCallWaitingState : public ::google::protobuf::Message {
 public:
  IndTerConfCallWaitingState();
  virtual ~IndTerConfCallWaitingState();

  IndTerConfCallWaitingState(const IndTerConfCallWaitingState& from);

  inline IndTerConfCallWaitingState& operator=(const IndTerConfCallWaitingState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfCallWaitingState& default_instance();

  void Swap(IndTerConfCallWaitingState* other);

  // implements Message ----------------------------------------------

  IndTerConfCallWaitingState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfCallWaitingState& from);
  void MergeFrom(const IndTerConfCallWaitingState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerConfCallWaitingState_IPPORT IPPORT;
  typedef IndTerConfCallWaitingState_AddrInfo AddrInfo;
  typedef IndTerConfCallWaitingState_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional bool ccwstate = 3;
  inline bool has_ccwstate() const;
  inline void clear_ccwstate();
  static const int kCcwstateFieldNumber = 3;
  inline bool ccwstate() const;
  inline void set_ccwstate(bool value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerConfCallWaitingState.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndTerConfCallWaitingState_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerConfCallWaitingState_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerConfCallWaitingState_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerConfCallWaitingState.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndTerConfCallWaitingState_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerConfCallWaitingState_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerConfCallWaitingState_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfCallWaitingState)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_ccwstate();
  inline void clear_has_ccwstate();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  bool ccwstate_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfCallWaitingState* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoTokenOwner_IPPORT : public ::google::protobuf::Message {
 public:
  IndAssistVideoTokenOwner_IPPORT();
  virtual ~IndAssistVideoTokenOwner_IPPORT();

  IndAssistVideoTokenOwner_IPPORT(const IndAssistVideoTokenOwner_IPPORT& from);

  inline IndAssistVideoTokenOwner_IPPORT& operator=(const IndAssistVideoTokenOwner_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoTokenOwner_IPPORT& default_instance();

  void Swap(IndAssistVideoTokenOwner_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAssistVideoTokenOwner_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoTokenOwner_IPPORT& from);
  void MergeFrom(const IndAssistVideoTokenOwner_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoTokenOwner.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoTokenOwner_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoTokenOwner_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoTokenOwner_AddrInfo();
  virtual ~IndAssistVideoTokenOwner_AddrInfo();

  IndAssistVideoTokenOwner_AddrInfo(const IndAssistVideoTokenOwner_AddrInfo& from);

  inline IndAssistVideoTokenOwner_AddrInfo& operator=(const IndAssistVideoTokenOwner_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoTokenOwner_AddrInfo& default_instance();

  void Swap(IndAssistVideoTokenOwner_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoTokenOwner_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoTokenOwner_AddrInfo& from);
  void MergeFrom(const IndAssistVideoTokenOwner_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAssistVideoTokenOwner.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAssistVideoTokenOwner_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAssistVideoTokenOwner_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAssistVideoTokenOwner_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoTokenOwner.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoTokenOwner_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoTokenOwner_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoTokenOwner_DomainInfo();
  virtual ~IndAssistVideoTokenOwner_DomainInfo();

  IndAssistVideoTokenOwner_DomainInfo(const IndAssistVideoTokenOwner_DomainInfo& from);

  inline IndAssistVideoTokenOwner_DomainInfo& operator=(const IndAssistVideoTokenOwner_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoTokenOwner_DomainInfo& default_instance();

  void Swap(IndAssistVideoTokenOwner_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoTokenOwner_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoTokenOwner_DomainInfo& from);
  void MergeFrom(const IndAssistVideoTokenOwner_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoTokenOwner.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoTokenOwner_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoTokenOwner : public ::google::protobuf::Message {
 public:
  IndAssistVideoTokenOwner();
  virtual ~IndAssistVideoTokenOwner();

  IndAssistVideoTokenOwner(const IndAssistVideoTokenOwner& from);

  inline IndAssistVideoTokenOwner& operator=(const IndAssistVideoTokenOwner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoTokenOwner& default_instance();

  void Swap(IndAssistVideoTokenOwner* other);

  // implements Message ----------------------------------------------

  IndAssistVideoTokenOwner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoTokenOwner& from);
  void MergeFrom(const IndAssistVideoTokenOwner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAssistVideoTokenOwner_IPPORT IPPORT;
  typedef IndAssistVideoTokenOwner_AddrInfo AddrInfo;
  typedef IndAssistVideoTokenOwner_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 avtoterid = 1;
  inline bool has_avtoterid() const;
  inline void clear_avtoterid();
  static const int kAvtoteridFieldNumber = 1;
  inline ::google::protobuf::uint32 avtoterid() const;
  inline void set_avtoterid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAssistVideoTokenOwner.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAssistVideoTokenOwner.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoTokenOwner)
 private:
  inline void set_has_avtoterid();
  inline void clear_has_avtoterid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 avtoterid_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoTokenOwner* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOn_IPPORT : public ::google::protobuf::Message {
 public:
  IndAssistVideoOn_IPPORT();
  virtual ~IndAssistVideoOn_IPPORT();

  IndAssistVideoOn_IPPORT(const IndAssistVideoOn_IPPORT& from);

  inline IndAssistVideoOn_IPPORT& operator=(const IndAssistVideoOn_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOn_IPPORT& default_instance();

  void Swap(IndAssistVideoOn_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOn_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOn_IPPORT& from);
  void MergeFrom(const IndAssistVideoOn_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOn.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOn_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOn_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoOn_AddrInfo();
  virtual ~IndAssistVideoOn_AddrInfo();

  IndAssistVideoOn_AddrInfo(const IndAssistVideoOn_AddrInfo& from);

  inline IndAssistVideoOn_AddrInfo& operator=(const IndAssistVideoOn_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOn_AddrInfo& default_instance();

  void Swap(IndAssistVideoOn_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOn_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOn_AddrInfo& from);
  void MergeFrom(const IndAssistVideoOn_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAssistVideoOn.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAssistVideoOn_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAssistVideoOn_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAssistVideoOn_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOn.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOn_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOn_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoOn_DomainInfo();
  virtual ~IndAssistVideoOn_DomainInfo();

  IndAssistVideoOn_DomainInfo(const IndAssistVideoOn_DomainInfo& from);

  inline IndAssistVideoOn_DomainInfo& operator=(const IndAssistVideoOn_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOn_DomainInfo& default_instance();

  void Swap(IndAssistVideoOn_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOn_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOn_DomainInfo& from);
  void MergeFrom(const IndAssistVideoOn_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOn.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOn_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOn : public ::google::protobuf::Message {
 public:
  IndAssistVideoOn();
  virtual ~IndAssistVideoOn();

  IndAssistVideoOn(const IndAssistVideoOn& from);

  inline IndAssistVideoOn& operator=(const IndAssistVideoOn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOn& default_instance();

  void Swap(IndAssistVideoOn* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOn& from);
  void MergeFrom(const IndAssistVideoOn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAssistVideoOn_IPPORT IPPORT;
  typedef IndAssistVideoOn_AddrInfo AddrInfo;
  typedef IndAssistVideoOn_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 avterid = 1;
  inline bool has_avterid() const;
  inline void clear_avterid();
  static const int kAvteridFieldNumber = 1;
  inline ::google::protobuf::uint32 avterid() const;
  inline void set_avterid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAssistVideoOn.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndAssistVideoOn_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAssistVideoOn_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAssistVideoOn_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAssistVideoOn.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndAssistVideoOn_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAssistVideoOn_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAssistVideoOn_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_DomainInfo >*
      mutable_domains();

  // optional uint32 avtype = 7;
  inline bool has_avtype() const;
  inline void clear_avtype();
  static const int kAvtypeFieldNumber = 7;
  inline ::google::protobuf::uint32 avtype() const;
  inline void set_avtype(::google::protobuf::uint32 value);

  // optional uint32 sharedaudio = 8;
  inline bool has_sharedaudio() const;
  inline void clear_sharedaudio();
  static const int kSharedaudioFieldNumber = 8;
  inline ::google::protobuf::uint32 sharedaudio() const;
  inline void set_sharedaudio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOn)
 private:
  inline void set_has_avterid();
  inline void clear_has_avterid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_avtype();
  inline void clear_has_avtype();
  inline void set_has_sharedaudio();
  inline void clear_has_sharedaudio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 avterid_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_DomainInfo > domains_;
  ::google::protobuf::uint32 avtype_;
  ::google::protobuf::uint32 sharedaudio_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOn* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOff_IPPORT : public ::google::protobuf::Message {
 public:
  IndAssistVideoOff_IPPORT();
  virtual ~IndAssistVideoOff_IPPORT();

  IndAssistVideoOff_IPPORT(const IndAssistVideoOff_IPPORT& from);

  inline IndAssistVideoOff_IPPORT& operator=(const IndAssistVideoOff_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOff_IPPORT& default_instance();

  void Swap(IndAssistVideoOff_IPPORT* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOff_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOff_IPPORT& from);
  void MergeFrom(const IndAssistVideoOff_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOff.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOff_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOff_AddrInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoOff_AddrInfo();
  virtual ~IndAssistVideoOff_AddrInfo();

  IndAssistVideoOff_AddrInfo(const IndAssistVideoOff_AddrInfo& from);

  inline IndAssistVideoOff_AddrInfo& operator=(const IndAssistVideoOff_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOff_AddrInfo& default_instance();

  void Swap(IndAssistVideoOff_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOff_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOff_AddrInfo& from);
  void MergeFrom(const IndAssistVideoOff_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndAssistVideoOff.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndAssistVideoOff_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndAssistVideoOff_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndAssistVideoOff_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOff.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOff_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOff_DomainInfo : public ::google::protobuf::Message {
 public:
  IndAssistVideoOff_DomainInfo();
  virtual ~IndAssistVideoOff_DomainInfo();

  IndAssistVideoOff_DomainInfo(const IndAssistVideoOff_DomainInfo& from);

  inline IndAssistVideoOff_DomainInfo& operator=(const IndAssistVideoOff_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOff_DomainInfo& default_instance();

  void Swap(IndAssistVideoOff_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOff_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOff_DomainInfo& from);
  void MergeFrom(const IndAssistVideoOff_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOff.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOff_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndAssistVideoOff : public ::google::protobuf::Message {
 public:
  IndAssistVideoOff();
  virtual ~IndAssistVideoOff();

  IndAssistVideoOff(const IndAssistVideoOff& from);

  inline IndAssistVideoOff& operator=(const IndAssistVideoOff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndAssistVideoOff& default_instance();

  void Swap(IndAssistVideoOff* other);

  // implements Message ----------------------------------------------

  IndAssistVideoOff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndAssistVideoOff& from);
  void MergeFrom(const IndAssistVideoOff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndAssistVideoOff_IPPORT IPPORT;
  typedef IndAssistVideoOff_AddrInfo AddrInfo;
  typedef IndAssistVideoOff_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 avterid = 1;
  inline bool has_avterid() const;
  inline void clear_avterid();
  static const int kAvteridFieldNumber = 1;
  inline ::google::protobuf::uint32 avterid() const;
  inline void set_avterid(::google::protobuf::uint32 value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndAssistVideoOff.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndAssistVideoOff_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndAssistVideoOff_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndAssistVideoOff_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndAssistVideoOff.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndAssistVideoOff_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndAssistVideoOff_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndAssistVideoOff_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndAssistVideoOff)
 private:
  inline void set_has_avterid();
  inline void clear_has_avterid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 avterid_;
  ::google::protobuf::uint32 terid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndAssistVideoOff* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList_IPPORT();
  virtual ~IndTerModifyConfCallList_IPPORT();

  IndTerModifyConfCallList_IPPORT(const IndTerModifyConfCallList_IPPORT& from);

  inline IndTerModifyConfCallList_IPPORT& operator=(const IndTerModifyConfCallList_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList_IPPORT& default_instance();

  void Swap(IndTerModifyConfCallList_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList_IPPORT& from);
  void MergeFrom(const IndTerModifyConfCallList_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList_AddrInfo();
  virtual ~IndTerModifyConfCallList_AddrInfo();

  IndTerModifyConfCallList_AddrInfo(const IndTerModifyConfCallList_AddrInfo& from);

  inline IndTerModifyConfCallList_AddrInfo& operator=(const IndTerModifyConfCallList_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList_AddrInfo& default_instance();

  void Swap(IndTerModifyConfCallList_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList_AddrInfo& from);
  void MergeFrom(const IndTerModifyConfCallList_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerModifyConfCallList.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerModifyConfCallList_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerModifyConfCallList_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerModifyConfCallList_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList_DomainInfo();
  virtual ~IndTerModifyConfCallList_DomainInfo();

  IndTerModifyConfCallList_DomainInfo(const IndTerModifyConfCallList_DomainInfo& from);

  inline IndTerModifyConfCallList_DomainInfo& operator=(const IndTerModifyConfCallList_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList_DomainInfo& default_instance();

  void Swap(IndTerModifyConfCallList_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList_DomainInfo& from);
  void MergeFrom(const IndTerModifyConfCallList_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList_ParticipantInfo : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList_ParticipantInfo();
  virtual ~IndTerModifyConfCallList_ParticipantInfo();

  IndTerModifyConfCallList_ParticipantInfo(const IndTerModifyConfCallList_ParticipantInfo& from);

  inline IndTerModifyConfCallList_ParticipantInfo& operator=(const IndTerModifyConfCallList_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList_ParticipantInfo& default_instance();

  void Swap(IndTerModifyConfCallList_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList_ParticipantInfo& from);
  void MergeFrom(const IndTerModifyConfCallList_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList_RollCallInfo : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList_RollCallInfo();
  virtual ~IndTerModifyConfCallList_RollCallInfo();

  IndTerModifyConfCallList_RollCallInfo(const IndTerModifyConfCallList_RollCallInfo& from);

  inline IndTerModifyConfCallList_RollCallInfo& operator=(const IndTerModifyConfCallList_RollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList_RollCallInfo& default_instance();

  void Swap(IndTerModifyConfCallList_RollCallInfo* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList_RollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList_RollCallInfo& from);
  void MergeFrom(const IndTerModifyConfCallList_RollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // repeated .SRMsgs.IndTerModifyConfCallList.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList.RollCallInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList_RollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerModifyConfCallList : public ::google::protobuf::Message {
 public:
  IndTerModifyConfCallList();
  virtual ~IndTerModifyConfCallList();

  IndTerModifyConfCallList(const IndTerModifyConfCallList& from);

  inline IndTerModifyConfCallList& operator=(const IndTerModifyConfCallList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerModifyConfCallList& default_instance();

  void Swap(IndTerModifyConfCallList* other);

  // implements Message ----------------------------------------------

  IndTerModifyConfCallList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerModifyConfCallList& from);
  void MergeFrom(const IndTerModifyConfCallList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerModifyConfCallList_IPPORT IPPORT;
  typedef IndTerModifyConfCallList_AddrInfo AddrInfo;
  typedef IndTerModifyConfCallList_DomainInfo DomainInfo;
  typedef IndTerModifyConfCallList_ParticipantInfo ParticipantInfo;
  typedef IndTerModifyConfCallList_RollCallInfo RollCallInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 optype = 3;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 3;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndTerModifyConfCallList.RollCallInfo rollcalllist = 4;
  inline bool has_rollcalllist() const;
  inline void clear_rollcalllist();
  static const int kRollcalllistFieldNumber = 4;
  inline const ::SRMsgs::IndTerModifyConfCallList_RollCallInfo& rollcalllist() const;
  inline ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* mutable_rollcalllist();
  inline ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* release_rollcalllist();
  inline void set_allocated_rollcalllist(::SRMsgs::IndTerModifyConfCallList_RollCallInfo* rollcalllist);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerModifyConfCallList.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndTerModifyConfCallList_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerModifyConfCallList_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerModifyConfCallList_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerModifyConfCallList.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndTerModifyConfCallList_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerModifyConfCallList_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerModifyConfCallList_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerModifyConfCallList)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_rollcalllist();
  inline void clear_has_rollcalllist();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 optype_;
  ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* rollcalllist_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerModifyConfCallList* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfRollCallState_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerConfRollCallState_IPPORT();
  virtual ~IndTerConfRollCallState_IPPORT();

  IndTerConfRollCallState_IPPORT(const IndTerConfRollCallState_IPPORT& from);

  inline IndTerConfRollCallState_IPPORT& operator=(const IndTerConfRollCallState_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfRollCallState_IPPORT& default_instance();

  void Swap(IndTerConfRollCallState_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerConfRollCallState_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfRollCallState_IPPORT& from);
  void MergeFrom(const IndTerConfRollCallState_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfRollCallState.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfRollCallState_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfRollCallState_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerConfRollCallState_AddrInfo();
  virtual ~IndTerConfRollCallState_AddrInfo();

  IndTerConfRollCallState_AddrInfo(const IndTerConfRollCallState_AddrInfo& from);

  inline IndTerConfRollCallState_AddrInfo& operator=(const IndTerConfRollCallState_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfRollCallState_AddrInfo& default_instance();

  void Swap(IndTerConfRollCallState_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerConfRollCallState_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfRollCallState_AddrInfo& from);
  void MergeFrom(const IndTerConfRollCallState_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerConfRollCallState.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerConfRollCallState_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerConfRollCallState_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerConfRollCallState_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfRollCallState.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfRollCallState_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfRollCallState_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerConfRollCallState_DomainInfo();
  virtual ~IndTerConfRollCallState_DomainInfo();

  IndTerConfRollCallState_DomainInfo(const IndTerConfRollCallState_DomainInfo& from);

  inline IndTerConfRollCallState_DomainInfo& operator=(const IndTerConfRollCallState_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfRollCallState_DomainInfo& default_instance();

  void Swap(IndTerConfRollCallState_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerConfRollCallState_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfRollCallState_DomainInfo& from);
  void MergeFrom(const IndTerConfRollCallState_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfRollCallState.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfRollCallState_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerConfRollCallState : public ::google::protobuf::Message {
 public:
  IndTerConfRollCallState();
  virtual ~IndTerConfRollCallState();

  IndTerConfRollCallState(const IndTerConfRollCallState& from);

  inline IndTerConfRollCallState& operator=(const IndTerConfRollCallState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerConfRollCallState& default_instance();

  void Swap(IndTerConfRollCallState* other);

  // implements Message ----------------------------------------------

  IndTerConfRollCallState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerConfRollCallState& from);
  void MergeFrom(const IndTerConfRollCallState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerConfRollCallState_IPPORT IPPORT;
  typedef IndTerConfRollCallState_AddrInfo AddrInfo;
  typedef IndTerConfRollCallState_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional bool isrollcall = 3;
  inline bool has_isrollcall() const;
  inline void clear_isrollcall();
  static const int kIsrollcallFieldNumber = 3;
  inline bool isrollcall() const;
  inline void set_isrollcall(bool value);

  // optional sint32 rcitersuid = 4;
  inline bool has_rcitersuid() const;
  inline void clear_rcitersuid();
  static const int kRcitersuidFieldNumber = 4;
  inline ::google::protobuf::int32 rcitersuid() const;
  inline void set_rcitersuid(::google::protobuf::int32 value);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerConfRollCallState.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndTerConfRollCallState_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerConfRollCallState_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerConfRollCallState_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerConfRollCallState.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndTerConfRollCallState_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerConfRollCallState_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerConfRollCallState_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerConfRollCallState)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_isrollcall();
  inline void clear_has_isrollcall();
  inline void set_has_rcitersuid();
  inline void clear_has_rcitersuid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  bool isrollcall_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_DomainInfo > domains_;
  ::google::protobuf::int32 rcitersuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerConfRollCallState* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTer_IPPORT : public ::google::protobuf::Message {
 public:
  IndRollCallTer_IPPORT();
  virtual ~IndRollCallTer_IPPORT();

  IndRollCallTer_IPPORT(const IndRollCallTer_IPPORT& from);

  inline IndRollCallTer_IPPORT& operator=(const IndRollCallTer_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTer_IPPORT& default_instance();

  void Swap(IndRollCallTer_IPPORT* other);

  // implements Message ----------------------------------------------

  IndRollCallTer_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTer_IPPORT& from);
  void MergeFrom(const IndRollCallTer_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTer.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTer_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTer_AddrInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTer_AddrInfo();
  virtual ~IndRollCallTer_AddrInfo();

  IndRollCallTer_AddrInfo(const IndRollCallTer_AddrInfo& from);

  inline IndRollCallTer_AddrInfo& operator=(const IndRollCallTer_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTer_AddrInfo& default_instance();

  void Swap(IndRollCallTer_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTer_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTer_AddrInfo& from);
  void MergeFrom(const IndRollCallTer_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndRollCallTer.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndRollCallTer_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndRollCallTer_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndRollCallTer_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTer.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTer_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTer_DomainInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTer_DomainInfo();
  virtual ~IndRollCallTer_DomainInfo();

  IndRollCallTer_DomainInfo(const IndRollCallTer_DomainInfo& from);

  inline IndRollCallTer_DomainInfo& operator=(const IndRollCallTer_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTer_DomainInfo& default_instance();

  void Swap(IndRollCallTer_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTer_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTer_DomainInfo& from);
  void MergeFrom(const IndRollCallTer_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTer.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTer_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTer_RollCallTerInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTer_RollCallTerInfo();
  virtual ~IndRollCallTer_RollCallTerInfo();

  IndRollCallTer_RollCallTerInfo(const IndRollCallTer_RollCallTerInfo& from);

  inline IndRollCallTer_RollCallTerInfo& operator=(const IndRollCallTer_RollCallTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTer_RollCallTerInfo& default_instance();

  void Swap(IndRollCallTer_RollCallTerInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTer_RollCallTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTer_RollCallTerInfo& from);
  void MergeFrom(const IndRollCallTer_RollCallTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // optional uint32 psuid = 3;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 3;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTer.RollCallTerInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTer_RollCallTerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTer : public ::google::protobuf::Message {
 public:
  IndRollCallTer();
  virtual ~IndRollCallTer();

  IndRollCallTer(const IndRollCallTer& from);

  inline IndRollCallTer& operator=(const IndRollCallTer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTer& default_instance();

  void Swap(IndRollCallTer* other);

  // implements Message ----------------------------------------------

  IndRollCallTer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTer& from);
  void MergeFrom(const IndRollCallTer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndRollCallTer_IPPORT IPPORT;
  typedef IndRollCallTer_AddrInfo AddrInfo;
  typedef IndRollCallTer_DomainInfo DomainInfo;
  typedef IndRollCallTer_RollCallTerInfo RollCallTerInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndRollCallTer.RollCallTerInfo currcterinfo = 3;
  inline bool has_currcterinfo() const;
  inline void clear_currcterinfo();
  static const int kCurrcterinfoFieldNumber = 3;
  inline const ::SRMsgs::IndRollCallTer_RollCallTerInfo& currcterinfo() const;
  inline ::SRMsgs::IndRollCallTer_RollCallTerInfo* mutable_currcterinfo();
  inline ::SRMsgs::IndRollCallTer_RollCallTerInfo* release_currcterinfo();
  inline void set_allocated_currcterinfo(::SRMsgs::IndRollCallTer_RollCallTerInfo* currcterinfo);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndRollCallTer.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndRollCallTer_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndRollCallTer_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndRollCallTer_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndRollCallTer.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndRollCallTer_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndRollCallTer_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndRollCallTer_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTer)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_currcterinfo();
  inline void clear_has_currcterinfo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::SRMsgs::IndRollCallTer_RollCallTerInfo* currcterinfo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTer* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTerResult_IPPORT : public ::google::protobuf::Message {
 public:
  IndRollCallTerResult_IPPORT();
  virtual ~IndRollCallTerResult_IPPORT();

  IndRollCallTerResult_IPPORT(const IndRollCallTerResult_IPPORT& from);

  inline IndRollCallTerResult_IPPORT& operator=(const IndRollCallTerResult_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTerResult_IPPORT& default_instance();

  void Swap(IndRollCallTerResult_IPPORT* other);

  // implements Message ----------------------------------------------

  IndRollCallTerResult_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTerResult_IPPORT& from);
  void MergeFrom(const IndRollCallTerResult_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTerResult.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTerResult_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTerResult_AddrInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTerResult_AddrInfo();
  virtual ~IndRollCallTerResult_AddrInfo();

  IndRollCallTerResult_AddrInfo(const IndRollCallTerResult_AddrInfo& from);

  inline IndRollCallTerResult_AddrInfo& operator=(const IndRollCallTerResult_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTerResult_AddrInfo& default_instance();

  void Swap(IndRollCallTerResult_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTerResult_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTerResult_AddrInfo& from);
  void MergeFrom(const IndRollCallTerResult_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndRollCallTerResult.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndRollCallTerResult_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndRollCallTerResult_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndRollCallTerResult_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTerResult.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTerResult_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTerResult_DomainInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTerResult_DomainInfo();
  virtual ~IndRollCallTerResult_DomainInfo();

  IndRollCallTerResult_DomainInfo(const IndRollCallTerResult_DomainInfo& from);

  inline IndRollCallTerResult_DomainInfo& operator=(const IndRollCallTerResult_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTerResult_DomainInfo& default_instance();

  void Swap(IndRollCallTerResult_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTerResult_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTerResult_DomainInfo& from);
  void MergeFrom(const IndRollCallTerResult_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTerResult.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTerResult_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTerResult_RollCallTerInfo : public ::google::protobuf::Message {
 public:
  IndRollCallTerResult_RollCallTerInfo();
  virtual ~IndRollCallTerResult_RollCallTerInfo();

  IndRollCallTerResult_RollCallTerInfo(const IndRollCallTerResult_RollCallTerInfo& from);

  inline IndRollCallTerResult_RollCallTerInfo& operator=(const IndRollCallTerResult_RollCallTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTerResult_RollCallTerInfo& default_instance();

  void Swap(IndRollCallTerResult_RollCallTerInfo* other);

  // implements Message ----------------------------------------------

  IndRollCallTerResult_RollCallTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTerResult_RollCallTerInfo& from);
  void MergeFrom(const IndRollCallTerResult_RollCallTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // optional uint32 psuid = 3;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 3;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string rcstarttime = 5;
  inline bool has_rcstarttime() const;
  inline void clear_rcstarttime();
  static const int kRcstarttimeFieldNumber = 5;
  inline const ::std::string& rcstarttime() const;
  inline void set_rcstarttime(const ::std::string& value);
  inline void set_rcstarttime(const char* value);
  inline void set_rcstarttime(const char* value, size_t size);
  inline ::std::string* mutable_rcstarttime();
  inline ::std::string* release_rcstarttime();
  inline void set_allocated_rcstarttime(::std::string* rcstarttime);

  // optional string rcendtime = 6;
  inline bool has_rcendtime() const;
  inline void clear_rcendtime();
  static const int kRcendtimeFieldNumber = 6;
  inline const ::std::string& rcendtime() const;
  inline void set_rcendtime(const ::std::string& value);
  inline void set_rcendtime(const char* value);
  inline void set_rcendtime(const char* value, size_t size);
  inline ::std::string* mutable_rcendtime();
  inline ::std::string* release_rcendtime();
  inline void set_allocated_rcendtime(::std::string* rcendtime);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTerResult.RollCallTerInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_rcstarttime();
  inline void clear_has_rcstarttime();
  inline void set_has_rcendtime();
  inline void clear_has_rcendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::std::string* nickname_;
  ::std::string* rcstarttime_;
  ::std::string* rcendtime_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTerResult_RollCallTerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndRollCallTerResult : public ::google::protobuf::Message {
 public:
  IndRollCallTerResult();
  virtual ~IndRollCallTerResult();

  IndRollCallTerResult(const IndRollCallTerResult& from);

  inline IndRollCallTerResult& operator=(const IndRollCallTerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRollCallTerResult& default_instance();

  void Swap(IndRollCallTerResult* other);

  // implements Message ----------------------------------------------

  IndRollCallTerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRollCallTerResult& from);
  void MergeFrom(const IndRollCallTerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndRollCallTerResult_IPPORT IPPORT;
  typedef IndRollCallTerResult_AddrInfo AddrInfo;
  typedef IndRollCallTerResult_DomainInfo DomainInfo;
  typedef IndRollCallTerResult_RollCallTerInfo RollCallTerInfo;

  // accessors -------------------------------------------------------

  // optional bool ispass = 1;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIspassFieldNumber = 1;
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 3;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 3;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndRollCallTerResult.RollCallTerInfo rcterinfo = 4;
  inline bool has_rcterinfo() const;
  inline void clear_rcterinfo();
  static const int kRcterinfoFieldNumber = 4;
  inline const ::SRMsgs::IndRollCallTerResult_RollCallTerInfo& rcterinfo() const;
  inline ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* mutable_rcterinfo();
  inline ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* release_rcterinfo();
  inline void set_allocated_rcterinfo(::SRMsgs::IndRollCallTerResult_RollCallTerInfo* rcterinfo);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndRollCallTerResult.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndRollCallTerResult_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndRollCallTerResult_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndRollCallTerResult_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndRollCallTerResult.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndRollCallTerResult_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndRollCallTerResult_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndRollCallTerResult_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRollCallTerResult)
 private:
  inline void set_has_ispass();
  inline void clear_has_ispass();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_rcterinfo();
  inline void clear_has_rcterinfo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool ispass_;
  ::google::protobuf::uint32 terid_;
  ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* rcterinfo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndRollCallTerResult* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideolabel_IPPORT : public ::google::protobuf::Message {
 public:
  IndSendAssistVideolabel_IPPORT();
  virtual ~IndSendAssistVideolabel_IPPORT();

  IndSendAssistVideolabel_IPPORT(const IndSendAssistVideolabel_IPPORT& from);

  inline IndSendAssistVideolabel_IPPORT& operator=(const IndSendAssistVideolabel_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideolabel_IPPORT& default_instance();

  void Swap(IndSendAssistVideolabel_IPPORT* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideolabel_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideolabel_IPPORT& from);
  void MergeFrom(const IndSendAssistVideolabel_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideolabel.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideolabel_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideolabel_AddrInfo : public ::google::protobuf::Message {
 public:
  IndSendAssistVideolabel_AddrInfo();
  virtual ~IndSendAssistVideolabel_AddrInfo();

  IndSendAssistVideolabel_AddrInfo(const IndSendAssistVideolabel_AddrInfo& from);

  inline IndSendAssistVideolabel_AddrInfo& operator=(const IndSendAssistVideolabel_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideolabel_AddrInfo& default_instance();

  void Swap(IndSendAssistVideolabel_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideolabel_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideolabel_AddrInfo& from);
  void MergeFrom(const IndSendAssistVideolabel_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndSendAssistVideolabel.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndSendAssistVideolabel_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndSendAssistVideolabel_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndSendAssistVideolabel_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideolabel.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideolabel_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideolabel_DomainInfo : public ::google::protobuf::Message {
 public:
  IndSendAssistVideolabel_DomainInfo();
  virtual ~IndSendAssistVideolabel_DomainInfo();

  IndSendAssistVideolabel_DomainInfo(const IndSendAssistVideolabel_DomainInfo& from);

  inline IndSendAssistVideolabel_DomainInfo& operator=(const IndSendAssistVideolabel_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideolabel_DomainInfo& default_instance();

  void Swap(IndSendAssistVideolabel_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideolabel_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideolabel_DomainInfo& from);
  void MergeFrom(const IndSendAssistVideolabel_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideolabel.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideolabel_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSendAssistVideolabel : public ::google::protobuf::Message {
 public:
  IndSendAssistVideolabel();
  virtual ~IndSendAssistVideolabel();

  IndSendAssistVideolabel(const IndSendAssistVideolabel& from);

  inline IndSendAssistVideolabel& operator=(const IndSendAssistVideolabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSendAssistVideolabel& default_instance();

  void Swap(IndSendAssistVideolabel* other);

  // implements Message ----------------------------------------------

  IndSendAssistVideolabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSendAssistVideolabel& from);
  void MergeFrom(const IndSendAssistVideolabel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndSendAssistVideolabel_IPPORT IPPORT;
  typedef IndSendAssistVideolabel_AddrInfo AddrInfo;
  typedef IndSendAssistVideolabel_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 labelterid = 3;
  inline bool has_labelterid() const;
  inline void clear_labelterid();
  static const int kLabelteridFieldNumber = 3;
  inline ::google::protobuf::uint32 labelterid() const;
  inline void set_labelterid(::google::protobuf::uint32 value);

  // optional uint32 operatetype = 4;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperatetypeFieldNumber = 4;
  inline ::google::protobuf::uint32 operatetype() const;
  inline void set_operatetype(::google::protobuf::uint32 value);

  // optional uint32 labletype = 5;
  inline bool has_labletype() const;
  inline void clear_labletype();
  static const int kLabletypeFieldNumber = 5;
  inline ::google::protobuf::uint32 labletype() const;
  inline void set_labletype(::google::protobuf::uint32 value);

  // optional uint32 lablesize = 6;
  inline bool has_lablesize() const;
  inline void clear_lablesize();
  static const int kLablesizeFieldNumber = 6;
  inline ::google::protobuf::uint32 lablesize() const;
  inline void set_lablesize(::google::protobuf::uint32 value);

  // optional uint32 lablecolor = 7;
  inline bool has_lablecolor() const;
  inline void clear_lablecolor();
  static const int kLablecolorFieldNumber = 7;
  inline ::google::protobuf::uint32 lablecolor() const;
  inline void set_lablecolor(::google::protobuf::uint32 value);

  // optional uint32 linetype = 8;
  inline bool has_linetype() const;
  inline void clear_linetype();
  static const int kLinetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 linetype() const;
  inline void set_linetype(::google::protobuf::uint32 value);

  // optional uint32 leftuppoints_x = 9;
  inline bool has_leftuppoints_x() const;
  inline void clear_leftuppoints_x();
  static const int kLeftuppointsXFieldNumber = 9;
  inline ::google::protobuf::uint32 leftuppoints_x() const;
  inline void set_leftuppoints_x(::google::protobuf::uint32 value);

  // optional uint32 leftuppoints_y = 10;
  inline bool has_leftuppoints_y() const;
  inline void clear_leftuppoints_y();
  static const int kLeftuppointsYFieldNumber = 10;
  inline ::google::protobuf::uint32 leftuppoints_y() const;
  inline void set_leftuppoints_y(::google::protobuf::uint32 value);

  // optional uint32 rightdownpoints_x = 11;
  inline bool has_rightdownpoints_x() const;
  inline void clear_rightdownpoints_x();
  static const int kRightdownpointsXFieldNumber = 11;
  inline ::google::protobuf::uint32 rightdownpoints_x() const;
  inline void set_rightdownpoints_x(::google::protobuf::uint32 value);

  // optional uint32 rightdownpoints_y = 12;
  inline bool has_rightdownpoints_y() const;
  inline void clear_rightdownpoints_y();
  static const int kRightdownpointsYFieldNumber = 12;
  inline ::google::protobuf::uint32 rightdownpoints_y() const;
  inline void set_rightdownpoints_y(::google::protobuf::uint32 value);

  // optional uint32 resolution_x = 13;
  inline bool has_resolution_x() const;
  inline void clear_resolution_x();
  static const int kResolutionXFieldNumber = 13;
  inline ::google::protobuf::uint32 resolution_x() const;
  inline void set_resolution_x(::google::protobuf::uint32 value);

  // optional uint32 resolution_y = 14;
  inline bool has_resolution_y() const;
  inline void clear_resolution_y();
  static const int kResolutionYFieldNumber = 14;
  inline ::google::protobuf::uint32 resolution_y() const;
  inline void set_resolution_y(::google::protobuf::uint32 value);

  // optional string domainname = 15;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 15;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndSendAssistVideolabel.AddrInfo svraddrs = 16;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 16;
  inline const ::SRMsgs::IndSendAssistVideolabel_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndSendAssistVideolabel_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndSendAssistVideolabel_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndSendAssistVideolabel.DomainInfo domains = 17;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 17;
  inline const ::SRMsgs::IndSendAssistVideolabel_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndSendAssistVideolabel_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndSendAssistVideolabel_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSendAssistVideolabel)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_labelterid();
  inline void clear_has_labelterid();
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_labletype();
  inline void clear_has_labletype();
  inline void set_has_lablesize();
  inline void clear_has_lablesize();
  inline void set_has_lablecolor();
  inline void clear_has_lablecolor();
  inline void set_has_linetype();
  inline void clear_has_linetype();
  inline void set_has_leftuppoints_x();
  inline void clear_has_leftuppoints_x();
  inline void set_has_leftuppoints_y();
  inline void clear_has_leftuppoints_y();
  inline void set_has_rightdownpoints_x();
  inline void clear_has_rightdownpoints_x();
  inline void set_has_rightdownpoints_y();
  inline void clear_has_rightdownpoints_y();
  inline void set_has_resolution_x();
  inline void clear_has_resolution_x();
  inline void set_has_resolution_y();
  inline void clear_has_resolution_y();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 labelterid_;
  ::google::protobuf::uint32 operatetype_;
  ::google::protobuf::uint32 labletype_;
  ::google::protobuf::uint32 lablesize_;
  ::google::protobuf::uint32 lablecolor_;
  ::google::protobuf::uint32 linetype_;
  ::google::protobuf::uint32 leftuppoints_x_;
  ::google::protobuf::uint32 leftuppoints_y_;
  ::google::protobuf::uint32 rightdownpoints_x_;
  ::google::protobuf::uint32 rightdownpoints_y_;
  ::google::protobuf::uint32 resolution_x_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_DomainInfo > domains_;
  ::google::protobuf::uint32 resolution_y_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndSendAssistVideolabel* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeConfCryptoKey_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerChangeConfCryptoKey_IPPORT();
  virtual ~IndTerChangeConfCryptoKey_IPPORT();

  IndTerChangeConfCryptoKey_IPPORT(const IndTerChangeConfCryptoKey_IPPORT& from);

  inline IndTerChangeConfCryptoKey_IPPORT& operator=(const IndTerChangeConfCryptoKey_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeConfCryptoKey_IPPORT& default_instance();

  void Swap(IndTerChangeConfCryptoKey_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerChangeConfCryptoKey_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeConfCryptoKey_IPPORT& from);
  void MergeFrom(const IndTerChangeConfCryptoKey_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeConfCryptoKey.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeConfCryptoKey_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeConfCryptoKey_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeConfCryptoKey_AddrInfo();
  virtual ~IndTerChangeConfCryptoKey_AddrInfo();

  IndTerChangeConfCryptoKey_AddrInfo(const IndTerChangeConfCryptoKey_AddrInfo& from);

  inline IndTerChangeConfCryptoKey_AddrInfo& operator=(const IndTerChangeConfCryptoKey_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeConfCryptoKey_AddrInfo& default_instance();

  void Swap(IndTerChangeConfCryptoKey_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeConfCryptoKey_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeConfCryptoKey_AddrInfo& from);
  void MergeFrom(const IndTerChangeConfCryptoKey_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerChangeConfCryptoKey.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeConfCryptoKey_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeConfCryptoKey_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeConfCryptoKey_DomainInfo();
  virtual ~IndTerChangeConfCryptoKey_DomainInfo();

  IndTerChangeConfCryptoKey_DomainInfo(const IndTerChangeConfCryptoKey_DomainInfo& from);

  inline IndTerChangeConfCryptoKey_DomainInfo& operator=(const IndTerChangeConfCryptoKey_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeConfCryptoKey_DomainInfo& default_instance();

  void Swap(IndTerChangeConfCryptoKey_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeConfCryptoKey_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeConfCryptoKey_DomainInfo& from);
  void MergeFrom(const IndTerChangeConfCryptoKey_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeConfCryptoKey_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeConfCryptoKey : public ::google::protobuf::Message {
 public:
  IndTerChangeConfCryptoKey();
  virtual ~IndTerChangeConfCryptoKey();

  IndTerChangeConfCryptoKey(const IndTerChangeConfCryptoKey& from);

  inline IndTerChangeConfCryptoKey& operator=(const IndTerChangeConfCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeConfCryptoKey& default_instance();

  void Swap(IndTerChangeConfCryptoKey* other);

  // implements Message ----------------------------------------------

  IndTerChangeConfCryptoKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeConfCryptoKey& from);
  void MergeFrom(const IndTerChangeConfCryptoKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerChangeConfCryptoKey_IPPORT IPPORT;
  typedef IndTerChangeConfCryptoKey_AddrInfo AddrInfo;
  typedef IndTerChangeConfCryptoKey_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional string cryptokey = 3;
  inline bool has_cryptokey() const;
  inline void clear_cryptokey();
  static const int kCryptokeyFieldNumber = 3;
  inline const ::std::string& cryptokey() const;
  inline void set_cryptokey(const ::std::string& value);
  inline void set_cryptokey(const char* value);
  inline void set_cryptokey(const char* value, size_t size);
  inline ::std::string* mutable_cryptokey();
  inline ::std::string* release_cryptokey();
  inline void set_allocated_cryptokey(::std::string* cryptokey);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerChangeConfCryptoKey.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerChangeConfCryptoKey.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeConfCryptoKey)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_cryptokey();
  inline void clear_has_cryptokey();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::std::string* cryptokey_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeConfCryptoKey* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourceName_IPPORT : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourceName_IPPORT();
  virtual ~IndChangeVideoSourceName_IPPORT();

  IndChangeVideoSourceName_IPPORT(const IndChangeVideoSourceName_IPPORT& from);

  inline IndChangeVideoSourceName_IPPORT& operator=(const IndChangeVideoSourceName_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourceName_IPPORT& default_instance();

  void Swap(IndChangeVideoSourceName_IPPORT* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourceName_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourceName_IPPORT& from);
  void MergeFrom(const IndChangeVideoSourceName_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourceName.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourceName_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourceName_AddrInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourceName_AddrInfo();
  virtual ~IndChangeVideoSourceName_AddrInfo();

  IndChangeVideoSourceName_AddrInfo(const IndChangeVideoSourceName_AddrInfo& from);

  inline IndChangeVideoSourceName_AddrInfo& operator=(const IndChangeVideoSourceName_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourceName_AddrInfo& default_instance();

  void Swap(IndChangeVideoSourceName_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourceName_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourceName_AddrInfo& from);
  void MergeFrom(const IndChangeVideoSourceName_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangeVideoSourceName.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndChangeVideoSourceName_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndChangeVideoSourceName_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndChangeVideoSourceName_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourceName.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourceName_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourceName_DomainInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourceName_DomainInfo();
  virtual ~IndChangeVideoSourceName_DomainInfo();

  IndChangeVideoSourceName_DomainInfo(const IndChangeVideoSourceName_DomainInfo& from);

  inline IndChangeVideoSourceName_DomainInfo& operator=(const IndChangeVideoSourceName_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourceName_DomainInfo& default_instance();

  void Swap(IndChangeVideoSourceName_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourceName_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourceName_DomainInfo& from);
  void MergeFrom(const IndChangeVideoSourceName_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourceName.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourceName_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourceName_SourceInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourceName_SourceInfo();
  virtual ~IndChangeVideoSourceName_SourceInfo();

  IndChangeVideoSourceName_SourceInfo(const IndChangeVideoSourceName_SourceInfo& from);

  inline IndChangeVideoSourceName_SourceInfo& operator=(const IndChangeVideoSourceName_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourceName_SourceInfo& default_instance();

  void Swap(IndChangeVideoSourceName_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourceName_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourceName_SourceInfo& from);
  void MergeFrom(const IndChangeVideoSourceName_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourceName.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourceName_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourceName : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourceName();
  virtual ~IndChangeVideoSourceName();

  IndChangeVideoSourceName(const IndChangeVideoSourceName& from);

  inline IndChangeVideoSourceName& operator=(const IndChangeVideoSourceName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourceName& default_instance();

  void Swap(IndChangeVideoSourceName* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourceName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourceName& from);
  void MergeFrom(const IndChangeVideoSourceName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndChangeVideoSourceName_IPPORT IPPORT;
  typedef IndChangeVideoSourceName_AddrInfo AddrInfo;
  typedef IndChangeVideoSourceName_DomainInfo DomainInfo;
  typedef IndChangeVideoSourceName_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 changeterid = 3;
  inline bool has_changeterid() const;
  inline void clear_changeterid();
  static const int kChangeteridFieldNumber = 3;
  inline ::google::protobuf::uint32 changeterid() const;
  inline void set_changeterid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangeVideoSourceName.SourceInfo srcinfos = 4;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 4;
  inline const ::SRMsgs::IndChangeVideoSourceName_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::IndChangeVideoSourceName_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::IndChangeVideoSourceName_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndChangeVideoSourceName.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndChangeVideoSourceName_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndChangeVideoSourceName_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndChangeVideoSourceName_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndChangeVideoSourceName.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndChangeVideoSourceName_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndChangeVideoSourceName_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndChangeVideoSourceName_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourceName)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_changeterid();
  inline void clear_has_changeterid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 changeterid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourceName* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourcePriority_IPPORT : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourcePriority_IPPORT();
  virtual ~IndChangeVideoSourcePriority_IPPORT();

  IndChangeVideoSourcePriority_IPPORT(const IndChangeVideoSourcePriority_IPPORT& from);

  inline IndChangeVideoSourcePriority_IPPORT& operator=(const IndChangeVideoSourcePriority_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourcePriority_IPPORT& default_instance();

  void Swap(IndChangeVideoSourcePriority_IPPORT* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourcePriority_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourcePriority_IPPORT& from);
  void MergeFrom(const IndChangeVideoSourcePriority_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourcePriority.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourcePriority_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourcePriority_AddrInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourcePriority_AddrInfo();
  virtual ~IndChangeVideoSourcePriority_AddrInfo();

  IndChangeVideoSourcePriority_AddrInfo(const IndChangeVideoSourcePriority_AddrInfo& from);

  inline IndChangeVideoSourcePriority_AddrInfo& operator=(const IndChangeVideoSourcePriority_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourcePriority_AddrInfo& default_instance();

  void Swap(IndChangeVideoSourcePriority_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourcePriority_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourcePriority_AddrInfo& from);
  void MergeFrom(const IndChangeVideoSourcePriority_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangeVideoSourcePriority.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndChangeVideoSourcePriority_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndChangeVideoSourcePriority_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndChangeVideoSourcePriority_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourcePriority.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourcePriority_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourcePriority_DomainInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourcePriority_DomainInfo();
  virtual ~IndChangeVideoSourcePriority_DomainInfo();

  IndChangeVideoSourcePriority_DomainInfo(const IndChangeVideoSourcePriority_DomainInfo& from);

  inline IndChangeVideoSourcePriority_DomainInfo& operator=(const IndChangeVideoSourcePriority_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourcePriority_DomainInfo& default_instance();

  void Swap(IndChangeVideoSourcePriority_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourcePriority_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourcePriority_DomainInfo& from);
  void MergeFrom(const IndChangeVideoSourcePriority_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourcePriority.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourcePriority_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourcePriority_SourceInfo : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourcePriority_SourceInfo();
  virtual ~IndChangeVideoSourcePriority_SourceInfo();

  IndChangeVideoSourcePriority_SourceInfo(const IndChangeVideoSourcePriority_SourceInfo& from);

  inline IndChangeVideoSourcePriority_SourceInfo& operator=(const IndChangeVideoSourcePriority_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourcePriority_SourceInfo& default_instance();

  void Swap(IndChangeVideoSourcePriority_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourcePriority_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourcePriority_SourceInfo& from);
  void MergeFrom(const IndChangeVideoSourcePriority_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional uint32 priority = 2;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 2;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourcePriority.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourcePriority_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeVideoSourcePriority : public ::google::protobuf::Message {
 public:
  IndChangeVideoSourcePriority();
  virtual ~IndChangeVideoSourcePriority();

  IndChangeVideoSourcePriority(const IndChangeVideoSourcePriority& from);

  inline IndChangeVideoSourcePriority& operator=(const IndChangeVideoSourcePriority& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeVideoSourcePriority& default_instance();

  void Swap(IndChangeVideoSourcePriority* other);

  // implements Message ----------------------------------------------

  IndChangeVideoSourcePriority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeVideoSourcePriority& from);
  void MergeFrom(const IndChangeVideoSourcePriority& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndChangeVideoSourcePriority_IPPORT IPPORT;
  typedef IndChangeVideoSourcePriority_AddrInfo AddrInfo;
  typedef IndChangeVideoSourcePriority_DomainInfo DomainInfo;
  typedef IndChangeVideoSourcePriority_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 changeterid = 3;
  inline bool has_changeterid() const;
  inline void clear_changeterid();
  static const int kChangeteridFieldNumber = 3;
  inline ::google::protobuf::uint32 changeterid() const;
  inline void set_changeterid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangeVideoSourcePriority.SourceInfo allsrcinfos = 4;
  inline int allsrcinfos_size() const;
  inline void clear_allsrcinfos();
  static const int kAllsrcinfosFieldNumber = 4;
  inline const ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo& allsrcinfos(int index) const;
  inline ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo* mutable_allsrcinfos(int index);
  inline ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo* add_allsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo >&
      allsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo >*
      mutable_allsrcinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndChangeVideoSourcePriority.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndChangeVideoSourcePriority.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeVideoSourcePriority)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_changeterid();
  inline void clear_has_changeterid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 changeterid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo > allsrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeVideoSourcePriority* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_IPPORT();
  virtual ~IndTerChangeDeviceInfos_IPPORT();

  IndTerChangeDeviceInfos_IPPORT(const IndTerChangeDeviceInfos_IPPORT& from);

  inline IndTerChangeDeviceInfos_IPPORT& operator=(const IndTerChangeDeviceInfos_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_IPPORT& default_instance();

  void Swap(IndTerChangeDeviceInfos_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_IPPORT& from);
  void MergeFrom(const IndTerChangeDeviceInfos_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_AddrInfo();
  virtual ~IndTerChangeDeviceInfos_AddrInfo();

  IndTerChangeDeviceInfos_AddrInfo(const IndTerChangeDeviceInfos_AddrInfo& from);

  inline IndTerChangeDeviceInfos_AddrInfo& operator=(const IndTerChangeDeviceInfos_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_AddrInfo& default_instance();

  void Swap(IndTerChangeDeviceInfos_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_AddrInfo& from);
  void MergeFrom(const IndTerChangeDeviceInfos_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerChangeDeviceInfos.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_DomainInfo();
  virtual ~IndTerChangeDeviceInfos_DomainInfo();

  IndTerChangeDeviceInfos_DomainInfo(const IndTerChangeDeviceInfos_DomainInfo& from);

  inline IndTerChangeDeviceInfos_DomainInfo& operator=(const IndTerChangeDeviceInfos_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_DomainInfo& default_instance();

  void Swap(IndTerChangeDeviceInfos_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_DomainInfo& from);
  void MergeFrom(const IndTerChangeDeviceInfos_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_PresetInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_PresetInfo();
  virtual ~IndTerChangeDeviceInfos_PresetInfo();

  IndTerChangeDeviceInfos_PresetInfo(const IndTerChangeDeviceInfos_PresetInfo& from);

  inline IndTerChangeDeviceInfos_PresetInfo& operator=(const IndTerChangeDeviceInfos_PresetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_PresetInfo& default_instance();

  void Swap(IndTerChangeDeviceInfos_PresetInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_PresetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_PresetInfo& from);
  void MergeFrom(const IndTerChangeDeviceInfos_PresetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 presetid = 1;
  inline bool has_presetid() const;
  inline void clear_presetid();
  static const int kPresetidFieldNumber = 1;
  inline ::google::protobuf::uint32 presetid() const;
  inline void set_presetid(::google::protobuf::uint32 value);

  // optional string presetname = 2;
  inline bool has_presetname() const;
  inline void clear_presetname();
  static const int kPresetnameFieldNumber = 2;
  inline const ::std::string& presetname() const;
  inline void set_presetname(const ::std::string& value);
  inline void set_presetname(const char* value);
  inline void set_presetname(const char* value, size_t size);
  inline ::std::string* mutable_presetname();
  inline ::std::string* release_presetname();
  inline void set_allocated_presetname(::std::string* presetname);

  // optional uint32 relatedvsrcid = 3;
  inline bool has_relatedvsrcid() const;
  inline void clear_relatedvsrcid();
  static const int kRelatedvsrcidFieldNumber = 3;
  inline ::google::protobuf::uint32 relatedvsrcid() const;
  inline void set_relatedvsrcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.PresetInfo)
 private:
  inline void set_has_presetid();
  inline void clear_has_presetid();
  inline void set_has_presetname();
  inline void clear_has_presetname();
  inline void set_has_relatedvsrcid();
  inline void clear_has_relatedvsrcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* presetname_;
  ::google::protobuf::uint32 presetid_;
  ::google::protobuf::uint32 relatedvsrcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_PresetInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_SourceInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_SourceInfo();
  virtual ~IndTerChangeDeviceInfos_SourceInfo();

  IndTerChangeDeviceInfos_SourceInfo(const IndTerChangeDeviceInfos_SourceInfo& from);

  inline IndTerChangeDeviceInfos_SourceInfo& operator=(const IndTerChangeDeviceInfos_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_SourceInfo& default_instance();

  void Swap(IndTerChangeDeviceInfos_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_SourceInfo& from);
  void MergeFrom(const IndTerChangeDeviceInfos_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos_DeviceInfo : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos_DeviceInfo();
  virtual ~IndTerChangeDeviceInfos_DeviceInfo();

  IndTerChangeDeviceInfos_DeviceInfo(const IndTerChangeDeviceInfos_DeviceInfo& from);

  inline IndTerChangeDeviceInfos_DeviceInfo& operator=(const IndTerChangeDeviceInfos_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos_DeviceInfo& default_instance();

  void Swap(IndTerChangeDeviceInfos_DeviceInfo* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos_DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos_DeviceInfo& from);
  void MergeFrom(const IndTerChangeDeviceInfos_DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
  inline int oldsrcinfos_size() const;
  inline void clear_oldsrcinfos();
  static const int kOldsrcinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo& oldsrcinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* mutable_oldsrcinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* add_oldsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >&
      oldsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >*
      mutable_oldsrcinfos();

  // repeated .SRMsgs.IndTerChangeDeviceInfos.SourceInfo newsrcinfos = 3;
  inline int newsrcinfos_size() const;
  inline void clear_newsrcinfos();
  static const int kNewsrcinfosFieldNumber = 3;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo& newsrcinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* mutable_newsrcinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* add_newsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >&
      newsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >*
      mutable_newsrcinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo > oldsrcinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo > newsrcinfos_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos_DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerChangeDeviceInfos : public ::google::protobuf::Message {
 public:
  IndTerChangeDeviceInfos();
  virtual ~IndTerChangeDeviceInfos();

  IndTerChangeDeviceInfos(const IndTerChangeDeviceInfos& from);

  inline IndTerChangeDeviceInfos& operator=(const IndTerChangeDeviceInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerChangeDeviceInfos& default_instance();

  void Swap(IndTerChangeDeviceInfos* other);

  // implements Message ----------------------------------------------

  IndTerChangeDeviceInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerChangeDeviceInfos& from);
  void MergeFrom(const IndTerChangeDeviceInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerChangeDeviceInfos_IPPORT IPPORT;
  typedef IndTerChangeDeviceInfos_AddrInfo AddrInfo;
  typedef IndTerChangeDeviceInfos_DomainInfo DomainInfo;
  typedef IndTerChangeDeviceInfos_PresetInfo PresetInfo;
  typedef IndTerChangeDeviceInfos_SourceInfo SourceInfo;
  typedef IndTerChangeDeviceInfos_DeviceInfo DeviceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 changeterid = 3;
  inline bool has_changeterid() const;
  inline void clear_changeterid();
  static const int kChangeteridFieldNumber = 3;
  inline ::google::protobuf::uint32 changeterid() const;
  inline void set_changeterid(::google::protobuf::uint32 value);

  // optional uint32 changesuid = 4;
  inline bool has_changesuid() const;
  inline void clear_changesuid();
  static const int kChangesuidFieldNumber = 4;
  inline ::google::protobuf::uint32 changesuid() const;
  inline void set_changesuid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerChangeDeviceInfos.PresetInfo oldpresetinfos = 5;
  inline int oldpresetinfos_size() const;
  inline void clear_oldpresetinfos();
  static const int kOldpresetinfosFieldNumber = 5;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo& oldpresetinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* mutable_oldpresetinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* add_oldpresetinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >&
      oldpresetinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >*
      mutable_oldpresetinfos();

  // repeated .SRMsgs.IndTerChangeDeviceInfos.PresetInfo newpresetinfos = 6;
  inline int newpresetinfos_size() const;
  inline void clear_newpresetinfos();
  static const int kNewpresetinfosFieldNumber = 6;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo& newpresetinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* mutable_newpresetinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* add_newpresetinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >&
      newpresetinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >*
      mutable_newpresetinfos();

  // repeated .SRMsgs.IndTerChangeDeviceInfos.DeviceInfo deviceinfos = 7;
  inline int deviceinfos_size() const;
  inline void clear_deviceinfos();
  static const int kDeviceinfosFieldNumber = 7;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo& deviceinfos(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo* mutable_deviceinfos(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo* add_deviceinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo >&
      deviceinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo >*
      mutable_deviceinfos();

  // optional string domainname = 8;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 8;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerChangeDeviceInfos.AddrInfo svraddrs = 9;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 9;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerChangeDeviceInfos.DomainInfo domains = 10;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 10;
  inline const ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerChangeDeviceInfos)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_changeterid();
  inline void clear_has_changeterid();
  inline void set_has_changesuid();
  inline void clear_has_changesuid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 changeterid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo > oldpresetinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo > newpresetinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo > deviceinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo > domains_;
  ::google::protobuf::uint32 changesuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerChangeDeviceInfos* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewAudioSourceJoined_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerNewAudioSourceJoined_IPPORT();
  virtual ~IndTerNewAudioSourceJoined_IPPORT();

  IndTerNewAudioSourceJoined_IPPORT(const IndTerNewAudioSourceJoined_IPPORT& from);

  inline IndTerNewAudioSourceJoined_IPPORT& operator=(const IndTerNewAudioSourceJoined_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewAudioSourceJoined_IPPORT& default_instance();

  void Swap(IndTerNewAudioSourceJoined_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerNewAudioSourceJoined_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewAudioSourceJoined_IPPORT& from);
  void MergeFrom(const IndTerNewAudioSourceJoined_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewAudioSourceJoined.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewAudioSourceJoined_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewAudioSourceJoined_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerNewAudioSourceJoined_AddrInfo();
  virtual ~IndTerNewAudioSourceJoined_AddrInfo();

  IndTerNewAudioSourceJoined_AddrInfo(const IndTerNewAudioSourceJoined_AddrInfo& from);

  inline IndTerNewAudioSourceJoined_AddrInfo& operator=(const IndTerNewAudioSourceJoined_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewAudioSourceJoined_AddrInfo& default_instance();

  void Swap(IndTerNewAudioSourceJoined_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewAudioSourceJoined_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewAudioSourceJoined_AddrInfo& from);
  void MergeFrom(const IndTerNewAudioSourceJoined_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerNewAudioSourceJoined.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewAudioSourceJoined_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewAudioSourceJoined_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerNewAudioSourceJoined_DomainInfo();
  virtual ~IndTerNewAudioSourceJoined_DomainInfo();

  IndTerNewAudioSourceJoined_DomainInfo(const IndTerNewAudioSourceJoined_DomainInfo& from);

  inline IndTerNewAudioSourceJoined_DomainInfo& operator=(const IndTerNewAudioSourceJoined_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewAudioSourceJoined_DomainInfo& default_instance();

  void Swap(IndTerNewAudioSourceJoined_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewAudioSourceJoined_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewAudioSourceJoined_DomainInfo& from);
  void MergeFrom(const IndTerNewAudioSourceJoined_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewAudioSourceJoined_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewAudioSourceJoined_SourceInfo : public ::google::protobuf::Message {
 public:
  IndTerNewAudioSourceJoined_SourceInfo();
  virtual ~IndTerNewAudioSourceJoined_SourceInfo();

  IndTerNewAudioSourceJoined_SourceInfo(const IndTerNewAudioSourceJoined_SourceInfo& from);

  inline IndTerNewAudioSourceJoined_SourceInfo& operator=(const IndTerNewAudioSourceJoined_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewAudioSourceJoined_SourceInfo& default_instance();

  void Swap(IndTerNewAudioSourceJoined_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewAudioSourceJoined_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewAudioSourceJoined_SourceInfo& from);
  void MergeFrom(const IndTerNewAudioSourceJoined_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewAudioSourceJoined_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewAudioSourceJoined : public ::google::protobuf::Message {
 public:
  IndTerNewAudioSourceJoined();
  virtual ~IndTerNewAudioSourceJoined();

  IndTerNewAudioSourceJoined(const IndTerNewAudioSourceJoined& from);

  inline IndTerNewAudioSourceJoined& operator=(const IndTerNewAudioSourceJoined& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewAudioSourceJoined& default_instance();

  void Swap(IndTerNewAudioSourceJoined* other);

  // implements Message ----------------------------------------------

  IndTerNewAudioSourceJoined* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewAudioSourceJoined& from);
  void MergeFrom(const IndTerNewAudioSourceJoined& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerNewAudioSourceJoined_IPPORT IPPORT;
  typedef IndTerNewAudioSourceJoined_AddrInfo AddrInfo;
  typedef IndTerNewAudioSourceJoined_DomainInfo DomainInfo;
  typedef IndTerNewAudioSourceJoined_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 jointerid = 3;
  inline bool has_jointerid() const;
  inline void clear_jointerid();
  static const int kJointeridFieldNumber = 3;
  inline ::google::protobuf::uint32 jointerid() const;
  inline void set_jointerid(::google::protobuf::uint32 value);

  // optional uint32 joinsuid = 4;
  inline bool has_joinsuid() const;
  inline void clear_joinsuid();
  static const int kJoinsuidFieldNumber = 4;
  inline ::google::protobuf::uint32 joinsuid() const;
  inline void set_joinsuid(::google::protobuf::uint32 value);

  // optional string jointername = 5;
  inline bool has_jointername() const;
  inline void clear_jointername();
  static const int kJointernameFieldNumber = 5;
  inline const ::std::string& jointername() const;
  inline void set_jointername(const ::std::string& value);
  inline void set_jointername(const char* value);
  inline void set_jointername(const char* value, size_t size);
  inline ::std::string* mutable_jointername();
  inline ::std::string* release_jointername();
  inline void set_allocated_jointername(::std::string* jointername);

  // repeated .SRMsgs.IndTerNewAudioSourceJoined.SourceInfo srcinfos = 6;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 6;
  inline const ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerNewAudioSourceJoined.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerNewAudioSourceJoined.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewAudioSourceJoined)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_jointerid();
  inline void clear_has_jointerid();
  inline void set_has_joinsuid();
  inline void clear_has_joinsuid();
  inline void set_has_jointername();
  inline void clear_has_jointername();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 jointerid_;
  ::std::string* jointername_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo > domains_;
  ::google::protobuf::uint32 joinsuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewAudioSourceJoined* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAudioSourceLeave_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerAudioSourceLeave_IPPORT();
  virtual ~IndTerAudioSourceLeave_IPPORT();

  IndTerAudioSourceLeave_IPPORT(const IndTerAudioSourceLeave_IPPORT& from);

  inline IndTerAudioSourceLeave_IPPORT& operator=(const IndTerAudioSourceLeave_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAudioSourceLeave_IPPORT& default_instance();

  void Swap(IndTerAudioSourceLeave_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerAudioSourceLeave_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAudioSourceLeave_IPPORT& from);
  void MergeFrom(const IndTerAudioSourceLeave_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAudioSourceLeave.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAudioSourceLeave_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAudioSourceLeave_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerAudioSourceLeave_AddrInfo();
  virtual ~IndTerAudioSourceLeave_AddrInfo();

  IndTerAudioSourceLeave_AddrInfo(const IndTerAudioSourceLeave_AddrInfo& from);

  inline IndTerAudioSourceLeave_AddrInfo& operator=(const IndTerAudioSourceLeave_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAudioSourceLeave_AddrInfo& default_instance();

  void Swap(IndTerAudioSourceLeave_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerAudioSourceLeave_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAudioSourceLeave_AddrInfo& from);
  void MergeFrom(const IndTerAudioSourceLeave_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerAudioSourceLeave.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerAudioSourceLeave_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerAudioSourceLeave_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerAudioSourceLeave_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAudioSourceLeave.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAudioSourceLeave_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAudioSourceLeave_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerAudioSourceLeave_DomainInfo();
  virtual ~IndTerAudioSourceLeave_DomainInfo();

  IndTerAudioSourceLeave_DomainInfo(const IndTerAudioSourceLeave_DomainInfo& from);

  inline IndTerAudioSourceLeave_DomainInfo& operator=(const IndTerAudioSourceLeave_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAudioSourceLeave_DomainInfo& default_instance();

  void Swap(IndTerAudioSourceLeave_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerAudioSourceLeave_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAudioSourceLeave_DomainInfo& from);
  void MergeFrom(const IndTerAudioSourceLeave_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAudioSourceLeave.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAudioSourceLeave_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAudioSourceLeave_SourceInfo : public ::google::protobuf::Message {
 public:
  IndTerAudioSourceLeave_SourceInfo();
  virtual ~IndTerAudioSourceLeave_SourceInfo();

  IndTerAudioSourceLeave_SourceInfo(const IndTerAudioSourceLeave_SourceInfo& from);

  inline IndTerAudioSourceLeave_SourceInfo& operator=(const IndTerAudioSourceLeave_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAudioSourceLeave_SourceInfo& default_instance();

  void Swap(IndTerAudioSourceLeave_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndTerAudioSourceLeave_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAudioSourceLeave_SourceInfo& from);
  void MergeFrom(const IndTerAudioSourceLeave_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAudioSourceLeave.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAudioSourceLeave_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAudioSourceLeave : public ::google::protobuf::Message {
 public:
  IndTerAudioSourceLeave();
  virtual ~IndTerAudioSourceLeave();

  IndTerAudioSourceLeave(const IndTerAudioSourceLeave& from);

  inline IndTerAudioSourceLeave& operator=(const IndTerAudioSourceLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAudioSourceLeave& default_instance();

  void Swap(IndTerAudioSourceLeave* other);

  // implements Message ----------------------------------------------

  IndTerAudioSourceLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAudioSourceLeave& from);
  void MergeFrom(const IndTerAudioSourceLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerAudioSourceLeave_IPPORT IPPORT;
  typedef IndTerAudioSourceLeave_AddrInfo AddrInfo;
  typedef IndTerAudioSourceLeave_DomainInfo DomainInfo;
  typedef IndTerAudioSourceLeave_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 leaveterid = 3;
  inline bool has_leaveterid() const;
  inline void clear_leaveterid();
  static const int kLeaveteridFieldNumber = 3;
  inline ::google::protobuf::uint32 leaveterid() const;
  inline void set_leaveterid(::google::protobuf::uint32 value);

  // optional uint32 leavesuid = 4;
  inline bool has_leavesuid() const;
  inline void clear_leavesuid();
  static const int kLeavesuidFieldNumber = 4;
  inline ::google::protobuf::uint32 leavesuid() const;
  inline void set_leavesuid(::google::protobuf::uint32 value);

  // optional string leavetername = 5;
  inline bool has_leavetername() const;
  inline void clear_leavetername();
  static const int kLeaveternameFieldNumber = 5;
  inline const ::std::string& leavetername() const;
  inline void set_leavetername(const ::std::string& value);
  inline void set_leavetername(const char* value);
  inline void set_leavetername(const char* value, size_t size);
  inline ::std::string* mutable_leavetername();
  inline ::std::string* release_leavetername();
  inline void set_allocated_leavetername(::std::string* leavetername);

  // repeated .SRMsgs.IndTerAudioSourceLeave.SourceInfo srcinfos = 6;
  inline int srcinfos_size() const;
  inline void clear_srcinfos();
  static const int kSrcinfosFieldNumber = 6;
  inline const ::SRMsgs::IndTerAudioSourceLeave_SourceInfo& srcinfos(int index) const;
  inline ::SRMsgs::IndTerAudioSourceLeave_SourceInfo* mutable_srcinfos(int index);
  inline ::SRMsgs::IndTerAudioSourceLeave_SourceInfo* add_srcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_SourceInfo >&
      srcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_SourceInfo >*
      mutable_srcinfos();

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerAudioSourceLeave.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::IndTerAudioSourceLeave_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerAudioSourceLeave_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerAudioSourceLeave_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerAudioSourceLeave.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::IndTerAudioSourceLeave_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerAudioSourceLeave_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerAudioSourceLeave_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAudioSourceLeave)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_leaveterid();
  inline void clear_has_leaveterid();
  inline void set_has_leavesuid();
  inline void clear_has_leavesuid();
  inline void set_has_leavetername();
  inline void clear_has_leavetername();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 leaveterid_;
  ::std::string* leavetername_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_SourceInfo > srcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_DomainInfo > domains_;
  ::google::protobuf::uint32 leavesuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAudioSourceLeave* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewVideoSourceJoined_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerNewVideoSourceJoined_IPPORT();
  virtual ~IndTerNewVideoSourceJoined_IPPORT();

  IndTerNewVideoSourceJoined_IPPORT(const IndTerNewVideoSourceJoined_IPPORT& from);

  inline IndTerNewVideoSourceJoined_IPPORT& operator=(const IndTerNewVideoSourceJoined_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewVideoSourceJoined_IPPORT& default_instance();

  void Swap(IndTerNewVideoSourceJoined_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerNewVideoSourceJoined_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewVideoSourceJoined_IPPORT& from);
  void MergeFrom(const IndTerNewVideoSourceJoined_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewVideoSourceJoined.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewVideoSourceJoined_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewVideoSourceJoined_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerNewVideoSourceJoined_AddrInfo();
  virtual ~IndTerNewVideoSourceJoined_AddrInfo();

  IndTerNewVideoSourceJoined_AddrInfo(const IndTerNewVideoSourceJoined_AddrInfo& from);

  inline IndTerNewVideoSourceJoined_AddrInfo& operator=(const IndTerNewVideoSourceJoined_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewVideoSourceJoined_AddrInfo& default_instance();

  void Swap(IndTerNewVideoSourceJoined_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewVideoSourceJoined_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewVideoSourceJoined_AddrInfo& from);
  void MergeFrom(const IndTerNewVideoSourceJoined_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerNewVideoSourceJoined.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewVideoSourceJoined_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewVideoSourceJoined_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerNewVideoSourceJoined_DomainInfo();
  virtual ~IndTerNewVideoSourceJoined_DomainInfo();

  IndTerNewVideoSourceJoined_DomainInfo(const IndTerNewVideoSourceJoined_DomainInfo& from);

  inline IndTerNewVideoSourceJoined_DomainInfo& operator=(const IndTerNewVideoSourceJoined_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewVideoSourceJoined_DomainInfo& default_instance();

  void Swap(IndTerNewVideoSourceJoined_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewVideoSourceJoined_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewVideoSourceJoined_DomainInfo& from);
  void MergeFrom(const IndTerNewVideoSourceJoined_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewVideoSourceJoined_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewVideoSourceJoined_SourceInfo : public ::google::protobuf::Message {
 public:
  IndTerNewVideoSourceJoined_SourceInfo();
  virtual ~IndTerNewVideoSourceJoined_SourceInfo();

  IndTerNewVideoSourceJoined_SourceInfo(const IndTerNewVideoSourceJoined_SourceInfo& from);

  inline IndTerNewVideoSourceJoined_SourceInfo& operator=(const IndTerNewVideoSourceJoined_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewVideoSourceJoined_SourceInfo& default_instance();

  void Swap(IndTerNewVideoSourceJoined_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndTerNewVideoSourceJoined_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewVideoSourceJoined_SourceInfo& from);
  void MergeFrom(const IndTerNewVideoSourceJoined_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewVideoSourceJoined_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerNewVideoSourceJoined : public ::google::protobuf::Message {
 public:
  IndTerNewVideoSourceJoined();
  virtual ~IndTerNewVideoSourceJoined();

  IndTerNewVideoSourceJoined(const IndTerNewVideoSourceJoined& from);

  inline IndTerNewVideoSourceJoined& operator=(const IndTerNewVideoSourceJoined& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerNewVideoSourceJoined& default_instance();

  void Swap(IndTerNewVideoSourceJoined* other);

  // implements Message ----------------------------------------------

  IndTerNewVideoSourceJoined* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerNewVideoSourceJoined& from);
  void MergeFrom(const IndTerNewVideoSourceJoined& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerNewVideoSourceJoined_IPPORT IPPORT;
  typedef IndTerNewVideoSourceJoined_AddrInfo AddrInfo;
  typedef IndTerNewVideoSourceJoined_DomainInfo DomainInfo;
  typedef IndTerNewVideoSourceJoined_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 jointerid = 3;
  inline bool has_jointerid() const;
  inline void clear_jointerid();
  static const int kJointeridFieldNumber = 3;
  inline ::google::protobuf::uint32 jointerid() const;
  inline void set_jointerid(::google::protobuf::uint32 value);

  // optional uint32 joinsuid = 4;
  inline bool has_joinsuid() const;
  inline void clear_joinsuid();
  static const int kJoinsuidFieldNumber = 4;
  inline ::google::protobuf::uint32 joinsuid() const;
  inline void set_joinsuid(::google::protobuf::uint32 value);

  // optional string jointername = 5;
  inline bool has_jointername() const;
  inline void clear_jointername();
  static const int kJointernameFieldNumber = 5;
  inline const ::std::string& jointername() const;
  inline void set_jointername(const ::std::string& value);
  inline void set_jointername(const char* value);
  inline void set_jointername(const char* value, size_t size);
  inline ::std::string* mutable_jointername();
  inline ::std::string* release_jointername();
  inline void set_allocated_jointername(::std::string* jointername);

  // repeated .SRMsgs.IndTerNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
  inline int newsrcinfos_size() const;
  inline void clear_newsrcinfos();
  static const int kNewsrcinfosFieldNumber = 6;
  inline const ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo& newsrcinfos(int index) const;
  inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* mutable_newsrcinfos(int index);
  inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* add_newsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >&
      newsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >*
      mutable_newsrcinfos();

  // repeated .SRMsgs.IndTerNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
  inline int allsrcinfos_size() const;
  inline void clear_allsrcinfos();
  static const int kAllsrcinfosFieldNumber = 7;
  inline const ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo& allsrcinfos(int index) const;
  inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* mutable_allsrcinfos(int index);
  inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* add_allsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >&
      allsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >*
      mutable_allsrcinfos();

  // optional string domainname = 8;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 8;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerNewVideoSourceJoined.AddrInfo svraddrs = 9;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 9;
  inline const ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerNewVideoSourceJoined.DomainInfo domains = 10;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 10;
  inline const ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerNewVideoSourceJoined)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_jointerid();
  inline void clear_has_jointerid();
  inline void set_has_joinsuid();
  inline void clear_has_joinsuid();
  inline void set_has_jointername();
  inline void clear_has_jointername();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 jointerid_;
  ::std::string* jointername_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo > newsrcinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo > allsrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo > domains_;
  ::google::protobuf::uint32 joinsuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerNewVideoSourceJoined* default_instance_;
};
// -------------------------------------------------------------------

class IndTerVideoSourceLeave_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerVideoSourceLeave_IPPORT();
  virtual ~IndTerVideoSourceLeave_IPPORT();

  IndTerVideoSourceLeave_IPPORT(const IndTerVideoSourceLeave_IPPORT& from);

  inline IndTerVideoSourceLeave_IPPORT& operator=(const IndTerVideoSourceLeave_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerVideoSourceLeave_IPPORT& default_instance();

  void Swap(IndTerVideoSourceLeave_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerVideoSourceLeave_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerVideoSourceLeave_IPPORT& from);
  void MergeFrom(const IndTerVideoSourceLeave_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerVideoSourceLeave.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerVideoSourceLeave_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerVideoSourceLeave_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerVideoSourceLeave_AddrInfo();
  virtual ~IndTerVideoSourceLeave_AddrInfo();

  IndTerVideoSourceLeave_AddrInfo(const IndTerVideoSourceLeave_AddrInfo& from);

  inline IndTerVideoSourceLeave_AddrInfo& operator=(const IndTerVideoSourceLeave_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerVideoSourceLeave_AddrInfo& default_instance();

  void Swap(IndTerVideoSourceLeave_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerVideoSourceLeave_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerVideoSourceLeave_AddrInfo& from);
  void MergeFrom(const IndTerVideoSourceLeave_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerVideoSourceLeave.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerVideoSourceLeave_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerVideoSourceLeave_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerVideoSourceLeave_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerVideoSourceLeave.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerVideoSourceLeave_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerVideoSourceLeave_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerVideoSourceLeave_DomainInfo();
  virtual ~IndTerVideoSourceLeave_DomainInfo();

  IndTerVideoSourceLeave_DomainInfo(const IndTerVideoSourceLeave_DomainInfo& from);

  inline IndTerVideoSourceLeave_DomainInfo& operator=(const IndTerVideoSourceLeave_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerVideoSourceLeave_DomainInfo& default_instance();

  void Swap(IndTerVideoSourceLeave_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerVideoSourceLeave_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerVideoSourceLeave_DomainInfo& from);
  void MergeFrom(const IndTerVideoSourceLeave_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerVideoSourceLeave.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerVideoSourceLeave_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerVideoSourceLeave_SourceInfo : public ::google::protobuf::Message {
 public:
  IndTerVideoSourceLeave_SourceInfo();
  virtual ~IndTerVideoSourceLeave_SourceInfo();

  IndTerVideoSourceLeave_SourceInfo(const IndTerVideoSourceLeave_SourceInfo& from);

  inline IndTerVideoSourceLeave_SourceInfo& operator=(const IndTerVideoSourceLeave_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerVideoSourceLeave_SourceInfo& default_instance();

  void Swap(IndTerVideoSourceLeave_SourceInfo* other);

  // implements Message ----------------------------------------------

  IndTerVideoSourceLeave_SourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerVideoSourceLeave_SourceInfo& from);
  void MergeFrom(const IndTerVideoSourceLeave_SourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isOn = 3;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 3;
  inline bool ison() const;
  inline void set_ison(bool value);

  // optional uint32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerVideoSourceLeave.SourceInfo)
 private:
  inline void set_has_srcid();
  inline void clear_has_srcid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ison();
  inline void clear_has_ison();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 srcid_;
  bool ison_;
  ::google::protobuf::uint32 priority_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerVideoSourceLeave_SourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerVideoSourceLeave : public ::google::protobuf::Message {
 public:
  IndTerVideoSourceLeave();
  virtual ~IndTerVideoSourceLeave();

  IndTerVideoSourceLeave(const IndTerVideoSourceLeave& from);

  inline IndTerVideoSourceLeave& operator=(const IndTerVideoSourceLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerVideoSourceLeave& default_instance();

  void Swap(IndTerVideoSourceLeave* other);

  // implements Message ----------------------------------------------

  IndTerVideoSourceLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerVideoSourceLeave& from);
  void MergeFrom(const IndTerVideoSourceLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerVideoSourceLeave_IPPORT IPPORT;
  typedef IndTerVideoSourceLeave_AddrInfo AddrInfo;
  typedef IndTerVideoSourceLeave_DomainInfo DomainInfo;
  typedef IndTerVideoSourceLeave_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 leaveterid = 3;
  inline bool has_leaveterid() const;
  inline void clear_leaveterid();
  static const int kLeaveteridFieldNumber = 3;
  inline ::google::protobuf::uint32 leaveterid() const;
  inline void set_leaveterid(::google::protobuf::uint32 value);

  // optional uint32 leavesuid = 4;
  inline bool has_leavesuid() const;
  inline void clear_leavesuid();
  static const int kLeavesuidFieldNumber = 4;
  inline ::google::protobuf::uint32 leavesuid() const;
  inline void set_leavesuid(::google::protobuf::uint32 value);

  // optional string leavetername = 5;
  inline bool has_leavetername() const;
  inline void clear_leavetername();
  static const int kLeaveternameFieldNumber = 5;
  inline const ::std::string& leavetername() const;
  inline void set_leavetername(const ::std::string& value);
  inline void set_leavetername(const char* value);
  inline void set_leavetername(const char* value, size_t size);
  inline ::std::string* mutable_leavetername();
  inline ::std::string* release_leavetername();
  inline void set_allocated_leavetername(::std::string* leavetername);

  // repeated .SRMsgs.IndTerVideoSourceLeave.SourceInfo delsrcinfos = 6;
  inline int delsrcinfos_size() const;
  inline void clear_delsrcinfos();
  static const int kDelsrcinfosFieldNumber = 6;
  inline const ::SRMsgs::IndTerVideoSourceLeave_SourceInfo& delsrcinfos(int index) const;
  inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* mutable_delsrcinfos(int index);
  inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* add_delsrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >&
      delsrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >*
      mutable_delsrcinfos();

  // repeated .SRMsgs.IndTerVideoSourceLeave.SourceInfo cursrcinfos = 7;
  inline int cursrcinfos_size() const;
  inline void clear_cursrcinfos();
  static const int kCursrcinfosFieldNumber = 7;
  inline const ::SRMsgs::IndTerVideoSourceLeave_SourceInfo& cursrcinfos(int index) const;
  inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* mutable_cursrcinfos(int index);
  inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* add_cursrcinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >&
      cursrcinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >*
      mutable_cursrcinfos();

  // optional string domainname = 8;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 8;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerVideoSourceLeave.AddrInfo svraddrs = 9;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 9;
  inline const ::SRMsgs::IndTerVideoSourceLeave_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerVideoSourceLeave_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerVideoSourceLeave_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerVideoSourceLeave.DomainInfo domains = 10;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 10;
  inline const ::SRMsgs::IndTerVideoSourceLeave_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerVideoSourceLeave_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerVideoSourceLeave_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerVideoSourceLeave)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_leaveterid();
  inline void clear_has_leaveterid();
  inline void set_has_leavesuid();
  inline void clear_has_leavesuid();
  inline void set_has_leavetername();
  inline void clear_has_leavetername();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 leaveterid_;
  ::std::string* leavetername_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo > delsrcinfos_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo > cursrcinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_DomainInfo > domains_;
  ::google::protobuf::uint32 leavesuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerVideoSourceLeave* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSetAnalyState_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerSetAnalyState_IPPORT();
  virtual ~IndTerSetAnalyState_IPPORT();

  IndTerSetAnalyState_IPPORT(const IndTerSetAnalyState_IPPORT& from);

  inline IndTerSetAnalyState_IPPORT& operator=(const IndTerSetAnalyState_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSetAnalyState_IPPORT& default_instance();

  void Swap(IndTerSetAnalyState_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerSetAnalyState_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSetAnalyState_IPPORT& from);
  void MergeFrom(const IndTerSetAnalyState_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSetAnalyState.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSetAnalyState_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSetAnalyState_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerSetAnalyState_AddrInfo();
  virtual ~IndTerSetAnalyState_AddrInfo();

  IndTerSetAnalyState_AddrInfo(const IndTerSetAnalyState_AddrInfo& from);

  inline IndTerSetAnalyState_AddrInfo& operator=(const IndTerSetAnalyState_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSetAnalyState_AddrInfo& default_instance();

  void Swap(IndTerSetAnalyState_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerSetAnalyState_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSetAnalyState_AddrInfo& from);
  void MergeFrom(const IndTerSetAnalyState_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerSetAnalyState.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerSetAnalyState_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerSetAnalyState_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerSetAnalyState_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSetAnalyState.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSetAnalyState_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSetAnalyState_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerSetAnalyState_DomainInfo();
  virtual ~IndTerSetAnalyState_DomainInfo();

  IndTerSetAnalyState_DomainInfo(const IndTerSetAnalyState_DomainInfo& from);

  inline IndTerSetAnalyState_DomainInfo& operator=(const IndTerSetAnalyState_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSetAnalyState_DomainInfo& default_instance();

  void Swap(IndTerSetAnalyState_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerSetAnalyState_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSetAnalyState_DomainInfo& from);
  void MergeFrom(const IndTerSetAnalyState_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSetAnalyState.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSetAnalyState_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSetAnalyState : public ::google::protobuf::Message {
 public:
  IndTerSetAnalyState();
  virtual ~IndTerSetAnalyState();

  IndTerSetAnalyState(const IndTerSetAnalyState& from);

  inline IndTerSetAnalyState& operator=(const IndTerSetAnalyState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSetAnalyState& default_instance();

  void Swap(IndTerSetAnalyState* other);

  // implements Message ----------------------------------------------

  IndTerSetAnalyState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSetAnalyState& from);
  void MergeFrom(const IndTerSetAnalyState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerSetAnalyState_IPPORT IPPORT;
  typedef IndTerSetAnalyState_AddrInfo AddrInfo;
  typedef IndTerSetAnalyState_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 analystate = 3;
  inline bool has_analystate() const;
  inline void clear_analystate();
  static const int kAnalystateFieldNumber = 3;
  inline ::google::protobuf::uint32 analystate() const;
  inline void set_analystate(::google::protobuf::uint32 value);

  // optional uint32 analymode = 4;
  inline bool has_analymode() const;
  inline void clear_analymode();
  static const int kAnalymodeFieldNumber = 4;
  inline ::google::protobuf::uint32 analymode() const;
  inline void set_analymode(::google::protobuf::uint32 value);

  // optional string failreason = 5;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 5;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint32 errorcode = 6;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 6;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional string domainname = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerSetAnalyState.AddrInfo svraddrs = 8;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 8;
  inline const ::SRMsgs::IndTerSetAnalyState_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerSetAnalyState_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerSetAnalyState_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerSetAnalyState.DomainInfo domains = 9;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 9;
  inline const ::SRMsgs::IndTerSetAnalyState_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerSetAnalyState_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerSetAnalyState_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSetAnalyState)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_analystate();
  inline void clear_has_analystate();
  inline void set_has_analymode();
  inline void clear_has_analymode();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 analystate_;
  ::std::string* failreason_;
  ::google::protobuf::uint32 analymode_;
  ::google::protobuf::uint32 errorcode_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSetAnalyState* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSelectVasVideo_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerSelectVasVideo_IPPORT();
  virtual ~IndTerSelectVasVideo_IPPORT();

  IndTerSelectVasVideo_IPPORT(const IndTerSelectVasVideo_IPPORT& from);

  inline IndTerSelectVasVideo_IPPORT& operator=(const IndTerSelectVasVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSelectVasVideo_IPPORT& default_instance();

  void Swap(IndTerSelectVasVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerSelectVasVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSelectVasVideo_IPPORT& from);
  void MergeFrom(const IndTerSelectVasVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSelectVasVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSelectVasVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSelectVasVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerSelectVasVideo_AddrInfo();
  virtual ~IndTerSelectVasVideo_AddrInfo();

  IndTerSelectVasVideo_AddrInfo(const IndTerSelectVasVideo_AddrInfo& from);

  inline IndTerSelectVasVideo_AddrInfo& operator=(const IndTerSelectVasVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSelectVasVideo_AddrInfo& default_instance();

  void Swap(IndTerSelectVasVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerSelectVasVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSelectVasVideo_AddrInfo& from);
  void MergeFrom(const IndTerSelectVasVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerSelectVasVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerSelectVasVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerSelectVasVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerSelectVasVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSelectVasVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSelectVasVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSelectVasVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerSelectVasVideo_DomainInfo();
  virtual ~IndTerSelectVasVideo_DomainInfo();

  IndTerSelectVasVideo_DomainInfo(const IndTerSelectVasVideo_DomainInfo& from);

  inline IndTerSelectVasVideo_DomainInfo& operator=(const IndTerSelectVasVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSelectVasVideo_DomainInfo& default_instance();

  void Swap(IndTerSelectVasVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerSelectVasVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSelectVasVideo_DomainInfo& from);
  void MergeFrom(const IndTerSelectVasVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSelectVasVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSelectVasVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSelectVasVideo_AnalyInfo : public ::google::protobuf::Message {
 public:
  IndTerSelectVasVideo_AnalyInfo();
  virtual ~IndTerSelectVasVideo_AnalyInfo();

  IndTerSelectVasVideo_AnalyInfo(const IndTerSelectVasVideo_AnalyInfo& from);

  inline IndTerSelectVasVideo_AnalyInfo& operator=(const IndTerSelectVasVideo_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSelectVasVideo_AnalyInfo& default_instance();

  void Swap(IndTerSelectVasVideo_AnalyInfo* other);

  // implements Message ----------------------------------------------

  IndTerSelectVasVideo_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSelectVasVideo_AnalyInfo& from);
  void MergeFrom(const IndTerSelectVasVideo_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // optional bool isselect = 5;
  inline bool has_isselect() const;
  inline void clear_isselect();
  static const int kIsselectFieldNumber = 5;
  inline bool isselect() const;
  inline void set_isselect(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSelectVasVideo.AnalyInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();
  inline void set_has_isselect();
  inline void clear_has_isselect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  bool isselect_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSelectVasVideo_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerSelectVasVideo : public ::google::protobuf::Message {
 public:
  IndTerSelectVasVideo();
  virtual ~IndTerSelectVasVideo();

  IndTerSelectVasVideo(const IndTerSelectVasVideo& from);

  inline IndTerSelectVasVideo& operator=(const IndTerSelectVasVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerSelectVasVideo& default_instance();

  void Swap(IndTerSelectVasVideo* other);

  // implements Message ----------------------------------------------

  IndTerSelectVasVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerSelectVasVideo& from);
  void MergeFrom(const IndTerSelectVasVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerSelectVasVideo_IPPORT IPPORT;
  typedef IndTerSelectVasVideo_AddrInfo AddrInfo;
  typedef IndTerSelectVasVideo_DomainInfo DomainInfo;
  typedef IndTerSelectVasVideo_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerSelectVasVideo.AnalyInfo selectvasinfos = 3;
  inline int selectvasinfos_size() const;
  inline void clear_selectvasinfos();
  static const int kSelectvasinfosFieldNumber = 3;
  inline const ::SRMsgs::IndTerSelectVasVideo_AnalyInfo& selectvasinfos(int index) const;
  inline ::SRMsgs::IndTerSelectVasVideo_AnalyInfo* mutable_selectvasinfos(int index);
  inline ::SRMsgs::IndTerSelectVasVideo_AnalyInfo* add_selectvasinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AnalyInfo >&
      selectvasinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AnalyInfo >*
      mutable_selectvasinfos();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerSelectVasVideo.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndTerSelectVasVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerSelectVasVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerSelectVasVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerSelectVasVideo.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndTerSelectVasVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerSelectVasVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerSelectVasVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerSelectVasVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AnalyInfo > selectvasinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerSelectVasVideo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangePreset_IPPORT : public ::google::protobuf::Message {
 public:
  IndChangePreset_IPPORT();
  virtual ~IndChangePreset_IPPORT();

  IndChangePreset_IPPORT(const IndChangePreset_IPPORT& from);

  inline IndChangePreset_IPPORT& operator=(const IndChangePreset_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangePreset_IPPORT& default_instance();

  void Swap(IndChangePreset_IPPORT* other);

  // implements Message ----------------------------------------------

  IndChangePreset_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangePreset_IPPORT& from);
  void MergeFrom(const IndChangePreset_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangePreset.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangePreset_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndChangePreset_AddrInfo : public ::google::protobuf::Message {
 public:
  IndChangePreset_AddrInfo();
  virtual ~IndChangePreset_AddrInfo();

  IndChangePreset_AddrInfo(const IndChangePreset_AddrInfo& from);

  inline IndChangePreset_AddrInfo& operator=(const IndChangePreset_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangePreset_AddrInfo& default_instance();

  void Swap(IndChangePreset_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndChangePreset_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangePreset_AddrInfo& from);
  void MergeFrom(const IndChangePreset_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangePreset.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndChangePreset_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndChangePreset_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndChangePreset_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangePreset.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangePreset_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangePreset_DomainInfo : public ::google::protobuf::Message {
 public:
  IndChangePreset_DomainInfo();
  virtual ~IndChangePreset_DomainInfo();

  IndChangePreset_DomainInfo(const IndChangePreset_DomainInfo& from);

  inline IndChangePreset_DomainInfo& operator=(const IndChangePreset_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangePreset_DomainInfo& default_instance();

  void Swap(IndChangePreset_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndChangePreset_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangePreset_DomainInfo& from);
  void MergeFrom(const IndChangePreset_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangePreset.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangePreset_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangePreset_PresetInfo : public ::google::protobuf::Message {
 public:
  IndChangePreset_PresetInfo();
  virtual ~IndChangePreset_PresetInfo();

  IndChangePreset_PresetInfo(const IndChangePreset_PresetInfo& from);

  inline IndChangePreset_PresetInfo& operator=(const IndChangePreset_PresetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangePreset_PresetInfo& default_instance();

  void Swap(IndChangePreset_PresetInfo* other);

  // implements Message ----------------------------------------------

  IndChangePreset_PresetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangePreset_PresetInfo& from);
  void MergeFrom(const IndChangePreset_PresetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 presetid = 1;
  inline bool has_presetid() const;
  inline void clear_presetid();
  static const int kPresetidFieldNumber = 1;
  inline ::google::protobuf::uint32 presetid() const;
  inline void set_presetid(::google::protobuf::uint32 value);

  // optional string presetname = 2;
  inline bool has_presetname() const;
  inline void clear_presetname();
  static const int kPresetnameFieldNumber = 2;
  inline const ::std::string& presetname() const;
  inline void set_presetname(const ::std::string& value);
  inline void set_presetname(const char* value);
  inline void set_presetname(const char* value, size_t size);
  inline ::std::string* mutable_presetname();
  inline ::std::string* release_presetname();
  inline void set_allocated_presetname(::std::string* presetname);

  // optional uint32 relatedvsrcid = 3;
  inline bool has_relatedvsrcid() const;
  inline void clear_relatedvsrcid();
  static const int kRelatedvsrcidFieldNumber = 3;
  inline ::google::protobuf::uint32 relatedvsrcid() const;
  inline void set_relatedvsrcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangePreset.PresetInfo)
 private:
  inline void set_has_presetid();
  inline void clear_has_presetid();
  inline void set_has_presetname();
  inline void clear_has_presetname();
  inline void set_has_relatedvsrcid();
  inline void clear_has_relatedvsrcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* presetname_;
  ::google::protobuf::uint32 presetid_;
  ::google::protobuf::uint32 relatedvsrcid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangePreset_PresetInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangePreset : public ::google::protobuf::Message {
 public:
  IndChangePreset();
  virtual ~IndChangePreset();

  IndChangePreset(const IndChangePreset& from);

  inline IndChangePreset& operator=(const IndChangePreset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangePreset& default_instance();

  void Swap(IndChangePreset* other);

  // implements Message ----------------------------------------------

  IndChangePreset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangePreset& from);
  void MergeFrom(const IndChangePreset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndChangePreset_IPPORT IPPORT;
  typedef IndChangePreset_AddrInfo AddrInfo;
  typedef IndChangePreset_DomainInfo DomainInfo;
  typedef IndChangePreset_PresetInfo PresetInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 changeterid = 3;
  inline bool has_changeterid() const;
  inline void clear_changeterid();
  static const int kChangeteridFieldNumber = 3;
  inline ::google::protobuf::uint32 changeterid() const;
  inline void set_changeterid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangePreset.PresetInfo cpresetinfos = 4;
  inline int cpresetinfos_size() const;
  inline void clear_cpresetinfos();
  static const int kCpresetinfosFieldNumber = 4;
  inline const ::SRMsgs::IndChangePreset_PresetInfo& cpresetinfos(int index) const;
  inline ::SRMsgs::IndChangePreset_PresetInfo* mutable_cpresetinfos(int index);
  inline ::SRMsgs::IndChangePreset_PresetInfo* add_cpresetinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_PresetInfo >&
      cpresetinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_PresetInfo >*
      mutable_cpresetinfos();

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndChangePreset.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndChangePreset_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndChangePreset_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndChangePreset_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndChangePreset.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndChangePreset_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndChangePreset_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndChangePreset_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangePreset)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_changeterid();
  inline void clear_has_changeterid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 changeterid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_PresetInfo > cpresetinfos_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangePreset* default_instance_;
};
// -------------------------------------------------------------------

class IndFilterNoVideo_IPPORT : public ::google::protobuf::Message {
 public:
  IndFilterNoVideo_IPPORT();
  virtual ~IndFilterNoVideo_IPPORT();

  IndFilterNoVideo_IPPORT(const IndFilterNoVideo_IPPORT& from);

  inline IndFilterNoVideo_IPPORT& operator=(const IndFilterNoVideo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndFilterNoVideo_IPPORT& default_instance();

  void Swap(IndFilterNoVideo_IPPORT* other);

  // implements Message ----------------------------------------------

  IndFilterNoVideo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndFilterNoVideo_IPPORT& from);
  void MergeFrom(const IndFilterNoVideo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndFilterNoVideo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndFilterNoVideo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndFilterNoVideo_AddrInfo : public ::google::protobuf::Message {
 public:
  IndFilterNoVideo_AddrInfo();
  virtual ~IndFilterNoVideo_AddrInfo();

  IndFilterNoVideo_AddrInfo(const IndFilterNoVideo_AddrInfo& from);

  inline IndFilterNoVideo_AddrInfo& operator=(const IndFilterNoVideo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndFilterNoVideo_AddrInfo& default_instance();

  void Swap(IndFilterNoVideo_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndFilterNoVideo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndFilterNoVideo_AddrInfo& from);
  void MergeFrom(const IndFilterNoVideo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndFilterNoVideo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndFilterNoVideo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndFilterNoVideo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndFilterNoVideo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndFilterNoVideo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndFilterNoVideo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndFilterNoVideo_DomainInfo : public ::google::protobuf::Message {
 public:
  IndFilterNoVideo_DomainInfo();
  virtual ~IndFilterNoVideo_DomainInfo();

  IndFilterNoVideo_DomainInfo(const IndFilterNoVideo_DomainInfo& from);

  inline IndFilterNoVideo_DomainInfo& operator=(const IndFilterNoVideo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndFilterNoVideo_DomainInfo& default_instance();

  void Swap(IndFilterNoVideo_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndFilterNoVideo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndFilterNoVideo_DomainInfo& from);
  void MergeFrom(const IndFilterNoVideo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndFilterNoVideo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndFilterNoVideo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndFilterNoVideo : public ::google::protobuf::Message {
 public:
  IndFilterNoVideo();
  virtual ~IndFilterNoVideo();

  IndFilterNoVideo(const IndFilterNoVideo& from);

  inline IndFilterNoVideo& operator=(const IndFilterNoVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndFilterNoVideo& default_instance();

  void Swap(IndFilterNoVideo* other);

  // implements Message ----------------------------------------------

  IndFilterNoVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndFilterNoVideo& from);
  void MergeFrom(const IndFilterNoVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndFilterNoVideo_IPPORT IPPORT;
  typedef IndFilterNoVideo_AddrInfo AddrInfo;
  typedef IndFilterNoVideo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 filternovideo = 3;
  inline bool has_filternovideo() const;
  inline void clear_filternovideo();
  static const int kFilternovideoFieldNumber = 3;
  inline ::google::protobuf::uint32 filternovideo() const;
  inline void set_filternovideo(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndFilterNoVideo.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndFilterNoVideo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndFilterNoVideo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndFilterNoVideo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndFilterNoVideo.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndFilterNoVideo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndFilterNoVideo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndFilterNoVideo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndFilterNoVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_filternovideo();
  inline void clear_has_filternovideo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 filternovideo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndFilterNoVideo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo_IPPORT : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo_IPPORT();
  virtual ~IndTerAutoPollInfo_IPPORT();

  IndTerAutoPollInfo_IPPORT(const IndTerAutoPollInfo_IPPORT& from);

  inline IndTerAutoPollInfo_IPPORT& operator=(const IndTerAutoPollInfo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo_IPPORT& default_instance();

  void Swap(IndTerAutoPollInfo_IPPORT* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo_IPPORT& from);
  void MergeFrom(const IndTerAutoPollInfo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo_AddrInfo : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo_AddrInfo();
  virtual ~IndTerAutoPollInfo_AddrInfo();

  IndTerAutoPollInfo_AddrInfo(const IndTerAutoPollInfo_AddrInfo& from);

  inline IndTerAutoPollInfo_AddrInfo& operator=(const IndTerAutoPollInfo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo_AddrInfo& default_instance();

  void Swap(IndTerAutoPollInfo_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo_AddrInfo& from);
  void MergeFrom(const IndTerAutoPollInfo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerAutoPollInfo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndTerAutoPollInfo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndTerAutoPollInfo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndTerAutoPollInfo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo_DomainInfo();
  virtual ~IndTerAutoPollInfo_DomainInfo();

  IndTerAutoPollInfo_DomainInfo(const IndTerAutoPollInfo_DomainInfo& from);

  inline IndTerAutoPollInfo_DomainInfo& operator=(const IndTerAutoPollInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo_DomainInfo& default_instance();

  void Swap(IndTerAutoPollInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo_DomainInfo& from);
  void MergeFrom(const IndTerAutoPollInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo_ParticipantInfo : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo_ParticipantInfo();
  virtual ~IndTerAutoPollInfo_ParticipantInfo();

  IndTerAutoPollInfo_ParticipantInfo(const IndTerAutoPollInfo_ParticipantInfo& from);

  inline IndTerAutoPollInfo_ParticipantInfo& operator=(const IndTerAutoPollInfo_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo_ParticipantInfo& default_instance();

  void Swap(IndTerAutoPollInfo_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo_ParticipantInfo& from);
  void MergeFrom(const IndTerAutoPollInfo_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo_AutoPollInfo : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo_AutoPollInfo();
  virtual ~IndTerAutoPollInfo_AutoPollInfo();

  IndTerAutoPollInfo_AutoPollInfo(const IndTerAutoPollInfo_AutoPollInfo& from);

  inline IndTerAutoPollInfo_AutoPollInfo& operator=(const IndTerAutoPollInfo_AutoPollInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo_AutoPollInfo& default_instance();

  void Swap(IndTerAutoPollInfo_AutoPollInfo* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo_AutoPollInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo_AutoPollInfo& from);
  void MergeFrom(const IndTerAutoPollInfo_AutoPollInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apid = 1;
  inline bool has_apid() const;
  inline void clear_apid();
  static const int kApidFieldNumber = 1;
  inline ::google::protobuf::uint64 apid() const;
  inline void set_apid(::google::protobuf::uint64 value);

  // optional string apname = 2;
  inline bool has_apname() const;
  inline void clear_apname();
  static const int kApnameFieldNumber = 2;
  inline const ::std::string& apname() const;
  inline void set_apname(const ::std::string& value);
  inline void set_apname(const char* value);
  inline void set_apname(const char* value, size_t size);
  inline ::std::string* mutable_apname();
  inline ::std::string* release_apname();
  inline void set_allocated_apname(::std::string* apname);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerAutoPollInfo.ParticipantInfo parts = 4;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 4;
  inline const ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo.AutoPollInfo)
 private:
  inline void set_has_apid();
  inline void clear_has_apid();
  inline void set_has_apname();
  inline void clear_has_apname();
  inline void set_has_addordel();
  inline void clear_has_addordel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 apid_;
  ::std::string* apname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo > parts_;
  ::google::protobuf::uint32 addordel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo_AutoPollInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerAutoPollInfo : public ::google::protobuf::Message {
 public:
  IndTerAutoPollInfo();
  virtual ~IndTerAutoPollInfo();

  IndTerAutoPollInfo(const IndTerAutoPollInfo& from);

  inline IndTerAutoPollInfo& operator=(const IndTerAutoPollInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerAutoPollInfo& default_instance();

  void Swap(IndTerAutoPollInfo* other);

  // implements Message ----------------------------------------------

  IndTerAutoPollInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerAutoPollInfo& from);
  void MergeFrom(const IndTerAutoPollInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerAutoPollInfo_IPPORT IPPORT;
  typedef IndTerAutoPollInfo_AddrInfo AddrInfo;
  typedef IndTerAutoPollInfo_DomainInfo DomainInfo;
  typedef IndTerAutoPollInfo_ParticipantInfo ParticipantInfo;
  typedef IndTerAutoPollInfo_AutoPollInfo AutoPollInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndTerAutoPollInfo.AutoPollInfo autopolllist = 3;
  inline int autopolllist_size() const;
  inline void clear_autopolllist();
  static const int kAutopolllistFieldNumber = 3;
  inline const ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo& autopolllist(int index) const;
  inline ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo* mutable_autopolllist(int index);
  inline ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo* add_autopolllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo >&
      autopolllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo >*
      mutable_autopolllist();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndTerAutoPollInfo.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndTerAutoPollInfo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndTerAutoPollInfo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndTerAutoPollInfo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndTerAutoPollInfo.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndTerAutoPollInfo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndTerAutoPollInfo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndTerAutoPollInfo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerAutoPollInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo > autopolllist_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndTerAutoPollInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndParticipantsOrder_IPPORT : public ::google::protobuf::Message {
 public:
  IndParticipantsOrder_IPPORT();
  virtual ~IndParticipantsOrder_IPPORT();

  IndParticipantsOrder_IPPORT(const IndParticipantsOrder_IPPORT& from);

  inline IndParticipantsOrder_IPPORT& operator=(const IndParticipantsOrder_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndParticipantsOrder_IPPORT& default_instance();

  void Swap(IndParticipantsOrder_IPPORT* other);

  // implements Message ----------------------------------------------

  IndParticipantsOrder_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndParticipantsOrder_IPPORT& from);
  void MergeFrom(const IndParticipantsOrder_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndParticipantsOrder.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndParticipantsOrder_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndParticipantsOrder_AddrInfo : public ::google::protobuf::Message {
 public:
  IndParticipantsOrder_AddrInfo();
  virtual ~IndParticipantsOrder_AddrInfo();

  IndParticipantsOrder_AddrInfo(const IndParticipantsOrder_AddrInfo& from);

  inline IndParticipantsOrder_AddrInfo& operator=(const IndParticipantsOrder_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndParticipantsOrder_AddrInfo& default_instance();

  void Swap(IndParticipantsOrder_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndParticipantsOrder_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndParticipantsOrder_AddrInfo& from);
  void MergeFrom(const IndParticipantsOrder_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndParticipantsOrder.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndParticipantsOrder_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndParticipantsOrder_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndParticipantsOrder_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndParticipantsOrder.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndParticipantsOrder_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndParticipantsOrder_DomainInfo : public ::google::protobuf::Message {
 public:
  IndParticipantsOrder_DomainInfo();
  virtual ~IndParticipantsOrder_DomainInfo();

  IndParticipantsOrder_DomainInfo(const IndParticipantsOrder_DomainInfo& from);

  inline IndParticipantsOrder_DomainInfo& operator=(const IndParticipantsOrder_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndParticipantsOrder_DomainInfo& default_instance();

  void Swap(IndParticipantsOrder_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndParticipantsOrder_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndParticipantsOrder_DomainInfo& from);
  void MergeFrom(const IndParticipantsOrder_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndParticipantsOrder.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndParticipantsOrder_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndParticipantsOrder_ParticipantInfo : public ::google::protobuf::Message {
 public:
  IndParticipantsOrder_ParticipantInfo();
  virtual ~IndParticipantsOrder_ParticipantInfo();

  IndParticipantsOrder_ParticipantInfo(const IndParticipantsOrder_ParticipantInfo& from);

  inline IndParticipantsOrder_ParticipantInfo& operator=(const IndParticipantsOrder_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndParticipantsOrder_ParticipantInfo& default_instance();

  void Swap(IndParticipantsOrder_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  IndParticipantsOrder_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndParticipantsOrder_ParticipantInfo& from);
  void MergeFrom(const IndParticipantsOrder_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional uint32 orderno = 2;
  inline bool has_orderno() const;
  inline void clear_orderno();
  static const int kOrdernoFieldNumber = 2;
  inline ::google::protobuf::uint32 orderno() const;
  inline void set_orderno(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndParticipantsOrder.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_orderno();
  inline void clear_has_orderno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 psuid_;
  ::google::protobuf::uint32 orderno_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndParticipantsOrder_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndParticipantsOrder : public ::google::protobuf::Message {
 public:
  IndParticipantsOrder();
  virtual ~IndParticipantsOrder();

  IndParticipantsOrder(const IndParticipantsOrder& from);

  inline IndParticipantsOrder& operator=(const IndParticipantsOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndParticipantsOrder& default_instance();

  void Swap(IndParticipantsOrder* other);

  // implements Message ----------------------------------------------

  IndParticipantsOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndParticipantsOrder& from);
  void MergeFrom(const IndParticipantsOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndParticipantsOrder_IPPORT IPPORT;
  typedef IndParticipantsOrder_AddrInfo AddrInfo;
  typedef IndParticipantsOrder_DomainInfo DomainInfo;
  typedef IndParticipantsOrder_ParticipantInfo ParticipantInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndParticipantsOrder.ParticipantInfo participants = 3;
  inline int participants_size() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 3;
  inline const ::SRMsgs::IndParticipantsOrder_ParticipantInfo& participants(int index) const;
  inline ::SRMsgs::IndParticipantsOrder_ParticipantInfo* mutable_participants(int index);
  inline ::SRMsgs::IndParticipantsOrder_ParticipantInfo* add_participants();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_ParticipantInfo >&
      participants() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_ParticipantInfo >*
      mutable_participants();

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndParticipantsOrder.AddrInfo svraddrs = 5;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 5;
  inline const ::SRMsgs::IndParticipantsOrder_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndParticipantsOrder_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndParticipantsOrder_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndParticipantsOrder.DomainInfo domains = 6;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 6;
  inline const ::SRMsgs::IndParticipantsOrder_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndParticipantsOrder_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndParticipantsOrder_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndParticipantsOrder)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_ParticipantInfo > participants_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_DomainInfo > domains_;
  ::google::protobuf::uint32 terid_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndParticipantsOrder* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeTerInfo_IPPORT : public ::google::protobuf::Message {
 public:
  IndChangeTerInfo_IPPORT();
  virtual ~IndChangeTerInfo_IPPORT();

  IndChangeTerInfo_IPPORT(const IndChangeTerInfo_IPPORT& from);

  inline IndChangeTerInfo_IPPORT& operator=(const IndChangeTerInfo_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeTerInfo_IPPORT& default_instance();

  void Swap(IndChangeTerInfo_IPPORT* other);

  // implements Message ----------------------------------------------

  IndChangeTerInfo_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeTerInfo_IPPORT& from);
  void MergeFrom(const IndChangeTerInfo_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeTerInfo.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeTerInfo_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeTerInfo_AddrInfo : public ::google::protobuf::Message {
 public:
  IndChangeTerInfo_AddrInfo();
  virtual ~IndChangeTerInfo_AddrInfo();

  IndChangeTerInfo_AddrInfo(const IndChangeTerInfo_AddrInfo& from);

  inline IndChangeTerInfo_AddrInfo& operator=(const IndChangeTerInfo_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeTerInfo_AddrInfo& default_instance();

  void Swap(IndChangeTerInfo_AddrInfo* other);

  // implements Message ----------------------------------------------

  IndChangeTerInfo_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeTerInfo_AddrInfo& from);
  void MergeFrom(const IndChangeTerInfo_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndChangeTerInfo.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::IndChangeTerInfo_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::IndChangeTerInfo_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::IndChangeTerInfo_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_IPPORT >*
      mutable_ipportinfos();

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeTerInfo.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeTerInfo_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeTerInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  IndChangeTerInfo_DomainInfo();
  virtual ~IndChangeTerInfo_DomainInfo();

  IndChangeTerInfo_DomainInfo(const IndChangeTerInfo_DomainInfo& from);

  inline IndChangeTerInfo_DomainInfo& operator=(const IndChangeTerInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeTerInfo_DomainInfo& default_instance();

  void Swap(IndChangeTerInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndChangeTerInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeTerInfo_DomainInfo& from);
  void MergeFrom(const IndChangeTerInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dname = 1;
  inline bool has_dname() const;
  inline void clear_dname();
  static const int kDnameFieldNumber = 1;
  inline const ::std::string& dname() const;
  inline void set_dname(const ::std::string& value);
  inline void set_dname(const char* value);
  inline void set_dname(const char* value, size_t size);
  inline ::std::string* mutable_dname();
  inline ::std::string* release_dname();
  inline void set_allocated_dname(::std::string* dname);

  // optional uint32 dlevel = 2;
  inline bool has_dlevel() const;
  inline void clear_dlevel();
  static const int kDlevelFieldNumber = 2;
  inline ::google::protobuf::uint32 dlevel() const;
  inline void set_dlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeTerInfo.DomainInfo)
 private:
  inline void set_has_dname();
  inline void clear_has_dname();
  inline void set_has_dlevel();
  inline void clear_has_dlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dname_;
  ::google::protobuf::uint32 dlevel_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeTerInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeTerInfo_TerInfo : public ::google::protobuf::Message {
 public:
  IndChangeTerInfo_TerInfo();
  virtual ~IndChangeTerInfo_TerInfo();

  IndChangeTerInfo_TerInfo(const IndChangeTerInfo_TerInfo& from);

  inline IndChangeTerInfo_TerInfo& operator=(const IndChangeTerInfo_TerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeTerInfo_TerInfo& default_instance();

  void Swap(IndChangeTerInfo_TerInfo* other);

  // implements Message ----------------------------------------------

  IndChangeTerInfo_TerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeTerInfo_TerInfo& from);
  void MergeFrom(const IndChangeTerInfo_TerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint32 fromtype = 2;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 fromtype() const;
  inline void set_fromtype(::google::protobuf::uint32 value);

  // optional uint32 termtype = 3;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 4;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 4;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeTerInfo.TerInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 fromtype_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeTerInfo_TerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndChangeTerInfo : public ::google::protobuf::Message {
 public:
  IndChangeTerInfo();
  virtual ~IndChangeTerInfo();

  IndChangeTerInfo(const IndChangeTerInfo& from);

  inline IndChangeTerInfo& operator=(const IndChangeTerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndChangeTerInfo& default_instance();

  void Swap(IndChangeTerInfo* other);

  // implements Message ----------------------------------------------

  IndChangeTerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndChangeTerInfo& from);
  void MergeFrom(const IndChangeTerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndChangeTerInfo_IPPORT IPPORT;
  typedef IndChangeTerInfo_AddrInfo AddrInfo;
  typedef IndChangeTerInfo_DomainInfo DomainInfo;
  typedef IndChangeTerInfo_TerInfo TerInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 terid = 2;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 2;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 changeterid = 3;
  inline bool has_changeterid() const;
  inline void clear_changeterid();
  static const int kChangeteridFieldNumber = 3;
  inline ::google::protobuf::uint32 changeterid() const;
  inline void set_changeterid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndChangeTerInfo.TerInfo cterinfo = 4;
  inline bool has_cterinfo() const;
  inline void clear_cterinfo();
  static const int kCterinfoFieldNumber = 4;
  inline const ::SRMsgs::IndChangeTerInfo_TerInfo& cterinfo() const;
  inline ::SRMsgs::IndChangeTerInfo_TerInfo* mutable_cterinfo();
  inline ::SRMsgs::IndChangeTerInfo_TerInfo* release_cterinfo();
  inline void set_allocated_cterinfo(::SRMsgs::IndChangeTerInfo_TerInfo* cterinfo);

  // optional string domainname = 5;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 5;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.IndChangeTerInfo.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::IndChangeTerInfo_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::IndChangeTerInfo_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::IndChangeTerInfo_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_AddrInfo >*
      mutable_svraddrs();

  // repeated .SRMsgs.IndChangeTerInfo.DomainInfo domains = 7;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 7;
  inline const ::SRMsgs::IndChangeTerInfo_DomainInfo& domains(int index) const;
  inline ::SRMsgs::IndChangeTerInfo_DomainInfo* mutable_domains(int index);
  inline ::SRMsgs::IndChangeTerInfo_DomainInfo* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_DomainInfo >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_DomainInfo >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndChangeTerInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_changeterid();
  inline void clear_has_changeterid();
  inline void set_has_cterinfo();
  inline void clear_has_cterinfo();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 changeterid_;
  ::SRMsgs::IndChangeTerInfo_TerInfo* cterinfo_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_AddrInfo > svraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_DomainInfo > domains_;
  friend void  protobuf_AddDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_AssignDesc_mc_5fter_5fplus_2eproto();
  friend void protobuf_ShutdownFile_mc_5fter_5fplus_2eproto();

  void InitAsDefaultInstance();
  static IndChangeTerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqConfGroupMeetingRoomTerLists_IPPORT

// optional uint32 nettype = 1;
inline bool ReqConfGroupMeetingRoomTerLists_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.nettype)
  return nettype_;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.nettype)
}

// optional string ip = 2;
inline bool ReqConfGroupMeetingRoomTerLists_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqConfGroupMeetingRoomTerLists_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
  return *ip_;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
  return ip_;
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool ReqConfGroupMeetingRoomTerLists_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.port)
  return port_;
}
inline void ReqConfGroupMeetingRoomTerLists_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT.port)
}

// -------------------------------------------------------------------

// ReqConfGroupMeetingRoomTerLists_AddrInfo

// optional uint32 svrtype = 1;
inline bool ReqConfGroupMeetingRoomTerLists_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.svrtype)
  return svrtype_;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.svrtype)
}

// repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.IPPORT ipportinfos = 2;
inline int ReqConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT& ReqConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT* ReqConfGroupMeetingRoomTerLists_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT* ReqConfGroupMeetingRoomTerLists_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT >&
ReqConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_IPPORT >*
ReqConfGroupMeetingRoomTerLists_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool ReqConfGroupMeetingRoomTerLists_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.level)
  return level_;
}
inline void ReqConfGroupMeetingRoomTerLists_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo.level)
}

// -------------------------------------------------------------------

// ReqConfGroupMeetingRoomTerLists_DomainInfo

// optional string dname = 1;
inline bool ReqConfGroupMeetingRoomTerLists_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& ReqConfGroupMeetingRoomTerLists_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
  return *dname_;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
  return dname_;
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool ReqConfGroupMeetingRoomTerLists_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dlevel)
  return dlevel_;
}
inline void ReqConfGroupMeetingRoomTerLists_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// ReqConfGroupMeetingRoomTerLists_GMRInfo

// optional uint32 gmrtype = 1;
inline bool ReqConfGroupMeetingRoomTerLists_GMRInfo::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_GMRInfo::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo.gmrtype)
  return gmrtype_;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo.gmrtype)
}

// optional uint32 gmrid = 2;
inline bool ReqConfGroupMeetingRoomTerLists_GMRInfo::has_gmrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::set_has_gmrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists_GMRInfo::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo.gmrid)
  return gmrid_;
}
inline void ReqConfGroupMeetingRoomTerLists_GMRInfo::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo.gmrid)
}

// -------------------------------------------------------------------

// ReqConfGroupMeetingRoomTerLists

// optional uint64 confid = 1;
inline bool ReqConfGroupMeetingRoomTerLists::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqConfGroupMeetingRoomTerLists::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.confid)
  return confid_;
}
inline void ReqConfGroupMeetingRoomTerLists::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.confid)
}

// optional uint32 terid = 2;
inline bool ReqConfGroupMeetingRoomTerLists::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.terid)
  return terid_;
}
inline void ReqConfGroupMeetingRoomTerLists::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.terid)
}

// optional uint32 sponsortype = 3;
inline bool ReqConfGroupMeetingRoomTerLists::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 ReqConfGroupMeetingRoomTerLists::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.sponsortype)
  return sponsortype_;
}
inline void ReqConfGroupMeetingRoomTerLists::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.sponsortype)
}

// repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.GMRInfo reqgmrters = 4;
inline int ReqConfGroupMeetingRoomTerLists::reqgmrters_size() const {
  return reqgmrters_.size();
}
inline void ReqConfGroupMeetingRoomTerLists::clear_reqgmrters() {
  reqgmrters_.Clear();
}
inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo& ReqConfGroupMeetingRoomTerLists::reqgmrters(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.reqgmrters)
  return reqgmrters_.Get(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo* ReqConfGroupMeetingRoomTerLists::mutable_reqgmrters(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.reqgmrters)
  return reqgmrters_.Mutable(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo* ReqConfGroupMeetingRoomTerLists::add_reqgmrters() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfGroupMeetingRoomTerLists.reqgmrters)
  return reqgmrters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo >&
ReqConfGroupMeetingRoomTerLists::reqgmrters() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.reqgmrters)
  return reqgmrters_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_GMRInfo >*
ReqConfGroupMeetingRoomTerLists::mutable_reqgmrters() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.reqgmrters)
  return &reqgmrters_;
}

// optional string domainname = 5;
inline bool ReqConfGroupMeetingRoomTerLists::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqConfGroupMeetingRoomTerLists::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqConfGroupMeetingRoomTerLists::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqConfGroupMeetingRoomTerLists::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
  return *domainname_;
}
inline void ReqConfGroupMeetingRoomTerLists::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
}
inline void ReqConfGroupMeetingRoomTerLists::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
}
inline void ReqConfGroupMeetingRoomTerLists::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
  return domainname_;
}
inline ::std::string* ReqConfGroupMeetingRoomTerLists::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfGroupMeetingRoomTerLists::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfGroupMeetingRoomTerLists.domainname)
}

// repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.AddrInfo svraddrs = 6;
inline int ReqConfGroupMeetingRoomTerLists::svraddrs_size() const {
  return svraddrs_.size();
}
inline void ReqConfGroupMeetingRoomTerLists::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo& ReqConfGroupMeetingRoomTerLists::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo* ReqConfGroupMeetingRoomTerLists::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo* ReqConfGroupMeetingRoomTerLists::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo >&
ReqConfGroupMeetingRoomTerLists::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_AddrInfo >*
ReqConfGroupMeetingRoomTerLists::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.ReqConfGroupMeetingRoomTerLists.DomainInfo domains = 7;
inline int ReqConfGroupMeetingRoomTerLists::domains_size() const {
  return domains_.size();
}
inline void ReqConfGroupMeetingRoomTerLists::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo& ReqConfGroupMeetingRoomTerLists::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfGroupMeetingRoomTerLists.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo* ReqConfGroupMeetingRoomTerLists::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfGroupMeetingRoomTerLists.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo* ReqConfGroupMeetingRoomTerLists::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfGroupMeetingRoomTerLists.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo >&
ReqConfGroupMeetingRoomTerLists::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfGroupMeetingRoomTerLists_DomainInfo >*
ReqConfGroupMeetingRoomTerLists::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfGroupMeetingRoomTerLists.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// ReqConfRollCallInfo_IPPORT

// optional uint32 nettype = 1;
inline bool ReqConfRollCallInfo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfRollCallInfo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.IPPORT.nettype)
  return nettype_;
}
inline void ReqConfRollCallInfo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool ReqConfRollCallInfo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfRollCallInfo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqConfRollCallInfo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
  return *ip_;
}
inline void ReqConfRollCallInfo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
}
inline void ReqConfRollCallInfo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
}
inline void ReqConfRollCallInfo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
}
inline ::std::string* ReqConfRollCallInfo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
  return ip_;
}
inline ::std::string* ReqConfRollCallInfo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfRollCallInfo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfRollCallInfo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool ReqConfRollCallInfo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfRollCallInfo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfRollCallInfo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.IPPORT.port)
  return port_;
}
inline void ReqConfRollCallInfo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.IPPORT.port)
}

// -------------------------------------------------------------------

// ReqConfRollCallInfo_AddrInfo

// optional uint32 svrtype = 1;
inline bool ReqConfRollCallInfo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfRollCallInfo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfRollCallInfo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfRollCallInfo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.AddrInfo.svrtype)
  return svrtype_;
}
inline void ReqConfRollCallInfo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.AddrInfo.svrtype)
}

// repeated .SRMsgs.ReqConfRollCallInfo.IPPORT ipportinfos = 2;
inline int ReqConfRollCallInfo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void ReqConfRollCallInfo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::ReqConfRollCallInfo_IPPORT& ReqConfRollCallInfo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_IPPORT* ReqConfRollCallInfo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_IPPORT* ReqConfRollCallInfo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_IPPORT >&
ReqConfRollCallInfo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_IPPORT >*
ReqConfRollCallInfo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfRollCallInfo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool ReqConfRollCallInfo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfRollCallInfo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfRollCallInfo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfRollCallInfo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.AddrInfo.level)
  return level_;
}
inline void ReqConfRollCallInfo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.AddrInfo.level)
}

// -------------------------------------------------------------------

// ReqConfRollCallInfo_DomainInfo

// optional string dname = 1;
inline bool ReqConfRollCallInfo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfRollCallInfo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfRollCallInfo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfRollCallInfo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& ReqConfRollCallInfo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
  return *dname_;
}
inline void ReqConfRollCallInfo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
}
inline void ReqConfRollCallInfo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
}
inline void ReqConfRollCallInfo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
}
inline ::std::string* ReqConfRollCallInfo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* ReqConfRollCallInfo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfRollCallInfo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfRollCallInfo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool ReqConfRollCallInfo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfRollCallInfo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfRollCallInfo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfRollCallInfo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.DomainInfo.dlevel)
  return dlevel_;
}
inline void ReqConfRollCallInfo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// ReqConfRollCallInfo

// optional uint64 confid = 1;
inline bool ReqConfRollCallInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfRollCallInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfRollCallInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfRollCallInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqConfRollCallInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.confid)
  return confid_;
}
inline void ReqConfRollCallInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.confid)
}

// optional uint32 terid = 2;
inline bool ReqConfRollCallInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfRollCallInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfRollCallInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfRollCallInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.terid)
  return terid_;
}
inline void ReqConfRollCallInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.terid)
}

// optional uint32 sponsortype = 3;
inline bool ReqConfRollCallInfo::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfRollCallInfo::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfRollCallInfo::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfRollCallInfo::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 ReqConfRollCallInfo::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.sponsortype)
  return sponsortype_;
}
inline void ReqConfRollCallInfo::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.sponsortype)
}

// optional string domainname = 4;
inline bool ReqConfRollCallInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqConfRollCallInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqConfRollCallInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqConfRollCallInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqConfRollCallInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.domainname)
  return *domainname_;
}
inline void ReqConfRollCallInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfRollCallInfo.domainname)
}
inline void ReqConfRollCallInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfRollCallInfo.domainname)
}
inline void ReqConfRollCallInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfRollCallInfo.domainname)
}
inline ::std::string* ReqConfRollCallInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.domainname)
  return domainname_;
}
inline ::std::string* ReqConfRollCallInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfRollCallInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfRollCallInfo.domainname)
}

// repeated .SRMsgs.ReqConfRollCallInfo.AddrInfo svraddrs = 5;
inline int ReqConfRollCallInfo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void ReqConfRollCallInfo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::ReqConfRollCallInfo_AddrInfo& ReqConfRollCallInfo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_AddrInfo* ReqConfRollCallInfo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_AddrInfo* ReqConfRollCallInfo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfRollCallInfo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_AddrInfo >&
ReqConfRollCallInfo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfRollCallInfo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_AddrInfo >*
ReqConfRollCallInfo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfRollCallInfo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.ReqConfRollCallInfo.DomainInfo domains = 6;
inline int ReqConfRollCallInfo::domains_size() const {
  return domains_.size();
}
inline void ReqConfRollCallInfo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::ReqConfRollCallInfo_DomainInfo& ReqConfRollCallInfo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfRollCallInfo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_DomainInfo* ReqConfRollCallInfo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfRollCallInfo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::ReqConfRollCallInfo_DomainInfo* ReqConfRollCallInfo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqConfRollCallInfo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_DomainInfo >&
ReqConfRollCallInfo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqConfRollCallInfo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqConfRollCallInfo_DomainInfo >*
ReqConfRollCallInfo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqConfRollCallInfo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// ReqSendAssistVideo_IPPORT

// optional uint32 nettype = 1;
inline bool ReqSendAssistVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.IPPORT.nettype)
  return nettype_;
}
inline void ReqSendAssistVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool ReqSendAssistVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqSendAssistVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
  return *ip_;
}
inline void ReqSendAssistVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
}
inline void ReqSendAssistVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
}
inline void ReqSendAssistVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
}
inline ::std::string* ReqSendAssistVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* ReqSendAssistVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool ReqSendAssistVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.IPPORT.port)
  return port_;
}
inline void ReqSendAssistVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// ReqSendAssistVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool ReqSendAssistVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void ReqSendAssistVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.ReqSendAssistVideo.IPPORT ipportinfos = 2;
inline int ReqSendAssistVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void ReqSendAssistVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideo_IPPORT& ReqSendAssistVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideo_IPPORT* ReqSendAssistVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideo_IPPORT* ReqSendAssistVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_IPPORT >&
ReqSendAssistVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_IPPORT >*
ReqSendAssistVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool ReqSendAssistVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.AddrInfo.level)
  return level_;
}
inline void ReqSendAssistVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// ReqSendAssistVideo_DomainInfo

// optional string dname = 1;
inline bool ReqSendAssistVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& ReqSendAssistVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
  return *dname_;
}
inline void ReqSendAssistVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
}
inline void ReqSendAssistVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
}
inline void ReqSendAssistVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
}
inline ::std::string* ReqSendAssistVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* ReqSendAssistVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool ReqSendAssistVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void ReqSendAssistVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// ReqSendAssistVideo

// optional uint64 confid = 1;
inline bool ReqSendAssistVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqSendAssistVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.confid)
  return confid_;
}
inline void ReqSendAssistVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.confid)
}

// optional uint32 terid = 2;
inline bool ReqSendAssistVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 ReqSendAssistVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.terid)
  return terid_;
}
inline void ReqSendAssistVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.terid)
}

// optional string domainname = 3;
inline bool ReqSendAssistVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqSendAssistVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.domainname)
  return *domainname_;
}
inline void ReqSendAssistVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideo.domainname)
}
inline void ReqSendAssistVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideo.domainname)
}
inline void ReqSendAssistVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideo.domainname)
}
inline ::std::string* ReqSendAssistVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.domainname)
  return domainname_;
}
inline ::std::string* ReqSendAssistVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideo.domainname)
}

// repeated .SRMsgs.ReqSendAssistVideo.AddrInfo svraddrs = 4;
inline int ReqSendAssistVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void ReqSendAssistVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideo_AddrInfo& ReqSendAssistVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideo_AddrInfo* ReqSendAssistVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideo_AddrInfo* ReqSendAssistVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_AddrInfo >&
ReqSendAssistVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_AddrInfo >*
ReqSendAssistVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.ReqSendAssistVideo.DomainInfo domains = 5;
inline int ReqSendAssistVideo::domains_size() const {
  return domains_.size();
}
inline void ReqSendAssistVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideo_DomainInfo& ReqSendAssistVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideo_DomainInfo* ReqSendAssistVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideo_DomainInfo* ReqSendAssistVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_DomainInfo >&
ReqSendAssistVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideo_DomainInfo >*
ReqSendAssistVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// RspSendAssistVideoProxy_IPPORT

// optional uint32 nettype = 1;
inline bool RspSendAssistVideoProxy_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideoProxy_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.IPPORT.nettype)
  return nettype_;
}
inline void RspSendAssistVideoProxy_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.IPPORT.nettype)
}

// optional string ip = 2;
inline bool RspSendAssistVideoProxy_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideoProxy_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspSendAssistVideoProxy_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
  return *ip_;
}
inline void RspSendAssistVideoProxy_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
}
inline void RspSendAssistVideoProxy_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
}
inline void RspSendAssistVideoProxy_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
}
inline ::std::string* RspSendAssistVideoProxy_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
  return ip_;
}
inline ::std::string* RspSendAssistVideoProxy_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideoProxy_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideoProxy.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool RspSendAssistVideoProxy_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideoProxy_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideoProxy_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.IPPORT.port)
  return port_;
}
inline void RspSendAssistVideoProxy_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.IPPORT.port)
}

// -------------------------------------------------------------------

// RspSendAssistVideoProxy_AddrInfo

// optional uint32 svrtype = 1;
inline bool RspSendAssistVideoProxy_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideoProxy_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideoProxy_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideoProxy_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.AddrInfo.svrtype)
  return svrtype_;
}
inline void RspSendAssistVideoProxy_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.AddrInfo.svrtype)
}

// repeated .SRMsgs.RspSendAssistVideoProxy.IPPORT ipportinfos = 2;
inline int RspSendAssistVideoProxy_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void RspSendAssistVideoProxy_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideoProxy_IPPORT& RspSendAssistVideoProxy_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_IPPORT* RspSendAssistVideoProxy_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_IPPORT* RspSendAssistVideoProxy_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_IPPORT >&
RspSendAssistVideoProxy_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_IPPORT >*
RspSendAssistVideoProxy_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideoProxy.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool RspSendAssistVideoProxy_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideoProxy_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideoProxy_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideoProxy_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.AddrInfo.level)
  return level_;
}
inline void RspSendAssistVideoProxy_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.AddrInfo.level)
}

// -------------------------------------------------------------------

// RspSendAssistVideoProxy_DomainInfo

// optional string dname = 1;
inline bool RspSendAssistVideoProxy_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideoProxy_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideoProxy_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideoProxy_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& RspSendAssistVideoProxy_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
  return *dname_;
}
inline void RspSendAssistVideoProxy_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
}
inline void RspSendAssistVideoProxy_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
}
inline void RspSendAssistVideoProxy_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
}
inline ::std::string* RspSendAssistVideoProxy_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
  return dname_;
}
inline ::std::string* RspSendAssistVideoProxy_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideoProxy_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool RspSendAssistVideoProxy_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideoProxy_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideoProxy_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideoProxy_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dlevel)
  return dlevel_;
}
inline void RspSendAssistVideoProxy_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// RspSendAssistVideoProxy

// optional uint64 confid = 1;
inline bool RspSendAssistVideoProxy::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideoProxy::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideoProxy::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspSendAssistVideoProxy::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.confid)
  return confid_;
}
inline void RspSendAssistVideoProxy::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.confid)
}

// optional uint32 terid = 2;
inline bool RspSendAssistVideoProxy::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideoProxy::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideoProxy::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.terid)
  return terid_;
}
inline void RspSendAssistVideoProxy::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.terid)
}

// optional bool isok = 3;
inline bool RspSendAssistVideoProxy::has_isok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_isok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideoProxy::clear_has_isok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideoProxy::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspSendAssistVideoProxy::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.isok)
  return isok_;
}
inline void RspSendAssistVideoProxy::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.isok)
}

// optional uint32 avterid = 4;
inline bool RspSendAssistVideoProxy::has_avterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_avterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspSendAssistVideoProxy::clear_has_avterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspSendAssistVideoProxy::clear_avterid() {
  avterid_ = 0u;
  clear_has_avterid();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy::avterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.avterid)
  return avterid_;
}
inline void RspSendAssistVideoProxy::set_avterid(::google::protobuf::uint32 value) {
  set_has_avterid();
  avterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.avterid)
}

// optional string failreason = 5;
inline bool RspSendAssistVideoProxy::has_failreason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_failreason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspSendAssistVideoProxy::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspSendAssistVideoProxy::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspSendAssistVideoProxy::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.failreason)
  return *failreason_;
}
inline void RspSendAssistVideoProxy::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.failreason)
}
inline void RspSendAssistVideoProxy::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideoProxy.failreason)
}
inline void RspSendAssistVideoProxy::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideoProxy.failreason)
}
inline ::std::string* RspSendAssistVideoProxy::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.failreason)
  return failreason_;
}
inline ::std::string* RspSendAssistVideoProxy::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideoProxy::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideoProxy.failreason)
}

// optional string domainname = 6;
inline bool RspSendAssistVideoProxy::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspSendAssistVideoProxy::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspSendAssistVideoProxy::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspSendAssistVideoProxy::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.domainname)
  return *domainname_;
}
inline void RspSendAssistVideoProxy::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.domainname)
}
inline void RspSendAssistVideoProxy::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideoProxy.domainname)
}
inline void RspSendAssistVideoProxy::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideoProxy.domainname)
}
inline ::std::string* RspSendAssistVideoProxy::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.domainname)
  return domainname_;
}
inline ::std::string* RspSendAssistVideoProxy::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideoProxy::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideoProxy.domainname)
}

// repeated .SRMsgs.RspSendAssistVideoProxy.AddrInfo svraddrs = 7;
inline int RspSendAssistVideoProxy::svraddrs_size() const {
  return svraddrs_.size();
}
inline void RspSendAssistVideoProxy::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideoProxy_AddrInfo& RspSendAssistVideoProxy::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_AddrInfo* RspSendAssistVideoProxy::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_AddrInfo* RspSendAssistVideoProxy::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideoProxy.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_AddrInfo >&
RspSendAssistVideoProxy::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideoProxy.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_AddrInfo >*
RspSendAssistVideoProxy::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideoProxy.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.RspSendAssistVideoProxy.DomainInfo domains = 8;
inline int RspSendAssistVideoProxy::domains_size() const {
  return domains_.size();
}
inline void RspSendAssistVideoProxy::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideoProxy_DomainInfo& RspSendAssistVideoProxy::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_DomainInfo* RspSendAssistVideoProxy::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideoProxy.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideoProxy_DomainInfo* RspSendAssistVideoProxy::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideoProxy.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_DomainInfo >&
RspSendAssistVideoProxy::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideoProxy.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideoProxy_DomainInfo >*
RspSendAssistVideoProxy::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideoProxy.domains)
  return &domains_;
}

// optional uint32 errorcode = 9;
inline bool RspSendAssistVideoProxy::has_errorcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspSendAssistVideoProxy::set_has_errorcode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspSendAssistVideoProxy::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspSendAssistVideoProxy::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspSendAssistVideoProxy::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideoProxy.errorcode)
  return errorcode_;
}
inline void RspSendAssistVideoProxy::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideoProxy.errorcode)
}

// -------------------------------------------------------------------

// IndExitGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool IndExitGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndExitGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndExitGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
}
inline void IndExitGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
}
inline void IndExitGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* IndExitGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndExitGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndExitGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndExitGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndExitGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndExitGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void IndExitGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// IndExitGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndExitGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndExitGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndExitGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndExitGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndExitGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndExitGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int IndExitGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndExitGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndExitGroupMeetingRoom_IPPORT& IndExitGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_IPPORT* IndExitGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_IPPORT* IndExitGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_IPPORT >&
IndExitGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_IPPORT >*
IndExitGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndExitGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndExitGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndExitGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndExitGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void IndExitGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndExitGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool IndExitGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndExitGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndExitGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndExitGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* IndExitGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndExitGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndExitGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndExitGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndExitGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndExitGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndExitGroupMeetingRoom

// optional uint32 suid = 1;
inline bool IndExitGroupMeetingRoom::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndExitGroupMeetingRoom::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndExitGroupMeetingRoom::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.suid)
  return suid_;
}
inline void IndExitGroupMeetingRoom::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.suid)
}

// optional uint64 confid = 2;
inline bool IndExitGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndExitGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndExitGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndExitGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.confid)
  return confid_;
}
inline void IndExitGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.confid)
}

// optional uint32 gmrtype = 3;
inline bool IndExitGroupMeetingRoom::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndExitGroupMeetingRoom::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndExitGroupMeetingRoom::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.gmrtype)
  return gmrtype_;
}
inline void IndExitGroupMeetingRoom::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.gmrtype)
}

// optional uint32 gmrid = 4;
inline bool IndExitGroupMeetingRoom::has_gmrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_gmrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndExitGroupMeetingRoom::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndExitGroupMeetingRoom::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.gmrid)
  return gmrid_;
}
inline void IndExitGroupMeetingRoom::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.gmrid)
}

// optional string exitreason = 5;
inline bool IndExitGroupMeetingRoom::has_exitreason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_exitreason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndExitGroupMeetingRoom::clear_has_exitreason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndExitGroupMeetingRoom::clear_exitreason() {
  if (exitreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exitreason_->clear();
  }
  clear_has_exitreason();
}
inline const ::std::string& IndExitGroupMeetingRoom::exitreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.exitreason)
  return *exitreason_;
}
inline void IndExitGroupMeetingRoom::set_exitreason(const ::std::string& value) {
  set_has_exitreason();
  if (exitreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exitreason_ = new ::std::string;
  }
  exitreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.exitreason)
}
inline void IndExitGroupMeetingRoom::set_exitreason(const char* value) {
  set_has_exitreason();
  if (exitreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exitreason_ = new ::std::string;
  }
  exitreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndExitGroupMeetingRoom.exitreason)
}
inline void IndExitGroupMeetingRoom::set_exitreason(const char* value, size_t size) {
  set_has_exitreason();
  if (exitreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exitreason_ = new ::std::string;
  }
  exitreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndExitGroupMeetingRoom.exitreason)
}
inline ::std::string* IndExitGroupMeetingRoom::mutable_exitreason() {
  set_has_exitreason();
  if (exitreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exitreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.exitreason)
  return exitreason_;
}
inline ::std::string* IndExitGroupMeetingRoom::release_exitreason() {
  clear_has_exitreason();
  if (exitreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exitreason_;
    exitreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndExitGroupMeetingRoom::set_allocated_exitreason(::std::string* exitreason) {
  if (exitreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exitreason_;
  }
  if (exitreason) {
    set_has_exitreason();
    exitreason_ = exitreason;
  } else {
    clear_has_exitreason();
    exitreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndExitGroupMeetingRoom.exitreason)
}

// optional uint32 errorcode = 6;
inline bool IndExitGroupMeetingRoom::has_errorcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_errorcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndExitGroupMeetingRoom::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndExitGroupMeetingRoom::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.errorcode)
  return errorcode_;
}
inline void IndExitGroupMeetingRoom::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.errorcode)
}

// optional string domainname = 7;
inline bool IndExitGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndExitGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndExitGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndExitGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void IndExitGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.domainname)
}
inline void IndExitGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndExitGroupMeetingRoom.domainname)
}
inline void IndExitGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndExitGroupMeetingRoom.domainname)
}
inline ::std::string* IndExitGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* IndExitGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndExitGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndExitGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.IndExitGroupMeetingRoom.AddrInfo svraddrs = 8;
inline int IndExitGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndExitGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo& IndExitGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo* IndExitGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo* IndExitGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo >&
IndExitGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndExitGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_AddrInfo >*
IndExitGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndExitGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndExitGroupMeetingRoom.DomainInfo domains = 9;
inline int IndExitGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void IndExitGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo& IndExitGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo* IndExitGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndExitGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo* IndExitGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndExitGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo >&
IndExitGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndExitGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndExitGroupMeetingRoom_DomainInfo >*
IndExitGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndExitGroupMeetingRoom.domains)
  return &domains_;
}

// optional uint32 termtype = 10;
inline bool IndExitGroupMeetingRoom::has_termtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_termtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndExitGroupMeetingRoom::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndExitGroupMeetingRoom::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.termtype)
  return termtype_;
}
inline void IndExitGroupMeetingRoom::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.termtype)
}

// optional uint32 producttype = 11;
inline bool IndExitGroupMeetingRoom::has_producttype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndExitGroupMeetingRoom::set_has_producttype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndExitGroupMeetingRoom::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndExitGroupMeetingRoom::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndExitGroupMeetingRoom::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndExitGroupMeetingRoom.producttype)
  return producttype_;
}
inline void IndExitGroupMeetingRoom::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndExitGroupMeetingRoom.producttype)
}

// -------------------------------------------------------------------

// IndGroupMeetingRoomTerBeatToMC_IPPORT

// optional uint32 nettype = 1;
inline bool IndGroupMeetingRoomTerBeatToMC_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.nettype)
  return nettype_;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndGroupMeetingRoomTerBeatToMC_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndGroupMeetingRoomTerBeatToMC_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
  return *ip_;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndGroupMeetingRoomTerBeatToMC_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.port)
  return port_;
}
inline void IndGroupMeetingRoomTerBeatToMC_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT.port)
}

// -------------------------------------------------------------------

// IndGroupMeetingRoomTerBeatToMC_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndGroupMeetingRoomTerBeatToMC_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT ipportinfos = 2;
inline int IndGroupMeetingRoomTerBeatToMC_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT& IndGroupMeetingRoomTerBeatToMC_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* IndGroupMeetingRoomTerBeatToMC_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* IndGroupMeetingRoomTerBeatToMC_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >&
IndGroupMeetingRoomTerBeatToMC_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >*
IndGroupMeetingRoomTerBeatToMC_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndGroupMeetingRoomTerBeatToMC_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.level)
  return level_;
}
inline void IndGroupMeetingRoomTerBeatToMC_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndGroupMeetingRoomTerBeatToMC_DomainInfo

// optional string dname = 1;
inline bool IndGroupMeetingRoomTerBeatToMC_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndGroupMeetingRoomTerBeatToMC_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
  return *dname_;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndGroupMeetingRoomTerBeatToMC_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndGroupMeetingRoomTerBeatToMC_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndGroupMeetingRoomTerBeatToMC

// optional uint32 suid = 1;
inline bool IndGroupMeetingRoomTerBeatToMC::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.suid)
  return suid_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.suid)
}

// optional uint64 confid = 2;
inline bool IndGroupMeetingRoomTerBeatToMC::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndGroupMeetingRoomTerBeatToMC::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.confid)
  return confid_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.confid)
}

// optional uint32 gmrtype = 3;
inline bool IndGroupMeetingRoomTerBeatToMC::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.gmrtype)
  return gmrtype_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.gmrtype)
}

// optional uint32 gmrid = 4;
inline bool IndGroupMeetingRoomTerBeatToMC::has_gmrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_gmrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.gmrid)
  return gmrid_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.gmrid)
}

// optional string domainname = 5;
inline bool IndGroupMeetingRoomTerBeatToMC::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndGroupMeetingRoomTerBeatToMC::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
  return *domainname_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
}
inline void IndGroupMeetingRoomTerBeatToMC::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
}
inline void IndGroupMeetingRoomTerBeatToMC::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
  return domainname_;
}
inline ::std::string* IndGroupMeetingRoomTerBeatToMC::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndGroupMeetingRoomTerBeatToMC::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domainname)
}

// repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.AddrInfo svraddrs = 6;
inline int IndGroupMeetingRoomTerBeatToMC::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo& IndGroupMeetingRoomTerBeatToMC::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo* IndGroupMeetingRoomTerBeatToMC::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo* IndGroupMeetingRoomTerBeatToMC::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndGroupMeetingRoomTerBeatToMC.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo >&
IndGroupMeetingRoomTerBeatToMC::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_AddrInfo >*
IndGroupMeetingRoomTerBeatToMC::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.DomainInfo domains = 7;
inline int IndGroupMeetingRoomTerBeatToMC::domains_size() const {
  return domains_.size();
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo& IndGroupMeetingRoomTerBeatToMC::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo* IndGroupMeetingRoomTerBeatToMC::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo* IndGroupMeetingRoomTerBeatToMC::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo >&
IndGroupMeetingRoomTerBeatToMC::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_DomainInfo >*
IndGroupMeetingRoomTerBeatToMC::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.domains)
  return &domains_;
}

// optional uint32 termtype = 8;
inline bool IndGroupMeetingRoomTerBeatToMC::has_termtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_termtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.termtype)
  return termtype_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.termtype)
}

// repeated .SRMsgs.IndGroupMeetingRoomTerBeatToMC.IPPORT selfaddrs = 9;
inline int IndGroupMeetingRoomTerBeatToMC::selfaddrs_size() const {
  return selfaddrs_.size();
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_selfaddrs() {
  selfaddrs_.Clear();
}
inline const ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT& IndGroupMeetingRoomTerBeatToMC::selfaddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.selfaddrs)
  return selfaddrs_.Get(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* IndGroupMeetingRoomTerBeatToMC::mutable_selfaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndGroupMeetingRoomTerBeatToMC.selfaddrs)
  return selfaddrs_.Mutable(index);
}
inline ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT* IndGroupMeetingRoomTerBeatToMC::add_selfaddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndGroupMeetingRoomTerBeatToMC.selfaddrs)
  return selfaddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >&
IndGroupMeetingRoomTerBeatToMC::selfaddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.selfaddrs)
  return selfaddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndGroupMeetingRoomTerBeatToMC_IPPORT >*
IndGroupMeetingRoomTerBeatToMC::mutable_selfaddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndGroupMeetingRoomTerBeatToMC.selfaddrs)
  return &selfaddrs_;
}

// optional uint32 producttype = 10;
inline bool IndGroupMeetingRoomTerBeatToMC::has_producttype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_has_producttype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndGroupMeetingRoomTerBeatToMC::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndGroupMeetingRoomTerBeatToMC::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndGroupMeetingRoomTerBeatToMC.producttype)
  return producttype_;
}
inline void IndGroupMeetingRoomTerBeatToMC::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndGroupMeetingRoomTerBeatToMC.producttype)
}

// -------------------------------------------------------------------

// IndAssistVideoStart_IPPORT

// optional uint32 nettype = 1;
inline bool IndAssistVideoStart_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoStart_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoStart_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoStart_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAssistVideoStart_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.IPPORT.nettype)
  return nettype_;
}
inline void IndAssistVideoStart_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAssistVideoStart_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoStart_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoStart_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoStart_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAssistVideoStart_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.IPPORT.ip)
  return *ip_;
}
inline void IndAssistVideoStart_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.IPPORT.ip)
}
inline void IndAssistVideoStart_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoStart.IPPORT.ip)
}
inline void IndAssistVideoStart_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoStart.IPPORT.ip)
}
inline ::std::string* IndAssistVideoStart_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAssistVideoStart_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoStart_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoStart.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAssistVideoStart_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoStart_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoStart_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoStart_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAssistVideoStart_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.IPPORT.port)
  return port_;
}
inline void IndAssistVideoStart_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAssistVideoStart_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAssistVideoStart_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoStart_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoStart_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoStart_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAssistVideoStart_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAssistVideoStart_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAssistVideoStart.IPPORT ipportinfos = 2;
inline int IndAssistVideoStart_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAssistVideoStart_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAssistVideoStart_IPPORT& IndAssistVideoStart_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAssistVideoStart_IPPORT* IndAssistVideoStart_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoStart_IPPORT* IndAssistVideoStart_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoStart.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_IPPORT >&
IndAssistVideoStart_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoStart.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_IPPORT >*
IndAssistVideoStart_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoStart.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAssistVideoStart_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoStart_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoStart_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoStart_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAssistVideoStart_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.AddrInfo.level)
  return level_;
}
inline void IndAssistVideoStart_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAssistVideoStart_DomainInfo

// optional string dname = 1;
inline bool IndAssistVideoStart_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoStart_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoStart_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoStart_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAssistVideoStart_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
  return *dname_;
}
inline void IndAssistVideoStart_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
}
inline void IndAssistVideoStart_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
}
inline void IndAssistVideoStart_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
}
inline ::std::string* IndAssistVideoStart_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAssistVideoStart_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoStart_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoStart.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAssistVideoStart_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoStart_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoStart_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoStart_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAssistVideoStart_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAssistVideoStart_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAssistVideoStart

// optional uint64 confid = 1;
inline bool IndAssistVideoStart::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoStart::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoStart::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoStart::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAssistVideoStart::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.confid)
  return confid_;
}
inline void IndAssistVideoStart::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.confid)
}

// optional uint32 terid = 2;
inline bool IndAssistVideoStart::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoStart::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoStart::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoStart::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAssistVideoStart::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.terid)
  return terid_;
}
inline void IndAssistVideoStart::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.terid)
}

// optional string domainname = 3;
inline bool IndAssistVideoStart::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoStart::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoStart::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoStart::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAssistVideoStart::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.domainname)
  return *domainname_;
}
inline void IndAssistVideoStart::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.domainname)
}
inline void IndAssistVideoStart::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoStart.domainname)
}
inline void IndAssistVideoStart::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoStart.domainname)
}
inline ::std::string* IndAssistVideoStart::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.domainname)
  return domainname_;
}
inline ::std::string* IndAssistVideoStart::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoStart::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoStart.domainname)
}

// repeated .SRMsgs.IndAssistVideoStart.AddrInfo svraddrs = 4;
inline int IndAssistVideoStart::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAssistVideoStart::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAssistVideoStart_AddrInfo& IndAssistVideoStart::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAssistVideoStart_AddrInfo* IndAssistVideoStart::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoStart_AddrInfo* IndAssistVideoStart::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoStart.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_AddrInfo >&
IndAssistVideoStart::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoStart.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_AddrInfo >*
IndAssistVideoStart::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoStart.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAssistVideoStart.DomainInfo domains = 5;
inline int IndAssistVideoStart::domains_size() const {
  return domains_.size();
}
inline void IndAssistVideoStart::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAssistVideoStart_DomainInfo& IndAssistVideoStart::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAssistVideoStart_DomainInfo* IndAssistVideoStart::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoStart.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoStart_DomainInfo* IndAssistVideoStart::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoStart.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_DomainInfo >&
IndAssistVideoStart::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoStart.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoStart_DomainInfo >*
IndAssistVideoStart::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoStart.domains)
  return &domains_;
}

// optional uint32 avtype = 6;
inline bool IndAssistVideoStart::has_avtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndAssistVideoStart::set_has_avtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndAssistVideoStart::clear_has_avtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndAssistVideoStart::clear_avtype() {
  avtype_ = 0u;
  clear_has_avtype();
}
inline ::google::protobuf::uint32 IndAssistVideoStart::avtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.avtype)
  return avtype_;
}
inline void IndAssistVideoStart::set_avtype(::google::protobuf::uint32 value) {
  set_has_avtype();
  avtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.avtype)
}

// optional uint32 sharedaudio = 7;
inline bool IndAssistVideoStart::has_sharedaudio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndAssistVideoStart::set_has_sharedaudio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndAssistVideoStart::clear_has_sharedaudio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndAssistVideoStart::clear_sharedaudio() {
  sharedaudio_ = 0u;
  clear_has_sharedaudio();
}
inline ::google::protobuf::uint32 IndAssistVideoStart::sharedaudio() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoStart.sharedaudio)
  return sharedaudio_;
}
inline void IndAssistVideoStart::set_sharedaudio(::google::protobuf::uint32 value) {
  set_has_sharedaudio();
  sharedaudio_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoStart.sharedaudio)
}

// -------------------------------------------------------------------

// IndAssistVideoClose_IPPORT

// optional uint32 nettype = 1;
inline bool IndAssistVideoClose_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoClose_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoClose_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoClose_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAssistVideoClose_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.IPPORT.nettype)
  return nettype_;
}
inline void IndAssistVideoClose_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAssistVideoClose_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoClose_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoClose_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoClose_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAssistVideoClose_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.IPPORT.ip)
  return *ip_;
}
inline void IndAssistVideoClose_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.IPPORT.ip)
}
inline void IndAssistVideoClose_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoClose.IPPORT.ip)
}
inline void IndAssistVideoClose_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoClose.IPPORT.ip)
}
inline ::std::string* IndAssistVideoClose_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAssistVideoClose_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoClose_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoClose.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAssistVideoClose_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoClose_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoClose_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoClose_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAssistVideoClose_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.IPPORT.port)
  return port_;
}
inline void IndAssistVideoClose_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAssistVideoClose_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAssistVideoClose_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoClose_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoClose_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoClose_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAssistVideoClose_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAssistVideoClose_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAssistVideoClose.IPPORT ipportinfos = 2;
inline int IndAssistVideoClose_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAssistVideoClose_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAssistVideoClose_IPPORT& IndAssistVideoClose_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAssistVideoClose_IPPORT* IndAssistVideoClose_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoClose_IPPORT* IndAssistVideoClose_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoClose.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_IPPORT >&
IndAssistVideoClose_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoClose.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_IPPORT >*
IndAssistVideoClose_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoClose.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAssistVideoClose_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoClose_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoClose_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoClose_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAssistVideoClose_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.AddrInfo.level)
  return level_;
}
inline void IndAssistVideoClose_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAssistVideoClose_DomainInfo

// optional string dname = 1;
inline bool IndAssistVideoClose_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoClose_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoClose_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoClose_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAssistVideoClose_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
  return *dname_;
}
inline void IndAssistVideoClose_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
}
inline void IndAssistVideoClose_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
}
inline void IndAssistVideoClose_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
}
inline ::std::string* IndAssistVideoClose_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAssistVideoClose_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoClose_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoClose.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAssistVideoClose_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoClose_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoClose_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoClose_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAssistVideoClose_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAssistVideoClose_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAssistVideoClose

// optional uint64 confid = 1;
inline bool IndAssistVideoClose::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoClose::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoClose::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoClose::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAssistVideoClose::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.confid)
  return confid_;
}
inline void IndAssistVideoClose::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.confid)
}

// optional uint32 terid = 2;
inline bool IndAssistVideoClose::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoClose::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoClose::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoClose::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAssistVideoClose::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.terid)
  return terid_;
}
inline void IndAssistVideoClose::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.terid)
}

// optional string domainname = 3;
inline bool IndAssistVideoClose::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoClose::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoClose::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoClose::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAssistVideoClose::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.domainname)
  return *domainname_;
}
inline void IndAssistVideoClose::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoClose.domainname)
}
inline void IndAssistVideoClose::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoClose.domainname)
}
inline void IndAssistVideoClose::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoClose.domainname)
}
inline ::std::string* IndAssistVideoClose::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.domainname)
  return domainname_;
}
inline ::std::string* IndAssistVideoClose::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoClose::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoClose.domainname)
}

// repeated .SRMsgs.IndAssistVideoClose.AddrInfo svraddrs = 4;
inline int IndAssistVideoClose::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAssistVideoClose::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAssistVideoClose_AddrInfo& IndAssistVideoClose::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAssistVideoClose_AddrInfo* IndAssistVideoClose::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoClose_AddrInfo* IndAssistVideoClose::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoClose.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_AddrInfo >&
IndAssistVideoClose::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoClose.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_AddrInfo >*
IndAssistVideoClose::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoClose.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAssistVideoClose.DomainInfo domains = 5;
inline int IndAssistVideoClose::domains_size() const {
  return domains_.size();
}
inline void IndAssistVideoClose::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAssistVideoClose_DomainInfo& IndAssistVideoClose::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoClose.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAssistVideoClose_DomainInfo* IndAssistVideoClose::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoClose.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoClose_DomainInfo* IndAssistVideoClose::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoClose.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_DomainInfo >&
IndAssistVideoClose::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoClose.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoClose_DomainInfo >*
IndAssistVideoClose::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoClose.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndSendAssistVideoRelease_IPPORT

// optional uint32 nettype = 1;
inline bool IndSendAssistVideoRelease_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideoRelease_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.IPPORT.nettype)
  return nettype_;
}
inline void IndSendAssistVideoRelease_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndSendAssistVideoRelease_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideoRelease_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndSendAssistVideoRelease_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
  return *ip_;
}
inline void IndSendAssistVideoRelease_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
}
inline void IndSendAssistVideoRelease_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
}
inline void IndSendAssistVideoRelease_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
}
inline ::std::string* IndSendAssistVideoRelease_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndSendAssistVideoRelease_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideoRelease_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideoRelease.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndSendAssistVideoRelease_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideoRelease_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideoRelease_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.IPPORT.port)
  return port_;
}
inline void IndSendAssistVideoRelease_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.IPPORT.port)
}

// -------------------------------------------------------------------

// IndSendAssistVideoRelease_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndSendAssistVideoRelease_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideoRelease_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideoRelease_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideoRelease_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndSendAssistVideoRelease_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndSendAssistVideoRelease.IPPORT ipportinfos = 2;
inline int IndSendAssistVideoRelease_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndSendAssistVideoRelease_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideoRelease_IPPORT& IndSendAssistVideoRelease_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_IPPORT* IndSendAssistVideoRelease_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_IPPORT* IndSendAssistVideoRelease_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideoRelease.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_IPPORT >&
IndSendAssistVideoRelease_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideoRelease.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_IPPORT >*
IndSendAssistVideoRelease_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideoRelease.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndSendAssistVideoRelease_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideoRelease_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideoRelease_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideoRelease_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.AddrInfo.level)
  return level_;
}
inline void IndSendAssistVideoRelease_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndSendAssistVideoRelease_DomainInfo

// optional string dname = 1;
inline bool IndSendAssistVideoRelease_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideoRelease_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideoRelease_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideoRelease_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndSendAssistVideoRelease_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
  return *dname_;
}
inline void IndSendAssistVideoRelease_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
}
inline void IndSendAssistVideoRelease_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
}
inline void IndSendAssistVideoRelease_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
}
inline ::std::string* IndSendAssistVideoRelease_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndSendAssistVideoRelease_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideoRelease_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndSendAssistVideoRelease_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideoRelease_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideoRelease_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideoRelease_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndSendAssistVideoRelease_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndSendAssistVideoRelease

// optional uint64 confid = 1;
inline bool IndSendAssistVideoRelease::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideoRelease::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideoRelease::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideoRelease::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndSendAssistVideoRelease::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.confid)
  return confid_;
}
inline void IndSendAssistVideoRelease::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.confid)
}

// optional uint32 terid = 2;
inline bool IndSendAssistVideoRelease::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideoRelease::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideoRelease::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideoRelease::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndSendAssistVideoRelease::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.terid)
  return terid_;
}
inline void IndSendAssistVideoRelease::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.terid)
}

// optional string domainname = 3;
inline bool IndSendAssistVideoRelease::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideoRelease::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideoRelease::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideoRelease::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndSendAssistVideoRelease::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.domainname)
  return *domainname_;
}
inline void IndSendAssistVideoRelease::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideoRelease.domainname)
}
inline void IndSendAssistVideoRelease::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideoRelease.domainname)
}
inline void IndSendAssistVideoRelease::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideoRelease.domainname)
}
inline ::std::string* IndSendAssistVideoRelease::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.domainname)
  return domainname_;
}
inline ::std::string* IndSendAssistVideoRelease::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideoRelease::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideoRelease.domainname)
}

// repeated .SRMsgs.IndSendAssistVideoRelease.AddrInfo svraddrs = 4;
inline int IndSendAssistVideoRelease::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndSendAssistVideoRelease::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideoRelease_AddrInfo& IndSendAssistVideoRelease::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_AddrInfo* IndSendAssistVideoRelease::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_AddrInfo* IndSendAssistVideoRelease::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideoRelease.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_AddrInfo >&
IndSendAssistVideoRelease::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideoRelease.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_AddrInfo >*
IndSendAssistVideoRelease::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideoRelease.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndSendAssistVideoRelease.DomainInfo domains = 5;
inline int IndSendAssistVideoRelease::domains_size() const {
  return domains_.size();
}
inline void IndSendAssistVideoRelease::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideoRelease_DomainInfo& IndSendAssistVideoRelease::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideoRelease.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_DomainInfo* IndSendAssistVideoRelease::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideoRelease.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideoRelease_DomainInfo* IndSendAssistVideoRelease::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideoRelease.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_DomainInfo >&
IndSendAssistVideoRelease::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideoRelease.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideoRelease_DomainInfo >*
IndSendAssistVideoRelease::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideoRelease.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndNewAudioSourceJoined_IPPORT

// optional uint32 nettype = 1;
inline bool IndNewAudioSourceJoined_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewAudioSourceJoined_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.IPPORT.nettype)
  return nettype_;
}
inline void IndNewAudioSourceJoined_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndNewAudioSourceJoined_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewAudioSourceJoined_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndNewAudioSourceJoined_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
  return *ip_;
}
inline void IndNewAudioSourceJoined_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
}
inline void IndNewAudioSourceJoined_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
}
inline void IndNewAudioSourceJoined_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
}
inline ::std::string* IndNewAudioSourceJoined_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndNewAudioSourceJoined_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewAudioSourceJoined_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewAudioSourceJoined.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndNewAudioSourceJoined_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewAudioSourceJoined_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewAudioSourceJoined_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.IPPORT.port)
  return port_;
}
inline void IndNewAudioSourceJoined_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.IPPORT.port)
}

// -------------------------------------------------------------------

// IndNewAudioSourceJoined_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndNewAudioSourceJoined_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewAudioSourceJoined_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewAudioSourceJoined_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewAudioSourceJoined_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndNewAudioSourceJoined_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndNewAudioSourceJoined.IPPORT ipportinfos = 2;
inline int IndNewAudioSourceJoined_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndNewAudioSourceJoined_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndNewAudioSourceJoined_IPPORT& IndNewAudioSourceJoined_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_IPPORT* IndNewAudioSourceJoined_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_IPPORT* IndNewAudioSourceJoined_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_IPPORT >&
IndNewAudioSourceJoined_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_IPPORT >*
IndNewAudioSourceJoined_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewAudioSourceJoined.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndNewAudioSourceJoined_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewAudioSourceJoined_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewAudioSourceJoined_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewAudioSourceJoined_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.AddrInfo.level)
  return level_;
}
inline void IndNewAudioSourceJoined_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndNewAudioSourceJoined_DomainInfo

// optional string dname = 1;
inline bool IndNewAudioSourceJoined_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewAudioSourceJoined_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewAudioSourceJoined_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewAudioSourceJoined_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndNewAudioSourceJoined_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
  return *dname_;
}
inline void IndNewAudioSourceJoined_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
}
inline void IndNewAudioSourceJoined_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
}
inline void IndNewAudioSourceJoined_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
}
inline ::std::string* IndNewAudioSourceJoined_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndNewAudioSourceJoined_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewAudioSourceJoined_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndNewAudioSourceJoined_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewAudioSourceJoined_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewAudioSourceJoined_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewAudioSourceJoined_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndNewAudioSourceJoined_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndNewAudioSourceJoined_SourceInfo

// optional uint32 srcid = 1;
inline bool IndNewAudioSourceJoined_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.SourceInfo.srcid)
  return srcid_;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndNewAudioSourceJoined_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndNewAudioSourceJoined_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
  return *name_;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
}
inline void IndNewAudioSourceJoined_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
}
inline void IndNewAudioSourceJoined_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
}
inline ::std::string* IndNewAudioSourceJoined_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
  return name_;
}
inline ::std::string* IndNewAudioSourceJoined_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewAudioSourceJoined_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewAudioSourceJoined.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndNewAudioSourceJoined_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndNewAudioSourceJoined_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.SourceInfo.isOn)
  return ison_;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndNewAudioSourceJoined_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNewAudioSourceJoined_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.SourceInfo.priority)
  return priority_;
}
inline void IndNewAudioSourceJoined_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndNewAudioSourceJoined

// optional uint64 confid = 1;
inline bool IndNewAudioSourceJoined::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewAudioSourceJoined::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewAudioSourceJoined::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewAudioSourceJoined::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndNewAudioSourceJoined::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.confid)
  return confid_;
}
inline void IndNewAudioSourceJoined::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.confid)
}

// optional uint32 terid = 2;
inline bool IndNewAudioSourceJoined::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewAudioSourceJoined::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewAudioSourceJoined::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewAudioSourceJoined::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndNewAudioSourceJoined::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.terid)
  return terid_;
}
inline void IndNewAudioSourceJoined::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.terid)
}

// repeated .SRMsgs.IndNewAudioSourceJoined.SourceInfo srcinfos = 3;
inline int IndNewAudioSourceJoined::srcinfos_size() const {
  return srcinfos_.size();
}
inline void IndNewAudioSourceJoined::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::IndNewAudioSourceJoined_SourceInfo& IndNewAudioSourceJoined::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_SourceInfo* IndNewAudioSourceJoined::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_SourceInfo* IndNewAudioSourceJoined::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewAudioSourceJoined.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_SourceInfo >&
IndNewAudioSourceJoined::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewAudioSourceJoined.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_SourceInfo >*
IndNewAudioSourceJoined::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewAudioSourceJoined.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 4;
inline bool IndNewAudioSourceJoined::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNewAudioSourceJoined::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNewAudioSourceJoined::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNewAudioSourceJoined::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndNewAudioSourceJoined::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.domainname)
  return *domainname_;
}
inline void IndNewAudioSourceJoined::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewAudioSourceJoined.domainname)
}
inline void IndNewAudioSourceJoined::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewAudioSourceJoined.domainname)
}
inline void IndNewAudioSourceJoined::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewAudioSourceJoined.domainname)
}
inline ::std::string* IndNewAudioSourceJoined::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.domainname)
  return domainname_;
}
inline ::std::string* IndNewAudioSourceJoined::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewAudioSourceJoined::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewAudioSourceJoined.domainname)
}

// repeated .SRMsgs.IndNewAudioSourceJoined.AddrInfo svraddrs = 5;
inline int IndNewAudioSourceJoined::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndNewAudioSourceJoined::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndNewAudioSourceJoined_AddrInfo& IndNewAudioSourceJoined::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_AddrInfo* IndNewAudioSourceJoined::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_AddrInfo* IndNewAudioSourceJoined::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewAudioSourceJoined.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_AddrInfo >&
IndNewAudioSourceJoined::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewAudioSourceJoined.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_AddrInfo >*
IndNewAudioSourceJoined::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewAudioSourceJoined.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndNewAudioSourceJoined.DomainInfo domains = 6;
inline int IndNewAudioSourceJoined::domains_size() const {
  return domains_.size();
}
inline void IndNewAudioSourceJoined::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndNewAudioSourceJoined_DomainInfo& IndNewAudioSourceJoined::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewAudioSourceJoined.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_DomainInfo* IndNewAudioSourceJoined::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewAudioSourceJoined.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndNewAudioSourceJoined_DomainInfo* IndNewAudioSourceJoined::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewAudioSourceJoined.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_DomainInfo >&
IndNewAudioSourceJoined::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewAudioSourceJoined.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewAudioSourceJoined_DomainInfo >*
IndNewAudioSourceJoined::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewAudioSourceJoined.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndAudioSourceLeave_IPPORT

// optional uint32 nettype = 1;
inline bool IndAudioSourceLeave_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAudioSourceLeave_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAudioSourceLeave_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAudioSourceLeave_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.IPPORT.nettype)
  return nettype_;
}
inline void IndAudioSourceLeave_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAudioSourceLeave_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAudioSourceLeave_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAudioSourceLeave_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAudioSourceLeave_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAudioSourceLeave_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
  return *ip_;
}
inline void IndAudioSourceLeave_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
}
inline void IndAudioSourceLeave_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
}
inline void IndAudioSourceLeave_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
}
inline ::std::string* IndAudioSourceLeave_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAudioSourceLeave_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAudioSourceLeave_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAudioSourceLeave.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAudioSourceLeave_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAudioSourceLeave_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAudioSourceLeave_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAudioSourceLeave_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.IPPORT.port)
  return port_;
}
inline void IndAudioSourceLeave_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAudioSourceLeave_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAudioSourceLeave_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAudioSourceLeave_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAudioSourceLeave_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAudioSourceLeave_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAudioSourceLeave_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAudioSourceLeave.IPPORT ipportinfos = 2;
inline int IndAudioSourceLeave_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAudioSourceLeave_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAudioSourceLeave_IPPORT& IndAudioSourceLeave_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAudioSourceLeave_IPPORT* IndAudioSourceLeave_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAudioSourceLeave_IPPORT* IndAudioSourceLeave_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_IPPORT >&
IndAudioSourceLeave_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_IPPORT >*
IndAudioSourceLeave_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAudioSourceLeave.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAudioSourceLeave_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAudioSourceLeave_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAudioSourceLeave_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAudioSourceLeave_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.AddrInfo.level)
  return level_;
}
inline void IndAudioSourceLeave_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAudioSourceLeave_DomainInfo

// optional string dname = 1;
inline bool IndAudioSourceLeave_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAudioSourceLeave_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAudioSourceLeave_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAudioSourceLeave_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAudioSourceLeave_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
  return *dname_;
}
inline void IndAudioSourceLeave_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
}
inline void IndAudioSourceLeave_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
}
inline void IndAudioSourceLeave_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
}
inline ::std::string* IndAudioSourceLeave_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAudioSourceLeave_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAudioSourceLeave_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAudioSourceLeave.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAudioSourceLeave_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAudioSourceLeave_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAudioSourceLeave_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAudioSourceLeave_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAudioSourceLeave_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAudioSourceLeave_SourceInfo

// optional uint32 srcid = 1;
inline bool IndAudioSourceLeave_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAudioSourceLeave_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAudioSourceLeave_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAudioSourceLeave_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.SourceInfo.srcid)
  return srcid_;
}
inline void IndAudioSourceLeave_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.SourceInfo.srcid)
}

// -------------------------------------------------------------------

// IndAudioSourceLeave

// optional uint64 confid = 1;
inline bool IndAudioSourceLeave::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAudioSourceLeave::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAudioSourceLeave::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAudioSourceLeave::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAudioSourceLeave::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.confid)
  return confid_;
}
inline void IndAudioSourceLeave::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.confid)
}

// optional uint32 terid = 2;
inline bool IndAudioSourceLeave::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAudioSourceLeave::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAudioSourceLeave::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAudioSourceLeave::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAudioSourceLeave::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.terid)
  return terid_;
}
inline void IndAudioSourceLeave::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.terid)
}

// repeated .SRMsgs.IndAudioSourceLeave.SourceInfo srcinfos = 3;
inline int IndAudioSourceLeave::srcinfos_size() const {
  return srcinfos_.size();
}
inline void IndAudioSourceLeave::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::IndAudioSourceLeave_SourceInfo& IndAudioSourceLeave::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::IndAudioSourceLeave_SourceInfo* IndAudioSourceLeave::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::IndAudioSourceLeave_SourceInfo* IndAudioSourceLeave::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAudioSourceLeave.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_SourceInfo >&
IndAudioSourceLeave::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAudioSourceLeave.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_SourceInfo >*
IndAudioSourceLeave::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAudioSourceLeave.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 4;
inline bool IndAudioSourceLeave::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndAudioSourceLeave::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndAudioSourceLeave::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndAudioSourceLeave::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAudioSourceLeave::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.domainname)
  return *domainname_;
}
inline void IndAudioSourceLeave::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAudioSourceLeave.domainname)
}
inline void IndAudioSourceLeave::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAudioSourceLeave.domainname)
}
inline void IndAudioSourceLeave::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAudioSourceLeave.domainname)
}
inline ::std::string* IndAudioSourceLeave::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.domainname)
  return domainname_;
}
inline ::std::string* IndAudioSourceLeave::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAudioSourceLeave::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAudioSourceLeave.domainname)
}

// repeated .SRMsgs.IndAudioSourceLeave.AddrInfo svraddrs = 5;
inline int IndAudioSourceLeave::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAudioSourceLeave::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAudioSourceLeave_AddrInfo& IndAudioSourceLeave::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAudioSourceLeave_AddrInfo* IndAudioSourceLeave::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAudioSourceLeave_AddrInfo* IndAudioSourceLeave::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAudioSourceLeave.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_AddrInfo >&
IndAudioSourceLeave::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAudioSourceLeave.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_AddrInfo >*
IndAudioSourceLeave::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAudioSourceLeave.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAudioSourceLeave.DomainInfo domains = 6;
inline int IndAudioSourceLeave::domains_size() const {
  return domains_.size();
}
inline void IndAudioSourceLeave::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAudioSourceLeave_DomainInfo& IndAudioSourceLeave::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAudioSourceLeave.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAudioSourceLeave_DomainInfo* IndAudioSourceLeave::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAudioSourceLeave.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAudioSourceLeave_DomainInfo* IndAudioSourceLeave::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAudioSourceLeave.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_DomainInfo >&
IndAudioSourceLeave::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAudioSourceLeave.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAudioSourceLeave_DomainInfo >*
IndAudioSourceLeave::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAudioSourceLeave.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndNewVideoSourceJoined_IPPORT

// optional uint32 nettype = 1;
inline bool IndNewVideoSourceJoined_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewVideoSourceJoined_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.IPPORT.nettype)
  return nettype_;
}
inline void IndNewVideoSourceJoined_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndNewVideoSourceJoined_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewVideoSourceJoined_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndNewVideoSourceJoined_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
  return *ip_;
}
inline void IndNewVideoSourceJoined_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
}
inline void IndNewVideoSourceJoined_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
}
inline void IndNewVideoSourceJoined_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
}
inline ::std::string* IndNewVideoSourceJoined_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndNewVideoSourceJoined_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewVideoSourceJoined_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewVideoSourceJoined.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndNewVideoSourceJoined_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewVideoSourceJoined_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewVideoSourceJoined_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.IPPORT.port)
  return port_;
}
inline void IndNewVideoSourceJoined_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.IPPORT.port)
}

// -------------------------------------------------------------------

// IndNewVideoSourceJoined_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndNewVideoSourceJoined_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewVideoSourceJoined_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewVideoSourceJoined_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewVideoSourceJoined_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndNewVideoSourceJoined_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndNewVideoSourceJoined.IPPORT ipportinfos = 2;
inline int IndNewVideoSourceJoined_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndNewVideoSourceJoined_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndNewVideoSourceJoined_IPPORT& IndNewVideoSourceJoined_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_IPPORT* IndNewVideoSourceJoined_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_IPPORT* IndNewVideoSourceJoined_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_IPPORT >&
IndNewVideoSourceJoined_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_IPPORT >*
IndNewVideoSourceJoined_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewVideoSourceJoined.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndNewVideoSourceJoined_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewVideoSourceJoined_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewVideoSourceJoined_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewVideoSourceJoined_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.AddrInfo.level)
  return level_;
}
inline void IndNewVideoSourceJoined_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndNewVideoSourceJoined_DomainInfo

// optional string dname = 1;
inline bool IndNewVideoSourceJoined_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewVideoSourceJoined_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewVideoSourceJoined_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewVideoSourceJoined_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndNewVideoSourceJoined_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
  return *dname_;
}
inline void IndNewVideoSourceJoined_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
}
inline void IndNewVideoSourceJoined_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
}
inline void IndNewVideoSourceJoined_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
}
inline ::std::string* IndNewVideoSourceJoined_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndNewVideoSourceJoined_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewVideoSourceJoined_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndNewVideoSourceJoined_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewVideoSourceJoined_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewVideoSourceJoined_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewVideoSourceJoined_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndNewVideoSourceJoined_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndNewVideoSourceJoined_SourceInfo

// optional uint32 srcid = 1;
inline bool IndNewVideoSourceJoined_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.SourceInfo.srcid)
  return srcid_;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndNewVideoSourceJoined_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndNewVideoSourceJoined_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
  return *name_;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
}
inline void IndNewVideoSourceJoined_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
}
inline void IndNewVideoSourceJoined_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
}
inline ::std::string* IndNewVideoSourceJoined_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
  return name_;
}
inline ::std::string* IndNewVideoSourceJoined_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewVideoSourceJoined_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewVideoSourceJoined.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndNewVideoSourceJoined_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndNewVideoSourceJoined_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.SourceInfo.isOn)
  return ison_;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndNewVideoSourceJoined_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNewVideoSourceJoined_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.SourceInfo.priority)
  return priority_;
}
inline void IndNewVideoSourceJoined_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndNewVideoSourceJoined

// optional uint64 confid = 1;
inline bool IndNewVideoSourceJoined::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewVideoSourceJoined::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewVideoSourceJoined::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewVideoSourceJoined::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndNewVideoSourceJoined::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.confid)
  return confid_;
}
inline void IndNewVideoSourceJoined::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.confid)
}

// optional uint32 terid = 2;
inline bool IndNewVideoSourceJoined::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewVideoSourceJoined::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewVideoSourceJoined::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewVideoSourceJoined::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndNewVideoSourceJoined::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.terid)
  return terid_;
}
inline void IndNewVideoSourceJoined::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.terid)
}

// repeated .SRMsgs.IndNewVideoSourceJoined.SourceInfo newsrcinfos = 3;
inline int IndNewVideoSourceJoined::newsrcinfos_size() const {
  return newsrcinfos_.size();
}
inline void IndNewVideoSourceJoined::clear_newsrcinfos() {
  newsrcinfos_.Clear();
}
inline const ::SRMsgs::IndNewVideoSourceJoined_SourceInfo& IndNewVideoSourceJoined::newsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Get(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* IndNewVideoSourceJoined::mutable_newsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* IndNewVideoSourceJoined::add_newsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >&
IndNewVideoSourceJoined::newsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >*
IndNewVideoSourceJoined::mutable_newsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewVideoSourceJoined.newsrcinfos)
  return &newsrcinfos_;
}

// repeated .SRMsgs.IndNewVideoSourceJoined.SourceInfo allsrcinfos = 4;
inline int IndNewVideoSourceJoined::allsrcinfos_size() const {
  return allsrcinfos_.size();
}
inline void IndNewVideoSourceJoined::clear_allsrcinfos() {
  allsrcinfos_.Clear();
}
inline const ::SRMsgs::IndNewVideoSourceJoined_SourceInfo& IndNewVideoSourceJoined::allsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Get(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* IndNewVideoSourceJoined::mutable_allsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_SourceInfo* IndNewVideoSourceJoined::add_allsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >&
IndNewVideoSourceJoined::allsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_SourceInfo >*
IndNewVideoSourceJoined::mutable_allsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewVideoSourceJoined.allsrcinfos)
  return &allsrcinfos_;
}

// optional string domainname = 5;
inline bool IndNewVideoSourceJoined::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndNewVideoSourceJoined::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndNewVideoSourceJoined::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndNewVideoSourceJoined::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndNewVideoSourceJoined::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.domainname)
  return *domainname_;
}
inline void IndNewVideoSourceJoined::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewVideoSourceJoined.domainname)
}
inline void IndNewVideoSourceJoined::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewVideoSourceJoined.domainname)
}
inline void IndNewVideoSourceJoined::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewVideoSourceJoined.domainname)
}
inline ::std::string* IndNewVideoSourceJoined::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.domainname)
  return domainname_;
}
inline ::std::string* IndNewVideoSourceJoined::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewVideoSourceJoined::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewVideoSourceJoined.domainname)
}

// repeated .SRMsgs.IndNewVideoSourceJoined.AddrInfo svraddrs = 6;
inline int IndNewVideoSourceJoined::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndNewVideoSourceJoined::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndNewVideoSourceJoined_AddrInfo& IndNewVideoSourceJoined::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_AddrInfo* IndNewVideoSourceJoined::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_AddrInfo* IndNewVideoSourceJoined::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewVideoSourceJoined.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_AddrInfo >&
IndNewVideoSourceJoined::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewVideoSourceJoined.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_AddrInfo >*
IndNewVideoSourceJoined::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewVideoSourceJoined.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndNewVideoSourceJoined.DomainInfo domains = 7;
inline int IndNewVideoSourceJoined::domains_size() const {
  return domains_.size();
}
inline void IndNewVideoSourceJoined::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndNewVideoSourceJoined_DomainInfo& IndNewVideoSourceJoined::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewVideoSourceJoined.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_DomainInfo* IndNewVideoSourceJoined::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewVideoSourceJoined.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndNewVideoSourceJoined_DomainInfo* IndNewVideoSourceJoined::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndNewVideoSourceJoined.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_DomainInfo >&
IndNewVideoSourceJoined::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndNewVideoSourceJoined.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndNewVideoSourceJoined_DomainInfo >*
IndNewVideoSourceJoined::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndNewVideoSourceJoined.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndVideoSourceLeave_IPPORT

// optional uint32 nettype = 1;
inline bool IndVideoSourceLeave_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVideoSourceLeave_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVideoSourceLeave_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVideoSourceLeave_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.IPPORT.nettype)
  return nettype_;
}
inline void IndVideoSourceLeave_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndVideoSourceLeave_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVideoSourceLeave_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVideoSourceLeave_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVideoSourceLeave_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndVideoSourceLeave_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
  return *ip_;
}
inline void IndVideoSourceLeave_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
}
inline void IndVideoSourceLeave_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
}
inline void IndVideoSourceLeave_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
}
inline ::std::string* IndVideoSourceLeave_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndVideoSourceLeave_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVideoSourceLeave_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVideoSourceLeave.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndVideoSourceLeave_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVideoSourceLeave_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVideoSourceLeave_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVideoSourceLeave_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.IPPORT.port)
  return port_;
}
inline void IndVideoSourceLeave_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.IPPORT.port)
}

// -------------------------------------------------------------------

// IndVideoSourceLeave_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndVideoSourceLeave_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVideoSourceLeave_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVideoSourceLeave_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVideoSourceLeave_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndVideoSourceLeave_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndVideoSourceLeave.IPPORT ipportinfos = 2;
inline int IndVideoSourceLeave_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndVideoSourceLeave_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndVideoSourceLeave_IPPORT& IndVideoSourceLeave_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndVideoSourceLeave_IPPORT* IndVideoSourceLeave_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndVideoSourceLeave_IPPORT* IndVideoSourceLeave_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_IPPORT >&
IndVideoSourceLeave_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_IPPORT >*
IndVideoSourceLeave_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVideoSourceLeave.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndVideoSourceLeave_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVideoSourceLeave_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVideoSourceLeave_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVideoSourceLeave_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.AddrInfo.level)
  return level_;
}
inline void IndVideoSourceLeave_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndVideoSourceLeave_DomainInfo

// optional string dname = 1;
inline bool IndVideoSourceLeave_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVideoSourceLeave_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVideoSourceLeave_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVideoSourceLeave_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndVideoSourceLeave_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
  return *dname_;
}
inline void IndVideoSourceLeave_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
}
inline void IndVideoSourceLeave_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
}
inline void IndVideoSourceLeave_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
}
inline ::std::string* IndVideoSourceLeave_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndVideoSourceLeave_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVideoSourceLeave_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVideoSourceLeave.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndVideoSourceLeave_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVideoSourceLeave_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVideoSourceLeave_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVideoSourceLeave_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndVideoSourceLeave_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndVideoSourceLeave_SourceInfo

// optional uint32 srcid = 1;
inline bool IndVideoSourceLeave_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVideoSourceLeave_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.SourceInfo.srcid)
  return srcid_;
}
inline void IndVideoSourceLeave_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndVideoSourceLeave_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVideoSourceLeave_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndVideoSourceLeave_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
  return *name_;
}
inline void IndVideoSourceLeave_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
}
inline void IndVideoSourceLeave_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
}
inline void IndVideoSourceLeave_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
}
inline ::std::string* IndVideoSourceLeave_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
  return name_;
}
inline ::std::string* IndVideoSourceLeave_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVideoSourceLeave_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVideoSourceLeave.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndVideoSourceLeave_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVideoSourceLeave_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndVideoSourceLeave_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.SourceInfo.isOn)
  return ison_;
}
inline void IndVideoSourceLeave_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndVideoSourceLeave_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndVideoSourceLeave_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndVideoSourceLeave_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.SourceInfo.priority)
  return priority_;
}
inline void IndVideoSourceLeave_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndVideoSourceLeave

// optional uint64 confid = 1;
inline bool IndVideoSourceLeave::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVideoSourceLeave::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVideoSourceLeave::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVideoSourceLeave::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndVideoSourceLeave::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.confid)
  return confid_;
}
inline void IndVideoSourceLeave::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.confid)
}

// optional uint32 terid = 2;
inline bool IndVideoSourceLeave::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVideoSourceLeave::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVideoSourceLeave::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVideoSourceLeave::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndVideoSourceLeave::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.terid)
  return terid_;
}
inline void IndVideoSourceLeave::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.terid)
}

// repeated .SRMsgs.IndVideoSourceLeave.SourceInfo delsrcinfos = 3;
inline int IndVideoSourceLeave::delsrcinfos_size() const {
  return delsrcinfos_.size();
}
inline void IndVideoSourceLeave::clear_delsrcinfos() {
  delsrcinfos_.Clear();
}
inline const ::SRMsgs::IndVideoSourceLeave_SourceInfo& IndVideoSourceLeave::delsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Get(index);
}
inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* IndVideoSourceLeave::mutable_delsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* IndVideoSourceLeave::add_delsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >&
IndVideoSourceLeave::delsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVideoSourceLeave.delsrcinfos)
  return delsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >*
IndVideoSourceLeave::mutable_delsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVideoSourceLeave.delsrcinfos)
  return &delsrcinfos_;
}

// repeated .SRMsgs.IndVideoSourceLeave.SourceInfo cursrcinfos = 4;
inline int IndVideoSourceLeave::cursrcinfos_size() const {
  return cursrcinfos_.size();
}
inline void IndVideoSourceLeave::clear_cursrcinfos() {
  cursrcinfos_.Clear();
}
inline const ::SRMsgs::IndVideoSourceLeave_SourceInfo& IndVideoSourceLeave::cursrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Get(index);
}
inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* IndVideoSourceLeave::mutable_cursrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndVideoSourceLeave_SourceInfo* IndVideoSourceLeave::add_cursrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >&
IndVideoSourceLeave::cursrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVideoSourceLeave.cursrcinfos)
  return cursrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_SourceInfo >*
IndVideoSourceLeave::mutable_cursrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVideoSourceLeave.cursrcinfos)
  return &cursrcinfos_;
}

// optional string domainname = 5;
inline bool IndVideoSourceLeave::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndVideoSourceLeave::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndVideoSourceLeave::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndVideoSourceLeave::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndVideoSourceLeave::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.domainname)
  return *domainname_;
}
inline void IndVideoSourceLeave::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVideoSourceLeave.domainname)
}
inline void IndVideoSourceLeave::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVideoSourceLeave.domainname)
}
inline void IndVideoSourceLeave::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVideoSourceLeave.domainname)
}
inline ::std::string* IndVideoSourceLeave::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.domainname)
  return domainname_;
}
inline ::std::string* IndVideoSourceLeave::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVideoSourceLeave::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVideoSourceLeave.domainname)
}

// repeated .SRMsgs.IndVideoSourceLeave.AddrInfo svraddrs = 6;
inline int IndVideoSourceLeave::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndVideoSourceLeave::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndVideoSourceLeave_AddrInfo& IndVideoSourceLeave::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndVideoSourceLeave_AddrInfo* IndVideoSourceLeave::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndVideoSourceLeave_AddrInfo* IndVideoSourceLeave::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVideoSourceLeave.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_AddrInfo >&
IndVideoSourceLeave::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVideoSourceLeave.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_AddrInfo >*
IndVideoSourceLeave::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVideoSourceLeave.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndVideoSourceLeave.DomainInfo domains = 7;
inline int IndVideoSourceLeave::domains_size() const {
  return domains_.size();
}
inline void IndVideoSourceLeave::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndVideoSourceLeave_DomainInfo& IndVideoSourceLeave::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVideoSourceLeave.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndVideoSourceLeave_DomainInfo* IndVideoSourceLeave::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVideoSourceLeave.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndVideoSourceLeave_DomainInfo* IndVideoSourceLeave::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVideoSourceLeave.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_DomainInfo >&
IndVideoSourceLeave::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVideoSourceLeave.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVideoSourceLeave_DomainInfo >*
IndVideoSourceLeave::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVideoSourceLeave.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdSetCallWaitingState_IPPORT

// optional uint32 nettype = 1;
inline bool CmdSetCallWaitingState_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetCallWaitingState_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.IPPORT.nettype)
  return nettype_;
}
inline void CmdSetCallWaitingState_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdSetCallWaitingState_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetCallWaitingState_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdSetCallWaitingState_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
  return *ip_;
}
inline void CmdSetCallWaitingState_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
}
inline void CmdSetCallWaitingState_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
}
inline void CmdSetCallWaitingState_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
}
inline ::std::string* CmdSetCallWaitingState_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdSetCallWaitingState_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetCallWaitingState_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetCallWaitingState.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdSetCallWaitingState_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetCallWaitingState_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetCallWaitingState_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.IPPORT.port)
  return port_;
}
inline void CmdSetCallWaitingState_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdSetCallWaitingState_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdSetCallWaitingState_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetCallWaitingState_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetCallWaitingState_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetCallWaitingState_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdSetCallWaitingState_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdSetCallWaitingState.IPPORT ipportinfos = 2;
inline int CmdSetCallWaitingState_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdSetCallWaitingState_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdSetCallWaitingState_IPPORT& CmdSetCallWaitingState_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_IPPORT* CmdSetCallWaitingState_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_IPPORT* CmdSetCallWaitingState_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_IPPORT >&
CmdSetCallWaitingState_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_IPPORT >*
CmdSetCallWaitingState_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetCallWaitingState.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdSetCallWaitingState_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetCallWaitingState_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetCallWaitingState_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetCallWaitingState_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.AddrInfo.level)
  return level_;
}
inline void CmdSetCallWaitingState_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdSetCallWaitingState_DomainInfo

// optional string dname = 1;
inline bool CmdSetCallWaitingState_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetCallWaitingState_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetCallWaitingState_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetCallWaitingState_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdSetCallWaitingState_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
  return *dname_;
}
inline void CmdSetCallWaitingState_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
}
inline void CmdSetCallWaitingState_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
}
inline void CmdSetCallWaitingState_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
}
inline ::std::string* CmdSetCallWaitingState_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdSetCallWaitingState_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetCallWaitingState_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetCallWaitingState.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdSetCallWaitingState_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetCallWaitingState_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetCallWaitingState_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetCallWaitingState_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdSetCallWaitingState_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdSetCallWaitingState

// optional uint32 sponsortype = 1;
inline bool CmdSetCallWaitingState::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetCallWaitingState::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetCallWaitingState::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetCallWaitingState::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.sponsortype)
  return sponsortype_;
}
inline void CmdSetCallWaitingState::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdSetCallWaitingState::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetCallWaitingState::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetCallWaitingState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetCallWaitingState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdSetCallWaitingState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.confid)
  return confid_;
}
inline void CmdSetCallWaitingState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.confid)
}

// optional uint32 terid = 3;
inline bool CmdSetCallWaitingState::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetCallWaitingState::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetCallWaitingState::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetCallWaitingState::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdSetCallWaitingState::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.terid)
  return terid_;
}
inline void CmdSetCallWaitingState::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.terid)
}

// optional string domainname = 4;
inline bool CmdSetCallWaitingState::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdSetCallWaitingState::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdSetCallWaitingState::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdSetCallWaitingState::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdSetCallWaitingState::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.domainname)
  return *domainname_;
}
inline void CmdSetCallWaitingState::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.domainname)
}
inline void CmdSetCallWaitingState::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetCallWaitingState.domainname)
}
inline void CmdSetCallWaitingState::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetCallWaitingState.domainname)
}
inline ::std::string* CmdSetCallWaitingState::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.domainname)
  return domainname_;
}
inline ::std::string* CmdSetCallWaitingState::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetCallWaitingState::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetCallWaitingState.domainname)
}

// repeated .SRMsgs.CmdSetCallWaitingState.AddrInfo svraddrs = 5;
inline int CmdSetCallWaitingState::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdSetCallWaitingState::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdSetCallWaitingState_AddrInfo& CmdSetCallWaitingState::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_AddrInfo* CmdSetCallWaitingState::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_AddrInfo* CmdSetCallWaitingState::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetCallWaitingState.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_AddrInfo >&
CmdSetCallWaitingState::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetCallWaitingState.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_AddrInfo >*
CmdSetCallWaitingState::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetCallWaitingState.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdSetCallWaitingState.DomainInfo domains = 6;
inline int CmdSetCallWaitingState::domains_size() const {
  return domains_.size();
}
inline void CmdSetCallWaitingState::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdSetCallWaitingState_DomainInfo& CmdSetCallWaitingState::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_DomainInfo* CmdSetCallWaitingState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetCallWaitingState.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdSetCallWaitingState_DomainInfo* CmdSetCallWaitingState::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetCallWaitingState.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_DomainInfo >&
CmdSetCallWaitingState::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetCallWaitingState.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetCallWaitingState_DomainInfo >*
CmdSetCallWaitingState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetCallWaitingState.domains)
  return &domains_;
}

// optional bool iscallwaiting = 7;
inline bool CmdSetCallWaitingState::has_iscallwaiting() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdSetCallWaitingState::set_has_iscallwaiting() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdSetCallWaitingState::clear_has_iscallwaiting() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdSetCallWaitingState::clear_iscallwaiting() {
  iscallwaiting_ = false;
  clear_has_iscallwaiting();
}
inline bool CmdSetCallWaitingState::iscallwaiting() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.iscallwaiting)
  return iscallwaiting_;
}
inline void CmdSetCallWaitingState::set_iscallwaiting(bool value) {
  set_has_iscallwaiting();
  iscallwaiting_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.iscallwaiting)
}

// optional bool allallow = 8;
inline bool CmdSetCallWaitingState::has_allallow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdSetCallWaitingState::set_has_allallow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdSetCallWaitingState::clear_has_allallow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdSetCallWaitingState::clear_allallow() {
  allallow_ = false;
  clear_has_allallow();
}
inline bool CmdSetCallWaitingState::allallow() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetCallWaitingState.allallow)
  return allallow_;
}
inline void CmdSetCallWaitingState::set_allallow(bool value) {
  set_has_allallow();
  allallow_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetCallWaitingState.allallow)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool CmdTerJoinGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdTerJoinGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdTerJoinGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void CmdTerJoinGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdTerJoinGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int CmdTerJoinGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT& CmdTerJoinGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT* CmdTerJoinGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT* CmdTerJoinGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT >&
CmdTerJoinGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_IPPORT >*
CmdTerJoinGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdTerJoinGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void CmdTerJoinGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool CmdTerJoinGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdTerJoinGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdTerJoinGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_TerInfo

// optional uint32 suid = 1;
inline bool CmdTerJoinGroupMeetingRoom_TerInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_TerInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.suid)
  return suid_;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.suid)
}

// optional string nickname = 2;
inline bool CmdTerJoinGroupMeetingRoom_TerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_TerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
  return *nickname_;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_TerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
  return nickname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_TerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.nickname)
}

// optional string terdname = 3;
inline bool CmdTerJoinGroupMeetingRoom_TerInfo::has_terdname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_has_terdname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_has_terdname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_terdname() {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_->clear();
  }
  clear_has_terdname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_TerInfo::terdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
  return *terdname_;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_terdname(const ::std::string& value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_terdname(const char* value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_terdname(const char* value, size_t size) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_TerInfo::mutable_terdname() {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
  return terdname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_TerInfo::release_terdname() {
  clear_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terdname_;
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_allocated_terdname(::std::string* terdname) {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terdname_;
  }
  if (terdname) {
    set_has_terdname();
    terdname_ = terdname;
  } else {
    clear_has_terdname();
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.terdname)
}

// optional uint32 termtype = 4;
inline bool CmdTerJoinGroupMeetingRoom_TerInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_TerInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.termtype)
  return termtype_;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.termtype)
}

// optional uint32 producttype = 5;
inline bool CmdTerJoinGroupMeetingRoom_TerInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_TerInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.producttype)
  return producttype_;
}
inline void CmdTerJoinGroupMeetingRoom_TerInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo.producttype)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_GMRInfo

// optional string gmrdname = 1;
inline bool CmdTerJoinGroupMeetingRoom_GMRInfo::has_gmrdname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_has_gmrdname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_has_gmrdname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_gmrdname() {
  if (gmrdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrdname_->clear();
  }
  clear_has_gmrdname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_GMRInfo::gmrdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
  return *gmrdname_;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrdname(const ::std::string& value) {
  set_has_gmrdname();
  if (gmrdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrdname_ = new ::std::string;
  }
  gmrdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrdname(const char* value) {
  set_has_gmrdname();
  if (gmrdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrdname_ = new ::std::string;
  }
  gmrdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrdname(const char* value, size_t size) {
  set_has_gmrdname();
  if (gmrdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrdname_ = new ::std::string;
  }
  gmrdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_GMRInfo::mutable_gmrdname() {
  set_has_gmrdname();
  if (gmrdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
  return gmrdname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_GMRInfo::release_gmrdname() {
  clear_has_gmrdname();
  if (gmrdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmrdname_;
    gmrdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_allocated_gmrdname(::std::string* gmrdname) {
  if (gmrdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrdname_;
  }
  if (gmrdname) {
    set_has_gmrdname();
    gmrdname_ = gmrdname;
  } else {
    clear_has_gmrdname();
    gmrdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrdname)
}

// optional uint64 gmrconfid = 2;
inline bool CmdTerJoinGroupMeetingRoom_GMRInfo::has_gmrconfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_has_gmrconfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_has_gmrconfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_gmrconfid() {
  gmrconfid_ = GOOGLE_ULONGLONG(0);
  clear_has_gmrconfid();
}
inline ::google::protobuf::uint64 CmdTerJoinGroupMeetingRoom_GMRInfo::gmrconfid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrconfid)
  return gmrconfid_;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrconfid(::google::protobuf::uint64 value) {
  set_has_gmrconfid();
  gmrconfid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrconfid)
}

// optional uint32 gmrtype = 3;
inline bool CmdTerJoinGroupMeetingRoom_GMRInfo::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_GMRInfo::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrtype)
  return gmrtype_;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrtype)
}

// optional uint32 gmrid = 4;
inline bool CmdTerJoinGroupMeetingRoom_GMRInfo::has_gmrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_has_gmrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom_GMRInfo::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrid)
  return gmrid_;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrid)
}

// optional string gmrname = 5;
inline bool CmdTerJoinGroupMeetingRoom_GMRInfo::has_gmrname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_has_gmrname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_has_gmrname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::clear_gmrname() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_->clear();
  }
  clear_has_gmrname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom_GMRInfo::gmrname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
  return *gmrname_;
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrname(const ::std::string& value) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrname(const char* value) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_gmrname(const char* value, size_t size) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_GMRInfo::mutable_gmrname() {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
  return gmrname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom_GMRInfo::release_gmrname() {
  clear_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmrname_;
    gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom_GMRInfo::set_allocated_gmrname(::std::string* gmrname) {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (gmrname) {
    set_has_gmrname();
    gmrname_ = gmrname;
  } else {
    clear_has_gmrname();
    gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo.gmrname)
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom_MoveInfo

// optional .SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo from_gmrinfo = 1;
inline bool CmdTerJoinGroupMeetingRoom_MoveInfo::has_from_gmrinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::set_has_from_gmrinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::clear_has_from_gmrinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::clear_from_gmrinfo() {
  if (from_gmrinfo_ != NULL) from_gmrinfo_->::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo::Clear();
  clear_has_from_gmrinfo();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo& CmdTerJoinGroupMeetingRoom_MoveInfo::from_gmrinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.from_gmrinfo)
  return from_gmrinfo_ != NULL ? *from_gmrinfo_ : *default_instance_->from_gmrinfo_;
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::mutable_from_gmrinfo() {
  set_has_from_gmrinfo();
  if (from_gmrinfo_ == NULL) from_gmrinfo_ = new ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.from_gmrinfo)
  return from_gmrinfo_;
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::release_from_gmrinfo() {
  clear_has_from_gmrinfo();
  ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* temp = from_gmrinfo_;
  from_gmrinfo_ = NULL;
  return temp;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::set_allocated_from_gmrinfo(::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* from_gmrinfo) {
  delete from_gmrinfo_;
  from_gmrinfo_ = from_gmrinfo;
  if (from_gmrinfo) {
    set_has_from_gmrinfo();
  } else {
    clear_has_from_gmrinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.from_gmrinfo)
}

// optional .SRMsgs.CmdTerJoinGroupMeetingRoom.GMRInfo to_gmrinfo = 2;
inline bool CmdTerJoinGroupMeetingRoom_MoveInfo::has_to_gmrinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::set_has_to_gmrinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::clear_has_to_gmrinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::clear_to_gmrinfo() {
  if (to_gmrinfo_ != NULL) to_gmrinfo_->::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo::Clear();
  clear_has_to_gmrinfo();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo& CmdTerJoinGroupMeetingRoom_MoveInfo::to_gmrinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.to_gmrinfo)
  return to_gmrinfo_ != NULL ? *to_gmrinfo_ : *default_instance_->to_gmrinfo_;
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::mutable_to_gmrinfo() {
  set_has_to_gmrinfo();
  if (to_gmrinfo_ == NULL) to_gmrinfo_ = new ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.to_gmrinfo)
  return to_gmrinfo_;
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::release_to_gmrinfo() {
  clear_has_to_gmrinfo();
  ::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* temp = to_gmrinfo_;
  to_gmrinfo_ = NULL;
  return temp;
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::set_allocated_to_gmrinfo(::SRMsgs::CmdTerJoinGroupMeetingRoom_GMRInfo* to_gmrinfo) {
  delete to_gmrinfo_;
  to_gmrinfo_ = to_gmrinfo;
  if (to_gmrinfo) {
    set_has_to_gmrinfo();
  } else {
    clear_has_to_gmrinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.to_gmrinfo)
}

// repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.TerInfo moveters = 3;
inline int CmdTerJoinGroupMeetingRoom_MoveInfo::moveters_size() const {
  return moveters_.size();
}
inline void CmdTerJoinGroupMeetingRoom_MoveInfo::clear_moveters() {
  moveters_.Clear();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo& CmdTerJoinGroupMeetingRoom_MoveInfo::moveters(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.moveters)
  return moveters_.Get(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::mutable_moveters(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.moveters)
  return moveters_.Mutable(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo* CmdTerJoinGroupMeetingRoom_MoveInfo::add_moveters() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.moveters)
  return moveters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo >&
CmdTerJoinGroupMeetingRoom_MoveInfo::moveters() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.moveters)
  return moveters_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_TerInfo >*
CmdTerJoinGroupMeetingRoom_MoveInfo::mutable_moveters() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo.moveters)
  return &moveters_;
}

// -------------------------------------------------------------------

// CmdTerJoinGroupMeetingRoom

// optional uint32 sponsortype = 1;
inline bool CmdTerJoinGroupMeetingRoom::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.sponsortype)
  return sponsortype_;
}
inline void CmdTerJoinGroupMeetingRoom::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdTerJoinGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdTerJoinGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.confid)
  return confid_;
}
inline void CmdTerJoinGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.confid)
}

// optional uint32 terid = 3;
inline bool CmdTerJoinGroupMeetingRoom::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdTerJoinGroupMeetingRoom::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.terid)
  return terid_;
}
inline void CmdTerJoinGroupMeetingRoom::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.terid)
}

// optional string domainname = 4;
inline bool CmdTerJoinGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerJoinGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerJoinGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdTerJoinGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void CmdTerJoinGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
}
inline void CmdTerJoinGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
}
inline void CmdTerJoinGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
}
inline ::std::string* CmdTerJoinGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* CmdTerJoinGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerJoinGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerJoinGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.AddrInfo svraddrs = 5;
inline int CmdTerJoinGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdTerJoinGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo& CmdTerJoinGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo* CmdTerJoinGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo* CmdTerJoinGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerJoinGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo >&
CmdTerJoinGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerJoinGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_AddrInfo >*
CmdTerJoinGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerJoinGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.DomainInfo domains = 6;
inline int CmdTerJoinGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void CmdTerJoinGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo& CmdTerJoinGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo* CmdTerJoinGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo* CmdTerJoinGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerJoinGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo >&
CmdTerJoinGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerJoinGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_DomainInfo >*
CmdTerJoinGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerJoinGroupMeetingRoom.domains)
  return &domains_;
}

// repeated .SRMsgs.CmdTerJoinGroupMeetingRoom.MoveInfo moveinfos = 7;
inline int CmdTerJoinGroupMeetingRoom::moveinfos_size() const {
  return moveinfos_.size();
}
inline void CmdTerJoinGroupMeetingRoom::clear_moveinfos() {
  moveinfos_.Clear();
}
inline const ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo& CmdTerJoinGroupMeetingRoom::moveinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerJoinGroupMeetingRoom.moveinfos)
  return moveinfos_.Get(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo* CmdTerJoinGroupMeetingRoom::mutable_moveinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerJoinGroupMeetingRoom.moveinfos)
  return moveinfos_.Mutable(index);
}
inline ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo* CmdTerJoinGroupMeetingRoom::add_moveinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerJoinGroupMeetingRoom.moveinfos)
  return moveinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo >&
CmdTerJoinGroupMeetingRoom::moveinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerJoinGroupMeetingRoom.moveinfos)
  return moveinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerJoinGroupMeetingRoom_MoveInfo >*
CmdTerJoinGroupMeetingRoom::mutable_moveinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerJoinGroupMeetingRoom.moveinfos)
  return &moveinfos_;
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool CmdTerExitGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdTerExitGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdTerExitGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* CmdTerExitGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdTerExitGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdTerExitGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void CmdTerExitGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdTerExitGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdTerExitGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int CmdTerExitGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT& CmdTerExitGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT* CmdTerExitGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT* CmdTerExitGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT >&
CmdTerExitGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_IPPORT >*
CmdTerExitGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdTerExitGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void CmdTerExitGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool CmdTerExitGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdTerExitGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* CmdTerExitGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdTerExitGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdTerExitGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdTerExitGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_TerInfo

// optional uint32 suid = 1;
inline bool CmdTerExitGroupMeetingRoom_TerInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_TerInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.suid)
  return suid_;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.suid)
}

// optional string terdname = 2;
inline bool CmdTerExitGroupMeetingRoom_TerInfo::has_terdname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_has_terdname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_has_terdname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_terdname() {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_->clear();
  }
  clear_has_terdname();
}
inline const ::std::string& CmdTerExitGroupMeetingRoom_TerInfo::terdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
  return *terdname_;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_terdname(const ::std::string& value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_terdname(const char* value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_terdname(const char* value, size_t size) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
}
inline ::std::string* CmdTerExitGroupMeetingRoom_TerInfo::mutable_terdname() {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
  return terdname_;
}
inline ::std::string* CmdTerExitGroupMeetingRoom_TerInfo::release_terdname() {
  clear_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terdname_;
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_allocated_terdname(::std::string* terdname) {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terdname_;
  }
  if (terdname) {
    set_has_terdname();
    terdname_ = terdname;
  } else {
    clear_has_terdname();
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.terdname)
}

// optional uint32 termtype = 3;
inline bool CmdTerExitGroupMeetingRoom_TerInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_TerInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.termtype)
  return termtype_;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.termtype)
}

// optional uint32 producttype = 4;
inline bool CmdTerExitGroupMeetingRoom_TerInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_TerInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.producttype)
  return producttype_;
}
inline void CmdTerExitGroupMeetingRoom_TerInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo.producttype)
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_GMRInfo

// optional uint32 gmrtype = 1;
inline bool CmdTerExitGroupMeetingRoom_GMRInfo::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_GMRInfo::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo.gmrtype)
  return gmrtype_;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo.gmrtype)
}

// optional uint32 gmrid = 2;
inline bool CmdTerExitGroupMeetingRoom_GMRInfo::has_gmrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::set_has_gmrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom_GMRInfo::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo.gmrid)
  return gmrid_;
}
inline void CmdTerExitGroupMeetingRoom_GMRInfo::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo.gmrid)
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom_ExitInfo

// optional .SRMsgs.CmdTerExitGroupMeetingRoom.GMRInfo exitgmrinfo = 1;
inline bool CmdTerExitGroupMeetingRoom_ExitInfo::has_exitgmrinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom_ExitInfo::set_has_exitgmrinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_ExitInfo::clear_has_exitgmrinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom_ExitInfo::clear_exitgmrinfo() {
  if (exitgmrinfo_ != NULL) exitgmrinfo_->::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo::Clear();
  clear_has_exitgmrinfo();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo& CmdTerExitGroupMeetingRoom_ExitInfo::exitgmrinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitgmrinfo)
  return exitgmrinfo_ != NULL ? *exitgmrinfo_ : *default_instance_->exitgmrinfo_;
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* CmdTerExitGroupMeetingRoom_ExitInfo::mutable_exitgmrinfo() {
  set_has_exitgmrinfo();
  if (exitgmrinfo_ == NULL) exitgmrinfo_ = new ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitgmrinfo)
  return exitgmrinfo_;
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* CmdTerExitGroupMeetingRoom_ExitInfo::release_exitgmrinfo() {
  clear_has_exitgmrinfo();
  ::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* temp = exitgmrinfo_;
  exitgmrinfo_ = NULL;
  return temp;
}
inline void CmdTerExitGroupMeetingRoom_ExitInfo::set_allocated_exitgmrinfo(::SRMsgs::CmdTerExitGroupMeetingRoom_GMRInfo* exitgmrinfo) {
  delete exitgmrinfo_;
  exitgmrinfo_ = exitgmrinfo;
  if (exitgmrinfo) {
    set_has_exitgmrinfo();
  } else {
    clear_has_exitgmrinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitgmrinfo)
}

// repeated .SRMsgs.CmdTerExitGroupMeetingRoom.TerInfo exitters = 2;
inline int CmdTerExitGroupMeetingRoom_ExitInfo::exitters_size() const {
  return exitters_.size();
}
inline void CmdTerExitGroupMeetingRoom_ExitInfo::clear_exitters() {
  exitters_.Clear();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo& CmdTerExitGroupMeetingRoom_ExitInfo::exitters(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitters)
  return exitters_.Get(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo* CmdTerExitGroupMeetingRoom_ExitInfo::mutable_exitters(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitters)
  return exitters_.Mutable(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo* CmdTerExitGroupMeetingRoom_ExitInfo::add_exitters() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitters)
  return exitters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo >&
CmdTerExitGroupMeetingRoom_ExitInfo::exitters() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitters)
  return exitters_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_TerInfo >*
CmdTerExitGroupMeetingRoom_ExitInfo::mutable_exitters() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo.exitters)
  return &exitters_;
}

// -------------------------------------------------------------------

// CmdTerExitGroupMeetingRoom

// optional uint32 sponsortype = 1;
inline bool CmdTerExitGroupMeetingRoom::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerExitGroupMeetingRoom::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerExitGroupMeetingRoom::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.sponsortype)
  return sponsortype_;
}
inline void CmdTerExitGroupMeetingRoom::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdTerExitGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerExitGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerExitGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdTerExitGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.confid)
  return confid_;
}
inline void CmdTerExitGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.confid)
}

// optional uint32 terid = 3;
inline bool CmdTerExitGroupMeetingRoom::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerExitGroupMeetingRoom::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerExitGroupMeetingRoom::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdTerExitGroupMeetingRoom::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.terid)
  return terid_;
}
inline void CmdTerExitGroupMeetingRoom::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.terid)
}

// optional string domainname = 4;
inline bool CmdTerExitGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerExitGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerExitGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerExitGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdTerExitGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void CmdTerExitGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
}
inline void CmdTerExitGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
}
inline void CmdTerExitGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
}
inline ::std::string* CmdTerExitGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* CmdTerExitGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerExitGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerExitGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.CmdTerExitGroupMeetingRoom.AddrInfo svraddrs = 5;
inline int CmdTerExitGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdTerExitGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo& CmdTerExitGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo* CmdTerExitGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo* CmdTerExitGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerExitGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo >&
CmdTerExitGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerExitGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_AddrInfo >*
CmdTerExitGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerExitGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdTerExitGroupMeetingRoom.DomainInfo domains = 6;
inline int CmdTerExitGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void CmdTerExitGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo& CmdTerExitGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo* CmdTerExitGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo* CmdTerExitGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerExitGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo >&
CmdTerExitGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerExitGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_DomainInfo >*
CmdTerExitGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerExitGroupMeetingRoom.domains)
  return &domains_;
}

// repeated .SRMsgs.CmdTerExitGroupMeetingRoom.ExitInfo exitinfos = 7;
inline int CmdTerExitGroupMeetingRoom::exitinfos_size() const {
  return exitinfos_.size();
}
inline void CmdTerExitGroupMeetingRoom::clear_exitinfos() {
  exitinfos_.Clear();
}
inline const ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo& CmdTerExitGroupMeetingRoom::exitinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerExitGroupMeetingRoom.exitinfos)
  return exitinfos_.Get(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo* CmdTerExitGroupMeetingRoom::mutable_exitinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerExitGroupMeetingRoom.exitinfos)
  return exitinfos_.Mutable(index);
}
inline ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo* CmdTerExitGroupMeetingRoom::add_exitinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerExitGroupMeetingRoom.exitinfos)
  return exitinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo >&
CmdTerExitGroupMeetingRoom::exitinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerExitGroupMeetingRoom.exitinfos)
  return exitinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerExitGroupMeetingRoom_ExitInfo >*
CmdTerExitGroupMeetingRoom::mutable_exitinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerExitGroupMeetingRoom.exitinfos)
  return &exitinfos_;
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCSetConfRollCallList_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCSetConfRollCallList_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCSetConfRollCallList_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
  return *ip_;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
}
inline void CmdMCSetConfRollCallList_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
}
inline void CmdMCSetConfRollCallList_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
}
inline ::std::string* CmdMCSetConfRollCallList_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCSetConfRollCallList_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallList_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCSetConfRollCallList_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallList_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.IPPORT.port)
  return port_;
}
inline void CmdMCSetConfRollCallList_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCSetConfRollCallList_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCSetConfRollCallList_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCSetConfRollCallList.IPPORT ipportinfos = 2;
inline int CmdMCSetConfRollCallList_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCSetConfRollCallList_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallList_IPPORT& CmdMCSetConfRollCallList_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_IPPORT* CmdMCSetConfRollCallList_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_IPPORT* CmdMCSetConfRollCallList_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_IPPORT >&
CmdMCSetConfRollCallList_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_IPPORT >*
CmdMCSetConfRollCallList_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCSetConfRollCallList_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallList_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallList_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallList_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.level)
  return level_;
}
inline void CmdMCSetConfRollCallList_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList_DomainInfo

// optional string dname = 1;
inline bool CmdMCSetConfRollCallList_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCSetConfRollCallList_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
}
inline ::std::string* CmdMCSetConfRollCallList_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCSetConfRollCallList_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCSetConfRollCallList_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallList_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallList_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCSetConfRollCallList_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList_ParticipantInfo

// optional uint32 psuid = 1;
inline bool CmdMCSetConfRollCallList_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.psuid)
  return psuid_;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.psuid)
}

// optional string nickname = 2;
inline bool CmdMCSetConfRollCallList_ParticipantInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CmdMCSetConfRollCallList_ParticipantInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
  return *nickname_;
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
}
inline ::std::string* CmdMCSetConfRollCallList_ParticipantInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
  return nickname_;
}
inline ::std::string* CmdMCSetConfRollCallList_ParticipantInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallList_ParticipantInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo.nickname)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList_RollCallInfo

// optional uint64 rcid = 1;
inline bool CmdMCSetConfRollCallList_RollCallInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 CmdMCSetConfRollCallList_RollCallInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcid)
  return rcid_;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcid)
}

// optional string rcname = 2;
inline bool CmdMCSetConfRollCallList_RollCallInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& CmdMCSetConfRollCallList_RollCallInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
  return *rcname_;
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
}
inline ::std::string* CmdMCSetConfRollCallList_RollCallInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
  return rcname_;
}
inline ::std::string* CmdMCSetConfRollCallList_RollCallInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallList_RollCallInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.rcname)
}

// repeated .SRMsgs.CmdMCSetConfRollCallList.ParticipantInfo parts = 3;
inline int CmdMCSetConfRollCallList_RollCallInfo::parts_size() const {
  return parts_.size();
}
inline void CmdMCSetConfRollCallList_RollCallInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo& CmdMCSetConfRollCallList_RollCallInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo* CmdMCSetConfRollCallList_RollCallInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo* CmdMCSetConfRollCallList_RollCallInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo >&
CmdMCSetConfRollCallList_RollCallInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_ParticipantInfo >*
CmdMCSetConfRollCallList_RollCallInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallList.RollCallInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallList

// optional uint32 sponsortype = 1;
inline bool CmdMCSetConfRollCallList::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallList::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallList::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.sponsortype)
  return sponsortype_;
}
inline void CmdMCSetConfRollCallList::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdMCSetConfRollCallList::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallList::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallList::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCSetConfRollCallList::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.confid)
  return confid_;
}
inline void CmdMCSetConfRollCallList::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.confid)
}

// optional uint32 terid = 3;
inline bool CmdMCSetConfRollCallList::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallList::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallList::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.terid)
  return terid_;
}
inline void CmdMCSetConfRollCallList::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.terid)
}

// optional uint32 optype = 4;
inline bool CmdMCSetConfRollCallList::has_optype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_optype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCSetConfRollCallList::clear_has_optype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCSetConfRollCallList::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallList::optype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.optype)
  return optype_;
}
inline void CmdMCSetConfRollCallList::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.optype)
}

// optional .SRMsgs.CmdMCSetConfRollCallList.RollCallInfo rollcalllist = 5;
inline bool CmdMCSetConfRollCallList::has_rollcalllist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_rollcalllist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCSetConfRollCallList::clear_has_rollcalllist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCSetConfRollCallList::clear_rollcalllist() {
  if (rollcalllist_ != NULL) rollcalllist_->::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo::Clear();
  clear_has_rollcalllist();
}
inline const ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo& CmdMCSetConfRollCallList::rollcalllist() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.rollcalllist)
  return rollcalllist_ != NULL ? *rollcalllist_ : *default_instance_->rollcalllist_;
}
inline ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* CmdMCSetConfRollCallList::mutable_rollcalllist() {
  set_has_rollcalllist();
  if (rollcalllist_ == NULL) rollcalllist_ = new ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.rollcalllist)
  return rollcalllist_;
}
inline ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* CmdMCSetConfRollCallList::release_rollcalllist() {
  clear_has_rollcalllist();
  ::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* temp = rollcalllist_;
  rollcalllist_ = NULL;
  return temp;
}
inline void CmdMCSetConfRollCallList::set_allocated_rollcalllist(::SRMsgs::CmdMCSetConfRollCallList_RollCallInfo* rollcalllist) {
  delete rollcalllist_;
  rollcalllist_ = rollcalllist;
  if (rollcalllist) {
    set_has_rollcalllist();
  } else {
    clear_has_rollcalllist();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.rollcalllist)
}

// optional string domainname = 7;
inline bool CmdMCSetConfRollCallList::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdMCSetConfRollCallList::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdMCSetConfRollCallList::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdMCSetConfRollCallList::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCSetConfRollCallList::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.domainname)
  return *domainname_;
}
inline void CmdMCSetConfRollCallList::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallList.domainname)
}
inline void CmdMCSetConfRollCallList::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallList.domainname)
}
inline void CmdMCSetConfRollCallList::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallList.domainname)
}
inline ::std::string* CmdMCSetConfRollCallList::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.domainname)
  return domainname_;
}
inline ::std::string* CmdMCSetConfRollCallList::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallList::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallList.domainname)
}

// repeated .SRMsgs.CmdMCSetConfRollCallList.AddrInfo svraddrs = 8;
inline int CmdMCSetConfRollCallList::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCSetConfRollCallList::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo& CmdMCSetConfRollCallList::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo* CmdMCSetConfRollCallList::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo* CmdMCSetConfRollCallList::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallList.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo >&
CmdMCSetConfRollCallList::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallList.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_AddrInfo >*
CmdMCSetConfRollCallList::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallList.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCSetConfRollCallList.DomainInfo domains = 9;
inline int CmdMCSetConfRollCallList::domains_size() const {
  return domains_.size();
}
inline void CmdMCSetConfRollCallList::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo& CmdMCSetConfRollCallList::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallList.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo* CmdMCSetConfRollCallList::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallList.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo* CmdMCSetConfRollCallList::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallList.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo >&
CmdMCSetConfRollCallList::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallList.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallList_DomainInfo >*
CmdMCSetConfRollCallList::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallList.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCUpdateParticipantsOrder_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCUpdateParticipantsOrder_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCUpdateParticipantsOrder_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCUpdateParticipantsOrder_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
  return *ip_;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
}
inline ::std::string* CmdMCUpdateParticipantsOrder_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCUpdateParticipantsOrder_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCUpdateParticipantsOrder_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.port)
  return port_;
}
inline void CmdMCUpdateParticipantsOrder_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCUpdateParticipantsOrder_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCUpdateParticipantsOrder_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCUpdateParticipantsOrder.IPPORT ipportinfos = 2;
inline int CmdMCUpdateParticipantsOrder_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT& CmdMCUpdateParticipantsOrder_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT* CmdMCUpdateParticipantsOrder_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT* CmdMCUpdateParticipantsOrder_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT >&
CmdMCUpdateParticipantsOrder_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_IPPORT >*
CmdMCUpdateParticipantsOrder_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCUpdateParticipantsOrder_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.level)
  return level_;
}
inline void CmdMCUpdateParticipantsOrder_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCUpdateParticipantsOrder_DomainInfo

// optional string dname = 1;
inline bool CmdMCUpdateParticipantsOrder_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCUpdateParticipantsOrder_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
}
inline ::std::string* CmdMCUpdateParticipantsOrder_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCUpdateParticipantsOrder_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCUpdateParticipantsOrder_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCUpdateParticipantsOrder_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCUpdateParticipantsOrder_ParticipantInfo

// optional uint32 psuid = 1;
inline bool CmdMCUpdateParticipantsOrder_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo.psuid)
  return psuid_;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo.psuid)
}

// optional uint32 orderno = 2;
inline bool CmdMCUpdateParticipantsOrder_ParticipantInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::clear_orderno() {
  orderno_ = 0u;
  clear_has_orderno();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder_ParticipantInfo::orderno() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo.orderno)
  return orderno_;
}
inline void CmdMCUpdateParticipantsOrder_ParticipantInfo::set_orderno(::google::protobuf::uint32 value) {
  set_has_orderno();
  orderno_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo.orderno)
}

// -------------------------------------------------------------------

// CmdMCUpdateParticipantsOrder

// optional uint64 confid = 1;
inline bool CmdMCUpdateParticipantsOrder::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateParticipantsOrder::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateParticipantsOrder::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCUpdateParticipantsOrder::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.confid)
  return confid_;
}
inline void CmdMCUpdateParticipantsOrder::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCUpdateParticipantsOrder::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateParticipantsOrder::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateParticipantsOrder::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.terid)
  return terid_;
}
inline void CmdMCUpdateParticipantsOrder::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCUpdateParticipantsOrder::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateParticipantsOrder::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateParticipantsOrder::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCUpdateParticipantsOrder::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.sponsortype)
  return sponsortype_;
}
inline void CmdMCUpdateParticipantsOrder::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.sponsortype)
}

// repeated .SRMsgs.CmdMCUpdateParticipantsOrder.ParticipantInfo participants = 4;
inline int CmdMCUpdateParticipantsOrder::participants_size() const {
  return participants_.size();
}
inline void CmdMCUpdateParticipantsOrder::clear_participants() {
  participants_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo& CmdMCUpdateParticipantsOrder::participants(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.participants)
  return participants_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo* CmdMCUpdateParticipantsOrder::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.participants)
  return participants_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo* CmdMCUpdateParticipantsOrder::add_participants() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateParticipantsOrder.participants)
  return participants_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo >&
CmdMCUpdateParticipantsOrder::participants() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateParticipantsOrder.participants)
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_ParticipantInfo >*
CmdMCUpdateParticipantsOrder::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateParticipantsOrder.participants)
  return &participants_;
}

// optional string domainname = 5;
inline bool CmdMCUpdateParticipantsOrder::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCUpdateParticipantsOrder::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCUpdateParticipantsOrder::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCUpdateParticipantsOrder::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCUpdateParticipantsOrder::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
  return *domainname_;
}
inline void CmdMCUpdateParticipantsOrder::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
}
inline void CmdMCUpdateParticipantsOrder::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
}
inline void CmdMCUpdateParticipantsOrder::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
}
inline ::std::string* CmdMCUpdateParticipantsOrder::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
  return domainname_;
}
inline ::std::string* CmdMCUpdateParticipantsOrder::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateParticipantsOrder::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateParticipantsOrder.domainname)
}

// repeated .SRMsgs.CmdMCUpdateParticipantsOrder.AddrInfo svraddrs = 6;
inline int CmdMCUpdateParticipantsOrder::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCUpdateParticipantsOrder::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo& CmdMCUpdateParticipantsOrder::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo* CmdMCUpdateParticipantsOrder::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo* CmdMCUpdateParticipantsOrder::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateParticipantsOrder.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo >&
CmdMCUpdateParticipantsOrder::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateParticipantsOrder.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_AddrInfo >*
CmdMCUpdateParticipantsOrder::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateParticipantsOrder.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCUpdateParticipantsOrder.DomainInfo domains = 7;
inline int CmdMCUpdateParticipantsOrder::domains_size() const {
  return domains_.size();
}
inline void CmdMCUpdateParticipantsOrder::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo& CmdMCUpdateParticipantsOrder::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateParticipantsOrder.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo* CmdMCUpdateParticipantsOrder::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateParticipantsOrder.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo* CmdMCUpdateParticipantsOrder::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateParticipantsOrder.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo >&
CmdMCUpdateParticipantsOrder::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateParticipantsOrder.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateParticipantsOrder_DomainInfo >*
CmdMCUpdateParticipantsOrder::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateParticipantsOrder.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallState_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCSetConfRollCallState_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCSetConfRollCallState_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCSetConfRollCallState_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
  return *ip_;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
}
inline void CmdMCSetConfRollCallState_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
}
inline void CmdMCSetConfRollCallState_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
}
inline ::std::string* CmdMCSetConfRollCallState_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCSetConfRollCallState_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallState_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallState.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCSetConfRollCallState_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallState_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.IPPORT.port)
  return port_;
}
inline void CmdMCSetConfRollCallState_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallState_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCSetConfRollCallState_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallState_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallState_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallState_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCSetConfRollCallState_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCSetConfRollCallState.IPPORT ipportinfos = 2;
inline int CmdMCSetConfRollCallState_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCSetConfRollCallState_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallState_IPPORT& CmdMCSetConfRollCallState_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_IPPORT* CmdMCSetConfRollCallState_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_IPPORT* CmdMCSetConfRollCallState_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_IPPORT >&
CmdMCSetConfRollCallState_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_IPPORT >*
CmdMCSetConfRollCallState_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCSetConfRollCallState_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallState_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallState_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallState_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.level)
  return level_;
}
inline void CmdMCSetConfRollCallState_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallState_DomainInfo

// optional string dname = 1;
inline bool CmdMCSetConfRollCallState_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallState_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallState_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCSetConfRollCallState_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
}
inline ::std::string* CmdMCSetConfRollCallState_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCSetConfRollCallState_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCSetConfRollCallState_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallState_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallState_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCSetConfRollCallState_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCSetConfRollCallState

// optional uint32 sponsortype = 1;
inline bool CmdMCSetConfRollCallState::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetConfRollCallState::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetConfRollCallState::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetConfRollCallState::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.sponsortype)
  return sponsortype_;
}
inline void CmdMCSetConfRollCallState::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdMCSetConfRollCallState::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetConfRollCallState::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetConfRollCallState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetConfRollCallState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCSetConfRollCallState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.confid)
  return confid_;
}
inline void CmdMCSetConfRollCallState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.confid)
}

// optional uint32 terid = 3;
inline bool CmdMCSetConfRollCallState::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetConfRollCallState::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetConfRollCallState::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetConfRollCallState::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCSetConfRollCallState::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.terid)
  return terid_;
}
inline void CmdMCSetConfRollCallState::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.terid)
}

// optional bool isrollcall = 4;
inline bool CmdMCSetConfRollCallState::has_isrollcall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCSetConfRollCallState::set_has_isrollcall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCSetConfRollCallState::clear_has_isrollcall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCSetConfRollCallState::clear_isrollcall() {
  isrollcall_ = false;
  clear_has_isrollcall();
}
inline bool CmdMCSetConfRollCallState::isrollcall() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.isrollcall)
  return isrollcall_;
}
inline void CmdMCSetConfRollCallState::set_isrollcall(bool value) {
  set_has_isrollcall();
  isrollcall_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.isrollcall)
}

// optional string domainname = 5;
inline bool CmdMCSetConfRollCallState::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCSetConfRollCallState::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCSetConfRollCallState::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCSetConfRollCallState::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCSetConfRollCallState::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.domainname)
  return *domainname_;
}
inline void CmdMCSetConfRollCallState::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetConfRollCallState.domainname)
}
inline void CmdMCSetConfRollCallState::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetConfRollCallState.domainname)
}
inline void CmdMCSetConfRollCallState::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetConfRollCallState.domainname)
}
inline ::std::string* CmdMCSetConfRollCallState::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.domainname)
  return domainname_;
}
inline ::std::string* CmdMCSetConfRollCallState::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetConfRollCallState::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetConfRollCallState.domainname)
}

// repeated .SRMsgs.CmdMCSetConfRollCallState.AddrInfo svraddrs = 6;
inline int CmdMCSetConfRollCallState::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCSetConfRollCallState::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo& CmdMCSetConfRollCallState::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo* CmdMCSetConfRollCallState::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo* CmdMCSetConfRollCallState::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallState.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo >&
CmdMCSetConfRollCallState::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallState.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_AddrInfo >*
CmdMCSetConfRollCallState::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallState.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCSetConfRollCallState.DomainInfo domains = 7;
inline int CmdMCSetConfRollCallState::domains_size() const {
  return domains_.size();
}
inline void CmdMCSetConfRollCallState::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo& CmdMCSetConfRollCallState::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetConfRollCallState.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo* CmdMCSetConfRollCallState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetConfRollCallState.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo* CmdMCSetConfRollCallState::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetConfRollCallState.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo >&
CmdMCSetConfRollCallState::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetConfRollCallState.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetConfRollCallState_DomainInfo >*
CmdMCSetConfRollCallState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetConfRollCallState.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCRollCallTer_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCRollCallTer_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTer_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTer_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTer_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCRollCallTer_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCRollCallTer_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTer_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTer_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTer_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCRollCallTer_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
  return *ip_;
}
inline void CmdMCRollCallTer_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
}
inline void CmdMCRollCallTer_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
}
inline void CmdMCRollCallTer_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
}
inline ::std::string* CmdMCRollCallTer_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCRollCallTer_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTer_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCRollCallTer_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTer_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTer_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTer_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.IPPORT.port)
  return port_;
}
inline void CmdMCRollCallTer_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCRollCallTer_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCRollCallTer_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTer_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTer_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTer_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCRollCallTer_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCRollCallTer.IPPORT ipportinfos = 2;
inline int CmdMCRollCallTer_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCRollCallTer_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTer_IPPORT& CmdMCRollCallTer_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTer_IPPORT* CmdMCRollCallTer_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTer_IPPORT* CmdMCRollCallTer_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_IPPORT >&
CmdMCRollCallTer_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_IPPORT >*
CmdMCRollCallTer_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTer.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCRollCallTer_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTer_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTer_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTer_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.AddrInfo.level)
  return level_;
}
inline void CmdMCRollCallTer_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCRollCallTer_DomainInfo

// optional string dname = 1;
inline bool CmdMCRollCallTer_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTer_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTer_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTer_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCRollCallTer_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCRollCallTer_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
}
inline void CmdMCRollCallTer_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
}
inline void CmdMCRollCallTer_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
}
inline ::std::string* CmdMCRollCallTer_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCRollCallTer_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTer_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCRollCallTer_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTer_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTer_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTer_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCRollCallTer_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCRollCallTer_RollCallTerInfo

// optional uint64 rcid = 1;
inline bool CmdMCRollCallTer_RollCallTerInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 CmdMCRollCallTer_RollCallTerInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcid)
  return rcid_;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcid)
}

// optional string rcname = 2;
inline bool CmdMCRollCallTer_RollCallTerInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& CmdMCRollCallTer_RollCallTerInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
  return *rcname_;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
}
inline ::std::string* CmdMCRollCallTer_RollCallTerInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
  return rcname_;
}
inline ::std::string* CmdMCRollCallTer_RollCallTerInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.rcname)
}

// optional uint32 psuid = 3;
inline bool CmdMCRollCallTer_RollCallTerInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer_RollCallTerInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.psuid)
  return psuid_;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.psuid)
}

// optional string nickname = 4;
inline bool CmdMCRollCallTer_RollCallTerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCRollCallTer_RollCallTerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CmdMCRollCallTer_RollCallTerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
  return *nickname_;
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
}
inline ::std::string* CmdMCRollCallTer_RollCallTerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
  return nickname_;
}
inline ::std::string* CmdMCRollCallTer_RollCallTerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTer_RollCallTerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.RollCallTerInfo.nickname)
}

// -------------------------------------------------------------------

// CmdMCRollCallTer

// optional uint32 sponsortype = 1;
inline bool CmdMCRollCallTer::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTer::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTer::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTer::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.sponsortype)
  return sponsortype_;
}
inline void CmdMCRollCallTer::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdMCRollCallTer::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTer::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTer::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTer::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCRollCallTer::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.confid)
  return confid_;
}
inline void CmdMCRollCallTer::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.confid)
}

// optional uint32 terid = 3;
inline bool CmdMCRollCallTer::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTer::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTer::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTer::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCRollCallTer::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.terid)
  return terid_;
}
inline void CmdMCRollCallTer::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.terid)
}

// optional .SRMsgs.CmdMCRollCallTer.RollCallTerInfo currcterinfo = 4;
inline bool CmdMCRollCallTer::has_currcterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCRollCallTer::set_has_currcterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCRollCallTer::clear_has_currcterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCRollCallTer::clear_currcterinfo() {
  if (currcterinfo_ != NULL) currcterinfo_->::SRMsgs::CmdMCRollCallTer_RollCallTerInfo::Clear();
  clear_has_currcterinfo();
}
inline const ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo& CmdMCRollCallTer::currcterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.currcterinfo)
  return currcterinfo_ != NULL ? *currcterinfo_ : *default_instance_->currcterinfo_;
}
inline ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* CmdMCRollCallTer::mutable_currcterinfo() {
  set_has_currcterinfo();
  if (currcterinfo_ == NULL) currcterinfo_ = new ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.currcterinfo)
  return currcterinfo_;
}
inline ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* CmdMCRollCallTer::release_currcterinfo() {
  clear_has_currcterinfo();
  ::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* temp = currcterinfo_;
  currcterinfo_ = NULL;
  return temp;
}
inline void CmdMCRollCallTer::set_allocated_currcterinfo(::SRMsgs::CmdMCRollCallTer_RollCallTerInfo* currcterinfo) {
  delete currcterinfo_;
  currcterinfo_ = currcterinfo;
  if (currcterinfo) {
    set_has_currcterinfo();
  } else {
    clear_has_currcterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.currcterinfo)
}

// optional string domainname = 5;
inline bool CmdMCRollCallTer::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCRollCallTer::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCRollCallTer::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCRollCallTer::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCRollCallTer::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.domainname)
  return *domainname_;
}
inline void CmdMCRollCallTer::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTer.domainname)
}
inline void CmdMCRollCallTer::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTer.domainname)
}
inline void CmdMCRollCallTer::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTer.domainname)
}
inline ::std::string* CmdMCRollCallTer::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.domainname)
  return domainname_;
}
inline ::std::string* CmdMCRollCallTer::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTer::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTer.domainname)
}

// repeated .SRMsgs.CmdMCRollCallTer.AddrInfo svraddrs = 6;
inline int CmdMCRollCallTer::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCRollCallTer::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTer_AddrInfo& CmdMCRollCallTer::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTer_AddrInfo* CmdMCRollCallTer::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTer_AddrInfo* CmdMCRollCallTer::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTer.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_AddrInfo >&
CmdMCRollCallTer::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTer.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_AddrInfo >*
CmdMCRollCallTer::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTer.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCRollCallTer.DomainInfo domains = 7;
inline int CmdMCRollCallTer::domains_size() const {
  return domains_.size();
}
inline void CmdMCRollCallTer::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTer_DomainInfo& CmdMCRollCallTer::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTer.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTer_DomainInfo* CmdMCRollCallTer::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTer.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTer_DomainInfo* CmdMCRollCallTer::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTer.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_DomainInfo >&
CmdMCRollCallTer::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTer.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTer_DomainInfo >*
CmdMCRollCallTer::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTer.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCRollCallTerResult_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCRollCallTerResult_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTerResult_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCRollCallTerResult_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCRollCallTerResult_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTerResult_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCRollCallTerResult_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
  return *ip_;
}
inline void CmdMCRollCallTerResult_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
}
inline void CmdMCRollCallTerResult_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
}
inline void CmdMCRollCallTerResult_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
}
inline ::std::string* CmdMCRollCallTerResult_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCRollCallTerResult_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTerResult_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCRollCallTerResult_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTerResult_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTerResult_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.IPPORT.port)
  return port_;
}
inline void CmdMCRollCallTerResult_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCRollCallTerResult_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCRollCallTerResult_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTerResult_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTerResult_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTerResult_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCRollCallTerResult_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCRollCallTerResult.IPPORT ipportinfos = 2;
inline int CmdMCRollCallTerResult_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCRollCallTerResult_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTerResult_IPPORT& CmdMCRollCallTerResult_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_IPPORT* CmdMCRollCallTerResult_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_IPPORT* CmdMCRollCallTerResult_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_IPPORT >&
CmdMCRollCallTerResult_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_IPPORT >*
CmdMCRollCallTerResult_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTerResult.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCRollCallTerResult_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTerResult_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTerResult_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTerResult_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.AddrInfo.level)
  return level_;
}
inline void CmdMCRollCallTerResult_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCRollCallTerResult_DomainInfo

// optional string dname = 1;
inline bool CmdMCRollCallTerResult_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTerResult_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTerResult_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTerResult_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCRollCallTerResult_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCRollCallTerResult_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
}
inline void CmdMCRollCallTerResult_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
}
inline void CmdMCRollCallTerResult_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
}
inline ::std::string* CmdMCRollCallTerResult_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCRollCallTerResult_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTerResult_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCRollCallTerResult_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTerResult_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTerResult_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTerResult_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCRollCallTerResult_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCRollCallTerResult_RollCallTerInfo

// optional uint64 rcid = 1;
inline bool CmdMCRollCallTerResult_RollCallTerInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 CmdMCRollCallTerResult_RollCallTerInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcid)
  return rcid_;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcid)
}

// optional string rcname = 2;
inline bool CmdMCRollCallTerResult_RollCallTerInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& CmdMCRollCallTerResult_RollCallTerInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
  return *rcname_;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
}
inline ::std::string* CmdMCRollCallTerResult_RollCallTerInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
  return rcname_;
}
inline ::std::string* CmdMCRollCallTerResult_RollCallTerInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.rcname)
}

// optional uint32 psuid = 3;
inline bool CmdMCRollCallTerResult_RollCallTerInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult_RollCallTerInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.psuid)
  return psuid_;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.psuid)
}

// optional string nickname = 4;
inline bool CmdMCRollCallTerResult_RollCallTerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CmdMCRollCallTerResult_RollCallTerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
  return *nickname_;
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
}
inline ::std::string* CmdMCRollCallTerResult_RollCallTerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
  return nickname_;
}
inline ::std::string* CmdMCRollCallTerResult_RollCallTerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTerResult_RollCallTerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo.nickname)
}

// -------------------------------------------------------------------

// CmdMCRollCallTerResult

// optional uint32 sponsortype = 1;
inline bool CmdMCRollCallTerResult::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCRollCallTerResult::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCRollCallTerResult::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.sponsortype)
  return sponsortype_;
}
inline void CmdMCRollCallTerResult::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdMCRollCallTerResult::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCRollCallTerResult::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCRollCallTerResult::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCRollCallTerResult::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.confid)
  return confid_;
}
inline void CmdMCRollCallTerResult::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.confid)
}

// optional uint32 terid = 3;
inline bool CmdMCRollCallTerResult::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCRollCallTerResult::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCRollCallTerResult::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCRollCallTerResult::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.terid)
  return terid_;
}
inline void CmdMCRollCallTerResult::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.terid)
}

// optional .SRMsgs.CmdMCRollCallTerResult.RollCallTerInfo rcterinfo = 4;
inline bool CmdMCRollCallTerResult::has_rcterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_rcterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCRollCallTerResult::clear_has_rcterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCRollCallTerResult::clear_rcterinfo() {
  if (rcterinfo_ != NULL) rcterinfo_->::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo::Clear();
  clear_has_rcterinfo();
}
inline const ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo& CmdMCRollCallTerResult::rcterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.rcterinfo)
  return rcterinfo_ != NULL ? *rcterinfo_ : *default_instance_->rcterinfo_;
}
inline ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* CmdMCRollCallTerResult::mutable_rcterinfo() {
  set_has_rcterinfo();
  if (rcterinfo_ == NULL) rcterinfo_ = new ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.rcterinfo)
  return rcterinfo_;
}
inline ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* CmdMCRollCallTerResult::release_rcterinfo() {
  clear_has_rcterinfo();
  ::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* temp = rcterinfo_;
  rcterinfo_ = NULL;
  return temp;
}
inline void CmdMCRollCallTerResult::set_allocated_rcterinfo(::SRMsgs::CmdMCRollCallTerResult_RollCallTerInfo* rcterinfo) {
  delete rcterinfo_;
  rcterinfo_ = rcterinfo;
  if (rcterinfo) {
    set_has_rcterinfo();
  } else {
    clear_has_rcterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.rcterinfo)
}

// optional bool ispass = 5;
inline bool CmdMCRollCallTerResult::has_ispass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_ispass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCRollCallTerResult::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCRollCallTerResult::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool CmdMCRollCallTerResult::ispass() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.ispass)
  return ispass_;
}
inline void CmdMCRollCallTerResult::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.ispass)
}

// optional string domainname = 6;
inline bool CmdMCRollCallTerResult::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdMCRollCallTerResult::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdMCRollCallTerResult::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdMCRollCallTerResult::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCRollCallTerResult::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.domainname)
  return *domainname_;
}
inline void CmdMCRollCallTerResult::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCRollCallTerResult.domainname)
}
inline void CmdMCRollCallTerResult::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCRollCallTerResult.domainname)
}
inline void CmdMCRollCallTerResult::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCRollCallTerResult.domainname)
}
inline ::std::string* CmdMCRollCallTerResult::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.domainname)
  return domainname_;
}
inline ::std::string* CmdMCRollCallTerResult::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCRollCallTerResult::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCRollCallTerResult.domainname)
}

// repeated .SRMsgs.CmdMCRollCallTerResult.AddrInfo svraddrs = 7;
inline int CmdMCRollCallTerResult::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCRollCallTerResult::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTerResult_AddrInfo& CmdMCRollCallTerResult::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_AddrInfo* CmdMCRollCallTerResult::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_AddrInfo* CmdMCRollCallTerResult::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTerResult.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_AddrInfo >&
CmdMCRollCallTerResult::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTerResult.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_AddrInfo >*
CmdMCRollCallTerResult::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTerResult.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCRollCallTerResult.DomainInfo domains = 8;
inline int CmdMCRollCallTerResult::domains_size() const {
  return domains_.size();
}
inline void CmdMCRollCallTerResult::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCRollCallTerResult_DomainInfo& CmdMCRollCallTerResult::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCRollCallTerResult.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_DomainInfo* CmdMCRollCallTerResult::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCRollCallTerResult.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCRollCallTerResult_DomainInfo* CmdMCRollCallTerResult::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCRollCallTerResult.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_DomainInfo >&
CmdMCRollCallTerResult::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCRollCallTerResult.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCRollCallTerResult_DomainInfo >*
CmdMCRollCallTerResult::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCRollCallTerResult.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdSetAssistChairman_IPPORT

// optional uint32 nettype = 1;
inline bool CmdSetAssistChairman_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetAssistChairman_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetAssistChairman_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetAssistChairman_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.IPPORT.nettype)
  return nettype_;
}
inline void CmdSetAssistChairman_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdSetAssistChairman_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetAssistChairman_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetAssistChairman_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetAssistChairman_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdSetAssistChairman_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
  return *ip_;
}
inline void CmdSetAssistChairman_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
}
inline void CmdSetAssistChairman_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
}
inline void CmdSetAssistChairman_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
}
inline ::std::string* CmdSetAssistChairman_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdSetAssistChairman_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetAssistChairman_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetAssistChairman.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdSetAssistChairman_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetAssistChairman_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetAssistChairman_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetAssistChairman_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.IPPORT.port)
  return port_;
}
inline void CmdSetAssistChairman_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdSetAssistChairman_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdSetAssistChairman_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetAssistChairman_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetAssistChairman_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetAssistChairman_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdSetAssistChairman_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdSetAssistChairman.IPPORT ipportinfos = 2;
inline int CmdSetAssistChairman_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdSetAssistChairman_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdSetAssistChairman_IPPORT& CmdSetAssistChairman_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdSetAssistChairman_IPPORT* CmdSetAssistChairman_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdSetAssistChairman_IPPORT* CmdSetAssistChairman_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetAssistChairman.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_IPPORT >&
CmdSetAssistChairman_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetAssistChairman.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_IPPORT >*
CmdSetAssistChairman_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetAssistChairman.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdSetAssistChairman_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetAssistChairman_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetAssistChairman_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetAssistChairman_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.AddrInfo.level)
  return level_;
}
inline void CmdSetAssistChairman_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdSetAssistChairman_DomainInfo

// optional string dname = 1;
inline bool CmdSetAssistChairman_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetAssistChairman_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetAssistChairman_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetAssistChairman_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdSetAssistChairman_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
  return *dname_;
}
inline void CmdSetAssistChairman_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
}
inline void CmdSetAssistChairman_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
}
inline void CmdSetAssistChairman_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
}
inline ::std::string* CmdSetAssistChairman_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdSetAssistChairman_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetAssistChairman_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetAssistChairman.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdSetAssistChairman_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetAssistChairman_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetAssistChairman_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetAssistChairman_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdSetAssistChairman_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdSetAssistChairman

// optional uint32 sponsortype = 1;
inline bool CmdSetAssistChairman::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSetAssistChairman::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSetAssistChairman::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSetAssistChairman::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.sponsortype)
  return sponsortype_;
}
inline void CmdSetAssistChairman::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.sponsortype)
}

// optional uint64 confid = 2;
inline bool CmdSetAssistChairman::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSetAssistChairman::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSetAssistChairman::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSetAssistChairman::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdSetAssistChairman::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.confid)
  return confid_;
}
inline void CmdSetAssistChairman::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.confid)
}

// optional uint32 terid = 3;
inline bool CmdSetAssistChairman::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSetAssistChairman::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSetAssistChairman::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSetAssistChairman::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.terid)
  return terid_;
}
inline void CmdSetAssistChairman::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.terid)
}

// optional uint32 nachterid = 4;
inline bool CmdSetAssistChairman::has_nachterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdSetAssistChairman::set_has_nachterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdSetAssistChairman::clear_has_nachterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdSetAssistChairman::clear_nachterid() {
  nachterid_ = 0u;
  clear_has_nachterid();
}
inline ::google::protobuf::uint32 CmdSetAssistChairman::nachterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.nachterid)
  return nachterid_;
}
inline void CmdSetAssistChairman::set_nachterid(::google::protobuf::uint32 value) {
  set_has_nachterid();
  nachterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.nachterid)
}

// optional string domainname = 5;
inline bool CmdSetAssistChairman::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdSetAssistChairman::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdSetAssistChairman::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdSetAssistChairman::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdSetAssistChairman::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.domainname)
  return *domainname_;
}
inline void CmdSetAssistChairman::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSetAssistChairman.domainname)
}
inline void CmdSetAssistChairman::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSetAssistChairman.domainname)
}
inline void CmdSetAssistChairman::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSetAssistChairman.domainname)
}
inline ::std::string* CmdSetAssistChairman::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.domainname)
  return domainname_;
}
inline ::std::string* CmdSetAssistChairman::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSetAssistChairman::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSetAssistChairman.domainname)
}

// repeated .SRMsgs.CmdSetAssistChairman.AddrInfo svraddrs = 6;
inline int CmdSetAssistChairman::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdSetAssistChairman::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdSetAssistChairman_AddrInfo& CmdSetAssistChairman::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdSetAssistChairman_AddrInfo* CmdSetAssistChairman::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdSetAssistChairman_AddrInfo* CmdSetAssistChairman::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetAssistChairman.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_AddrInfo >&
CmdSetAssistChairman::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetAssistChairman.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_AddrInfo >*
CmdSetAssistChairman::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetAssistChairman.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdSetAssistChairman.DomainInfo domains = 7;
inline int CmdSetAssistChairman::domains_size() const {
  return domains_.size();
}
inline void CmdSetAssistChairman::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdSetAssistChairman_DomainInfo& CmdSetAssistChairman::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSetAssistChairman.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdSetAssistChairman_DomainInfo* CmdSetAssistChairman::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSetAssistChairman.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdSetAssistChairman_DomainInfo* CmdSetAssistChairman::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSetAssistChairman.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_DomainInfo >&
CmdSetAssistChairman::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSetAssistChairman.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSetAssistChairman_DomainInfo >*
CmdSetAssistChairman::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSetAssistChairman.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdTerSelectAssistVideo_IPPORT

// optional uint32 nettype = 1;
inline bool CmdTerSelectAssistVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.IPPORT.nettype)
  return nettype_;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdTerSelectAssistVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdTerSelectAssistVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
  return *ip_;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
}
inline void CmdTerSelectAssistVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
}
inline void CmdTerSelectAssistVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
}
inline ::std::string* CmdTerSelectAssistVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdTerSelectAssistVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerSelectAssistVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerSelectAssistVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdTerSelectAssistVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerSelectAssistVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.IPPORT.port)
  return port_;
}
inline void CmdTerSelectAssistVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdTerSelectAssistVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdTerSelectAssistVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerSelectAssistVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerSelectAssistVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerSelectAssistVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdTerSelectAssistVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdTerSelectAssistVideo.IPPORT ipportinfos = 2;
inline int CmdTerSelectAssistVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdTerSelectAssistVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdTerSelectAssistVideo_IPPORT& CmdTerSelectAssistVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_IPPORT* CmdTerSelectAssistVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_IPPORT* CmdTerSelectAssistVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_IPPORT >&
CmdTerSelectAssistVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_IPPORT >*
CmdTerSelectAssistVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdTerSelectAssistVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerSelectAssistVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerSelectAssistVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerSelectAssistVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.level)
  return level_;
}
inline void CmdTerSelectAssistVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdTerSelectAssistVideo_DomainInfo

// optional string dname = 1;
inline bool CmdTerSelectAssistVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerSelectAssistVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerSelectAssistVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdTerSelectAssistVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
  return *dname_;
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
}
inline ::std::string* CmdTerSelectAssistVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdTerSelectAssistVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdTerSelectAssistVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerSelectAssistVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerSelectAssistVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdTerSelectAssistVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdTerSelectAssistVideo

// optional uint64 confid = 1;
inline bool CmdTerSelectAssistVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdTerSelectAssistVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdTerSelectAssistVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdTerSelectAssistVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.confid)
  return confid_;
}
inline void CmdTerSelectAssistVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.confid)
}

// optional uint32 terid = 2;
inline bool CmdTerSelectAssistVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdTerSelectAssistVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdTerSelectAssistVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.terid)
  return terid_;
}
inline void CmdTerSelectAssistVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.terid)
}

// optional uint32 recvfmt = 3;
inline bool CmdTerSelectAssistVideo::has_recvfmt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_recvfmt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdTerSelectAssistVideo::clear_has_recvfmt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdTerSelectAssistVideo::clear_recvfmt() {
  recvfmt_ = 0u;
  clear_has_recvfmt();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo::recvfmt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.recvfmt)
  return recvfmt_;
}
inline void CmdTerSelectAssistVideo::set_recvfmt(::google::protobuf::uint32 value) {
  set_has_recvfmt();
  recvfmt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.recvfmt)
}

// optional uint32 recvsize = 4;
inline bool CmdTerSelectAssistVideo::has_recvsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_recvsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdTerSelectAssistVideo::clear_has_recvsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdTerSelectAssistVideo::clear_recvsize() {
  recvsize_ = 0u;
  clear_has_recvsize();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo::recvsize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.recvsize)
  return recvsize_;
}
inline void CmdTerSelectAssistVideo::set_recvsize(::google::protobuf::uint32 value) {
  set_has_recvsize();
  recvsize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.recvsize)
}

// optional uint32 selterid = 5;
inline bool CmdTerSelectAssistVideo::has_selterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_selterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdTerSelectAssistVideo::clear_has_selterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdTerSelectAssistVideo::clear_selterid() {
  selterid_ = 0u;
  clear_has_selterid();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo::selterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.selterid)
  return selterid_;
}
inline void CmdTerSelectAssistVideo::set_selterid(::google::protobuf::uint32 value) {
  set_has_selterid();
  selterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.selterid)
}

// optional uint32 screenid = 6;
inline bool CmdTerSelectAssistVideo::has_screenid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_screenid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdTerSelectAssistVideo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdTerSelectAssistVideo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdTerSelectAssistVideo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.screenid)
  return screenid_;
}
inline void CmdTerSelectAssistVideo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.screenid)
}

// optional string domainname = 7;
inline bool CmdTerSelectAssistVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdTerSelectAssistVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdTerSelectAssistVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdTerSelectAssistVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdTerSelectAssistVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.domainname)
  return *domainname_;
}
inline void CmdTerSelectAssistVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdTerSelectAssistVideo.domainname)
}
inline void CmdTerSelectAssistVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdTerSelectAssistVideo.domainname)
}
inline void CmdTerSelectAssistVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdTerSelectAssistVideo.domainname)
}
inline ::std::string* CmdTerSelectAssistVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.domainname)
  return domainname_;
}
inline ::std::string* CmdTerSelectAssistVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdTerSelectAssistVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdTerSelectAssistVideo.domainname)
}

// repeated .SRMsgs.CmdTerSelectAssistVideo.AddrInfo svraddrs = 8;
inline int CmdTerSelectAssistVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdTerSelectAssistVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo& CmdTerSelectAssistVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo* CmdTerSelectAssistVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo* CmdTerSelectAssistVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerSelectAssistVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo >&
CmdTerSelectAssistVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerSelectAssistVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_AddrInfo >*
CmdTerSelectAssistVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerSelectAssistVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdTerSelectAssistVideo.DomainInfo domains = 9;
inline int CmdTerSelectAssistVideo::domains_size() const {
  return domains_.size();
}
inline void CmdTerSelectAssistVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo& CmdTerSelectAssistVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdTerSelectAssistVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo* CmdTerSelectAssistVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdTerSelectAssistVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo* CmdTerSelectAssistVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdTerSelectAssistVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo >&
CmdTerSelectAssistVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdTerSelectAssistVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdTerSelectAssistVideo_DomainInfo >*
CmdTerSelectAssistVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdTerSelectAssistVideo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdSendAssistVideolabel_IPPORT

// optional uint32 nettype = 1;
inline bool CmdSendAssistVideolabel_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSendAssistVideolabel_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.IPPORT.nettype)
  return nettype_;
}
inline void CmdSendAssistVideolabel_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdSendAssistVideolabel_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSendAssistVideolabel_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdSendAssistVideolabel_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
  return *ip_;
}
inline void CmdSendAssistVideolabel_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
}
inline void CmdSendAssistVideolabel_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
}
inline void CmdSendAssistVideolabel_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
}
inline ::std::string* CmdSendAssistVideolabel_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdSendAssistVideolabel_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSendAssistVideolabel_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSendAssistVideolabel.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdSendAssistVideolabel_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSendAssistVideolabel_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSendAssistVideolabel_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.IPPORT.port)
  return port_;
}
inline void CmdSendAssistVideolabel_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdSendAssistVideolabel_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdSendAssistVideolabel_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSendAssistVideolabel_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSendAssistVideolabel_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSendAssistVideolabel_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdSendAssistVideolabel_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdSendAssistVideolabel.IPPORT ipportinfos = 2;
inline int CmdSendAssistVideolabel_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdSendAssistVideolabel_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdSendAssistVideolabel_IPPORT& CmdSendAssistVideolabel_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_IPPORT* CmdSendAssistVideolabel_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_IPPORT* CmdSendAssistVideolabel_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_IPPORT >&
CmdSendAssistVideolabel_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_IPPORT >*
CmdSendAssistVideolabel_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSendAssistVideolabel.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdSendAssistVideolabel_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSendAssistVideolabel_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSendAssistVideolabel_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSendAssistVideolabel_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.AddrInfo.level)
  return level_;
}
inline void CmdSendAssistVideolabel_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdSendAssistVideolabel_DomainInfo

// optional string dname = 1;
inline bool CmdSendAssistVideolabel_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSendAssistVideolabel_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSendAssistVideolabel_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSendAssistVideolabel_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdSendAssistVideolabel_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
  return *dname_;
}
inline void CmdSendAssistVideolabel_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
}
inline void CmdSendAssistVideolabel_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
}
inline void CmdSendAssistVideolabel_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
}
inline ::std::string* CmdSendAssistVideolabel_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdSendAssistVideolabel_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSendAssistVideolabel_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdSendAssistVideolabel_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSendAssistVideolabel_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSendAssistVideolabel_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSendAssistVideolabel_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdSendAssistVideolabel_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdSendAssistVideolabel

// optional uint64 confid = 1;
inline bool CmdSendAssistVideolabel::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdSendAssistVideolabel::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdSendAssistVideolabel::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdSendAssistVideolabel::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.confid)
  return confid_;
}
inline void CmdSendAssistVideolabel::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.confid)
}

// optional uint32 terid = 2;
inline bool CmdSendAssistVideolabel::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdSendAssistVideolabel::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdSendAssistVideolabel::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.terid)
  return terid_;
}
inline void CmdSendAssistVideolabel::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.terid)
}

// optional uint32 operatetype = 3;
inline bool CmdSendAssistVideolabel::has_operatetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_operatetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdSendAssistVideolabel::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdSendAssistVideolabel::clear_operatetype() {
  operatetype_ = 0u;
  clear_has_operatetype();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::operatetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.operatetype)
  return operatetype_;
}
inline void CmdSendAssistVideolabel::set_operatetype(::google::protobuf::uint32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.operatetype)
}

// optional uint32 labletype = 4;
inline bool CmdSendAssistVideolabel::has_labletype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_labletype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdSendAssistVideolabel::clear_has_labletype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdSendAssistVideolabel::clear_labletype() {
  labletype_ = 0u;
  clear_has_labletype();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::labletype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.labletype)
  return labletype_;
}
inline void CmdSendAssistVideolabel::set_labletype(::google::protobuf::uint32 value) {
  set_has_labletype();
  labletype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.labletype)
}

// optional uint32 lablesize = 5;
inline bool CmdSendAssistVideolabel::has_lablesize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_lablesize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdSendAssistVideolabel::clear_has_lablesize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdSendAssistVideolabel::clear_lablesize() {
  lablesize_ = 0u;
  clear_has_lablesize();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::lablesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.lablesize)
  return lablesize_;
}
inline void CmdSendAssistVideolabel::set_lablesize(::google::protobuf::uint32 value) {
  set_has_lablesize();
  lablesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.lablesize)
}

// optional uint32 lablecolor = 6;
inline bool CmdSendAssistVideolabel::has_lablecolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_lablecolor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdSendAssistVideolabel::clear_has_lablecolor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdSendAssistVideolabel::clear_lablecolor() {
  lablecolor_ = 0u;
  clear_has_lablecolor();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::lablecolor() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.lablecolor)
  return lablecolor_;
}
inline void CmdSendAssistVideolabel::set_lablecolor(::google::protobuf::uint32 value) {
  set_has_lablecolor();
  lablecolor_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.lablecolor)
}

// optional uint32 linetype = 7;
inline bool CmdSendAssistVideolabel::has_linetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_linetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdSendAssistVideolabel::clear_has_linetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdSendAssistVideolabel::clear_linetype() {
  linetype_ = 0u;
  clear_has_linetype();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::linetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.linetype)
  return linetype_;
}
inline void CmdSendAssistVideolabel::set_linetype(::google::protobuf::uint32 value) {
  set_has_linetype();
  linetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.linetype)
}

// optional uint32 leftuppoints_x = 8;
inline bool CmdSendAssistVideolabel::has_leftuppoints_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_leftuppoints_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdSendAssistVideolabel::clear_has_leftuppoints_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdSendAssistVideolabel::clear_leftuppoints_x() {
  leftuppoints_x_ = 0u;
  clear_has_leftuppoints_x();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::leftuppoints_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.leftuppoints_x)
  return leftuppoints_x_;
}
inline void CmdSendAssistVideolabel::set_leftuppoints_x(::google::protobuf::uint32 value) {
  set_has_leftuppoints_x();
  leftuppoints_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.leftuppoints_x)
}

// optional uint32 leftuppoints_y = 9;
inline bool CmdSendAssistVideolabel::has_leftuppoints_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_leftuppoints_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdSendAssistVideolabel::clear_has_leftuppoints_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdSendAssistVideolabel::clear_leftuppoints_y() {
  leftuppoints_y_ = 0u;
  clear_has_leftuppoints_y();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::leftuppoints_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.leftuppoints_y)
  return leftuppoints_y_;
}
inline void CmdSendAssistVideolabel::set_leftuppoints_y(::google::protobuf::uint32 value) {
  set_has_leftuppoints_y();
  leftuppoints_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.leftuppoints_y)
}

// optional uint32 rightdownpoints_x = 10;
inline bool CmdSendAssistVideolabel::has_rightdownpoints_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_rightdownpoints_x() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdSendAssistVideolabel::clear_has_rightdownpoints_x() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdSendAssistVideolabel::clear_rightdownpoints_x() {
  rightdownpoints_x_ = 0u;
  clear_has_rightdownpoints_x();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::rightdownpoints_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.rightdownpoints_x)
  return rightdownpoints_x_;
}
inline void CmdSendAssistVideolabel::set_rightdownpoints_x(::google::protobuf::uint32 value) {
  set_has_rightdownpoints_x();
  rightdownpoints_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.rightdownpoints_x)
}

// optional uint32 rightdownpoints_y = 11;
inline bool CmdSendAssistVideolabel::has_rightdownpoints_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_rightdownpoints_y() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CmdSendAssistVideolabel::clear_has_rightdownpoints_y() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CmdSendAssistVideolabel::clear_rightdownpoints_y() {
  rightdownpoints_y_ = 0u;
  clear_has_rightdownpoints_y();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::rightdownpoints_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.rightdownpoints_y)
  return rightdownpoints_y_;
}
inline void CmdSendAssistVideolabel::set_rightdownpoints_y(::google::protobuf::uint32 value) {
  set_has_rightdownpoints_y();
  rightdownpoints_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.rightdownpoints_y)
}

// optional uint32 resolution_x = 12;
inline bool CmdSendAssistVideolabel::has_resolution_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_resolution_x() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CmdSendAssistVideolabel::clear_has_resolution_x() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CmdSendAssistVideolabel::clear_resolution_x() {
  resolution_x_ = 0u;
  clear_has_resolution_x();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::resolution_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.resolution_x)
  return resolution_x_;
}
inline void CmdSendAssistVideolabel::set_resolution_x(::google::protobuf::uint32 value) {
  set_has_resolution_x();
  resolution_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.resolution_x)
}

// optional uint32 resolution_y = 13;
inline bool CmdSendAssistVideolabel::has_resolution_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_resolution_y() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CmdSendAssistVideolabel::clear_has_resolution_y() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CmdSendAssistVideolabel::clear_resolution_y() {
  resolution_y_ = 0u;
  clear_has_resolution_y();
}
inline ::google::protobuf::uint32 CmdSendAssistVideolabel::resolution_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.resolution_y)
  return resolution_y_;
}
inline void CmdSendAssistVideolabel::set_resolution_y(::google::protobuf::uint32 value) {
  set_has_resolution_y();
  resolution_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.resolution_y)
}

// optional string domainname = 14;
inline bool CmdSendAssistVideolabel::has_domainname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CmdSendAssistVideolabel::set_has_domainname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CmdSendAssistVideolabel::clear_has_domainname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CmdSendAssistVideolabel::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdSendAssistVideolabel::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.domainname)
  return *domainname_;
}
inline void CmdSendAssistVideolabel::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdSendAssistVideolabel.domainname)
}
inline void CmdSendAssistVideolabel::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdSendAssistVideolabel.domainname)
}
inline void CmdSendAssistVideolabel::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdSendAssistVideolabel.domainname)
}
inline ::std::string* CmdSendAssistVideolabel::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.domainname)
  return domainname_;
}
inline ::std::string* CmdSendAssistVideolabel::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdSendAssistVideolabel::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdSendAssistVideolabel.domainname)
}

// repeated .SRMsgs.CmdSendAssistVideolabel.AddrInfo svraddrs = 15;
inline int CmdSendAssistVideolabel::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdSendAssistVideolabel::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdSendAssistVideolabel_AddrInfo& CmdSendAssistVideolabel::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_AddrInfo* CmdSendAssistVideolabel::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_AddrInfo* CmdSendAssistVideolabel::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSendAssistVideolabel.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_AddrInfo >&
CmdSendAssistVideolabel::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSendAssistVideolabel.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_AddrInfo >*
CmdSendAssistVideolabel::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSendAssistVideolabel.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdSendAssistVideolabel.DomainInfo domains = 16;
inline int CmdSendAssistVideolabel::domains_size() const {
  return domains_.size();
}
inline void CmdSendAssistVideolabel::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdSendAssistVideolabel_DomainInfo& CmdSendAssistVideolabel::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdSendAssistVideolabel.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_DomainInfo* CmdSendAssistVideolabel::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdSendAssistVideolabel.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdSendAssistVideolabel_DomainInfo* CmdSendAssistVideolabel::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdSendAssistVideolabel.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_DomainInfo >&
CmdSendAssistVideolabel::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdSendAssistVideolabel.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdSendAssistVideolabel_DomainInfo >*
CmdSendAssistVideolabel::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdSendAssistVideolabel.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCSetAnaly_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCSetAnaly_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetAnaly_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetAnaly_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetAnaly_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCSetAnaly_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCSetAnaly_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetAnaly_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetAnaly_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetAnaly_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCSetAnaly_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
  return *ip_;
}
inline void CmdMCSetAnaly_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
}
inline void CmdMCSetAnaly_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
}
inline void CmdMCSetAnaly_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
}
inline ::std::string* CmdMCSetAnaly_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCSetAnaly_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetAnaly_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetAnaly.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCSetAnaly_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetAnaly_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetAnaly_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetAnaly_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.IPPORT.port)
  return port_;
}
inline void CmdMCSetAnaly_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCSetAnaly_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCSetAnaly_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetAnaly_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetAnaly_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetAnaly_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCSetAnaly_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCSetAnaly.IPPORT ipportinfos = 2;
inline int CmdMCSetAnaly_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCSetAnaly_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCSetAnaly_IPPORT& CmdMCSetAnaly_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCSetAnaly_IPPORT* CmdMCSetAnaly_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetAnaly_IPPORT* CmdMCSetAnaly_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_IPPORT >&
CmdMCSetAnaly_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetAnaly.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_IPPORT >*
CmdMCSetAnaly_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetAnaly.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCSetAnaly_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetAnaly_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetAnaly_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetAnaly_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.AddrInfo.level)
  return level_;
}
inline void CmdMCSetAnaly_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCSetAnaly_DomainInfo

// optional string dname = 1;
inline bool CmdMCSetAnaly_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetAnaly_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetAnaly_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetAnaly_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCSetAnaly_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCSetAnaly_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
}
inline void CmdMCSetAnaly_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
}
inline void CmdMCSetAnaly_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
}
inline ::std::string* CmdMCSetAnaly_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCSetAnaly_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetAnaly_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetAnaly.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCSetAnaly_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetAnaly_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetAnaly_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetAnaly_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCSetAnaly_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCSetAnaly

// optional uint64 confid = 1;
inline bool CmdMCSetAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCSetAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCSetAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCSetAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCSetAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.confid)
  return confid_;
}
inline void CmdMCSetAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCSetAnaly::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCSetAnaly::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCSetAnaly::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCSetAnaly::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.terid)
  return terid_;
}
inline void CmdMCSetAnaly::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCSetAnaly::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCSetAnaly::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCSetAnaly::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCSetAnaly::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.sponsortype)
  return sponsortype_;
}
inline void CmdMCSetAnaly::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.sponsortype)
}

// optional bool isstart = 4;
inline bool CmdMCSetAnaly::has_isstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCSetAnaly::set_has_isstart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCSetAnaly::clear_has_isstart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCSetAnaly::clear_isstart() {
  isstart_ = false;
  clear_has_isstart();
}
inline bool CmdMCSetAnaly::isstart() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.isstart)
  return isstart_;
}
inline void CmdMCSetAnaly::set_isstart(bool value) {
  set_has_isstart();
  isstart_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.isstart)
}

// optional uint32 analymode = 5;
inline bool CmdMCSetAnaly::has_analymode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCSetAnaly::set_has_analymode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCSetAnaly::clear_has_analymode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCSetAnaly::clear_analymode() {
  analymode_ = 0u;
  clear_has_analymode();
}
inline ::google::protobuf::uint32 CmdMCSetAnaly::analymode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.analymode)
  return analymode_;
}
inline void CmdMCSetAnaly::set_analymode(::google::protobuf::uint32 value) {
  set_has_analymode();
  analymode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.analymode)
}

// optional string domainname = 6;
inline bool CmdMCSetAnaly::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdMCSetAnaly::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdMCSetAnaly::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdMCSetAnaly::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCSetAnaly::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.domainname)
  return *domainname_;
}
inline void CmdMCSetAnaly::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCSetAnaly.domainname)
}
inline void CmdMCSetAnaly::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCSetAnaly.domainname)
}
inline void CmdMCSetAnaly::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCSetAnaly.domainname)
}
inline ::std::string* CmdMCSetAnaly::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.domainname)
  return domainname_;
}
inline ::std::string* CmdMCSetAnaly::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCSetAnaly::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCSetAnaly.domainname)
}

// repeated .SRMsgs.CmdMCSetAnaly.AddrInfo svraddrs = 7;
inline int CmdMCSetAnaly::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCSetAnaly::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCSetAnaly_AddrInfo& CmdMCSetAnaly::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCSetAnaly_AddrInfo* CmdMCSetAnaly::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetAnaly_AddrInfo* CmdMCSetAnaly::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetAnaly.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_AddrInfo >&
CmdMCSetAnaly::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetAnaly.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_AddrInfo >*
CmdMCSetAnaly::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetAnaly.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCSetAnaly.DomainInfo domains = 8;
inline int CmdMCSetAnaly::domains_size() const {
  return domains_.size();
}
inline void CmdMCSetAnaly::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCSetAnaly_DomainInfo& CmdMCSetAnaly::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCSetAnaly.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCSetAnaly_DomainInfo* CmdMCSetAnaly::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCSetAnaly.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCSetAnaly_DomainInfo* CmdMCSetAnaly::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCSetAnaly.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_DomainInfo >&
CmdMCSetAnaly::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCSetAnaly.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCSetAnaly_DomainInfo >*
CmdMCSetAnaly::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCSetAnaly.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCStartAnaly_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCStartAnaly_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStartAnaly_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStartAnaly_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStartAnaly_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCStartAnaly_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCStartAnaly_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStartAnaly_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStartAnaly_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStartAnaly_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCStartAnaly_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
  return *ip_;
}
inline void CmdMCStartAnaly_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
}
inline void CmdMCStartAnaly_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
}
inline void CmdMCStartAnaly_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
}
inline ::std::string* CmdMCStartAnaly_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCStartAnaly_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStartAnaly_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStartAnaly.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCStartAnaly_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStartAnaly_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStartAnaly_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStartAnaly_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.IPPORT.port)
  return port_;
}
inline void CmdMCStartAnaly_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCStartAnaly_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCStartAnaly_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStartAnaly_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStartAnaly_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStartAnaly_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCStartAnaly_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCStartAnaly.IPPORT ipportinfos = 2;
inline int CmdMCStartAnaly_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCStartAnaly_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCStartAnaly_IPPORT& CmdMCStartAnaly_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCStartAnaly_IPPORT* CmdMCStartAnaly_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCStartAnaly_IPPORT* CmdMCStartAnaly_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStartAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_IPPORT >&
CmdMCStartAnaly_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStartAnaly.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_IPPORT >*
CmdMCStartAnaly_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStartAnaly.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCStartAnaly_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStartAnaly_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStartAnaly_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStartAnaly_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AddrInfo.level)
  return level_;
}
inline void CmdMCStartAnaly_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCStartAnaly_DomainInfo

// optional string dname = 1;
inline bool CmdMCStartAnaly_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStartAnaly_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStartAnaly_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStartAnaly_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCStartAnaly_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCStartAnaly_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
}
inline void CmdMCStartAnaly_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
}
inline void CmdMCStartAnaly_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
}
inline ::std::string* CmdMCStartAnaly_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCStartAnaly_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStartAnaly_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStartAnaly.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCStartAnaly_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStartAnaly_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStartAnaly_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStartAnaly_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCStartAnaly_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCStartAnaly_AnalyInfo

// optional uint32 terid = 1;
inline bool CmdMCStartAnaly_AnalyInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStartAnaly_AnalyInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AnalyInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.terid)
  return terid_;
}
inline void CmdMCStartAnaly_AnalyInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.terid)
}

// optional uint32 screenid = 2;
inline bool CmdMCStartAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStartAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdMCStartAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.screenid)
}

// repeated uint32 userids = 3;
inline int CmdMCStartAnaly_AnalyInfo::userids_size() const {
  return userids_.size();
}
inline void CmdMCStartAnaly_AnalyInfo::clear_userids() {
  userids_.Clear();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AnalyInfo::userids(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.userids)
  return userids_.Get(index);
}
inline void CmdMCStartAnaly_AnalyInfo::set_userids(int index, ::google::protobuf::uint32 value) {
  userids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.userids)
}
inline void CmdMCStartAnaly_AnalyInfo::add_userids(::google::protobuf::uint32 value) {
  userids_.Add(value);
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStartAnaly.AnalyInfo.userids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CmdMCStartAnaly_AnalyInfo::userids() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStartAnaly.AnalyInfo.userids)
  return userids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CmdMCStartAnaly_AnalyInfo::mutable_userids() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStartAnaly.AnalyInfo.userids)
  return &userids_;
}

// optional bool isdispmnum = 4;
inline bool CmdMCStartAnaly_AnalyInfo::has_isdispmnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCStartAnaly_AnalyInfo::set_has_isdispmnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_has_isdispmnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_isdispmnum() {
  isdispmnum_ = false;
  clear_has_isdispmnum();
}
inline bool CmdMCStartAnaly_AnalyInfo::isdispmnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.isdispmnum)
  return isdispmnum_;
}
inline void CmdMCStartAnaly_AnalyInfo::set_isdispmnum(bool value) {
  set_has_isdispmnum();
  isdispmnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.isdispmnum)
}

// optional bool isdispmname = 5;
inline bool CmdMCStartAnaly_AnalyInfo::has_isdispmname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCStartAnaly_AnalyInfo::set_has_isdispmname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_has_isdispmname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_isdispmname() {
  isdispmname_ = false;
  clear_has_isdispmname();
}
inline bool CmdMCStartAnaly_AnalyInfo::isdispmname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.isdispmname)
  return isdispmname_;
}
inline void CmdMCStartAnaly_AnalyInfo::set_isdispmname(bool value) {
  set_has_isdispmname();
  isdispmname_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.isdispmname)
}

// optional uint32 vaschannelid = 6;
inline bool CmdMCStartAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdMCStartAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdMCStartAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdMCStartAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.AnalyInfo.vaschannelid)
}

// -------------------------------------------------------------------

// CmdMCStartAnaly

// optional uint64 confid = 1;
inline bool CmdMCStartAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStartAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStartAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStartAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCStartAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.confid)
  return confid_;
}
inline void CmdMCStartAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCStartAnaly::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStartAnaly::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStartAnaly::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStartAnaly::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.terid)
  return terid_;
}
inline void CmdMCStartAnaly::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCStartAnaly::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStartAnaly::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStartAnaly::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStartAnaly::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCStartAnaly::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.sponsortype)
  return sponsortype_;
}
inline void CmdMCStartAnaly::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.sponsortype)
}

// repeated .SRMsgs.CmdMCStartAnaly.AnalyInfo startanalyinfos = 4;
inline int CmdMCStartAnaly::startanalyinfos_size() const {
  return startanalyinfos_.size();
}
inline void CmdMCStartAnaly::clear_startanalyinfos() {
  startanalyinfos_.Clear();
}
inline const ::SRMsgs::CmdMCStartAnaly_AnalyInfo& CmdMCStartAnaly::startanalyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.startanalyinfos)
  return startanalyinfos_.Get(index);
}
inline ::SRMsgs::CmdMCStartAnaly_AnalyInfo* CmdMCStartAnaly::mutable_startanalyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.startanalyinfos)
  return startanalyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCStartAnaly_AnalyInfo* CmdMCStartAnaly::add_startanalyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStartAnaly.startanalyinfos)
  return startanalyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AnalyInfo >&
CmdMCStartAnaly::startanalyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStartAnaly.startanalyinfos)
  return startanalyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AnalyInfo >*
CmdMCStartAnaly::mutable_startanalyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStartAnaly.startanalyinfos)
  return &startanalyinfos_;
}

// optional string domainname = 5;
inline bool CmdMCStartAnaly::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCStartAnaly::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCStartAnaly::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCStartAnaly::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCStartAnaly::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.domainname)
  return *domainname_;
}
inline void CmdMCStartAnaly::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStartAnaly.domainname)
}
inline void CmdMCStartAnaly::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStartAnaly.domainname)
}
inline void CmdMCStartAnaly::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStartAnaly.domainname)
}
inline ::std::string* CmdMCStartAnaly::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.domainname)
  return domainname_;
}
inline ::std::string* CmdMCStartAnaly::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStartAnaly::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStartAnaly.domainname)
}

// repeated .SRMsgs.CmdMCStartAnaly.AddrInfo svraddrs = 6;
inline int CmdMCStartAnaly::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCStartAnaly::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCStartAnaly_AddrInfo& CmdMCStartAnaly::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCStartAnaly_AddrInfo* CmdMCStartAnaly::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCStartAnaly_AddrInfo* CmdMCStartAnaly::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStartAnaly.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AddrInfo >&
CmdMCStartAnaly::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStartAnaly.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_AddrInfo >*
CmdMCStartAnaly::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStartAnaly.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCStartAnaly.DomainInfo domains = 7;
inline int CmdMCStartAnaly::domains_size() const {
  return domains_.size();
}
inline void CmdMCStartAnaly::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCStartAnaly_DomainInfo& CmdMCStartAnaly::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStartAnaly.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCStartAnaly_DomainInfo* CmdMCStartAnaly::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStartAnaly.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCStartAnaly_DomainInfo* CmdMCStartAnaly::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStartAnaly.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_DomainInfo >&
CmdMCStartAnaly::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStartAnaly.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStartAnaly_DomainInfo >*
CmdMCStartAnaly::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStartAnaly.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCStopAnaly_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCStopAnaly_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStopAnaly_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStopAnaly_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStopAnaly_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCStopAnaly_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCStopAnaly_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStopAnaly_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStopAnaly_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStopAnaly_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCStopAnaly_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
  return *ip_;
}
inline void CmdMCStopAnaly_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
}
inline void CmdMCStopAnaly_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
}
inline void CmdMCStopAnaly_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
}
inline ::std::string* CmdMCStopAnaly_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCStopAnaly_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStopAnaly_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStopAnaly.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCStopAnaly_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStopAnaly_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStopAnaly_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStopAnaly_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.IPPORT.port)
  return port_;
}
inline void CmdMCStopAnaly_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCStopAnaly_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCStopAnaly_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStopAnaly_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStopAnaly_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStopAnaly_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCStopAnaly_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCStopAnaly.IPPORT ipportinfos = 2;
inline int CmdMCStopAnaly_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCStopAnaly_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCStopAnaly_IPPORT& CmdMCStopAnaly_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCStopAnaly_IPPORT* CmdMCStopAnaly_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCStopAnaly_IPPORT* CmdMCStopAnaly_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStopAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_IPPORT >&
CmdMCStopAnaly_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStopAnaly.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_IPPORT >*
CmdMCStopAnaly_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStopAnaly.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCStopAnaly_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStopAnaly_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStopAnaly_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStopAnaly_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AddrInfo.level)
  return level_;
}
inline void CmdMCStopAnaly_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCStopAnaly_DomainInfo

// optional string dname = 1;
inline bool CmdMCStopAnaly_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStopAnaly_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStopAnaly_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStopAnaly_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCStopAnaly_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCStopAnaly_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
}
inline void CmdMCStopAnaly_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
}
inline void CmdMCStopAnaly_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
}
inline ::std::string* CmdMCStopAnaly_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCStopAnaly_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStopAnaly_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStopAnaly.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCStopAnaly_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStopAnaly_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStopAnaly_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStopAnaly_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCStopAnaly_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCStopAnaly_AnalyInfo

// optional uint32 terid = 1;
inline bool CmdMCStopAnaly_AnalyInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStopAnaly_AnalyInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_AnalyInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AnalyInfo.terid)
  return terid_;
}
inline void CmdMCStopAnaly_AnalyInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.AnalyInfo.terid)
}

// optional uint32 screenid = 2;
inline bool CmdMCStopAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStopAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdMCStopAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool CmdMCStopAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStopAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStopAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdMCStopAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.AnalyInfo.vaschannelid)
}

// -------------------------------------------------------------------

// CmdMCStopAnaly

// optional uint64 confid = 1;
inline bool CmdMCStopAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCStopAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCStopAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCStopAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCStopAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.confid)
  return confid_;
}
inline void CmdMCStopAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCStopAnaly::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCStopAnaly::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCStopAnaly::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCStopAnaly::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.terid)
  return terid_;
}
inline void CmdMCStopAnaly::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCStopAnaly::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCStopAnaly::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCStopAnaly::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCStopAnaly::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCStopAnaly::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.sponsortype)
  return sponsortype_;
}
inline void CmdMCStopAnaly::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.sponsortype)
}

// repeated .SRMsgs.CmdMCStopAnaly.AnalyInfo stopanalyinfos = 4;
inline int CmdMCStopAnaly::stopanalyinfos_size() const {
  return stopanalyinfos_.size();
}
inline void CmdMCStopAnaly::clear_stopanalyinfos() {
  stopanalyinfos_.Clear();
}
inline const ::SRMsgs::CmdMCStopAnaly_AnalyInfo& CmdMCStopAnaly::stopanalyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.stopanalyinfos)
  return stopanalyinfos_.Get(index);
}
inline ::SRMsgs::CmdMCStopAnaly_AnalyInfo* CmdMCStopAnaly::mutable_stopanalyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.stopanalyinfos)
  return stopanalyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCStopAnaly_AnalyInfo* CmdMCStopAnaly::add_stopanalyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStopAnaly.stopanalyinfos)
  return stopanalyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AnalyInfo >&
CmdMCStopAnaly::stopanalyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStopAnaly.stopanalyinfos)
  return stopanalyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AnalyInfo >*
CmdMCStopAnaly::mutable_stopanalyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStopAnaly.stopanalyinfos)
  return &stopanalyinfos_;
}

// optional string domainname = 5;
inline bool CmdMCStopAnaly::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCStopAnaly::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCStopAnaly::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCStopAnaly::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCStopAnaly::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.domainname)
  return *domainname_;
}
inline void CmdMCStopAnaly::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCStopAnaly.domainname)
}
inline void CmdMCStopAnaly::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCStopAnaly.domainname)
}
inline void CmdMCStopAnaly::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCStopAnaly.domainname)
}
inline ::std::string* CmdMCStopAnaly::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.domainname)
  return domainname_;
}
inline ::std::string* CmdMCStopAnaly::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCStopAnaly::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCStopAnaly.domainname)
}

// repeated .SRMsgs.CmdMCStopAnaly.AddrInfo svraddrs = 6;
inline int CmdMCStopAnaly::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCStopAnaly::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCStopAnaly_AddrInfo& CmdMCStopAnaly::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCStopAnaly_AddrInfo* CmdMCStopAnaly::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCStopAnaly_AddrInfo* CmdMCStopAnaly::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStopAnaly.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AddrInfo >&
CmdMCStopAnaly::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStopAnaly.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_AddrInfo >*
CmdMCStopAnaly::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStopAnaly.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCStopAnaly.DomainInfo domains = 7;
inline int CmdMCStopAnaly::domains_size() const {
  return domains_.size();
}
inline void CmdMCStopAnaly::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCStopAnaly_DomainInfo& CmdMCStopAnaly::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCStopAnaly.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCStopAnaly_DomainInfo* CmdMCStopAnaly::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCStopAnaly.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCStopAnaly_DomainInfo* CmdMCStopAnaly::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCStopAnaly.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_DomainInfo >&
CmdMCStopAnaly::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCStopAnaly.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCStopAnaly_DomainInfo >*
CmdMCStopAnaly::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCStopAnaly.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCUpdateAnaly_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCUpdateAnaly_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAnaly_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCUpdateAnaly_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCUpdateAnaly_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAnaly_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCUpdateAnaly_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
  return *ip_;
}
inline void CmdMCUpdateAnaly_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
}
inline void CmdMCUpdateAnaly_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
}
inline void CmdMCUpdateAnaly_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
}
inline ::std::string* CmdMCUpdateAnaly_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCUpdateAnaly_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAnaly_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAnaly.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCUpdateAnaly_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAnaly_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAnaly_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.IPPORT.port)
  return port_;
}
inline void CmdMCUpdateAnaly_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCUpdateAnaly_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCUpdateAnaly_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAnaly_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAnaly_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAnaly_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCUpdateAnaly_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCUpdateAnaly.IPPORT ipportinfos = 2;
inline int CmdMCUpdateAnaly_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCUpdateAnaly_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAnaly_IPPORT& CmdMCUpdateAnaly_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_IPPORT* CmdMCUpdateAnaly_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_IPPORT* CmdMCUpdateAnaly_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAnaly.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_IPPORT >&
CmdMCUpdateAnaly_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAnaly.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_IPPORT >*
CmdMCUpdateAnaly_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAnaly.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCUpdateAnaly_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAnaly_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAnaly_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAnaly_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AddrInfo.level)
  return level_;
}
inline void CmdMCUpdateAnaly_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCUpdateAnaly_DomainInfo

// optional string dname = 1;
inline bool CmdMCUpdateAnaly_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAnaly_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAnaly_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAnaly_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCUpdateAnaly_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCUpdateAnaly_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
}
inline void CmdMCUpdateAnaly_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
}
inline void CmdMCUpdateAnaly_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
}
inline ::std::string* CmdMCUpdateAnaly_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCUpdateAnaly_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAnaly_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCUpdateAnaly_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAnaly_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAnaly_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAnaly_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCUpdateAnaly_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCUpdateAnaly_AnalyInfo

// optional uint32 terid = 1;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AnalyInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.terid)
  return terid_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.terid)
}

// optional uint32 screenid = 2;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.screenid)
}

// optional uint32 newuserids = 3;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_newuserids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_newuserids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_newuserids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_newuserids() {
  newuserids_ = 0u;
  clear_has_newuserids();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AnalyInfo::newuserids() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.newuserids)
  return newuserids_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_newuserids(::google::protobuf::uint32 value) {
  set_has_newuserids();
  newuserids_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.newuserids)
}

// optional bool isdispmnum = 4;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_isdispmnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_isdispmnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_isdispmnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_isdispmnum() {
  isdispmnum_ = false;
  clear_has_isdispmnum();
}
inline bool CmdMCUpdateAnaly_AnalyInfo::isdispmnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.isdispmnum)
  return isdispmnum_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_isdispmnum(bool value) {
  set_has_isdispmnum();
  isdispmnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.isdispmnum)
}

// optional bool isdispmname = 5;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_isdispmname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_isdispmname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_isdispmname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_isdispmname() {
  isdispmname_ = false;
  clear_has_isdispmname();
}
inline bool CmdMCUpdateAnaly_AnalyInfo::isdispmname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.isdispmname)
  return isdispmname_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_isdispmname(bool value) {
  set_has_isdispmname();
  isdispmname_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.isdispmname)
}

// optional uint32 vaschannelid = 6;
inline bool CmdMCUpdateAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdMCUpdateAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdMCUpdateAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.AnalyInfo.vaschannelid)
}

// -------------------------------------------------------------------

// CmdMCUpdateAnaly

// optional uint64 confid = 1;
inline bool CmdMCUpdateAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCUpdateAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.confid)
  return confid_;
}
inline void CmdMCUpdateAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCUpdateAnaly::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAnaly::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAnaly::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAnaly::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.terid)
  return terid_;
}
inline void CmdMCUpdateAnaly::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCUpdateAnaly::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAnaly::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAnaly::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAnaly::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAnaly::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.sponsortype)
  return sponsortype_;
}
inline void CmdMCUpdateAnaly::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.sponsortype)
}

// repeated .SRMsgs.CmdMCUpdateAnaly.AnalyInfo updateanalyinfos = 4;
inline int CmdMCUpdateAnaly::updateanalyinfos_size() const {
  return updateanalyinfos_.size();
}
inline void CmdMCUpdateAnaly::clear_updateanalyinfos() {
  updateanalyinfos_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo& CmdMCUpdateAnaly::updateanalyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.updateanalyinfos)
  return updateanalyinfos_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo* CmdMCUpdateAnaly::mutable_updateanalyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.updateanalyinfos)
  return updateanalyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo* CmdMCUpdateAnaly::add_updateanalyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAnaly.updateanalyinfos)
  return updateanalyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo >&
CmdMCUpdateAnaly::updateanalyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAnaly.updateanalyinfos)
  return updateanalyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AnalyInfo >*
CmdMCUpdateAnaly::mutable_updateanalyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAnaly.updateanalyinfos)
  return &updateanalyinfos_;
}

// optional string domainname = 5;
inline bool CmdMCUpdateAnaly::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCUpdateAnaly::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCUpdateAnaly::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCUpdateAnaly::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCUpdateAnaly::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.domainname)
  return *domainname_;
}
inline void CmdMCUpdateAnaly::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAnaly.domainname)
}
inline void CmdMCUpdateAnaly::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAnaly.domainname)
}
inline void CmdMCUpdateAnaly::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAnaly.domainname)
}
inline ::std::string* CmdMCUpdateAnaly::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.domainname)
  return domainname_;
}
inline ::std::string* CmdMCUpdateAnaly::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAnaly::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAnaly.domainname)
}

// repeated .SRMsgs.CmdMCUpdateAnaly.AddrInfo svraddrs = 6;
inline int CmdMCUpdateAnaly::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCUpdateAnaly::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAnaly_AddrInfo& CmdMCUpdateAnaly::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_AddrInfo* CmdMCUpdateAnaly::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_AddrInfo* CmdMCUpdateAnaly::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAnaly.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AddrInfo >&
CmdMCUpdateAnaly::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAnaly.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_AddrInfo >*
CmdMCUpdateAnaly::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAnaly.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCUpdateAnaly.DomainInfo domains = 7;
inline int CmdMCUpdateAnaly::domains_size() const {
  return domains_.size();
}
inline void CmdMCUpdateAnaly::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAnaly_DomainInfo& CmdMCUpdateAnaly::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAnaly.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_DomainInfo* CmdMCUpdateAnaly::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAnaly.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAnaly_DomainInfo* CmdMCUpdateAnaly::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAnaly.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_DomainInfo >&
CmdMCUpdateAnaly::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAnaly.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAnaly_DomainInfo >*
CmdMCUpdateAnaly::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAnaly.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdChangeVideoSourceName_IPPORT

// optional uint32 nettype = 1;
inline bool CmdChangeVideoSourceName_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourceName_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.IPPORT.nettype)
  return nettype_;
}
inline void CmdChangeVideoSourceName_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdChangeVideoSourceName_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourceName_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdChangeVideoSourceName_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
  return *ip_;
}
inline void CmdChangeVideoSourceName_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
}
inline void CmdChangeVideoSourceName_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
}
inline void CmdChangeVideoSourceName_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
}
inline ::std::string* CmdChangeVideoSourceName_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdChangeVideoSourceName_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourceName_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourceName.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdChangeVideoSourceName_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangeVideoSourceName_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangeVideoSourceName_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.IPPORT.port)
  return port_;
}
inline void CmdChangeVideoSourceName_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourceName_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdChangeVideoSourceName_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourceName_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourceName_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourceName_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdChangeVideoSourceName_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdChangeVideoSourceName.IPPORT ipportinfos = 2;
inline int CmdChangeVideoSourceName_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdChangeVideoSourceName_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourceName_IPPORT& CmdChangeVideoSourceName_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_IPPORT* CmdChangeVideoSourceName_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_IPPORT* CmdChangeVideoSourceName_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_IPPORT >&
CmdChangeVideoSourceName_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_IPPORT >*
CmdChangeVideoSourceName_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourceName.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdChangeVideoSourceName_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangeVideoSourceName_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangeVideoSourceName_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangeVideoSourceName_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.AddrInfo.level)
  return level_;
}
inline void CmdChangeVideoSourceName_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourceName_DomainInfo

// optional string dname = 1;
inline bool CmdChangeVideoSourceName_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourceName_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourceName_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourceName_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdChangeVideoSourceName_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
  return *dname_;
}
inline void CmdChangeVideoSourceName_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
}
inline void CmdChangeVideoSourceName_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
}
inline void CmdChangeVideoSourceName_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
}
inline ::std::string* CmdChangeVideoSourceName_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdChangeVideoSourceName_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourceName_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdChangeVideoSourceName_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourceName_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourceName_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourceName_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdChangeVideoSourceName_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourceName_SourceInfo

// optional uint32 srcid = 1;
inline bool CmdChangeVideoSourceName_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourceName_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourceName_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourceName_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.SourceInfo.srcid)
  return srcid_;
}
inline void CmdChangeVideoSourceName_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.SourceInfo.srcid)
}

// optional string name = 2;
inline bool CmdChangeVideoSourceName_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourceName_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourceName_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourceName_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CmdChangeVideoSourceName_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
  return *name_;
}
inline void CmdChangeVideoSourceName_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
}
inline void CmdChangeVideoSourceName_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
}
inline void CmdChangeVideoSourceName_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
}
inline ::std::string* CmdChangeVideoSourceName_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
  return name_;
}
inline ::std::string* CmdChangeVideoSourceName_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourceName_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourceName.SourceInfo.name)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourceName

// optional uint64 confid = 1;
inline bool CmdChangeVideoSourceName::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourceName::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourceName::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourceName::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdChangeVideoSourceName::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.confid)
  return confid_;
}
inline void CmdChangeVideoSourceName::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.confid)
}

// optional uint32 terid = 2;
inline bool CmdChangeVideoSourceName::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourceName::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourceName::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourceName::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourceName::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.terid)
  return terid_;
}
inline void CmdChangeVideoSourceName::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.terid)
}

// repeated .SRMsgs.CmdChangeVideoSourceName.SourceInfo srcinfos = 3;
inline int CmdChangeVideoSourceName::srcinfos_size() const {
  return srcinfos_.size();
}
inline void CmdChangeVideoSourceName::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourceName_SourceInfo& CmdChangeVideoSourceName::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_SourceInfo* CmdChangeVideoSourceName::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_SourceInfo* CmdChangeVideoSourceName::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourceName.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_SourceInfo >&
CmdChangeVideoSourceName::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourceName.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_SourceInfo >*
CmdChangeVideoSourceName::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourceName.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 4;
inline bool CmdChangeVideoSourceName::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdChangeVideoSourceName::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdChangeVideoSourceName::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdChangeVideoSourceName::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdChangeVideoSourceName::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.domainname)
  return *domainname_;
}
inline void CmdChangeVideoSourceName::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourceName.domainname)
}
inline void CmdChangeVideoSourceName::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourceName.domainname)
}
inline void CmdChangeVideoSourceName::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourceName.domainname)
}
inline ::std::string* CmdChangeVideoSourceName::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.domainname)
  return domainname_;
}
inline ::std::string* CmdChangeVideoSourceName::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourceName::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourceName.domainname)
}

// repeated .SRMsgs.CmdChangeVideoSourceName.AddrInfo svraddrs = 5;
inline int CmdChangeVideoSourceName::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdChangeVideoSourceName::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourceName_AddrInfo& CmdChangeVideoSourceName::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_AddrInfo* CmdChangeVideoSourceName::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_AddrInfo* CmdChangeVideoSourceName::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourceName.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_AddrInfo >&
CmdChangeVideoSourceName::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourceName.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_AddrInfo >*
CmdChangeVideoSourceName::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourceName.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdChangeVideoSourceName.DomainInfo domains = 6;
inline int CmdChangeVideoSourceName::domains_size() const {
  return domains_.size();
}
inline void CmdChangeVideoSourceName::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourceName_DomainInfo& CmdChangeVideoSourceName::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourceName.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_DomainInfo* CmdChangeVideoSourceName::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourceName.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourceName_DomainInfo* CmdChangeVideoSourceName::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourceName.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_DomainInfo >&
CmdChangeVideoSourceName::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourceName.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourceName_DomainInfo >*
CmdChangeVideoSourceName::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourceName.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdChangeVideoSourcePriority_IPPORT

// optional uint32 nettype = 1;
inline bool CmdChangeVideoSourcePriority_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.nettype)
  return nettype_;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdChangeVideoSourcePriority_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdChangeVideoSourcePriority_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
  return *ip_;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
}
inline ::std::string* CmdChangeVideoSourcePriority_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdChangeVideoSourcePriority_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdChangeVideoSourcePriority_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangeVideoSourcePriority_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.port)
  return port_;
}
inline void CmdChangeVideoSourcePriority_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourcePriority_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdChangeVideoSourcePriority_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdChangeVideoSourcePriority.IPPORT ipportinfos = 2;
inline int CmdChangeVideoSourcePriority_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdChangeVideoSourcePriority_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT& CmdChangeVideoSourcePriority_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT* CmdChangeVideoSourcePriority_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT* CmdChangeVideoSourcePriority_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT >&
CmdChangeVideoSourcePriority_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_IPPORT >*
CmdChangeVideoSourcePriority_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdChangeVideoSourcePriority_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.level)
  return level_;
}
inline void CmdChangeVideoSourcePriority_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourcePriority_DomainInfo

// optional string dname = 1;
inline bool CmdChangeVideoSourcePriority_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdChangeVideoSourcePriority_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
  return *dname_;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
}
inline ::std::string* CmdChangeVideoSourcePriority_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdChangeVideoSourcePriority_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdChangeVideoSourcePriority_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdChangeVideoSourcePriority_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourcePriority_SourceInfo

// optional uint32 srcid = 1;
inline bool CmdChangeVideoSourcePriority_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.SourceInfo.srcid)
  return srcid_;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.SourceInfo.srcid)
}

// optional uint32 priority = 2;
inline bool CmdChangeVideoSourcePriority_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.SourceInfo.priority)
  return priority_;
}
inline void CmdChangeVideoSourcePriority_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.SourceInfo.priority)
}

// -------------------------------------------------------------------

// CmdChangeVideoSourcePriority

// optional uint64 confid = 1;
inline bool CmdChangeVideoSourcePriority::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangeVideoSourcePriority::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangeVideoSourcePriority::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangeVideoSourcePriority::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdChangeVideoSourcePriority::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.confid)
  return confid_;
}
inline void CmdChangeVideoSourcePriority::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.confid)
}

// optional uint32 terid = 2;
inline bool CmdChangeVideoSourcePriority::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangeVideoSourcePriority::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangeVideoSourcePriority::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangeVideoSourcePriority::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdChangeVideoSourcePriority::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.terid)
  return terid_;
}
inline void CmdChangeVideoSourcePriority::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.terid)
}

// repeated .SRMsgs.CmdChangeVideoSourcePriority.SourceInfo allsrcinfos = 3;
inline int CmdChangeVideoSourcePriority::allsrcinfos_size() const {
  return allsrcinfos_.size();
}
inline void CmdChangeVideoSourcePriority::clear_allsrcinfos() {
  allsrcinfos_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo& CmdChangeVideoSourcePriority::allsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo* CmdChangeVideoSourcePriority::mutable_allsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo* CmdChangeVideoSourcePriority::add_allsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo >&
CmdChangeVideoSourcePriority::allsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_SourceInfo >*
CmdChangeVideoSourcePriority::mutable_allsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourcePriority.allsrcinfos)
  return &allsrcinfos_;
}

// optional string domainname = 4;
inline bool CmdChangeVideoSourcePriority::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdChangeVideoSourcePriority::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdChangeVideoSourcePriority::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdChangeVideoSourcePriority::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdChangeVideoSourcePriority::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.domainname)
  return *domainname_;
}
inline void CmdChangeVideoSourcePriority::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangeVideoSourcePriority.domainname)
}
inline void CmdChangeVideoSourcePriority::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangeVideoSourcePriority.domainname)
}
inline void CmdChangeVideoSourcePriority::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangeVideoSourcePriority.domainname)
}
inline ::std::string* CmdChangeVideoSourcePriority::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.domainname)
  return domainname_;
}
inline ::std::string* CmdChangeVideoSourcePriority::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangeVideoSourcePriority::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangeVideoSourcePriority.domainname)
}

// repeated .SRMsgs.CmdChangeVideoSourcePriority.AddrInfo svraddrs = 5;
inline int CmdChangeVideoSourcePriority::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdChangeVideoSourcePriority::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo& CmdChangeVideoSourcePriority::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo* CmdChangeVideoSourcePriority::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo* CmdChangeVideoSourcePriority::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo >&
CmdChangeVideoSourcePriority::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourcePriority.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_AddrInfo >*
CmdChangeVideoSourcePriority::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourcePriority.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdChangeVideoSourcePriority.DomainInfo domains = 6;
inline int CmdChangeVideoSourcePriority::domains_size() const {
  return domains_.size();
}
inline void CmdChangeVideoSourcePriority::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo& CmdChangeVideoSourcePriority::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangeVideoSourcePriority.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo* CmdChangeVideoSourcePriority::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangeVideoSourcePriority.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo* CmdChangeVideoSourcePriority::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangeVideoSourcePriority.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo >&
CmdChangeVideoSourcePriority::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangeVideoSourcePriority.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangeVideoSourcePriority_DomainInfo >*
CmdChangeVideoSourcePriority::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangeVideoSourcePriority.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdChangePreset_IPPORT

// optional uint32 nettype = 1;
inline bool CmdChangePreset_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangePreset_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangePreset_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangePreset_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdChangePreset_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.IPPORT.nettype)
  return nettype_;
}
inline void CmdChangePreset_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdChangePreset_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangePreset_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangePreset_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangePreset_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdChangePreset_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.IPPORT.ip)
  return *ip_;
}
inline void CmdChangePreset_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.IPPORT.ip)
}
inline void CmdChangePreset_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangePreset.IPPORT.ip)
}
inline void CmdChangePreset_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangePreset.IPPORT.ip)
}
inline ::std::string* CmdChangePreset_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdChangePreset_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangePreset_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangePreset.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdChangePreset_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangePreset_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangePreset_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangePreset_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdChangePreset_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.IPPORT.port)
  return port_;
}
inline void CmdChangePreset_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdChangePreset_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdChangePreset_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangePreset_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangePreset_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangePreset_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdChangePreset_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdChangePreset_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdChangePreset.IPPORT ipportinfos = 2;
inline int CmdChangePreset_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdChangePreset_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdChangePreset_IPPORT& CmdChangePreset_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdChangePreset_IPPORT* CmdChangePreset_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangePreset_IPPORT* CmdChangePreset_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_IPPORT >&
CmdChangePreset_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_IPPORT >*
CmdChangePreset_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangePreset.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdChangePreset_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangePreset_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangePreset_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangePreset_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdChangePreset_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.AddrInfo.level)
  return level_;
}
inline void CmdChangePreset_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdChangePreset_DomainInfo

// optional string dname = 1;
inline bool CmdChangePreset_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangePreset_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangePreset_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangePreset_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdChangePreset_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.DomainInfo.dname)
  return *dname_;
}
inline void CmdChangePreset_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.DomainInfo.dname)
}
inline void CmdChangePreset_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangePreset.DomainInfo.dname)
}
inline void CmdChangePreset_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangePreset.DomainInfo.dname)
}
inline ::std::string* CmdChangePreset_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdChangePreset_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangePreset_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangePreset.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdChangePreset_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangePreset_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangePreset_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangePreset_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdChangePreset_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdChangePreset_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdChangePreset_PresetInfo

// optional uint32 presetid = 1;
inline bool CmdChangePreset_PresetInfo::has_presetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangePreset_PresetInfo::set_has_presetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangePreset_PresetInfo::clear_has_presetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangePreset_PresetInfo::clear_presetid() {
  presetid_ = 0u;
  clear_has_presetid();
}
inline ::google::protobuf::uint32 CmdChangePreset_PresetInfo::presetid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.PresetInfo.presetid)
  return presetid_;
}
inline void CmdChangePreset_PresetInfo::set_presetid(::google::protobuf::uint32 value) {
  set_has_presetid();
  presetid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.PresetInfo.presetid)
}

// optional string presetname = 2;
inline bool CmdChangePreset_PresetInfo::has_presetname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangePreset_PresetInfo::set_has_presetname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangePreset_PresetInfo::clear_has_presetname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangePreset_PresetInfo::clear_presetname() {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_->clear();
  }
  clear_has_presetname();
}
inline const ::std::string& CmdChangePreset_PresetInfo::presetname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.PresetInfo.presetname)
  return *presetname_;
}
inline void CmdChangePreset_PresetInfo::set_presetname(const ::std::string& value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.PresetInfo.presetname)
}
inline void CmdChangePreset_PresetInfo::set_presetname(const char* value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangePreset.PresetInfo.presetname)
}
inline void CmdChangePreset_PresetInfo::set_presetname(const char* value, size_t size) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangePreset.PresetInfo.presetname)
}
inline ::std::string* CmdChangePreset_PresetInfo::mutable_presetname() {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.PresetInfo.presetname)
  return presetname_;
}
inline ::std::string* CmdChangePreset_PresetInfo::release_presetname() {
  clear_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = presetname_;
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangePreset_PresetInfo::set_allocated_presetname(::std::string* presetname) {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presetname_;
  }
  if (presetname) {
    set_has_presetname();
    presetname_ = presetname;
  } else {
    clear_has_presetname();
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangePreset.PresetInfo.presetname)
}

// optional uint32 relatedvsrcid = 3;
inline bool CmdChangePreset_PresetInfo::has_relatedvsrcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdChangePreset_PresetInfo::set_has_relatedvsrcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdChangePreset_PresetInfo::clear_has_relatedvsrcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdChangePreset_PresetInfo::clear_relatedvsrcid() {
  relatedvsrcid_ = 0u;
  clear_has_relatedvsrcid();
}
inline ::google::protobuf::uint32 CmdChangePreset_PresetInfo::relatedvsrcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.PresetInfo.relatedvsrcid)
  return relatedvsrcid_;
}
inline void CmdChangePreset_PresetInfo::set_relatedvsrcid(::google::protobuf::uint32 value) {
  set_has_relatedvsrcid();
  relatedvsrcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.PresetInfo.relatedvsrcid)
}

// -------------------------------------------------------------------

// CmdChangePreset

// optional uint64 confid = 1;
inline bool CmdChangePreset::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdChangePreset::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdChangePreset::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdChangePreset::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdChangePreset::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.confid)
  return confid_;
}
inline void CmdChangePreset::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.confid)
}

// optional uint32 terid = 2;
inline bool CmdChangePreset::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdChangePreset::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdChangePreset::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdChangePreset::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdChangePreset::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.terid)
  return terid_;
}
inline void CmdChangePreset::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.terid)
}

// repeated .SRMsgs.CmdChangePreset.PresetInfo cpresetinfos = 3;
inline int CmdChangePreset::cpresetinfos_size() const {
  return cpresetinfos_.size();
}
inline void CmdChangePreset::clear_cpresetinfos() {
  cpresetinfos_.Clear();
}
inline const ::SRMsgs::CmdChangePreset_PresetInfo& CmdChangePreset::cpresetinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.cpresetinfos)
  return cpresetinfos_.Get(index);
}
inline ::SRMsgs::CmdChangePreset_PresetInfo* CmdChangePreset::mutable_cpresetinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.cpresetinfos)
  return cpresetinfos_.Mutable(index);
}
inline ::SRMsgs::CmdChangePreset_PresetInfo* CmdChangePreset::add_cpresetinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangePreset.cpresetinfos)
  return cpresetinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_PresetInfo >&
CmdChangePreset::cpresetinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangePreset.cpresetinfos)
  return cpresetinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_PresetInfo >*
CmdChangePreset::mutable_cpresetinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangePreset.cpresetinfos)
  return &cpresetinfos_;
}

// optional string domainname = 4;
inline bool CmdChangePreset::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdChangePreset::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdChangePreset::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdChangePreset::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdChangePreset::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.domainname)
  return *domainname_;
}
inline void CmdChangePreset::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdChangePreset.domainname)
}
inline void CmdChangePreset::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdChangePreset.domainname)
}
inline void CmdChangePreset::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdChangePreset.domainname)
}
inline ::std::string* CmdChangePreset::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.domainname)
  return domainname_;
}
inline ::std::string* CmdChangePreset::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdChangePreset::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdChangePreset.domainname)
}

// repeated .SRMsgs.CmdChangePreset.AddrInfo svraddrs = 5;
inline int CmdChangePreset::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdChangePreset::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdChangePreset_AddrInfo& CmdChangePreset::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdChangePreset_AddrInfo* CmdChangePreset::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdChangePreset_AddrInfo* CmdChangePreset::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangePreset.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_AddrInfo >&
CmdChangePreset::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangePreset.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_AddrInfo >*
CmdChangePreset::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangePreset.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdChangePreset.DomainInfo domains = 6;
inline int CmdChangePreset::domains_size() const {
  return domains_.size();
}
inline void CmdChangePreset::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdChangePreset_DomainInfo& CmdChangePreset::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdChangePreset.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdChangePreset_DomainInfo* CmdChangePreset::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdChangePreset.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdChangePreset_DomainInfo* CmdChangePreset::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdChangePreset.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_DomainInfo >&
CmdChangePreset::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdChangePreset.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdChangePreset_DomainInfo >*
CmdChangePreset::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdChangePreset.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdFilterNoVideo_IPPORT

// optional uint32 nettype = 1;
inline bool CmdFilterNoVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdFilterNoVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdFilterNoVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdFilterNoVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.IPPORT.nettype)
  return nettype_;
}
inline void CmdFilterNoVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdFilterNoVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdFilterNoVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdFilterNoVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdFilterNoVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdFilterNoVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
  return *ip_;
}
inline void CmdFilterNoVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
}
inline void CmdFilterNoVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
}
inline void CmdFilterNoVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
}
inline ::std::string* CmdFilterNoVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdFilterNoVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdFilterNoVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdFilterNoVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdFilterNoVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdFilterNoVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdFilterNoVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdFilterNoVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.IPPORT.port)
  return port_;
}
inline void CmdFilterNoVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdFilterNoVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdFilterNoVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdFilterNoVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdFilterNoVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdFilterNoVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdFilterNoVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdFilterNoVideo.IPPORT ipportinfos = 2;
inline int CmdFilterNoVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdFilterNoVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdFilterNoVideo_IPPORT& CmdFilterNoVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdFilterNoVideo_IPPORT* CmdFilterNoVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdFilterNoVideo_IPPORT* CmdFilterNoVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_IPPORT >&
CmdFilterNoVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_IPPORT >*
CmdFilterNoVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdFilterNoVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdFilterNoVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdFilterNoVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdFilterNoVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdFilterNoVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.AddrInfo.level)
  return level_;
}
inline void CmdFilterNoVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdFilterNoVideo_DomainInfo

// optional string dname = 1;
inline bool CmdFilterNoVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdFilterNoVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdFilterNoVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdFilterNoVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdFilterNoVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
  return *dname_;
}
inline void CmdFilterNoVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
}
inline void CmdFilterNoVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
}
inline void CmdFilterNoVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
}
inline ::std::string* CmdFilterNoVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdFilterNoVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdFilterNoVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdFilterNoVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdFilterNoVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdFilterNoVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdFilterNoVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdFilterNoVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdFilterNoVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdFilterNoVideo

// optional uint64 confid = 1;
inline bool CmdFilterNoVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdFilterNoVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdFilterNoVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdFilterNoVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdFilterNoVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.confid)
  return confid_;
}
inline void CmdFilterNoVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.confid)
}

// optional uint32 terid = 2;
inline bool CmdFilterNoVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdFilterNoVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdFilterNoVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdFilterNoVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.terid)
  return terid_;
}
inline void CmdFilterNoVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdFilterNoVideo::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdFilterNoVideo::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdFilterNoVideo::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdFilterNoVideo::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.sponsortype)
  return sponsortype_;
}
inline void CmdFilterNoVideo::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.sponsortype)
}

// optional uint32 filternovideo = 4;
inline bool CmdFilterNoVideo::has_filternovideo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdFilterNoVideo::set_has_filternovideo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdFilterNoVideo::clear_has_filternovideo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdFilterNoVideo::clear_filternovideo() {
  filternovideo_ = 0u;
  clear_has_filternovideo();
}
inline ::google::protobuf::uint32 CmdFilterNoVideo::filternovideo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.filternovideo)
  return filternovideo_;
}
inline void CmdFilterNoVideo::set_filternovideo(::google::protobuf::uint32 value) {
  set_has_filternovideo();
  filternovideo_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.filternovideo)
}

// optional string domainname = 5;
inline bool CmdFilterNoVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdFilterNoVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdFilterNoVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdFilterNoVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdFilterNoVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.domainname)
  return *domainname_;
}
inline void CmdFilterNoVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdFilterNoVideo.domainname)
}
inline void CmdFilterNoVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdFilterNoVideo.domainname)
}
inline void CmdFilterNoVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdFilterNoVideo.domainname)
}
inline ::std::string* CmdFilterNoVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.domainname)
  return domainname_;
}
inline ::std::string* CmdFilterNoVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdFilterNoVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdFilterNoVideo.domainname)
}

// repeated .SRMsgs.CmdFilterNoVideo.AddrInfo svraddrs = 6;
inline int CmdFilterNoVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdFilterNoVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdFilterNoVideo_AddrInfo& CmdFilterNoVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdFilterNoVideo_AddrInfo* CmdFilterNoVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdFilterNoVideo_AddrInfo* CmdFilterNoVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdFilterNoVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_AddrInfo >&
CmdFilterNoVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdFilterNoVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_AddrInfo >*
CmdFilterNoVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdFilterNoVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdFilterNoVideo.DomainInfo domains = 7;
inline int CmdFilterNoVideo::domains_size() const {
  return domains_.size();
}
inline void CmdFilterNoVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdFilterNoVideo_DomainInfo& CmdFilterNoVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdFilterNoVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdFilterNoVideo_DomainInfo* CmdFilterNoVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdFilterNoVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdFilterNoVideo_DomainInfo* CmdFilterNoVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdFilterNoVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_DomainInfo >&
CmdFilterNoVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdFilterNoVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdFilterNoVideo_DomainInfo >*
CmdFilterNoVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdFilterNoVideo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo_IPPORT

// optional uint32 nettype = 1;
inline bool CmdMCUpdateAutoPollInfo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.nettype)
  return nettype_;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool CmdMCUpdateAutoPollInfo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdMCUpdateAutoPollInfo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
  return *ip_;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
}
inline ::std::string* CmdMCUpdateAutoPollInfo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
  return ip_;
}
inline ::std::string* CmdMCUpdateAutoPollInfo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool CmdMCUpdateAutoPollInfo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.port)
  return port_;
}
inline void CmdMCUpdateAutoPollInfo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT.port)
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo_AddrInfo

// optional uint32 svrtype = 1;
inline bool CmdMCUpdateAutoPollInfo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.svrtype)
  return svrtype_;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.svrtype)
}

// repeated .SRMsgs.CmdMCUpdateAutoPollInfo.IPPORT ipportinfos = 2;
inline int CmdMCUpdateAutoPollInfo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT& CmdMCUpdateAutoPollInfo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT* CmdMCUpdateAutoPollInfo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT* CmdMCUpdateAutoPollInfo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT >&
CmdMCUpdateAutoPollInfo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_IPPORT >*
CmdMCUpdateAutoPollInfo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool CmdMCUpdateAutoPollInfo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.level)
  return level_;
}
inline void CmdMCUpdateAutoPollInfo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo.level)
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo_DomainInfo

// optional string dname = 1;
inline bool CmdMCUpdateAutoPollInfo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& CmdMCUpdateAutoPollInfo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
  return *dname_;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
}
inline ::std::string* CmdMCUpdateAutoPollInfo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* CmdMCUpdateAutoPollInfo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool CmdMCUpdateAutoPollInfo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dlevel)
  return dlevel_;
}
inline void CmdMCUpdateAutoPollInfo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo_ParticipantInfo

// optional uint32 psuid = 1;
inline bool CmdMCUpdateAutoPollInfo_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.ParticipantInfo.psuid)
  return psuid_;
}
inline void CmdMCUpdateAutoPollInfo_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.ParticipantInfo.psuid)
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo_AutoPollInfo

// optional uint64 apid = 1;
inline bool CmdMCUpdateAutoPollInfo_AutoPollInfo::has_apid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_has_apid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_has_apid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_apid() {
  apid_ = GOOGLE_ULONGLONG(0);
  clear_has_apid();
}
inline ::google::protobuf::uint64 CmdMCUpdateAutoPollInfo_AutoPollInfo::apid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apid)
  return apid_;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_apid(::google::protobuf::uint64 value) {
  set_has_apid();
  apid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apid)
}

// optional string apname = 2;
inline bool CmdMCUpdateAutoPollInfo_AutoPollInfo::has_apname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_has_apname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_has_apname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_apname() {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_->clear();
  }
  clear_has_apname();
}
inline const ::std::string& CmdMCUpdateAutoPollInfo_AutoPollInfo::apname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
  return *apname_;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_apname(const ::std::string& value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_apname(const char* value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_apname(const char* value, size_t size) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
}
inline ::std::string* CmdMCUpdateAutoPollInfo_AutoPollInfo::mutable_apname() {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
  return apname_;
}
inline ::std::string* CmdMCUpdateAutoPollInfo_AutoPollInfo::release_apname() {
  clear_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apname_;
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_allocated_apname(::std::string* apname) {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apname_;
  }
  if (apname) {
    set_has_apname();
    apname_ = apname;
  } else {
    clear_has_apname();
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.apname)
}

// optional uint32 addordel = 3;
inline bool CmdMCUpdateAutoPollInfo_AutoPollInfo::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo_AutoPollInfo::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.addordel)
  return addordel_;
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.addordel)
}

// repeated .SRMsgs.CmdMCUpdateAutoPollInfo.ParticipantInfo parts = 4;
inline int CmdMCUpdateAutoPollInfo_AutoPollInfo::parts_size() const {
  return parts_.size();
}
inline void CmdMCUpdateAutoPollInfo_AutoPollInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo& CmdMCUpdateAutoPollInfo_AutoPollInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo* CmdMCUpdateAutoPollInfo_AutoPollInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo* CmdMCUpdateAutoPollInfo_AutoPollInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo >&
CmdMCUpdateAutoPollInfo_AutoPollInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_ParticipantInfo >*
CmdMCUpdateAutoPollInfo_AutoPollInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// CmdMCUpdateAutoPollInfo

// optional uint64 confid = 1;
inline bool CmdMCUpdateAutoPollInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCUpdateAutoPollInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCUpdateAutoPollInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCUpdateAutoPollInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.confid)
  return confid_;
}
inline void CmdMCUpdateAutoPollInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.confid)
}

// optional uint32 terid = 2;
inline bool CmdMCUpdateAutoPollInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCUpdateAutoPollInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCUpdateAutoPollInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.terid)
  return terid_;
}
inline void CmdMCUpdateAutoPollInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.terid)
}

// optional uint32 sponsortype = 3;
inline bool CmdMCUpdateAutoPollInfo::has_sponsortype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCUpdateAutoPollInfo::set_has_sponsortype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo::clear_has_sponsortype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCUpdateAutoPollInfo::clear_sponsortype() {
  sponsortype_ = 0u;
  clear_has_sponsortype();
}
inline ::google::protobuf::uint32 CmdMCUpdateAutoPollInfo::sponsortype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.sponsortype)
  return sponsortype_;
}
inline void CmdMCUpdateAutoPollInfo::set_sponsortype(::google::protobuf::uint32 value) {
  set_has_sponsortype();
  sponsortype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.sponsortype)
}

// repeated .SRMsgs.CmdMCUpdateAutoPollInfo.AutoPollInfo autopolllist = 4;
inline int CmdMCUpdateAutoPollInfo::autopolllist_size() const {
  return autopolllist_.size();
}
inline void CmdMCUpdateAutoPollInfo::clear_autopolllist() {
  autopolllist_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo& CmdMCUpdateAutoPollInfo::autopolllist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.autopolllist)
  return autopolllist_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo* CmdMCUpdateAutoPollInfo::mutable_autopolllist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.autopolllist)
  return autopolllist_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo* CmdMCUpdateAutoPollInfo::add_autopolllist() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAutoPollInfo.autopolllist)
  return autopolllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo >&
CmdMCUpdateAutoPollInfo::autopolllist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAutoPollInfo.autopolllist)
  return autopolllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AutoPollInfo >*
CmdMCUpdateAutoPollInfo::mutable_autopolllist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAutoPollInfo.autopolllist)
  return &autopolllist_;
}

// optional string domainname = 5;
inline bool CmdMCUpdateAutoPollInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdMCUpdateAutoPollInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdMCUpdateAutoPollInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdMCUpdateAutoPollInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& CmdMCUpdateAutoPollInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
  return *domainname_;
}
inline void CmdMCUpdateAutoPollInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
}
inline void CmdMCUpdateAutoPollInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
}
inline void CmdMCUpdateAutoPollInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
}
inline ::std::string* CmdMCUpdateAutoPollInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
  return domainname_;
}
inline ::std::string* CmdMCUpdateAutoPollInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdMCUpdateAutoPollInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdMCUpdateAutoPollInfo.domainname)
}

// repeated .SRMsgs.CmdMCUpdateAutoPollInfo.AddrInfo svraddrs = 6;
inline int CmdMCUpdateAutoPollInfo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void CmdMCUpdateAutoPollInfo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo& CmdMCUpdateAutoPollInfo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo* CmdMCUpdateAutoPollInfo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo* CmdMCUpdateAutoPollInfo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAutoPollInfo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo >&
CmdMCUpdateAutoPollInfo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAutoPollInfo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_AddrInfo >*
CmdMCUpdateAutoPollInfo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAutoPollInfo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.CmdMCUpdateAutoPollInfo.DomainInfo domains = 7;
inline int CmdMCUpdateAutoPollInfo::domains_size() const {
  return domains_.size();
}
inline void CmdMCUpdateAutoPollInfo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo& CmdMCUpdateAutoPollInfo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCUpdateAutoPollInfo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo* CmdMCUpdateAutoPollInfo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCUpdateAutoPollInfo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo* CmdMCUpdateAutoPollInfo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCUpdateAutoPollInfo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo >&
CmdMCUpdateAutoPollInfo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCUpdateAutoPollInfo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCUpdateAutoPollInfo_DomainInfo >*
CmdMCUpdateAutoPollInfo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCUpdateAutoPollInfo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// ReqSendAssistVideoProxy_IPPORT

// optional uint32 nettype = 1;
inline bool ReqSendAssistVideoProxy_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.IPPORT.nettype)
  return nettype_;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.IPPORT.nettype)
}

// optional string ip = 2;
inline bool ReqSendAssistVideoProxy_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqSendAssistVideoProxy_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
  return *ip_;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
}
inline void ReqSendAssistVideoProxy_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
}
inline void ReqSendAssistVideoProxy_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
}
inline ::std::string* ReqSendAssistVideoProxy_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
  return ip_;
}
inline ::std::string* ReqSendAssistVideoProxy_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideoProxy_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideoProxy.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool ReqSendAssistVideoProxy_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideoProxy_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.IPPORT.port)
  return port_;
}
inline void ReqSendAssistVideoProxy_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.IPPORT.port)
}

// -------------------------------------------------------------------

// ReqSendAssistVideoProxy_AddrInfo

// optional uint32 svrtype = 1;
inline bool ReqSendAssistVideoProxy_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideoProxy_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideoProxy_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideoProxy_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.svrtype)
  return svrtype_;
}
inline void ReqSendAssistVideoProxy_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.svrtype)
}

// repeated .SRMsgs.ReqSendAssistVideoProxy.IPPORT ipportinfos = 2;
inline int ReqSendAssistVideoProxy_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void ReqSendAssistVideoProxy_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideoProxy_IPPORT& ReqSendAssistVideoProxy_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_IPPORT* ReqSendAssistVideoProxy_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_IPPORT* ReqSendAssistVideoProxy_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_IPPORT >&
ReqSendAssistVideoProxy_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_IPPORT >*
ReqSendAssistVideoProxy_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool ReqSendAssistVideoProxy_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideoProxy_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideoProxy_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideoProxy_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.level)
  return level_;
}
inline void ReqSendAssistVideoProxy_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.AddrInfo.level)
}

// -------------------------------------------------------------------

// ReqSendAssistVideoProxy_DomainInfo

// optional string dname = 1;
inline bool ReqSendAssistVideoProxy_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideoProxy_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideoProxy_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& ReqSendAssistVideoProxy_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
  return *dname_;
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
}
inline ::std::string* ReqSendAssistVideoProxy_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
  return dname_;
}
inline ::std::string* ReqSendAssistVideoProxy_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool ReqSendAssistVideoProxy_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideoProxy_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideoProxy_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dlevel)
  return dlevel_;
}
inline void ReqSendAssistVideoProxy_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// ReqSendAssistVideoProxy

// optional uint64 confid = 1;
inline bool ReqSendAssistVideoProxy::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendAssistVideoProxy::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendAssistVideoProxy::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendAssistVideoProxy::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqSendAssistVideoProxy::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.confid)
  return confid_;
}
inline void ReqSendAssistVideoProxy::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.confid)
}

// optional uint32 terid = 2;
inline bool ReqSendAssistVideoProxy::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendAssistVideoProxy::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendAssistVideoProxy::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendAssistVideoProxy::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.terid)
  return terid_;
}
inline void ReqSendAssistVideoProxy::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.terid)
}

// optional uint32 avterid = 3;
inline bool ReqSendAssistVideoProxy::has_avterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSendAssistVideoProxy::set_has_avterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSendAssistVideoProxy::clear_has_avterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSendAssistVideoProxy::clear_avterid() {
  avterid_ = 0u;
  clear_has_avterid();
}
inline ::google::protobuf::uint32 ReqSendAssistVideoProxy::avterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.avterid)
  return avterid_;
}
inline void ReqSendAssistVideoProxy::set_avterid(::google::protobuf::uint32 value) {
  set_has_avterid();
  avterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.avterid)
}

// optional string domainname = 4;
inline bool ReqSendAssistVideoProxy::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqSendAssistVideoProxy::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqSendAssistVideoProxy::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqSendAssistVideoProxy::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqSendAssistVideoProxy::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.domainname)
  return *domainname_;
}
inline void ReqSendAssistVideoProxy::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqSendAssistVideoProxy.domainname)
}
inline void ReqSendAssistVideoProxy::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqSendAssistVideoProxy.domainname)
}
inline void ReqSendAssistVideoProxy::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqSendAssistVideoProxy.domainname)
}
inline ::std::string* ReqSendAssistVideoProxy::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.domainname)
  return domainname_;
}
inline ::std::string* ReqSendAssistVideoProxy::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSendAssistVideoProxy::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqSendAssistVideoProxy.domainname)
}

// repeated .SRMsgs.ReqSendAssistVideoProxy.AddrInfo svraddrs = 5;
inline int ReqSendAssistVideoProxy::svraddrs_size() const {
  return svraddrs_.size();
}
inline void ReqSendAssistVideoProxy::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo& ReqSendAssistVideoProxy::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo* ReqSendAssistVideoProxy::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo* ReqSendAssistVideoProxy::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideoProxy.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo >&
ReqSendAssistVideoProxy::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideoProxy.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_AddrInfo >*
ReqSendAssistVideoProxy::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideoProxy.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.ReqSendAssistVideoProxy.DomainInfo domains = 6;
inline int ReqSendAssistVideoProxy::domains_size() const {
  return domains_.size();
}
inline void ReqSendAssistVideoProxy::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo& ReqSendAssistVideoProxy::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqSendAssistVideoProxy.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo* ReqSendAssistVideoProxy::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqSendAssistVideoProxy.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo* ReqSendAssistVideoProxy::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqSendAssistVideoProxy.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo >&
ReqSendAssistVideoProxy::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqSendAssistVideoProxy.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqSendAssistVideoProxy_DomainInfo >*
ReqSendAssistVideoProxy::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqSendAssistVideoProxy.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_IPPORT

// optional uint32 nettype = 1;
inline bool RspConfGroupMeetingRoomTerLists_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.nettype)
  return nettype_;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.nettype)
}

// optional string ip = 2;
inline bool RspConfGroupMeetingRoomTerLists_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
  return *ip_;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
  return ip_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool RspConfGroupMeetingRoomTerLists_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.port)
  return port_;
}
inline void RspConfGroupMeetingRoomTerLists_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT.port)
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_AddrInfo

// optional uint32 svrtype = 1;
inline bool RspConfGroupMeetingRoomTerLists_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.svrtype)
  return svrtype_;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.svrtype)
}

// repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.IPPORT ipportinfos = 2;
inline int RspConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT& RspConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT* RspConfGroupMeetingRoomTerLists_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT* RspConfGroupMeetingRoomTerLists_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT >&
RspConfGroupMeetingRoomTerLists_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_IPPORT >*
RspConfGroupMeetingRoomTerLists_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool RspConfGroupMeetingRoomTerLists_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.level)
  return level_;
}
inline void RspConfGroupMeetingRoomTerLists_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo.level)
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_DomainInfo

// optional string dname = 1;
inline bool RspConfGroupMeetingRoomTerLists_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
  return *dname_;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
  return dname_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool RspConfGroupMeetingRoomTerLists_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dlevel)
  return dlevel_;
}
inline void RspConfGroupMeetingRoomTerLists_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_TerInfo

// optional uint32 suid = 1;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_TerInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.suid)
  return suid_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.suid)
}

// optional string nickname = 2;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists_TerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
  return *nickname_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_TerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
  return nickname_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_TerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.nickname)
}

// optional string terdname = 3;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_terdname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_terdname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_terdname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_terdname() {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_->clear();
  }
  clear_has_terdname();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists_TerInfo::terdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
  return *terdname_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_terdname(const ::std::string& value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_terdname(const char* value) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_terdname(const char* value, size_t size) {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  terdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_TerInfo::mutable_terdname() {
  set_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
  return terdname_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists_TerInfo::release_terdname() {
  clear_has_terdname();
  if (terdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terdname_;
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_allocated_terdname(::std::string* terdname) {
  if (terdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terdname_;
  }
  if (terdname) {
    set_has_terdname();
    terdname_ = terdname;
  } else {
    clear_has_terdname();
    terdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.terdname)
}

// optional uint32 termtype = 4;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_TerInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.termtype)
  return termtype_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.termtype)
}

// optional uint32 fromtype = 5;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_fromtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_fromtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_fromtype() {
  fromtype_ = 0u;
  clear_has_fromtype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_TerInfo::fromtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.fromtype)
  return fromtype_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_fromtype(::google::protobuf::uint32 value) {
  set_has_fromtype();
  fromtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.fromtype)
}

// optional uint32 producttype = 6;
inline bool RspConfGroupMeetingRoomTerLists_TerInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_TerInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.producttype)
  return producttype_;
}
inline void RspConfGroupMeetingRoomTerLists_TerInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo.producttype)
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_GMRInfo

// optional uint32 gmrtype = 1;
inline bool RspConfGroupMeetingRoomTerLists_GMRInfo::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_GMRInfo::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo.gmrtype)
  return gmrtype_;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo.gmrtype)
}

// optional uint32 gmrid = 2;
inline bool RspConfGroupMeetingRoomTerLists_GMRInfo::has_gmrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::set_has_gmrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists_GMRInfo::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo.gmrid)
  return gmrid_;
}
inline void RspConfGroupMeetingRoomTerLists_GMRInfo::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo.gmrid)
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists_GMRTerListInfo

// optional .SRMsgs.RspConfGroupMeetingRoomTerLists.GMRInfo gmrinfo = 1;
inline bool RspConfGroupMeetingRoomTerLists_GMRTerListInfo::has_gmrinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists_GMRTerListInfo::set_has_gmrinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRTerListInfo::clear_has_gmrinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists_GMRTerListInfo::clear_gmrinfo() {
  if (gmrinfo_ != NULL) gmrinfo_->::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo::Clear();
  clear_has_gmrinfo();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo& RspConfGroupMeetingRoomTerLists_GMRTerListInfo::gmrinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.gmrinfo)
  return gmrinfo_ != NULL ? *gmrinfo_ : *default_instance_->gmrinfo_;
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* RspConfGroupMeetingRoomTerLists_GMRTerListInfo::mutable_gmrinfo() {
  set_has_gmrinfo();
  if (gmrinfo_ == NULL) gmrinfo_ = new ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.gmrinfo)
  return gmrinfo_;
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* RspConfGroupMeetingRoomTerLists_GMRTerListInfo::release_gmrinfo() {
  clear_has_gmrinfo();
  ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* temp = gmrinfo_;
  gmrinfo_ = NULL;
  return temp;
}
inline void RspConfGroupMeetingRoomTerLists_GMRTerListInfo::set_allocated_gmrinfo(::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRInfo* gmrinfo) {
  delete gmrinfo_;
  gmrinfo_ = gmrinfo;
  if (gmrinfo) {
    set_has_gmrinfo();
  } else {
    clear_has_gmrinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.gmrinfo)
}

// repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.TerInfo terlists = 3;
inline int RspConfGroupMeetingRoomTerLists_GMRTerListInfo::terlists_size() const {
  return terlists_.size();
}
inline void RspConfGroupMeetingRoomTerLists_GMRTerListInfo::clear_terlists() {
  terlists_.Clear();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo& RspConfGroupMeetingRoomTerLists_GMRTerListInfo::terlists(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.terlists)
  return terlists_.Get(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo* RspConfGroupMeetingRoomTerLists_GMRTerListInfo::mutable_terlists(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.terlists)
  return terlists_.Mutable(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo* RspConfGroupMeetingRoomTerLists_GMRTerListInfo::add_terlists() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.terlists)
  return terlists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo >&
RspConfGroupMeetingRoomTerLists_GMRTerListInfo::terlists() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.terlists)
  return terlists_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_TerInfo >*
RspConfGroupMeetingRoomTerLists_GMRTerListInfo::mutable_terlists() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo.terlists)
  return &terlists_;
}

// -------------------------------------------------------------------

// RspConfGroupMeetingRoomTerLists

// optional uint64 confid = 1;
inline bool RspConfGroupMeetingRoomTerLists::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspConfGroupMeetingRoomTerLists::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.confid)
  return confid_;
}
inline void RspConfGroupMeetingRoomTerLists::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.confid)
}

// optional uint32 terid = 2;
inline bool RspConfGroupMeetingRoomTerLists::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.terid)
  return terid_;
}
inline void RspConfGroupMeetingRoomTerLists::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.terid)
}

// optional string domainname = 3;
inline bool RspConfGroupMeetingRoomTerLists::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
  return *domainname_;
}
inline void RspConfGroupMeetingRoomTerLists::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
}
inline void RspConfGroupMeetingRoomTerLists::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
}
inline void RspConfGroupMeetingRoomTerLists::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
  return domainname_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.domainname)
}

// repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.AddrInfo svraddrs = 4;
inline int RspConfGroupMeetingRoomTerLists::svraddrs_size() const {
  return svraddrs_.size();
}
inline void RspConfGroupMeetingRoomTerLists::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo& RspConfGroupMeetingRoomTerLists::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo* RspConfGroupMeetingRoomTerLists::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo* RspConfGroupMeetingRoomTerLists::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo >&
RspConfGroupMeetingRoomTerLists::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfGroupMeetingRoomTerLists.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_AddrInfo >*
RspConfGroupMeetingRoomTerLists::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfGroupMeetingRoomTerLists.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.DomainInfo domains = 5;
inline int RspConfGroupMeetingRoomTerLists::domains_size() const {
  return domains_.size();
}
inline void RspConfGroupMeetingRoomTerLists::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo& RspConfGroupMeetingRoomTerLists::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo* RspConfGroupMeetingRoomTerLists::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo* RspConfGroupMeetingRoomTerLists::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfGroupMeetingRoomTerLists.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo >&
RspConfGroupMeetingRoomTerLists::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfGroupMeetingRoomTerLists.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_DomainInfo >*
RspConfGroupMeetingRoomTerLists::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfGroupMeetingRoomTerLists.domains)
  return &domains_;
}

// optional bool isok = 6;
inline bool RspConfGroupMeetingRoomTerLists::has_isok() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_isok() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_isok() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspConfGroupMeetingRoomTerLists::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.isok)
  return isok_;
}
inline void RspConfGroupMeetingRoomTerLists::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.isok)
}

// optional string failreason = 7;
inline bool RspConfGroupMeetingRoomTerLists::has_failreason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_failreason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspConfGroupMeetingRoomTerLists::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
  return *failreason_;
}
inline void RspConfGroupMeetingRoomTerLists::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
}
inline void RspConfGroupMeetingRoomTerLists::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
}
inline void RspConfGroupMeetingRoomTerLists::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
}
inline ::std::string* RspConfGroupMeetingRoomTerLists::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
  return failreason_;
}
inline ::std::string* RspConfGroupMeetingRoomTerLists::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfGroupMeetingRoomTerLists::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfGroupMeetingRoomTerLists.failreason)
}

// optional uint32 errorcode = 8;
inline bool RspConfGroupMeetingRoomTerLists::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.errorcode)
  return errorcode_;
}
inline void RspConfGroupMeetingRoomTerLists::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.errorcode)
}

// optional uint32 totalnums = 9;
inline bool RspConfGroupMeetingRoomTerLists::has_totalnums() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_totalnums() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_totalnums() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_totalnums() {
  totalnums_ = 0u;
  clear_has_totalnums();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists::totalnums() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.totalnums)
  return totalnums_;
}
inline void RspConfGroupMeetingRoomTerLists::set_totalnums(::google::protobuf::uint32 value) {
  set_has_totalnums();
  totalnums_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.totalnums)
}

// optional uint32 alreadynums = 10;
inline bool RspConfGroupMeetingRoomTerLists::has_alreadynums() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspConfGroupMeetingRoomTerLists::set_has_alreadynums() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_has_alreadynums() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspConfGroupMeetingRoomTerLists::clear_alreadynums() {
  alreadynums_ = 0u;
  clear_has_alreadynums();
}
inline ::google::protobuf::uint32 RspConfGroupMeetingRoomTerLists::alreadynums() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.alreadynums)
  return alreadynums_;
}
inline void RspConfGroupMeetingRoomTerLists::set_alreadynums(::google::protobuf::uint32 value) {
  set_has_alreadynums();
  alreadynums_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfGroupMeetingRoomTerLists.alreadynums)
}

// repeated .SRMsgs.RspConfGroupMeetingRoomTerLists.GMRTerListInfo gmrterlists = 11;
inline int RspConfGroupMeetingRoomTerLists::gmrterlists_size() const {
  return gmrterlists_.size();
}
inline void RspConfGroupMeetingRoomTerLists::clear_gmrterlists() {
  gmrterlists_.Clear();
}
inline const ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo& RspConfGroupMeetingRoomTerLists::gmrterlists(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfGroupMeetingRoomTerLists.gmrterlists)
  return gmrterlists_.Get(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo* RspConfGroupMeetingRoomTerLists::mutable_gmrterlists(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfGroupMeetingRoomTerLists.gmrterlists)
  return gmrterlists_.Mutable(index);
}
inline ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo* RspConfGroupMeetingRoomTerLists::add_gmrterlists() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfGroupMeetingRoomTerLists.gmrterlists)
  return gmrterlists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo >&
RspConfGroupMeetingRoomTerLists::gmrterlists() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfGroupMeetingRoomTerLists.gmrterlists)
  return gmrterlists_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfGroupMeetingRoomTerLists_GMRTerListInfo >*
RspConfGroupMeetingRoomTerLists::mutable_gmrterlists() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfGroupMeetingRoomTerLists.gmrterlists)
  return &gmrterlists_;
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_IPPORT

// optional uint32 nettype = 1;
inline bool RspConfRollCallInfo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.IPPORT.nettype)
  return nettype_;
}
inline void RspConfRollCallInfo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool RspConfRollCallInfo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspConfRollCallInfo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
  return *ip_;
}
inline void RspConfRollCallInfo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
}
inline void RspConfRollCallInfo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
}
inline void RspConfRollCallInfo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
}
inline ::std::string* RspConfRollCallInfo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
  return ip_;
}
inline ::std::string* RspConfRollCallInfo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool RspConfRollCallInfo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfRollCallInfo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfRollCallInfo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfRollCallInfo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.IPPORT.port)
  return port_;
}
inline void RspConfRollCallInfo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.IPPORT.port)
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_AddrInfo

// optional uint32 svrtype = 1;
inline bool RspConfRollCallInfo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.AddrInfo.svrtype)
  return svrtype_;
}
inline void RspConfRollCallInfo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.AddrInfo.svrtype)
}

// repeated .SRMsgs.RspConfRollCallInfo.IPPORT ipportinfos = 2;
inline int RspConfRollCallInfo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void RspConfRollCallInfo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_IPPORT& RspConfRollCallInfo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_IPPORT* RspConfRollCallInfo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_IPPORT* RspConfRollCallInfo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_IPPORT >&
RspConfRollCallInfo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_IPPORT >*
RspConfRollCallInfo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool RspConfRollCallInfo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfRollCallInfo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfRollCallInfo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfRollCallInfo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.AddrInfo.level)
  return level_;
}
inline void RspConfRollCallInfo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.AddrInfo.level)
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_DomainInfo

// optional string dname = 1;
inline bool RspConfRollCallInfo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& RspConfRollCallInfo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
  return *dname_;
}
inline void RspConfRollCallInfo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
}
inline void RspConfRollCallInfo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
}
inline void RspConfRollCallInfo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
}
inline ::std::string* RspConfRollCallInfo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* RspConfRollCallInfo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool RspConfRollCallInfo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.DomainInfo.dlevel)
  return dlevel_;
}
inline void RspConfRollCallInfo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_ParticipantInfo

// optional uint32 psuid = 1;
inline bool RspConfRollCallInfo_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.ParticipantInfo.psuid)
  return psuid_;
}
inline void RspConfRollCallInfo_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.ParticipantInfo.psuid)
}

// optional string nickname = 2;
inline bool RspConfRollCallInfo_ParticipantInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo_ParticipantInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo_ParticipantInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo_ParticipantInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RspConfRollCallInfo_ParticipantInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
  return *nickname_;
}
inline void RspConfRollCallInfo_ParticipantInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
}
inline void RspConfRollCallInfo_ParticipantInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
}
inline void RspConfRollCallInfo_ParticipantInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
}
inline ::std::string* RspConfRollCallInfo_ParticipantInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
  return nickname_;
}
inline ::std::string* RspConfRollCallInfo_ParticipantInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_ParticipantInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.ParticipantInfo.nickname)
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_RollCallInfo

// optional uint64 rcid = 1;
inline bool RspConfRollCallInfo_RollCallInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_RollCallInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_RollCallInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_RollCallInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 RspConfRollCallInfo_RollCallInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcid)
  return rcid_;
}
inline void RspConfRollCallInfo_RollCallInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcid)
}

// optional string rcname = 2;
inline bool RspConfRollCallInfo_RollCallInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo_RollCallInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo_RollCallInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo_RollCallInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& RspConfRollCallInfo_RollCallInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
  return *rcname_;
}
inline void RspConfRollCallInfo_RollCallInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
}
inline void RspConfRollCallInfo_RollCallInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
}
inline void RspConfRollCallInfo_RollCallInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
}
inline ::std::string* RspConfRollCallInfo_RollCallInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
  return rcname_;
}
inline ::std::string* RspConfRollCallInfo_RollCallInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_RollCallInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.RollCallInfo.rcname)
}

// repeated .SRMsgs.RspConfRollCallInfo.ParticipantInfo parts = 3;
inline int RspConfRollCallInfo_RollCallInfo::parts_size() const {
  return parts_.size();
}
inline void RspConfRollCallInfo_RollCallInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_ParticipantInfo& RspConfRollCallInfo_RollCallInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_ParticipantInfo* RspConfRollCallInfo_RollCallInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_ParticipantInfo* RspConfRollCallInfo_RollCallInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.RollCallInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_ParticipantInfo >&
RspConfRollCallInfo_RollCallInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.RollCallInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_ParticipantInfo >*
RspConfRollCallInfo_RollCallInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.RollCallInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_RollCallTerInfo

// optional uint64 rcid = 1;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 RspConfRollCallInfo_RollCallTerInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcid)
  return rcid_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcid)
}

// optional string rcname = 2;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& RspConfRollCallInfo_RollCallTerInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
  return *rcname_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
  return rcname_;
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcname)
}

// optional uint32 psuid = 3;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_RollCallTerInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.psuid)
  return psuid_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.psuid)
}

// optional string nickname = 4;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RspConfRollCallInfo_RollCallTerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
  return *nickname_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
  return nickname_;
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.nickname)
}

// optional string rcstarttime = 5;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_rcstarttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_rcstarttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_rcstarttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_rcstarttime() {
  if (rcstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_->clear();
  }
  clear_has_rcstarttime();
}
inline const ::std::string& RspConfRollCallInfo_RollCallTerInfo::rcstarttime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
  return *rcstarttime_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcstarttime(const ::std::string& value) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcstarttime(const char* value) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcstarttime(const char* value, size_t size) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::mutable_rcstarttime() {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
  return rcstarttime_;
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::release_rcstarttime() {
  clear_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcstarttime_;
    rcstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_allocated_rcstarttime(::std::string* rcstarttime) {
  if (rcstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcstarttime_;
  }
  if (rcstarttime) {
    set_has_rcstarttime();
    rcstarttime_ = rcstarttime;
  } else {
    clear_has_rcstarttime();
    rcstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcstarttime)
}

// optional string rcendtime = 6;
inline bool RspConfRollCallInfo_RollCallTerInfo::has_rcendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_has_rcendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_has_rcendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfRollCallInfo_RollCallTerInfo::clear_rcendtime() {
  if (rcendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_->clear();
  }
  clear_has_rcendtime();
}
inline const ::std::string& RspConfRollCallInfo_RollCallTerInfo::rcendtime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
  return *rcendtime_;
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcendtime(const ::std::string& value) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcendtime(const char* value) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_rcendtime(const char* value, size_t size) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::mutable_rcendtime() {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
  return rcendtime_;
}
inline ::std::string* RspConfRollCallInfo_RollCallTerInfo::release_rcendtime() {
  clear_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcendtime_;
    rcendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo_RollCallTerInfo::set_allocated_rcendtime(::std::string* rcendtime) {
  if (rcendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcendtime_;
  }
  if (rcendtime) {
    set_has_rcendtime();
    rcendtime_ = rcendtime;
  } else {
    clear_has_rcendtime();
    rcendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.RollCallTerInfo.rcendtime)
}

// -------------------------------------------------------------------

// RspConfRollCallInfo_RollCallPassDetail

// optional uint32 type = 1;
inline bool RspConfRollCallInfo_RollCallPassDetail::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo_RollCallPassDetail::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo_RollCallPassDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo_RollCallPassDetail::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo_RollCallPassDetail::type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.type)
  return type_;
}
inline void RspConfRollCallInfo_RollCallPassDetail::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.type)
}

// repeated .SRMsgs.RspConfRollCallInfo.RollCallTerInfo parts = 2;
inline int RspConfRollCallInfo_RollCallPassDetail::parts_size() const {
  return parts_.size();
}
inline void RspConfRollCallInfo_RollCallPassDetail::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo& RspConfRollCallInfo_RollCallPassDetail::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* RspConfRollCallInfo_RollCallPassDetail::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* RspConfRollCallInfo_RollCallPassDetail::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo >&
RspConfRollCallInfo_RollCallPassDetail::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo >*
RspConfRollCallInfo_RollCallPassDetail::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.RollCallPassDetail.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// RspConfRollCallInfo

// optional bool isrollcall = 1;
inline bool RspConfRollCallInfo::has_isrollcall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfRollCallInfo::set_has_isrollcall() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfRollCallInfo::clear_has_isrollcall() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfRollCallInfo::clear_isrollcall() {
  isrollcall_ = false;
  clear_has_isrollcall();
}
inline bool RspConfRollCallInfo::isrollcall() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.isrollcall)
  return isrollcall_;
}
inline void RspConfRollCallInfo::set_isrollcall(bool value) {
  set_has_isrollcall();
  isrollcall_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.isrollcall)
}

// optional uint64 confid = 2;
inline bool RspConfRollCallInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfRollCallInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfRollCallInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfRollCallInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspConfRollCallInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.confid)
  return confid_;
}
inline void RspConfRollCallInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.confid)
}

// optional uint32 terid = 3;
inline bool RspConfRollCallInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfRollCallInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfRollCallInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfRollCallInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 RspConfRollCallInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.terid)
  return terid_;
}
inline void RspConfRollCallInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.terid)
}

// repeated .SRMsgs.RspConfRollCallInfo.RollCallInfo rollcalllist = 4;
inline int RspConfRollCallInfo::rollcalllist_size() const {
  return rollcalllist_.size();
}
inline void RspConfRollCallInfo::clear_rollcalllist() {
  rollcalllist_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_RollCallInfo& RspConfRollCallInfo::rollcalllist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.rollcalllist)
  return rollcalllist_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallInfo* RspConfRollCallInfo::mutable_rollcalllist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.rollcalllist)
  return rollcalllist_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallInfo* RspConfRollCallInfo::add_rollcalllist() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.rollcalllist)
  return rollcalllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallInfo >&
RspConfRollCallInfo::rollcalllist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.rollcalllist)
  return rollcalllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallInfo >*
RspConfRollCallInfo::mutable_rollcalllist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.rollcalllist)
  return &rollcalllist_;
}

// optional sint32 rcitersuid = 5;
inline bool RspConfRollCallInfo::has_rcitersuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfRollCallInfo::set_has_rcitersuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfRollCallInfo::clear_has_rcitersuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfRollCallInfo::clear_rcitersuid() {
  rcitersuid_ = 0;
  clear_has_rcitersuid();
}
inline ::google::protobuf::int32 RspConfRollCallInfo::rcitersuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.rcitersuid)
  return rcitersuid_;
}
inline void RspConfRollCallInfo::set_rcitersuid(::google::protobuf::int32 value) {
  set_has_rcitersuid();
  rcitersuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.rcitersuid)
}

// optional .SRMsgs.RspConfRollCallInfo.RollCallTerInfo currcterinfo = 6;
inline bool RspConfRollCallInfo::has_currcterinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfRollCallInfo::set_has_currcterinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfRollCallInfo::clear_has_currcterinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfRollCallInfo::clear_currcterinfo() {
  if (currcterinfo_ != NULL) currcterinfo_->::SRMsgs::RspConfRollCallInfo_RollCallTerInfo::Clear();
  clear_has_currcterinfo();
}
inline const ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo& RspConfRollCallInfo::currcterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.currcterinfo)
  return currcterinfo_ != NULL ? *currcterinfo_ : *default_instance_->currcterinfo_;
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* RspConfRollCallInfo::mutable_currcterinfo() {
  set_has_currcterinfo();
  if (currcterinfo_ == NULL) currcterinfo_ = new ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.currcterinfo)
  return currcterinfo_;
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* RspConfRollCallInfo::release_currcterinfo() {
  clear_has_currcterinfo();
  ::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* temp = currcterinfo_;
  currcterinfo_ = NULL;
  return temp;
}
inline void RspConfRollCallInfo::set_allocated_currcterinfo(::SRMsgs::RspConfRollCallInfo_RollCallTerInfo* currcterinfo) {
  delete currcterinfo_;
  currcterinfo_ = currcterinfo;
  if (currcterinfo) {
    set_has_currcterinfo();
  } else {
    clear_has_currcterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.currcterinfo)
}

// repeated .SRMsgs.RspConfRollCallInfo.RollCallPassDetail rcpdetails = 7;
inline int RspConfRollCallInfo::rcpdetails_size() const {
  return rcpdetails_.size();
}
inline void RspConfRollCallInfo::clear_rcpdetails() {
  rcpdetails_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail& RspConfRollCallInfo::rcpdetails(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.rcpdetails)
  return rcpdetails_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail* RspConfRollCallInfo::mutable_rcpdetails(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.rcpdetails)
  return rcpdetails_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail* RspConfRollCallInfo::add_rcpdetails() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.rcpdetails)
  return rcpdetails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail >&
RspConfRollCallInfo::rcpdetails() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.rcpdetails)
  return rcpdetails_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_RollCallPassDetail >*
RspConfRollCallInfo::mutable_rcpdetails() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.rcpdetails)
  return &rcpdetails_;
}

// optional string domainname = 8;
inline bool RspConfRollCallInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspConfRollCallInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspConfRollCallInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspConfRollCallInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspConfRollCallInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.domainname)
  return *domainname_;
}
inline void RspConfRollCallInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfRollCallInfo.domainname)
}
inline void RspConfRollCallInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfRollCallInfo.domainname)
}
inline void RspConfRollCallInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfRollCallInfo.domainname)
}
inline ::std::string* RspConfRollCallInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.domainname)
  return domainname_;
}
inline ::std::string* RspConfRollCallInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfRollCallInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfRollCallInfo.domainname)
}

// repeated .SRMsgs.RspConfRollCallInfo.AddrInfo svraddrs = 9;
inline int RspConfRollCallInfo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void RspConfRollCallInfo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_AddrInfo& RspConfRollCallInfo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_AddrInfo* RspConfRollCallInfo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_AddrInfo* RspConfRollCallInfo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_AddrInfo >&
RspConfRollCallInfo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_AddrInfo >*
RspConfRollCallInfo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.RspConfRollCallInfo.DomainInfo domains = 10;
inline int RspConfRollCallInfo::domains_size() const {
  return domains_.size();
}
inline void RspConfRollCallInfo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::RspConfRollCallInfo_DomainInfo& RspConfRollCallInfo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfRollCallInfo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::RspConfRollCallInfo_DomainInfo* RspConfRollCallInfo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfRollCallInfo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::RspConfRollCallInfo_DomainInfo* RspConfRollCallInfo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfRollCallInfo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_DomainInfo >&
RspConfRollCallInfo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfRollCallInfo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfRollCallInfo_DomainInfo >*
RspConfRollCallInfo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfRollCallInfo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// RspSendAssistVideo_IPPORT

// optional uint32 nettype = 1;
inline bool RspSendAssistVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 RspSendAssistVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.IPPORT.nettype)
  return nettype_;
}
inline void RspSendAssistVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool RspSendAssistVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspSendAssistVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.IPPORT.ip)
  return *ip_;
}
inline void RspSendAssistVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.IPPORT.ip)
}
inline void RspSendAssistVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideo.IPPORT.ip)
}
inline void RspSendAssistVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideo.IPPORT.ip)
}
inline ::std::string* RspSendAssistVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* RspSendAssistVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool RspSendAssistVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspSendAssistVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.IPPORT.port)
  return port_;
}
inline void RspSendAssistVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// RspSendAssistVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool RspSendAssistVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 RspSendAssistVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void RspSendAssistVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.RspSendAssistVideo.IPPORT ipportinfos = 2;
inline int RspSendAssistVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void RspSendAssistVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideo_IPPORT& RspSendAssistVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideo_IPPORT* RspSendAssistVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideo_IPPORT* RspSendAssistVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_IPPORT >&
RspSendAssistVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_IPPORT >*
RspSendAssistVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool RspSendAssistVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RspSendAssistVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.AddrInfo.level)
  return level_;
}
inline void RspSendAssistVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// RspSendAssistVideo_DomainInfo

// optional string dname = 1;
inline bool RspSendAssistVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& RspSendAssistVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
  return *dname_;
}
inline void RspSendAssistVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
}
inline void RspSendAssistVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
}
inline void RspSendAssistVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
}
inline ::std::string* RspSendAssistVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* RspSendAssistVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool RspSendAssistVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 RspSendAssistVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void RspSendAssistVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// RspSendAssistVideo

// optional bool isok = 1;
inline bool RspSendAssistVideo::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSendAssistVideo::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSendAssistVideo::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSendAssistVideo::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspSendAssistVideo::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.isok)
  return isok_;
}
inline void RspSendAssistVideo::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.isok)
}

// optional uint64 confid = 2;
inline bool RspSendAssistVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSendAssistVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSendAssistVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSendAssistVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspSendAssistVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.confid)
  return confid_;
}
inline void RspSendAssistVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.confid)
}

// optional uint32 terid = 3;
inline bool RspSendAssistVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSendAssistVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSendAssistVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSendAssistVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 RspSendAssistVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.terid)
  return terid_;
}
inline void RspSendAssistVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.terid)
}

// optional string failreason = 4;
inline bool RspSendAssistVideo::has_failreason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspSendAssistVideo::set_has_failreason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspSendAssistVideo::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspSendAssistVideo::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspSendAssistVideo::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.failreason)
  return *failreason_;
}
inline void RspSendAssistVideo::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.failreason)
}
inline void RspSendAssistVideo::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideo.failreason)
}
inline void RspSendAssistVideo::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideo.failreason)
}
inline ::std::string* RspSendAssistVideo::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.failreason)
  return failreason_;
}
inline ::std::string* RspSendAssistVideo::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideo::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideo.failreason)
}

// optional string domainname = 5;
inline bool RspSendAssistVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspSendAssistVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspSendAssistVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspSendAssistVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspSendAssistVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.domainname)
  return *domainname_;
}
inline void RspSendAssistVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.domainname)
}
inline void RspSendAssistVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspSendAssistVideo.domainname)
}
inline void RspSendAssistVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspSendAssistVideo.domainname)
}
inline ::std::string* RspSendAssistVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.domainname)
  return domainname_;
}
inline ::std::string* RspSendAssistVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSendAssistVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspSendAssistVideo.domainname)
}

// repeated .SRMsgs.RspSendAssistVideo.AddrInfo svraddrs = 6;
inline int RspSendAssistVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void RspSendAssistVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideo_AddrInfo& RspSendAssistVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideo_AddrInfo* RspSendAssistVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideo_AddrInfo* RspSendAssistVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_AddrInfo >&
RspSendAssistVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_AddrInfo >*
RspSendAssistVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.RspSendAssistVideo.DomainInfo domains = 7;
inline int RspSendAssistVideo::domains_size() const {
  return domains_.size();
}
inline void RspSendAssistVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::RspSendAssistVideo_DomainInfo& RspSendAssistVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::RspSendAssistVideo_DomainInfo* RspSendAssistVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspSendAssistVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::RspSendAssistVideo_DomainInfo* RspSendAssistVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspSendAssistVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_DomainInfo >&
RspSendAssistVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspSendAssistVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspSendAssistVideo_DomainInfo >*
RspSendAssistVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspSendAssistVideo.domains)
  return &domains_;
}

// optional uint32 errorcode = 8;
inline bool RspSendAssistVideo::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspSendAssistVideo::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspSendAssistVideo::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspSendAssistVideo::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspSendAssistVideo::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspSendAssistVideo.errorcode)
  return errorcode_;
}
inline void RspSendAssistVideo::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspSendAssistVideo.errorcode)
}

// -------------------------------------------------------------------

// IndTerJoinedGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerJoinedGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerJoinedGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerJoinedGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void IndTerJoinedGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerJoinedGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerJoinedGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int IndTerJoinedGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT& IndTerJoinedGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT* IndTerJoinedGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT* IndTerJoinedGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT >&
IndTerJoinedGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_IPPORT >*
IndTerJoinedGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerJoinedGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void IndTerJoinedGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerJoinedGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool IndTerJoinedGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerJoinedGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerJoinedGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerJoinedGroupMeetingRoom_MediaAddrInfo

// optional string netmpip = 1;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_netmpip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_netmpip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_netmpip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_netmpip() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_->clear();
  }
  clear_has_netmpip();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom_MediaAddrInfo::netmpip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
  return *netmpip_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_netmpip(const ::std::string& value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_netmpip(const char* value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_netmpip(const char* value, size_t size) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_MediaAddrInfo::mutable_netmpip() {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
  return netmpip_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom_MediaAddrInfo::release_netmpip() {
  clear_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netmpip_;
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_allocated_netmpip(::std::string* netmpip) {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (netmpip) {
    set_has_netmpip();
    netmpip_ = netmpip;
  } else {
    clear_has_netmpip();
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.netmpip)
}

// optional uint32 audiodatarecvport = 2;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_audiodatarecvport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_audiodatarecvport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_audiodatarecvport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_audiodatarecvport() {
  audiodatarecvport_ = 0u;
  clear_has_audiodatarecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::audiodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.audiodatarecvport)
  return audiodatarecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_audiodatarecvport(::google::protobuf::uint32 value) {
  set_has_audiodatarecvport();
  audiodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.audiodatarecvport)
}

// optional uint32 audioctrlrecvport = 3;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_audioctrlrecvport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_audioctrlrecvport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_audioctrlrecvport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_audioctrlrecvport() {
  audioctrlrecvport_ = 0u;
  clear_has_audioctrlrecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::audioctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.audioctrlrecvport)
  return audioctrlrecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_audioctrlrecvport(::google::protobuf::uint32 value) {
  set_has_audioctrlrecvport();
  audioctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.audioctrlrecvport)
}

// optional uint32 videodatarecvport = 4;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_videodatarecvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_videodatarecvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_videodatarecvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_videodatarecvport() {
  videodatarecvport_ = 0u;
  clear_has_videodatarecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::videodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.videodatarecvport)
  return videodatarecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_videodatarecvport(::google::protobuf::uint32 value) {
  set_has_videodatarecvport();
  videodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.videodatarecvport)
}

// optional uint32 videoctrlrecvport = 5;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_videoctrlrecvport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_videoctrlrecvport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_videoctrlrecvport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_videoctrlrecvport() {
  videoctrlrecvport_ = 0u;
  clear_has_videoctrlrecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::videoctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.videoctrlrecvport)
  return videoctrlrecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_videoctrlrecvport(::google::protobuf::uint32 value) {
  set_has_videoctrlrecvport();
  videoctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.videoctrlrecvport)
}

// optional uint32 video2datarecvport = 6;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_video2datarecvport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_video2datarecvport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_video2datarecvport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_video2datarecvport() {
  video2datarecvport_ = 0u;
  clear_has_video2datarecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::video2datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video2datarecvport)
  return video2datarecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_video2datarecvport(::google::protobuf::uint32 value) {
  set_has_video2datarecvport();
  video2datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video2datarecvport)
}

// optional uint32 video2ctrlrecvport = 7;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_video2ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_video2ctrlrecvport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_video2ctrlrecvport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_video2ctrlrecvport() {
  video2ctrlrecvport_ = 0u;
  clear_has_video2ctrlrecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::video2ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video2ctrlrecvport)
  return video2ctrlrecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_video2ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video2ctrlrecvport();
  video2ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video2ctrlrecvport)
}

// optional uint32 video3datarecvport = 8;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_video3datarecvport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_video3datarecvport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_video3datarecvport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_video3datarecvport() {
  video3datarecvport_ = 0u;
  clear_has_video3datarecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::video3datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video3datarecvport)
  return video3datarecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_video3datarecvport(::google::protobuf::uint32 value) {
  set_has_video3datarecvport();
  video3datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video3datarecvport)
}

// optional uint32 video3ctrlrecvport = 9;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_video3ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_video3ctrlrecvport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_video3ctrlrecvport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_video3ctrlrecvport() {
  video3ctrlrecvport_ = 0u;
  clear_has_video3ctrlrecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::video3ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video3ctrlrecvport)
  return video3ctrlrecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_video3ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video3ctrlrecvport();
  video3ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.video3ctrlrecvport)
}

// optional uint32 desktopdatarecvport = 10;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_desktopdatarecvport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_desktopdatarecvport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_desktopdatarecvport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_desktopdatarecvport() {
  desktopdatarecvport_ = 0u;
  clear_has_desktopdatarecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::desktopdatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.desktopdatarecvport)
  return desktopdatarecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_desktopdatarecvport(::google::protobuf::uint32 value) {
  set_has_desktopdatarecvport();
  desktopdatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.desktopdatarecvport)
}

// optional uint32 desktopctrlrecvport = 11;
inline bool IndTerJoinedGroupMeetingRoom_MediaAddrInfo::has_desktopctrlrecvport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_has_desktopctrlrecvport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_has_desktopctrlrecvport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::clear_desktopctrlrecvport() {
  desktopctrlrecvport_ = 0u;
  clear_has_desktopctrlrecvport();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom_MediaAddrInfo::desktopctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.desktopctrlrecvport)
  return desktopctrlrecvport_;
}
inline void IndTerJoinedGroupMeetingRoom_MediaAddrInfo::set_desktopctrlrecvport(::google::protobuf::uint32 value) {
  set_has_desktopctrlrecvport();
  desktopctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo.desktopctrlrecvport)
}

// -------------------------------------------------------------------

// IndTerJoinedGroupMeetingRoom

// optional uint32 terid = 1;
inline bool IndTerJoinedGroupMeetingRoom::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.terid)
  return terid_;
}
inline void IndTerJoinedGroupMeetingRoom::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.terid)
}

// optional uint32 channelid = 2;
inline bool IndTerJoinedGroupMeetingRoom::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.channelid)
  return channelid_;
}
inline void IndTerJoinedGroupMeetingRoom::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.channelid)
}

// optional uint64 confid = 3;
inline bool IndTerJoinedGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerJoinedGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.confid)
  return confid_;
}
inline void IndTerJoinedGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.confid)
}

// optional uint32 gmrtype = 4;
inline bool IndTerJoinedGroupMeetingRoom::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrtype)
  return gmrtype_;
}
inline void IndTerJoinedGroupMeetingRoom::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrtype)
}

// optional uint32 gmrid = 5;
inline bool IndTerJoinedGroupMeetingRoom::has_gmrid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_gmrid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrid)
  return gmrid_;
}
inline void IndTerJoinedGroupMeetingRoom::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrid)
}

// optional string gmrname = 6;
inline bool IndTerJoinedGroupMeetingRoom::has_gmrname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_gmrname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_gmrname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_gmrname() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_->clear();
  }
  clear_has_gmrname();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom::gmrname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
  return *gmrname_;
}
inline void IndTerJoinedGroupMeetingRoom::set_gmrname(const ::std::string& value) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
}
inline void IndTerJoinedGroupMeetingRoom::set_gmrname(const char* value) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
}
inline void IndTerJoinedGroupMeetingRoom::set_gmrname(const char* value, size_t size) {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  gmrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::mutable_gmrname() {
  set_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
  return gmrname_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::release_gmrname() {
  clear_has_gmrname();
  if (gmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmrname_;
    gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom::set_allocated_gmrname(::std::string* gmrname) {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (gmrname) {
    set_has_gmrname();
    gmrname_ = gmrname;
  } else {
    clear_has_gmrname();
    gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.gmrname)
}

// optional uint32 mediaencryptalg = 7;
inline bool IndTerJoinedGroupMeetingRoom::has_mediaencryptalg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_mediaencryptalg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_mediaencryptalg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_mediaencryptalg() {
  mediaencryptalg_ = 0u;
  clear_has_mediaencryptalg();
}
inline ::google::protobuf::uint32 IndTerJoinedGroupMeetingRoom::mediaencryptalg() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.mediaencryptalg)
  return mediaencryptalg_;
}
inline void IndTerJoinedGroupMeetingRoom::set_mediaencryptalg(::google::protobuf::uint32 value) {
  set_has_mediaencryptalg();
  mediaencryptalg_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.mediaencryptalg)
}

// optional bytes encryptionkey = 8;
inline bool IndTerJoinedGroupMeetingRoom::has_encryptionkey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_encryptionkey() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_encryptionkey() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_encryptionkey() {
  if (encryptionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptionkey_->clear();
  }
  clear_has_encryptionkey();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom::encryptionkey() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
  return *encryptionkey_;
}
inline void IndTerJoinedGroupMeetingRoom::set_encryptionkey(const ::std::string& value) {
  set_has_encryptionkey();
  if (encryptionkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptionkey_ = new ::std::string;
  }
  encryptionkey_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
}
inline void IndTerJoinedGroupMeetingRoom::set_encryptionkey(const char* value) {
  set_has_encryptionkey();
  if (encryptionkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptionkey_ = new ::std::string;
  }
  encryptionkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
}
inline void IndTerJoinedGroupMeetingRoom::set_encryptionkey(const void* value, size_t size) {
  set_has_encryptionkey();
  if (encryptionkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptionkey_ = new ::std::string;
  }
  encryptionkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::mutable_encryptionkey() {
  set_has_encryptionkey();
  if (encryptionkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptionkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
  return encryptionkey_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::release_encryptionkey() {
  clear_has_encryptionkey();
  if (encryptionkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptionkey_;
    encryptionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom::set_allocated_encryptionkey(::std::string* encryptionkey) {
  if (encryptionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptionkey_;
  }
  if (encryptionkey) {
    set_has_encryptionkey();
    encryptionkey_ = encryptionkey;
  } else {
    clear_has_encryptionkey();
    encryptionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.encryptionkey)
}

// optional string subject = 9;
inline bool IndTerJoinedGroupMeetingRoom::has_subject() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_subject() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_subject() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom::subject() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
  return *subject_;
}
inline void IndTerJoinedGroupMeetingRoom::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
}
inline void IndTerJoinedGroupMeetingRoom::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
}
inline void IndTerJoinedGroupMeetingRoom::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
  return subject_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.subject)
}

// optional .SRMsgs.IndTerJoinedGroupMeetingRoom.MediaAddrInfo mediaaddrs = 10;
inline bool IndTerJoinedGroupMeetingRoom::has_mediaaddrs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_mediaaddrs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_mediaaddrs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_mediaaddrs() {
  if (mediaaddrs_ != NULL) mediaaddrs_->::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo::Clear();
  clear_has_mediaaddrs();
}
inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo& IndTerJoinedGroupMeetingRoom::mediaaddrs() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.mediaaddrs)
  return mediaaddrs_ != NULL ? *mediaaddrs_ : *default_instance_->mediaaddrs_;
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* IndTerJoinedGroupMeetingRoom::mutable_mediaaddrs() {
  set_has_mediaaddrs();
  if (mediaaddrs_ == NULL) mediaaddrs_ = new ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.mediaaddrs)
  return mediaaddrs_;
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* IndTerJoinedGroupMeetingRoom::release_mediaaddrs() {
  clear_has_mediaaddrs();
  ::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* temp = mediaaddrs_;
  mediaaddrs_ = NULL;
  return temp;
}
inline void IndTerJoinedGroupMeetingRoom::set_allocated_mediaaddrs(::SRMsgs::IndTerJoinedGroupMeetingRoom_MediaAddrInfo* mediaaddrs) {
  delete mediaaddrs_;
  mediaaddrs_ = mediaaddrs;
  if (mediaaddrs) {
    set_has_mediaaddrs();
  } else {
    clear_has_mediaaddrs();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.mediaaddrs)
}

// optional string domainname = 11;
inline bool IndTerJoinedGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndTerJoinedGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndTerJoinedGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerJoinedGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void IndTerJoinedGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
}
inline void IndTerJoinedGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
}
inline void IndTerJoinedGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* IndTerJoinedGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerJoinedGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerJoinedGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.AddrInfo svraddrs = 12;
inline int IndTerJoinedGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerJoinedGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo& IndTerJoinedGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo* IndTerJoinedGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo* IndTerJoinedGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerJoinedGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo >&
IndTerJoinedGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerJoinedGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_AddrInfo >*
IndTerJoinedGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerJoinedGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerJoinedGroupMeetingRoom.DomainInfo domains = 13;
inline int IndTerJoinedGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void IndTerJoinedGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo& IndTerJoinedGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerJoinedGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo* IndTerJoinedGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerJoinedGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo* IndTerJoinedGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerJoinedGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo >&
IndTerJoinedGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerJoinedGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerJoinedGroupMeetingRoom_DomainInfo >*
IndTerJoinedGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerJoinedGroupMeetingRoom.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerEnterGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerEnterGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerEnterGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* IndTerEnterGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerEnterGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void IndTerEnterGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerEnterGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerEnterGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerEnterGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int IndTerEnterGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT& IndTerEnterGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT* IndTerEnterGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT* IndTerEnterGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT >&
IndTerEnterGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_IPPORT >*
IndTerEnterGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerEnterGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void IndTerEnterGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerEnterGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool IndTerEnterGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* IndTerEnterGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerEnterGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerEnterGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerEnterGroupMeetingRoom

// optional uint32 terid = 1;
inline bool IndTerEnterGroupMeetingRoom::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerEnterGroupMeetingRoom::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.terid)
  return terid_;
}
inline void IndTerEnterGroupMeetingRoom::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.terid)
}

// optional uint64 confid = 2;
inline bool IndTerEnterGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerEnterGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerEnterGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.confid)
  return confid_;
}
inline void IndTerEnterGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.confid)
}

// optional string domainname = 3;
inline bool IndTerEnterGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerEnterGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void IndTerEnterGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
}
inline void IndTerEnterGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
}
inline void IndTerEnterGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
}
inline ::std::string* IndTerEnterGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.IndTerEnterGroupMeetingRoom.AddrInfo svraddrs = 4;
inline int IndTerEnterGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerEnterGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo& IndTerEnterGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo* IndTerEnterGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo* IndTerEnterGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerEnterGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo >&
IndTerEnterGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerEnterGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_AddrInfo >*
IndTerEnterGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerEnterGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerEnterGroupMeetingRoom.DomainInfo domains = 5;
inline int IndTerEnterGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void IndTerEnterGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo& IndTerEnterGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo* IndTerEnterGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo* IndTerEnterGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerEnterGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo >&
IndTerEnterGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerEnterGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerEnterGroupMeetingRoom_DomainInfo >*
IndTerEnterGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerEnterGroupMeetingRoom.domains)
  return &domains_;
}

// optional uint32 entergmrteruid = 6;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrteruid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrteruid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrteruid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrteruid() {
  entergmrteruid_ = 0u;
  clear_has_entergmrteruid();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::entergmrteruid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrteruid)
  return entergmrteruid_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrteruid(::google::protobuf::uint32 value) {
  set_has_entergmrteruid();
  entergmrteruid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrteruid)
}

// optional string entergmrtername = 7;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrtername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrtername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrtername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrtername() {
  if (entergmrtername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrtername_->clear();
  }
  clear_has_entergmrtername();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom::entergmrtername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
  return *entergmrtername_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrtername(const ::std::string& value) {
  set_has_entergmrtername();
  if (entergmrtername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrtername_ = new ::std::string;
  }
  entergmrtername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrtername(const char* value) {
  set_has_entergmrtername();
  if (entergmrtername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrtername_ = new ::std::string;
  }
  entergmrtername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrtername(const char* value, size_t size) {
  set_has_entergmrtername();
  if (entergmrtername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrtername_ = new ::std::string;
  }
  entergmrtername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
}
inline ::std::string* IndTerEnterGroupMeetingRoom::mutable_entergmrtername() {
  set_has_entergmrtername();
  if (entergmrtername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrtername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
  return entergmrtername_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom::release_entergmrtername() {
  clear_has_entergmrtername();
  if (entergmrtername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entergmrtername_;
    entergmrtername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom::set_allocated_entergmrtername(::std::string* entergmrtername) {
  if (entergmrtername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entergmrtername_;
  }
  if (entergmrtername) {
    set_has_entergmrtername();
    entergmrtername_ = entergmrtername;
  } else {
    clear_has_entergmrtername();
    entergmrtername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtername)
}

// optional string entergmrterdname = 8;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrterdname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrterdname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrterdname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrterdname() {
  if (entergmrterdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrterdname_->clear();
  }
  clear_has_entergmrterdname();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom::entergmrterdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
  return *entergmrterdname_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrterdname(const ::std::string& value) {
  set_has_entergmrterdname();
  if (entergmrterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrterdname_ = new ::std::string;
  }
  entergmrterdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrterdname(const char* value) {
  set_has_entergmrterdname();
  if (entergmrterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrterdname_ = new ::std::string;
  }
  entergmrterdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrterdname(const char* value, size_t size) {
  set_has_entergmrterdname();
  if (entergmrterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrterdname_ = new ::std::string;
  }
  entergmrterdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
}
inline ::std::string* IndTerEnterGroupMeetingRoom::mutable_entergmrterdname() {
  set_has_entergmrterdname();
  if (entergmrterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrterdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
  return entergmrterdname_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom::release_entergmrterdname() {
  clear_has_entergmrterdname();
  if (entergmrterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entergmrterdname_;
    entergmrterdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom::set_allocated_entergmrterdname(::std::string* entergmrterdname) {
  if (entergmrterdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entergmrterdname_;
  }
  if (entergmrterdname) {
    set_has_entergmrterdname();
    entergmrterdname_ = entergmrterdname;
  } else {
    clear_has_entergmrterdname();
    entergmrterdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterdname)
}

// optional uint32 entergmrtype = 9;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrtype() {
  entergmrtype_ = 0u;
  clear_has_entergmrtype();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::entergmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtype)
  return entergmrtype_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrtype(::google::protobuf::uint32 value) {
  set_has_entergmrtype();
  entergmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtype)
}

// optional uint32 entergmrid = 10;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrid() {
  entergmrid_ = 0u;
  clear_has_entergmrid();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::entergmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrid)
  return entergmrid_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrid(::google::protobuf::uint32 value) {
  set_has_entergmrid();
  entergmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrid)
}

// optional string entergmrname = 11;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrname() {
  if (entergmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrname_->clear();
  }
  clear_has_entergmrname();
}
inline const ::std::string& IndTerEnterGroupMeetingRoom::entergmrname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
  return *entergmrname_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrname(const ::std::string& value) {
  set_has_entergmrname();
  if (entergmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrname_ = new ::std::string;
  }
  entergmrname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrname(const char* value) {
  set_has_entergmrname();
  if (entergmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrname_ = new ::std::string;
  }
  entergmrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrname(const char* value, size_t size) {
  set_has_entergmrname();
  if (entergmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrname_ = new ::std::string;
  }
  entergmrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
}
inline ::std::string* IndTerEnterGroupMeetingRoom::mutable_entergmrname() {
  set_has_entergmrname();
  if (entergmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entergmrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
  return entergmrname_;
}
inline ::std::string* IndTerEnterGroupMeetingRoom::release_entergmrname() {
  clear_has_entergmrname();
  if (entergmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entergmrname_;
    entergmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerEnterGroupMeetingRoom::set_allocated_entergmrname(::std::string* entergmrname) {
  if (entergmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entergmrname_;
  }
  if (entergmrname) {
    set_has_entergmrname();
    entergmrname_ = entergmrname;
  } else {
    clear_has_entergmrname();
    entergmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrname)
}

// optional uint32 entergmrtermtype = 12;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrtermtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrtermtype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrtermtype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrtermtype() {
  entergmrtermtype_ = 0u;
  clear_has_entergmrtermtype();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::entergmrtermtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtermtype)
  return entergmrtermtype_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrtermtype(::google::protobuf::uint32 value) {
  set_has_entergmrtermtype();
  entergmrtermtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrtermtype)
}

// optional uint32 entergmrterprodtype = 13;
inline bool IndTerEnterGroupMeetingRoom::has_entergmrterprodtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IndTerEnterGroupMeetingRoom::set_has_entergmrterprodtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IndTerEnterGroupMeetingRoom::clear_has_entergmrterprodtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IndTerEnterGroupMeetingRoom::clear_entergmrterprodtype() {
  entergmrterprodtype_ = 0u;
  clear_has_entergmrterprodtype();
}
inline ::google::protobuf::uint32 IndTerEnterGroupMeetingRoom::entergmrterprodtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterprodtype)
  return entergmrterprodtype_;
}
inline void IndTerEnterGroupMeetingRoom::set_entergmrterprodtype(::google::protobuf::uint32 value) {
  set_has_entergmrterprodtype();
  entergmrterprodtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerEnterGroupMeetingRoom.entergmrterprodtype)
}

// -------------------------------------------------------------------

// IndTerLeaveGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerLeaveGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerLeaveGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerLeaveGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void IndTerLeaveGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerLeaveGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerLeaveGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int IndTerLeaveGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT& IndTerLeaveGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT* IndTerLeaveGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT* IndTerLeaveGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT >&
IndTerLeaveGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_IPPORT >*
IndTerLeaveGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerLeaveGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void IndTerLeaveGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerLeaveGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool IndTerLeaveGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerLeaveGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerLeaveGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerLeaveGroupMeetingRoom

// optional uint32 suid = 1;
inline bool IndTerLeaveGroupMeetingRoom::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.suid)
  return suid_;
}
inline void IndTerLeaveGroupMeetingRoom::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.suid)
}

// optional uint64 confid = 2;
inline bool IndTerLeaveGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerLeaveGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.confid)
  return confid_;
}
inline void IndTerLeaveGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.confid)
}

// optional string domainname = 3;
inline bool IndTerLeaveGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void IndTerLeaveGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
}
inline void IndTerLeaveGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
}
inline void IndTerLeaveGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.AddrInfo svraddrs = 4;
inline int IndTerLeaveGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerLeaveGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo& IndTerLeaveGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo* IndTerLeaveGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo* IndTerLeaveGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerLeaveGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo >&
IndTerLeaveGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerLeaveGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_AddrInfo >*
IndTerLeaveGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerLeaveGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerLeaveGroupMeetingRoom.DomainInfo domains = 5;
inline int IndTerLeaveGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void IndTerLeaveGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo& IndTerLeaveGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo* IndTerLeaveGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo* IndTerLeaveGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerLeaveGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo >&
IndTerLeaveGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerLeaveGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerLeaveGroupMeetingRoom_DomainInfo >*
IndTerLeaveGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerLeaveGroupMeetingRoom.domains)
  return &domains_;
}

// optional uint32 leavesuid = 6;
inline bool IndTerLeaveGroupMeetingRoom::has_leavesuid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavesuid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavesuid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavesuid() {
  leavesuid_ = 0u;
  clear_has_leavesuid();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::leavesuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavesuid)
  return leavesuid_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavesuid(::google::protobuf::uint32 value) {
  set_has_leavesuid();
  leavesuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavesuid)
}

// optional string leavetername = 7;
inline bool IndTerLeaveGroupMeetingRoom::has_leavetername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavetername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavetername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavetername() {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_->clear();
  }
  clear_has_leavetername();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom::leavetername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
  return *leavetername_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavetername(const ::std::string& value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavetername(const char* value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavetername(const char* value, size_t size) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::mutable_leavetername() {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
  return leavetername_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::release_leavetername() {
  clear_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leavetername_;
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom::set_allocated_leavetername(::std::string* leavetername) {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leavetername_;
  }
  if (leavetername) {
    set_has_leavetername();
    leavetername_ = leavetername;
  } else {
    clear_has_leavetername();
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetername)
}

// optional string leaveterdname = 8;
inline bool IndTerLeaveGroupMeetingRoom::has_leaveterdname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leaveterdname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leaveterdname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leaveterdname() {
  if (leaveterdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaveterdname_->clear();
  }
  clear_has_leaveterdname();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom::leaveterdname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
  return *leaveterdname_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leaveterdname(const ::std::string& value) {
  set_has_leaveterdname();
  if (leaveterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaveterdname_ = new ::std::string;
  }
  leaveterdname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
}
inline void IndTerLeaveGroupMeetingRoom::set_leaveterdname(const char* value) {
  set_has_leaveterdname();
  if (leaveterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaveterdname_ = new ::std::string;
  }
  leaveterdname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
}
inline void IndTerLeaveGroupMeetingRoom::set_leaveterdname(const char* value, size_t size) {
  set_has_leaveterdname();
  if (leaveterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaveterdname_ = new ::std::string;
  }
  leaveterdname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::mutable_leaveterdname() {
  set_has_leaveterdname();
  if (leaveterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaveterdname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
  return leaveterdname_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::release_leaveterdname() {
  clear_has_leaveterdname();
  if (leaveterdname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leaveterdname_;
    leaveterdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom::set_allocated_leaveterdname(::std::string* leaveterdname) {
  if (leaveterdname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leaveterdname_;
  }
  if (leaveterdname) {
    set_has_leaveterdname();
    leaveterdname_ = leaveterdname;
  } else {
    clear_has_leaveterdname();
    leaveterdname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterdname)
}

// optional uint32 leavegmrtype = 9;
inline bool IndTerLeaveGroupMeetingRoom::has_leavegmrtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavegmrtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavegmrtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavegmrtype() {
  leavegmrtype_ = 0u;
  clear_has_leavegmrtype();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::leavegmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrtype)
  return leavegmrtype_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavegmrtype(::google::protobuf::uint32 value) {
  set_has_leavegmrtype();
  leavegmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrtype)
}

// optional uint32 leavegmrid = 10;
inline bool IndTerLeaveGroupMeetingRoom::has_leavegmrid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavegmrid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavegmrid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavegmrid() {
  leavegmrid_ = 0u;
  clear_has_leavegmrid();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::leavegmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrid)
  return leavegmrid_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavegmrid(::google::protobuf::uint32 value) {
  set_has_leavegmrid();
  leavegmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrid)
}

// optional string leavegmrname = 11;
inline bool IndTerLeaveGroupMeetingRoom::has_leavegmrname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavegmrname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavegmrname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavegmrname() {
  if (leavegmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavegmrname_->clear();
  }
  clear_has_leavegmrname();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom::leavegmrname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
  return *leavegmrname_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavegmrname(const ::std::string& value) {
  set_has_leavegmrname();
  if (leavegmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavegmrname_ = new ::std::string;
  }
  leavegmrname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavegmrname(const char* value) {
  set_has_leavegmrname();
  if (leavegmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavegmrname_ = new ::std::string;
  }
  leavegmrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavegmrname(const char* value, size_t size) {
  set_has_leavegmrname();
  if (leavegmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavegmrname_ = new ::std::string;
  }
  leavegmrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::mutable_leavegmrname() {
  set_has_leavegmrname();
  if (leavegmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavegmrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
  return leavegmrname_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::release_leavegmrname() {
  clear_has_leavegmrname();
  if (leavegmrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leavegmrname_;
    leavegmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom::set_allocated_leavegmrname(::std::string* leavegmrname) {
  if (leavegmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leavegmrname_;
  }
  if (leavegmrname) {
    set_has_leavegmrname();
    leavegmrname_ = leavegmrname;
  } else {
    clear_has_leavegmrname();
    leavegmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.leavegmrname)
}

// optional string leavereason = 12;
inline bool IndTerLeaveGroupMeetingRoom::has_leavereason() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavereason() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavereason() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavereason() {
  if (leavereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavereason_->clear();
  }
  clear_has_leavereason();
}
inline const ::std::string& IndTerLeaveGroupMeetingRoom::leavereason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
  return *leavereason_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavereason(const ::std::string& value) {
  set_has_leavereason();
  if (leavereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavereason_ = new ::std::string;
  }
  leavereason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavereason(const char* value) {
  set_has_leavereason();
  if (leavereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavereason_ = new ::std::string;
  }
  leavereason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
}
inline void IndTerLeaveGroupMeetingRoom::set_leavereason(const char* value, size_t size) {
  set_has_leavereason();
  if (leavereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavereason_ = new ::std::string;
  }
  leavereason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::mutable_leavereason() {
  set_has_leavereason();
  if (leavereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavereason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
  return leavereason_;
}
inline ::std::string* IndTerLeaveGroupMeetingRoom::release_leavereason() {
  clear_has_leavereason();
  if (leavereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leavereason_;
    leavereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerLeaveGroupMeetingRoom::set_allocated_leavereason(::std::string* leavereason) {
  if (leavereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leavereason_;
  }
  if (leavereason) {
    set_has_leavereason();
    leavereason_ = leavereason;
  } else {
    clear_has_leavereason();
    leavereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerLeaveGroupMeetingRoom.leavereason)
}

// optional uint32 errorcode = 13;
inline bool IndTerLeaveGroupMeetingRoom::has_errorcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_errorcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.errorcode)
  return errorcode_;
}
inline void IndTerLeaveGroupMeetingRoom::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.errorcode)
}

// optional uint32 leavetermtype = 14;
inline bool IndTerLeaveGroupMeetingRoom::has_leavetermtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leavetermtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leavetermtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leavetermtype() {
  leavetermtype_ = 0u;
  clear_has_leavetermtype();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::leavetermtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetermtype)
  return leavetermtype_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leavetermtype(::google::protobuf::uint32 value) {
  set_has_leavetermtype();
  leavetermtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leavetermtype)
}

// optional uint32 leaveterprodtype = 15;
inline bool IndTerLeaveGroupMeetingRoom::has_leaveterprodtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IndTerLeaveGroupMeetingRoom::set_has_leaveterprodtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_has_leaveterprodtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IndTerLeaveGroupMeetingRoom::clear_leaveterprodtype() {
  leaveterprodtype_ = 0u;
  clear_has_leaveterprodtype();
}
inline ::google::protobuf::uint32 IndTerLeaveGroupMeetingRoom::leaveterprodtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterprodtype)
  return leaveterprodtype_;
}
inline void IndTerLeaveGroupMeetingRoom::set_leaveterprodtype(::google::protobuf::uint32 value) {
  set_has_leaveterprodtype();
  leaveterprodtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerLeaveGroupMeetingRoom.leaveterprodtype)
}

// -------------------------------------------------------------------

// IndMCBeatToGroupMeetingRoomTer_IPPORT

// optional uint32 nettype = 1;
inline bool IndMCBeatToGroupMeetingRoomTer_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.nettype)
  return nettype_;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndMCBeatToGroupMeetingRoomTer_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndMCBeatToGroupMeetingRoomTer_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
  return *ip_;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndMCBeatToGroupMeetingRoomTer_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.port)
  return port_;
}
inline void IndMCBeatToGroupMeetingRoomTer_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT.port)
}

// -------------------------------------------------------------------

// IndMCBeatToGroupMeetingRoomTer_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndMCBeatToGroupMeetingRoomTer_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.IPPORT ipportinfos = 2;
inline int IndMCBeatToGroupMeetingRoomTer_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT& IndMCBeatToGroupMeetingRoomTer_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT* IndMCBeatToGroupMeetingRoomTer_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT* IndMCBeatToGroupMeetingRoomTer_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT >&
IndMCBeatToGroupMeetingRoomTer_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_IPPORT >*
IndMCBeatToGroupMeetingRoomTer_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndMCBeatToGroupMeetingRoomTer_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.level)
  return level_;
}
inline void IndMCBeatToGroupMeetingRoomTer_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndMCBeatToGroupMeetingRoomTer_DomainInfo

// optional string dname = 1;
inline bool IndMCBeatToGroupMeetingRoomTer_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndMCBeatToGroupMeetingRoomTer_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
  return *dname_;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndMCBeatToGroupMeetingRoomTer_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndMCBeatToGroupMeetingRoomTer_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndMCBeatToGroupMeetingRoomTer

// optional uint32 suid = 1;
inline bool IndMCBeatToGroupMeetingRoomTer::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.suid)
  return suid_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.suid)
}

// optional uint64 confid = 2;
inline bool IndMCBeatToGroupMeetingRoomTer::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndMCBeatToGroupMeetingRoomTer::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.confid)
  return confid_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.confid)
}

// optional uint32 gmrtype = 3;
inline bool IndMCBeatToGroupMeetingRoomTer::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.gmrtype)
  return gmrtype_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.gmrtype)
}

// optional uint32 gmrid = 4;
inline bool IndMCBeatToGroupMeetingRoomTer::has_gmrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_gmrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.gmrid)
  return gmrid_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.gmrid)
}

// optional string domainname = 5;
inline bool IndMCBeatToGroupMeetingRoomTer::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndMCBeatToGroupMeetingRoomTer::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
  return *domainname_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
}
inline void IndMCBeatToGroupMeetingRoomTer::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
}
inline void IndMCBeatToGroupMeetingRoomTer::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
  return domainname_;
}
inline ::std::string* IndMCBeatToGroupMeetingRoomTer::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCBeatToGroupMeetingRoomTer::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domainname)
}

// repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.AddrInfo svraddrs = 6;
inline int IndMCBeatToGroupMeetingRoomTer::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo& IndMCBeatToGroupMeetingRoomTer::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo* IndMCBeatToGroupMeetingRoomTer::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo* IndMCBeatToGroupMeetingRoomTer::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndMCBeatToGroupMeetingRoomTer.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo >&
IndMCBeatToGroupMeetingRoomTer::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_AddrInfo >*
IndMCBeatToGroupMeetingRoomTer::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndMCBeatToGroupMeetingRoomTer.DomainInfo domains = 7;
inline int IndMCBeatToGroupMeetingRoomTer::domains_size() const {
  return domains_.size();
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo& IndMCBeatToGroupMeetingRoomTer::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo* IndMCBeatToGroupMeetingRoomTer::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo* IndMCBeatToGroupMeetingRoomTer::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo >&
IndMCBeatToGroupMeetingRoomTer::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndMCBeatToGroupMeetingRoomTer_DomainInfo >*
IndMCBeatToGroupMeetingRoomTer::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndMCBeatToGroupMeetingRoomTer.domains)
  return &domains_;
}

// optional uint32 termtype = 8;
inline bool IndMCBeatToGroupMeetingRoomTer::has_termtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_termtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.termtype)
  return termtype_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.termtype)
}

// optional uint32 producttype = 9;
inline bool IndMCBeatToGroupMeetingRoomTer::has_producttype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_has_producttype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndMCBeatToGroupMeetingRoomTer::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndMCBeatToGroupMeetingRoomTer::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCBeatToGroupMeetingRoomTer.producttype)
  return producttype_;
}
inline void IndMCBeatToGroupMeetingRoomTer::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCBeatToGroupMeetingRoomTer.producttype)
}

// -------------------------------------------------------------------

// IndTerTransferToOtherGroupMeetingRoom_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerTransferToOtherGroupMeetingRoom_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.nettype)
  return nettype_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerTransferToOtherGroupMeetingRoom_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerTransferToOtherGroupMeetingRoom_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
  return *ip_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerTransferToOtherGroupMeetingRoom_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.port)
  return port_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerTransferToOtherGroupMeetingRoom_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerTransferToOtherGroupMeetingRoom_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.IPPORT ipportinfos = 2;
inline int IndTerTransferToOtherGroupMeetingRoom_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT& IndTerTransferToOtherGroupMeetingRoom_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT* IndTerTransferToOtherGroupMeetingRoom_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT* IndTerTransferToOtherGroupMeetingRoom_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT >&
IndTerTransferToOtherGroupMeetingRoom_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_IPPORT >*
IndTerTransferToOtherGroupMeetingRoom_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerTransferToOtherGroupMeetingRoom_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.level)
  return level_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerTransferToOtherGroupMeetingRoom_DomainInfo

// optional string dname = 1;
inline bool IndTerTransferToOtherGroupMeetingRoom_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerTransferToOtherGroupMeetingRoom_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
  return *dname_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerTransferToOtherGroupMeetingRoom_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerTransferToOtherGroupMeetingRoom_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerTransferToOtherGroupMeetingRoom

// optional uint32 suid = 1;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.suid)
  return suid_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.suid)
}

// optional uint64 confid = 2;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerTransferToOtherGroupMeetingRoom::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.confid)
  return confid_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.confid)
}

// optional uint32 gmrtype = 3;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_gmrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_gmrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_gmrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_gmrtype() {
  gmrtype_ = 0u;
  clear_has_gmrtype();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom::gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.gmrtype)
  return gmrtype_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_gmrtype(::google::protobuf::uint32 value) {
  set_has_gmrtype();
  gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.gmrtype)
}

// optional uint32 gmrid = 4;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_gmrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_gmrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_gmrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_gmrid() {
  gmrid_ = 0u;
  clear_has_gmrid();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom::gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.gmrid)
  return gmrid_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_gmrid(::google::protobuf::uint32 value) {
  set_has_gmrid();
  gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.gmrid)
}

// optional string domainname = 5;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerTransferToOtherGroupMeetingRoom::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
  return *domainname_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
  return domainname_;
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domainname)
}

// repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.AddrInfo svraddrs = 6;
inline int IndTerTransferToOtherGroupMeetingRoom::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo& IndTerTransferToOtherGroupMeetingRoom::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo* IndTerTransferToOtherGroupMeetingRoom::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo* IndTerTransferToOtherGroupMeetingRoom::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo >&
IndTerTransferToOtherGroupMeetingRoom::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_AddrInfo >*
IndTerTransferToOtherGroupMeetingRoom::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerTransferToOtherGroupMeetingRoom.DomainInfo domains = 7;
inline int IndTerTransferToOtherGroupMeetingRoom::domains_size() const {
  return domains_.size();
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo& IndTerTransferToOtherGroupMeetingRoom::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo* IndTerTransferToOtherGroupMeetingRoom::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo* IndTerTransferToOtherGroupMeetingRoom::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo >&
IndTerTransferToOtherGroupMeetingRoom::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerTransferToOtherGroupMeetingRoom_DomainInfo >*
IndTerTransferToOtherGroupMeetingRoom::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.domains)
  return &domains_;
}

// optional string to_dname = 8;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_to_dname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_to_dname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_to_dname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_to_dname() {
  if (to_dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_dname_->clear();
  }
  clear_has_to_dname();
}
inline const ::std::string& IndTerTransferToOtherGroupMeetingRoom::to_dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
  return *to_dname_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_dname(const ::std::string& value) {
  set_has_to_dname();
  if (to_dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_dname_ = new ::std::string;
  }
  to_dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_dname(const char* value) {
  set_has_to_dname();
  if (to_dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_dname_ = new ::std::string;
  }
  to_dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_dname(const char* value, size_t size) {
  set_has_to_dname();
  if (to_dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_dname_ = new ::std::string;
  }
  to_dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom::mutable_to_dname() {
  set_has_to_dname();
  if (to_dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
  return to_dname_;
}
inline ::std::string* IndTerTransferToOtherGroupMeetingRoom::release_to_dname() {
  clear_has_to_dname();
  if (to_dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_dname_;
    to_dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_allocated_to_dname(::std::string* to_dname) {
  if (to_dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_dname_;
  }
  if (to_dname) {
    set_has_to_dname();
    to_dname_ = to_dname;
  } else {
    clear_has_to_dname();
    to_dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_dname)
}

// optional uint64 to_confid = 9;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_to_confid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_to_confid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_to_confid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_to_confid() {
  to_confid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_confid();
}
inline ::google::protobuf::uint64 IndTerTransferToOtherGroupMeetingRoom::to_confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_confid)
  return to_confid_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_confid(::google::protobuf::uint64 value) {
  set_has_to_confid();
  to_confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_confid)
}

// optional uint32 to_gmrtype = 10;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_to_gmrtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_to_gmrtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_to_gmrtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_to_gmrtype() {
  to_gmrtype_ = 0u;
  clear_has_to_gmrtype();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom::to_gmrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_gmrtype)
  return to_gmrtype_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_gmrtype(::google::protobuf::uint32 value) {
  set_has_to_gmrtype();
  to_gmrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_gmrtype)
}

// optional uint32 to_gmrid = 11;
inline bool IndTerTransferToOtherGroupMeetingRoom::has_to_gmrid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_has_to_gmrid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_has_to_gmrid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndTerTransferToOtherGroupMeetingRoom::clear_to_gmrid() {
  to_gmrid_ = 0u;
  clear_has_to_gmrid();
}
inline ::google::protobuf::uint32 IndTerTransferToOtherGroupMeetingRoom::to_gmrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_gmrid)
  return to_gmrid_;
}
inline void IndTerTransferToOtherGroupMeetingRoom::set_to_gmrid(::google::protobuf::uint32 value) {
  set_has_to_gmrid();
  to_gmrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerTransferToOtherGroupMeetingRoom.to_gmrid)
}

// -------------------------------------------------------------------

// IndTerConfCallWaitingState_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerConfCallWaitingState_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfCallWaitingState_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.IPPORT.nettype)
  return nettype_;
}
inline void IndTerConfCallWaitingState_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerConfCallWaitingState_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfCallWaitingState_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerConfCallWaitingState_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
  return *ip_;
}
inline void IndTerConfCallWaitingState_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
}
inline void IndTerConfCallWaitingState_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
}
inline void IndTerConfCallWaitingState_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
}
inline ::std::string* IndTerConfCallWaitingState_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerConfCallWaitingState_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfCallWaitingState_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfCallWaitingState.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerConfCallWaitingState_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfCallWaitingState_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfCallWaitingState_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.IPPORT.port)
  return port_;
}
inline void IndTerConfCallWaitingState_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerConfCallWaitingState_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerConfCallWaitingState_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfCallWaitingState_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfCallWaitingState_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfCallWaitingState_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerConfCallWaitingState_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerConfCallWaitingState.IPPORT ipportinfos = 2;
inline int IndTerConfCallWaitingState_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerConfCallWaitingState_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerConfCallWaitingState_IPPORT& IndTerConfCallWaitingState_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_IPPORT* IndTerConfCallWaitingState_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_IPPORT* IndTerConfCallWaitingState_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_IPPORT >&
IndTerConfCallWaitingState_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfCallWaitingState.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_IPPORT >*
IndTerConfCallWaitingState_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfCallWaitingState.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerConfCallWaitingState_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfCallWaitingState_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfCallWaitingState_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfCallWaitingState_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.AddrInfo.level)
  return level_;
}
inline void IndTerConfCallWaitingState_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerConfCallWaitingState_DomainInfo

// optional string dname = 1;
inline bool IndTerConfCallWaitingState_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfCallWaitingState_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfCallWaitingState_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfCallWaitingState_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerConfCallWaitingState_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
  return *dname_;
}
inline void IndTerConfCallWaitingState_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
}
inline void IndTerConfCallWaitingState_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
}
inline void IndTerConfCallWaitingState_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
}
inline ::std::string* IndTerConfCallWaitingState_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerConfCallWaitingState_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfCallWaitingState_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerConfCallWaitingState_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfCallWaitingState_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfCallWaitingState_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfCallWaitingState_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerConfCallWaitingState_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerConfCallWaitingState

// optional uint64 confid = 1;
inline bool IndTerConfCallWaitingState::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfCallWaitingState::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfCallWaitingState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfCallWaitingState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerConfCallWaitingState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.confid)
  return confid_;
}
inline void IndTerConfCallWaitingState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.confid)
}

// optional uint32 terid = 2;
inline bool IndTerConfCallWaitingState::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfCallWaitingState::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfCallWaitingState::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfCallWaitingState::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerConfCallWaitingState::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.terid)
  return terid_;
}
inline void IndTerConfCallWaitingState::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.terid)
}

// optional bool ccwstate = 3;
inline bool IndTerConfCallWaitingState::has_ccwstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfCallWaitingState::set_has_ccwstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfCallWaitingState::clear_has_ccwstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfCallWaitingState::clear_ccwstate() {
  ccwstate_ = false;
  clear_has_ccwstate();
}
inline bool IndTerConfCallWaitingState::ccwstate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.ccwstate)
  return ccwstate_;
}
inline void IndTerConfCallWaitingState::set_ccwstate(bool value) {
  set_has_ccwstate();
  ccwstate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.ccwstate)
}

// optional string domainname = 4;
inline bool IndTerConfCallWaitingState::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerConfCallWaitingState::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerConfCallWaitingState::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerConfCallWaitingState::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerConfCallWaitingState::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.domainname)
  return *domainname_;
}
inline void IndTerConfCallWaitingState::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfCallWaitingState.domainname)
}
inline void IndTerConfCallWaitingState::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfCallWaitingState.domainname)
}
inline void IndTerConfCallWaitingState::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfCallWaitingState.domainname)
}
inline ::std::string* IndTerConfCallWaitingState::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.domainname)
  return domainname_;
}
inline ::std::string* IndTerConfCallWaitingState::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfCallWaitingState::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfCallWaitingState.domainname)
}

// repeated .SRMsgs.IndTerConfCallWaitingState.AddrInfo svraddrs = 5;
inline int IndTerConfCallWaitingState::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerConfCallWaitingState::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerConfCallWaitingState_AddrInfo& IndTerConfCallWaitingState::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_AddrInfo* IndTerConfCallWaitingState::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_AddrInfo* IndTerConfCallWaitingState::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfCallWaitingState.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_AddrInfo >&
IndTerConfCallWaitingState::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfCallWaitingState.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_AddrInfo >*
IndTerConfCallWaitingState::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfCallWaitingState.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerConfCallWaitingState.DomainInfo domains = 6;
inline int IndTerConfCallWaitingState::domains_size() const {
  return domains_.size();
}
inline void IndTerConfCallWaitingState::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerConfCallWaitingState_DomainInfo& IndTerConfCallWaitingState::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfCallWaitingState.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_DomainInfo* IndTerConfCallWaitingState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfCallWaitingState.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerConfCallWaitingState_DomainInfo* IndTerConfCallWaitingState::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfCallWaitingState.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_DomainInfo >&
IndTerConfCallWaitingState::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfCallWaitingState.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfCallWaitingState_DomainInfo >*
IndTerConfCallWaitingState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfCallWaitingState.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndAssistVideoTokenOwner_IPPORT

// optional uint32 nettype = 1;
inline bool IndAssistVideoTokenOwner_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.IPPORT.nettype)
  return nettype_;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAssistVideoTokenOwner_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAssistVideoTokenOwner_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
  return *ip_;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
}
inline void IndAssistVideoTokenOwner_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
}
inline void IndAssistVideoTokenOwner_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
}
inline ::std::string* IndAssistVideoTokenOwner_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAssistVideoTokenOwner_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoTokenOwner_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoTokenOwner.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAssistVideoTokenOwner_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoTokenOwner_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.IPPORT.port)
  return port_;
}
inline void IndAssistVideoTokenOwner_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAssistVideoTokenOwner_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAssistVideoTokenOwner_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoTokenOwner_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoTokenOwner_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoTokenOwner_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAssistVideoTokenOwner_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAssistVideoTokenOwner.IPPORT ipportinfos = 2;
inline int IndAssistVideoTokenOwner_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAssistVideoTokenOwner_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAssistVideoTokenOwner_IPPORT& IndAssistVideoTokenOwner_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_IPPORT* IndAssistVideoTokenOwner_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_IPPORT* IndAssistVideoTokenOwner_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_IPPORT >&
IndAssistVideoTokenOwner_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_IPPORT >*
IndAssistVideoTokenOwner_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAssistVideoTokenOwner_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoTokenOwner_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoTokenOwner_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoTokenOwner_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.level)
  return level_;
}
inline void IndAssistVideoTokenOwner_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAssistVideoTokenOwner_DomainInfo

// optional string dname = 1;
inline bool IndAssistVideoTokenOwner_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoTokenOwner_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoTokenOwner_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAssistVideoTokenOwner_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
  return *dname_;
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
}
inline ::std::string* IndAssistVideoTokenOwner_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAssistVideoTokenOwner_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAssistVideoTokenOwner_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoTokenOwner_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoTokenOwner_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAssistVideoTokenOwner_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAssistVideoTokenOwner

// optional uint32 avtoterid = 1;
inline bool IndAssistVideoTokenOwner::has_avtoterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoTokenOwner::set_has_avtoterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoTokenOwner::clear_has_avtoterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoTokenOwner::clear_avtoterid() {
  avtoterid_ = 0u;
  clear_has_avtoterid();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner::avtoterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.avtoterid)
  return avtoterid_;
}
inline void IndAssistVideoTokenOwner::set_avtoterid(::google::protobuf::uint32 value) {
  set_has_avtoterid();
  avtoterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.avtoterid)
}

// optional uint64 confid = 2;
inline bool IndAssistVideoTokenOwner::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoTokenOwner::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoTokenOwner::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoTokenOwner::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAssistVideoTokenOwner::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.confid)
  return confid_;
}
inline void IndAssistVideoTokenOwner::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.confid)
}

// optional uint32 terid = 3;
inline bool IndAssistVideoTokenOwner::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoTokenOwner::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoTokenOwner::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoTokenOwner::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAssistVideoTokenOwner::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.terid)
  return terid_;
}
inline void IndAssistVideoTokenOwner::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.terid)
}

// optional string domainname = 4;
inline bool IndAssistVideoTokenOwner::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndAssistVideoTokenOwner::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndAssistVideoTokenOwner::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndAssistVideoTokenOwner::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAssistVideoTokenOwner::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.domainname)
  return *domainname_;
}
inline void IndAssistVideoTokenOwner::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoTokenOwner.domainname)
}
inline void IndAssistVideoTokenOwner::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoTokenOwner.domainname)
}
inline void IndAssistVideoTokenOwner::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoTokenOwner.domainname)
}
inline ::std::string* IndAssistVideoTokenOwner::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.domainname)
  return domainname_;
}
inline ::std::string* IndAssistVideoTokenOwner::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoTokenOwner::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoTokenOwner.domainname)
}

// repeated .SRMsgs.IndAssistVideoTokenOwner.AddrInfo svraddrs = 5;
inline int IndAssistVideoTokenOwner::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAssistVideoTokenOwner::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo& IndAssistVideoTokenOwner::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo* IndAssistVideoTokenOwner::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo* IndAssistVideoTokenOwner::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoTokenOwner.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo >&
IndAssistVideoTokenOwner::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoTokenOwner.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_AddrInfo >*
IndAssistVideoTokenOwner::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoTokenOwner.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAssistVideoTokenOwner.DomainInfo domains = 6;
inline int IndAssistVideoTokenOwner::domains_size() const {
  return domains_.size();
}
inline void IndAssistVideoTokenOwner::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo& IndAssistVideoTokenOwner::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoTokenOwner.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo* IndAssistVideoTokenOwner::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoTokenOwner.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo* IndAssistVideoTokenOwner::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoTokenOwner.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo >&
IndAssistVideoTokenOwner::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoTokenOwner.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoTokenOwner_DomainInfo >*
IndAssistVideoTokenOwner::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoTokenOwner.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndAssistVideoOn_IPPORT

// optional uint32 nettype = 1;
inline bool IndAssistVideoOn_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOn_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOn_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOn_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAssistVideoOn_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.IPPORT.nettype)
  return nettype_;
}
inline void IndAssistVideoOn_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAssistVideoOn_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOn_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOn_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOn_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAssistVideoOn_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.IPPORT.ip)
  return *ip_;
}
inline void IndAssistVideoOn_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.IPPORT.ip)
}
inline void IndAssistVideoOn_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOn.IPPORT.ip)
}
inline void IndAssistVideoOn_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOn.IPPORT.ip)
}
inline ::std::string* IndAssistVideoOn_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAssistVideoOn_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOn_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOn.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAssistVideoOn_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOn_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOn_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOn_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAssistVideoOn_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.IPPORT.port)
  return port_;
}
inline void IndAssistVideoOn_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAssistVideoOn_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAssistVideoOn_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOn_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOn_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOn_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAssistVideoOn_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAssistVideoOn_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAssistVideoOn.IPPORT ipportinfos = 2;
inline int IndAssistVideoOn_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAssistVideoOn_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOn_IPPORT& IndAssistVideoOn_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOn_IPPORT* IndAssistVideoOn_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOn_IPPORT* IndAssistVideoOn_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOn.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_IPPORT >&
IndAssistVideoOn_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOn.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_IPPORT >*
IndAssistVideoOn_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOn.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAssistVideoOn_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOn_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOn_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOn_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAssistVideoOn_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.AddrInfo.level)
  return level_;
}
inline void IndAssistVideoOn_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAssistVideoOn_DomainInfo

// optional string dname = 1;
inline bool IndAssistVideoOn_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOn_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOn_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOn_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAssistVideoOn_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
  return *dname_;
}
inline void IndAssistVideoOn_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
}
inline void IndAssistVideoOn_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
}
inline void IndAssistVideoOn_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
}
inline ::std::string* IndAssistVideoOn_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAssistVideoOn_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOn_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOn.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAssistVideoOn_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOn_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOn_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOn_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAssistVideoOn_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAssistVideoOn_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAssistVideoOn

// optional uint32 avterid = 1;
inline bool IndAssistVideoOn::has_avterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOn::set_has_avterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOn::clear_has_avterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOn::clear_avterid() {
  avterid_ = 0u;
  clear_has_avterid();
}
inline ::google::protobuf::uint32 IndAssistVideoOn::avterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.avterid)
  return avterid_;
}
inline void IndAssistVideoOn::set_avterid(::google::protobuf::uint32 value) {
  set_has_avterid();
  avterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.avterid)
}

// optional uint64 confid = 2;
inline bool IndAssistVideoOn::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOn::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOn::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOn::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAssistVideoOn::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.confid)
  return confid_;
}
inline void IndAssistVideoOn::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.confid)
}

// optional uint32 terid = 3;
inline bool IndAssistVideoOn::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOn::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOn::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOn::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAssistVideoOn::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.terid)
  return terid_;
}
inline void IndAssistVideoOn::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.terid)
}

// optional string domainname = 4;
inline bool IndAssistVideoOn::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndAssistVideoOn::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndAssistVideoOn::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndAssistVideoOn::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAssistVideoOn::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.domainname)
  return *domainname_;
}
inline void IndAssistVideoOn::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.domainname)
}
inline void IndAssistVideoOn::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOn.domainname)
}
inline void IndAssistVideoOn::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOn.domainname)
}
inline ::std::string* IndAssistVideoOn::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.domainname)
  return domainname_;
}
inline ::std::string* IndAssistVideoOn::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOn::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOn.domainname)
}

// repeated .SRMsgs.IndAssistVideoOn.AddrInfo svraddrs = 5;
inline int IndAssistVideoOn::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAssistVideoOn::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOn_AddrInfo& IndAssistVideoOn::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOn_AddrInfo* IndAssistVideoOn::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOn_AddrInfo* IndAssistVideoOn::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOn.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_AddrInfo >&
IndAssistVideoOn::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOn.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_AddrInfo >*
IndAssistVideoOn::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOn.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAssistVideoOn.DomainInfo domains = 6;
inline int IndAssistVideoOn::domains_size() const {
  return domains_.size();
}
inline void IndAssistVideoOn::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOn_DomainInfo& IndAssistVideoOn::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOn_DomainInfo* IndAssistVideoOn::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOn.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOn_DomainInfo* IndAssistVideoOn::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOn.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_DomainInfo >&
IndAssistVideoOn::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOn.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOn_DomainInfo >*
IndAssistVideoOn::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOn.domains)
  return &domains_;
}

// optional uint32 avtype = 7;
inline bool IndAssistVideoOn::has_avtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndAssistVideoOn::set_has_avtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndAssistVideoOn::clear_has_avtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndAssistVideoOn::clear_avtype() {
  avtype_ = 0u;
  clear_has_avtype();
}
inline ::google::protobuf::uint32 IndAssistVideoOn::avtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.avtype)
  return avtype_;
}
inline void IndAssistVideoOn::set_avtype(::google::protobuf::uint32 value) {
  set_has_avtype();
  avtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.avtype)
}

// optional uint32 sharedaudio = 8;
inline bool IndAssistVideoOn::has_sharedaudio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndAssistVideoOn::set_has_sharedaudio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndAssistVideoOn::clear_has_sharedaudio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndAssistVideoOn::clear_sharedaudio() {
  sharedaudio_ = 0u;
  clear_has_sharedaudio();
}
inline ::google::protobuf::uint32 IndAssistVideoOn::sharedaudio() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOn.sharedaudio)
  return sharedaudio_;
}
inline void IndAssistVideoOn::set_sharedaudio(::google::protobuf::uint32 value) {
  set_has_sharedaudio();
  sharedaudio_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOn.sharedaudio)
}

// -------------------------------------------------------------------

// IndAssistVideoOff_IPPORT

// optional uint32 nettype = 1;
inline bool IndAssistVideoOff_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOff_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOff_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOff_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndAssistVideoOff_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.IPPORT.nettype)
  return nettype_;
}
inline void IndAssistVideoOff_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndAssistVideoOff_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOff_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOff_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOff_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndAssistVideoOff_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.IPPORT.ip)
  return *ip_;
}
inline void IndAssistVideoOff_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.IPPORT.ip)
}
inline void IndAssistVideoOff_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOff.IPPORT.ip)
}
inline void IndAssistVideoOff_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOff.IPPORT.ip)
}
inline ::std::string* IndAssistVideoOff_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndAssistVideoOff_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOff_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOff.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndAssistVideoOff_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOff_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOff_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOff_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndAssistVideoOff_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.IPPORT.port)
  return port_;
}
inline void IndAssistVideoOff_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.IPPORT.port)
}

// -------------------------------------------------------------------

// IndAssistVideoOff_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndAssistVideoOff_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOff_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOff_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOff_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndAssistVideoOff_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndAssistVideoOff_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndAssistVideoOff.IPPORT ipportinfos = 2;
inline int IndAssistVideoOff_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndAssistVideoOff_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOff_IPPORT& IndAssistVideoOff_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOff_IPPORT* IndAssistVideoOff_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOff_IPPORT* IndAssistVideoOff_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOff.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_IPPORT >&
IndAssistVideoOff_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOff.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_IPPORT >*
IndAssistVideoOff_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOff.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndAssistVideoOff_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOff_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOff_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOff_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndAssistVideoOff_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.AddrInfo.level)
  return level_;
}
inline void IndAssistVideoOff_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndAssistVideoOff_DomainInfo

// optional string dname = 1;
inline bool IndAssistVideoOff_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOff_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOff_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOff_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndAssistVideoOff_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
  return *dname_;
}
inline void IndAssistVideoOff_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
}
inline void IndAssistVideoOff_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
}
inline void IndAssistVideoOff_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
}
inline ::std::string* IndAssistVideoOff_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndAssistVideoOff_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOff_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOff.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndAssistVideoOff_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOff_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOff_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOff_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndAssistVideoOff_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndAssistVideoOff_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndAssistVideoOff

// optional uint32 avterid = 1;
inline bool IndAssistVideoOff::has_avterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndAssistVideoOff::set_has_avterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndAssistVideoOff::clear_has_avterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndAssistVideoOff::clear_avterid() {
  avterid_ = 0u;
  clear_has_avterid();
}
inline ::google::protobuf::uint32 IndAssistVideoOff::avterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.avterid)
  return avterid_;
}
inline void IndAssistVideoOff::set_avterid(::google::protobuf::uint32 value) {
  set_has_avterid();
  avterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.avterid)
}

// optional uint64 confid = 2;
inline bool IndAssistVideoOff::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndAssistVideoOff::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndAssistVideoOff::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndAssistVideoOff::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndAssistVideoOff::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.confid)
  return confid_;
}
inline void IndAssistVideoOff::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.confid)
}

// optional uint32 terid = 3;
inline bool IndAssistVideoOff::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndAssistVideoOff::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndAssistVideoOff::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndAssistVideoOff::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndAssistVideoOff::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.terid)
  return terid_;
}
inline void IndAssistVideoOff::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.terid)
}

// optional string domainname = 4;
inline bool IndAssistVideoOff::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndAssistVideoOff::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndAssistVideoOff::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndAssistVideoOff::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndAssistVideoOff::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.domainname)
  return *domainname_;
}
inline void IndAssistVideoOff::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndAssistVideoOff.domainname)
}
inline void IndAssistVideoOff::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndAssistVideoOff.domainname)
}
inline void IndAssistVideoOff::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndAssistVideoOff.domainname)
}
inline ::std::string* IndAssistVideoOff::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.domainname)
  return domainname_;
}
inline ::std::string* IndAssistVideoOff::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndAssistVideoOff::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndAssistVideoOff.domainname)
}

// repeated .SRMsgs.IndAssistVideoOff.AddrInfo svraddrs = 5;
inline int IndAssistVideoOff::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndAssistVideoOff::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOff_AddrInfo& IndAssistVideoOff::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOff_AddrInfo* IndAssistVideoOff::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOff_AddrInfo* IndAssistVideoOff::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOff.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_AddrInfo >&
IndAssistVideoOff::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOff.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_AddrInfo >*
IndAssistVideoOff::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOff.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndAssistVideoOff.DomainInfo domains = 6;
inline int IndAssistVideoOff::domains_size() const {
  return domains_.size();
}
inline void IndAssistVideoOff::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndAssistVideoOff_DomainInfo& IndAssistVideoOff::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndAssistVideoOff.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndAssistVideoOff_DomainInfo* IndAssistVideoOff::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndAssistVideoOff.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndAssistVideoOff_DomainInfo* IndAssistVideoOff::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndAssistVideoOff.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_DomainInfo >&
IndAssistVideoOff::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndAssistVideoOff.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndAssistVideoOff_DomainInfo >*
IndAssistVideoOff::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndAssistVideoOff.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerModifyConfCallList_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.IPPORT.nettype)
  return nettype_;
}
inline void IndTerModifyConfCallList_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerModifyConfCallList_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerModifyConfCallList_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerModifyConfCallList_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
  return *ip_;
}
inline void IndTerModifyConfCallList_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
}
inline void IndTerModifyConfCallList_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
}
inline void IndTerModifyConfCallList_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
}
inline ::std::string* IndTerModifyConfCallList_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerModifyConfCallList_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerModifyConfCallList_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerModifyConfCallList_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerModifyConfCallList_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerModifyConfCallList_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.IPPORT.port)
  return port_;
}
inline void IndTerModifyConfCallList_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerModifyConfCallList_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerModifyConfCallList_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerModifyConfCallList.IPPORT ipportinfos = 2;
inline int IndTerModifyConfCallList_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerModifyConfCallList_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerModifyConfCallList_IPPORT& IndTerModifyConfCallList_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_IPPORT* IndTerModifyConfCallList_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_IPPORT* IndTerModifyConfCallList_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerModifyConfCallList.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_IPPORT >&
IndTerModifyConfCallList_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerModifyConfCallList.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_IPPORT >*
IndTerModifyConfCallList_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerModifyConfCallList.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerModifyConfCallList_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerModifyConfCallList_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerModifyConfCallList_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerModifyConfCallList_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.AddrInfo.level)
  return level_;
}
inline void IndTerModifyConfCallList_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList_DomainInfo

// optional string dname = 1;
inline bool IndTerModifyConfCallList_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerModifyConfCallList_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
  return *dname_;
}
inline void IndTerModifyConfCallList_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
}
inline void IndTerModifyConfCallList_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
}
inline void IndTerModifyConfCallList_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
}
inline ::std::string* IndTerModifyConfCallList_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerModifyConfCallList_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerModifyConfCallList_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerModifyConfCallList_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerModifyConfCallList_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerModifyConfCallList_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerModifyConfCallList_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerModifyConfCallList_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList_ParticipantInfo

// optional uint32 psuid = 1;
inline bool IndTerModifyConfCallList_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.psuid)
  return psuid_;
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.psuid)
}

// optional string nickname = 2;
inline bool IndTerModifyConfCallList_ParticipantInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerModifyConfCallList_ParticipantInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerModifyConfCallList_ParticipantInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& IndTerModifyConfCallList_ParticipantInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
  return *nickname_;
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
}
inline ::std::string* IndTerModifyConfCallList_ParticipantInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
  return nickname_;
}
inline ::std::string* IndTerModifyConfCallList_ParticipantInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerModifyConfCallList_ParticipantInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.ParticipantInfo.nickname)
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList_RollCallInfo

// optional uint64 rcid = 1;
inline bool IndTerModifyConfCallList_RollCallInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList_RollCallInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList_RollCallInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList_RollCallInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 IndTerModifyConfCallList_RollCallInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcid)
  return rcid_;
}
inline void IndTerModifyConfCallList_RollCallInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcid)
}

// optional string rcname = 2;
inline bool IndTerModifyConfCallList_RollCallInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerModifyConfCallList_RollCallInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerModifyConfCallList_RollCallInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerModifyConfCallList_RollCallInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& IndTerModifyConfCallList_RollCallInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
  return *rcname_;
}
inline void IndTerModifyConfCallList_RollCallInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
}
inline void IndTerModifyConfCallList_RollCallInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
}
inline void IndTerModifyConfCallList_RollCallInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
}
inline ::std::string* IndTerModifyConfCallList_RollCallInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
  return rcname_;
}
inline ::std::string* IndTerModifyConfCallList_RollCallInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerModifyConfCallList_RollCallInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.RollCallInfo.rcname)
}

// repeated .SRMsgs.IndTerModifyConfCallList.ParticipantInfo parts = 3;
inline int IndTerModifyConfCallList_RollCallInfo::parts_size() const {
  return parts_.size();
}
inline void IndTerModifyConfCallList_RollCallInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo& IndTerModifyConfCallList_RollCallInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.RollCallInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo* IndTerModifyConfCallList_RollCallInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.RollCallInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo* IndTerModifyConfCallList_RollCallInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerModifyConfCallList.RollCallInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo >&
IndTerModifyConfCallList_RollCallInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerModifyConfCallList.RollCallInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_ParticipantInfo >*
IndTerModifyConfCallList_RollCallInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerModifyConfCallList.RollCallInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// IndTerModifyConfCallList

// optional uint64 confid = 1;
inline bool IndTerModifyConfCallList::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerModifyConfCallList::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerModifyConfCallList::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerModifyConfCallList::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerModifyConfCallList::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.confid)
  return confid_;
}
inline void IndTerModifyConfCallList::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.confid)
}

// optional uint32 terid = 2;
inline bool IndTerModifyConfCallList::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerModifyConfCallList::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerModifyConfCallList::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerModifyConfCallList::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.terid)
  return terid_;
}
inline void IndTerModifyConfCallList::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.terid)
}

// optional uint32 optype = 3;
inline bool IndTerModifyConfCallList::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerModifyConfCallList::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerModifyConfCallList::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerModifyConfCallList::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 IndTerModifyConfCallList::optype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.optype)
  return optype_;
}
inline void IndTerModifyConfCallList::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.optype)
}

// optional .SRMsgs.IndTerModifyConfCallList.RollCallInfo rollcalllist = 4;
inline bool IndTerModifyConfCallList::has_rollcalllist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerModifyConfCallList::set_has_rollcalllist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerModifyConfCallList::clear_has_rollcalllist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerModifyConfCallList::clear_rollcalllist() {
  if (rollcalllist_ != NULL) rollcalllist_->::SRMsgs::IndTerModifyConfCallList_RollCallInfo::Clear();
  clear_has_rollcalllist();
}
inline const ::SRMsgs::IndTerModifyConfCallList_RollCallInfo& IndTerModifyConfCallList::rollcalllist() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.rollcalllist)
  return rollcalllist_ != NULL ? *rollcalllist_ : *default_instance_->rollcalllist_;
}
inline ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* IndTerModifyConfCallList::mutable_rollcalllist() {
  set_has_rollcalllist();
  if (rollcalllist_ == NULL) rollcalllist_ = new ::SRMsgs::IndTerModifyConfCallList_RollCallInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.rollcalllist)
  return rollcalllist_;
}
inline ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* IndTerModifyConfCallList::release_rollcalllist() {
  clear_has_rollcalllist();
  ::SRMsgs::IndTerModifyConfCallList_RollCallInfo* temp = rollcalllist_;
  rollcalllist_ = NULL;
  return temp;
}
inline void IndTerModifyConfCallList::set_allocated_rollcalllist(::SRMsgs::IndTerModifyConfCallList_RollCallInfo* rollcalllist) {
  delete rollcalllist_;
  rollcalllist_ = rollcalllist;
  if (rollcalllist) {
    set_has_rollcalllist();
  } else {
    clear_has_rollcalllist();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.rollcalllist)
}

// optional string domainname = 5;
inline bool IndTerModifyConfCallList::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerModifyConfCallList::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerModifyConfCallList::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerModifyConfCallList::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerModifyConfCallList::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.domainname)
  return *domainname_;
}
inline void IndTerModifyConfCallList::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerModifyConfCallList.domainname)
}
inline void IndTerModifyConfCallList::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerModifyConfCallList.domainname)
}
inline void IndTerModifyConfCallList::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerModifyConfCallList.domainname)
}
inline ::std::string* IndTerModifyConfCallList::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.domainname)
  return domainname_;
}
inline ::std::string* IndTerModifyConfCallList::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerModifyConfCallList::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerModifyConfCallList.domainname)
}

// repeated .SRMsgs.IndTerModifyConfCallList.AddrInfo svraddrs = 6;
inline int IndTerModifyConfCallList::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerModifyConfCallList::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerModifyConfCallList_AddrInfo& IndTerModifyConfCallList::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_AddrInfo* IndTerModifyConfCallList::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_AddrInfo* IndTerModifyConfCallList::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerModifyConfCallList.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_AddrInfo >&
IndTerModifyConfCallList::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerModifyConfCallList.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_AddrInfo >*
IndTerModifyConfCallList::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerModifyConfCallList.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerModifyConfCallList.DomainInfo domains = 7;
inline int IndTerModifyConfCallList::domains_size() const {
  return domains_.size();
}
inline void IndTerModifyConfCallList::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerModifyConfCallList_DomainInfo& IndTerModifyConfCallList::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerModifyConfCallList.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_DomainInfo* IndTerModifyConfCallList::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerModifyConfCallList.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerModifyConfCallList_DomainInfo* IndTerModifyConfCallList::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerModifyConfCallList.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_DomainInfo >&
IndTerModifyConfCallList::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerModifyConfCallList.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerModifyConfCallList_DomainInfo >*
IndTerModifyConfCallList::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerModifyConfCallList.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerConfRollCallState_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerConfRollCallState_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfRollCallState_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfRollCallState_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfRollCallState_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.IPPORT.nettype)
  return nettype_;
}
inline void IndTerConfRollCallState_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerConfRollCallState_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfRollCallState_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfRollCallState_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfRollCallState_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerConfRollCallState_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
  return *ip_;
}
inline void IndTerConfRollCallState_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
}
inline void IndTerConfRollCallState_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
}
inline void IndTerConfRollCallState_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
}
inline ::std::string* IndTerConfRollCallState_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerConfRollCallState_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfRollCallState_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfRollCallState.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerConfRollCallState_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfRollCallState_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfRollCallState_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfRollCallState_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.IPPORT.port)
  return port_;
}
inline void IndTerConfRollCallState_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerConfRollCallState_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerConfRollCallState_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfRollCallState_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfRollCallState_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfRollCallState_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerConfRollCallState_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerConfRollCallState.IPPORT ipportinfos = 2;
inline int IndTerConfRollCallState_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerConfRollCallState_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerConfRollCallState_IPPORT& IndTerConfRollCallState_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerConfRollCallState_IPPORT* IndTerConfRollCallState_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerConfRollCallState_IPPORT* IndTerConfRollCallState_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_IPPORT >&
IndTerConfRollCallState_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfRollCallState.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_IPPORT >*
IndTerConfRollCallState_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfRollCallState.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerConfRollCallState_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfRollCallState_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfRollCallState_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfRollCallState_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.AddrInfo.level)
  return level_;
}
inline void IndTerConfRollCallState_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerConfRollCallState_DomainInfo

// optional string dname = 1;
inline bool IndTerConfRollCallState_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfRollCallState_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfRollCallState_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfRollCallState_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerConfRollCallState_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
  return *dname_;
}
inline void IndTerConfRollCallState_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
}
inline void IndTerConfRollCallState_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
}
inline void IndTerConfRollCallState_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
}
inline ::std::string* IndTerConfRollCallState_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerConfRollCallState_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfRollCallState_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfRollCallState.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerConfRollCallState_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfRollCallState_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfRollCallState_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfRollCallState_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerConfRollCallState_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerConfRollCallState

// optional uint64 confid = 1;
inline bool IndTerConfRollCallState::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerConfRollCallState::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerConfRollCallState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerConfRollCallState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerConfRollCallState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.confid)
  return confid_;
}
inline void IndTerConfRollCallState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.confid)
}

// optional uint32 terid = 2;
inline bool IndTerConfRollCallState::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerConfRollCallState::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerConfRollCallState::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerConfRollCallState::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerConfRollCallState::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.terid)
  return terid_;
}
inline void IndTerConfRollCallState::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.terid)
}

// optional bool isrollcall = 3;
inline bool IndTerConfRollCallState::has_isrollcall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerConfRollCallState::set_has_isrollcall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerConfRollCallState::clear_has_isrollcall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerConfRollCallState::clear_isrollcall() {
  isrollcall_ = false;
  clear_has_isrollcall();
}
inline bool IndTerConfRollCallState::isrollcall() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.isrollcall)
  return isrollcall_;
}
inline void IndTerConfRollCallState::set_isrollcall(bool value) {
  set_has_isrollcall();
  isrollcall_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.isrollcall)
}

// optional sint32 rcitersuid = 4;
inline bool IndTerConfRollCallState::has_rcitersuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerConfRollCallState::set_has_rcitersuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerConfRollCallState::clear_has_rcitersuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerConfRollCallState::clear_rcitersuid() {
  rcitersuid_ = 0;
  clear_has_rcitersuid();
}
inline ::google::protobuf::int32 IndTerConfRollCallState::rcitersuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.rcitersuid)
  return rcitersuid_;
}
inline void IndTerConfRollCallState::set_rcitersuid(::google::protobuf::int32 value) {
  set_has_rcitersuid();
  rcitersuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.rcitersuid)
}

// optional string domainname = 5;
inline bool IndTerConfRollCallState::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerConfRollCallState::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerConfRollCallState::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerConfRollCallState::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerConfRollCallState::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.domainname)
  return *domainname_;
}
inline void IndTerConfRollCallState::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerConfRollCallState.domainname)
}
inline void IndTerConfRollCallState::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerConfRollCallState.domainname)
}
inline void IndTerConfRollCallState::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerConfRollCallState.domainname)
}
inline ::std::string* IndTerConfRollCallState::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.domainname)
  return domainname_;
}
inline ::std::string* IndTerConfRollCallState::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerConfRollCallState::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerConfRollCallState.domainname)
}

// repeated .SRMsgs.IndTerConfRollCallState.AddrInfo svraddrs = 6;
inline int IndTerConfRollCallState::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerConfRollCallState::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerConfRollCallState_AddrInfo& IndTerConfRollCallState::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerConfRollCallState_AddrInfo* IndTerConfRollCallState::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerConfRollCallState_AddrInfo* IndTerConfRollCallState::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfRollCallState.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_AddrInfo >&
IndTerConfRollCallState::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfRollCallState.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_AddrInfo >*
IndTerConfRollCallState::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfRollCallState.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerConfRollCallState.DomainInfo domains = 7;
inline int IndTerConfRollCallState::domains_size() const {
  return domains_.size();
}
inline void IndTerConfRollCallState::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerConfRollCallState_DomainInfo& IndTerConfRollCallState::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerConfRollCallState.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerConfRollCallState_DomainInfo* IndTerConfRollCallState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerConfRollCallState.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerConfRollCallState_DomainInfo* IndTerConfRollCallState::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerConfRollCallState.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_DomainInfo >&
IndTerConfRollCallState::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerConfRollCallState.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerConfRollCallState_DomainInfo >*
IndTerConfRollCallState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerConfRollCallState.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndRollCallTer_IPPORT

// optional uint32 nettype = 1;
inline bool IndRollCallTer_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTer_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTer_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTer_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndRollCallTer_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.IPPORT.nettype)
  return nettype_;
}
inline void IndRollCallTer_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndRollCallTer_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTer_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTer_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTer_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndRollCallTer_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.IPPORT.ip)
  return *ip_;
}
inline void IndRollCallTer_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.IPPORT.ip)
}
inline void IndRollCallTer_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTer.IPPORT.ip)
}
inline void IndRollCallTer_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTer.IPPORT.ip)
}
inline ::std::string* IndRollCallTer_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndRollCallTer_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTer_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndRollCallTer_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTer_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTer_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTer_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndRollCallTer_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.IPPORT.port)
  return port_;
}
inline void IndRollCallTer_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.IPPORT.port)
}

// -------------------------------------------------------------------

// IndRollCallTer_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndRollCallTer_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTer_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTer_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTer_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndRollCallTer_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndRollCallTer_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndRollCallTer.IPPORT ipportinfos = 2;
inline int IndRollCallTer_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndRollCallTer_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndRollCallTer_IPPORT& IndRollCallTer_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndRollCallTer_IPPORT* IndRollCallTer_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTer_IPPORT* IndRollCallTer_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_IPPORT >&
IndRollCallTer_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTer.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_IPPORT >*
IndRollCallTer_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTer.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndRollCallTer_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTer_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTer_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTer_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndRollCallTer_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.AddrInfo.level)
  return level_;
}
inline void IndRollCallTer_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndRollCallTer_DomainInfo

// optional string dname = 1;
inline bool IndRollCallTer_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTer_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTer_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTer_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndRollCallTer_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.DomainInfo.dname)
  return *dname_;
}
inline void IndRollCallTer_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.DomainInfo.dname)
}
inline void IndRollCallTer_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTer.DomainInfo.dname)
}
inline void IndRollCallTer_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTer.DomainInfo.dname)
}
inline ::std::string* IndRollCallTer_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndRollCallTer_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTer_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndRollCallTer_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTer_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTer_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTer_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndRollCallTer_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndRollCallTer_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndRollCallTer_RollCallTerInfo

// optional uint64 rcid = 1;
inline bool IndRollCallTer_RollCallTerInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTer_RollCallTerInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 IndRollCallTer_RollCallTerInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.RollCallTerInfo.rcid)
  return rcid_;
}
inline void IndRollCallTer_RollCallTerInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.RollCallTerInfo.rcid)
}

// optional string rcname = 2;
inline bool IndRollCallTer_RollCallTerInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTer_RollCallTerInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& IndRollCallTer_RollCallTerInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
  return *rcname_;
}
inline void IndRollCallTer_RollCallTerInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
}
inline void IndRollCallTer_RollCallTerInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
}
inline void IndRollCallTer_RollCallTerInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
}
inline ::std::string* IndRollCallTer_RollCallTerInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
  return rcname_;
}
inline ::std::string* IndRollCallTer_RollCallTerInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTer_RollCallTerInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.RollCallTerInfo.rcname)
}

// optional uint32 psuid = 3;
inline bool IndRollCallTer_RollCallTerInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTer_RollCallTerInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndRollCallTer_RollCallTerInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.RollCallTerInfo.psuid)
  return psuid_;
}
inline void IndRollCallTer_RollCallTerInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.RollCallTerInfo.psuid)
}

// optional string nickname = 4;
inline bool IndRollCallTer_RollCallTerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndRollCallTer_RollCallTerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndRollCallTer_RollCallTerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& IndRollCallTer_RollCallTerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
  return *nickname_;
}
inline void IndRollCallTer_RollCallTerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
}
inline void IndRollCallTer_RollCallTerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
}
inline void IndRollCallTer_RollCallTerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
}
inline ::std::string* IndRollCallTer_RollCallTerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
  return nickname_;
}
inline ::std::string* IndRollCallTer_RollCallTerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTer_RollCallTerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.RollCallTerInfo.nickname)
}

// -------------------------------------------------------------------

// IndRollCallTer

// optional uint64 confid = 1;
inline bool IndRollCallTer::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTer::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTer::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTer::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndRollCallTer::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.confid)
  return confid_;
}
inline void IndRollCallTer::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.confid)
}

// optional uint32 terid = 2;
inline bool IndRollCallTer::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTer::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTer::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTer::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndRollCallTer::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.terid)
  return terid_;
}
inline void IndRollCallTer::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.terid)
}

// optional .SRMsgs.IndRollCallTer.RollCallTerInfo currcterinfo = 3;
inline bool IndRollCallTer::has_currcterinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTer::set_has_currcterinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTer::clear_has_currcterinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTer::clear_currcterinfo() {
  if (currcterinfo_ != NULL) currcterinfo_->::SRMsgs::IndRollCallTer_RollCallTerInfo::Clear();
  clear_has_currcterinfo();
}
inline const ::SRMsgs::IndRollCallTer_RollCallTerInfo& IndRollCallTer::currcterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.currcterinfo)
  return currcterinfo_ != NULL ? *currcterinfo_ : *default_instance_->currcterinfo_;
}
inline ::SRMsgs::IndRollCallTer_RollCallTerInfo* IndRollCallTer::mutable_currcterinfo() {
  set_has_currcterinfo();
  if (currcterinfo_ == NULL) currcterinfo_ = new ::SRMsgs::IndRollCallTer_RollCallTerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.currcterinfo)
  return currcterinfo_;
}
inline ::SRMsgs::IndRollCallTer_RollCallTerInfo* IndRollCallTer::release_currcterinfo() {
  clear_has_currcterinfo();
  ::SRMsgs::IndRollCallTer_RollCallTerInfo* temp = currcterinfo_;
  currcterinfo_ = NULL;
  return temp;
}
inline void IndRollCallTer::set_allocated_currcterinfo(::SRMsgs::IndRollCallTer_RollCallTerInfo* currcterinfo) {
  delete currcterinfo_;
  currcterinfo_ = currcterinfo;
  if (currcterinfo) {
    set_has_currcterinfo();
  } else {
    clear_has_currcterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.currcterinfo)
}

// optional string domainname = 4;
inline bool IndRollCallTer::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndRollCallTer::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndRollCallTer::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndRollCallTer::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndRollCallTer::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.domainname)
  return *domainname_;
}
inline void IndRollCallTer::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTer.domainname)
}
inline void IndRollCallTer::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTer.domainname)
}
inline void IndRollCallTer::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTer.domainname)
}
inline ::std::string* IndRollCallTer::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.domainname)
  return domainname_;
}
inline ::std::string* IndRollCallTer::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTer::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTer.domainname)
}

// repeated .SRMsgs.IndRollCallTer.AddrInfo svraddrs = 5;
inline int IndRollCallTer::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndRollCallTer::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndRollCallTer_AddrInfo& IndRollCallTer::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndRollCallTer_AddrInfo* IndRollCallTer::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTer_AddrInfo* IndRollCallTer::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTer.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_AddrInfo >&
IndRollCallTer::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTer.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_AddrInfo >*
IndRollCallTer::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTer.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndRollCallTer.DomainInfo domains = 6;
inline int IndRollCallTer::domains_size() const {
  return domains_.size();
}
inline void IndRollCallTer::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndRollCallTer_DomainInfo& IndRollCallTer::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTer.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndRollCallTer_DomainInfo* IndRollCallTer::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTer.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTer_DomainInfo* IndRollCallTer::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTer.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_DomainInfo >&
IndRollCallTer::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTer.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTer_DomainInfo >*
IndRollCallTer::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTer.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndRollCallTerResult_IPPORT

// optional uint32 nettype = 1;
inline bool IndRollCallTerResult_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTerResult_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTerResult_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTerResult_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.IPPORT.nettype)
  return nettype_;
}
inline void IndRollCallTerResult_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndRollCallTerResult_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTerResult_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTerResult_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTerResult_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndRollCallTerResult_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.IPPORT.ip)
  return *ip_;
}
inline void IndRollCallTerResult_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.IPPORT.ip)
}
inline void IndRollCallTerResult_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.IPPORT.ip)
}
inline void IndRollCallTerResult_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.IPPORT.ip)
}
inline ::std::string* IndRollCallTerResult_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndRollCallTerResult_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndRollCallTerResult_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTerResult_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTerResult_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTerResult_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.IPPORT.port)
  return port_;
}
inline void IndRollCallTerResult_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.IPPORT.port)
}

// -------------------------------------------------------------------

// IndRollCallTerResult_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndRollCallTerResult_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTerResult_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTerResult_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTerResult_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndRollCallTerResult_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndRollCallTerResult.IPPORT ipportinfos = 2;
inline int IndRollCallTerResult_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndRollCallTerResult_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndRollCallTerResult_IPPORT& IndRollCallTerResult_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndRollCallTerResult_IPPORT* IndRollCallTerResult_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTerResult_IPPORT* IndRollCallTerResult_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_IPPORT >&
IndRollCallTerResult_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTerResult.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_IPPORT >*
IndRollCallTerResult_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTerResult.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndRollCallTerResult_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTerResult_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTerResult_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTerResult_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.AddrInfo.level)
  return level_;
}
inline void IndRollCallTerResult_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndRollCallTerResult_DomainInfo

// optional string dname = 1;
inline bool IndRollCallTerResult_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTerResult_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTerResult_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTerResult_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndRollCallTerResult_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
  return *dname_;
}
inline void IndRollCallTerResult_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
}
inline void IndRollCallTerResult_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
}
inline void IndRollCallTerResult_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
}
inline ::std::string* IndRollCallTerResult_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndRollCallTerResult_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndRollCallTerResult_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTerResult_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTerResult_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTerResult_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndRollCallTerResult_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndRollCallTerResult_RollCallTerInfo

// optional uint64 rcid = 1;
inline bool IndRollCallTerResult_RollCallTerInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 IndRollCallTerResult_RollCallTerInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcid)
  return rcid_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcid)
}

// optional string rcname = 2;
inline bool IndRollCallTerResult_RollCallTerInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& IndRollCallTerResult_RollCallTerInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
  return *rcname_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
  return rcname_;
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_RollCallTerInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcname)
}

// optional uint32 psuid = 3;
inline bool IndRollCallTerResult_RollCallTerInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndRollCallTerResult_RollCallTerInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.psuid)
  return psuid_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.psuid)
}

// optional string nickname = 4;
inline bool IndRollCallTerResult_RollCallTerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& IndRollCallTerResult_RollCallTerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
  return *nickname_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
  return nickname_;
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_RollCallTerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.RollCallTerInfo.nickname)
}

// optional string rcstarttime = 5;
inline bool IndRollCallTerResult_RollCallTerInfo::has_rcstarttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_rcstarttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_rcstarttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_rcstarttime() {
  if (rcstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_->clear();
  }
  clear_has_rcstarttime();
}
inline const ::std::string& IndRollCallTerResult_RollCallTerInfo::rcstarttime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
  return *rcstarttime_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcstarttime(const ::std::string& value) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcstarttime(const char* value) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcstarttime(const char* value, size_t size) {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  rcstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::mutable_rcstarttime() {
  set_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
  return rcstarttime_;
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::release_rcstarttime() {
  clear_has_rcstarttime();
  if (rcstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcstarttime_;
    rcstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_RollCallTerInfo::set_allocated_rcstarttime(::std::string* rcstarttime) {
  if (rcstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcstarttime_;
  }
  if (rcstarttime) {
    set_has_rcstarttime();
    rcstarttime_ = rcstarttime;
  } else {
    clear_has_rcstarttime();
    rcstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcstarttime)
}

// optional string rcendtime = 6;
inline bool IndRollCallTerResult_RollCallTerInfo::has_rcendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_has_rcendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_has_rcendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndRollCallTerResult_RollCallTerInfo::clear_rcendtime() {
  if (rcendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_->clear();
  }
  clear_has_rcendtime();
}
inline const ::std::string& IndRollCallTerResult_RollCallTerInfo::rcendtime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
  return *rcendtime_;
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcendtime(const ::std::string& value) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcendtime(const char* value) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
}
inline void IndRollCallTerResult_RollCallTerInfo::set_rcendtime(const char* value, size_t size) {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  rcendtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::mutable_rcendtime() {
  set_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcendtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
  return rcendtime_;
}
inline ::std::string* IndRollCallTerResult_RollCallTerInfo::release_rcendtime() {
  clear_has_rcendtime();
  if (rcendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcendtime_;
    rcendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult_RollCallTerInfo::set_allocated_rcendtime(::std::string* rcendtime) {
  if (rcendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcendtime_;
  }
  if (rcendtime) {
    set_has_rcendtime();
    rcendtime_ = rcendtime;
  } else {
    clear_has_rcendtime();
    rcendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.RollCallTerInfo.rcendtime)
}

// -------------------------------------------------------------------

// IndRollCallTerResult

// optional bool ispass = 1;
inline bool IndRollCallTerResult::has_ispass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRollCallTerResult::set_has_ispass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRollCallTerResult::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRollCallTerResult::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool IndRollCallTerResult::ispass() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.ispass)
  return ispass_;
}
inline void IndRollCallTerResult::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.ispass)
}

// optional uint64 confid = 2;
inline bool IndRollCallTerResult::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRollCallTerResult::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRollCallTerResult::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRollCallTerResult::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndRollCallTerResult::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.confid)
  return confid_;
}
inline void IndRollCallTerResult::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.confid)
}

// optional uint32 terid = 3;
inline bool IndRollCallTerResult::has_terid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndRollCallTerResult::set_has_terid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndRollCallTerResult::clear_has_terid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndRollCallTerResult::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndRollCallTerResult::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.terid)
  return terid_;
}
inline void IndRollCallTerResult::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.terid)
}

// optional .SRMsgs.IndRollCallTerResult.RollCallTerInfo rcterinfo = 4;
inline bool IndRollCallTerResult::has_rcterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndRollCallTerResult::set_has_rcterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndRollCallTerResult::clear_has_rcterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndRollCallTerResult::clear_rcterinfo() {
  if (rcterinfo_ != NULL) rcterinfo_->::SRMsgs::IndRollCallTerResult_RollCallTerInfo::Clear();
  clear_has_rcterinfo();
}
inline const ::SRMsgs::IndRollCallTerResult_RollCallTerInfo& IndRollCallTerResult::rcterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.rcterinfo)
  return rcterinfo_ != NULL ? *rcterinfo_ : *default_instance_->rcterinfo_;
}
inline ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* IndRollCallTerResult::mutable_rcterinfo() {
  set_has_rcterinfo();
  if (rcterinfo_ == NULL) rcterinfo_ = new ::SRMsgs::IndRollCallTerResult_RollCallTerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.rcterinfo)
  return rcterinfo_;
}
inline ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* IndRollCallTerResult::release_rcterinfo() {
  clear_has_rcterinfo();
  ::SRMsgs::IndRollCallTerResult_RollCallTerInfo* temp = rcterinfo_;
  rcterinfo_ = NULL;
  return temp;
}
inline void IndRollCallTerResult::set_allocated_rcterinfo(::SRMsgs::IndRollCallTerResult_RollCallTerInfo* rcterinfo) {
  delete rcterinfo_;
  rcterinfo_ = rcterinfo;
  if (rcterinfo) {
    set_has_rcterinfo();
  } else {
    clear_has_rcterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.rcterinfo)
}

// optional string domainname = 5;
inline bool IndRollCallTerResult::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndRollCallTerResult::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndRollCallTerResult::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndRollCallTerResult::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndRollCallTerResult::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.domainname)
  return *domainname_;
}
inline void IndRollCallTerResult::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndRollCallTerResult.domainname)
}
inline void IndRollCallTerResult::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndRollCallTerResult.domainname)
}
inline void IndRollCallTerResult::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndRollCallTerResult.domainname)
}
inline ::std::string* IndRollCallTerResult::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.domainname)
  return domainname_;
}
inline ::std::string* IndRollCallTerResult::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndRollCallTerResult::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndRollCallTerResult.domainname)
}

// repeated .SRMsgs.IndRollCallTerResult.AddrInfo svraddrs = 6;
inline int IndRollCallTerResult::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndRollCallTerResult::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndRollCallTerResult_AddrInfo& IndRollCallTerResult::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndRollCallTerResult_AddrInfo* IndRollCallTerResult::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTerResult_AddrInfo* IndRollCallTerResult::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTerResult.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_AddrInfo >&
IndRollCallTerResult::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTerResult.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_AddrInfo >*
IndRollCallTerResult::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTerResult.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndRollCallTerResult.DomainInfo domains = 7;
inline int IndRollCallTerResult::domains_size() const {
  return domains_.size();
}
inline void IndRollCallTerResult::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndRollCallTerResult_DomainInfo& IndRollCallTerResult::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRollCallTerResult.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndRollCallTerResult_DomainInfo* IndRollCallTerResult::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndRollCallTerResult.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndRollCallTerResult_DomainInfo* IndRollCallTerResult::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndRollCallTerResult.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_DomainInfo >&
IndRollCallTerResult::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndRollCallTerResult.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndRollCallTerResult_DomainInfo >*
IndRollCallTerResult::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndRollCallTerResult.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndSendAssistVideolabel_IPPORT

// optional uint32 nettype = 1;
inline bool IndSendAssistVideolabel_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideolabel_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.IPPORT.nettype)
  return nettype_;
}
inline void IndSendAssistVideolabel_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndSendAssistVideolabel_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideolabel_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndSendAssistVideolabel_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
  return *ip_;
}
inline void IndSendAssistVideolabel_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
}
inline void IndSendAssistVideolabel_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
}
inline void IndSendAssistVideolabel_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
}
inline ::std::string* IndSendAssistVideolabel_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndSendAssistVideolabel_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideolabel_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideolabel.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndSendAssistVideolabel_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideolabel_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideolabel_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.IPPORT.port)
  return port_;
}
inline void IndSendAssistVideolabel_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.IPPORT.port)
}

// -------------------------------------------------------------------

// IndSendAssistVideolabel_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndSendAssistVideolabel_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideolabel_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideolabel_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideolabel_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndSendAssistVideolabel_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndSendAssistVideolabel.IPPORT ipportinfos = 2;
inline int IndSendAssistVideolabel_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndSendAssistVideolabel_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideolabel_IPPORT& IndSendAssistVideolabel_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_IPPORT* IndSendAssistVideolabel_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_IPPORT* IndSendAssistVideolabel_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_IPPORT >&
IndSendAssistVideolabel_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideolabel.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_IPPORT >*
IndSendAssistVideolabel_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideolabel.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndSendAssistVideolabel_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideolabel_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideolabel_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideolabel_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.AddrInfo.level)
  return level_;
}
inline void IndSendAssistVideolabel_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndSendAssistVideolabel_DomainInfo

// optional string dname = 1;
inline bool IndSendAssistVideolabel_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideolabel_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideolabel_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideolabel_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndSendAssistVideolabel_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
  return *dname_;
}
inline void IndSendAssistVideolabel_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
}
inline void IndSendAssistVideolabel_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
}
inline void IndSendAssistVideolabel_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
}
inline ::std::string* IndSendAssistVideolabel_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndSendAssistVideolabel_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideolabel_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideolabel.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndSendAssistVideolabel_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideolabel_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideolabel_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideolabel_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndSendAssistVideolabel_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndSendAssistVideolabel

// optional uint64 confid = 1;
inline bool IndSendAssistVideolabel::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSendAssistVideolabel::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSendAssistVideolabel::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSendAssistVideolabel::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndSendAssistVideolabel::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.confid)
  return confid_;
}
inline void IndSendAssistVideolabel::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.confid)
}

// optional uint32 terid = 2;
inline bool IndSendAssistVideolabel::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSendAssistVideolabel::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSendAssistVideolabel::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSendAssistVideolabel::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.terid)
  return terid_;
}
inline void IndSendAssistVideolabel::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.terid)
}

// optional uint32 labelterid = 3;
inline bool IndSendAssistVideolabel::has_labelterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSendAssistVideolabel::set_has_labelterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSendAssistVideolabel::clear_has_labelterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSendAssistVideolabel::clear_labelterid() {
  labelterid_ = 0u;
  clear_has_labelterid();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::labelterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.labelterid)
  return labelterid_;
}
inline void IndSendAssistVideolabel::set_labelterid(::google::protobuf::uint32 value) {
  set_has_labelterid();
  labelterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.labelterid)
}

// optional uint32 operatetype = 4;
inline bool IndSendAssistVideolabel::has_operatetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndSendAssistVideolabel::set_has_operatetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndSendAssistVideolabel::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndSendAssistVideolabel::clear_operatetype() {
  operatetype_ = 0u;
  clear_has_operatetype();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::operatetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.operatetype)
  return operatetype_;
}
inline void IndSendAssistVideolabel::set_operatetype(::google::protobuf::uint32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.operatetype)
}

// optional uint32 labletype = 5;
inline bool IndSendAssistVideolabel::has_labletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndSendAssistVideolabel::set_has_labletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndSendAssistVideolabel::clear_has_labletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndSendAssistVideolabel::clear_labletype() {
  labletype_ = 0u;
  clear_has_labletype();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::labletype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.labletype)
  return labletype_;
}
inline void IndSendAssistVideolabel::set_labletype(::google::protobuf::uint32 value) {
  set_has_labletype();
  labletype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.labletype)
}

// optional uint32 lablesize = 6;
inline bool IndSendAssistVideolabel::has_lablesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndSendAssistVideolabel::set_has_lablesize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndSendAssistVideolabel::clear_has_lablesize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndSendAssistVideolabel::clear_lablesize() {
  lablesize_ = 0u;
  clear_has_lablesize();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::lablesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.lablesize)
  return lablesize_;
}
inline void IndSendAssistVideolabel::set_lablesize(::google::protobuf::uint32 value) {
  set_has_lablesize();
  lablesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.lablesize)
}

// optional uint32 lablecolor = 7;
inline bool IndSendAssistVideolabel::has_lablecolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndSendAssistVideolabel::set_has_lablecolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndSendAssistVideolabel::clear_has_lablecolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndSendAssistVideolabel::clear_lablecolor() {
  lablecolor_ = 0u;
  clear_has_lablecolor();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::lablecolor() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.lablecolor)
  return lablecolor_;
}
inline void IndSendAssistVideolabel::set_lablecolor(::google::protobuf::uint32 value) {
  set_has_lablecolor();
  lablecolor_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.lablecolor)
}

// optional uint32 linetype = 8;
inline bool IndSendAssistVideolabel::has_linetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndSendAssistVideolabel::set_has_linetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndSendAssistVideolabel::clear_has_linetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndSendAssistVideolabel::clear_linetype() {
  linetype_ = 0u;
  clear_has_linetype();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::linetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.linetype)
  return linetype_;
}
inline void IndSendAssistVideolabel::set_linetype(::google::protobuf::uint32 value) {
  set_has_linetype();
  linetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.linetype)
}

// optional uint32 leftuppoints_x = 9;
inline bool IndSendAssistVideolabel::has_leftuppoints_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndSendAssistVideolabel::set_has_leftuppoints_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndSendAssistVideolabel::clear_has_leftuppoints_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndSendAssistVideolabel::clear_leftuppoints_x() {
  leftuppoints_x_ = 0u;
  clear_has_leftuppoints_x();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::leftuppoints_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.leftuppoints_x)
  return leftuppoints_x_;
}
inline void IndSendAssistVideolabel::set_leftuppoints_x(::google::protobuf::uint32 value) {
  set_has_leftuppoints_x();
  leftuppoints_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.leftuppoints_x)
}

// optional uint32 leftuppoints_y = 10;
inline bool IndSendAssistVideolabel::has_leftuppoints_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndSendAssistVideolabel::set_has_leftuppoints_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndSendAssistVideolabel::clear_has_leftuppoints_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndSendAssistVideolabel::clear_leftuppoints_y() {
  leftuppoints_y_ = 0u;
  clear_has_leftuppoints_y();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::leftuppoints_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.leftuppoints_y)
  return leftuppoints_y_;
}
inline void IndSendAssistVideolabel::set_leftuppoints_y(::google::protobuf::uint32 value) {
  set_has_leftuppoints_y();
  leftuppoints_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.leftuppoints_y)
}

// optional uint32 rightdownpoints_x = 11;
inline bool IndSendAssistVideolabel::has_rightdownpoints_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndSendAssistVideolabel::set_has_rightdownpoints_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndSendAssistVideolabel::clear_has_rightdownpoints_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndSendAssistVideolabel::clear_rightdownpoints_x() {
  rightdownpoints_x_ = 0u;
  clear_has_rightdownpoints_x();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::rightdownpoints_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.rightdownpoints_x)
  return rightdownpoints_x_;
}
inline void IndSendAssistVideolabel::set_rightdownpoints_x(::google::protobuf::uint32 value) {
  set_has_rightdownpoints_x();
  rightdownpoints_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.rightdownpoints_x)
}

// optional uint32 rightdownpoints_y = 12;
inline bool IndSendAssistVideolabel::has_rightdownpoints_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndSendAssistVideolabel::set_has_rightdownpoints_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndSendAssistVideolabel::clear_has_rightdownpoints_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndSendAssistVideolabel::clear_rightdownpoints_y() {
  rightdownpoints_y_ = 0u;
  clear_has_rightdownpoints_y();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::rightdownpoints_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.rightdownpoints_y)
  return rightdownpoints_y_;
}
inline void IndSendAssistVideolabel::set_rightdownpoints_y(::google::protobuf::uint32 value) {
  set_has_rightdownpoints_y();
  rightdownpoints_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.rightdownpoints_y)
}

// optional uint32 resolution_x = 13;
inline bool IndSendAssistVideolabel::has_resolution_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IndSendAssistVideolabel::set_has_resolution_x() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IndSendAssistVideolabel::clear_has_resolution_x() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IndSendAssistVideolabel::clear_resolution_x() {
  resolution_x_ = 0u;
  clear_has_resolution_x();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::resolution_x() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.resolution_x)
  return resolution_x_;
}
inline void IndSendAssistVideolabel::set_resolution_x(::google::protobuf::uint32 value) {
  set_has_resolution_x();
  resolution_x_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.resolution_x)
}

// optional uint32 resolution_y = 14;
inline bool IndSendAssistVideolabel::has_resolution_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IndSendAssistVideolabel::set_has_resolution_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IndSendAssistVideolabel::clear_has_resolution_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IndSendAssistVideolabel::clear_resolution_y() {
  resolution_y_ = 0u;
  clear_has_resolution_y();
}
inline ::google::protobuf::uint32 IndSendAssistVideolabel::resolution_y() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.resolution_y)
  return resolution_y_;
}
inline void IndSendAssistVideolabel::set_resolution_y(::google::protobuf::uint32 value) {
  set_has_resolution_y();
  resolution_y_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.resolution_y)
}

// optional string domainname = 15;
inline bool IndSendAssistVideolabel::has_domainname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IndSendAssistVideolabel::set_has_domainname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IndSendAssistVideolabel::clear_has_domainname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IndSendAssistVideolabel::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndSendAssistVideolabel::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.domainname)
  return *domainname_;
}
inline void IndSendAssistVideolabel::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSendAssistVideolabel.domainname)
}
inline void IndSendAssistVideolabel::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSendAssistVideolabel.domainname)
}
inline void IndSendAssistVideolabel::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSendAssistVideolabel.domainname)
}
inline ::std::string* IndSendAssistVideolabel::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.domainname)
  return domainname_;
}
inline ::std::string* IndSendAssistVideolabel::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSendAssistVideolabel::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSendAssistVideolabel.domainname)
}

// repeated .SRMsgs.IndSendAssistVideolabel.AddrInfo svraddrs = 16;
inline int IndSendAssistVideolabel::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndSendAssistVideolabel::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideolabel_AddrInfo& IndSendAssistVideolabel::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_AddrInfo* IndSendAssistVideolabel::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_AddrInfo* IndSendAssistVideolabel::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideolabel.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_AddrInfo >&
IndSendAssistVideolabel::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideolabel.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_AddrInfo >*
IndSendAssistVideolabel::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideolabel.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndSendAssistVideolabel.DomainInfo domains = 17;
inline int IndSendAssistVideolabel::domains_size() const {
  return domains_.size();
}
inline void IndSendAssistVideolabel::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndSendAssistVideolabel_DomainInfo& IndSendAssistVideolabel::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSendAssistVideolabel.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_DomainInfo* IndSendAssistVideolabel::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSendAssistVideolabel.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndSendAssistVideolabel_DomainInfo* IndSendAssistVideolabel::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSendAssistVideolabel.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_DomainInfo >&
IndSendAssistVideolabel::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSendAssistVideolabel.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSendAssistVideolabel_DomainInfo >*
IndSendAssistVideolabel::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSendAssistVideolabel.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerChangeConfCryptoKey_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerChangeConfCryptoKey_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.nettype)
  return nettype_;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerChangeConfCryptoKey_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerChangeConfCryptoKey_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
  return *ip_;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
}
inline ::std::string* IndTerChangeConfCryptoKey_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerChangeConfCryptoKey_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerChangeConfCryptoKey_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeConfCryptoKey_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.port)
  return port_;
}
inline void IndTerChangeConfCryptoKey_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerChangeConfCryptoKey_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerChangeConfCryptoKey_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerChangeConfCryptoKey.IPPORT ipportinfos = 2;
inline int IndTerChangeConfCryptoKey_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerChangeConfCryptoKey_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT& IndTerChangeConfCryptoKey_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT* IndTerChangeConfCryptoKey_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT* IndTerChangeConfCryptoKey_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT >&
IndTerChangeConfCryptoKey_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_IPPORT >*
IndTerChangeConfCryptoKey_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerChangeConfCryptoKey_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.level)
  return level_;
}
inline void IndTerChangeConfCryptoKey_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerChangeConfCryptoKey_DomainInfo

// optional string dname = 1;
inline bool IndTerChangeConfCryptoKey_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerChangeConfCryptoKey_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
  return *dname_;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
}
inline ::std::string* IndTerChangeConfCryptoKey_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerChangeConfCryptoKey_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerChangeConfCryptoKey_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerChangeConfCryptoKey_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerChangeConfCryptoKey

// optional uint64 confid = 1;
inline bool IndTerChangeConfCryptoKey::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeConfCryptoKey::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeConfCryptoKey::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeConfCryptoKey::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerChangeConfCryptoKey::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.confid)
  return confid_;
}
inline void IndTerChangeConfCryptoKey::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.confid)
}

// optional uint32 terid = 2;
inline bool IndTerChangeConfCryptoKey::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeConfCryptoKey::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeConfCryptoKey::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeConfCryptoKey::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerChangeConfCryptoKey::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.terid)
  return terid_;
}
inline void IndTerChangeConfCryptoKey::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.terid)
}

// optional string cryptokey = 3;
inline bool IndTerChangeConfCryptoKey::has_cryptokey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeConfCryptoKey::set_has_cryptokey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeConfCryptoKey::clear_has_cryptokey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeConfCryptoKey::clear_cryptokey() {
  if (cryptokey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cryptokey_->clear();
  }
  clear_has_cryptokey();
}
inline const ::std::string& IndTerChangeConfCryptoKey::cryptokey() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
  return *cryptokey_;
}
inline void IndTerChangeConfCryptoKey::set_cryptokey(const ::std::string& value) {
  set_has_cryptokey();
  if (cryptokey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cryptokey_ = new ::std::string;
  }
  cryptokey_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
}
inline void IndTerChangeConfCryptoKey::set_cryptokey(const char* value) {
  set_has_cryptokey();
  if (cryptokey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cryptokey_ = new ::std::string;
  }
  cryptokey_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
}
inline void IndTerChangeConfCryptoKey::set_cryptokey(const char* value, size_t size) {
  set_has_cryptokey();
  if (cryptokey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cryptokey_ = new ::std::string;
  }
  cryptokey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
}
inline ::std::string* IndTerChangeConfCryptoKey::mutable_cryptokey() {
  set_has_cryptokey();
  if (cryptokey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cryptokey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
  return cryptokey_;
}
inline ::std::string* IndTerChangeConfCryptoKey::release_cryptokey() {
  clear_has_cryptokey();
  if (cryptokey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cryptokey_;
    cryptokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeConfCryptoKey::set_allocated_cryptokey(::std::string* cryptokey) {
  if (cryptokey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cryptokey_;
  }
  if (cryptokey) {
    set_has_cryptokey();
    cryptokey_ = cryptokey;
  } else {
    clear_has_cryptokey();
    cryptokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeConfCryptoKey.cryptokey)
}

// optional string domainname = 4;
inline bool IndTerChangeConfCryptoKey::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerChangeConfCryptoKey::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerChangeConfCryptoKey::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerChangeConfCryptoKey::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerChangeConfCryptoKey::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.domainname)
  return *domainname_;
}
inline void IndTerChangeConfCryptoKey::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeConfCryptoKey.domainname)
}
inline void IndTerChangeConfCryptoKey::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeConfCryptoKey.domainname)
}
inline void IndTerChangeConfCryptoKey::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeConfCryptoKey.domainname)
}
inline ::std::string* IndTerChangeConfCryptoKey::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.domainname)
  return domainname_;
}
inline ::std::string* IndTerChangeConfCryptoKey::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeConfCryptoKey::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeConfCryptoKey.domainname)
}

// repeated .SRMsgs.IndTerChangeConfCryptoKey.AddrInfo svraddrs = 5;
inline int IndTerChangeConfCryptoKey::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerChangeConfCryptoKey::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo& IndTerChangeConfCryptoKey::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo* IndTerChangeConfCryptoKey::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo* IndTerChangeConfCryptoKey::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeConfCryptoKey.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo >&
IndTerChangeConfCryptoKey::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeConfCryptoKey.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_AddrInfo >*
IndTerChangeConfCryptoKey::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeConfCryptoKey.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerChangeConfCryptoKey.DomainInfo domains = 6;
inline int IndTerChangeConfCryptoKey::domains_size() const {
  return domains_.size();
}
inline void IndTerChangeConfCryptoKey::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo& IndTerChangeConfCryptoKey::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeConfCryptoKey.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo* IndTerChangeConfCryptoKey::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeConfCryptoKey.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo* IndTerChangeConfCryptoKey::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeConfCryptoKey.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo >&
IndTerChangeConfCryptoKey::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeConfCryptoKey.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeConfCryptoKey_DomainInfo >*
IndTerChangeConfCryptoKey::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeConfCryptoKey.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndChangeVideoSourceName_IPPORT

// optional uint32 nettype = 1;
inline bool IndChangeVideoSourceName_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourceName_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.IPPORT.nettype)
  return nettype_;
}
inline void IndChangeVideoSourceName_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndChangeVideoSourceName_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourceName_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndChangeVideoSourceName_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
  return *ip_;
}
inline void IndChangeVideoSourceName_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
}
inline void IndChangeVideoSourceName_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
}
inline void IndChangeVideoSourceName_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
}
inline ::std::string* IndChangeVideoSourceName_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndChangeVideoSourceName_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourceName_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourceName.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndChangeVideoSourceName_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourceName_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourceName_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.IPPORT.port)
  return port_;
}
inline void IndChangeVideoSourceName_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.IPPORT.port)
}

// -------------------------------------------------------------------

// IndChangeVideoSourceName_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndChangeVideoSourceName_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourceName_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourceName_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourceName_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndChangeVideoSourceName_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndChangeVideoSourceName.IPPORT ipportinfos = 2;
inline int IndChangeVideoSourceName_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndChangeVideoSourceName_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourceName_IPPORT& IndChangeVideoSourceName_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_IPPORT* IndChangeVideoSourceName_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_IPPORT* IndChangeVideoSourceName_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_IPPORT >&
IndChangeVideoSourceName_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourceName.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_IPPORT >*
IndChangeVideoSourceName_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourceName.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndChangeVideoSourceName_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourceName_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourceName_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourceName_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.AddrInfo.level)
  return level_;
}
inline void IndChangeVideoSourceName_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndChangeVideoSourceName_DomainInfo

// optional string dname = 1;
inline bool IndChangeVideoSourceName_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourceName_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourceName_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourceName_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndChangeVideoSourceName_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
  return *dname_;
}
inline void IndChangeVideoSourceName_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
}
inline void IndChangeVideoSourceName_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
}
inline void IndChangeVideoSourceName_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
}
inline ::std::string* IndChangeVideoSourceName_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndChangeVideoSourceName_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourceName_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourceName.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndChangeVideoSourceName_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourceName_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourceName_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourceName_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndChangeVideoSourceName_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndChangeVideoSourceName_SourceInfo

// optional uint32 srcid = 1;
inline bool IndChangeVideoSourceName_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourceName_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourceName_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourceName_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.SourceInfo.srcid)
  return srcid_;
}
inline void IndChangeVideoSourceName_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndChangeVideoSourceName_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourceName_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourceName_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourceName_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndChangeVideoSourceName_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
  return *name_;
}
inline void IndChangeVideoSourceName_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
}
inline void IndChangeVideoSourceName_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
}
inline void IndChangeVideoSourceName_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
}
inline ::std::string* IndChangeVideoSourceName_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
  return name_;
}
inline ::std::string* IndChangeVideoSourceName_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourceName_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourceName.SourceInfo.name)
}

// -------------------------------------------------------------------

// IndChangeVideoSourceName

// optional uint64 confid = 1;
inline bool IndChangeVideoSourceName::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourceName::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourceName::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourceName::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndChangeVideoSourceName::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.confid)
  return confid_;
}
inline void IndChangeVideoSourceName::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.confid)
}

// optional uint32 terid = 2;
inline bool IndChangeVideoSourceName::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourceName::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourceName::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourceName::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.terid)
  return terid_;
}
inline void IndChangeVideoSourceName::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.terid)
}

// optional uint32 changeterid = 3;
inline bool IndChangeVideoSourceName::has_changeterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourceName::set_has_changeterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourceName::clear_has_changeterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourceName::clear_changeterid() {
  changeterid_ = 0u;
  clear_has_changeterid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourceName::changeterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.changeterid)
  return changeterid_;
}
inline void IndChangeVideoSourceName::set_changeterid(::google::protobuf::uint32 value) {
  set_has_changeterid();
  changeterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.changeterid)
}

// repeated .SRMsgs.IndChangeVideoSourceName.SourceInfo srcinfos = 4;
inline int IndChangeVideoSourceName::srcinfos_size() const {
  return srcinfos_.size();
}
inline void IndChangeVideoSourceName::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourceName_SourceInfo& IndChangeVideoSourceName::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_SourceInfo* IndChangeVideoSourceName::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_SourceInfo* IndChangeVideoSourceName::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourceName.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_SourceInfo >&
IndChangeVideoSourceName::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourceName.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_SourceInfo >*
IndChangeVideoSourceName::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourceName.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 5;
inline bool IndChangeVideoSourceName::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndChangeVideoSourceName::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndChangeVideoSourceName::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndChangeVideoSourceName::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndChangeVideoSourceName::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.domainname)
  return *domainname_;
}
inline void IndChangeVideoSourceName::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourceName.domainname)
}
inline void IndChangeVideoSourceName::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourceName.domainname)
}
inline void IndChangeVideoSourceName::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourceName.domainname)
}
inline ::std::string* IndChangeVideoSourceName::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.domainname)
  return domainname_;
}
inline ::std::string* IndChangeVideoSourceName::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourceName::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourceName.domainname)
}

// repeated .SRMsgs.IndChangeVideoSourceName.AddrInfo svraddrs = 6;
inline int IndChangeVideoSourceName::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndChangeVideoSourceName::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourceName_AddrInfo& IndChangeVideoSourceName::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_AddrInfo* IndChangeVideoSourceName::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_AddrInfo* IndChangeVideoSourceName::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourceName.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_AddrInfo >&
IndChangeVideoSourceName::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourceName.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_AddrInfo >*
IndChangeVideoSourceName::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourceName.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndChangeVideoSourceName.DomainInfo domains = 7;
inline int IndChangeVideoSourceName::domains_size() const {
  return domains_.size();
}
inline void IndChangeVideoSourceName::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourceName_DomainInfo& IndChangeVideoSourceName::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourceName.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_DomainInfo* IndChangeVideoSourceName::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourceName.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourceName_DomainInfo* IndChangeVideoSourceName::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourceName.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_DomainInfo >&
IndChangeVideoSourceName::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourceName.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourceName_DomainInfo >*
IndChangeVideoSourceName::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourceName.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndChangeVideoSourcePriority_IPPORT

// optional uint32 nettype = 1;
inline bool IndChangeVideoSourcePriority_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.IPPORT.nettype)
  return nettype_;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndChangeVideoSourcePriority_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndChangeVideoSourcePriority_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
  return *ip_;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
}
inline void IndChangeVideoSourcePriority_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
}
inline void IndChangeVideoSourcePriority_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
}
inline ::std::string* IndChangeVideoSourcePriority_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndChangeVideoSourcePriority_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourcePriority_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourcePriority.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndChangeVideoSourcePriority_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourcePriority_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.IPPORT.port)
  return port_;
}
inline void IndChangeVideoSourcePriority_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.IPPORT.port)
}

// -------------------------------------------------------------------

// IndChangeVideoSourcePriority_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndChangeVideoSourcePriority_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourcePriority_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourcePriority_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourcePriority_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndChangeVideoSourcePriority_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndChangeVideoSourcePriority.IPPORT ipportinfos = 2;
inline int IndChangeVideoSourcePriority_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndChangeVideoSourcePriority_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourcePriority_IPPORT& IndChangeVideoSourcePriority_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_IPPORT* IndChangeVideoSourcePriority_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_IPPORT* IndChangeVideoSourcePriority_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_IPPORT >&
IndChangeVideoSourcePriority_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_IPPORT >*
IndChangeVideoSourcePriority_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndChangeVideoSourcePriority_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourcePriority_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourcePriority_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourcePriority_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.level)
  return level_;
}
inline void IndChangeVideoSourcePriority_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndChangeVideoSourcePriority_DomainInfo

// optional string dname = 1;
inline bool IndChangeVideoSourcePriority_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourcePriority_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourcePriority_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndChangeVideoSourcePriority_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
  return *dname_;
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
}
inline ::std::string* IndChangeVideoSourcePriority_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndChangeVideoSourcePriority_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndChangeVideoSourcePriority_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourcePriority_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourcePriority_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndChangeVideoSourcePriority_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndChangeVideoSourcePriority_SourceInfo

// optional uint32 srcid = 1;
inline bool IndChangeVideoSourcePriority_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourcePriority_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourcePriority_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourcePriority_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.SourceInfo.srcid)
  return srcid_;
}
inline void IndChangeVideoSourcePriority_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.SourceInfo.srcid)
}

// optional uint32 priority = 2;
inline bool IndChangeVideoSourcePriority_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourcePriority_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourcePriority_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourcePriority_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.SourceInfo.priority)
  return priority_;
}
inline void IndChangeVideoSourcePriority_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndChangeVideoSourcePriority

// optional uint64 confid = 1;
inline bool IndChangeVideoSourcePriority::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeVideoSourcePriority::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeVideoSourcePriority::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeVideoSourcePriority::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndChangeVideoSourcePriority::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.confid)
  return confid_;
}
inline void IndChangeVideoSourcePriority::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.confid)
}

// optional uint32 terid = 2;
inline bool IndChangeVideoSourcePriority::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeVideoSourcePriority::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeVideoSourcePriority::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeVideoSourcePriority::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.terid)
  return terid_;
}
inline void IndChangeVideoSourcePriority::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.terid)
}

// optional uint32 changeterid = 3;
inline bool IndChangeVideoSourcePriority::has_changeterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeVideoSourcePriority::set_has_changeterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeVideoSourcePriority::clear_has_changeterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeVideoSourcePriority::clear_changeterid() {
  changeterid_ = 0u;
  clear_has_changeterid();
}
inline ::google::protobuf::uint32 IndChangeVideoSourcePriority::changeterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.changeterid)
  return changeterid_;
}
inline void IndChangeVideoSourcePriority::set_changeterid(::google::protobuf::uint32 value) {
  set_has_changeterid();
  changeterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.changeterid)
}

// repeated .SRMsgs.IndChangeVideoSourcePriority.SourceInfo allsrcinfos = 4;
inline int IndChangeVideoSourcePriority::allsrcinfos_size() const {
  return allsrcinfos_.size();
}
inline void IndChangeVideoSourcePriority::clear_allsrcinfos() {
  allsrcinfos_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo& IndChangeVideoSourcePriority::allsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo* IndChangeVideoSourcePriority::mutable_allsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo* IndChangeVideoSourcePriority::add_allsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo >&
IndChangeVideoSourcePriority::allsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourcePriority.allsrcinfos)
  return allsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_SourceInfo >*
IndChangeVideoSourcePriority::mutable_allsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourcePriority.allsrcinfos)
  return &allsrcinfos_;
}

// optional string domainname = 5;
inline bool IndChangeVideoSourcePriority::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndChangeVideoSourcePriority::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndChangeVideoSourcePriority::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndChangeVideoSourcePriority::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndChangeVideoSourcePriority::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.domainname)
  return *domainname_;
}
inline void IndChangeVideoSourcePriority::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeVideoSourcePriority.domainname)
}
inline void IndChangeVideoSourcePriority::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeVideoSourcePriority.domainname)
}
inline void IndChangeVideoSourcePriority::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeVideoSourcePriority.domainname)
}
inline ::std::string* IndChangeVideoSourcePriority::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.domainname)
  return domainname_;
}
inline ::std::string* IndChangeVideoSourcePriority::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeVideoSourcePriority::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeVideoSourcePriority.domainname)
}

// repeated .SRMsgs.IndChangeVideoSourcePriority.AddrInfo svraddrs = 6;
inline int IndChangeVideoSourcePriority::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndChangeVideoSourcePriority::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo& IndChangeVideoSourcePriority::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo* IndChangeVideoSourcePriority::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo* IndChangeVideoSourcePriority::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourcePriority.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo >&
IndChangeVideoSourcePriority::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourcePriority.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_AddrInfo >*
IndChangeVideoSourcePriority::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourcePriority.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndChangeVideoSourcePriority.DomainInfo domains = 7;
inline int IndChangeVideoSourcePriority::domains_size() const {
  return domains_.size();
}
inline void IndChangeVideoSourcePriority::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo& IndChangeVideoSourcePriority::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeVideoSourcePriority.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo* IndChangeVideoSourcePriority::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeVideoSourcePriority.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo* IndChangeVideoSourcePriority::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeVideoSourcePriority.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo >&
IndChangeVideoSourcePriority::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeVideoSourcePriority.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeVideoSourcePriority_DomainInfo >*
IndChangeVideoSourcePriority::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeVideoSourcePriority.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerChangeDeviceInfos_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.IPPORT.nettype)
  return nettype_;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerChangeDeviceInfos_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerChangeDeviceInfos_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
  return *ip_;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
}
inline void IndTerChangeDeviceInfos_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
}
inline void IndTerChangeDeviceInfos_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
}
inline ::std::string* IndTerChangeDeviceInfos_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerChangeDeviceInfos_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeDeviceInfos_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeDeviceInfos.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerChangeDeviceInfos_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeDeviceInfos_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.IPPORT.port)
  return port_;
}
inline void IndTerChangeDeviceInfos_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerChangeDeviceInfos_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerChangeDeviceInfos_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.IPPORT ipportinfos = 2;
inline int IndTerChangeDeviceInfos_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerChangeDeviceInfos_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_IPPORT& IndTerChangeDeviceInfos_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_IPPORT* IndTerChangeDeviceInfos_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_IPPORT* IndTerChangeDeviceInfos_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_IPPORT >&
IndTerChangeDeviceInfos_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_IPPORT >*
IndTerChangeDeviceInfos_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerChangeDeviceInfos_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeDeviceInfos_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeDeviceInfos_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeDeviceInfos_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.level)
  return level_;
}
inline void IndTerChangeDeviceInfos_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_DomainInfo

// optional string dname = 1;
inline bool IndTerChangeDeviceInfos_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerChangeDeviceInfos_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
  return *dname_;
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
}
inline ::std::string* IndTerChangeDeviceInfos_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerChangeDeviceInfos_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerChangeDeviceInfos_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeDeviceInfos_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeDeviceInfos_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerChangeDeviceInfos_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_PresetInfo

// optional uint32 presetid = 1;
inline bool IndTerChangeDeviceInfos_PresetInfo::has_presetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_has_presetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_has_presetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_presetid() {
  presetid_ = 0u;
  clear_has_presetid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_PresetInfo::presetid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetid)
  return presetid_;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_presetid(::google::protobuf::uint32 value) {
  set_has_presetid();
  presetid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetid)
}

// optional string presetname = 2;
inline bool IndTerChangeDeviceInfos_PresetInfo::has_presetname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_has_presetname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_has_presetname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_presetname() {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_->clear();
  }
  clear_has_presetname();
}
inline const ::std::string& IndTerChangeDeviceInfos_PresetInfo::presetname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
  return *presetname_;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_presetname(const ::std::string& value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_presetname(const char* value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_presetname(const char* value, size_t size) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
}
inline ::std::string* IndTerChangeDeviceInfos_PresetInfo::mutable_presetname() {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
  return presetname_;
}
inline ::std::string* IndTerChangeDeviceInfos_PresetInfo::release_presetname() {
  clear_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = presetname_;
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_allocated_presetname(::std::string* presetname) {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presetname_;
  }
  if (presetname) {
    set_has_presetname();
    presetname_ = presetname;
  } else {
    clear_has_presetname();
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.presetname)
}

// optional uint32 relatedvsrcid = 3;
inline bool IndTerChangeDeviceInfos_PresetInfo::has_relatedvsrcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_has_relatedvsrcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_has_relatedvsrcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeDeviceInfos_PresetInfo::clear_relatedvsrcid() {
  relatedvsrcid_ = 0u;
  clear_has_relatedvsrcid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_PresetInfo::relatedvsrcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.relatedvsrcid)
  return relatedvsrcid_;
}
inline void IndTerChangeDeviceInfos_PresetInfo::set_relatedvsrcid(::google::protobuf::uint32 value) {
  set_has_relatedvsrcid();
  relatedvsrcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.PresetInfo.relatedvsrcid)
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_SourceInfo

// optional uint32 srcid = 1;
inline bool IndTerChangeDeviceInfos_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.srcid)
  return srcid_;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndTerChangeDeviceInfos_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndTerChangeDeviceInfos_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
  return *name_;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
}
inline ::std::string* IndTerChangeDeviceInfos_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
  return name_;
}
inline ::std::string* IndTerChangeDeviceInfos_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndTerChangeDeviceInfos_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndTerChangeDeviceInfos_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.isOn)
  return ison_;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndTerChangeDeviceInfos_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerChangeDeviceInfos_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.priority)
  return priority_;
}
inline void IndTerChangeDeviceInfos_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos_DeviceInfo

// optional uint32 type = 1;
inline bool IndTerChangeDeviceInfos_DeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos_DeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos_DeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos_DeviceInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos_DeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.type)
  return type_;
}
inline void IndTerChangeDeviceInfos_DeviceInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.type)
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
inline int IndTerChangeDeviceInfos_DeviceInfo::oldsrcinfos_size() const {
  return oldsrcinfos_.size();
}
inline void IndTerChangeDeviceInfos_DeviceInfo::clear_oldsrcinfos() {
  oldsrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo& IndTerChangeDeviceInfos_DeviceInfo::oldsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.oldsrcinfos)
  return oldsrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* IndTerChangeDeviceInfos_DeviceInfo::mutable_oldsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.oldsrcinfos)
  return oldsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* IndTerChangeDeviceInfos_DeviceInfo::add_oldsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.oldsrcinfos)
  return oldsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >&
IndTerChangeDeviceInfos_DeviceInfo::oldsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.oldsrcinfos)
  return oldsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >*
IndTerChangeDeviceInfos_DeviceInfo::mutable_oldsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.oldsrcinfos)
  return &oldsrcinfos_;
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.SourceInfo newsrcinfos = 3;
inline int IndTerChangeDeviceInfos_DeviceInfo::newsrcinfos_size() const {
  return newsrcinfos_.size();
}
inline void IndTerChangeDeviceInfos_DeviceInfo::clear_newsrcinfos() {
  newsrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo& IndTerChangeDeviceInfos_DeviceInfo::newsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.newsrcinfos)
  return newsrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* IndTerChangeDeviceInfos_DeviceInfo::mutable_newsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.newsrcinfos)
  return newsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo* IndTerChangeDeviceInfos_DeviceInfo::add_newsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.newsrcinfos)
  return newsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >&
IndTerChangeDeviceInfos_DeviceInfo::newsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.newsrcinfos)
  return newsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_SourceInfo >*
IndTerChangeDeviceInfos_DeviceInfo::mutable_newsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.DeviceInfo.newsrcinfos)
  return &newsrcinfos_;
}

// -------------------------------------------------------------------

// IndTerChangeDeviceInfos

// optional uint64 confid = 1;
inline bool IndTerChangeDeviceInfos::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerChangeDeviceInfos::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerChangeDeviceInfos::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerChangeDeviceInfos::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerChangeDeviceInfos::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.confid)
  return confid_;
}
inline void IndTerChangeDeviceInfos::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.confid)
}

// optional uint32 terid = 2;
inline bool IndTerChangeDeviceInfos::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerChangeDeviceInfos::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerChangeDeviceInfos::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerChangeDeviceInfos::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.terid)
  return terid_;
}
inline void IndTerChangeDeviceInfos::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.terid)
}

// optional uint32 changeterid = 3;
inline bool IndTerChangeDeviceInfos::has_changeterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerChangeDeviceInfos::set_has_changeterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerChangeDeviceInfos::clear_has_changeterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerChangeDeviceInfos::clear_changeterid() {
  changeterid_ = 0u;
  clear_has_changeterid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos::changeterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.changeterid)
  return changeterid_;
}
inline void IndTerChangeDeviceInfos::set_changeterid(::google::protobuf::uint32 value) {
  set_has_changeterid();
  changeterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.changeterid)
}

// optional uint32 changesuid = 4;
inline bool IndTerChangeDeviceInfos::has_changesuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerChangeDeviceInfos::set_has_changesuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerChangeDeviceInfos::clear_has_changesuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerChangeDeviceInfos::clear_changesuid() {
  changesuid_ = 0u;
  clear_has_changesuid();
}
inline ::google::protobuf::uint32 IndTerChangeDeviceInfos::changesuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.changesuid)
  return changesuid_;
}
inline void IndTerChangeDeviceInfos::set_changesuid(::google::protobuf::uint32 value) {
  set_has_changesuid();
  changesuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.changesuid)
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.PresetInfo oldpresetinfos = 5;
inline int IndTerChangeDeviceInfos::oldpresetinfos_size() const {
  return oldpresetinfos_.size();
}
inline void IndTerChangeDeviceInfos::clear_oldpresetinfos() {
  oldpresetinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo& IndTerChangeDeviceInfos::oldpresetinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.oldpresetinfos)
  return oldpresetinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* IndTerChangeDeviceInfos::mutable_oldpresetinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.oldpresetinfos)
  return oldpresetinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* IndTerChangeDeviceInfos::add_oldpresetinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.oldpresetinfos)
  return oldpresetinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >&
IndTerChangeDeviceInfos::oldpresetinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.oldpresetinfos)
  return oldpresetinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >*
IndTerChangeDeviceInfos::mutable_oldpresetinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.oldpresetinfos)
  return &oldpresetinfos_;
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.PresetInfo newpresetinfos = 6;
inline int IndTerChangeDeviceInfos::newpresetinfos_size() const {
  return newpresetinfos_.size();
}
inline void IndTerChangeDeviceInfos::clear_newpresetinfos() {
  newpresetinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo& IndTerChangeDeviceInfos::newpresetinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.newpresetinfos)
  return newpresetinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* IndTerChangeDeviceInfos::mutable_newpresetinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.newpresetinfos)
  return newpresetinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo* IndTerChangeDeviceInfos::add_newpresetinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.newpresetinfos)
  return newpresetinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >&
IndTerChangeDeviceInfos::newpresetinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.newpresetinfos)
  return newpresetinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_PresetInfo >*
IndTerChangeDeviceInfos::mutable_newpresetinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.newpresetinfos)
  return &newpresetinfos_;
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.DeviceInfo deviceinfos = 7;
inline int IndTerChangeDeviceInfos::deviceinfos_size() const {
  return deviceinfos_.size();
}
inline void IndTerChangeDeviceInfos::clear_deviceinfos() {
  deviceinfos_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo& IndTerChangeDeviceInfos::deviceinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.deviceinfos)
  return deviceinfos_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo* IndTerChangeDeviceInfos::mutable_deviceinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.deviceinfos)
  return deviceinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo* IndTerChangeDeviceInfos::add_deviceinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.deviceinfos)
  return deviceinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo >&
IndTerChangeDeviceInfos::deviceinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.deviceinfos)
  return deviceinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DeviceInfo >*
IndTerChangeDeviceInfos::mutable_deviceinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.deviceinfos)
  return &deviceinfos_;
}

// optional string domainname = 8;
inline bool IndTerChangeDeviceInfos::has_domainname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerChangeDeviceInfos::set_has_domainname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerChangeDeviceInfos::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerChangeDeviceInfos::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerChangeDeviceInfos::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.domainname)
  return *domainname_;
}
inline void IndTerChangeDeviceInfos::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerChangeDeviceInfos.domainname)
}
inline void IndTerChangeDeviceInfos::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerChangeDeviceInfos.domainname)
}
inline void IndTerChangeDeviceInfos::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerChangeDeviceInfos.domainname)
}
inline ::std::string* IndTerChangeDeviceInfos::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.domainname)
  return domainname_;
}
inline ::std::string* IndTerChangeDeviceInfos::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerChangeDeviceInfos::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerChangeDeviceInfos.domainname)
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.AddrInfo svraddrs = 9;
inline int IndTerChangeDeviceInfos::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerChangeDeviceInfos::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo& IndTerChangeDeviceInfos::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo* IndTerChangeDeviceInfos::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo* IndTerChangeDeviceInfos::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo >&
IndTerChangeDeviceInfos::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_AddrInfo >*
IndTerChangeDeviceInfos::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerChangeDeviceInfos.DomainInfo domains = 10;
inline int IndTerChangeDeviceInfos::domains_size() const {
  return domains_.size();
}
inline void IndTerChangeDeviceInfos::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo& IndTerChangeDeviceInfos::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerChangeDeviceInfos.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo* IndTerChangeDeviceInfos::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerChangeDeviceInfos.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo* IndTerChangeDeviceInfos::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerChangeDeviceInfos.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo >&
IndTerChangeDeviceInfos::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerChangeDeviceInfos.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerChangeDeviceInfos_DomainInfo >*
IndTerChangeDeviceInfos::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerChangeDeviceInfos.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerNewAudioSourceJoined_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerNewAudioSourceJoined_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.nettype)
  return nettype_;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerNewAudioSourceJoined_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerNewAudioSourceJoined_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
  return *ip_;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
}
inline ::std::string* IndTerNewAudioSourceJoined_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerNewAudioSourceJoined_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerNewAudioSourceJoined_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewAudioSourceJoined_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.port)
  return port_;
}
inline void IndTerNewAudioSourceJoined_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerNewAudioSourceJoined_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerNewAudioSourceJoined_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerNewAudioSourceJoined.IPPORT ipportinfos = 2;
inline int IndTerNewAudioSourceJoined_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerNewAudioSourceJoined_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT& IndTerNewAudioSourceJoined_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT* IndTerNewAudioSourceJoined_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT* IndTerNewAudioSourceJoined_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT >&
IndTerNewAudioSourceJoined_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_IPPORT >*
IndTerNewAudioSourceJoined_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerNewAudioSourceJoined_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.level)
  return level_;
}
inline void IndTerNewAudioSourceJoined_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerNewAudioSourceJoined_DomainInfo

// optional string dname = 1;
inline bool IndTerNewAudioSourceJoined_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerNewAudioSourceJoined_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
  return *dname_;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
}
inline ::std::string* IndTerNewAudioSourceJoined_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerNewAudioSourceJoined_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerNewAudioSourceJoined_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerNewAudioSourceJoined_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerNewAudioSourceJoined_SourceInfo

// optional uint32 srcid = 1;
inline bool IndTerNewAudioSourceJoined_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.srcid)
  return srcid_;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndTerNewAudioSourceJoined_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndTerNewAudioSourceJoined_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
  return *name_;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
}
inline ::std::string* IndTerNewAudioSourceJoined_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
  return name_;
}
inline ::std::string* IndTerNewAudioSourceJoined_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndTerNewAudioSourceJoined_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndTerNewAudioSourceJoined_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.isOn)
  return ison_;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndTerNewAudioSourceJoined_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.priority)
  return priority_;
}
inline void IndTerNewAudioSourceJoined_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndTerNewAudioSourceJoined

// optional uint64 confid = 1;
inline bool IndTerNewAudioSourceJoined::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewAudioSourceJoined::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewAudioSourceJoined::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerNewAudioSourceJoined::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.confid)
  return confid_;
}
inline void IndTerNewAudioSourceJoined::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.confid)
}

// optional uint32 terid = 2;
inline bool IndTerNewAudioSourceJoined::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewAudioSourceJoined::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewAudioSourceJoined::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.terid)
  return terid_;
}
inline void IndTerNewAudioSourceJoined::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.terid)
}

// optional uint32 jointerid = 3;
inline bool IndTerNewAudioSourceJoined::has_jointerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_jointerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewAudioSourceJoined::clear_has_jointerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewAudioSourceJoined::clear_jointerid() {
  jointerid_ = 0u;
  clear_has_jointerid();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined::jointerid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.jointerid)
  return jointerid_;
}
inline void IndTerNewAudioSourceJoined::set_jointerid(::google::protobuf::uint32 value) {
  set_has_jointerid();
  jointerid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.jointerid)
}

// optional uint32 joinsuid = 4;
inline bool IndTerNewAudioSourceJoined::has_joinsuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_joinsuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerNewAudioSourceJoined::clear_has_joinsuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerNewAudioSourceJoined::clear_joinsuid() {
  joinsuid_ = 0u;
  clear_has_joinsuid();
}
inline ::google::protobuf::uint32 IndTerNewAudioSourceJoined::joinsuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.joinsuid)
  return joinsuid_;
}
inline void IndTerNewAudioSourceJoined::set_joinsuid(::google::protobuf::uint32 value) {
  set_has_joinsuid();
  joinsuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.joinsuid)
}

// optional string jointername = 5;
inline bool IndTerNewAudioSourceJoined::has_jointername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_jointername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerNewAudioSourceJoined::clear_has_jointername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerNewAudioSourceJoined::clear_jointername() {
  if (jointername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_->clear();
  }
  clear_has_jointername();
}
inline const ::std::string& IndTerNewAudioSourceJoined::jointername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.jointername)
  return *jointername_;
}
inline void IndTerNewAudioSourceJoined::set_jointername(const ::std::string& value) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.jointername)
}
inline void IndTerNewAudioSourceJoined::set_jointername(const char* value) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewAudioSourceJoined.jointername)
}
inline void IndTerNewAudioSourceJoined::set_jointername(const char* value, size_t size) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewAudioSourceJoined.jointername)
}
inline ::std::string* IndTerNewAudioSourceJoined::mutable_jointername() {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.jointername)
  return jointername_;
}
inline ::std::string* IndTerNewAudioSourceJoined::release_jointername() {
  clear_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jointername_;
    jointername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewAudioSourceJoined::set_allocated_jointername(::std::string* jointername) {
  if (jointername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jointername_;
  }
  if (jointername) {
    set_has_jointername();
    jointername_ = jointername;
  } else {
    clear_has_jointername();
    jointername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewAudioSourceJoined.jointername)
}

// repeated .SRMsgs.IndTerNewAudioSourceJoined.SourceInfo srcinfos = 6;
inline int IndTerNewAudioSourceJoined::srcinfos_size() const {
  return srcinfos_.size();
}
inline void IndTerNewAudioSourceJoined::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo& IndTerNewAudioSourceJoined::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo* IndTerNewAudioSourceJoined::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo* IndTerNewAudioSourceJoined::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewAudioSourceJoined.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo >&
IndTerNewAudioSourceJoined::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewAudioSourceJoined.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_SourceInfo >*
IndTerNewAudioSourceJoined::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewAudioSourceJoined.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 7;
inline bool IndTerNewAudioSourceJoined::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerNewAudioSourceJoined::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerNewAudioSourceJoined::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerNewAudioSourceJoined::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerNewAudioSourceJoined::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.domainname)
  return *domainname_;
}
inline void IndTerNewAudioSourceJoined::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewAudioSourceJoined.domainname)
}
inline void IndTerNewAudioSourceJoined::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewAudioSourceJoined.domainname)
}
inline void IndTerNewAudioSourceJoined::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewAudioSourceJoined.domainname)
}
inline ::std::string* IndTerNewAudioSourceJoined::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.domainname)
  return domainname_;
}
inline ::std::string* IndTerNewAudioSourceJoined::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewAudioSourceJoined::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewAudioSourceJoined.domainname)
}

// repeated .SRMsgs.IndTerNewAudioSourceJoined.AddrInfo svraddrs = 8;
inline int IndTerNewAudioSourceJoined::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerNewAudioSourceJoined::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo& IndTerNewAudioSourceJoined::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo* IndTerNewAudioSourceJoined::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo* IndTerNewAudioSourceJoined::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewAudioSourceJoined.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo >&
IndTerNewAudioSourceJoined::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewAudioSourceJoined.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_AddrInfo >*
IndTerNewAudioSourceJoined::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewAudioSourceJoined.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerNewAudioSourceJoined.DomainInfo domains = 9;
inline int IndTerNewAudioSourceJoined::domains_size() const {
  return domains_.size();
}
inline void IndTerNewAudioSourceJoined::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo& IndTerNewAudioSourceJoined::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewAudioSourceJoined.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo* IndTerNewAudioSourceJoined::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewAudioSourceJoined.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo* IndTerNewAudioSourceJoined::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewAudioSourceJoined.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo >&
IndTerNewAudioSourceJoined::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewAudioSourceJoined.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewAudioSourceJoined_DomainInfo >*
IndTerNewAudioSourceJoined::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewAudioSourceJoined.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerAudioSourceLeave_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerAudioSourceLeave_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAudioSourceLeave_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.IPPORT.nettype)
  return nettype_;
}
inline void IndTerAudioSourceLeave_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerAudioSourceLeave_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAudioSourceLeave_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerAudioSourceLeave_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
  return *ip_;
}
inline void IndTerAudioSourceLeave_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
}
inline void IndTerAudioSourceLeave_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
}
inline void IndTerAudioSourceLeave_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
}
inline ::std::string* IndTerAudioSourceLeave_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerAudioSourceLeave_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAudioSourceLeave_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAudioSourceLeave.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerAudioSourceLeave_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAudioSourceLeave_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAudioSourceLeave_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.IPPORT.port)
  return port_;
}
inline void IndTerAudioSourceLeave_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerAudioSourceLeave_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerAudioSourceLeave_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAudioSourceLeave_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAudioSourceLeave_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAudioSourceLeave_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerAudioSourceLeave_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerAudioSourceLeave.IPPORT ipportinfos = 2;
inline int IndTerAudioSourceLeave_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerAudioSourceLeave_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerAudioSourceLeave_IPPORT& IndTerAudioSourceLeave_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_IPPORT* IndTerAudioSourceLeave_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_IPPORT* IndTerAudioSourceLeave_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_IPPORT >&
IndTerAudioSourceLeave_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAudioSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_IPPORT >*
IndTerAudioSourceLeave_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAudioSourceLeave.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerAudioSourceLeave_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAudioSourceLeave_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAudioSourceLeave_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAudioSourceLeave_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.AddrInfo.level)
  return level_;
}
inline void IndTerAudioSourceLeave_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerAudioSourceLeave_DomainInfo

// optional string dname = 1;
inline bool IndTerAudioSourceLeave_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAudioSourceLeave_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAudioSourceLeave_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAudioSourceLeave_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerAudioSourceLeave_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
  return *dname_;
}
inline void IndTerAudioSourceLeave_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
}
inline void IndTerAudioSourceLeave_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
}
inline void IndTerAudioSourceLeave_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
}
inline ::std::string* IndTerAudioSourceLeave_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerAudioSourceLeave_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAudioSourceLeave_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerAudioSourceLeave_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAudioSourceLeave_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAudioSourceLeave_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAudioSourceLeave_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerAudioSourceLeave_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerAudioSourceLeave_SourceInfo

// optional uint32 srcid = 1;
inline bool IndTerAudioSourceLeave_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAudioSourceLeave_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAudioSourceLeave_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAudioSourceLeave_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.SourceInfo.srcid)
  return srcid_;
}
inline void IndTerAudioSourceLeave_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndTerAudioSourceLeave_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAudioSourceLeave_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAudioSourceLeave_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAudioSourceLeave_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndTerAudioSourceLeave_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
  return *name_;
}
inline void IndTerAudioSourceLeave_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
}
inline void IndTerAudioSourceLeave_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
}
inline void IndTerAudioSourceLeave_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
}
inline ::std::string* IndTerAudioSourceLeave_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
  return name_;
}
inline ::std::string* IndTerAudioSourceLeave_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAudioSourceLeave_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAudioSourceLeave.SourceInfo.name)
}

// -------------------------------------------------------------------

// IndTerAudioSourceLeave

// optional uint64 confid = 1;
inline bool IndTerAudioSourceLeave::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAudioSourceLeave::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAudioSourceLeave::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerAudioSourceLeave::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.confid)
  return confid_;
}
inline void IndTerAudioSourceLeave::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.confid)
}

// optional uint32 terid = 2;
inline bool IndTerAudioSourceLeave::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAudioSourceLeave::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAudioSourceLeave::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.terid)
  return terid_;
}
inline void IndTerAudioSourceLeave::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.terid)
}

// optional uint32 leaveterid = 3;
inline bool IndTerAudioSourceLeave::has_leaveterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_leaveterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAudioSourceLeave::clear_has_leaveterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAudioSourceLeave::clear_leaveterid() {
  leaveterid_ = 0u;
  clear_has_leaveterid();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave::leaveterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.leaveterid)
  return leaveterid_;
}
inline void IndTerAudioSourceLeave::set_leaveterid(::google::protobuf::uint32 value) {
  set_has_leaveterid();
  leaveterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.leaveterid)
}

// optional uint32 leavesuid = 4;
inline bool IndTerAudioSourceLeave::has_leavesuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_leavesuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerAudioSourceLeave::clear_has_leavesuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerAudioSourceLeave::clear_leavesuid() {
  leavesuid_ = 0u;
  clear_has_leavesuid();
}
inline ::google::protobuf::uint32 IndTerAudioSourceLeave::leavesuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.leavesuid)
  return leavesuid_;
}
inline void IndTerAudioSourceLeave::set_leavesuid(::google::protobuf::uint32 value) {
  set_has_leavesuid();
  leavesuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.leavesuid)
}

// optional string leavetername = 5;
inline bool IndTerAudioSourceLeave::has_leavetername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_leavetername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerAudioSourceLeave::clear_has_leavetername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerAudioSourceLeave::clear_leavetername() {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_->clear();
  }
  clear_has_leavetername();
}
inline const ::std::string& IndTerAudioSourceLeave::leavetername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.leavetername)
  return *leavetername_;
}
inline void IndTerAudioSourceLeave::set_leavetername(const ::std::string& value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.leavetername)
}
inline void IndTerAudioSourceLeave::set_leavetername(const char* value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAudioSourceLeave.leavetername)
}
inline void IndTerAudioSourceLeave::set_leavetername(const char* value, size_t size) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAudioSourceLeave.leavetername)
}
inline ::std::string* IndTerAudioSourceLeave::mutable_leavetername() {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.leavetername)
  return leavetername_;
}
inline ::std::string* IndTerAudioSourceLeave::release_leavetername() {
  clear_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leavetername_;
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAudioSourceLeave::set_allocated_leavetername(::std::string* leavetername) {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leavetername_;
  }
  if (leavetername) {
    set_has_leavetername();
    leavetername_ = leavetername;
  } else {
    clear_has_leavetername();
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAudioSourceLeave.leavetername)
}

// repeated .SRMsgs.IndTerAudioSourceLeave.SourceInfo srcinfos = 6;
inline int IndTerAudioSourceLeave::srcinfos_size() const {
  return srcinfos_.size();
}
inline void IndTerAudioSourceLeave::clear_srcinfos() {
  srcinfos_.Clear();
}
inline const ::SRMsgs::IndTerAudioSourceLeave_SourceInfo& IndTerAudioSourceLeave::srcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.srcinfos)
  return srcinfos_.Get(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_SourceInfo* IndTerAudioSourceLeave::mutable_srcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.srcinfos)
  return srcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_SourceInfo* IndTerAudioSourceLeave::add_srcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAudioSourceLeave.srcinfos)
  return srcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_SourceInfo >&
IndTerAudioSourceLeave::srcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAudioSourceLeave.srcinfos)
  return srcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_SourceInfo >*
IndTerAudioSourceLeave::mutable_srcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAudioSourceLeave.srcinfos)
  return &srcinfos_;
}

// optional string domainname = 7;
inline bool IndTerAudioSourceLeave::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerAudioSourceLeave::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerAudioSourceLeave::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerAudioSourceLeave::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerAudioSourceLeave::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.domainname)
  return *domainname_;
}
inline void IndTerAudioSourceLeave::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAudioSourceLeave.domainname)
}
inline void IndTerAudioSourceLeave::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAudioSourceLeave.domainname)
}
inline void IndTerAudioSourceLeave::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAudioSourceLeave.domainname)
}
inline ::std::string* IndTerAudioSourceLeave::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.domainname)
  return domainname_;
}
inline ::std::string* IndTerAudioSourceLeave::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAudioSourceLeave::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAudioSourceLeave.domainname)
}

// repeated .SRMsgs.IndTerAudioSourceLeave.AddrInfo svraddrs = 8;
inline int IndTerAudioSourceLeave::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerAudioSourceLeave::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerAudioSourceLeave_AddrInfo& IndTerAudioSourceLeave::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_AddrInfo* IndTerAudioSourceLeave::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_AddrInfo* IndTerAudioSourceLeave::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAudioSourceLeave.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_AddrInfo >&
IndTerAudioSourceLeave::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAudioSourceLeave.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_AddrInfo >*
IndTerAudioSourceLeave::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAudioSourceLeave.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerAudioSourceLeave.DomainInfo domains = 9;
inline int IndTerAudioSourceLeave::domains_size() const {
  return domains_.size();
}
inline void IndTerAudioSourceLeave::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerAudioSourceLeave_DomainInfo& IndTerAudioSourceLeave::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAudioSourceLeave.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_DomainInfo* IndTerAudioSourceLeave::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAudioSourceLeave.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerAudioSourceLeave_DomainInfo* IndTerAudioSourceLeave::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAudioSourceLeave.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_DomainInfo >&
IndTerAudioSourceLeave::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAudioSourceLeave.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAudioSourceLeave_DomainInfo >*
IndTerAudioSourceLeave::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAudioSourceLeave.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerNewVideoSourceJoined_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerNewVideoSourceJoined_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.nettype)
  return nettype_;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerNewVideoSourceJoined_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerNewVideoSourceJoined_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
  return *ip_;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
}
inline ::std::string* IndTerNewVideoSourceJoined_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerNewVideoSourceJoined_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerNewVideoSourceJoined_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewVideoSourceJoined_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.port)
  return port_;
}
inline void IndTerNewVideoSourceJoined_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerNewVideoSourceJoined_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerNewVideoSourceJoined_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerNewVideoSourceJoined.IPPORT ipportinfos = 2;
inline int IndTerNewVideoSourceJoined_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerNewVideoSourceJoined_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT& IndTerNewVideoSourceJoined_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT* IndTerNewVideoSourceJoined_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT* IndTerNewVideoSourceJoined_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT >&
IndTerNewVideoSourceJoined_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_IPPORT >*
IndTerNewVideoSourceJoined_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerNewVideoSourceJoined_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.level)
  return level_;
}
inline void IndTerNewVideoSourceJoined_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerNewVideoSourceJoined_DomainInfo

// optional string dname = 1;
inline bool IndTerNewVideoSourceJoined_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerNewVideoSourceJoined_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
  return *dname_;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
}
inline ::std::string* IndTerNewVideoSourceJoined_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerNewVideoSourceJoined_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerNewVideoSourceJoined_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerNewVideoSourceJoined_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerNewVideoSourceJoined_SourceInfo

// optional uint32 srcid = 1;
inline bool IndTerNewVideoSourceJoined_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.srcid)
  return srcid_;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndTerNewVideoSourceJoined_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndTerNewVideoSourceJoined_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
  return *name_;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
}
inline ::std::string* IndTerNewVideoSourceJoined_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
  return name_;
}
inline ::std::string* IndTerNewVideoSourceJoined_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndTerNewVideoSourceJoined_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndTerNewVideoSourceJoined_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.isOn)
  return ison_;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndTerNewVideoSourceJoined_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.priority)
  return priority_;
}
inline void IndTerNewVideoSourceJoined_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndTerNewVideoSourceJoined

// optional uint64 confid = 1;
inline bool IndTerNewVideoSourceJoined::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerNewVideoSourceJoined::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerNewVideoSourceJoined::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerNewVideoSourceJoined::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.confid)
  return confid_;
}
inline void IndTerNewVideoSourceJoined::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.confid)
}

// optional uint32 terid = 2;
inline bool IndTerNewVideoSourceJoined::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerNewVideoSourceJoined::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerNewVideoSourceJoined::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.terid)
  return terid_;
}
inline void IndTerNewVideoSourceJoined::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.terid)
}

// optional uint32 jointerid = 3;
inline bool IndTerNewVideoSourceJoined::has_jointerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_jointerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerNewVideoSourceJoined::clear_has_jointerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerNewVideoSourceJoined::clear_jointerid() {
  jointerid_ = 0u;
  clear_has_jointerid();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined::jointerid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.jointerid)
  return jointerid_;
}
inline void IndTerNewVideoSourceJoined::set_jointerid(::google::protobuf::uint32 value) {
  set_has_jointerid();
  jointerid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.jointerid)
}

// optional uint32 joinsuid = 4;
inline bool IndTerNewVideoSourceJoined::has_joinsuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_joinsuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerNewVideoSourceJoined::clear_has_joinsuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerNewVideoSourceJoined::clear_joinsuid() {
  joinsuid_ = 0u;
  clear_has_joinsuid();
}
inline ::google::protobuf::uint32 IndTerNewVideoSourceJoined::joinsuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.joinsuid)
  return joinsuid_;
}
inline void IndTerNewVideoSourceJoined::set_joinsuid(::google::protobuf::uint32 value) {
  set_has_joinsuid();
  joinsuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.joinsuid)
}

// optional string jointername = 5;
inline bool IndTerNewVideoSourceJoined::has_jointername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_jointername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerNewVideoSourceJoined::clear_has_jointername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerNewVideoSourceJoined::clear_jointername() {
  if (jointername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_->clear();
  }
  clear_has_jointername();
}
inline const ::std::string& IndTerNewVideoSourceJoined::jointername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.jointername)
  return *jointername_;
}
inline void IndTerNewVideoSourceJoined::set_jointername(const ::std::string& value) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.jointername)
}
inline void IndTerNewVideoSourceJoined::set_jointername(const char* value) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewVideoSourceJoined.jointername)
}
inline void IndTerNewVideoSourceJoined::set_jointername(const char* value, size_t size) {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  jointername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewVideoSourceJoined.jointername)
}
inline ::std::string* IndTerNewVideoSourceJoined::mutable_jointername() {
  set_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jointername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.jointername)
  return jointername_;
}
inline ::std::string* IndTerNewVideoSourceJoined::release_jointername() {
  clear_has_jointername();
  if (jointername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jointername_;
    jointername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewVideoSourceJoined::set_allocated_jointername(::std::string* jointername) {
  if (jointername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jointername_;
  }
  if (jointername) {
    set_has_jointername();
    jointername_ = jointername;
  } else {
    clear_has_jointername();
    jointername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewVideoSourceJoined.jointername)
}

// repeated .SRMsgs.IndTerNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
inline int IndTerNewVideoSourceJoined::newsrcinfos_size() const {
  return newsrcinfos_.size();
}
inline void IndTerNewVideoSourceJoined::clear_newsrcinfos() {
  newsrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo& IndTerNewVideoSourceJoined::newsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* IndTerNewVideoSourceJoined::mutable_newsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* IndTerNewVideoSourceJoined::add_newsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >&
IndTerNewVideoSourceJoined::newsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewVideoSourceJoined.newsrcinfos)
  return newsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >*
IndTerNewVideoSourceJoined::mutable_newsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewVideoSourceJoined.newsrcinfos)
  return &newsrcinfos_;
}

// repeated .SRMsgs.IndTerNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
inline int IndTerNewVideoSourceJoined::allsrcinfos_size() const {
  return allsrcinfos_.size();
}
inline void IndTerNewVideoSourceJoined::clear_allsrcinfos() {
  allsrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo& IndTerNewVideoSourceJoined::allsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* IndTerNewVideoSourceJoined::mutable_allsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo* IndTerNewVideoSourceJoined::add_allsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >&
IndTerNewVideoSourceJoined::allsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewVideoSourceJoined.allsrcinfos)
  return allsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_SourceInfo >*
IndTerNewVideoSourceJoined::mutable_allsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewVideoSourceJoined.allsrcinfos)
  return &allsrcinfos_;
}

// optional string domainname = 8;
inline bool IndTerNewVideoSourceJoined::has_domainname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerNewVideoSourceJoined::set_has_domainname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerNewVideoSourceJoined::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerNewVideoSourceJoined::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerNewVideoSourceJoined::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.domainname)
  return *domainname_;
}
inline void IndTerNewVideoSourceJoined::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerNewVideoSourceJoined.domainname)
}
inline void IndTerNewVideoSourceJoined::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerNewVideoSourceJoined.domainname)
}
inline void IndTerNewVideoSourceJoined::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerNewVideoSourceJoined.domainname)
}
inline ::std::string* IndTerNewVideoSourceJoined::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.domainname)
  return domainname_;
}
inline ::std::string* IndTerNewVideoSourceJoined::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerNewVideoSourceJoined::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerNewVideoSourceJoined.domainname)
}

// repeated .SRMsgs.IndTerNewVideoSourceJoined.AddrInfo svraddrs = 9;
inline int IndTerNewVideoSourceJoined::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerNewVideoSourceJoined::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo& IndTerNewVideoSourceJoined::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo* IndTerNewVideoSourceJoined::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo* IndTerNewVideoSourceJoined::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewVideoSourceJoined.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo >&
IndTerNewVideoSourceJoined::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewVideoSourceJoined.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_AddrInfo >*
IndTerNewVideoSourceJoined::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewVideoSourceJoined.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerNewVideoSourceJoined.DomainInfo domains = 10;
inline int IndTerNewVideoSourceJoined::domains_size() const {
  return domains_.size();
}
inline void IndTerNewVideoSourceJoined::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo& IndTerNewVideoSourceJoined::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerNewVideoSourceJoined.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo* IndTerNewVideoSourceJoined::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerNewVideoSourceJoined.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo* IndTerNewVideoSourceJoined::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerNewVideoSourceJoined.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo >&
IndTerNewVideoSourceJoined::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerNewVideoSourceJoined.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerNewVideoSourceJoined_DomainInfo >*
IndTerNewVideoSourceJoined::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerNewVideoSourceJoined.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerVideoSourceLeave_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerVideoSourceLeave_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerVideoSourceLeave_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.IPPORT.nettype)
  return nettype_;
}
inline void IndTerVideoSourceLeave_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerVideoSourceLeave_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerVideoSourceLeave_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerVideoSourceLeave_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
  return *ip_;
}
inline void IndTerVideoSourceLeave_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
}
inline void IndTerVideoSourceLeave_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
}
inline void IndTerVideoSourceLeave_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
}
inline ::std::string* IndTerVideoSourceLeave_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerVideoSourceLeave_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerVideoSourceLeave_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerVideoSourceLeave.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerVideoSourceLeave_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerVideoSourceLeave_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerVideoSourceLeave_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.IPPORT.port)
  return port_;
}
inline void IndTerVideoSourceLeave_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerVideoSourceLeave_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerVideoSourceLeave_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerVideoSourceLeave_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerVideoSourceLeave_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerVideoSourceLeave_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerVideoSourceLeave_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerVideoSourceLeave.IPPORT ipportinfos = 2;
inline int IndTerVideoSourceLeave_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerVideoSourceLeave_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerVideoSourceLeave_IPPORT& IndTerVideoSourceLeave_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_IPPORT* IndTerVideoSourceLeave_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_IPPORT* IndTerVideoSourceLeave_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_IPPORT >&
IndTerVideoSourceLeave_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerVideoSourceLeave.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_IPPORT >*
IndTerVideoSourceLeave_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerVideoSourceLeave.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerVideoSourceLeave_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerVideoSourceLeave_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerVideoSourceLeave_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerVideoSourceLeave_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.AddrInfo.level)
  return level_;
}
inline void IndTerVideoSourceLeave_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerVideoSourceLeave_DomainInfo

// optional string dname = 1;
inline bool IndTerVideoSourceLeave_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerVideoSourceLeave_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerVideoSourceLeave_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerVideoSourceLeave_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerVideoSourceLeave_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
  return *dname_;
}
inline void IndTerVideoSourceLeave_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
}
inline void IndTerVideoSourceLeave_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
}
inline void IndTerVideoSourceLeave_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
}
inline ::std::string* IndTerVideoSourceLeave_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerVideoSourceLeave_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerVideoSourceLeave_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerVideoSourceLeave_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerVideoSourceLeave_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerVideoSourceLeave_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerVideoSourceLeave_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerVideoSourceLeave_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerVideoSourceLeave_SourceInfo

// optional uint32 srcid = 1;
inline bool IndTerVideoSourceLeave_SourceInfo::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_srcid() {
  srcid_ = 0u;
  clear_has_srcid();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_SourceInfo::srcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.SourceInfo.srcid)
  return srcid_;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_srcid(::google::protobuf::uint32 value) {
  set_has_srcid();
  srcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.SourceInfo.srcid)
}

// optional string name = 2;
inline bool IndTerVideoSourceLeave_SourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndTerVideoSourceLeave_SourceInfo::name() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
  return *name_;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
}
inline void IndTerVideoSourceLeave_SourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
}
inline void IndTerVideoSourceLeave_SourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
}
inline ::std::string* IndTerVideoSourceLeave_SourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
  return name_;
}
inline ::std::string* IndTerVideoSourceLeave_SourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerVideoSourceLeave_SourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerVideoSourceLeave.SourceInfo.name)
}

// optional bool isOn = 3;
inline bool IndTerVideoSourceLeave_SourceInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_ison() {
  ison_ = false;
  clear_has_ison();
}
inline bool IndTerVideoSourceLeave_SourceInfo::ison() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.SourceInfo.isOn)
  return ison_;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_ison(bool value) {
  set_has_ison();
  ison_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.SourceInfo.isOn)
}

// optional uint32 priority = 4;
inline bool IndTerVideoSourceLeave_SourceInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerVideoSourceLeave_SourceInfo::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave_SourceInfo::priority() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.SourceInfo.priority)
  return priority_;
}
inline void IndTerVideoSourceLeave_SourceInfo::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.SourceInfo.priority)
}

// -------------------------------------------------------------------

// IndTerVideoSourceLeave

// optional uint64 confid = 1;
inline bool IndTerVideoSourceLeave::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerVideoSourceLeave::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerVideoSourceLeave::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerVideoSourceLeave::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.confid)
  return confid_;
}
inline void IndTerVideoSourceLeave::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.confid)
}

// optional uint32 terid = 2;
inline bool IndTerVideoSourceLeave::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerVideoSourceLeave::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerVideoSourceLeave::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.terid)
  return terid_;
}
inline void IndTerVideoSourceLeave::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.terid)
}

// optional uint32 leaveterid = 3;
inline bool IndTerVideoSourceLeave::has_leaveterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_leaveterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerVideoSourceLeave::clear_has_leaveterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerVideoSourceLeave::clear_leaveterid() {
  leaveterid_ = 0u;
  clear_has_leaveterid();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave::leaveterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.leaveterid)
  return leaveterid_;
}
inline void IndTerVideoSourceLeave::set_leaveterid(::google::protobuf::uint32 value) {
  set_has_leaveterid();
  leaveterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.leaveterid)
}

// optional uint32 leavesuid = 4;
inline bool IndTerVideoSourceLeave::has_leavesuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_leavesuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerVideoSourceLeave::clear_has_leavesuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerVideoSourceLeave::clear_leavesuid() {
  leavesuid_ = 0u;
  clear_has_leavesuid();
}
inline ::google::protobuf::uint32 IndTerVideoSourceLeave::leavesuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.leavesuid)
  return leavesuid_;
}
inline void IndTerVideoSourceLeave::set_leavesuid(::google::protobuf::uint32 value) {
  set_has_leavesuid();
  leavesuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.leavesuid)
}

// optional string leavetername = 5;
inline bool IndTerVideoSourceLeave::has_leavetername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_leavetername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerVideoSourceLeave::clear_has_leavetername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerVideoSourceLeave::clear_leavetername() {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_->clear();
  }
  clear_has_leavetername();
}
inline const ::std::string& IndTerVideoSourceLeave::leavetername() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.leavetername)
  return *leavetername_;
}
inline void IndTerVideoSourceLeave::set_leavetername(const ::std::string& value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.leavetername)
}
inline void IndTerVideoSourceLeave::set_leavetername(const char* value) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerVideoSourceLeave.leavetername)
}
inline void IndTerVideoSourceLeave::set_leavetername(const char* value, size_t size) {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  leavetername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerVideoSourceLeave.leavetername)
}
inline ::std::string* IndTerVideoSourceLeave::mutable_leavetername() {
  set_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leavetername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.leavetername)
  return leavetername_;
}
inline ::std::string* IndTerVideoSourceLeave::release_leavetername() {
  clear_has_leavetername();
  if (leavetername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leavetername_;
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerVideoSourceLeave::set_allocated_leavetername(::std::string* leavetername) {
  if (leavetername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leavetername_;
  }
  if (leavetername) {
    set_has_leavetername();
    leavetername_ = leavetername;
  } else {
    clear_has_leavetername();
    leavetername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerVideoSourceLeave.leavetername)
}

// repeated .SRMsgs.IndTerVideoSourceLeave.SourceInfo delsrcinfos = 6;
inline int IndTerVideoSourceLeave::delsrcinfos_size() const {
  return delsrcinfos_.size();
}
inline void IndTerVideoSourceLeave::clear_delsrcinfos() {
  delsrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerVideoSourceLeave_SourceInfo& IndTerVideoSourceLeave::delsrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* IndTerVideoSourceLeave::mutable_delsrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* IndTerVideoSourceLeave::add_delsrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerVideoSourceLeave.delsrcinfos)
  return delsrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >&
IndTerVideoSourceLeave::delsrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerVideoSourceLeave.delsrcinfos)
  return delsrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >*
IndTerVideoSourceLeave::mutable_delsrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerVideoSourceLeave.delsrcinfos)
  return &delsrcinfos_;
}

// repeated .SRMsgs.IndTerVideoSourceLeave.SourceInfo cursrcinfos = 7;
inline int IndTerVideoSourceLeave::cursrcinfos_size() const {
  return cursrcinfos_.size();
}
inline void IndTerVideoSourceLeave::clear_cursrcinfos() {
  cursrcinfos_.Clear();
}
inline const ::SRMsgs::IndTerVideoSourceLeave_SourceInfo& IndTerVideoSourceLeave::cursrcinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Get(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* IndTerVideoSourceLeave::mutable_cursrcinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_SourceInfo* IndTerVideoSourceLeave::add_cursrcinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerVideoSourceLeave.cursrcinfos)
  return cursrcinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >&
IndTerVideoSourceLeave::cursrcinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerVideoSourceLeave.cursrcinfos)
  return cursrcinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_SourceInfo >*
IndTerVideoSourceLeave::mutable_cursrcinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerVideoSourceLeave.cursrcinfos)
  return &cursrcinfos_;
}

// optional string domainname = 8;
inline bool IndTerVideoSourceLeave::has_domainname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerVideoSourceLeave::set_has_domainname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerVideoSourceLeave::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerVideoSourceLeave::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerVideoSourceLeave::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.domainname)
  return *domainname_;
}
inline void IndTerVideoSourceLeave::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerVideoSourceLeave.domainname)
}
inline void IndTerVideoSourceLeave::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerVideoSourceLeave.domainname)
}
inline void IndTerVideoSourceLeave::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerVideoSourceLeave.domainname)
}
inline ::std::string* IndTerVideoSourceLeave::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.domainname)
  return domainname_;
}
inline ::std::string* IndTerVideoSourceLeave::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerVideoSourceLeave::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerVideoSourceLeave.domainname)
}

// repeated .SRMsgs.IndTerVideoSourceLeave.AddrInfo svraddrs = 9;
inline int IndTerVideoSourceLeave::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerVideoSourceLeave::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerVideoSourceLeave_AddrInfo& IndTerVideoSourceLeave::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_AddrInfo* IndTerVideoSourceLeave::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_AddrInfo* IndTerVideoSourceLeave::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerVideoSourceLeave.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_AddrInfo >&
IndTerVideoSourceLeave::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerVideoSourceLeave.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_AddrInfo >*
IndTerVideoSourceLeave::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerVideoSourceLeave.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerVideoSourceLeave.DomainInfo domains = 10;
inline int IndTerVideoSourceLeave::domains_size() const {
  return domains_.size();
}
inline void IndTerVideoSourceLeave::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerVideoSourceLeave_DomainInfo& IndTerVideoSourceLeave::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerVideoSourceLeave.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_DomainInfo* IndTerVideoSourceLeave::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerVideoSourceLeave.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerVideoSourceLeave_DomainInfo* IndTerVideoSourceLeave::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerVideoSourceLeave.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_DomainInfo >&
IndTerVideoSourceLeave::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerVideoSourceLeave.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerVideoSourceLeave_DomainInfo >*
IndTerVideoSourceLeave::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerVideoSourceLeave.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerSetAnalyState_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerSetAnalyState_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSetAnalyState_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSetAnalyState_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSetAnalyState_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.IPPORT.nettype)
  return nettype_;
}
inline void IndTerSetAnalyState_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerSetAnalyState_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSetAnalyState_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSetAnalyState_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSetAnalyState_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerSetAnalyState_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
  return *ip_;
}
inline void IndTerSetAnalyState_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
}
inline void IndTerSetAnalyState_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
}
inline void IndTerSetAnalyState_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
}
inline ::std::string* IndTerSetAnalyState_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerSetAnalyState_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSetAnalyState_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSetAnalyState.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerSetAnalyState_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSetAnalyState_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSetAnalyState_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSetAnalyState_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.IPPORT.port)
  return port_;
}
inline void IndTerSetAnalyState_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerSetAnalyState_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerSetAnalyState_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSetAnalyState_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSetAnalyState_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSetAnalyState_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerSetAnalyState_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerSetAnalyState.IPPORT ipportinfos = 2;
inline int IndTerSetAnalyState_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerSetAnalyState_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerSetAnalyState_IPPORT& IndTerSetAnalyState_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerSetAnalyState_IPPORT* IndTerSetAnalyState_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerSetAnalyState_IPPORT* IndTerSetAnalyState_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSetAnalyState.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_IPPORT >&
IndTerSetAnalyState_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSetAnalyState.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_IPPORT >*
IndTerSetAnalyState_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSetAnalyState.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerSetAnalyState_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSetAnalyState_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSetAnalyState_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSetAnalyState_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.AddrInfo.level)
  return level_;
}
inline void IndTerSetAnalyState_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerSetAnalyState_DomainInfo

// optional string dname = 1;
inline bool IndTerSetAnalyState_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSetAnalyState_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSetAnalyState_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSetAnalyState_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerSetAnalyState_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
  return *dname_;
}
inline void IndTerSetAnalyState_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
}
inline void IndTerSetAnalyState_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
}
inline void IndTerSetAnalyState_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
}
inline ::std::string* IndTerSetAnalyState_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerSetAnalyState_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSetAnalyState_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSetAnalyState.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerSetAnalyState_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSetAnalyState_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSetAnalyState_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSetAnalyState_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerSetAnalyState_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerSetAnalyState

// optional uint64 confid = 1;
inline bool IndTerSetAnalyState::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSetAnalyState::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSetAnalyState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSetAnalyState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerSetAnalyState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.confid)
  return confid_;
}
inline void IndTerSetAnalyState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.confid)
}

// optional uint32 terid = 2;
inline bool IndTerSetAnalyState::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSetAnalyState::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSetAnalyState::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSetAnalyState::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.terid)
  return terid_;
}
inline void IndTerSetAnalyState::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.terid)
}

// optional uint32 analystate = 3;
inline bool IndTerSetAnalyState::has_analystate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSetAnalyState::set_has_analystate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSetAnalyState::clear_has_analystate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSetAnalyState::clear_analystate() {
  analystate_ = 0u;
  clear_has_analystate();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState::analystate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.analystate)
  return analystate_;
}
inline void IndTerSetAnalyState::set_analystate(::google::protobuf::uint32 value) {
  set_has_analystate();
  analystate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.analystate)
}

// optional uint32 analymode = 4;
inline bool IndTerSetAnalyState::has_analymode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerSetAnalyState::set_has_analymode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerSetAnalyState::clear_has_analymode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerSetAnalyState::clear_analymode() {
  analymode_ = 0u;
  clear_has_analymode();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState::analymode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.analymode)
  return analymode_;
}
inline void IndTerSetAnalyState::set_analymode(::google::protobuf::uint32 value) {
  set_has_analymode();
  analymode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.analymode)
}

// optional string failreason = 5;
inline bool IndTerSetAnalyState::has_failreason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerSetAnalyState::set_has_failreason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerSetAnalyState::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerSetAnalyState::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& IndTerSetAnalyState::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.failreason)
  return *failreason_;
}
inline void IndTerSetAnalyState::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.failreason)
}
inline void IndTerSetAnalyState::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSetAnalyState.failreason)
}
inline void IndTerSetAnalyState::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSetAnalyState.failreason)
}
inline ::std::string* IndTerSetAnalyState::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.failreason)
  return failreason_;
}
inline ::std::string* IndTerSetAnalyState::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSetAnalyState::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSetAnalyState.failreason)
}

// optional uint32 errorcode = 6;
inline bool IndTerSetAnalyState::has_errorcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerSetAnalyState::set_has_errorcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerSetAnalyState::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerSetAnalyState::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 IndTerSetAnalyState::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.errorcode)
  return errorcode_;
}
inline void IndTerSetAnalyState::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.errorcode)
}

// optional string domainname = 7;
inline bool IndTerSetAnalyState::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerSetAnalyState::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerSetAnalyState::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerSetAnalyState::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerSetAnalyState::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.domainname)
  return *domainname_;
}
inline void IndTerSetAnalyState::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSetAnalyState.domainname)
}
inline void IndTerSetAnalyState::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSetAnalyState.domainname)
}
inline void IndTerSetAnalyState::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSetAnalyState.domainname)
}
inline ::std::string* IndTerSetAnalyState::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.domainname)
  return domainname_;
}
inline ::std::string* IndTerSetAnalyState::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSetAnalyState::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSetAnalyState.domainname)
}

// repeated .SRMsgs.IndTerSetAnalyState.AddrInfo svraddrs = 8;
inline int IndTerSetAnalyState::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerSetAnalyState::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerSetAnalyState_AddrInfo& IndTerSetAnalyState::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerSetAnalyState_AddrInfo* IndTerSetAnalyState::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerSetAnalyState_AddrInfo* IndTerSetAnalyState::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSetAnalyState.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_AddrInfo >&
IndTerSetAnalyState::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSetAnalyState.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_AddrInfo >*
IndTerSetAnalyState::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSetAnalyState.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerSetAnalyState.DomainInfo domains = 9;
inline int IndTerSetAnalyState::domains_size() const {
  return domains_.size();
}
inline void IndTerSetAnalyState::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerSetAnalyState_DomainInfo& IndTerSetAnalyState::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSetAnalyState.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerSetAnalyState_DomainInfo* IndTerSetAnalyState::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSetAnalyState.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerSetAnalyState_DomainInfo* IndTerSetAnalyState::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSetAnalyState.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_DomainInfo >&
IndTerSetAnalyState::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSetAnalyState.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSetAnalyState_DomainInfo >*
IndTerSetAnalyState::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSetAnalyState.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerSelectVasVideo_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerSelectVasVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSelectVasVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.IPPORT.nettype)
  return nettype_;
}
inline void IndTerSelectVasVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerSelectVasVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSelectVasVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerSelectVasVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
  return *ip_;
}
inline void IndTerSelectVasVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
}
inline void IndTerSelectVasVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
}
inline void IndTerSelectVasVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
}
inline ::std::string* IndTerSelectVasVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerSelectVasVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSelectVasVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSelectVasVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerSelectVasVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSelectVasVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSelectVasVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.IPPORT.port)
  return port_;
}
inline void IndTerSelectVasVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerSelectVasVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerSelectVasVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSelectVasVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSelectVasVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSelectVasVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerSelectVasVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerSelectVasVideo.IPPORT ipportinfos = 2;
inline int IndTerSelectVasVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerSelectVasVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerSelectVasVideo_IPPORT& IndTerSelectVasVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_IPPORT* IndTerSelectVasVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_IPPORT* IndTerSelectVasVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSelectVasVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_IPPORT >&
IndTerSelectVasVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSelectVasVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_IPPORT >*
IndTerSelectVasVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSelectVasVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerSelectVasVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSelectVasVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSelectVasVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSelectVasVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AddrInfo.level)
  return level_;
}
inline void IndTerSelectVasVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerSelectVasVideo_DomainInfo

// optional string dname = 1;
inline bool IndTerSelectVasVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSelectVasVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSelectVasVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSelectVasVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerSelectVasVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
  return *dname_;
}
inline void IndTerSelectVasVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
}
inline void IndTerSelectVasVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
}
inline void IndTerSelectVasVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
}
inline ::std::string* IndTerSelectVasVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerSelectVasVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSelectVasVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSelectVasVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerSelectVasVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSelectVasVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSelectVasVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSelectVasVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerSelectVasVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerSelectVasVideo_AnalyInfo

// optional uint32 terid = 1;
inline bool IndTerSelectVasVideo_AnalyInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AnalyInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AnalyInfo.terid)
  return terid_;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AnalyInfo.terid)
}

// optional uint32 screenid = 2;
inline bool IndTerSelectVasVideo_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AnalyInfo.screenid)
  return screenid_;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool IndTerSelectVasVideo_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AnalyInfo.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool IndTerSelectVasVideo_AnalyInfo::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo_AnalyInfo::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AnalyInfo.srcmapid)
  return srcmapid_;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AnalyInfo.srcmapid)
}

// optional bool isselect = 5;
inline bool IndTerSelectVasVideo_AnalyInfo::has_isselect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_has_isselect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_has_isselect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerSelectVasVideo_AnalyInfo::clear_isselect() {
  isselect_ = false;
  clear_has_isselect();
}
inline bool IndTerSelectVasVideo_AnalyInfo::isselect() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.AnalyInfo.isselect)
  return isselect_;
}
inline void IndTerSelectVasVideo_AnalyInfo::set_isselect(bool value) {
  set_has_isselect();
  isselect_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.AnalyInfo.isselect)
}

// -------------------------------------------------------------------

// IndTerSelectVasVideo

// optional uint64 confid = 1;
inline bool IndTerSelectVasVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerSelectVasVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerSelectVasVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerSelectVasVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerSelectVasVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.confid)
  return confid_;
}
inline void IndTerSelectVasVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.confid)
}

// optional uint32 terid = 2;
inline bool IndTerSelectVasVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerSelectVasVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerSelectVasVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerSelectVasVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerSelectVasVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.terid)
  return terid_;
}
inline void IndTerSelectVasVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.terid)
}

// repeated .SRMsgs.IndTerSelectVasVideo.AnalyInfo selectvasinfos = 3;
inline int IndTerSelectVasVideo::selectvasinfos_size() const {
  return selectvasinfos_.size();
}
inline void IndTerSelectVasVideo::clear_selectvasinfos() {
  selectvasinfos_.Clear();
}
inline const ::SRMsgs::IndTerSelectVasVideo_AnalyInfo& IndTerSelectVasVideo::selectvasinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Get(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_AnalyInfo* IndTerSelectVasVideo::mutable_selectvasinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_AnalyInfo* IndTerSelectVasVideo::add_selectvasinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSelectVasVideo.selectvasinfos)
  return selectvasinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AnalyInfo >&
IndTerSelectVasVideo::selectvasinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSelectVasVideo.selectvasinfos)
  return selectvasinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AnalyInfo >*
IndTerSelectVasVideo::mutable_selectvasinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSelectVasVideo.selectvasinfos)
  return &selectvasinfos_;
}

// optional string domainname = 4;
inline bool IndTerSelectVasVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerSelectVasVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerSelectVasVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerSelectVasVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerSelectVasVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.domainname)
  return *domainname_;
}
inline void IndTerSelectVasVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerSelectVasVideo.domainname)
}
inline void IndTerSelectVasVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerSelectVasVideo.domainname)
}
inline void IndTerSelectVasVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerSelectVasVideo.domainname)
}
inline ::std::string* IndTerSelectVasVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.domainname)
  return domainname_;
}
inline ::std::string* IndTerSelectVasVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerSelectVasVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerSelectVasVideo.domainname)
}

// repeated .SRMsgs.IndTerSelectVasVideo.AddrInfo svraddrs = 5;
inline int IndTerSelectVasVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerSelectVasVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerSelectVasVideo_AddrInfo& IndTerSelectVasVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_AddrInfo* IndTerSelectVasVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_AddrInfo* IndTerSelectVasVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSelectVasVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AddrInfo >&
IndTerSelectVasVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSelectVasVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_AddrInfo >*
IndTerSelectVasVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSelectVasVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerSelectVasVideo.DomainInfo domains = 6;
inline int IndTerSelectVasVideo::domains_size() const {
  return domains_.size();
}
inline void IndTerSelectVasVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerSelectVasVideo_DomainInfo& IndTerSelectVasVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerSelectVasVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_DomainInfo* IndTerSelectVasVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerSelectVasVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerSelectVasVideo_DomainInfo* IndTerSelectVasVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerSelectVasVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_DomainInfo >&
IndTerSelectVasVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerSelectVasVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerSelectVasVideo_DomainInfo >*
IndTerSelectVasVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerSelectVasVideo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndChangePreset_IPPORT

// optional uint32 nettype = 1;
inline bool IndChangePreset_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangePreset_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangePreset_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangePreset_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndChangePreset_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.IPPORT.nettype)
  return nettype_;
}
inline void IndChangePreset_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndChangePreset_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangePreset_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangePreset_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangePreset_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndChangePreset_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.IPPORT.ip)
  return *ip_;
}
inline void IndChangePreset_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.IPPORT.ip)
}
inline void IndChangePreset_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangePreset.IPPORT.ip)
}
inline void IndChangePreset_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangePreset.IPPORT.ip)
}
inline ::std::string* IndChangePreset_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndChangePreset_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangePreset_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangePreset.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndChangePreset_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangePreset_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangePreset_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangePreset_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndChangePreset_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.IPPORT.port)
  return port_;
}
inline void IndChangePreset_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.IPPORT.port)
}

// -------------------------------------------------------------------

// IndChangePreset_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndChangePreset_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangePreset_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangePreset_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangePreset_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndChangePreset_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndChangePreset_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndChangePreset.IPPORT ipportinfos = 2;
inline int IndChangePreset_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndChangePreset_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndChangePreset_IPPORT& IndChangePreset_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndChangePreset_IPPORT* IndChangePreset_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangePreset_IPPORT* IndChangePreset_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_IPPORT >&
IndChangePreset_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangePreset.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_IPPORT >*
IndChangePreset_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangePreset.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndChangePreset_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangePreset_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangePreset_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangePreset_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndChangePreset_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.AddrInfo.level)
  return level_;
}
inline void IndChangePreset_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndChangePreset_DomainInfo

// optional string dname = 1;
inline bool IndChangePreset_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangePreset_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangePreset_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangePreset_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndChangePreset_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.DomainInfo.dname)
  return *dname_;
}
inline void IndChangePreset_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.DomainInfo.dname)
}
inline void IndChangePreset_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangePreset.DomainInfo.dname)
}
inline void IndChangePreset_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangePreset.DomainInfo.dname)
}
inline ::std::string* IndChangePreset_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndChangePreset_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangePreset_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangePreset.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndChangePreset_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangePreset_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangePreset_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangePreset_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndChangePreset_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndChangePreset_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndChangePreset_PresetInfo

// optional uint32 presetid = 1;
inline bool IndChangePreset_PresetInfo::has_presetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangePreset_PresetInfo::set_has_presetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangePreset_PresetInfo::clear_has_presetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangePreset_PresetInfo::clear_presetid() {
  presetid_ = 0u;
  clear_has_presetid();
}
inline ::google::protobuf::uint32 IndChangePreset_PresetInfo::presetid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.PresetInfo.presetid)
  return presetid_;
}
inline void IndChangePreset_PresetInfo::set_presetid(::google::protobuf::uint32 value) {
  set_has_presetid();
  presetid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.PresetInfo.presetid)
}

// optional string presetname = 2;
inline bool IndChangePreset_PresetInfo::has_presetname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangePreset_PresetInfo::set_has_presetname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangePreset_PresetInfo::clear_has_presetname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangePreset_PresetInfo::clear_presetname() {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_->clear();
  }
  clear_has_presetname();
}
inline const ::std::string& IndChangePreset_PresetInfo::presetname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.PresetInfo.presetname)
  return *presetname_;
}
inline void IndChangePreset_PresetInfo::set_presetname(const ::std::string& value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.PresetInfo.presetname)
}
inline void IndChangePreset_PresetInfo::set_presetname(const char* value) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangePreset.PresetInfo.presetname)
}
inline void IndChangePreset_PresetInfo::set_presetname(const char* value, size_t size) {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  presetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangePreset.PresetInfo.presetname)
}
inline ::std::string* IndChangePreset_PresetInfo::mutable_presetname() {
  set_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.PresetInfo.presetname)
  return presetname_;
}
inline ::std::string* IndChangePreset_PresetInfo::release_presetname() {
  clear_has_presetname();
  if (presetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = presetname_;
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangePreset_PresetInfo::set_allocated_presetname(::std::string* presetname) {
  if (presetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presetname_;
  }
  if (presetname) {
    set_has_presetname();
    presetname_ = presetname;
  } else {
    clear_has_presetname();
    presetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangePreset.PresetInfo.presetname)
}

// optional uint32 relatedvsrcid = 3;
inline bool IndChangePreset_PresetInfo::has_relatedvsrcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangePreset_PresetInfo::set_has_relatedvsrcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangePreset_PresetInfo::clear_has_relatedvsrcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangePreset_PresetInfo::clear_relatedvsrcid() {
  relatedvsrcid_ = 0u;
  clear_has_relatedvsrcid();
}
inline ::google::protobuf::uint32 IndChangePreset_PresetInfo::relatedvsrcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.PresetInfo.relatedvsrcid)
  return relatedvsrcid_;
}
inline void IndChangePreset_PresetInfo::set_relatedvsrcid(::google::protobuf::uint32 value) {
  set_has_relatedvsrcid();
  relatedvsrcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.PresetInfo.relatedvsrcid)
}

// -------------------------------------------------------------------

// IndChangePreset

// optional uint64 confid = 1;
inline bool IndChangePreset::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangePreset::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangePreset::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangePreset::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndChangePreset::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.confid)
  return confid_;
}
inline void IndChangePreset::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.confid)
}

// optional uint32 terid = 2;
inline bool IndChangePreset::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangePreset::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangePreset::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangePreset::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndChangePreset::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.terid)
  return terid_;
}
inline void IndChangePreset::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.terid)
}

// optional uint32 changeterid = 3;
inline bool IndChangePreset::has_changeterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangePreset::set_has_changeterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangePreset::clear_has_changeterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangePreset::clear_changeterid() {
  changeterid_ = 0u;
  clear_has_changeterid();
}
inline ::google::protobuf::uint32 IndChangePreset::changeterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.changeterid)
  return changeterid_;
}
inline void IndChangePreset::set_changeterid(::google::protobuf::uint32 value) {
  set_has_changeterid();
  changeterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.changeterid)
}

// repeated .SRMsgs.IndChangePreset.PresetInfo cpresetinfos = 4;
inline int IndChangePreset::cpresetinfos_size() const {
  return cpresetinfos_.size();
}
inline void IndChangePreset::clear_cpresetinfos() {
  cpresetinfos_.Clear();
}
inline const ::SRMsgs::IndChangePreset_PresetInfo& IndChangePreset::cpresetinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.cpresetinfos)
  return cpresetinfos_.Get(index);
}
inline ::SRMsgs::IndChangePreset_PresetInfo* IndChangePreset::mutable_cpresetinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.cpresetinfos)
  return cpresetinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangePreset_PresetInfo* IndChangePreset::add_cpresetinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangePreset.cpresetinfos)
  return cpresetinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_PresetInfo >&
IndChangePreset::cpresetinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangePreset.cpresetinfos)
  return cpresetinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_PresetInfo >*
IndChangePreset::mutable_cpresetinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangePreset.cpresetinfos)
  return &cpresetinfos_;
}

// optional string domainname = 5;
inline bool IndChangePreset::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndChangePreset::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndChangePreset::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndChangePreset::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndChangePreset::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.domainname)
  return *domainname_;
}
inline void IndChangePreset::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangePreset.domainname)
}
inline void IndChangePreset::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangePreset.domainname)
}
inline void IndChangePreset::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangePreset.domainname)
}
inline ::std::string* IndChangePreset::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.domainname)
  return domainname_;
}
inline ::std::string* IndChangePreset::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangePreset::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangePreset.domainname)
}

// repeated .SRMsgs.IndChangePreset.AddrInfo svraddrs = 6;
inline int IndChangePreset::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndChangePreset::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndChangePreset_AddrInfo& IndChangePreset::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndChangePreset_AddrInfo* IndChangePreset::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndChangePreset_AddrInfo* IndChangePreset::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangePreset.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_AddrInfo >&
IndChangePreset::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangePreset.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_AddrInfo >*
IndChangePreset::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangePreset.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndChangePreset.DomainInfo domains = 7;
inline int IndChangePreset::domains_size() const {
  return domains_.size();
}
inline void IndChangePreset::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndChangePreset_DomainInfo& IndChangePreset::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangePreset.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndChangePreset_DomainInfo* IndChangePreset::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangePreset.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndChangePreset_DomainInfo* IndChangePreset::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangePreset.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_DomainInfo >&
IndChangePreset::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangePreset.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangePreset_DomainInfo >*
IndChangePreset::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangePreset.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndFilterNoVideo_IPPORT

// optional uint32 nettype = 1;
inline bool IndFilterNoVideo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndFilterNoVideo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndFilterNoVideo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndFilterNoVideo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndFilterNoVideo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.IPPORT.nettype)
  return nettype_;
}
inline void IndFilterNoVideo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndFilterNoVideo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndFilterNoVideo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndFilterNoVideo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndFilterNoVideo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndFilterNoVideo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.IPPORT.ip)
  return *ip_;
}
inline void IndFilterNoVideo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.IPPORT.ip)
}
inline void IndFilterNoVideo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndFilterNoVideo.IPPORT.ip)
}
inline void IndFilterNoVideo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndFilterNoVideo.IPPORT.ip)
}
inline ::std::string* IndFilterNoVideo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndFilterNoVideo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndFilterNoVideo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndFilterNoVideo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndFilterNoVideo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndFilterNoVideo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndFilterNoVideo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndFilterNoVideo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndFilterNoVideo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.IPPORT.port)
  return port_;
}
inline void IndFilterNoVideo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.IPPORT.port)
}

// -------------------------------------------------------------------

// IndFilterNoVideo_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndFilterNoVideo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndFilterNoVideo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndFilterNoVideo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndFilterNoVideo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndFilterNoVideo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndFilterNoVideo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndFilterNoVideo.IPPORT ipportinfos = 2;
inline int IndFilterNoVideo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndFilterNoVideo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndFilterNoVideo_IPPORT& IndFilterNoVideo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndFilterNoVideo_IPPORT* IndFilterNoVideo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndFilterNoVideo_IPPORT* IndFilterNoVideo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_IPPORT >&
IndFilterNoVideo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndFilterNoVideo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_IPPORT >*
IndFilterNoVideo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndFilterNoVideo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndFilterNoVideo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndFilterNoVideo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndFilterNoVideo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndFilterNoVideo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndFilterNoVideo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.AddrInfo.level)
  return level_;
}
inline void IndFilterNoVideo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndFilterNoVideo_DomainInfo

// optional string dname = 1;
inline bool IndFilterNoVideo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndFilterNoVideo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndFilterNoVideo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndFilterNoVideo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndFilterNoVideo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
  return *dname_;
}
inline void IndFilterNoVideo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
}
inline void IndFilterNoVideo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
}
inline void IndFilterNoVideo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
}
inline ::std::string* IndFilterNoVideo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndFilterNoVideo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndFilterNoVideo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndFilterNoVideo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndFilterNoVideo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndFilterNoVideo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndFilterNoVideo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndFilterNoVideo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndFilterNoVideo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndFilterNoVideo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndFilterNoVideo

// optional uint64 confid = 1;
inline bool IndFilterNoVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndFilterNoVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndFilterNoVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndFilterNoVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndFilterNoVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.confid)
  return confid_;
}
inline void IndFilterNoVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.confid)
}

// optional uint32 terid = 2;
inline bool IndFilterNoVideo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndFilterNoVideo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndFilterNoVideo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndFilterNoVideo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndFilterNoVideo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.terid)
  return terid_;
}
inline void IndFilterNoVideo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.terid)
}

// optional uint32 filternovideo = 3;
inline bool IndFilterNoVideo::has_filternovideo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndFilterNoVideo::set_has_filternovideo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndFilterNoVideo::clear_has_filternovideo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndFilterNoVideo::clear_filternovideo() {
  filternovideo_ = 0u;
  clear_has_filternovideo();
}
inline ::google::protobuf::uint32 IndFilterNoVideo::filternovideo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.filternovideo)
  return filternovideo_;
}
inline void IndFilterNoVideo::set_filternovideo(::google::protobuf::uint32 value) {
  set_has_filternovideo();
  filternovideo_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.filternovideo)
}

// optional string domainname = 4;
inline bool IndFilterNoVideo::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndFilterNoVideo::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndFilterNoVideo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndFilterNoVideo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndFilterNoVideo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.domainname)
  return *domainname_;
}
inline void IndFilterNoVideo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndFilterNoVideo.domainname)
}
inline void IndFilterNoVideo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndFilterNoVideo.domainname)
}
inline void IndFilterNoVideo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndFilterNoVideo.domainname)
}
inline ::std::string* IndFilterNoVideo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.domainname)
  return domainname_;
}
inline ::std::string* IndFilterNoVideo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndFilterNoVideo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndFilterNoVideo.domainname)
}

// repeated .SRMsgs.IndFilterNoVideo.AddrInfo svraddrs = 5;
inline int IndFilterNoVideo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndFilterNoVideo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndFilterNoVideo_AddrInfo& IndFilterNoVideo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndFilterNoVideo_AddrInfo* IndFilterNoVideo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndFilterNoVideo_AddrInfo* IndFilterNoVideo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndFilterNoVideo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_AddrInfo >&
IndFilterNoVideo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndFilterNoVideo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_AddrInfo >*
IndFilterNoVideo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndFilterNoVideo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndFilterNoVideo.DomainInfo domains = 6;
inline int IndFilterNoVideo::domains_size() const {
  return domains_.size();
}
inline void IndFilterNoVideo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndFilterNoVideo_DomainInfo& IndFilterNoVideo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndFilterNoVideo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndFilterNoVideo_DomainInfo* IndFilterNoVideo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndFilterNoVideo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndFilterNoVideo_DomainInfo* IndFilterNoVideo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndFilterNoVideo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_DomainInfo >&
IndFilterNoVideo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndFilterNoVideo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndFilterNoVideo_DomainInfo >*
IndFilterNoVideo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndFilterNoVideo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo_IPPORT

// optional uint32 nettype = 1;
inline bool IndTerAutoPollInfo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.IPPORT.nettype)
  return nettype_;
}
inline void IndTerAutoPollInfo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndTerAutoPollInfo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAutoPollInfo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTerAutoPollInfo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
  return *ip_;
}
inline void IndTerAutoPollInfo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
}
inline void IndTerAutoPollInfo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
}
inline void IndTerAutoPollInfo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
}
inline ::std::string* IndTerAutoPollInfo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndTerAutoPollInfo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAutoPollInfo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAutoPollInfo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndTerAutoPollInfo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAutoPollInfo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAutoPollInfo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.IPPORT.port)
  return port_;
}
inline void IndTerAutoPollInfo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.IPPORT.port)
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndTerAutoPollInfo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndTerAutoPollInfo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndTerAutoPollInfo.IPPORT ipportinfos = 2;
inline int IndTerAutoPollInfo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndTerAutoPollInfo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndTerAutoPollInfo_IPPORT& IndTerAutoPollInfo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_IPPORT* IndTerAutoPollInfo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_IPPORT* IndTerAutoPollInfo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_IPPORT >&
IndTerAutoPollInfo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAutoPollInfo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_IPPORT >*
IndTerAutoPollInfo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAutoPollInfo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndTerAutoPollInfo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAutoPollInfo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAutoPollInfo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAutoPollInfo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AddrInfo.level)
  return level_;
}
inline void IndTerAutoPollInfo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo_DomainInfo

// optional string dname = 1;
inline bool IndTerAutoPollInfo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndTerAutoPollInfo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
  return *dname_;
}
inline void IndTerAutoPollInfo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
}
inline void IndTerAutoPollInfo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
}
inline void IndTerAutoPollInfo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
}
inline ::std::string* IndTerAutoPollInfo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndTerAutoPollInfo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAutoPollInfo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAutoPollInfo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndTerAutoPollInfo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAutoPollInfo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAutoPollInfo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAutoPollInfo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndTerAutoPollInfo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo_ParticipantInfo

// optional uint32 psuid = 1;
inline bool IndTerAutoPollInfo_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.ParticipantInfo.psuid)
  return psuid_;
}
inline void IndTerAutoPollInfo_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.ParticipantInfo.psuid)
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo_AutoPollInfo

// optional uint64 apid = 1;
inline bool IndTerAutoPollInfo_AutoPollInfo::has_apid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_has_apid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_has_apid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_apid() {
  apid_ = GOOGLE_ULONGLONG(0);
  clear_has_apid();
}
inline ::google::protobuf::uint64 IndTerAutoPollInfo_AutoPollInfo::apid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apid)
  return apid_;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_apid(::google::protobuf::uint64 value) {
  set_has_apid();
  apid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apid)
}

// optional string apname = 2;
inline bool IndTerAutoPollInfo_AutoPollInfo::has_apname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_has_apname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_has_apname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_apname() {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_->clear();
  }
  clear_has_apname();
}
inline const ::std::string& IndTerAutoPollInfo_AutoPollInfo::apname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
  return *apname_;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_apname(const ::std::string& value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_apname(const char* value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_apname(const char* value, size_t size) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
}
inline ::std::string* IndTerAutoPollInfo_AutoPollInfo::mutable_apname() {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
  return apname_;
}
inline ::std::string* IndTerAutoPollInfo_AutoPollInfo::release_apname() {
  clear_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apname_;
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_allocated_apname(::std::string* apname) {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apname_;
  }
  if (apname) {
    set_has_apname();
    apname_ = apname;
  } else {
    clear_has_apname();
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.apname)
}

// optional uint32 addordel = 3;
inline bool IndTerAutoPollInfo_AutoPollInfo::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo_AutoPollInfo::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.addordel)
  return addordel_;
}
inline void IndTerAutoPollInfo_AutoPollInfo::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.addordel)
}

// repeated .SRMsgs.IndTerAutoPollInfo.ParticipantInfo parts = 4;
inline int IndTerAutoPollInfo_AutoPollInfo::parts_size() const {
  return parts_.size();
}
inline void IndTerAutoPollInfo_AutoPollInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo& IndTerAutoPollInfo_AutoPollInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo* IndTerAutoPollInfo_AutoPollInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo* IndTerAutoPollInfo_AutoPollInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo >&
IndTerAutoPollInfo_AutoPollInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_ParticipantInfo >*
IndTerAutoPollInfo_AutoPollInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAutoPollInfo.AutoPollInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// IndTerAutoPollInfo

// optional uint64 confid = 1;
inline bool IndTerAutoPollInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerAutoPollInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerAutoPollInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerAutoPollInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerAutoPollInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.confid)
  return confid_;
}
inline void IndTerAutoPollInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.confid)
}

// optional uint32 terid = 2;
inline bool IndTerAutoPollInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerAutoPollInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerAutoPollInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerAutoPollInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndTerAutoPollInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.terid)
  return terid_;
}
inline void IndTerAutoPollInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.terid)
}

// repeated .SRMsgs.IndTerAutoPollInfo.AutoPollInfo autopolllist = 3;
inline int IndTerAutoPollInfo::autopolllist_size() const {
  return autopolllist_.size();
}
inline void IndTerAutoPollInfo::clear_autopolllist() {
  autopolllist_.Clear();
}
inline const ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo& IndTerAutoPollInfo::autopolllist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.autopolllist)
  return autopolllist_.Get(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo* IndTerAutoPollInfo::mutable_autopolllist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.autopolllist)
  return autopolllist_.Mutable(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo* IndTerAutoPollInfo::add_autopolllist() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAutoPollInfo.autopolllist)
  return autopolllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo >&
IndTerAutoPollInfo::autopolllist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAutoPollInfo.autopolllist)
  return autopolllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AutoPollInfo >*
IndTerAutoPollInfo::mutable_autopolllist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAutoPollInfo.autopolllist)
  return &autopolllist_;
}

// optional string domainname = 4;
inline bool IndTerAutoPollInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerAutoPollInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerAutoPollInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerAutoPollInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndTerAutoPollInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.domainname)
  return *domainname_;
}
inline void IndTerAutoPollInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerAutoPollInfo.domainname)
}
inline void IndTerAutoPollInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerAutoPollInfo.domainname)
}
inline void IndTerAutoPollInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerAutoPollInfo.domainname)
}
inline ::std::string* IndTerAutoPollInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.domainname)
  return domainname_;
}
inline ::std::string* IndTerAutoPollInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerAutoPollInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerAutoPollInfo.domainname)
}

// repeated .SRMsgs.IndTerAutoPollInfo.AddrInfo svraddrs = 5;
inline int IndTerAutoPollInfo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndTerAutoPollInfo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndTerAutoPollInfo_AddrInfo& IndTerAutoPollInfo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_AddrInfo* IndTerAutoPollInfo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_AddrInfo* IndTerAutoPollInfo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAutoPollInfo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AddrInfo >&
IndTerAutoPollInfo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAutoPollInfo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_AddrInfo >*
IndTerAutoPollInfo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAutoPollInfo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndTerAutoPollInfo.DomainInfo domains = 6;
inline int IndTerAutoPollInfo::domains_size() const {
  return domains_.size();
}
inline void IndTerAutoPollInfo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndTerAutoPollInfo_DomainInfo& IndTerAutoPollInfo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerAutoPollInfo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_DomainInfo* IndTerAutoPollInfo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerAutoPollInfo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndTerAutoPollInfo_DomainInfo* IndTerAutoPollInfo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerAutoPollInfo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_DomainInfo >&
IndTerAutoPollInfo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerAutoPollInfo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerAutoPollInfo_DomainInfo >*
IndTerAutoPollInfo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerAutoPollInfo.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndParticipantsOrder_IPPORT

// optional uint32 nettype = 1;
inline bool IndParticipantsOrder_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndParticipantsOrder_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndParticipantsOrder_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndParticipantsOrder_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.IPPORT.nettype)
  return nettype_;
}
inline void IndParticipantsOrder_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndParticipantsOrder_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndParticipantsOrder_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndParticipantsOrder_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndParticipantsOrder_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndParticipantsOrder_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.IPPORT.ip)
  return *ip_;
}
inline void IndParticipantsOrder_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.IPPORT.ip)
}
inline void IndParticipantsOrder_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndParticipantsOrder.IPPORT.ip)
}
inline void IndParticipantsOrder_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndParticipantsOrder.IPPORT.ip)
}
inline ::std::string* IndParticipantsOrder_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndParticipantsOrder_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndParticipantsOrder_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndParticipantsOrder.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndParticipantsOrder_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndParticipantsOrder_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndParticipantsOrder_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndParticipantsOrder_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.IPPORT.port)
  return port_;
}
inline void IndParticipantsOrder_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.IPPORT.port)
}

// -------------------------------------------------------------------

// IndParticipantsOrder_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndParticipantsOrder_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndParticipantsOrder_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndParticipantsOrder_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndParticipantsOrder_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndParticipantsOrder_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndParticipantsOrder.IPPORT ipportinfos = 2;
inline int IndParticipantsOrder_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndParticipantsOrder_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndParticipantsOrder_IPPORT& IndParticipantsOrder_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndParticipantsOrder_IPPORT* IndParticipantsOrder_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndParticipantsOrder_IPPORT* IndParticipantsOrder_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_IPPORT >&
IndParticipantsOrder_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndParticipantsOrder.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_IPPORT >*
IndParticipantsOrder_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndParticipantsOrder.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndParticipantsOrder_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndParticipantsOrder_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndParticipantsOrder_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndParticipantsOrder_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.AddrInfo.level)
  return level_;
}
inline void IndParticipantsOrder_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndParticipantsOrder_DomainInfo

// optional string dname = 1;
inline bool IndParticipantsOrder_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndParticipantsOrder_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndParticipantsOrder_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndParticipantsOrder_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndParticipantsOrder_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
  return *dname_;
}
inline void IndParticipantsOrder_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
}
inline void IndParticipantsOrder_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
}
inline void IndParticipantsOrder_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
}
inline ::std::string* IndParticipantsOrder_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndParticipantsOrder_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndParticipantsOrder_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndParticipantsOrder.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndParticipantsOrder_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndParticipantsOrder_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndParticipantsOrder_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndParticipantsOrder_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndParticipantsOrder_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndParticipantsOrder_ParticipantInfo

// optional uint32 psuid = 1;
inline bool IndParticipantsOrder_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndParticipantsOrder_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndParticipantsOrder_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndParticipantsOrder_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.ParticipantInfo.psuid)
  return psuid_;
}
inline void IndParticipantsOrder_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.ParticipantInfo.psuid)
}

// optional uint32 orderno = 2;
inline bool IndParticipantsOrder_ParticipantInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndParticipantsOrder_ParticipantInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndParticipantsOrder_ParticipantInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndParticipantsOrder_ParticipantInfo::clear_orderno() {
  orderno_ = 0u;
  clear_has_orderno();
}
inline ::google::protobuf::uint32 IndParticipantsOrder_ParticipantInfo::orderno() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.ParticipantInfo.orderno)
  return orderno_;
}
inline void IndParticipantsOrder_ParticipantInfo::set_orderno(::google::protobuf::uint32 value) {
  set_has_orderno();
  orderno_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.ParticipantInfo.orderno)
}

// -------------------------------------------------------------------

// IndParticipantsOrder

// optional uint64 confid = 1;
inline bool IndParticipantsOrder::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndParticipantsOrder::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndParticipantsOrder::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndParticipantsOrder::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndParticipantsOrder::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.confid)
  return confid_;
}
inline void IndParticipantsOrder::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.confid)
}

// optional uint32 terid = 2;
inline bool IndParticipantsOrder::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndParticipantsOrder::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndParticipantsOrder::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndParticipantsOrder::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndParticipantsOrder::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.terid)
  return terid_;
}
inline void IndParticipantsOrder::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.terid)
}

// repeated .SRMsgs.IndParticipantsOrder.ParticipantInfo participants = 3;
inline int IndParticipantsOrder::participants_size() const {
  return participants_.size();
}
inline void IndParticipantsOrder::clear_participants() {
  participants_.Clear();
}
inline const ::SRMsgs::IndParticipantsOrder_ParticipantInfo& IndParticipantsOrder::participants(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.participants)
  return participants_.Get(index);
}
inline ::SRMsgs::IndParticipantsOrder_ParticipantInfo* IndParticipantsOrder::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.participants)
  return participants_.Mutable(index);
}
inline ::SRMsgs::IndParticipantsOrder_ParticipantInfo* IndParticipantsOrder::add_participants() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndParticipantsOrder.participants)
  return participants_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_ParticipantInfo >&
IndParticipantsOrder::participants() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndParticipantsOrder.participants)
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_ParticipantInfo >*
IndParticipantsOrder::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndParticipantsOrder.participants)
  return &participants_;
}

// optional string domainname = 4;
inline bool IndParticipantsOrder::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndParticipantsOrder::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndParticipantsOrder::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndParticipantsOrder::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndParticipantsOrder::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.domainname)
  return *domainname_;
}
inline void IndParticipantsOrder::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndParticipantsOrder.domainname)
}
inline void IndParticipantsOrder::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndParticipantsOrder.domainname)
}
inline void IndParticipantsOrder::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndParticipantsOrder.domainname)
}
inline ::std::string* IndParticipantsOrder::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.domainname)
  return domainname_;
}
inline ::std::string* IndParticipantsOrder::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndParticipantsOrder::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndParticipantsOrder.domainname)
}

// repeated .SRMsgs.IndParticipantsOrder.AddrInfo svraddrs = 5;
inline int IndParticipantsOrder::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndParticipantsOrder::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndParticipantsOrder_AddrInfo& IndParticipantsOrder::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndParticipantsOrder_AddrInfo* IndParticipantsOrder::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndParticipantsOrder_AddrInfo* IndParticipantsOrder::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndParticipantsOrder.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_AddrInfo >&
IndParticipantsOrder::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndParticipantsOrder.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_AddrInfo >*
IndParticipantsOrder::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndParticipantsOrder.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndParticipantsOrder.DomainInfo domains = 6;
inline int IndParticipantsOrder::domains_size() const {
  return domains_.size();
}
inline void IndParticipantsOrder::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndParticipantsOrder_DomainInfo& IndParticipantsOrder::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndParticipantsOrder.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndParticipantsOrder_DomainInfo* IndParticipantsOrder::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndParticipantsOrder.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndParticipantsOrder_DomainInfo* IndParticipantsOrder::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndParticipantsOrder.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_DomainInfo >&
IndParticipantsOrder::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndParticipantsOrder.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndParticipantsOrder_DomainInfo >*
IndParticipantsOrder::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndParticipantsOrder.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// IndChangeTerInfo_IPPORT

// optional uint32 nettype = 1;
inline bool IndChangeTerInfo_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeTerInfo_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeTerInfo_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeTerInfo_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.IPPORT.nettype)
  return nettype_;
}
inline void IndChangeTerInfo_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.IPPORT.nettype)
}

// optional string ip = 2;
inline bool IndChangeTerInfo_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeTerInfo_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeTerInfo_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeTerInfo_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndChangeTerInfo_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.IPPORT.ip)
  return *ip_;
}
inline void IndChangeTerInfo_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.IPPORT.ip)
}
inline void IndChangeTerInfo_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeTerInfo.IPPORT.ip)
}
inline void IndChangeTerInfo_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeTerInfo.IPPORT.ip)
}
inline ::std::string* IndChangeTerInfo_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.IPPORT.ip)
  return ip_;
}
inline ::std::string* IndChangeTerInfo_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeTerInfo_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeTerInfo.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool IndChangeTerInfo_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeTerInfo_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeTerInfo_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeTerInfo_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.IPPORT.port)
  return port_;
}
inline void IndChangeTerInfo_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.IPPORT.port)
}

// -------------------------------------------------------------------

// IndChangeTerInfo_AddrInfo

// optional uint32 svrtype = 1;
inline bool IndChangeTerInfo_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeTerInfo_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeTerInfo_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeTerInfo_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.AddrInfo.svrtype)
  return svrtype_;
}
inline void IndChangeTerInfo_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.AddrInfo.svrtype)
}

// repeated .SRMsgs.IndChangeTerInfo.IPPORT ipportinfos = 2;
inline int IndChangeTerInfo_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void IndChangeTerInfo_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::IndChangeTerInfo_IPPORT& IndChangeTerInfo_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::IndChangeTerInfo_IPPORT* IndChangeTerInfo_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::IndChangeTerInfo_IPPORT* IndChangeTerInfo_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeTerInfo.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_IPPORT >&
IndChangeTerInfo_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeTerInfo.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_IPPORT >*
IndChangeTerInfo_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeTerInfo.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// optional uint32 level = 3;
inline bool IndChangeTerInfo_AddrInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeTerInfo_AddrInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeTerInfo_AddrInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeTerInfo_AddrInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_AddrInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.AddrInfo.level)
  return level_;
}
inline void IndChangeTerInfo_AddrInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.AddrInfo.level)
}

// -------------------------------------------------------------------

// IndChangeTerInfo_DomainInfo

// optional string dname = 1;
inline bool IndChangeTerInfo_DomainInfo::has_dname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeTerInfo_DomainInfo::set_has_dname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeTerInfo_DomainInfo::clear_has_dname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeTerInfo_DomainInfo::clear_dname() {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_->clear();
  }
  clear_has_dname();
}
inline const ::std::string& IndChangeTerInfo_DomainInfo::dname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
  return *dname_;
}
inline void IndChangeTerInfo_DomainInfo::set_dname(const ::std::string& value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
}
inline void IndChangeTerInfo_DomainInfo::set_dname(const char* value) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
}
inline void IndChangeTerInfo_DomainInfo::set_dname(const char* value, size_t size) {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  dname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
}
inline ::std::string* IndChangeTerInfo_DomainInfo::mutable_dname() {
  set_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
  return dname_;
}
inline ::std::string* IndChangeTerInfo_DomainInfo::release_dname() {
  clear_has_dname();
  if (dname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dname_;
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeTerInfo_DomainInfo::set_allocated_dname(::std::string* dname) {
  if (dname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dname_;
  }
  if (dname) {
    set_has_dname();
    dname_ = dname;
  } else {
    clear_has_dname();
    dname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeTerInfo.DomainInfo.dname)
}

// optional uint32 dlevel = 2;
inline bool IndChangeTerInfo_DomainInfo::has_dlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeTerInfo_DomainInfo::set_has_dlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeTerInfo_DomainInfo::clear_has_dlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeTerInfo_DomainInfo::clear_dlevel() {
  dlevel_ = 0u;
  clear_has_dlevel();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_DomainInfo::dlevel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.DomainInfo.dlevel)
  return dlevel_;
}
inline void IndChangeTerInfo_DomainInfo::set_dlevel(::google::protobuf::uint32 value) {
  set_has_dlevel();
  dlevel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.DomainInfo.dlevel)
}

// -------------------------------------------------------------------

// IndChangeTerInfo_TerInfo

// optional uint32 suid = 1;
inline bool IndChangeTerInfo_TerInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeTerInfo_TerInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeTerInfo_TerInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeTerInfo_TerInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_TerInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.TerInfo.suid)
  return suid_;
}
inline void IndChangeTerInfo_TerInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.TerInfo.suid)
}

// optional uint32 fromtype = 2;
inline bool IndChangeTerInfo_TerInfo::has_fromtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeTerInfo_TerInfo::set_has_fromtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeTerInfo_TerInfo::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeTerInfo_TerInfo::clear_fromtype() {
  fromtype_ = 0u;
  clear_has_fromtype();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_TerInfo::fromtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.TerInfo.fromtype)
  return fromtype_;
}
inline void IndChangeTerInfo_TerInfo::set_fromtype(::google::protobuf::uint32 value) {
  set_has_fromtype();
  fromtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.TerInfo.fromtype)
}

// optional uint32 termtype = 3;
inline bool IndChangeTerInfo_TerInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeTerInfo_TerInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeTerInfo_TerInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeTerInfo_TerInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_TerInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.TerInfo.termtype)
  return termtype_;
}
inline void IndChangeTerInfo_TerInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.TerInfo.termtype)
}

// optional uint32 producttype = 4;
inline bool IndChangeTerInfo_TerInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndChangeTerInfo_TerInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndChangeTerInfo_TerInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndChangeTerInfo_TerInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndChangeTerInfo_TerInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.TerInfo.producttype)
  return producttype_;
}
inline void IndChangeTerInfo_TerInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.TerInfo.producttype)
}

// -------------------------------------------------------------------

// IndChangeTerInfo

// optional uint64 confid = 1;
inline bool IndChangeTerInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndChangeTerInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndChangeTerInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndChangeTerInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndChangeTerInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.confid)
  return confid_;
}
inline void IndChangeTerInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.confid)
}

// optional uint32 terid = 2;
inline bool IndChangeTerInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndChangeTerInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndChangeTerInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndChangeTerInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 IndChangeTerInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.terid)
  return terid_;
}
inline void IndChangeTerInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.terid)
}

// optional uint32 changeterid = 3;
inline bool IndChangeTerInfo::has_changeterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndChangeTerInfo::set_has_changeterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndChangeTerInfo::clear_has_changeterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndChangeTerInfo::clear_changeterid() {
  changeterid_ = 0u;
  clear_has_changeterid();
}
inline ::google::protobuf::uint32 IndChangeTerInfo::changeterid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.changeterid)
  return changeterid_;
}
inline void IndChangeTerInfo::set_changeterid(::google::protobuf::uint32 value) {
  set_has_changeterid();
  changeterid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.changeterid)
}

// optional .SRMsgs.IndChangeTerInfo.TerInfo cterinfo = 4;
inline bool IndChangeTerInfo::has_cterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndChangeTerInfo::set_has_cterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndChangeTerInfo::clear_has_cterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndChangeTerInfo::clear_cterinfo() {
  if (cterinfo_ != NULL) cterinfo_->::SRMsgs::IndChangeTerInfo_TerInfo::Clear();
  clear_has_cterinfo();
}
inline const ::SRMsgs::IndChangeTerInfo_TerInfo& IndChangeTerInfo::cterinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.cterinfo)
  return cterinfo_ != NULL ? *cterinfo_ : *default_instance_->cterinfo_;
}
inline ::SRMsgs::IndChangeTerInfo_TerInfo* IndChangeTerInfo::mutable_cterinfo() {
  set_has_cterinfo();
  if (cterinfo_ == NULL) cterinfo_ = new ::SRMsgs::IndChangeTerInfo_TerInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.cterinfo)
  return cterinfo_;
}
inline ::SRMsgs::IndChangeTerInfo_TerInfo* IndChangeTerInfo::release_cterinfo() {
  clear_has_cterinfo();
  ::SRMsgs::IndChangeTerInfo_TerInfo* temp = cterinfo_;
  cterinfo_ = NULL;
  return temp;
}
inline void IndChangeTerInfo::set_allocated_cterinfo(::SRMsgs::IndChangeTerInfo_TerInfo* cterinfo) {
  delete cterinfo_;
  cterinfo_ = cterinfo;
  if (cterinfo) {
    set_has_cterinfo();
  } else {
    clear_has_cterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeTerInfo.cterinfo)
}

// optional string domainname = 5;
inline bool IndChangeTerInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndChangeTerInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndChangeTerInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndChangeTerInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndChangeTerInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.domainname)
  return *domainname_;
}
inline void IndChangeTerInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndChangeTerInfo.domainname)
}
inline void IndChangeTerInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndChangeTerInfo.domainname)
}
inline void IndChangeTerInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndChangeTerInfo.domainname)
}
inline ::std::string* IndChangeTerInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.domainname)
  return domainname_;
}
inline ::std::string* IndChangeTerInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndChangeTerInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndChangeTerInfo.domainname)
}

// repeated .SRMsgs.IndChangeTerInfo.AddrInfo svraddrs = 6;
inline int IndChangeTerInfo::svraddrs_size() const {
  return svraddrs_.size();
}
inline void IndChangeTerInfo::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::IndChangeTerInfo_AddrInfo& IndChangeTerInfo::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::IndChangeTerInfo_AddrInfo* IndChangeTerInfo::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::IndChangeTerInfo_AddrInfo* IndChangeTerInfo::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeTerInfo.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_AddrInfo >&
IndChangeTerInfo::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeTerInfo.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_AddrInfo >*
IndChangeTerInfo::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeTerInfo.svraddrs)
  return &svraddrs_;
}

// repeated .SRMsgs.IndChangeTerInfo.DomainInfo domains = 7;
inline int IndChangeTerInfo::domains_size() const {
  return domains_.size();
}
inline void IndChangeTerInfo::clear_domains() {
  domains_.Clear();
}
inline const ::SRMsgs::IndChangeTerInfo_DomainInfo& IndChangeTerInfo::domains(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndChangeTerInfo.domains)
  return domains_.Get(index);
}
inline ::SRMsgs::IndChangeTerInfo_DomainInfo* IndChangeTerInfo::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndChangeTerInfo.domains)
  return domains_.Mutable(index);
}
inline ::SRMsgs::IndChangeTerInfo_DomainInfo* IndChangeTerInfo::add_domains() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndChangeTerInfo.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_DomainInfo >&
IndChangeTerInfo::domains() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndChangeTerInfo.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndChangeTerInfo_DomainInfo >*
IndChangeTerInfo::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndChangeTerInfo.domains)
  return &domains_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mc_5fter_5fplus_2eproto__INCLUDED
