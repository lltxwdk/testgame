// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_gw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_gw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* CmdGWSyncMonitorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWSyncMonitorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWQueryMonitorRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec_TimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWQueryMonitorRec_TimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec_MonitorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWQueryMonitorRec_MonitorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWInvitParticipants_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWInvitParticipants_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWInvitParticipants_TimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWInvitParticipants_TimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWInvitParticipants_ParticipantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWInvitParticipants_ParticipantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCHeartBeatToGW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatToGW_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndGWHeartBeatToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndGWHeartBeatToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndGWQueryMonitorRecToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC_TimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndGWQueryMonitorRecToMC_TimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndGWQueryMonitorRecToMC_MonitorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_AdvanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_AudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_AudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_XfeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_XfeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromGW_TerStatisticsInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5fgw_2eproto() {
  protobuf_AddDesc_mc_5fgw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_gw.proto");
  GOOGLE_CHECK(file != NULL);
  CmdGWSyncMonitorInfo_descriptor_ = file->message_type(0);
  static const int CmdGWSyncMonitorInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWSyncMonitorInfo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWSyncMonitorInfo, gwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWSyncMonitorInfo, dsturl_),
  };
  CmdGWSyncMonitorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWSyncMonitorInfo_descriptor_,
      CmdGWSyncMonitorInfo::default_instance_,
      CmdGWSyncMonitorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWSyncMonitorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWSyncMonitorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWSyncMonitorInfo));
  CmdGWQueryMonitorRec_descriptor_ = file->message_type(1);
  static const int CmdGWQueryMonitorRec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, gwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, queryinfos_),
  };
  CmdGWQueryMonitorRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWQueryMonitorRec_descriptor_,
      CmdGWQueryMonitorRec::default_instance_,
      CmdGWQueryMonitorRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWQueryMonitorRec));
  CmdGWQueryMonitorRec_TimeInfo_descriptor_ = CmdGWQueryMonitorRec_descriptor_->nested_type(0);
  static const int CmdGWQueryMonitorRec_TimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_TimeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_TimeInfo, endtime_),
  };
  CmdGWQueryMonitorRec_TimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWQueryMonitorRec_TimeInfo_descriptor_,
      CmdGWQueryMonitorRec_TimeInfo::default_instance_,
      CmdGWQueryMonitorRec_TimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_TimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_TimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWQueryMonitorRec_TimeInfo));
  CmdGWQueryMonitorRec_MonitorInfo_descriptor_ = CmdGWQueryMonitorRec_descriptor_->nested_type(1);
  static const int CmdGWQueryMonitorRec_MonitorInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_MonitorInfo, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_MonitorInfo, totaltimespan_),
  };
  CmdGWQueryMonitorRec_MonitorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWQueryMonitorRec_MonitorInfo_descriptor_,
      CmdGWQueryMonitorRec_MonitorInfo::default_instance_,
      CmdGWQueryMonitorRec_MonitorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_MonitorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWQueryMonitorRec_MonitorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWQueryMonitorRec_MonitorInfo));
  CmdGWInvitParticipants_descriptor_ = file->message_type(2);
  static const int CmdGWInvitParticipants_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, gwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, ivtparticipants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, confsubject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, confpwd_),
  };
  CmdGWInvitParticipants_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWInvitParticipants_descriptor_,
      CmdGWInvitParticipants::default_instance_,
      CmdGWInvitParticipants_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWInvitParticipants));
  CmdGWInvitParticipants_TimeInfo_descriptor_ = CmdGWInvitParticipants_descriptor_->nested_type(0);
  static const int CmdGWInvitParticipants_TimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_TimeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_TimeInfo, endtime_),
  };
  CmdGWInvitParticipants_TimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWInvitParticipants_TimeInfo_descriptor_,
      CmdGWInvitParticipants_TimeInfo::default_instance_,
      CmdGWInvitParticipants_TimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_TimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_TimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWInvitParticipants_TimeInfo));
  CmdGWInvitParticipants_ParticipantInfo_descriptor_ = CmdGWInvitParticipants_descriptor_->nested_type(1);
  static const int CmdGWInvitParticipants_ParticipantInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, psuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, protocoltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, calloption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, totaltimespan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, subtimespans_),
  };
  CmdGWInvitParticipants_ParticipantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWInvitParticipants_ParticipantInfo_descriptor_,
      CmdGWInvitParticipants_ParticipantInfo::default_instance_,
      CmdGWInvitParticipants_ParticipantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWInvitParticipants_ParticipantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWInvitParticipants_ParticipantInfo));
  IndMCHeartBeatToGW_descriptor_ = file->message_type(3);
  static const int IndMCHeartBeatToGW_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToGW, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToGW, gwid_),
  };
  IndMCHeartBeatToGW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatToGW_descriptor_,
      IndMCHeartBeatToGW::default_instance_,
      IndMCHeartBeatToGW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToGW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToGW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatToGW));
  IndGWHeartBeatToMC_descriptor_ = file->message_type(4);
  static const int IndGWHeartBeatToMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWHeartBeatToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWHeartBeatToMC, gwid_),
  };
  IndGWHeartBeatToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndGWHeartBeatToMC_descriptor_,
      IndGWHeartBeatToMC::default_instance_,
      IndGWHeartBeatToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWHeartBeatToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWHeartBeatToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndGWHeartBeatToMC));
  IndGWQueryMonitorRecToMC_descriptor_ = file->message_type(5);
  static const int IndGWQueryMonitorRecToMC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, gwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, queryinfos_),
  };
  IndGWQueryMonitorRecToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndGWQueryMonitorRecToMC_descriptor_,
      IndGWQueryMonitorRecToMC::default_instance_,
      IndGWQueryMonitorRecToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndGWQueryMonitorRecToMC));
  IndGWQueryMonitorRecToMC_TimeInfo_descriptor_ = IndGWQueryMonitorRecToMC_descriptor_->nested_type(0);
  static const int IndGWQueryMonitorRecToMC_TimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_TimeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_TimeInfo, endtime_),
  };
  IndGWQueryMonitorRecToMC_TimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndGWQueryMonitorRecToMC_TimeInfo_descriptor_,
      IndGWQueryMonitorRecToMC_TimeInfo::default_instance_,
      IndGWQueryMonitorRecToMC_TimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_TimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_TimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndGWQueryMonitorRecToMC_TimeInfo));
  IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_ = IndGWQueryMonitorRecToMC_descriptor_->nested_type(1);
  static const int IndGWQueryMonitorRecToMC_MonitorInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, querystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, totaltimespan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, subtimespans_),
  };
  IndGWQueryMonitorRecToMC_MonitorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_,
      IndGWQueryMonitorRecToMC_MonitorInfo::default_instance_,
      IndGWQueryMonitorRecToMC_MonitorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndGWQueryMonitorRecToMC_MonitorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndGWQueryMonitorRecToMC_MonitorInfo));
  IndTerStatisticsInfoFromGW_descriptor_ = file->message_type(6);
  static const int IndTerStatisticsInfoFromGW_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, gwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, tsinfo_),
  };
  IndTerStatisticsInfoFromGW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_descriptor_,
      IndTerStatisticsInfoFromGW::default_instance_,
      IndTerStatisticsInfoFromGW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW));
  IndTerStatisticsInfoFromGW_FrameInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(0);
  static const int IndTerStatisticsInfoFromGW_FrameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_FrameInfo, fsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_FrameInfo, fsh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_FrameInfo, fps_),
  };
  IndTerStatisticsInfoFromGW_FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_FrameInfo_descriptor_,
      IndTerStatisticsInfoFromGW_FrameInfo::default_instance_,
      IndTerStatisticsInfoFromGW_FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_FrameInfo));
  IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(1);
  static const int IndTerStatisticsInfoFromGW_AdvanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AdvanceInfo, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AdvanceInfo, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AdvanceInfo, loss_),
  };
  IndTerStatisticsInfoFromGW_AdvanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_,
      IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance_,
      IndTerStatisticsInfoFromGW_AdvanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AdvanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AdvanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_AdvanceInfo));
  IndTerStatisticsInfoFromGW_BaseInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(2);
  static const int IndTerStatisticsInfoFromGW_BaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_BaseInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_BaseInfo, bitrate_),
  };
  IndTerStatisticsInfoFromGW_BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_BaseInfo_descriptor_,
      IndTerStatisticsInfoFromGW_BaseInfo::default_instance_,
      IndTerStatisticsInfoFromGW_BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_BaseInfo));
  IndTerStatisticsInfoFromGW_AudioInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(3);
  static const int IndTerStatisticsInfoFromGW_AudioInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, atype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, aterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, advinfo_),
  };
  IndTerStatisticsInfoFromGW_AudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_AudioInfo_descriptor_,
      IndTerStatisticsInfoFromGW_AudioInfo::default_instance_,
      IndTerStatisticsInfoFromGW_AudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_AudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_AudioInfo));
  IndTerStatisticsInfoFromGW_VideoInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(4);
  static const int IndTerStatisticsInfoFromGW_VideoInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, vterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, advinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, frameinfo_),
  };
  IndTerStatisticsInfoFromGW_VideoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_VideoInfo_descriptor_,
      IndTerStatisticsInfoFromGW_VideoInfo::default_instance_,
      IndTerStatisticsInfoFromGW_VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_VideoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_VideoInfo));
  IndTerStatisticsInfoFromGW_XfeInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(5);
  static const int IndTerStatisticsInfoFromGW_XfeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_XfeInfo, ainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_XfeInfo, vinfo_),
  };
  IndTerStatisticsInfoFromGW_XfeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_XfeInfo_descriptor_,
      IndTerStatisticsInfoFromGW_XfeInfo::default_instance_,
      IndTerStatisticsInfoFromGW_XfeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_XfeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_XfeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_XfeInfo));
  IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_ = IndTerStatisticsInfoFromGW_descriptor_->nested_type(6);
  static const int IndTerStatisticsInfoFromGW_TerStatisticsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, txinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, rxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, txbweresult_),
  };
  IndTerStatisticsInfoFromGW_TerStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_,
      IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance_,
      IndTerStatisticsInfoFromGW_TerStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromGW_TerStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromGW_TerStatisticsInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5fgw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWSyncMonitorInfo_descriptor_, &CmdGWSyncMonitorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWQueryMonitorRec_descriptor_, &CmdGWQueryMonitorRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWQueryMonitorRec_TimeInfo_descriptor_, &CmdGWQueryMonitorRec_TimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWQueryMonitorRec_MonitorInfo_descriptor_, &CmdGWQueryMonitorRec_MonitorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWInvitParticipants_descriptor_, &CmdGWInvitParticipants::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWInvitParticipants_TimeInfo_descriptor_, &CmdGWInvitParticipants_TimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWInvitParticipants_ParticipantInfo_descriptor_, &CmdGWInvitParticipants_ParticipantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatToGW_descriptor_, &IndMCHeartBeatToGW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndGWHeartBeatToMC_descriptor_, &IndGWHeartBeatToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndGWQueryMonitorRecToMC_descriptor_, &IndGWQueryMonitorRecToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndGWQueryMonitorRecToMC_TimeInfo_descriptor_, &IndGWQueryMonitorRecToMC_TimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_, &IndGWQueryMonitorRecToMC_MonitorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_descriptor_, &IndTerStatisticsInfoFromGW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_FrameInfo_descriptor_, &IndTerStatisticsInfoFromGW_FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_, &IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_BaseInfo_descriptor_, &IndTerStatisticsInfoFromGW_BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_AudioInfo_descriptor_, &IndTerStatisticsInfoFromGW_AudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_VideoInfo_descriptor_, &IndTerStatisticsInfoFromGW_VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_XfeInfo_descriptor_, &IndTerStatisticsInfoFromGW_XfeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_, &IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5fgw_2eproto() {
  delete CmdGWSyncMonitorInfo::default_instance_;
  delete CmdGWSyncMonitorInfo_reflection_;
  delete CmdGWQueryMonitorRec::default_instance_;
  delete CmdGWQueryMonitorRec_reflection_;
  delete CmdGWQueryMonitorRec_TimeInfo::default_instance_;
  delete CmdGWQueryMonitorRec_TimeInfo_reflection_;
  delete CmdGWQueryMonitorRec_MonitorInfo::default_instance_;
  delete CmdGWQueryMonitorRec_MonitorInfo_reflection_;
  delete CmdGWInvitParticipants::default_instance_;
  delete CmdGWInvitParticipants_reflection_;
  delete CmdGWInvitParticipants_TimeInfo::default_instance_;
  delete CmdGWInvitParticipants_TimeInfo_reflection_;
  delete CmdGWInvitParticipants_ParticipantInfo::default_instance_;
  delete CmdGWInvitParticipants_ParticipantInfo_reflection_;
  delete IndMCHeartBeatToGW::default_instance_;
  delete IndMCHeartBeatToGW_reflection_;
  delete IndGWHeartBeatToMC::default_instance_;
  delete IndGWHeartBeatToMC_reflection_;
  delete IndGWQueryMonitorRecToMC::default_instance_;
  delete IndGWQueryMonitorRecToMC_reflection_;
  delete IndGWQueryMonitorRecToMC_TimeInfo::default_instance_;
  delete IndGWQueryMonitorRecToMC_TimeInfo_reflection_;
  delete IndGWQueryMonitorRecToMC_MonitorInfo::default_instance_;
  delete IndGWQueryMonitorRecToMC_MonitorInfo_reflection_;
  delete IndTerStatisticsInfoFromGW::default_instance_;
  delete IndTerStatisticsInfoFromGW_reflection_;
  delete IndTerStatisticsInfoFromGW_FrameInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_FrameInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_AdvanceInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_BaseInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_BaseInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_AudioInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_AudioInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_VideoInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_VideoInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_XfeInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_XfeInfo_reflection_;
  delete IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance_;
  delete IndTerStatisticsInfoFromGW_TerStatisticsInfo_reflection_;
}

void protobuf_AddDesc_mc_5fgw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mc_gw.proto\022\006SRMsgs\"B\n\024CmdGWSyncMonito"
    "rInfo\022\014\n\004mcid\030\001 \001(\r\022\014\n\004gwid\030\002 \001(\r\022\016\n\006dst"
    "url\030\003 \001(\t\"\221\002\n\024CmdGWQueryMonitorRec\022\016\n\006co"
    "nfid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004gwid\030\003 \001(\r\022<"
    "\n\nqueryinfos\030\004 \003(\0132(.SRMsgs.CmdGWQueryMo"
    "nitorRec.MonitorInfo\032.\n\010TimeInfo\022\021\n\tstar"
    "ttime\030\001 \001(\t\022\017\n\007endtime\030\002 \001(\t\032_\n\013MonitorI"
    "nfo\022\022\n\ndevicecode\030\001 \001(\t\022<\n\rtotaltimespan"
    "\030\002 \001(\0132%.SRMsgs.CmdGWQueryMonitorRec.Tim"
    "eInfo\"\232\004\n\026CmdGWInvitParticipants\022\016\n\006conf"
    "id\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004gwid\030\003 \001(\r\022G\n\017"
    "ivtparticipants\030\004 \003(\0132..SRMsgs.CmdGWInvi"
    "tParticipants.ParticipantInfo\022\023\n\013confsub"
    "ject\030\005 \001(\t\022\017\n\007confpwd\030\006 \001(\t\032.\n\010TimeInfo\022"
    "\021\n\tstarttime\030\001 \001(\t\022\017\n\007endtime\030\002 \001(\t\032\264\002\n\017"
    "ParticipantInfo\022\r\n\005psuid\030\001 \001(\r\022\020\n\010nickna"
    "me\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\024\n\014protocoltype\030\004 \001"
    "(\r\022\021\n\tbandwidth\030\005 \001(\r\022\022\n\ndevicetype\030\006 \001("
    "\r\022\022\n\ncalloption\030\007 \001(\t\022\022\n\ndevicecode\030\010 \001("
    "\t\022\020\n\010usertype\030\t \001(\r\022>\n\rtotaltimespan\030\n \001"
    "(\0132\'.SRMsgs.CmdGWInvitParticipants.TimeI"
    "nfo\022=\n\014subtimespans\030\013 \003(\0132\'.SRMsgs.CmdGW"
    "InvitParticipants.TimeInfo\"0\n\022IndMCHeart"
    "BeatToGW\022\014\n\004mcid\030\001 \001(\r\022\014\n\004gwid\030\002 \001(\r\"0\n\022"
    "IndGWHeartBeatToMC\022\014\n\004mcid\030\001 \001(\r\022\014\n\004gwid"
    "\030\002 \001(\r\"\363\002\n\030IndGWQueryMonitorRecToMC\022\016\n\006c"
    "onfid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004gwid\030\003 \001(\r\022"
    "@\n\nqueryinfos\030\004 \003(\0132,.SRMsgs.IndGWQueryM"
    "onitorRecToMC.MonitorInfo\032.\n\010TimeInfo\022\021\n"
    "\tstarttime\030\001 \001(\t\022\017\n\007endtime\030\002 \001(\t\032\270\001\n\013Mo"
    "nitorInfo\022\022\n\ndevicecode\030\001 \001(\t\022\022\n\nqueryst"
    "ate\030\002 \001(\r\022@\n\rtotaltimespan\030\003 \001(\0132).SRMsg"
    "s.IndGWQueryMonitorRecToMC.TimeInfo\022\?\n\014s"
    "ubtimespans\030\004 \003(\0132).SRMsgs.IndGWQueryMon"
    "itorRecToMC.TimeInfo\"\376\007\n\032IndTerStatistic"
    "sInfoFromGW\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001("
    "\r\022\014\n\004gwid\030\003 \001(\r\022D\n\006tsinfo\030\004 \003(\01324.SRMsgs"
    ".IndTerStatisticsInfoFromGW.TerStatistic"
    "sInfo\0322\n\tFrameInfo\022\013\n\003fsw\030\001 \001(\r\022\013\n\003fsh\030\002"
    " \001(\r\022\013\n\003fps\030\003 \001(\r\032:\n\013AdvanceInfo\022\r\n\005dela"
    "y\030\001 \001(\r\022\016\n\006jitter\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\032+\n"
    "\010BaseInfo\022\016\n\006format\030\001 \001(\r\022\017\n\007bitrate\030\002 \001"
    "(\r\032\252\001\n\tAudioInfo\022\r\n\005atype\030\001 \001(\r\022\016\n\006ateri"
    "d\030\002 \001(\r\022=\n\010baseinfo\030\003 \001(\0132+.SRMsgs.IndTe"
    "rStatisticsInfoFromGW.BaseInfo\022\?\n\007advinf"
    "o\030\004 \001(\0132..SRMsgs.IndTerStatisticsInfoFro"
    "mGW.AdvanceInfo\032\353\001\n\tVideoInfo\022\r\n\005vtype\030\001"
    " \001(\r\022\016\n\006vterid\030\002 \001(\r\022=\n\010baseinfo\030\003 \001(\0132+"
    ".SRMsgs.IndTerStatisticsInfoFromGW.BaseI"
    "nfo\022\?\n\007advinfo\030\004 \001(\0132..SRMsgs.IndTerStat"
    "isticsInfoFromGW.AdvanceInfo\022\?\n\tframeinf"
    "o\030\005 \003(\0132,.SRMsgs.IndTerStatisticsInfoFro"
    "mGW.FrameInfo\032\203\001\n\007XfeInfo\022;\n\005ainfo\030\001 \003(\013"
    "2,.SRMsgs.IndTerStatisticsInfoFromGW.Aud"
    "ioInfo\022;\n\005vinfo\030\002 \003(\0132,.SRMsgs.IndTerSta"
    "tisticsInfoFromGW.VideoInfo\032\257\001\n\021TerStati"
    "sticsInfo\022\r\n\005terid\030\001 \001(\r\022:\n\006txinfo\030\002 \003(\013"
    "2*.SRMsgs.IndTerStatisticsInfoFromGW.Xfe"
    "Info\022:\n\006rxinfo\030\003 \003(\0132*.SRMsgs.IndTerStat"
    "isticsInfoFromGW.XfeInfo\022\023\n\013txbweresult\030"
    "\004 \001(\r", 2405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_gw.proto", &protobuf_RegisterTypes);
  CmdGWSyncMonitorInfo::default_instance_ = new CmdGWSyncMonitorInfo();
  CmdGWQueryMonitorRec::default_instance_ = new CmdGWQueryMonitorRec();
  CmdGWQueryMonitorRec_TimeInfo::default_instance_ = new CmdGWQueryMonitorRec_TimeInfo();
  CmdGWQueryMonitorRec_MonitorInfo::default_instance_ = new CmdGWQueryMonitorRec_MonitorInfo();
  CmdGWInvitParticipants::default_instance_ = new CmdGWInvitParticipants();
  CmdGWInvitParticipants_TimeInfo::default_instance_ = new CmdGWInvitParticipants_TimeInfo();
  CmdGWInvitParticipants_ParticipantInfo::default_instance_ = new CmdGWInvitParticipants_ParticipantInfo();
  IndMCHeartBeatToGW::default_instance_ = new IndMCHeartBeatToGW();
  IndGWHeartBeatToMC::default_instance_ = new IndGWHeartBeatToMC();
  IndGWQueryMonitorRecToMC::default_instance_ = new IndGWQueryMonitorRecToMC();
  IndGWQueryMonitorRecToMC_TimeInfo::default_instance_ = new IndGWQueryMonitorRecToMC_TimeInfo();
  IndGWQueryMonitorRecToMC_MonitorInfo::default_instance_ = new IndGWQueryMonitorRecToMC_MonitorInfo();
  IndTerStatisticsInfoFromGW::default_instance_ = new IndTerStatisticsInfoFromGW();
  IndTerStatisticsInfoFromGW_FrameInfo::default_instance_ = new IndTerStatisticsInfoFromGW_FrameInfo();
  IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance_ = new IndTerStatisticsInfoFromGW_AdvanceInfo();
  IndTerStatisticsInfoFromGW_BaseInfo::default_instance_ = new IndTerStatisticsInfoFromGW_BaseInfo();
  IndTerStatisticsInfoFromGW_AudioInfo::default_instance_ = new IndTerStatisticsInfoFromGW_AudioInfo();
  IndTerStatisticsInfoFromGW_VideoInfo::default_instance_ = new IndTerStatisticsInfoFromGW_VideoInfo();
  IndTerStatisticsInfoFromGW_XfeInfo::default_instance_ = new IndTerStatisticsInfoFromGW_XfeInfo();
  IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance_ = new IndTerStatisticsInfoFromGW_TerStatisticsInfo();
  CmdGWSyncMonitorInfo::default_instance_->InitAsDefaultInstance();
  CmdGWQueryMonitorRec::default_instance_->InitAsDefaultInstance();
  CmdGWQueryMonitorRec_TimeInfo::default_instance_->InitAsDefaultInstance();
  CmdGWQueryMonitorRec_MonitorInfo::default_instance_->InitAsDefaultInstance();
  CmdGWInvitParticipants::default_instance_->InitAsDefaultInstance();
  CmdGWInvitParticipants_TimeInfo::default_instance_->InitAsDefaultInstance();
  CmdGWInvitParticipants_ParticipantInfo::default_instance_->InitAsDefaultInstance();
  IndMCHeartBeatToGW::default_instance_->InitAsDefaultInstance();
  IndGWHeartBeatToMC::default_instance_->InitAsDefaultInstance();
  IndGWQueryMonitorRecToMC::default_instance_->InitAsDefaultInstance();
  IndGWQueryMonitorRecToMC_TimeInfo::default_instance_->InitAsDefaultInstance();
  IndGWQueryMonitorRecToMC_MonitorInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_FrameInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_BaseInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_AudioInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_VideoInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_XfeInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5fgw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5fgw_2eproto {
  StaticDescriptorInitializer_mc_5fgw_2eproto() {
    protobuf_AddDesc_mc_5fgw_2eproto();
  }
} static_descriptor_initializer_mc_5fgw_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CmdGWSyncMonitorInfo::kMcidFieldNumber;
const int CmdGWSyncMonitorInfo::kGwidFieldNumber;
const int CmdGWSyncMonitorInfo::kDsturlFieldNumber;
#endif  // !_MSC_VER

CmdGWSyncMonitorInfo::CmdGWSyncMonitorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWSyncMonitorInfo)
}

void CmdGWSyncMonitorInfo::InitAsDefaultInstance() {
}

CmdGWSyncMonitorInfo::CmdGWSyncMonitorInfo(const CmdGWSyncMonitorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWSyncMonitorInfo)
}

void CmdGWSyncMonitorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mcid_ = 0u;
  gwid_ = 0u;
  dsturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWSyncMonitorInfo::~CmdGWSyncMonitorInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWSyncMonitorInfo)
  SharedDtor();
}

void CmdGWSyncMonitorInfo::SharedDtor() {
  if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dsturl_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWSyncMonitorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWSyncMonitorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWSyncMonitorInfo_descriptor_;
}

const CmdGWSyncMonitorInfo& CmdGWSyncMonitorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWSyncMonitorInfo* CmdGWSyncMonitorInfo::default_instance_ = NULL;

CmdGWSyncMonitorInfo* CmdGWSyncMonitorInfo::New() const {
  return new CmdGWSyncMonitorInfo;
}

void CmdGWSyncMonitorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdGWSyncMonitorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mcid_, gwid_);
    if (has_dsturl()) {
      if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dsturl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWSyncMonitorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWSyncMonitorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 2;
      case 2: {
        if (tag == 16) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dsturl;
        break;
      }

      // optional string dsturl = 3;
      case 3: {
        if (tag == 26) {
         parse_dsturl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dsturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dsturl().data(), this->dsturl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dsturl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWSyncMonitorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWSyncMonitorInfo)
  return false;
#undef DO_
}

void CmdGWSyncMonitorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWSyncMonitorInfo)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gwid(), output);
  }

  // optional string dsturl = 3;
  if (has_dsturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dsturl().data(), this->dsturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsturl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dsturl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWSyncMonitorInfo)
}

::google::protobuf::uint8* CmdGWSyncMonitorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWSyncMonitorInfo)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gwid(), target);
  }

  // optional string dsturl = 3;
  if (has_dsturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dsturl().data(), this->dsturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsturl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dsturl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWSyncMonitorInfo)
  return target;
}

int CmdGWSyncMonitorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 2;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

    // optional string dsturl = 3;
    if (has_dsturl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dsturl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWSyncMonitorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWSyncMonitorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWSyncMonitorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWSyncMonitorInfo::MergeFrom(const CmdGWSyncMonitorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
    if (from.has_dsturl()) {
      set_dsturl(from.dsturl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWSyncMonitorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWSyncMonitorInfo::CopyFrom(const CmdGWSyncMonitorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWSyncMonitorInfo::IsInitialized() const {

  return true;
}

void CmdGWSyncMonitorInfo::Swap(CmdGWSyncMonitorInfo* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    std::swap(dsturl_, other->dsturl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWSyncMonitorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWSyncMonitorInfo_descriptor_;
  metadata.reflection = CmdGWSyncMonitorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGWQueryMonitorRec_TimeInfo::kStarttimeFieldNumber;
const int CmdGWQueryMonitorRec_TimeInfo::kEndtimeFieldNumber;
#endif  // !_MSC_VER

CmdGWQueryMonitorRec_TimeInfo::CmdGWQueryMonitorRec_TimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
}

void CmdGWQueryMonitorRec_TimeInfo::InitAsDefaultInstance() {
}

CmdGWQueryMonitorRec_TimeInfo::CmdGWQueryMonitorRec_TimeInfo(const CmdGWQueryMonitorRec_TimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
}

void CmdGWQueryMonitorRec_TimeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWQueryMonitorRec_TimeInfo::~CmdGWQueryMonitorRec_TimeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  SharedDtor();
}

void CmdGWQueryMonitorRec_TimeInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWQueryMonitorRec_TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec_TimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWQueryMonitorRec_TimeInfo_descriptor_;
}

const CmdGWQueryMonitorRec_TimeInfo& CmdGWQueryMonitorRec_TimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWQueryMonitorRec_TimeInfo* CmdGWQueryMonitorRec_TimeInfo::default_instance_ = NULL;

CmdGWQueryMonitorRec_TimeInfo* CmdGWQueryMonitorRec_TimeInfo::New() const {
  return new CmdGWQueryMonitorRec_TimeInfo;
}

void CmdGWQueryMonitorRec_TimeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWQueryMonitorRec_TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string starttime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endtime;
        break;
      }

      // optional string endtime = 2;
      case 2: {
        if (tag == 18) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  return false;
#undef DO_
}

void CmdGWQueryMonitorRec_TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->starttime(), output);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
}

::google::protobuf::uint8* CmdGWQueryMonitorRec_TimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWQueryMonitorRec.TimeInfo)
  return target;
}

int CmdGWQueryMonitorRec_TimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWQueryMonitorRec_TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWQueryMonitorRec_TimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWQueryMonitorRec_TimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWQueryMonitorRec_TimeInfo::MergeFrom(const CmdGWQueryMonitorRec_TimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWQueryMonitorRec_TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWQueryMonitorRec_TimeInfo::CopyFrom(const CmdGWQueryMonitorRec_TimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWQueryMonitorRec_TimeInfo::IsInitialized() const {

  return true;
}

void CmdGWQueryMonitorRec_TimeInfo::Swap(CmdGWQueryMonitorRec_TimeInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWQueryMonitorRec_TimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWQueryMonitorRec_TimeInfo_descriptor_;
  metadata.reflection = CmdGWQueryMonitorRec_TimeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWQueryMonitorRec_MonitorInfo::kDevicecodeFieldNumber;
const int CmdGWQueryMonitorRec_MonitorInfo::kTotaltimespanFieldNumber;
#endif  // !_MSC_VER

CmdGWQueryMonitorRec_MonitorInfo::CmdGWQueryMonitorRec_MonitorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
}

void CmdGWQueryMonitorRec_MonitorInfo::InitAsDefaultInstance() {
  totaltimespan_ = const_cast< ::SRMsgs::CmdGWQueryMonitorRec_TimeInfo*>(&::SRMsgs::CmdGWQueryMonitorRec_TimeInfo::default_instance());
}

CmdGWQueryMonitorRec_MonitorInfo::CmdGWQueryMonitorRec_MonitorInfo(const CmdGWQueryMonitorRec_MonitorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
}

void CmdGWQueryMonitorRec_MonitorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totaltimespan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWQueryMonitorRec_MonitorInfo::~CmdGWQueryMonitorRec_MonitorInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  SharedDtor();
}

void CmdGWQueryMonitorRec_MonitorInfo::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (this != default_instance_) {
    delete totaltimespan_;
  }
}

void CmdGWQueryMonitorRec_MonitorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec_MonitorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWQueryMonitorRec_MonitorInfo_descriptor_;
}

const CmdGWQueryMonitorRec_MonitorInfo& CmdGWQueryMonitorRec_MonitorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWQueryMonitorRec_MonitorInfo* CmdGWQueryMonitorRec_MonitorInfo::default_instance_ = NULL;

CmdGWQueryMonitorRec_MonitorInfo* CmdGWQueryMonitorRec_MonitorInfo::New() const {
  return new CmdGWQueryMonitorRec_MonitorInfo;
}

void CmdGWQueryMonitorRec_MonitorInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    if (has_totaltimespan()) {
      if (totaltimespan_ != NULL) totaltimespan_->::SRMsgs::CmdGWQueryMonitorRec_TimeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWQueryMonitorRec_MonitorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicecode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_totaltimespan;
        break;
      }

      // optional .SRMsgs.CmdGWQueryMonitorRec.TimeInfo totaltimespan = 2;
      case 2: {
        if (tag == 18) {
         parse_totaltimespan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totaltimespan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  return false;
#undef DO_
}

void CmdGWQueryMonitorRec_MonitorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  // optional string devicecode = 1;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional .SRMsgs.CmdGWQueryMonitorRec.TimeInfo totaltimespan = 2;
  if (has_totaltimespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->totaltimespan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
}

::google::protobuf::uint8* CmdGWQueryMonitorRec_MonitorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  // optional string devicecode = 1;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional .SRMsgs.CmdGWQueryMonitorRec.TimeInfo totaltimespan = 2;
  if (has_totaltimespan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->totaltimespan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWQueryMonitorRec.MonitorInfo)
  return target;
}

int CmdGWQueryMonitorRec_MonitorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devicecode = 1;
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional .SRMsgs.CmdGWQueryMonitorRec.TimeInfo totaltimespan = 2;
    if (has_totaltimespan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totaltimespan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWQueryMonitorRec_MonitorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWQueryMonitorRec_MonitorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWQueryMonitorRec_MonitorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWQueryMonitorRec_MonitorInfo::MergeFrom(const CmdGWQueryMonitorRec_MonitorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_totaltimespan()) {
      mutable_totaltimespan()->::SRMsgs::CmdGWQueryMonitorRec_TimeInfo::MergeFrom(from.totaltimespan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWQueryMonitorRec_MonitorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWQueryMonitorRec_MonitorInfo::CopyFrom(const CmdGWQueryMonitorRec_MonitorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWQueryMonitorRec_MonitorInfo::IsInitialized() const {

  return true;
}

void CmdGWQueryMonitorRec_MonitorInfo::Swap(CmdGWQueryMonitorRec_MonitorInfo* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(totaltimespan_, other->totaltimespan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWQueryMonitorRec_MonitorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWQueryMonitorRec_MonitorInfo_descriptor_;
  metadata.reflection = CmdGWQueryMonitorRec_MonitorInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWQueryMonitorRec::kConfidFieldNumber;
const int CmdGWQueryMonitorRec::kMcidFieldNumber;
const int CmdGWQueryMonitorRec::kGwidFieldNumber;
const int CmdGWQueryMonitorRec::kQueryinfosFieldNumber;
#endif  // !_MSC_VER

CmdGWQueryMonitorRec::CmdGWQueryMonitorRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWQueryMonitorRec)
}

void CmdGWQueryMonitorRec::InitAsDefaultInstance() {
}

CmdGWQueryMonitorRec::CmdGWQueryMonitorRec(const CmdGWQueryMonitorRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWQueryMonitorRec)
}

void CmdGWQueryMonitorRec::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  gwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWQueryMonitorRec::~CmdGWQueryMonitorRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWQueryMonitorRec)
  SharedDtor();
}

void CmdGWQueryMonitorRec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdGWQueryMonitorRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWQueryMonitorRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWQueryMonitorRec_descriptor_;
}

const CmdGWQueryMonitorRec& CmdGWQueryMonitorRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWQueryMonitorRec* CmdGWQueryMonitorRec::default_instance_ = NULL;

CmdGWQueryMonitorRec* CmdGWQueryMonitorRec::New() const {
  return new CmdGWQueryMonitorRec;
}

void CmdGWQueryMonitorRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdGWQueryMonitorRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, gwid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  queryinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWQueryMonitorRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWQueryMonitorRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 3;
      case 3: {
        if (tag == 24) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_queryinfos;
        break;
      }

      // repeated .SRMsgs.CmdGWQueryMonitorRec.MonitorInfo queryinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_queryinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queryinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_queryinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWQueryMonitorRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWQueryMonitorRec)
  return false;
#undef DO_
}

void CmdGWQueryMonitorRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWQueryMonitorRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gwid(), output);
  }

  // repeated .SRMsgs.CmdGWQueryMonitorRec.MonitorInfo queryinfos = 4;
  for (int i = 0; i < this->queryinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->queryinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWQueryMonitorRec)
}

::google::protobuf::uint8* CmdGWQueryMonitorRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWQueryMonitorRec)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gwid(), target);
  }

  // repeated .SRMsgs.CmdGWQueryMonitorRec.MonitorInfo queryinfos = 4;
  for (int i = 0; i < this->queryinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->queryinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWQueryMonitorRec)
  return target;
}

int CmdGWQueryMonitorRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 3;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

  }
  // repeated .SRMsgs.CmdGWQueryMonitorRec.MonitorInfo queryinfos = 4;
  total_size += 1 * this->queryinfos_size();
  for (int i = 0; i < this->queryinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queryinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWQueryMonitorRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWQueryMonitorRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWQueryMonitorRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWQueryMonitorRec::MergeFrom(const CmdGWQueryMonitorRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  queryinfos_.MergeFrom(from.queryinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWQueryMonitorRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWQueryMonitorRec::CopyFrom(const CmdGWQueryMonitorRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWQueryMonitorRec::IsInitialized() const {

  return true;
}

void CmdGWQueryMonitorRec::Swap(CmdGWQueryMonitorRec* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    queryinfos_.Swap(&other->queryinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWQueryMonitorRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWQueryMonitorRec_descriptor_;
  metadata.reflection = CmdGWQueryMonitorRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGWInvitParticipants_TimeInfo::kStarttimeFieldNumber;
const int CmdGWInvitParticipants_TimeInfo::kEndtimeFieldNumber;
#endif  // !_MSC_VER

CmdGWInvitParticipants_TimeInfo::CmdGWInvitParticipants_TimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWInvitParticipants.TimeInfo)
}

void CmdGWInvitParticipants_TimeInfo::InitAsDefaultInstance() {
}

CmdGWInvitParticipants_TimeInfo::CmdGWInvitParticipants_TimeInfo(const CmdGWInvitParticipants_TimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWInvitParticipants.TimeInfo)
}

void CmdGWInvitParticipants_TimeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWInvitParticipants_TimeInfo::~CmdGWInvitParticipants_TimeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  SharedDtor();
}

void CmdGWInvitParticipants_TimeInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWInvitParticipants_TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWInvitParticipants_TimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWInvitParticipants_TimeInfo_descriptor_;
}

const CmdGWInvitParticipants_TimeInfo& CmdGWInvitParticipants_TimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWInvitParticipants_TimeInfo* CmdGWInvitParticipants_TimeInfo::default_instance_ = NULL;

CmdGWInvitParticipants_TimeInfo* CmdGWInvitParticipants_TimeInfo::New() const {
  return new CmdGWInvitParticipants_TimeInfo;
}

void CmdGWInvitParticipants_TimeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWInvitParticipants_TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string starttime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endtime;
        break;
      }

      // optional string endtime = 2;
      case 2: {
        if (tag == 18) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  return false;
#undef DO_
}

void CmdGWInvitParticipants_TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->starttime(), output);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWInvitParticipants.TimeInfo)
}

::google::protobuf::uint8* CmdGWInvitParticipants_TimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWInvitParticipants.TimeInfo)
  return target;
}

int CmdGWInvitParticipants_TimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWInvitParticipants_TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWInvitParticipants_TimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWInvitParticipants_TimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWInvitParticipants_TimeInfo::MergeFrom(const CmdGWInvitParticipants_TimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWInvitParticipants_TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWInvitParticipants_TimeInfo::CopyFrom(const CmdGWInvitParticipants_TimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWInvitParticipants_TimeInfo::IsInitialized() const {

  return true;
}

void CmdGWInvitParticipants_TimeInfo::Swap(CmdGWInvitParticipants_TimeInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWInvitParticipants_TimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWInvitParticipants_TimeInfo_descriptor_;
  metadata.reflection = CmdGWInvitParticipants_TimeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWInvitParticipants_ParticipantInfo::kPsuidFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kNicknameFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kIpFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kProtocoltypeFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kBandwidthFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kDevicetypeFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kCalloptionFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kDevicecodeFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kUsertypeFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kTotaltimespanFieldNumber;
const int CmdGWInvitParticipants_ParticipantInfo::kSubtimespansFieldNumber;
#endif  // !_MSC_VER

CmdGWInvitParticipants_ParticipantInfo::CmdGWInvitParticipants_ParticipantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
}

void CmdGWInvitParticipants_ParticipantInfo::InitAsDefaultInstance() {
  totaltimespan_ = const_cast< ::SRMsgs::CmdGWInvitParticipants_TimeInfo*>(&::SRMsgs::CmdGWInvitParticipants_TimeInfo::default_instance());
}

CmdGWInvitParticipants_ParticipantInfo::CmdGWInvitParticipants_ParticipantInfo(const CmdGWInvitParticipants_ParticipantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
}

void CmdGWInvitParticipants_ParticipantInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  psuid_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocoltype_ = 0u;
  bandwidth_ = 0u;
  devicetype_ = 0u;
  calloption_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_ = 0u;
  totaltimespan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWInvitParticipants_ParticipantInfo::~CmdGWInvitParticipants_ParticipantInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  SharedDtor();
}

void CmdGWInvitParticipants_ParticipantInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (calloption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calloption_;
  }
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (this != default_instance_) {
    delete totaltimespan_;
  }
}

void CmdGWInvitParticipants_ParticipantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWInvitParticipants_ParticipantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWInvitParticipants_ParticipantInfo_descriptor_;
}

const CmdGWInvitParticipants_ParticipantInfo& CmdGWInvitParticipants_ParticipantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWInvitParticipants_ParticipantInfo* CmdGWInvitParticipants_ParticipantInfo::default_instance_ = NULL;

CmdGWInvitParticipants_ParticipantInfo* CmdGWInvitParticipants_ParticipantInfo::New() const {
  return new CmdGWInvitParticipants_ParticipantInfo;
}

void CmdGWInvitParticipants_ParticipantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdGWInvitParticipants_ParticipantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(psuid_, protocoltype_);
    ZR_(bandwidth_, devicetype_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_calloption()) {
      if (calloption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        calloption_->clear();
      }
    }
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    usertype_ = 0u;
    if (has_totaltimespan()) {
      if (totaltimespan_ != NULL) totaltimespan_->::SRMsgs::CmdGWInvitParticipants_TimeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  subtimespans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWInvitParticipants_ParticipantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 psuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &psuid_)));
          set_has_psuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protocoltype;
        break;
      }

      // optional uint32 protocoltype = 4;
      case 4: {
        if (tag == 32) {
         parse_protocoltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocoltype_)));
          set_has_protocoltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bandwidth;
        break;
      }

      // optional uint32 bandwidth = 5;
      case 5: {
        if (tag == 40) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_devicetype;
        break;
      }

      // optional uint32 devicetype = 6;
      case 6: {
        if (tag == 48) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_calloption;
        break;
      }

      // optional string calloption = 7;
      case 7: {
        if (tag == 58) {
         parse_calloption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calloption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calloption().data(), this->calloption().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "calloption");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_devicecode;
        break;
      }

      // optional string devicecode = 8;
      case 8: {
        if (tag == 66) {
         parse_devicecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_usertype;
        break;
      }

      // optional uint32 usertype = 9;
      case 9: {
        if (tag == 72) {
         parse_usertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_totaltimespan;
        break;
      }

      // optional .SRMsgs.CmdGWInvitParticipants.TimeInfo totaltimespan = 10;
      case 10: {
        if (tag == 82) {
         parse_totaltimespan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totaltimespan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_subtimespans;
        break;
      }

      // repeated .SRMsgs.CmdGWInvitParticipants.TimeInfo subtimespans = 11;
      case 11: {
        if (tag == 90) {
         parse_subtimespans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtimespans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_subtimespans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  return false;
#undef DO_
}

void CmdGWInvitParticipants_ParticipantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->psuid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 protocoltype = 4;
  if (has_protocoltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocoltype(), output);
  }

  // optional uint32 bandwidth = 5;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bandwidth(), output);
  }

  // optional uint32 devicetype = 6;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->devicetype(), output);
  }

  // optional string calloption = 7;
  if (has_calloption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calloption().data(), this->calloption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calloption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->calloption(), output);
  }

  // optional string devicecode = 8;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->devicecode(), output);
  }

  // optional uint32 usertype = 9;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usertype(), output);
  }

  // optional .SRMsgs.CmdGWInvitParticipants.TimeInfo totaltimespan = 10;
  if (has_totaltimespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->totaltimespan(), output);
  }

  // repeated .SRMsgs.CmdGWInvitParticipants.TimeInfo subtimespans = 11;
  for (int i = 0; i < this->subtimespans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->subtimespans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
}

::google::protobuf::uint8* CmdGWInvitParticipants_ParticipantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->psuid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 protocoltype = 4;
  if (has_protocoltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocoltype(), target);
  }

  // optional uint32 bandwidth = 5;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bandwidth(), target);
  }

  // optional uint32 devicetype = 6;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->devicetype(), target);
  }

  // optional string calloption = 7;
  if (has_calloption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calloption().data(), this->calloption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calloption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->calloption(), target);
  }

  // optional string devicecode = 8;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicecode(), target);
  }

  // optional uint32 usertype = 9;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usertype(), target);
  }

  // optional .SRMsgs.CmdGWInvitParticipants.TimeInfo totaltimespan = 10;
  if (has_totaltimespan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->totaltimespan(), target);
  }

  // repeated .SRMsgs.CmdGWInvitParticipants.TimeInfo subtimespans = 11;
  for (int i = 0; i < this->subtimespans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->subtimespans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWInvitParticipants.ParticipantInfo)
  return target;
}

int CmdGWInvitParticipants_ParticipantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 psuid = 1;
    if (has_psuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->psuid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 protocoltype = 4;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocoltype());
    }

    // optional uint32 bandwidth = 5;
    if (has_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bandwidth());
    }

    // optional uint32 devicetype = 6;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicetype());
    }

    // optional string calloption = 7;
    if (has_calloption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calloption());
    }

    // optional string devicecode = 8;
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 usertype = 9;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usertype());
    }

    // optional .SRMsgs.CmdGWInvitParticipants.TimeInfo totaltimespan = 10;
    if (has_totaltimespan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totaltimespan());
    }

  }
  // repeated .SRMsgs.CmdGWInvitParticipants.TimeInfo subtimespans = 11;
  total_size += 1 * this->subtimespans_size();
  for (int i = 0; i < this->subtimespans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtimespans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWInvitParticipants_ParticipantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWInvitParticipants_ParticipantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWInvitParticipants_ParticipantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWInvitParticipants_ParticipantInfo::MergeFrom(const CmdGWInvitParticipants_ParticipantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtimespans_.MergeFrom(from.subtimespans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psuid()) {
      set_psuid(from.psuid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_protocoltype()) {
      set_protocoltype(from.protocoltype());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_calloption()) {
      set_calloption(from.calloption());
    }
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_totaltimespan()) {
      mutable_totaltimespan()->::SRMsgs::CmdGWInvitParticipants_TimeInfo::MergeFrom(from.totaltimespan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWInvitParticipants_ParticipantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWInvitParticipants_ParticipantInfo::CopyFrom(const CmdGWInvitParticipants_ParticipantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWInvitParticipants_ParticipantInfo::IsInitialized() const {

  return true;
}

void CmdGWInvitParticipants_ParticipantInfo::Swap(CmdGWInvitParticipants_ParticipantInfo* other) {
  if (other != this) {
    std::swap(psuid_, other->psuid_);
    std::swap(nickname_, other->nickname_);
    std::swap(ip_, other->ip_);
    std::swap(protocoltype_, other->protocoltype_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(calloption_, other->calloption_);
    std::swap(devicecode_, other->devicecode_);
    std::swap(usertype_, other->usertype_);
    std::swap(totaltimespan_, other->totaltimespan_);
    subtimespans_.Swap(&other->subtimespans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWInvitParticipants_ParticipantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWInvitParticipants_ParticipantInfo_descriptor_;
  metadata.reflection = CmdGWInvitParticipants_ParticipantInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWInvitParticipants::kConfidFieldNumber;
const int CmdGWInvitParticipants::kMcidFieldNumber;
const int CmdGWInvitParticipants::kGwidFieldNumber;
const int CmdGWInvitParticipants::kIvtparticipantsFieldNumber;
const int CmdGWInvitParticipants::kConfsubjectFieldNumber;
const int CmdGWInvitParticipants::kConfpwdFieldNumber;
#endif  // !_MSC_VER

CmdGWInvitParticipants::CmdGWInvitParticipants()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWInvitParticipants)
}

void CmdGWInvitParticipants::InitAsDefaultInstance() {
}

CmdGWInvitParticipants::CmdGWInvitParticipants(const CmdGWInvitParticipants& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWInvitParticipants)
}

void CmdGWInvitParticipants::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  gwid_ = 0u;
  confsubject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWInvitParticipants::~CmdGWInvitParticipants() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWInvitParticipants)
  SharedDtor();
}

void CmdGWInvitParticipants::SharedDtor() {
  if (confsubject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confsubject_;
  }
  if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confpwd_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWInvitParticipants::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWInvitParticipants::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWInvitParticipants_descriptor_;
}

const CmdGWInvitParticipants& CmdGWInvitParticipants::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

CmdGWInvitParticipants* CmdGWInvitParticipants::default_instance_ = NULL;

CmdGWInvitParticipants* CmdGWInvitParticipants::New() const {
  return new CmdGWInvitParticipants;
}

void CmdGWInvitParticipants::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdGWInvitParticipants*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(confid_, gwid_);
    if (has_confsubject()) {
      if (confsubject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confsubject_->clear();
      }
    }
    if (has_confpwd()) {
      if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confpwd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ivtparticipants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWInvitParticipants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWInvitParticipants)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 3;
      case 3: {
        if (tag == 24) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ivtparticipants;
        break;
      }

      // repeated .SRMsgs.CmdGWInvitParticipants.ParticipantInfo ivtparticipants = 4;
      case 4: {
        if (tag == 34) {
         parse_ivtparticipants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ivtparticipants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ivtparticipants;
        if (input->ExpectTag(42)) goto parse_confsubject;
        break;
      }

      // optional string confsubject = 5;
      case 5: {
        if (tag == 42) {
         parse_confsubject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confsubject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confsubject().data(), this->confsubject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confsubject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_confpwd;
        break;
      }

      // optional string confpwd = 6;
      case 6: {
        if (tag == 50) {
         parse_confpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confpwd().data(), this->confpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confpwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWInvitParticipants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWInvitParticipants)
  return false;
#undef DO_
}

void CmdGWInvitParticipants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWInvitParticipants)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gwid(), output);
  }

  // repeated .SRMsgs.CmdGWInvitParticipants.ParticipantInfo ivtparticipants = 4;
  for (int i = 0; i < this->ivtparticipants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ivtparticipants(i), output);
  }

  // optional string confsubject = 5;
  if (has_confsubject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confsubject().data(), this->confsubject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confsubject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->confsubject(), output);
  }

  // optional string confpwd = 6;
  if (has_confpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confpwd().data(), this->confpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->confpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWInvitParticipants)
}

::google::protobuf::uint8* CmdGWInvitParticipants::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWInvitParticipants)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gwid(), target);
  }

  // repeated .SRMsgs.CmdGWInvitParticipants.ParticipantInfo ivtparticipants = 4;
  for (int i = 0; i < this->ivtparticipants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ivtparticipants(i), target);
  }

  // optional string confsubject = 5;
  if (has_confsubject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confsubject().data(), this->confsubject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confsubject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->confsubject(), target);
  }

  // optional string confpwd = 6;
  if (has_confpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confpwd().data(), this->confpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->confpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWInvitParticipants)
  return target;
}

int CmdGWInvitParticipants::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 3;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

    // optional string confsubject = 5;
    if (has_confsubject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confsubject());
    }

    // optional string confpwd = 6;
    if (has_confpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confpwd());
    }

  }
  // repeated .SRMsgs.CmdGWInvitParticipants.ParticipantInfo ivtparticipants = 4;
  total_size += 1 * this->ivtparticipants_size();
  for (int i = 0; i < this->ivtparticipants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ivtparticipants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWInvitParticipants::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWInvitParticipants* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWInvitParticipants*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWInvitParticipants::MergeFrom(const CmdGWInvitParticipants& from) {
  GOOGLE_CHECK_NE(&from, this);
  ivtparticipants_.MergeFrom(from.ivtparticipants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
    if (from.has_confsubject()) {
      set_confsubject(from.confsubject());
    }
    if (from.has_confpwd()) {
      set_confpwd(from.confpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWInvitParticipants::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWInvitParticipants::CopyFrom(const CmdGWInvitParticipants& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWInvitParticipants::IsInitialized() const {

  return true;
}

void CmdGWInvitParticipants::Swap(CmdGWInvitParticipants* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    ivtparticipants_.Swap(&other->ivtparticipants_);
    std::swap(confsubject_, other->confsubject_);
    std::swap(confpwd_, other->confpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWInvitParticipants::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWInvitParticipants_descriptor_;
  metadata.reflection = CmdGWInvitParticipants_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatToGW::kMcidFieldNumber;
const int IndMCHeartBeatToGW::kGwidFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatToGW::IndMCHeartBeatToGW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatToGW)
}

void IndMCHeartBeatToGW::InitAsDefaultInstance() {
}

IndMCHeartBeatToGW::IndMCHeartBeatToGW(const IndMCHeartBeatToGW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatToGW)
}

void IndMCHeartBeatToGW::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  gwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatToGW::~IndMCHeartBeatToGW() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatToGW)
  SharedDtor();
}

void IndMCHeartBeatToGW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatToGW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatToGW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatToGW_descriptor_;
}

const IndMCHeartBeatToGW& IndMCHeartBeatToGW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndMCHeartBeatToGW* IndMCHeartBeatToGW::default_instance_ = NULL;

IndMCHeartBeatToGW* IndMCHeartBeatToGW::New() const {
  return new IndMCHeartBeatToGW;
}

void IndMCHeartBeatToGW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatToGW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, gwid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatToGW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatToGW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 2;
      case 2: {
        if (tag == 16) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatToGW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatToGW)
  return false;
#undef DO_
}

void IndMCHeartBeatToGW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatToGW)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatToGW)
}

::google::protobuf::uint8* IndMCHeartBeatToGW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatToGW)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatToGW)
  return target;
}

int IndMCHeartBeatToGW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 2;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatToGW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatToGW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatToGW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatToGW::MergeFrom(const IndMCHeartBeatToGW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatToGW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatToGW::CopyFrom(const IndMCHeartBeatToGW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatToGW::IsInitialized() const {

  return true;
}

void IndMCHeartBeatToGW::Swap(IndMCHeartBeatToGW* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatToGW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatToGW_descriptor_;
  metadata.reflection = IndMCHeartBeatToGW_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndGWHeartBeatToMC::kMcidFieldNumber;
const int IndGWHeartBeatToMC::kGwidFieldNumber;
#endif  // !_MSC_VER

IndGWHeartBeatToMC::IndGWHeartBeatToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndGWHeartBeatToMC)
}

void IndGWHeartBeatToMC::InitAsDefaultInstance() {
}

IndGWHeartBeatToMC::IndGWHeartBeatToMC(const IndGWHeartBeatToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndGWHeartBeatToMC)
}

void IndGWHeartBeatToMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  gwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndGWHeartBeatToMC::~IndGWHeartBeatToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndGWHeartBeatToMC)
  SharedDtor();
}

void IndGWHeartBeatToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndGWHeartBeatToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndGWHeartBeatToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndGWHeartBeatToMC_descriptor_;
}

const IndGWHeartBeatToMC& IndGWHeartBeatToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndGWHeartBeatToMC* IndGWHeartBeatToMC::default_instance_ = NULL;

IndGWHeartBeatToMC* IndGWHeartBeatToMC::New() const {
  return new IndGWHeartBeatToMC;
}

void IndGWHeartBeatToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndGWHeartBeatToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, gwid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndGWHeartBeatToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndGWHeartBeatToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 2;
      case 2: {
        if (tag == 16) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndGWHeartBeatToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndGWHeartBeatToMC)
  return false;
#undef DO_
}

void IndGWHeartBeatToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndGWHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndGWHeartBeatToMC)
}

::google::protobuf::uint8* IndGWHeartBeatToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndGWHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 gwid = 2;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndGWHeartBeatToMC)
  return target;
}

int IndGWHeartBeatToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 2;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndGWHeartBeatToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndGWHeartBeatToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndGWHeartBeatToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndGWHeartBeatToMC::MergeFrom(const IndGWHeartBeatToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndGWHeartBeatToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndGWHeartBeatToMC::CopyFrom(const IndGWHeartBeatToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndGWHeartBeatToMC::IsInitialized() const {

  return true;
}

void IndGWHeartBeatToMC::Swap(IndGWHeartBeatToMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndGWHeartBeatToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndGWHeartBeatToMC_descriptor_;
  metadata.reflection = IndGWHeartBeatToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndGWQueryMonitorRecToMC_TimeInfo::kStarttimeFieldNumber;
const int IndGWQueryMonitorRecToMC_TimeInfo::kEndtimeFieldNumber;
#endif  // !_MSC_VER

IndGWQueryMonitorRecToMC_TimeInfo::IndGWQueryMonitorRecToMC_TimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
}

void IndGWQueryMonitorRecToMC_TimeInfo::InitAsDefaultInstance() {
}

IndGWQueryMonitorRecToMC_TimeInfo::IndGWQueryMonitorRecToMC_TimeInfo(const IndGWQueryMonitorRecToMC_TimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
}

void IndGWQueryMonitorRecToMC_TimeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndGWQueryMonitorRecToMC_TimeInfo::~IndGWQueryMonitorRecToMC_TimeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  SharedDtor();
}

void IndGWQueryMonitorRecToMC_TimeInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void IndGWQueryMonitorRecToMC_TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC_TimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndGWQueryMonitorRecToMC_TimeInfo_descriptor_;
}

const IndGWQueryMonitorRecToMC_TimeInfo& IndGWQueryMonitorRecToMC_TimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndGWQueryMonitorRecToMC_TimeInfo* IndGWQueryMonitorRecToMC_TimeInfo::default_instance_ = NULL;

IndGWQueryMonitorRecToMC_TimeInfo* IndGWQueryMonitorRecToMC_TimeInfo::New() const {
  return new IndGWQueryMonitorRecToMC_TimeInfo;
}

void IndGWQueryMonitorRecToMC_TimeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndGWQueryMonitorRecToMC_TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string starttime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endtime;
        break;
      }

      // optional string endtime = 2;
      case 2: {
        if (tag == 18) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  return false;
#undef DO_
}

void IndGWQueryMonitorRecToMC_TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->starttime(), output);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
}

::google::protobuf::uint8* IndGWQueryMonitorRecToMC_TimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  // optional string starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // optional string endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo)
  return target;
}

int IndGWQueryMonitorRecToMC_TimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndGWQueryMonitorRecToMC_TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndGWQueryMonitorRecToMC_TimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndGWQueryMonitorRecToMC_TimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndGWQueryMonitorRecToMC_TimeInfo::MergeFrom(const IndGWQueryMonitorRecToMC_TimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndGWQueryMonitorRecToMC_TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndGWQueryMonitorRecToMC_TimeInfo::CopyFrom(const IndGWQueryMonitorRecToMC_TimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndGWQueryMonitorRecToMC_TimeInfo::IsInitialized() const {

  return true;
}

void IndGWQueryMonitorRecToMC_TimeInfo::Swap(IndGWQueryMonitorRecToMC_TimeInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndGWQueryMonitorRecToMC_TimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndGWQueryMonitorRecToMC_TimeInfo_descriptor_;
  metadata.reflection = IndGWQueryMonitorRecToMC_TimeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndGWQueryMonitorRecToMC_MonitorInfo::kDevicecodeFieldNumber;
const int IndGWQueryMonitorRecToMC_MonitorInfo::kQuerystateFieldNumber;
const int IndGWQueryMonitorRecToMC_MonitorInfo::kTotaltimespanFieldNumber;
const int IndGWQueryMonitorRecToMC_MonitorInfo::kSubtimespansFieldNumber;
#endif  // !_MSC_VER

IndGWQueryMonitorRecToMC_MonitorInfo::IndGWQueryMonitorRecToMC_MonitorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
}

void IndGWQueryMonitorRecToMC_MonitorInfo::InitAsDefaultInstance() {
  totaltimespan_ = const_cast< ::SRMsgs::IndGWQueryMonitorRecToMC_TimeInfo*>(&::SRMsgs::IndGWQueryMonitorRecToMC_TimeInfo::default_instance());
}

IndGWQueryMonitorRecToMC_MonitorInfo::IndGWQueryMonitorRecToMC_MonitorInfo(const IndGWQueryMonitorRecToMC_MonitorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
}

void IndGWQueryMonitorRecToMC_MonitorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querystate_ = 0u;
  totaltimespan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndGWQueryMonitorRecToMC_MonitorInfo::~IndGWQueryMonitorRecToMC_MonitorInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  SharedDtor();
}

void IndGWQueryMonitorRecToMC_MonitorInfo::SharedDtor() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (this != default_instance_) {
    delete totaltimespan_;
  }
}

void IndGWQueryMonitorRecToMC_MonitorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC_MonitorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_;
}

const IndGWQueryMonitorRecToMC_MonitorInfo& IndGWQueryMonitorRecToMC_MonitorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndGWQueryMonitorRecToMC_MonitorInfo* IndGWQueryMonitorRecToMC_MonitorInfo::default_instance_ = NULL;

IndGWQueryMonitorRecToMC_MonitorInfo* IndGWQueryMonitorRecToMC_MonitorInfo::New() const {
  return new IndGWQueryMonitorRecToMC_MonitorInfo;
}

void IndGWQueryMonitorRecToMC_MonitorInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
    querystate_ = 0u;
    if (has_totaltimespan()) {
      if (totaltimespan_ != NULL) totaltimespan_->::SRMsgs::IndGWQueryMonitorRecToMC_TimeInfo::Clear();
    }
  }
  subtimespans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndGWQueryMonitorRecToMC_MonitorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicecode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_querystate;
        break;
      }

      // optional uint32 querystate = 2;
      case 2: {
        if (tag == 16) {
         parse_querystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &querystate_)));
          set_has_querystate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totaltimespan;
        break;
      }

      // optional .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo totaltimespan = 3;
      case 3: {
        if (tag == 26) {
         parse_totaltimespan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totaltimespan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subtimespans;
        break;
      }

      // repeated .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo subtimespans = 4;
      case 4: {
        if (tag == 34) {
         parse_subtimespans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtimespans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subtimespans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  return false;
#undef DO_
}

void IndGWQueryMonitorRecToMC_MonitorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  // optional string devicecode = 1;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicecode(), output);
  }

  // optional uint32 querystate = 2;
  if (has_querystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->querystate(), output);
  }

  // optional .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo totaltimespan = 3;
  if (has_totaltimespan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totaltimespan(), output);
  }

  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo subtimespans = 4;
  for (int i = 0; i < this->subtimespans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subtimespans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
}

::google::protobuf::uint8* IndGWQueryMonitorRecToMC_MonitorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  // optional string devicecode = 1;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicecode(), target);
  }

  // optional uint32 querystate = 2;
  if (has_querystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->querystate(), target);
  }

  // optional .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo totaltimespan = 3;
  if (has_totaltimespan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totaltimespan(), target);
  }

  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo subtimespans = 4;
  for (int i = 0; i < this->subtimespans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subtimespans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo)
  return target;
}

int IndGWQueryMonitorRecToMC_MonitorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devicecode = 1;
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

    // optional uint32 querystate = 2;
    if (has_querystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->querystate());
    }

    // optional .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo totaltimespan = 3;
    if (has_totaltimespan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totaltimespan());
    }

  }
  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.TimeInfo subtimespans = 4;
  total_size += 1 * this->subtimespans_size();
  for (int i = 0; i < this->subtimespans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtimespans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndGWQueryMonitorRecToMC_MonitorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndGWQueryMonitorRecToMC_MonitorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndGWQueryMonitorRecToMC_MonitorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndGWQueryMonitorRecToMC_MonitorInfo::MergeFrom(const IndGWQueryMonitorRecToMC_MonitorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtimespans_.MergeFrom(from.subtimespans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
    if (from.has_querystate()) {
      set_querystate(from.querystate());
    }
    if (from.has_totaltimespan()) {
      mutable_totaltimespan()->::SRMsgs::IndGWQueryMonitorRecToMC_TimeInfo::MergeFrom(from.totaltimespan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndGWQueryMonitorRecToMC_MonitorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndGWQueryMonitorRecToMC_MonitorInfo::CopyFrom(const IndGWQueryMonitorRecToMC_MonitorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndGWQueryMonitorRecToMC_MonitorInfo::IsInitialized() const {

  return true;
}

void IndGWQueryMonitorRecToMC_MonitorInfo::Swap(IndGWQueryMonitorRecToMC_MonitorInfo* other) {
  if (other != this) {
    std::swap(devicecode_, other->devicecode_);
    std::swap(querystate_, other->querystate_);
    std::swap(totaltimespan_, other->totaltimespan_);
    subtimespans_.Swap(&other->subtimespans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndGWQueryMonitorRecToMC_MonitorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndGWQueryMonitorRecToMC_MonitorInfo_descriptor_;
  metadata.reflection = IndGWQueryMonitorRecToMC_MonitorInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndGWQueryMonitorRecToMC::kConfidFieldNumber;
const int IndGWQueryMonitorRecToMC::kMcidFieldNumber;
const int IndGWQueryMonitorRecToMC::kGwidFieldNumber;
const int IndGWQueryMonitorRecToMC::kQueryinfosFieldNumber;
#endif  // !_MSC_VER

IndGWQueryMonitorRecToMC::IndGWQueryMonitorRecToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndGWQueryMonitorRecToMC)
}

void IndGWQueryMonitorRecToMC::InitAsDefaultInstance() {
}

IndGWQueryMonitorRecToMC::IndGWQueryMonitorRecToMC(const IndGWQueryMonitorRecToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndGWQueryMonitorRecToMC)
}

void IndGWQueryMonitorRecToMC::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  gwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndGWQueryMonitorRecToMC::~IndGWQueryMonitorRecToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndGWQueryMonitorRecToMC)
  SharedDtor();
}

void IndGWQueryMonitorRecToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndGWQueryMonitorRecToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndGWQueryMonitorRecToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndGWQueryMonitorRecToMC_descriptor_;
}

const IndGWQueryMonitorRecToMC& IndGWQueryMonitorRecToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndGWQueryMonitorRecToMC* IndGWQueryMonitorRecToMC::default_instance_ = NULL;

IndGWQueryMonitorRecToMC* IndGWQueryMonitorRecToMC::New() const {
  return new IndGWQueryMonitorRecToMC;
}

void IndGWQueryMonitorRecToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndGWQueryMonitorRecToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, gwid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  queryinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndGWQueryMonitorRecToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndGWQueryMonitorRecToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 3;
      case 3: {
        if (tag == 24) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_queryinfos;
        break;
      }

      // repeated .SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo queryinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_queryinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queryinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_queryinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndGWQueryMonitorRecToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndGWQueryMonitorRecToMC)
  return false;
#undef DO_
}

void IndGWQueryMonitorRecToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndGWQueryMonitorRecToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gwid(), output);
  }

  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo queryinfos = 4;
  for (int i = 0; i < this->queryinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->queryinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndGWQueryMonitorRecToMC)
}

::google::protobuf::uint8* IndGWQueryMonitorRecToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndGWQueryMonitorRecToMC)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gwid(), target);
  }

  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo queryinfos = 4;
  for (int i = 0; i < this->queryinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->queryinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndGWQueryMonitorRecToMC)
  return target;
}

int IndGWQueryMonitorRecToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 3;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

  }
  // repeated .SRMsgs.IndGWQueryMonitorRecToMC.MonitorInfo queryinfos = 4;
  total_size += 1 * this->queryinfos_size();
  for (int i = 0; i < this->queryinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queryinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndGWQueryMonitorRecToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndGWQueryMonitorRecToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndGWQueryMonitorRecToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndGWQueryMonitorRecToMC::MergeFrom(const IndGWQueryMonitorRecToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  queryinfos_.MergeFrom(from.queryinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndGWQueryMonitorRecToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndGWQueryMonitorRecToMC::CopyFrom(const IndGWQueryMonitorRecToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndGWQueryMonitorRecToMC::IsInitialized() const {

  return true;
}

void IndGWQueryMonitorRecToMC::Swap(IndGWQueryMonitorRecToMC* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    queryinfos_.Swap(&other->queryinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndGWQueryMonitorRecToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndGWQueryMonitorRecToMC_descriptor_;
  metadata.reflection = IndGWQueryMonitorRecToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_FrameInfo::kFswFieldNumber;
const int IndTerStatisticsInfoFromGW_FrameInfo::kFshFieldNumber;
const int IndTerStatisticsInfoFromGW_FrameInfo::kFpsFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_FrameInfo::IndTerStatisticsInfoFromGW_FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
}

void IndTerStatisticsInfoFromGW_FrameInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW_FrameInfo::IndTerStatisticsInfoFromGW_FrameInfo(const IndTerStatisticsInfoFromGW_FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
}

void IndTerStatisticsInfoFromGW_FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  fsw_ = 0u;
  fsh_ = 0u;
  fps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_FrameInfo::~IndTerStatisticsInfoFromGW_FrameInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW_FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_FrameInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_FrameInfo& IndTerStatisticsInfoFromGW_FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_FrameInfo* IndTerStatisticsInfoFromGW_FrameInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_FrameInfo* IndTerStatisticsInfoFromGW_FrameInfo::New() const {
  return new IndTerStatisticsInfoFromGW_FrameInfo;
}

void IndTerStatisticsInfoFromGW_FrameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_FrameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fsw_, fps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fsw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsw_)));
          set_has_fsw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fsh;
        break;
      }

      // optional uint32 fsh = 2;
      case 2: {
        if (tag == 16) {
         parse_fsh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsh_)));
          set_has_fsh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fps;
        break;
      }

      // optional uint32 fps = 3;
      case 3: {
        if (tag == 24) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
          set_has_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fsw(), output);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fsh(), output);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fsw(), target);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fsh(), target);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_FrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fsw = 1;
    if (has_fsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsw());
    }

    // optional uint32 fsh = 2;
    if (has_fsh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsh());
    }

    // optional uint32 fps = 3;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_FrameInfo::MergeFrom(const IndTerStatisticsInfoFromGW_FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fsw()) {
      set_fsw(from.fsw());
    }
    if (from.has_fsh()) {
      set_fsh(from.fsh());
    }
    if (from.has_fps()) {
      set_fps(from.fps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_FrameInfo::CopyFrom(const IndTerStatisticsInfoFromGW_FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_FrameInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_FrameInfo::Swap(IndTerStatisticsInfoFromGW_FrameInfo* other) {
  if (other != this) {
    std::swap(fsw_, other->fsw_);
    std::swap(fsh_, other->fsh_);
    std::swap(fps_, other->fps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_FrameInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_FrameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_AdvanceInfo::kDelayFieldNumber;
const int IndTerStatisticsInfoFromGW_AdvanceInfo::kJitterFieldNumber;
const int IndTerStatisticsInfoFromGW_AdvanceInfo::kLossFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_AdvanceInfo::IndTerStatisticsInfoFromGW_AdvanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW_AdvanceInfo::IndTerStatisticsInfoFromGW_AdvanceInfo(const IndTerStatisticsInfoFromGW_AdvanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0u;
  jitter_ = 0u;
  loss_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_AdvanceInfo::~IndTerStatisticsInfoFromGW_AdvanceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_AdvanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_AdvanceInfo& IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_AdvanceInfo* IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_AdvanceInfo* IndTerStatisticsInfoFromGW_AdvanceInfo::New() const {
  return new IndTerStatisticsInfoFromGW_AdvanceInfo;
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_AdvanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delay_, loss_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_AdvanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jitter;
        break;
      }

      // optional uint32 jitter = 2;
      case 2: {
        if (tag == 16) {
         parse_jitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
          set_has_jitter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loss;
        break;
      }

      // optional uint32 loss = 3;
      case 3: {
        if (tag == 24) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jitter(), output);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_AdvanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jitter(), target);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_AdvanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 jitter = 2;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

    // optional uint32 loss = 3;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_AdvanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_AdvanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::MergeFrom(const IndTerStatisticsInfoFromGW_AdvanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_jitter()) {
      set_jitter(from.jitter());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::CopyFrom(const IndTerStatisticsInfoFromGW_AdvanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_AdvanceInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_AdvanceInfo::Swap(IndTerStatisticsInfoFromGW_AdvanceInfo* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(jitter_, other->jitter_);
    std::swap(loss_, other->loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_AdvanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_AdvanceInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_AdvanceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_BaseInfo::kFormatFieldNumber;
const int IndTerStatisticsInfoFromGW_BaseInfo::kBitrateFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_BaseInfo::IndTerStatisticsInfoFromGW_BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
}

void IndTerStatisticsInfoFromGW_BaseInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW_BaseInfo::IndTerStatisticsInfoFromGW_BaseInfo(const IndTerStatisticsInfoFromGW_BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
}

void IndTerStatisticsInfoFromGW_BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  format_ = 0u;
  bitrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_BaseInfo::~IndTerStatisticsInfoFromGW_BaseInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_BaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW_BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_BaseInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_BaseInfo& IndTerStatisticsInfoFromGW_BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_BaseInfo* IndTerStatisticsInfoFromGW_BaseInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_BaseInfo* IndTerStatisticsInfoFromGW_BaseInfo::New() const {
  return new IndTerStatisticsInfoFromGW_BaseInfo;
}

void IndTerStatisticsInfoFromGW_BaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_BaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(format_, bitrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 format = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bitrate;
        break;
      }

      // optional uint32 bitrate = 2;
      case 2: {
        if (tag == 16) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format(), output);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format(), target);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bitrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional uint32 bitrate = 2;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_BaseInfo::MergeFrom(const IndTerStatisticsInfoFromGW_BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_BaseInfo::CopyFrom(const IndTerStatisticsInfoFromGW_BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_BaseInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_BaseInfo::Swap(IndTerStatisticsInfoFromGW_BaseInfo* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_BaseInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_BaseInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_AudioInfo::kAtypeFieldNumber;
const int IndTerStatisticsInfoFromGW_AudioInfo::kAteridFieldNumber;
const int IndTerStatisticsInfoFromGW_AudioInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_AudioInfo::kAdvinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_AudioInfo::IndTerStatisticsInfoFromGW_AudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
}

void IndTerStatisticsInfoFromGW_AudioInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance());
}

IndTerStatisticsInfoFromGW_AudioInfo::IndTerStatisticsInfoFromGW_AudioInfo(const IndTerStatisticsInfoFromGW_AudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
}

void IndTerStatisticsInfoFromGW_AudioInfo::SharedCtor() {
  _cached_size_ = 0;
  atype_ = 0u;
  aterid_ = 0u;
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_AudioInfo::~IndTerStatisticsInfoFromGW_AudioInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_AudioInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfoFromGW_AudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_AudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_AudioInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_AudioInfo& IndTerStatisticsInfoFromGW_AudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_AudioInfo* IndTerStatisticsInfoFromGW_AudioInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_AudioInfo* IndTerStatisticsInfoFromGW_AudioInfo::New() const {
  return new IndTerStatisticsInfoFromGW_AudioInfo;
}

void IndTerStatisticsInfoFromGW_AudioInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_AudioInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(atype_, aterid_);
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_AudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atype_)));
          set_has_atype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aterid;
        break;
      }

      // optional uint32 aterid = 2;
      case 2: {
        if (tag == 16) {
         parse_aterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aterid_)));
          set_has_aterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_AudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atype(), output);
  }

  // optional uint32 aterid = 2;
  if (has_aterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aterid(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->advinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_AudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atype(), target);
  }

  // optional uint32 aterid = 2;
  if (has_aterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aterid(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->advinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_AudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atype = 1;
    if (has_atype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atype());
    }

    // optional uint32 aterid = 2;
    if (has_aterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aterid());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_AudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_AudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_AudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_AudioInfo::MergeFrom(const IndTerStatisticsInfoFromGW_AudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atype()) {
      set_atype(from.atype());
    }
    if (from.has_aterid()) {
      set_aterid(from.aterid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_AudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_AudioInfo::CopyFrom(const IndTerStatisticsInfoFromGW_AudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_AudioInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_AudioInfo::Swap(IndTerStatisticsInfoFromGW_AudioInfo* other) {
  if (other != this) {
    std::swap(atype_, other->atype_);
    std::swap(aterid_, other->aterid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_AudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_AudioInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_AudioInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_VideoInfo::kVtypeFieldNumber;
const int IndTerStatisticsInfoFromGW_VideoInfo::kVteridFieldNumber;
const int IndTerStatisticsInfoFromGW_VideoInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_VideoInfo::kAdvinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_VideoInfo::kFrameinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_VideoInfo::IndTerStatisticsInfoFromGW_VideoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
}

void IndTerStatisticsInfoFromGW_VideoInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::default_instance());
}

IndTerStatisticsInfoFromGW_VideoInfo::IndTerStatisticsInfoFromGW_VideoInfo(const IndTerStatisticsInfoFromGW_VideoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
}

void IndTerStatisticsInfoFromGW_VideoInfo::SharedCtor() {
  _cached_size_ = 0;
  vtype_ = 0u;
  vterid_ = 0u;
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_VideoInfo::~IndTerStatisticsInfoFromGW_VideoInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_VideoInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfoFromGW_VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_VideoInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_VideoInfo& IndTerStatisticsInfoFromGW_VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_VideoInfo* IndTerStatisticsInfoFromGW_VideoInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_VideoInfo* IndTerStatisticsInfoFromGW_VideoInfo::New() const {
  return new IndTerStatisticsInfoFromGW_VideoInfo;
}

void IndTerStatisticsInfoFromGW_VideoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_VideoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(vtype_, vterid_);
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frameinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vterid;
        break;
      }

      // optional uint32 vterid = 2;
      case 2: {
        if (tag == 16) {
         parse_vterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vterid_)));
          set_has_vterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frameinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo frameinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_frameinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frameinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vtype(), output);
  }

  // optional uint32 vterid = 2;
  if (has_vterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vterid(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->advinfo(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo frameinfo = 5;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frameinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_VideoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vtype(), target);
  }

  // optional uint32 vterid = 2;
  if (has_vterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vterid(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->advinfo(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo frameinfo = 5;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frameinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_VideoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vtype());
    }

    // optional uint32 vterid = 2;
    if (has_vterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vterid());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromGW.BaseInfo baseinfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromGW.AdvanceInfo advinfo = 4;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.FrameInfo frameinfo = 5;
  total_size += 1 * this->frameinfo_size();
  for (int i = 0; i < this->frameinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frameinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_VideoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_VideoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_VideoInfo::MergeFrom(const IndTerStatisticsInfoFromGW_VideoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  frameinfo_.MergeFrom(from.frameinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_vterid()) {
      set_vterid(from.vterid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfoFromGW_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfoFromGW_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_VideoInfo::CopyFrom(const IndTerStatisticsInfoFromGW_VideoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_VideoInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_VideoInfo::Swap(IndTerStatisticsInfoFromGW_VideoInfo* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(vterid_, other->vterid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    frameinfo_.Swap(&other->frameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_VideoInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_VideoInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_XfeInfo::kAinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_XfeInfo::kVinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_XfeInfo::IndTerStatisticsInfoFromGW_XfeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
}

void IndTerStatisticsInfoFromGW_XfeInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW_XfeInfo::IndTerStatisticsInfoFromGW_XfeInfo(const IndTerStatisticsInfoFromGW_XfeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
}

void IndTerStatisticsInfoFromGW_XfeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_XfeInfo::~IndTerStatisticsInfoFromGW_XfeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_XfeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW_XfeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_XfeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_XfeInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_XfeInfo& IndTerStatisticsInfoFromGW_XfeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_XfeInfo* IndTerStatisticsInfoFromGW_XfeInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_XfeInfo* IndTerStatisticsInfoFromGW_XfeInfo::New() const {
  return new IndTerStatisticsInfoFromGW_XfeInfo;
}

void IndTerStatisticsInfoFromGW_XfeInfo::Clear() {
  ainfo_.Clear();
  vinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_XfeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo ainfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ainfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ainfo;
        if (input->ExpectTag(18)) goto parse_vinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo vinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_vinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_XfeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ainfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_XfeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ainfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_XfeInfo::ByteSize() const {
  int total_size = 0;

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.AudioInfo ainfo = 1;
  total_size += 1 * this->ainfo_size();
  for (int i = 0; i < this->ainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ainfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.VideoInfo vinfo = 2;
  total_size += 1 * this->vinfo_size();
  for (int i = 0; i < this->vinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_XfeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_XfeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_XfeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_XfeInfo::MergeFrom(const IndTerStatisticsInfoFromGW_XfeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ainfo_.MergeFrom(from.ainfo_);
  vinfo_.MergeFrom(from.vinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_XfeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_XfeInfo::CopyFrom(const IndTerStatisticsInfoFromGW_XfeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_XfeInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_XfeInfo::Swap(IndTerStatisticsInfoFromGW_XfeInfo* other) {
  if (other != this) {
    ainfo_.Swap(&other->ainfo_);
    vinfo_.Swap(&other->vinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_XfeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_XfeInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_XfeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW_TerStatisticsInfo::kTeridFieldNumber;
const int IndTerStatisticsInfoFromGW_TerStatisticsInfo::kTxinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_TerStatisticsInfo::kRxinfoFieldNumber;
const int IndTerStatisticsInfoFromGW_TerStatisticsInfo::kTxbweresultFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW_TerStatisticsInfo::IndTerStatisticsInfoFromGW_TerStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW_TerStatisticsInfo::IndTerStatisticsInfoFromGW_TerStatisticsInfo(const IndTerStatisticsInfoFromGW_TerStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  txbweresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW_TerStatisticsInfo::~IndTerStatisticsInfoFromGW_TerStatisticsInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW_TerStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_;
}

const IndTerStatisticsInfoFromGW_TerStatisticsInfo& IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW_TerStatisticsInfo* IndTerStatisticsInfoFromGW_TerStatisticsInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromGW_TerStatisticsInfo* IndTerStatisticsInfoFromGW_TerStatisticsInfo::New() const {
  return new IndTerStatisticsInfoFromGW_TerStatisticsInfo;
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW_TerStatisticsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, txbweresult_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  txinfo_.Clear();
  rxinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW_TerStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo txinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_txinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txinfo;
        if (input->ExpectTag(26)) goto parse_rxinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo rxinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rxinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rxinfo;
        if (input->ExpectTag(32)) goto parse_txbweresult;
        break;
      }

      // optional uint32 txbweresult = 4;
      case 4: {
        if (tag == 32) {
         parse_txbweresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txbweresult_)));
          set_has_txbweresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo txinfo = 2;
  for (int i = 0; i < this->txinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->txinfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo rxinfo = 3;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rxinfo(i), output);
  }

  // optional uint32 txbweresult = 4;
  if (has_txbweresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->txbweresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW_TerStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo txinfo = 2;
  for (int i = 0; i < this->txinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->txinfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo rxinfo = 3;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rxinfo(i), target);
  }

  // optional uint32 txbweresult = 4;
  if (has_txbweresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->txbweresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo)
  return target;
}

int IndTerStatisticsInfoFromGW_TerStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 txbweresult = 4;
    if (has_txbweresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txbweresult());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo txinfo = 2;
  total_size += 1 * this->txinfo_size();
  for (int i = 0; i < this->txinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txinfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.XfeInfo rxinfo = 3;
  total_size += 1 * this->rxinfo_size();
  for (int i = 0; i < this->rxinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rxinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW_TerStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW_TerStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::MergeFrom(const IndTerStatisticsInfoFromGW_TerStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  txinfo_.MergeFrom(from.txinfo_);
  rxinfo_.MergeFrom(from.rxinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_txbweresult()) {
      set_txbweresult(from.txbweresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::CopyFrom(const IndTerStatisticsInfoFromGW_TerStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW_TerStatisticsInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW_TerStatisticsInfo::Swap(IndTerStatisticsInfoFromGW_TerStatisticsInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    txinfo_.Swap(&other->txinfo_);
    rxinfo_.Swap(&other->rxinfo_);
    std::swap(txbweresult_, other->txbweresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW_TerStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_TerStatisticsInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_TerStatisticsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromGW::kConfidFieldNumber;
const int IndTerStatisticsInfoFromGW::kMcidFieldNumber;
const int IndTerStatisticsInfoFromGW::kGwidFieldNumber;
const int IndTerStatisticsInfoFromGW::kTsinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromGW::IndTerStatisticsInfoFromGW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromGW)
}

void IndTerStatisticsInfoFromGW::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromGW::IndTerStatisticsInfoFromGW(const IndTerStatisticsInfoFromGW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromGW)
}

void IndTerStatisticsInfoFromGW::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  gwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromGW::~IndTerStatisticsInfoFromGW() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromGW)
  SharedDtor();
}

void IndTerStatisticsInfoFromGW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromGW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromGW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromGW_descriptor_;
}

const IndTerStatisticsInfoFromGW& IndTerStatisticsInfoFromGW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fgw_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromGW* IndTerStatisticsInfoFromGW::default_instance_ = NULL;

IndTerStatisticsInfoFromGW* IndTerStatisticsInfoFromGW::New() const {
  return new IndTerStatisticsInfoFromGW;
}

void IndTerStatisticsInfoFromGW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromGW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, gwid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromGW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromGW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gwid;
        break;
      }

      // optional uint32 gwid = 3;
      case 3: {
        if (tag == 24) {
         parse_gwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gwid_)));
          set_has_gwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo tsinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_tsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromGW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromGW)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromGW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromGW)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gwid(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromGW)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromGW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromGW)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 gwid = 3;
  if (has_gwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gwid(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromGW)
  return target;
}

int IndTerStatisticsInfoFromGW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 gwid = 3;
    if (has_gwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gwid());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromGW.TerStatisticsInfo tsinfo = 4;
  total_size += 1 * this->tsinfo_size();
  for (int i = 0; i < this->tsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromGW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromGW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromGW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromGW::MergeFrom(const IndTerStatisticsInfoFromGW& from) {
  GOOGLE_CHECK_NE(&from, this);
  tsinfo_.MergeFrom(from.tsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_gwid()) {
      set_gwid(from.gwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromGW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromGW::CopyFrom(const IndTerStatisticsInfoFromGW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromGW::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromGW::Swap(IndTerStatisticsInfoFromGW* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(gwid_, other->gwid_);
    tsinfo_.Swap(&other->tsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromGW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromGW_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromGW_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
