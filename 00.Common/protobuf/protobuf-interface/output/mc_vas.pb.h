// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_vas.proto

#ifndef PROTOBUF_mc_5fvas_2eproto__INCLUDED
#define PROTOBUF_mc_5fvas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mc_5fvas_2eproto();
void protobuf_AssignDesc_mc_5fvas_2eproto();
void protobuf_ShutdownFile_mc_5fvas_2eproto();

class ReqVASCreateConf;
class ReqVASCreateConf_NetMpAddr;
class CmdVASDestroyConf;
class CmdVASStartAnaly;
class CmdVASStartAnaly_AnalyInfo;
class CmdVASStopAnaly;
class CmdVASStopAnaly_AnalyInfo;
class CmdVASUpdateAnaly;
class CmdVASUpdateAnaly_AnalyInfo;
class CmdVASReOpenNetMPMediaPort;
class IndMCHeartBeatToVAS;
class IndConfAllMPIInfoToVAS;
class IndConfAllMPIInfoToVAS_ScreensInMPI;
class IndConfAllMPIInfoToVAS_MPIsInConf;
class IndMPIInfoToVAS;
class IndScreenInfoToVAS;
class RspVASCreateConf;
class IndVASHeartBeatToMC;
class IndVASMatchResult;
class IndVASMatchResult_videoMatch;
class IndVASMatchResult_MatchResult;
class CmdMCVASSeleteVideo;
class CmdMCVASSeleteVideo_TermInfo;

// ===================================================================

class ReqVASCreateConf_NetMpAddr : public ::google::protobuf::Message {
 public:
  ReqVASCreateConf_NetMpAddr();
  virtual ~ReqVASCreateConf_NetMpAddr();

  ReqVASCreateConf_NetMpAddr(const ReqVASCreateConf_NetMpAddr& from);

  inline ReqVASCreateConf_NetMpAddr& operator=(const ReqVASCreateConf_NetMpAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqVASCreateConf_NetMpAddr& default_instance();

  void Swap(ReqVASCreateConf_NetMpAddr* other);

  // implements Message ----------------------------------------------

  ReqVASCreateConf_NetMpAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqVASCreateConf_NetMpAddr& from);
  void MergeFrom(const ReqVASCreateConf_NetMpAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 netmpid = 1;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 1;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional string netmpmediaip = 2;
  inline bool has_netmpmediaip() const;
  inline void clear_netmpmediaip();
  static const int kNetmpmediaipFieldNumber = 2;
  inline const ::std::string& netmpmediaip() const;
  inline void set_netmpmediaip(const ::std::string& value);
  inline void set_netmpmediaip(const char* value);
  inline void set_netmpmediaip(const char* value, size_t size);
  inline ::std::string* mutable_netmpmediaip();
  inline ::std::string* release_netmpmediaip();
  inline void set_allocated_netmpmediaip(::std::string* netmpmediaip);

  // optional uint32 audiodatarecvport = 3;
  inline bool has_audiodatarecvport() const;
  inline void clear_audiodatarecvport();
  static const int kAudiodatarecvportFieldNumber = 3;
  inline ::google::protobuf::uint32 audiodatarecvport() const;
  inline void set_audiodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 audioctrlrecvport = 4;
  inline bool has_audioctrlrecvport() const;
  inline void clear_audioctrlrecvport();
  static const int kAudioctrlrecvportFieldNumber = 4;
  inline ::google::protobuf::uint32 audioctrlrecvport() const;
  inline void set_audioctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 videodatarecvport = 5;
  inline bool has_videodatarecvport() const;
  inline void clear_videodatarecvport();
  static const int kVideodatarecvportFieldNumber = 5;
  inline ::google::protobuf::uint32 videodatarecvport() const;
  inline void set_videodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 videoctrlrecvport = 6;
  inline bool has_videoctrlrecvport() const;
  inline void clear_videoctrlrecvport();
  static const int kVideoctrlrecvportFieldNumber = 6;
  inline ::google::protobuf::uint32 videoctrlrecvport() const;
  inline void set_videoctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video2datarecvport = 7;
  inline bool has_video2datarecvport() const;
  inline void clear_video2datarecvport();
  static const int kVideo2DatarecvportFieldNumber = 7;
  inline ::google::protobuf::uint32 video2datarecvport() const;
  inline void set_video2datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video2ctrlrecvport = 8;
  inline bool has_video2ctrlrecvport() const;
  inline void clear_video2ctrlrecvport();
  static const int kVideo2CtrlrecvportFieldNumber = 8;
  inline ::google::protobuf::uint32 video2ctrlrecvport() const;
  inline void set_video2ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video3datarecvport = 9;
  inline bool has_video3datarecvport() const;
  inline void clear_video3datarecvport();
  static const int kVideo3DatarecvportFieldNumber = 9;
  inline ::google::protobuf::uint32 video3datarecvport() const;
  inline void set_video3datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video3ctrlrecvport = 10;
  inline bool has_video3ctrlrecvport() const;
  inline void clear_video3ctrlrecvport();
  static const int kVideo3CtrlrecvportFieldNumber = 10;
  inline ::google::protobuf::uint32 video3ctrlrecvport() const;
  inline void set_video3ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopdatarecvport = 11;
  inline bool has_desktopdatarecvport() const;
  inline void clear_desktopdatarecvport();
  static const int kDesktopdatarecvportFieldNumber = 11;
  inline ::google::protobuf::uint32 desktopdatarecvport() const;
  inline void set_desktopdatarecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopctrlrecvport = 12;
  inline bool has_desktopctrlrecvport() const;
  inline void clear_desktopctrlrecvport();
  static const int kDesktopctrlrecvportFieldNumber = 12;
  inline ::google::protobuf::uint32 desktopctrlrecvport() const;
  inline void set_desktopctrlrecvport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqVASCreateConf.NetMpAddr)
 private:
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_netmpmediaip();
  inline void clear_has_netmpmediaip();
  inline void set_has_audiodatarecvport();
  inline void clear_has_audiodatarecvport();
  inline void set_has_audioctrlrecvport();
  inline void clear_has_audioctrlrecvport();
  inline void set_has_videodatarecvport();
  inline void clear_has_videodatarecvport();
  inline void set_has_videoctrlrecvport();
  inline void clear_has_videoctrlrecvport();
  inline void set_has_video2datarecvport();
  inline void clear_has_video2datarecvport();
  inline void set_has_video2ctrlrecvport();
  inline void clear_has_video2ctrlrecvport();
  inline void set_has_video3datarecvport();
  inline void clear_has_video3datarecvport();
  inline void set_has_video3ctrlrecvport();
  inline void clear_has_video3ctrlrecvport();
  inline void set_has_desktopdatarecvport();
  inline void clear_has_desktopdatarecvport();
  inline void set_has_desktopctrlrecvport();
  inline void clear_has_desktopctrlrecvport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* netmpmediaip_;
  ::google::protobuf::uint32 netmpid_;
  ::google::protobuf::uint32 audiodatarecvport_;
  ::google::protobuf::uint32 audioctrlrecvport_;
  ::google::protobuf::uint32 videodatarecvport_;
  ::google::protobuf::uint32 videoctrlrecvport_;
  ::google::protobuf::uint32 video2datarecvport_;
  ::google::protobuf::uint32 video2ctrlrecvport_;
  ::google::protobuf::uint32 video3datarecvport_;
  ::google::protobuf::uint32 video3ctrlrecvport_;
  ::google::protobuf::uint32 desktopdatarecvport_;
  ::google::protobuf::uint32 desktopctrlrecvport_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static ReqVASCreateConf_NetMpAddr* default_instance_;
};
// -------------------------------------------------------------------

class ReqVASCreateConf : public ::google::protobuf::Message {
 public:
  ReqVASCreateConf();
  virtual ~ReqVASCreateConf();

  ReqVASCreateConf(const ReqVASCreateConf& from);

  inline ReqVASCreateConf& operator=(const ReqVASCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqVASCreateConf& default_instance();

  void Swap(ReqVASCreateConf* other);

  // implements Message ----------------------------------------------

  ReqVASCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqVASCreateConf& from);
  void MergeFrom(const ReqVASCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqVASCreateConf_NetMpAddr NetMpAddr;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 4;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
  inline bool has_netmpaddr() const;
  inline void clear_netmpaddr();
  static const int kNetmpaddrFieldNumber = 5;
  inline const ::SRMsgs::ReqVASCreateConf_NetMpAddr& netmpaddr() const;
  inline ::SRMsgs::ReqVASCreateConf_NetMpAddr* mutable_netmpaddr();
  inline ::SRMsgs::ReqVASCreateConf_NetMpAddr* release_netmpaddr();
  inline void set_allocated_netmpaddr(::SRMsgs::ReqVASCreateConf_NetMpAddr* netmpaddr);

  // optional uint32 vaschantype = 6;
  inline bool has_vaschantype() const;
  inline void clear_vaschantype();
  static const int kVaschantypeFieldNumber = 6;
  inline ::google::protobuf::uint32 vaschantype() const;
  inline void set_vaschantype(::google::protobuf::uint32 value);

  // optional uint32 videosize = 7;
  inline bool has_videosize() const;
  inline void clear_videosize();
  static const int kVideosizeFieldNumber = 7;
  inline ::google::protobuf::uint32 videosize() const;
  inline void set_videosize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqVASCreateConf)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_netmpaddr();
  inline void clear_has_netmpaddr();
  inline void set_has_vaschantype();
  inline void clear_has_vaschantype();
  inline void set_has_videosize();
  inline void clear_has_videosize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::SRMsgs::ReqVASCreateConf_NetMpAddr* netmpaddr_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 vaschantype_;
  ::google::protobuf::uint32 videosize_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static ReqVASCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASDestroyConf : public ::google::protobuf::Message {
 public:
  CmdVASDestroyConf();
  virtual ~CmdVASDestroyConf();

  CmdVASDestroyConf(const CmdVASDestroyConf& from);

  inline CmdVASDestroyConf& operator=(const CmdVASDestroyConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASDestroyConf& default_instance();

  void Swap(CmdVASDestroyConf* other);

  // implements Message ----------------------------------------------

  CmdVASDestroyConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASDestroyConf& from);
  void MergeFrom(const CmdVASDestroyConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 4;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASDestroyConf)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::std::string* reason_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASDestroyConf* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASStartAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdVASStartAnaly_AnalyInfo();
  virtual ~CmdVASStartAnaly_AnalyInfo();

  CmdVASStartAnaly_AnalyInfo(const CmdVASStartAnaly_AnalyInfo& from);

  inline CmdVASStartAnaly_AnalyInfo& operator=(const CmdVASStartAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASStartAnaly_AnalyInfo& default_instance();

  void Swap(CmdVASStartAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdVASStartAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASStartAnaly_AnalyInfo& from);
  void MergeFrom(const CmdVASStartAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelid = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // repeated uint32 userids = 5;
  inline int userids_size() const;
  inline void clear_userids();
  static const int kUseridsFieldNumber = 5;
  inline ::google::protobuf::uint32 userids(int index) const;
  inline void set_userids(int index, ::google::protobuf::uint32 value);
  inline void add_userids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      userids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_userids();

  // optional bool isdispmnum = 6;
  inline bool has_isdispmnum() const;
  inline void clear_isdispmnum();
  static const int kIsdispmnumFieldNumber = 6;
  inline bool isdispmnum() const;
  inline void set_isdispmnum(bool value);

  // optional bool isdispmname = 7;
  inline bool has_isdispmname() const;
  inline void clear_isdispmname();
  static const int kIsdispmnameFieldNumber = 7;
  inline bool isdispmname() const;
  inline void set_isdispmname(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASStartAnaly.AnalyInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();
  inline void set_has_isdispmnum();
  inline void clear_has_isdispmnum();
  inline void set_has_isdispmname();
  inline void clear_has_isdispmname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > userids_;
  bool isdispmnum_;
  bool isdispmname_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASStartAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASStartAnaly : public ::google::protobuf::Message {
 public:
  CmdVASStartAnaly();
  virtual ~CmdVASStartAnaly();

  CmdVASStartAnaly(const CmdVASStartAnaly& from);

  inline CmdVASStartAnaly& operator=(const CmdVASStartAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASStartAnaly& default_instance();

  void Swap(CmdVASStartAnaly* other);

  // implements Message ----------------------------------------------

  CmdVASStartAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASStartAnaly& from);
  void MergeFrom(const CmdVASStartAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdVASStartAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
  inline int analyinfos_size() const;
  inline void clear_analyinfos();
  static const int kAnalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdVASStartAnaly_AnalyInfo& analyinfos(int index) const;
  inline ::SRMsgs::CmdVASStartAnaly_AnalyInfo* mutable_analyinfos(int index);
  inline ::SRMsgs::CmdVASStartAnaly_AnalyInfo* add_analyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStartAnaly_AnalyInfo >&
      analyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStartAnaly_AnalyInfo >*
      mutable_analyinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASStartAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStartAnaly_AnalyInfo > analyinfos_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASStartAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASStopAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdVASStopAnaly_AnalyInfo();
  virtual ~CmdVASStopAnaly_AnalyInfo();

  CmdVASStopAnaly_AnalyInfo(const CmdVASStopAnaly_AnalyInfo& from);

  inline CmdVASStopAnaly_AnalyInfo& operator=(const CmdVASStopAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASStopAnaly_AnalyInfo& default_instance();

  void Swap(CmdVASStopAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdVASStopAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASStopAnaly_AnalyInfo& from);
  void MergeFrom(const CmdVASStopAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelid = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASStopAnaly.AnalyInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASStopAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASStopAnaly : public ::google::protobuf::Message {
 public:
  CmdVASStopAnaly();
  virtual ~CmdVASStopAnaly();

  CmdVASStopAnaly(const CmdVASStopAnaly& from);

  inline CmdVASStopAnaly& operator=(const CmdVASStopAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASStopAnaly& default_instance();

  void Swap(CmdVASStopAnaly* other);

  // implements Message ----------------------------------------------

  CmdVASStopAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASStopAnaly& from);
  void MergeFrom(const CmdVASStopAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdVASStopAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
  inline int analyinfos_size() const;
  inline void clear_analyinfos();
  static const int kAnalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdVASStopAnaly_AnalyInfo& analyinfos(int index) const;
  inline ::SRMsgs::CmdVASStopAnaly_AnalyInfo* mutable_analyinfos(int index);
  inline ::SRMsgs::CmdVASStopAnaly_AnalyInfo* add_analyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStopAnaly_AnalyInfo >&
      analyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStopAnaly_AnalyInfo >*
      mutable_analyinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASStopAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStopAnaly_AnalyInfo > analyinfos_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASStopAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASUpdateAnaly_AnalyInfo : public ::google::protobuf::Message {
 public:
  CmdVASUpdateAnaly_AnalyInfo();
  virtual ~CmdVASUpdateAnaly_AnalyInfo();

  CmdVASUpdateAnaly_AnalyInfo(const CmdVASUpdateAnaly_AnalyInfo& from);

  inline CmdVASUpdateAnaly_AnalyInfo& operator=(const CmdVASUpdateAnaly_AnalyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASUpdateAnaly_AnalyInfo& default_instance();

  void Swap(CmdVASUpdateAnaly_AnalyInfo* other);

  // implements Message ----------------------------------------------

  CmdVASUpdateAnaly_AnalyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASUpdateAnaly_AnalyInfo& from);
  void MergeFrom(const CmdVASUpdateAnaly_AnalyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelid = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // repeated uint32 newuserids = 5;
  inline int newuserids_size() const;
  inline void clear_newuserids();
  static const int kNewuseridsFieldNumber = 5;
  inline ::google::protobuf::uint32 newuserids(int index) const;
  inline void set_newuserids(int index, ::google::protobuf::uint32 value);
  inline void add_newuserids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      newuserids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_newuserids();

  // optional bool isdispmnum = 6;
  inline bool has_isdispmnum() const;
  inline void clear_isdispmnum();
  static const int kIsdispmnumFieldNumber = 6;
  inline bool isdispmnum() const;
  inline void set_isdispmnum(bool value);

  // optional bool isdispmname = 7;
  inline bool has_isdispmname() const;
  inline void clear_isdispmname();
  static const int kIsdispmnameFieldNumber = 7;
  inline bool isdispmname() const;
  inline void set_isdispmname(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();
  inline void set_has_isdispmnum();
  inline void clear_has_isdispmnum();
  inline void set_has_isdispmname();
  inline void clear_has_isdispmname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > newuserids_;
  bool isdispmnum_;
  bool isdispmname_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASUpdateAnaly_AnalyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASUpdateAnaly : public ::google::protobuf::Message {
 public:
  CmdVASUpdateAnaly();
  virtual ~CmdVASUpdateAnaly();

  CmdVASUpdateAnaly(const CmdVASUpdateAnaly& from);

  inline CmdVASUpdateAnaly& operator=(const CmdVASUpdateAnaly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASUpdateAnaly& default_instance();

  void Swap(CmdVASUpdateAnaly* other);

  // implements Message ----------------------------------------------

  CmdVASUpdateAnaly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASUpdateAnaly& from);
  void MergeFrom(const CmdVASUpdateAnaly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdVASUpdateAnaly_AnalyInfo AnalyInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
  inline int analyinfos_size() const;
  inline void clear_analyinfos();
  static const int kAnalyinfosFieldNumber = 4;
  inline const ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo& analyinfos(int index) const;
  inline ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo* mutable_analyinfos(int index);
  inline ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo* add_analyinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo >&
      analyinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo >*
      mutable_analyinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASUpdateAnaly)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo > analyinfos_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASUpdateAnaly* default_instance_;
};
// -------------------------------------------------------------------

class CmdVASReOpenNetMPMediaPort : public ::google::protobuf::Message {
 public:
  CmdVASReOpenNetMPMediaPort();
  virtual ~CmdVASReOpenNetMPMediaPort();

  CmdVASReOpenNetMPMediaPort(const CmdVASReOpenNetMPMediaPort& from);

  inline CmdVASReOpenNetMPMediaPort& operator=(const CmdVASReOpenNetMPMediaPort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdVASReOpenNetMPMediaPort& default_instance();

  void Swap(CmdVASReOpenNetMPMediaPort* other);

  // implements Message ----------------------------------------------

  CmdVASReOpenNetMPMediaPort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdVASReOpenNetMPMediaPort& from);
  void MergeFrom(const CmdVASReOpenNetMPMediaPort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string netmpip = 1;
  inline bool has_netmpip() const;
  inline void clear_netmpip();
  static const int kNetmpipFieldNumber = 1;
  inline const ::std::string& netmpip() const;
  inline void set_netmpip(const ::std::string& value);
  inline void set_netmpip(const char* value);
  inline void set_netmpip(const char* value, size_t size);
  inline ::std::string* mutable_netmpip();
  inline ::std::string* release_netmpip();
  inline void set_allocated_netmpip(::std::string* netmpip);

  // optional uint32 audiodatarecvport = 2;
  inline bool has_audiodatarecvport() const;
  inline void clear_audiodatarecvport();
  static const int kAudiodatarecvportFieldNumber = 2;
  inline ::google::protobuf::uint32 audiodatarecvport() const;
  inline void set_audiodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 audioctrlrecvport = 3;
  inline bool has_audioctrlrecvport() const;
  inline void clear_audioctrlrecvport();
  static const int kAudioctrlrecvportFieldNumber = 3;
  inline ::google::protobuf::uint32 audioctrlrecvport() const;
  inline void set_audioctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 videodatarecvport = 4;
  inline bool has_videodatarecvport() const;
  inline void clear_videodatarecvport();
  static const int kVideodatarecvportFieldNumber = 4;
  inline ::google::protobuf::uint32 videodatarecvport() const;
  inline void set_videodatarecvport(::google::protobuf::uint32 value);

  // optional uint32 videoctrlrecvport = 5;
  inline bool has_videoctrlrecvport() const;
  inline void clear_videoctrlrecvport();
  static const int kVideoctrlrecvportFieldNumber = 5;
  inline ::google::protobuf::uint32 videoctrlrecvport() const;
  inline void set_videoctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video2datarecvport = 6;
  inline bool has_video2datarecvport() const;
  inline void clear_video2datarecvport();
  static const int kVideo2DatarecvportFieldNumber = 6;
  inline ::google::protobuf::uint32 video2datarecvport() const;
  inline void set_video2datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video2ctrlrecvport = 7;
  inline bool has_video2ctrlrecvport() const;
  inline void clear_video2ctrlrecvport();
  static const int kVideo2CtrlrecvportFieldNumber = 7;
  inline ::google::protobuf::uint32 video2ctrlrecvport() const;
  inline void set_video2ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 video3datarecvport = 8;
  inline bool has_video3datarecvport() const;
  inline void clear_video3datarecvport();
  static const int kVideo3DatarecvportFieldNumber = 8;
  inline ::google::protobuf::uint32 video3datarecvport() const;
  inline void set_video3datarecvport(::google::protobuf::uint32 value);

  // optional uint32 video3ctrlrecvport = 9;
  inline bool has_video3ctrlrecvport() const;
  inline void clear_video3ctrlrecvport();
  static const int kVideo3CtrlrecvportFieldNumber = 9;
  inline ::google::protobuf::uint32 video3ctrlrecvport() const;
  inline void set_video3ctrlrecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopdatarecvport = 10;
  inline bool has_desktopdatarecvport() const;
  inline void clear_desktopdatarecvport();
  static const int kDesktopdatarecvportFieldNumber = 10;
  inline ::google::protobuf::uint32 desktopdatarecvport() const;
  inline void set_desktopdatarecvport(::google::protobuf::uint32 value);

  // optional uint32 desktopctrlrecvport = 11;
  inline bool has_desktopctrlrecvport() const;
  inline void clear_desktopctrlrecvport();
  static const int kDesktopctrlrecvportFieldNumber = 11;
  inline ::google::protobuf::uint32 desktopctrlrecvport() const;
  inline void set_desktopctrlrecvport(::google::protobuf::uint32 value);

  // optional uint64 confid = 12;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 12;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 13;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 13;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 14;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 14;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 15;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 15;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdVASReOpenNetMPMediaPort)
 private:
  inline void set_has_netmpip();
  inline void clear_has_netmpip();
  inline void set_has_audiodatarecvport();
  inline void clear_has_audiodatarecvport();
  inline void set_has_audioctrlrecvport();
  inline void clear_has_audioctrlrecvport();
  inline void set_has_videodatarecvport();
  inline void clear_has_videodatarecvport();
  inline void set_has_videoctrlrecvport();
  inline void clear_has_videoctrlrecvport();
  inline void set_has_video2datarecvport();
  inline void clear_has_video2datarecvport();
  inline void set_has_video2ctrlrecvport();
  inline void clear_has_video2ctrlrecvport();
  inline void set_has_video3datarecvport();
  inline void clear_has_video3datarecvport();
  inline void set_has_video3ctrlrecvport();
  inline void clear_has_video3ctrlrecvport();
  inline void set_has_desktopdatarecvport();
  inline void clear_has_desktopdatarecvport();
  inline void set_has_desktopctrlrecvport();
  inline void clear_has_desktopctrlrecvport();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* netmpip_;
  ::google::protobuf::uint32 audiodatarecvport_;
  ::google::protobuf::uint32 audioctrlrecvport_;
  ::google::protobuf::uint32 videodatarecvport_;
  ::google::protobuf::uint32 videoctrlrecvport_;
  ::google::protobuf::uint32 video2datarecvport_;
  ::google::protobuf::uint32 video2ctrlrecvport_;
  ::google::protobuf::uint32 video3datarecvport_;
  ::google::protobuf::uint32 video3ctrlrecvport_;
  ::google::protobuf::uint32 desktopdatarecvport_;
  ::google::protobuf::uint32 desktopctrlrecvport_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdVASReOpenNetMPMediaPort* default_instance_;
};
// -------------------------------------------------------------------

class IndMCHeartBeatToVAS : public ::google::protobuf::Message {
 public:
  IndMCHeartBeatToVAS();
  virtual ~IndMCHeartBeatToVAS();

  IndMCHeartBeatToVAS(const IndMCHeartBeatToVAS& from);

  inline IndMCHeartBeatToVAS& operator=(const IndMCHeartBeatToVAS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCHeartBeatToVAS& default_instance();

  void Swap(IndMCHeartBeatToVAS* other);

  // implements Message ----------------------------------------------

  IndMCHeartBeatToVAS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCHeartBeatToVAS& from);
  void MergeFrom(const IndMCHeartBeatToVAS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 2;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 2;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCHeartBeatToVAS)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndMCHeartBeatToVAS* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToVAS_ScreensInMPI : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToVAS_ScreensInMPI();
  virtual ~IndConfAllMPIInfoToVAS_ScreensInMPI();

  IndConfAllMPIInfoToVAS_ScreensInMPI(const IndConfAllMPIInfoToVAS_ScreensInMPI& from);

  inline IndConfAllMPIInfoToVAS_ScreensInMPI& operator=(const IndConfAllMPIInfoToVAS_ScreensInMPI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToVAS_ScreensInMPI& default_instance();

  void Swap(IndConfAllMPIInfoToVAS_ScreensInMPI* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToVAS_ScreensInMPI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToVAS_ScreensInMPI& from);
  void MergeFrom(const IndConfAllMPIInfoToVAS_ScreensInMPI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 screenid = 1;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 1;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 2;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 2;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
 private:
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToVAS_ScreensInMPI* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToVAS_MPIsInConf : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToVAS_MPIsInConf();
  virtual ~IndConfAllMPIInfoToVAS_MPIsInConf();

  IndConfAllMPIInfoToVAS_MPIsInConf(const IndConfAllMPIInfoToVAS_MPIsInConf& from);

  inline IndConfAllMPIInfoToVAS_MPIsInConf& operator=(const IndConfAllMPIInfoToVAS_MPIsInConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToVAS_MPIsInConf& default_instance();

  void Swap(IndConfAllMPIInfoToVAS_MPIsInConf* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToVAS_MPIsInConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToVAS_MPIsInConf& from);
  void MergeFrom(const IndConfAllMPIInfoToVAS_MPIsInConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mpichannelid = 1;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
  inline int screens_size() const;
  inline void clear_screens();
  static const int kScreensFieldNumber = 2;
  inline const ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI& screens(int index) const;
  inline ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI* mutable_screens(int index);
  inline ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI* add_screens();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI >&
      screens() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI >*
      mutable_screens();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
 private:
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI > screens_;
  ::google::protobuf::uint32 mpichannelid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToVAS_MPIsInConf* default_instance_;
};
// -------------------------------------------------------------------

class IndConfAllMPIInfoToVAS : public ::google::protobuf::Message {
 public:
  IndConfAllMPIInfoToVAS();
  virtual ~IndConfAllMPIInfoToVAS();

  IndConfAllMPIInfoToVAS(const IndConfAllMPIInfoToVAS& from);

  inline IndConfAllMPIInfoToVAS& operator=(const IndConfAllMPIInfoToVAS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndConfAllMPIInfoToVAS& default_instance();

  void Swap(IndConfAllMPIInfoToVAS* other);

  // implements Message ----------------------------------------------

  IndConfAllMPIInfoToVAS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndConfAllMPIInfoToVAS& from);
  void MergeFrom(const IndConfAllMPIInfoToVAS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndConfAllMPIInfoToVAS_ScreensInMPI ScreensInMPI;
  typedef IndConfAllMPIInfoToVAS_MPIsInConf MPIsInConf;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
  inline int mpis_size() const;
  inline void clear_mpis();
  static const int kMpisFieldNumber = 4;
  inline const ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf& mpis(int index) const;
  inline ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf* mutable_mpis(int index);
  inline ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf* add_mpis();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf >&
      mpis() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf >*
      mutable_mpis();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndConfAllMPIInfoToVAS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf > mpis_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndConfAllMPIInfoToVAS* default_instance_;
};
// -------------------------------------------------------------------

class IndMPIInfoToVAS : public ::google::protobuf::Message {
 public:
  IndMPIInfoToVAS();
  virtual ~IndMPIInfoToVAS();

  IndMPIInfoToVAS(const IndMPIInfoToVAS& from);

  inline IndMPIInfoToVAS& operator=(const IndMPIInfoToVAS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMPIInfoToVAS& default_instance();

  void Swap(IndMPIInfoToVAS* other);

  // implements Message ----------------------------------------------

  IndMPIInfoToVAS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMPIInfoToVAS& from);
  void MergeFrom(const IndMPIInfoToVAS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mpichannelid = 2;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 2;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // optional uint32 vasid = 4;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 4;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMPIInfoToVAS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();
  inline void set_has_addordel();
  inline void clear_has_addordel();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mpichannelid_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::uint32 vasid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndMPIInfoToVAS* default_instance_;
};
// -------------------------------------------------------------------

class IndScreenInfoToVAS : public ::google::protobuf::Message {
 public:
  IndScreenInfoToVAS();
  virtual ~IndScreenInfoToVAS();

  IndScreenInfoToVAS(const IndScreenInfoToVAS& from);

  inline IndScreenInfoToVAS& operator=(const IndScreenInfoToVAS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndScreenInfoToVAS& default_instance();

  void Swap(IndScreenInfoToVAS* other);

  // implements Message ----------------------------------------------

  IndScreenInfoToVAS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndScreenInfoToVAS& from);
  void MergeFrom(const IndScreenInfoToVAS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mpichannelid = 2;
  inline bool has_mpichannelid() const;
  inline void clear_mpichannelid();
  static const int kMpichannelidFieldNumber = 2;
  inline ::google::protobuf::uint32 mpichannelid() const;
  inline void set_mpichannelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 3;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 3;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 screentype = 4;
  inline bool has_screentype() const;
  inline void clear_screentype();
  static const int kScreentypeFieldNumber = 4;
  inline ::google::protobuf::uint32 screentype() const;
  inline void set_screentype(::google::protobuf::uint32 value);

  // optional uint32 addordel = 5;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 5;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // optional uint32 vasid = 6;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 6;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndScreenInfoToVAS)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mpichannelid();
  inline void clear_has_mpichannelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_screentype();
  inline void clear_has_screentype();
  inline void set_has_addordel();
  inline void clear_has_addordel();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mpichannelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 screentype_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::uint32 vasid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndScreenInfoToVAS* default_instance_;
};
// -------------------------------------------------------------------

class RspVASCreateConf : public ::google::protobuf::Message {
 public:
  RspVASCreateConf();
  virtual ~RspVASCreateConf();

  RspVASCreateConf(const RspVASCreateConf& from);

  inline RspVASCreateConf& operator=(const RspVASCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspVASCreateConf& default_instance();

  void Swap(RspVASCreateConf* other);

  // implements Message ----------------------------------------------

  RspVASCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspVASCreateConf& from);
  void MergeFrom(const RspVASCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 2;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 2;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 4;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 4;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 5;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 5;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 relatednetmpid = 6;
  inline bool has_relatednetmpid() const;
  inline void clear_relatednetmpid();
  static const int kRelatednetmpidFieldNumber = 6;
  inline ::google::protobuf::uint32 relatednetmpid() const;
  inline void set_relatednetmpid(::google::protobuf::uint32 value);

  // optional string failreason = 7;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 7;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // optional uint32 vaschantype = 9;
  inline bool has_vaschantype() const;
  inline void clear_vaschantype();
  static const int kVaschantypeFieldNumber = 9;
  inline ::google::protobuf::uint32 vaschantype() const;
  inline void set_vaschantype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspVASCreateConf)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_relatednetmpid();
  inline void clear_has_relatednetmpid();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_vaschantype();
  inline void clear_has_vaschantype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::std::string* failreason_;
  ::google::protobuf::uint32 relatednetmpid_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::uint32 vaschantype_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static RspVASCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class IndVASHeartBeatToMC : public ::google::protobuf::Message {
 public:
  IndVASHeartBeatToMC();
  virtual ~IndVASHeartBeatToMC();

  IndVASHeartBeatToMC(const IndVASHeartBeatToMC& from);

  inline IndVASHeartBeatToMC& operator=(const IndVASHeartBeatToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASHeartBeatToMC& default_instance();

  void Swap(IndVASHeartBeatToMC* other);

  // implements Message ----------------------------------------------

  IndVASHeartBeatToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASHeartBeatToMC& from);
  void MergeFrom(const IndVASHeartBeatToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 2;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 2;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASHeartBeatToMC)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndVASHeartBeatToMC* default_instance_;
};
// -------------------------------------------------------------------

class IndVASMatchResult_videoMatch : public ::google::protobuf::Message {
 public:
  IndVASMatchResult_videoMatch();
  virtual ~IndVASMatchResult_videoMatch();

  IndVASMatchResult_videoMatch(const IndVASMatchResult_videoMatch& from);

  inline IndVASMatchResult_videoMatch& operator=(const IndVASMatchResult_videoMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASMatchResult_videoMatch& default_instance();

  void Swap(IndVASMatchResult_videoMatch* other);

  // implements Message ----------------------------------------------

  IndVASMatchResult_videoMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASMatchResult_videoMatch& from);
  void MergeFrom(const IndVASMatchResult_videoMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional uint32 rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASMatchResult.videoMatch)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 rate_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndVASMatchResult_videoMatch* default_instance_;
};
// -------------------------------------------------------------------

class IndVASMatchResult_MatchResult : public ::google::protobuf::Message {
 public:
  IndVASMatchResult_MatchResult();
  virtual ~IndVASMatchResult_MatchResult();

  IndVASMatchResult_MatchResult(const IndVASMatchResult_MatchResult& from);

  inline IndVASMatchResult_MatchResult& operator=(const IndVASMatchResult_MatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASMatchResult_MatchResult& default_instance();

  void Swap(IndVASMatchResult_MatchResult* other);

  // implements Message ----------------------------------------------

  IndVASMatchResult_MatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASMatchResult_MatchResult& from);
  void MergeFrom(const IndVASMatchResult_MatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelid = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 1;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 3;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // optional uint32 srcmapid = 4;
  inline bool has_srcmapid() const;
  inline void clear_srcmapid();
  static const int kSrcmapidFieldNumber = 4;
  inline ::google::protobuf::uint32 srcmapid() const;
  inline void set_srcmapid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
  inline int videomatchs_size() const;
  inline void clear_videomatchs();
  static const int kVideoMatchsFieldNumber = 5;
  inline const ::SRMsgs::IndVASMatchResult_videoMatch& videomatchs(int index) const;
  inline ::SRMsgs::IndVASMatchResult_videoMatch* mutable_videomatchs(int index);
  inline ::SRMsgs::IndVASMatchResult_videoMatch* add_videomatchs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_videoMatch >&
      videomatchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_videoMatch >*
      mutable_videomatchs();

  // optional bool hasmismatch = 6;
  inline bool has_hasmismatch() const;
  inline void clear_hasmismatch();
  static const int kHasmismatchFieldNumber = 6;
  inline bool hasmismatch() const;
  inline void set_hasmismatch(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASMatchResult.MatchResult)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();
  inline void set_has_srcmapid();
  inline void clear_has_srcmapid();
  inline void set_has_hasmismatch();
  inline void clear_has_hasmismatch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 vaschannelid_;
  ::google::protobuf::uint32 srcmapid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_videoMatch > videomatchs_;
  bool hasmismatch_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndVASMatchResult_MatchResult* default_instance_;
};
// -------------------------------------------------------------------

class IndVASMatchResult : public ::google::protobuf::Message {
 public:
  IndVASMatchResult();
  virtual ~IndVASMatchResult();

  IndVASMatchResult(const IndVASMatchResult& from);

  inline IndVASMatchResult& operator=(const IndVASMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASMatchResult& default_instance();

  void Swap(IndVASMatchResult* other);

  // implements Message ----------------------------------------------

  IndVASMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASMatchResult& from);
  void MergeFrom(const IndVASMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndVASMatchResult_videoMatch videoMatch;
  typedef IndVASMatchResult_MatchResult MatchResult;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
  inline int matchresults_size() const;
  inline void clear_matchresults();
  static const int kMatchresultsFieldNumber = 4;
  inline const ::SRMsgs::IndVASMatchResult_MatchResult& matchresults(int index) const;
  inline ::SRMsgs::IndVASMatchResult_MatchResult* mutable_matchresults(int index);
  inline ::SRMsgs::IndVASMatchResult_MatchResult* add_matchresults();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_MatchResult >&
      matchresults() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_MatchResult >*
      mutable_matchresults();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASMatchResult)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_MatchResult > matchresults_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static IndVASMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCVASSeleteVideo_TermInfo : public ::google::protobuf::Message {
 public:
  CmdMCVASSeleteVideo_TermInfo();
  virtual ~CmdMCVASSeleteVideo_TermInfo();

  CmdMCVASSeleteVideo_TermInfo(const CmdMCVASSeleteVideo_TermInfo& from);

  inline CmdMCVASSeleteVideo_TermInfo& operator=(const CmdMCVASSeleteVideo_TermInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCVASSeleteVideo_TermInfo& default_instance();

  void Swap(CmdMCVASSeleteVideo_TermInfo* other);

  // implements Message ----------------------------------------------

  CmdMCVASSeleteVideo_TermInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCVASSeleteVideo_TermInfo& from);
  void MergeFrom(const CmdMCVASSeleteVideo_TermInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 terid = 1;
  inline bool has_terid() const;
  inline void clear_terid();
  static const int kTeridFieldNumber = 1;
  inline ::google::protobuf::uint32 terid() const;
  inline void set_terid(::google::protobuf::uint32 value);

  // optional uint32 screenid = 2;
  inline bool has_screenid() const;
  inline void clear_screenid();
  static const int kScreenidFieldNumber = 2;
  inline ::google::protobuf::uint32 screenid() const;
  inline void set_screenid(::google::protobuf::uint32 value);

  // optional uint32 videosize = 3;
  inline bool has_videosize() const;
  inline void clear_videosize();
  static const int kVideosizeFieldNumber = 3;
  inline ::google::protobuf::uint32 videosize() const;
  inline void set_videosize(::google::protobuf::uint32 value);

  // optional uint32 recvfps = 4;
  inline bool has_recvfps() const;
  inline void clear_recvfps();
  static const int kRecvfpsFieldNumber = 4;
  inline ::google::protobuf::uint32 recvfps() const;
  inline void set_recvfps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
 private:
  inline void set_has_terid();
  inline void clear_has_terid();
  inline void set_has_screenid();
  inline void clear_has_screenid();
  inline void set_has_videosize();
  inline void clear_has_videosize();
  inline void set_has_recvfps();
  inline void clear_has_recvfps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 terid_;
  ::google::protobuf::uint32 screenid_;
  ::google::protobuf::uint32 videosize_;
  ::google::protobuf::uint32 recvfps_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdMCVASSeleteVideo_TermInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdMCVASSeleteVideo : public ::google::protobuf::Message {
 public:
  CmdMCVASSeleteVideo();
  virtual ~CmdMCVASSeleteVideo();

  CmdMCVASSeleteVideo(const CmdMCVASSeleteVideo& from);

  inline CmdMCVASSeleteVideo& operator=(const CmdMCVASSeleteVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMCVASSeleteVideo& default_instance();

  void Swap(CmdMCVASSeleteVideo* other);

  // implements Message ----------------------------------------------

  CmdMCVASSeleteVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdMCVASSeleteVideo& from);
  void MergeFrom(const CmdMCVASSeleteVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdMCVASSeleteVideo_TermInfo TermInfo;

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 mcid = 2;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 2;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 vasid = 3;
  inline bool has_vasid() const;
  inline void clear_vasid();
  static const int kVasidFieldNumber = 3;
  inline ::google::protobuf::uint32 vasid() const;
  inline void set_vasid(::google::protobuf::uint32 value);

  // optional uint32 vaschannelid = 4;
  inline bool has_vaschannelid() const;
  inline void clear_vaschannelid();
  static const int kVaschannelidFieldNumber = 4;
  inline ::google::protobuf::uint32 vaschannelid() const;
  inline void set_vaschannelid(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
  inline int seleteterinfo_size() const;
  inline void clear_seleteterinfo();
  static const int kSeleteterinfoFieldNumber = 5;
  inline const ::SRMsgs::CmdMCVASSeleteVideo_TermInfo& seleteterinfo(int index) const;
  inline ::SRMsgs::CmdMCVASSeleteVideo_TermInfo* mutable_seleteterinfo(int index);
  inline ::SRMsgs::CmdMCVASSeleteVideo_TermInfo* add_seleteterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCVASSeleteVideo_TermInfo >&
      seleteterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCVASSeleteVideo_TermInfo >*
      mutable_seleteterinfo();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdMCVASSeleteVideo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_vasid();
  inline void clear_has_vasid();
  inline void set_has_vaschannelid();
  inline void clear_has_vaschannelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 vasid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCVASSeleteVideo_TermInfo > seleteterinfo_;
  ::google::protobuf::uint32 vaschannelid_;
  friend void  protobuf_AddDesc_mc_5fvas_2eproto();
  friend void protobuf_AssignDesc_mc_5fvas_2eproto();
  friend void protobuf_ShutdownFile_mc_5fvas_2eproto();

  void InitAsDefaultInstance();
  static CmdMCVASSeleteVideo* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqVASCreateConf_NetMpAddr

// optional uint32 netmpid = 1;
inline bool ReqVASCreateConf_NetMpAddr::has_netmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_netmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpid)
  return netmpid_;
}
inline void ReqVASCreateConf_NetMpAddr::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpid)
}

// optional string netmpmediaip = 2;
inline bool ReqVASCreateConf_NetMpAddr::has_netmpmediaip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_netmpmediaip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_netmpmediaip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_netmpmediaip() {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_->clear();
  }
  clear_has_netmpmediaip();
}
inline const ::std::string& ReqVASCreateConf_NetMpAddr::netmpmediaip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
  return *netmpmediaip_;
}
inline void ReqVASCreateConf_NetMpAddr::set_netmpmediaip(const ::std::string& value) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
}
inline void ReqVASCreateConf_NetMpAddr::set_netmpmediaip(const char* value) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
}
inline void ReqVASCreateConf_NetMpAddr::set_netmpmediaip(const char* value, size_t size) {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  netmpmediaip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
}
inline ::std::string* ReqVASCreateConf_NetMpAddr::mutable_netmpmediaip() {
  set_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpmediaip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
  return netmpmediaip_;
}
inline ::std::string* ReqVASCreateConf_NetMpAddr::release_netmpmediaip() {
  clear_has_netmpmediaip();
  if (netmpmediaip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netmpmediaip_;
    netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqVASCreateConf_NetMpAddr::set_allocated_netmpmediaip(::std::string* netmpmediaip) {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpmediaip_;
  }
  if (netmpmediaip) {
    set_has_netmpmediaip();
    netmpmediaip_ = netmpmediaip;
  } else {
    clear_has_netmpmediaip();
    netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqVASCreateConf.NetMpAddr.netmpmediaip)
}

// optional uint32 audiodatarecvport = 3;
inline bool ReqVASCreateConf_NetMpAddr::has_audiodatarecvport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_audiodatarecvport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_audiodatarecvport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_audiodatarecvport() {
  audiodatarecvport_ = 0u;
  clear_has_audiodatarecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::audiodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.audiodatarecvport)
  return audiodatarecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_audiodatarecvport(::google::protobuf::uint32 value) {
  set_has_audiodatarecvport();
  audiodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.audiodatarecvport)
}

// optional uint32 audioctrlrecvport = 4;
inline bool ReqVASCreateConf_NetMpAddr::has_audioctrlrecvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_audioctrlrecvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_audioctrlrecvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_audioctrlrecvport() {
  audioctrlrecvport_ = 0u;
  clear_has_audioctrlrecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::audioctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.audioctrlrecvport)
  return audioctrlrecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_audioctrlrecvport(::google::protobuf::uint32 value) {
  set_has_audioctrlrecvport();
  audioctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.audioctrlrecvport)
}

// optional uint32 videodatarecvport = 5;
inline bool ReqVASCreateConf_NetMpAddr::has_videodatarecvport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_videodatarecvport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_videodatarecvport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_videodatarecvport() {
  videodatarecvport_ = 0u;
  clear_has_videodatarecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::videodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.videodatarecvport)
  return videodatarecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_videodatarecvport(::google::protobuf::uint32 value) {
  set_has_videodatarecvport();
  videodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.videodatarecvport)
}

// optional uint32 videoctrlrecvport = 6;
inline bool ReqVASCreateConf_NetMpAddr::has_videoctrlrecvport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_videoctrlrecvport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_videoctrlrecvport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_videoctrlrecvport() {
  videoctrlrecvport_ = 0u;
  clear_has_videoctrlrecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::videoctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.videoctrlrecvport)
  return videoctrlrecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_videoctrlrecvport(::google::protobuf::uint32 value) {
  set_has_videoctrlrecvport();
  videoctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.videoctrlrecvport)
}

// optional uint32 video2datarecvport = 7;
inline bool ReqVASCreateConf_NetMpAddr::has_video2datarecvport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_video2datarecvport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_video2datarecvport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_video2datarecvport() {
  video2datarecvport_ = 0u;
  clear_has_video2datarecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::video2datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.video2datarecvport)
  return video2datarecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_video2datarecvport(::google::protobuf::uint32 value) {
  set_has_video2datarecvport();
  video2datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.video2datarecvport)
}

// optional uint32 video2ctrlrecvport = 8;
inline bool ReqVASCreateConf_NetMpAddr::has_video2ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_video2ctrlrecvport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_video2ctrlrecvport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_video2ctrlrecvport() {
  video2ctrlrecvport_ = 0u;
  clear_has_video2ctrlrecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::video2ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.video2ctrlrecvport)
  return video2ctrlrecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_video2ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video2ctrlrecvport();
  video2ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.video2ctrlrecvport)
}

// optional uint32 video3datarecvport = 9;
inline bool ReqVASCreateConf_NetMpAddr::has_video3datarecvport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_video3datarecvport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_video3datarecvport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_video3datarecvport() {
  video3datarecvport_ = 0u;
  clear_has_video3datarecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::video3datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.video3datarecvport)
  return video3datarecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_video3datarecvport(::google::protobuf::uint32 value) {
  set_has_video3datarecvport();
  video3datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.video3datarecvport)
}

// optional uint32 video3ctrlrecvport = 10;
inline bool ReqVASCreateConf_NetMpAddr::has_video3ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_video3ctrlrecvport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_video3ctrlrecvport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_video3ctrlrecvport() {
  video3ctrlrecvport_ = 0u;
  clear_has_video3ctrlrecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::video3ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.video3ctrlrecvport)
  return video3ctrlrecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_video3ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video3ctrlrecvport();
  video3ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.video3ctrlrecvport)
}

// optional uint32 desktopdatarecvport = 11;
inline bool ReqVASCreateConf_NetMpAddr::has_desktopdatarecvport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_desktopdatarecvport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_desktopdatarecvport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_desktopdatarecvport() {
  desktopdatarecvport_ = 0u;
  clear_has_desktopdatarecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::desktopdatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.desktopdatarecvport)
  return desktopdatarecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_desktopdatarecvport(::google::protobuf::uint32 value) {
  set_has_desktopdatarecvport();
  desktopdatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.desktopdatarecvport)
}

// optional uint32 desktopctrlrecvport = 12;
inline bool ReqVASCreateConf_NetMpAddr::has_desktopctrlrecvport() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqVASCreateConf_NetMpAddr::set_has_desktopctrlrecvport() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_has_desktopctrlrecvport() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqVASCreateConf_NetMpAddr::clear_desktopctrlrecvport() {
  desktopctrlrecvport_ = 0u;
  clear_has_desktopctrlrecvport();
}
inline ::google::protobuf::uint32 ReqVASCreateConf_NetMpAddr::desktopctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.NetMpAddr.desktopctrlrecvport)
  return desktopctrlrecvport_;
}
inline void ReqVASCreateConf_NetMpAddr::set_desktopctrlrecvport(::google::protobuf::uint32 value) {
  set_has_desktopctrlrecvport();
  desktopctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.NetMpAddr.desktopctrlrecvport)
}

// -------------------------------------------------------------------

// ReqVASCreateConf

// optional uint64 confid = 1;
inline bool ReqVASCreateConf::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqVASCreateConf::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqVASCreateConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqVASCreateConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqVASCreateConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.confid)
  return confid_;
}
inline void ReqVASCreateConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.confid)
}

// optional uint32 mcid = 2;
inline bool ReqVASCreateConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqVASCreateConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqVASCreateConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqVASCreateConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqVASCreateConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.mcid)
  return mcid_;
}
inline void ReqVASCreateConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.mcid)
}

// optional uint32 vasid = 3;
inline bool ReqVASCreateConf::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqVASCreateConf::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqVASCreateConf::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqVASCreateConf::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 ReqVASCreateConf::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.vasid)
  return vasid_;
}
inline void ReqVASCreateConf::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.vasid)
}

// optional uint32 vaschannelid = 4;
inline bool ReqVASCreateConf::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqVASCreateConf::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqVASCreateConf::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqVASCreateConf::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 ReqVASCreateConf::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.vaschannelid)
  return vaschannelid_;
}
inline void ReqVASCreateConf::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.vaschannelid)
}

// optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
inline bool ReqVASCreateConf::has_netmpaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqVASCreateConf::set_has_netmpaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqVASCreateConf::clear_has_netmpaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqVASCreateConf::clear_netmpaddr() {
  if (netmpaddr_ != NULL) netmpaddr_->::SRMsgs::ReqVASCreateConf_NetMpAddr::Clear();
  clear_has_netmpaddr();
}
inline const ::SRMsgs::ReqVASCreateConf_NetMpAddr& ReqVASCreateConf::netmpaddr() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.netmpaddr)
  return netmpaddr_ != NULL ? *netmpaddr_ : *default_instance_->netmpaddr_;
}
inline ::SRMsgs::ReqVASCreateConf_NetMpAddr* ReqVASCreateConf::mutable_netmpaddr() {
  set_has_netmpaddr();
  if (netmpaddr_ == NULL) netmpaddr_ = new ::SRMsgs::ReqVASCreateConf_NetMpAddr;
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqVASCreateConf.netmpaddr)
  return netmpaddr_;
}
inline ::SRMsgs::ReqVASCreateConf_NetMpAddr* ReqVASCreateConf::release_netmpaddr() {
  clear_has_netmpaddr();
  ::SRMsgs::ReqVASCreateConf_NetMpAddr* temp = netmpaddr_;
  netmpaddr_ = NULL;
  return temp;
}
inline void ReqVASCreateConf::set_allocated_netmpaddr(::SRMsgs::ReqVASCreateConf_NetMpAddr* netmpaddr) {
  delete netmpaddr_;
  netmpaddr_ = netmpaddr;
  if (netmpaddr) {
    set_has_netmpaddr();
  } else {
    clear_has_netmpaddr();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqVASCreateConf.netmpaddr)
}

// optional uint32 vaschantype = 6;
inline bool ReqVASCreateConf::has_vaschantype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqVASCreateConf::set_has_vaschantype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqVASCreateConf::clear_has_vaschantype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqVASCreateConf::clear_vaschantype() {
  vaschantype_ = 0u;
  clear_has_vaschantype();
}
inline ::google::protobuf::uint32 ReqVASCreateConf::vaschantype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.vaschantype)
  return vaschantype_;
}
inline void ReqVASCreateConf::set_vaschantype(::google::protobuf::uint32 value) {
  set_has_vaschantype();
  vaschantype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.vaschantype)
}

// optional uint32 videosize = 7;
inline bool ReqVASCreateConf::has_videosize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqVASCreateConf::set_has_videosize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqVASCreateConf::clear_has_videosize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqVASCreateConf::clear_videosize() {
  videosize_ = 0u;
  clear_has_videosize();
}
inline ::google::protobuf::uint32 ReqVASCreateConf::videosize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqVASCreateConf.videosize)
  return videosize_;
}
inline void ReqVASCreateConf::set_videosize(::google::protobuf::uint32 value) {
  set_has_videosize();
  videosize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqVASCreateConf.videosize)
}

// -------------------------------------------------------------------

// CmdVASDestroyConf

// optional uint64 confid = 1;
inline bool CmdVASDestroyConf::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASDestroyConf::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASDestroyConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASDestroyConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdVASDestroyConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASDestroyConf.confid)
  return confid_;
}
inline void CmdVASDestroyConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASDestroyConf.confid)
}

// optional uint32 mcid = 2;
inline bool CmdVASDestroyConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASDestroyConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASDestroyConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASDestroyConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdVASDestroyConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASDestroyConf.mcid)
  return mcid_;
}
inline void CmdVASDestroyConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASDestroyConf.mcid)
}

// optional uint32 vasid = 3;
inline bool CmdVASDestroyConf::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASDestroyConf::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASDestroyConf::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASDestroyConf::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdVASDestroyConf::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASDestroyConf.vasid)
  return vasid_;
}
inline void CmdVASDestroyConf::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASDestroyConf.vasid)
}

// optional uint32 vaschannelid = 4;
inline bool CmdVASDestroyConf::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdVASDestroyConf::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdVASDestroyConf::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdVASDestroyConf::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdVASDestroyConf::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASDestroyConf.vaschannelid)
  return vaschannelid_;
}
inline void CmdVASDestroyConf::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASDestroyConf.vaschannelid)
}

// optional string reason = 5;
inline bool CmdVASDestroyConf::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdVASDestroyConf::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdVASDestroyConf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdVASDestroyConf::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& CmdVASDestroyConf::reason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASDestroyConf.reason)
  return *reason_;
}
inline void CmdVASDestroyConf::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASDestroyConf.reason)
}
inline void CmdVASDestroyConf::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdVASDestroyConf.reason)
}
inline void CmdVASDestroyConf::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdVASDestroyConf.reason)
}
inline ::std::string* CmdVASDestroyConf::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdVASDestroyConf.reason)
  return reason_;
}
inline ::std::string* CmdVASDestroyConf::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdVASDestroyConf::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdVASDestroyConf.reason)
}

// -------------------------------------------------------------------

// CmdVASStartAnaly_AnalyInfo

// optional uint32 channelid = 1;
inline bool CmdVASStartAnaly_AnalyInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly_AnalyInfo::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.channelid)
  return channelid_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.channelid)
}

// optional uint32 screenid = 2;
inline bool CmdVASStartAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool CmdVASStartAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool CmdVASStartAnaly_AnalyInfo::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly_AnalyInfo::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.srcmapid)
  return srcmapid_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.srcmapid)
}

// repeated uint32 userids = 5;
inline int CmdVASStartAnaly_AnalyInfo::userids_size() const {
  return userids_.size();
}
inline void CmdVASStartAnaly_AnalyInfo::clear_userids() {
  userids_.Clear();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly_AnalyInfo::userids(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.userids)
  return userids_.Get(index);
}
inline void CmdVASStartAnaly_AnalyInfo::set_userids(int index, ::google::protobuf::uint32 value) {
  userids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.userids)
}
inline void CmdVASStartAnaly_AnalyInfo::add_userids(::google::protobuf::uint32 value) {
  userids_.Add(value);
  // @@protoc_insertion_point(field_add:SRMsgs.CmdVASStartAnaly.AnalyInfo.userids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CmdVASStartAnaly_AnalyInfo::userids() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdVASStartAnaly.AnalyInfo.userids)
  return userids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CmdVASStartAnaly_AnalyInfo::mutable_userids() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdVASStartAnaly.AnalyInfo.userids)
  return &userids_;
}

// optional bool isdispmnum = 6;
inline bool CmdVASStartAnaly_AnalyInfo::has_isdispmnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_isdispmnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_isdispmnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_isdispmnum() {
  isdispmnum_ = false;
  clear_has_isdispmnum();
}
inline bool CmdVASStartAnaly_AnalyInfo::isdispmnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.isdispmnum)
  return isdispmnum_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_isdispmnum(bool value) {
  set_has_isdispmnum();
  isdispmnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.isdispmnum)
}

// optional bool isdispmname = 7;
inline bool CmdVASStartAnaly_AnalyInfo::has_isdispmname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdVASStartAnaly_AnalyInfo::set_has_isdispmname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_has_isdispmname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdVASStartAnaly_AnalyInfo::clear_isdispmname() {
  isdispmname_ = false;
  clear_has_isdispmname();
}
inline bool CmdVASStartAnaly_AnalyInfo::isdispmname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.AnalyInfo.isdispmname)
  return isdispmname_;
}
inline void CmdVASStartAnaly_AnalyInfo::set_isdispmname(bool value) {
  set_has_isdispmname();
  isdispmname_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.AnalyInfo.isdispmname)
}

// -------------------------------------------------------------------

// CmdVASStartAnaly

// optional uint64 confid = 1;
inline bool CmdVASStartAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASStartAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASStartAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASStartAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdVASStartAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.confid)
  return confid_;
}
inline void CmdVASStartAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.confid)
}

// optional uint32 mcid = 2;
inline bool CmdVASStartAnaly::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASStartAnaly::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASStartAnaly::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASStartAnaly::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.mcid)
  return mcid_;
}
inline void CmdVASStartAnaly::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.mcid)
}

// optional uint32 vasid = 3;
inline bool CmdVASStartAnaly::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASStartAnaly::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASStartAnaly::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASStartAnaly::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdVASStartAnaly::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.vasid)
  return vasid_;
}
inline void CmdVASStartAnaly::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStartAnaly.vasid)
}

// repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
inline int CmdVASStartAnaly::analyinfos_size() const {
  return analyinfos_.size();
}
inline void CmdVASStartAnaly::clear_analyinfos() {
  analyinfos_.Clear();
}
inline const ::SRMsgs::CmdVASStartAnaly_AnalyInfo& CmdVASStartAnaly::analyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStartAnaly.analyinfos)
  return analyinfos_.Get(index);
}
inline ::SRMsgs::CmdVASStartAnaly_AnalyInfo* CmdVASStartAnaly::mutable_analyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdVASStartAnaly.analyinfos)
  return analyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdVASStartAnaly_AnalyInfo* CmdVASStartAnaly::add_analyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdVASStartAnaly.analyinfos)
  return analyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStartAnaly_AnalyInfo >&
CmdVASStartAnaly::analyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdVASStartAnaly.analyinfos)
  return analyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStartAnaly_AnalyInfo >*
CmdVASStartAnaly::mutable_analyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdVASStartAnaly.analyinfos)
  return &analyinfos_;
}

// -------------------------------------------------------------------

// CmdVASStopAnaly_AnalyInfo

// optional uint32 channelid = 1;
inline bool CmdVASStopAnaly_AnalyInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASStopAnaly_AnalyInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly_AnalyInfo::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.AnalyInfo.channelid)
  return channelid_;
}
inline void CmdVASStopAnaly_AnalyInfo::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.AnalyInfo.channelid)
}

// optional uint32 screenid = 2;
inline bool CmdVASStopAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASStopAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdVASStopAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool CmdVASStopAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASStopAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdVASStopAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.AnalyInfo.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool CmdVASStopAnaly_AnalyInfo::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdVASStopAnaly_AnalyInfo::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdVASStopAnaly_AnalyInfo::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly_AnalyInfo::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.AnalyInfo.srcmapid)
  return srcmapid_;
}
inline void CmdVASStopAnaly_AnalyInfo::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.AnalyInfo.srcmapid)
}

// -------------------------------------------------------------------

// CmdVASStopAnaly

// optional uint64 confid = 1;
inline bool CmdVASStopAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASStopAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASStopAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASStopAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdVASStopAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.confid)
  return confid_;
}
inline void CmdVASStopAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.confid)
}

// optional uint32 mcid = 2;
inline bool CmdVASStopAnaly::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASStopAnaly::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASStopAnaly::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASStopAnaly::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.mcid)
  return mcid_;
}
inline void CmdVASStopAnaly::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.mcid)
}

// optional uint32 vasid = 3;
inline bool CmdVASStopAnaly::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASStopAnaly::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASStopAnaly::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASStopAnaly::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdVASStopAnaly::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.vasid)
  return vasid_;
}
inline void CmdVASStopAnaly::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASStopAnaly.vasid)
}

// repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
inline int CmdVASStopAnaly::analyinfos_size() const {
  return analyinfos_.size();
}
inline void CmdVASStopAnaly::clear_analyinfos() {
  analyinfos_.Clear();
}
inline const ::SRMsgs::CmdVASStopAnaly_AnalyInfo& CmdVASStopAnaly::analyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASStopAnaly.analyinfos)
  return analyinfos_.Get(index);
}
inline ::SRMsgs::CmdVASStopAnaly_AnalyInfo* CmdVASStopAnaly::mutable_analyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdVASStopAnaly.analyinfos)
  return analyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdVASStopAnaly_AnalyInfo* CmdVASStopAnaly::add_analyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdVASStopAnaly.analyinfos)
  return analyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStopAnaly_AnalyInfo >&
CmdVASStopAnaly::analyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdVASStopAnaly.analyinfos)
  return analyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASStopAnaly_AnalyInfo >*
CmdVASStopAnaly::mutable_analyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdVASStopAnaly.analyinfos)
  return &analyinfos_;
}

// -------------------------------------------------------------------

// CmdVASUpdateAnaly_AnalyInfo

// optional uint32 channelid = 1;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly_AnalyInfo::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.channelid)
  return channelid_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.channelid)
}

// optional uint32 screenid = 2;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly_AnalyInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.screenid)
  return screenid_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly_AnalyInfo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.vaschannelid)
  return vaschannelid_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly_AnalyInfo::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.srcmapid)
  return srcmapid_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.srcmapid)
}

// repeated uint32 newuserids = 5;
inline int CmdVASUpdateAnaly_AnalyInfo::newuserids_size() const {
  return newuserids_.size();
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_newuserids() {
  newuserids_.Clear();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly_AnalyInfo::newuserids(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.newuserids)
  return newuserids_.Get(index);
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_newuserids(int index, ::google::protobuf::uint32 value) {
  newuserids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.newuserids)
}
inline void CmdVASUpdateAnaly_AnalyInfo::add_newuserids(::google::protobuf::uint32 value) {
  newuserids_.Add(value);
  // @@protoc_insertion_point(field_add:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.newuserids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CmdVASUpdateAnaly_AnalyInfo::newuserids() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.newuserids)
  return newuserids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CmdVASUpdateAnaly_AnalyInfo::mutable_newuserids() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.newuserids)
  return &newuserids_;
}

// optional bool isdispmnum = 6;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_isdispmnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_isdispmnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_isdispmnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_isdispmnum() {
  isdispmnum_ = false;
  clear_has_isdispmnum();
}
inline bool CmdVASUpdateAnaly_AnalyInfo::isdispmnum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.isdispmnum)
  return isdispmnum_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_isdispmnum(bool value) {
  set_has_isdispmnum();
  isdispmnum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.isdispmnum)
}

// optional bool isdispmname = 7;
inline bool CmdVASUpdateAnaly_AnalyInfo::has_isdispmname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_has_isdispmname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_has_isdispmname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdVASUpdateAnaly_AnalyInfo::clear_isdispmname() {
  isdispmname_ = false;
  clear_has_isdispmname();
}
inline bool CmdVASUpdateAnaly_AnalyInfo::isdispmname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.isdispmname)
  return isdispmname_;
}
inline void CmdVASUpdateAnaly_AnalyInfo::set_isdispmname(bool value) {
  set_has_isdispmname();
  isdispmname_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.AnalyInfo.isdispmname)
}

// -------------------------------------------------------------------

// CmdVASUpdateAnaly

// optional uint64 confid = 1;
inline bool CmdVASUpdateAnaly::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASUpdateAnaly::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASUpdateAnaly::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASUpdateAnaly::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdVASUpdateAnaly::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.confid)
  return confid_;
}
inline void CmdVASUpdateAnaly::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.confid)
}

// optional uint32 mcid = 2;
inline bool CmdVASUpdateAnaly::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASUpdateAnaly::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASUpdateAnaly::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASUpdateAnaly::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.mcid)
  return mcid_;
}
inline void CmdVASUpdateAnaly::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.mcid)
}

// optional uint32 vasid = 3;
inline bool CmdVASUpdateAnaly::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASUpdateAnaly::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASUpdateAnaly::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASUpdateAnaly::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdVASUpdateAnaly::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.vasid)
  return vasid_;
}
inline void CmdVASUpdateAnaly::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASUpdateAnaly.vasid)
}

// repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
inline int CmdVASUpdateAnaly::analyinfos_size() const {
  return analyinfos_.size();
}
inline void CmdVASUpdateAnaly::clear_analyinfos() {
  analyinfos_.Clear();
}
inline const ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo& CmdVASUpdateAnaly::analyinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASUpdateAnaly.analyinfos)
  return analyinfos_.Get(index);
}
inline ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo* CmdVASUpdateAnaly::mutable_analyinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdVASUpdateAnaly.analyinfos)
  return analyinfos_.Mutable(index);
}
inline ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo* CmdVASUpdateAnaly::add_analyinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdVASUpdateAnaly.analyinfos)
  return analyinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo >&
CmdVASUpdateAnaly::analyinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdVASUpdateAnaly.analyinfos)
  return analyinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdVASUpdateAnaly_AnalyInfo >*
CmdVASUpdateAnaly::mutable_analyinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdVASUpdateAnaly.analyinfos)
  return &analyinfos_;
}

// -------------------------------------------------------------------

// CmdVASReOpenNetMPMediaPort

// optional string netmpip = 1;
inline bool CmdVASReOpenNetMPMediaPort::has_netmpip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_netmpip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_netmpip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_netmpip() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_->clear();
  }
  clear_has_netmpip();
}
inline const ::std::string& CmdVASReOpenNetMPMediaPort::netmpip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
  return *netmpip_;
}
inline void CmdVASReOpenNetMPMediaPort::set_netmpip(const ::std::string& value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
}
inline void CmdVASReOpenNetMPMediaPort::set_netmpip(const char* value) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
}
inline void CmdVASReOpenNetMPMediaPort::set_netmpip(const char* value, size_t size) {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  netmpip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
}
inline ::std::string* CmdVASReOpenNetMPMediaPort::mutable_netmpip() {
  set_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netmpip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
  return netmpip_;
}
inline ::std::string* CmdVASReOpenNetMPMediaPort::release_netmpip() {
  clear_has_netmpip();
  if (netmpip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netmpip_;
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdVASReOpenNetMPMediaPort::set_allocated_netmpip(::std::string* netmpip) {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (netmpip) {
    set_has_netmpip();
    netmpip_ = netmpip;
  } else {
    clear_has_netmpip();
    netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdVASReOpenNetMPMediaPort.netmpip)
}

// optional uint32 audiodatarecvport = 2;
inline bool CmdVASReOpenNetMPMediaPort::has_audiodatarecvport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_audiodatarecvport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_audiodatarecvport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_audiodatarecvport() {
  audiodatarecvport_ = 0u;
  clear_has_audiodatarecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::audiodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.audiodatarecvport)
  return audiodatarecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_audiodatarecvport(::google::protobuf::uint32 value) {
  set_has_audiodatarecvport();
  audiodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.audiodatarecvport)
}

// optional uint32 audioctrlrecvport = 3;
inline bool CmdVASReOpenNetMPMediaPort::has_audioctrlrecvport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_audioctrlrecvport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_audioctrlrecvport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_audioctrlrecvport() {
  audioctrlrecvport_ = 0u;
  clear_has_audioctrlrecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::audioctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.audioctrlrecvport)
  return audioctrlrecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_audioctrlrecvport(::google::protobuf::uint32 value) {
  set_has_audioctrlrecvport();
  audioctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.audioctrlrecvport)
}

// optional uint32 videodatarecvport = 4;
inline bool CmdVASReOpenNetMPMediaPort::has_videodatarecvport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_videodatarecvport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_videodatarecvport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_videodatarecvport() {
  videodatarecvport_ = 0u;
  clear_has_videodatarecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::videodatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.videodatarecvport)
  return videodatarecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_videodatarecvport(::google::protobuf::uint32 value) {
  set_has_videodatarecvport();
  videodatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.videodatarecvport)
}

// optional uint32 videoctrlrecvport = 5;
inline bool CmdVASReOpenNetMPMediaPort::has_videoctrlrecvport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_videoctrlrecvport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_videoctrlrecvport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_videoctrlrecvport() {
  videoctrlrecvport_ = 0u;
  clear_has_videoctrlrecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::videoctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.videoctrlrecvport)
  return videoctrlrecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_videoctrlrecvport(::google::protobuf::uint32 value) {
  set_has_videoctrlrecvport();
  videoctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.videoctrlrecvport)
}

// optional uint32 video2datarecvport = 6;
inline bool CmdVASReOpenNetMPMediaPort::has_video2datarecvport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_video2datarecvport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_video2datarecvport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_video2datarecvport() {
  video2datarecvport_ = 0u;
  clear_has_video2datarecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::video2datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.video2datarecvport)
  return video2datarecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_video2datarecvport(::google::protobuf::uint32 value) {
  set_has_video2datarecvport();
  video2datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.video2datarecvport)
}

// optional uint32 video2ctrlrecvport = 7;
inline bool CmdVASReOpenNetMPMediaPort::has_video2ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_video2ctrlrecvport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_video2ctrlrecvport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_video2ctrlrecvport() {
  video2ctrlrecvport_ = 0u;
  clear_has_video2ctrlrecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::video2ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.video2ctrlrecvport)
  return video2ctrlrecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_video2ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video2ctrlrecvport();
  video2ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.video2ctrlrecvport)
}

// optional uint32 video3datarecvport = 8;
inline bool CmdVASReOpenNetMPMediaPort::has_video3datarecvport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_video3datarecvport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_video3datarecvport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_video3datarecvport() {
  video3datarecvport_ = 0u;
  clear_has_video3datarecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::video3datarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.video3datarecvport)
  return video3datarecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_video3datarecvport(::google::protobuf::uint32 value) {
  set_has_video3datarecvport();
  video3datarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.video3datarecvport)
}

// optional uint32 video3ctrlrecvport = 9;
inline bool CmdVASReOpenNetMPMediaPort::has_video3ctrlrecvport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_video3ctrlrecvport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_video3ctrlrecvport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_video3ctrlrecvport() {
  video3ctrlrecvport_ = 0u;
  clear_has_video3ctrlrecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::video3ctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.video3ctrlrecvport)
  return video3ctrlrecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_video3ctrlrecvport(::google::protobuf::uint32 value) {
  set_has_video3ctrlrecvport();
  video3ctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.video3ctrlrecvport)
}

// optional uint32 desktopdatarecvport = 10;
inline bool CmdVASReOpenNetMPMediaPort::has_desktopdatarecvport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_desktopdatarecvport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_desktopdatarecvport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_desktopdatarecvport() {
  desktopdatarecvport_ = 0u;
  clear_has_desktopdatarecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::desktopdatarecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.desktopdatarecvport)
  return desktopdatarecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_desktopdatarecvport(::google::protobuf::uint32 value) {
  set_has_desktopdatarecvport();
  desktopdatarecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.desktopdatarecvport)
}

// optional uint32 desktopctrlrecvport = 11;
inline bool CmdVASReOpenNetMPMediaPort::has_desktopctrlrecvport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_desktopctrlrecvport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_desktopctrlrecvport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_desktopctrlrecvport() {
  desktopctrlrecvport_ = 0u;
  clear_has_desktopctrlrecvport();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::desktopctrlrecvport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.desktopctrlrecvport)
  return desktopctrlrecvport_;
}
inline void CmdVASReOpenNetMPMediaPort::set_desktopctrlrecvport(::google::protobuf::uint32 value) {
  set_has_desktopctrlrecvport();
  desktopctrlrecvport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.desktopctrlrecvport)
}

// optional uint64 confid = 12;
inline bool CmdVASReOpenNetMPMediaPort::has_confid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_confid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_confid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdVASReOpenNetMPMediaPort::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.confid)
  return confid_;
}
inline void CmdVASReOpenNetMPMediaPort::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.confid)
}

// optional uint32 mcid = 13;
inline bool CmdVASReOpenNetMPMediaPort::has_mcid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_mcid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_mcid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.mcid)
  return mcid_;
}
inline void CmdVASReOpenNetMPMediaPort::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.mcid)
}

// optional uint32 vasid = 14;
inline bool CmdVASReOpenNetMPMediaPort::has_vasid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_vasid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_vasid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.vasid)
  return vasid_;
}
inline void CmdVASReOpenNetMPMediaPort::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.vasid)
}

// optional uint32 vaschannelid = 15;
inline bool CmdVASReOpenNetMPMediaPort::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CmdVASReOpenNetMPMediaPort::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CmdVASReOpenNetMPMediaPort::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdVASReOpenNetMPMediaPort::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdVASReOpenNetMPMediaPort.vaschannelid)
  return vaschannelid_;
}
inline void CmdVASReOpenNetMPMediaPort::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdVASReOpenNetMPMediaPort.vaschannelid)
}

// -------------------------------------------------------------------

// IndMCHeartBeatToVAS

// optional uint32 mcid = 1;
inline bool IndMCHeartBeatToVAS::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCHeartBeatToVAS::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCHeartBeatToVAS::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCHeartBeatToVAS::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToVAS::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToVAS.mcid)
  return mcid_;
}
inline void IndMCHeartBeatToVAS::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToVAS.mcid)
}

// optional uint32 vasid = 2;
inline bool IndMCHeartBeatToVAS::has_vasid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCHeartBeatToVAS::set_has_vasid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCHeartBeatToVAS::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCHeartBeatToVAS::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToVAS::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToVAS.vasid)
  return vasid_;
}
inline void IndMCHeartBeatToVAS::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToVAS.vasid)
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToVAS_ScreensInMPI

// optional uint32 screenid = 1;
inline bool IndConfAllMPIInfoToVAS_ScreensInMPI::has_screenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::set_has_screenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToVAS_ScreensInMPI::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI.screenid)
  return screenid_;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI.screenid)
}

// optional uint32 screentype = 2;
inline bool IndConfAllMPIInfoToVAS_ScreensInMPI::has_screentype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::set_has_screentype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToVAS_ScreensInMPI::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI.screentype)
  return screentype_;
}
inline void IndConfAllMPIInfoToVAS_ScreensInMPI::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI.screentype)
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToVAS_MPIsInConf

// optional uint32 mpichannelid = 1;
inline bool IndConfAllMPIInfoToVAS_MPIsInConf::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToVAS_MPIsInConf::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToVAS_MPIsInConf::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToVAS_MPIsInConf::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToVAS_MPIsInConf::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.mpichannelid)
  return mpichannelid_;
}
inline void IndConfAllMPIInfoToVAS_MPIsInConf::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.mpichannelid)
}

// repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
inline int IndConfAllMPIInfoToVAS_MPIsInConf::screens_size() const {
  return screens_.size();
}
inline void IndConfAllMPIInfoToVAS_MPIsInConf::clear_screens() {
  screens_.Clear();
}
inline const ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI& IndConfAllMPIInfoToVAS_MPIsInConf::screens(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.screens)
  return screens_.Get(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI* IndConfAllMPIInfoToVAS_MPIsInConf::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.screens)
  return screens_.Mutable(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI* IndConfAllMPIInfoToVAS_MPIsInConf::add_screens() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.screens)
  return screens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI >&
IndConfAllMPIInfoToVAS_MPIsInConf::screens() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.screens)
  return screens_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_ScreensInMPI >*
IndConfAllMPIInfoToVAS_MPIsInConf::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf.screens)
  return &screens_;
}

// -------------------------------------------------------------------

// IndConfAllMPIInfoToVAS

// optional uint64 confid = 1;
inline bool IndConfAllMPIInfoToVAS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndConfAllMPIInfoToVAS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndConfAllMPIInfoToVAS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndConfAllMPIInfoToVAS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndConfAllMPIInfoToVAS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.confid)
  return confid_;
}
inline void IndConfAllMPIInfoToVAS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.confid)
}

// optional uint32 mcid = 2;
inline bool IndConfAllMPIInfoToVAS::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndConfAllMPIInfoToVAS::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndConfAllMPIInfoToVAS::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndConfAllMPIInfoToVAS::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToVAS::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.mcid)
  return mcid_;
}
inline void IndConfAllMPIInfoToVAS::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.mcid)
}

// optional uint32 vasid = 3;
inline bool IndConfAllMPIInfoToVAS::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndConfAllMPIInfoToVAS::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndConfAllMPIInfoToVAS::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndConfAllMPIInfoToVAS::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndConfAllMPIInfoToVAS::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.vasid)
  return vasid_;
}
inline void IndConfAllMPIInfoToVAS::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndConfAllMPIInfoToVAS.vasid)
}

// repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
inline int IndConfAllMPIInfoToVAS::mpis_size() const {
  return mpis_.size();
}
inline void IndConfAllMPIInfoToVAS::clear_mpis() {
  mpis_.Clear();
}
inline const ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf& IndConfAllMPIInfoToVAS::mpis(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndConfAllMPIInfoToVAS.mpis)
  return mpis_.Get(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf* IndConfAllMPIInfoToVAS::mutable_mpis(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndConfAllMPIInfoToVAS.mpis)
  return mpis_.Mutable(index);
}
inline ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf* IndConfAllMPIInfoToVAS::add_mpis() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndConfAllMPIInfoToVAS.mpis)
  return mpis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf >&
IndConfAllMPIInfoToVAS::mpis() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndConfAllMPIInfoToVAS.mpis)
  return mpis_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndConfAllMPIInfoToVAS_MPIsInConf >*
IndConfAllMPIInfoToVAS::mutable_mpis() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndConfAllMPIInfoToVAS.mpis)
  return &mpis_;
}

// -------------------------------------------------------------------

// IndMPIInfoToVAS

// optional uint64 confid = 1;
inline bool IndMPIInfoToVAS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMPIInfoToVAS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMPIInfoToVAS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMPIInfoToVAS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndMPIInfoToVAS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToVAS.confid)
  return confid_;
}
inline void IndMPIInfoToVAS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToVAS.confid)
}

// optional uint32 mpichannelid = 2;
inline bool IndMPIInfoToVAS::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMPIInfoToVAS::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMPIInfoToVAS::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMPIInfoToVAS::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndMPIInfoToVAS::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToVAS.mpichannelid)
  return mpichannelid_;
}
inline void IndMPIInfoToVAS::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToVAS.mpichannelid)
}

// optional uint32 addordel = 3;
inline bool IndMPIInfoToVAS::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMPIInfoToVAS::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMPIInfoToVAS::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMPIInfoToVAS::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndMPIInfoToVAS::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToVAS.addordel)
  return addordel_;
}
inline void IndMPIInfoToVAS::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToVAS.addordel)
}

// optional uint32 vasid = 4;
inline bool IndMPIInfoToVAS::has_vasid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndMPIInfoToVAS::set_has_vasid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndMPIInfoToVAS::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndMPIInfoToVAS::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndMPIInfoToVAS::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMPIInfoToVAS.vasid)
  return vasid_;
}
inline void IndMPIInfoToVAS::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMPIInfoToVAS.vasid)
}

// -------------------------------------------------------------------

// IndScreenInfoToVAS

// optional uint64 confid = 1;
inline bool IndScreenInfoToVAS::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndScreenInfoToVAS::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndScreenInfoToVAS::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndScreenInfoToVAS::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndScreenInfoToVAS::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.confid)
  return confid_;
}
inline void IndScreenInfoToVAS::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.confid)
}

// optional uint32 mpichannelid = 2;
inline bool IndScreenInfoToVAS::has_mpichannelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndScreenInfoToVAS::set_has_mpichannelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndScreenInfoToVAS::clear_has_mpichannelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndScreenInfoToVAS::clear_mpichannelid() {
  mpichannelid_ = 0u;
  clear_has_mpichannelid();
}
inline ::google::protobuf::uint32 IndScreenInfoToVAS::mpichannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.mpichannelid)
  return mpichannelid_;
}
inline void IndScreenInfoToVAS::set_mpichannelid(::google::protobuf::uint32 value) {
  set_has_mpichannelid();
  mpichannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.mpichannelid)
}

// optional uint32 screenid = 3;
inline bool IndScreenInfoToVAS::has_screenid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndScreenInfoToVAS::set_has_screenid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndScreenInfoToVAS::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndScreenInfoToVAS::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndScreenInfoToVAS::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.screenid)
  return screenid_;
}
inline void IndScreenInfoToVAS::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.screenid)
}

// optional uint32 screentype = 4;
inline bool IndScreenInfoToVAS::has_screentype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndScreenInfoToVAS::set_has_screentype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndScreenInfoToVAS::clear_has_screentype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndScreenInfoToVAS::clear_screentype() {
  screentype_ = 0u;
  clear_has_screentype();
}
inline ::google::protobuf::uint32 IndScreenInfoToVAS::screentype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.screentype)
  return screentype_;
}
inline void IndScreenInfoToVAS::set_screentype(::google::protobuf::uint32 value) {
  set_has_screentype();
  screentype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.screentype)
}

// optional uint32 addordel = 5;
inline bool IndScreenInfoToVAS::has_addordel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndScreenInfoToVAS::set_has_addordel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndScreenInfoToVAS::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndScreenInfoToVAS::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndScreenInfoToVAS::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.addordel)
  return addordel_;
}
inline void IndScreenInfoToVAS::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.addordel)
}

// optional uint32 vasid = 6;
inline bool IndScreenInfoToVAS::has_vasid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndScreenInfoToVAS::set_has_vasid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndScreenInfoToVAS::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndScreenInfoToVAS::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndScreenInfoToVAS::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndScreenInfoToVAS.vasid)
  return vasid_;
}
inline void IndScreenInfoToVAS::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndScreenInfoToVAS.vasid)
}

// -------------------------------------------------------------------

// RspVASCreateConf

// optional bool isok = 1;
inline bool RspVASCreateConf::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspVASCreateConf::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspVASCreateConf::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspVASCreateConf::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspVASCreateConf::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.isok)
  return isok_;
}
inline void RspVASCreateConf::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.isok)
}

// optional uint64 confid = 2;
inline bool RspVASCreateConf::has_confid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspVASCreateConf::set_has_confid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspVASCreateConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspVASCreateConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspVASCreateConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.confid)
  return confid_;
}
inline void RspVASCreateConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.confid)
}

// optional uint32 mcid = 3;
inline bool RspVASCreateConf::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspVASCreateConf::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspVASCreateConf::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspVASCreateConf::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspVASCreateConf::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.mcid)
  return mcid_;
}
inline void RspVASCreateConf::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.mcid)
}

// optional uint32 vasid = 4;
inline bool RspVASCreateConf::has_vasid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspVASCreateConf::set_has_vasid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspVASCreateConf::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspVASCreateConf::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 RspVASCreateConf::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.vasid)
  return vasid_;
}
inline void RspVASCreateConf::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.vasid)
}

// optional uint32 vaschannelid = 5;
inline bool RspVASCreateConf::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspVASCreateConf::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspVASCreateConf::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspVASCreateConf::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 RspVASCreateConf::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.vaschannelid)
  return vaschannelid_;
}
inline void RspVASCreateConf::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.vaschannelid)
}

// optional uint32 relatednetmpid = 6;
inline bool RspVASCreateConf::has_relatednetmpid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspVASCreateConf::set_has_relatednetmpid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspVASCreateConf::clear_has_relatednetmpid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspVASCreateConf::clear_relatednetmpid() {
  relatednetmpid_ = 0u;
  clear_has_relatednetmpid();
}
inline ::google::protobuf::uint32 RspVASCreateConf::relatednetmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.relatednetmpid)
  return relatednetmpid_;
}
inline void RspVASCreateConf::set_relatednetmpid(::google::protobuf::uint32 value) {
  set_has_relatednetmpid();
  relatednetmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.relatednetmpid)
}

// optional string failreason = 7;
inline bool RspVASCreateConf::has_failreason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspVASCreateConf::set_has_failreason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspVASCreateConf::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspVASCreateConf::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspVASCreateConf::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.failreason)
  return *failreason_;
}
inline void RspVASCreateConf::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.failreason)
}
inline void RspVASCreateConf::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspVASCreateConf.failreason)
}
inline void RspVASCreateConf::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspVASCreateConf.failreason)
}
inline ::std::string* RspVASCreateConf::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspVASCreateConf.failreason)
  return failreason_;
}
inline ::std::string* RspVASCreateConf::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspVASCreateConf::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspVASCreateConf.failreason)
}

// optional uint32 errorcode = 8;
inline bool RspVASCreateConf::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspVASCreateConf::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspVASCreateConf::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspVASCreateConf::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspVASCreateConf::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.errorcode)
  return errorcode_;
}
inline void RspVASCreateConf::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.errorcode)
}

// optional uint32 vaschantype = 9;
inline bool RspVASCreateConf::has_vaschantype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspVASCreateConf::set_has_vaschantype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspVASCreateConf::clear_has_vaschantype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspVASCreateConf::clear_vaschantype() {
  vaschantype_ = 0u;
  clear_has_vaschantype();
}
inline ::google::protobuf::uint32 RspVASCreateConf::vaschantype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspVASCreateConf.vaschantype)
  return vaschantype_;
}
inline void RspVASCreateConf::set_vaschantype(::google::protobuf::uint32 value) {
  set_has_vaschantype();
  vaschantype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspVASCreateConf.vaschantype)
}

// -------------------------------------------------------------------

// IndVASHeartBeatToMC

// optional uint32 mcid = 1;
inline bool IndVASHeartBeatToMC::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASHeartBeatToMC::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASHeartBeatToMC::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASHeartBeatToMC::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndVASHeartBeatToMC::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASHeartBeatToMC.mcid)
  return mcid_;
}
inline void IndVASHeartBeatToMC::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASHeartBeatToMC.mcid)
}

// optional uint32 vasid = 2;
inline bool IndVASHeartBeatToMC::has_vasid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASHeartBeatToMC::set_has_vasid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASHeartBeatToMC::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASHeartBeatToMC::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndVASHeartBeatToMC::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASHeartBeatToMC.vasid)
  return vasid_;
}
inline void IndVASHeartBeatToMC::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASHeartBeatToMC.vasid)
}

// -------------------------------------------------------------------

// IndVASMatchResult_videoMatch

// optional uint32 userid = 1;
inline bool IndVASMatchResult_videoMatch::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASMatchResult_videoMatch::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASMatchResult_videoMatch::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASMatchResult_videoMatch::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 IndVASMatchResult_videoMatch::userid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.videoMatch.userid)
  return userid_;
}
inline void IndVASMatchResult_videoMatch::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.videoMatch.userid)
}

// optional uint32 rate = 2;
inline bool IndVASMatchResult_videoMatch::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASMatchResult_videoMatch::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASMatchResult_videoMatch::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASMatchResult_videoMatch::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 IndVASMatchResult_videoMatch::rate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.videoMatch.rate)
  return rate_;
}
inline void IndVASMatchResult_videoMatch::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.videoMatch.rate)
}

// -------------------------------------------------------------------

// IndVASMatchResult_MatchResult

// optional uint32 channelid = 1;
inline bool IndVASMatchResult_MatchResult::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASMatchResult_MatchResult::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASMatchResult_MatchResult::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASMatchResult_MatchResult::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 IndVASMatchResult_MatchResult::channelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.channelid)
  return channelid_;
}
inline void IndVASMatchResult_MatchResult::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.MatchResult.channelid)
}

// optional uint32 screenid = 2;
inline bool IndVASMatchResult_MatchResult::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASMatchResult_MatchResult::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASMatchResult_MatchResult::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASMatchResult_MatchResult::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 IndVASMatchResult_MatchResult::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.screenid)
  return screenid_;
}
inline void IndVASMatchResult_MatchResult::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.MatchResult.screenid)
}

// optional uint32 vaschannelid = 3;
inline bool IndVASMatchResult_MatchResult::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVASMatchResult_MatchResult::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVASMatchResult_MatchResult::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVASMatchResult_MatchResult::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 IndVASMatchResult_MatchResult::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.vaschannelid)
  return vaschannelid_;
}
inline void IndVASMatchResult_MatchResult::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.MatchResult.vaschannelid)
}

// optional uint32 srcmapid = 4;
inline bool IndVASMatchResult_MatchResult::has_srcmapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndVASMatchResult_MatchResult::set_has_srcmapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndVASMatchResult_MatchResult::clear_has_srcmapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndVASMatchResult_MatchResult::clear_srcmapid() {
  srcmapid_ = 0u;
  clear_has_srcmapid();
}
inline ::google::protobuf::uint32 IndVASMatchResult_MatchResult::srcmapid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.srcmapid)
  return srcmapid_;
}
inline void IndVASMatchResult_MatchResult::set_srcmapid(::google::protobuf::uint32 value) {
  set_has_srcmapid();
  srcmapid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.MatchResult.srcmapid)
}

// repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
inline int IndVASMatchResult_MatchResult::videomatchs_size() const {
  return videomatchs_.size();
}
inline void IndVASMatchResult_MatchResult::clear_videomatchs() {
  videomatchs_.Clear();
}
inline const ::SRMsgs::IndVASMatchResult_videoMatch& IndVASMatchResult_MatchResult::videomatchs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.videoMatchs)
  return videomatchs_.Get(index);
}
inline ::SRMsgs::IndVASMatchResult_videoMatch* IndVASMatchResult_MatchResult::mutable_videomatchs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASMatchResult.MatchResult.videoMatchs)
  return videomatchs_.Mutable(index);
}
inline ::SRMsgs::IndVASMatchResult_videoMatch* IndVASMatchResult_MatchResult::add_videomatchs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVASMatchResult.MatchResult.videoMatchs)
  return videomatchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_videoMatch >&
IndVASMatchResult_MatchResult::videomatchs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVASMatchResult.MatchResult.videoMatchs)
  return videomatchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_videoMatch >*
IndVASMatchResult_MatchResult::mutable_videomatchs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVASMatchResult.MatchResult.videoMatchs)
  return &videomatchs_;
}

// optional bool hasmismatch = 6;
inline bool IndVASMatchResult_MatchResult::has_hasmismatch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndVASMatchResult_MatchResult::set_has_hasmismatch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndVASMatchResult_MatchResult::clear_has_hasmismatch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndVASMatchResult_MatchResult::clear_hasmismatch() {
  hasmismatch_ = false;
  clear_has_hasmismatch();
}
inline bool IndVASMatchResult_MatchResult::hasmismatch() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.MatchResult.hasmismatch)
  return hasmismatch_;
}
inline void IndVASMatchResult_MatchResult::set_hasmismatch(bool value) {
  set_has_hasmismatch();
  hasmismatch_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.MatchResult.hasmismatch)
}

// -------------------------------------------------------------------

// IndVASMatchResult

// optional uint64 confid = 1;
inline bool IndVASMatchResult::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASMatchResult::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASMatchResult::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASMatchResult::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndVASMatchResult::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.confid)
  return confid_;
}
inline void IndVASMatchResult::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.confid)
}

// optional uint32 mcid = 2;
inline bool IndVASMatchResult::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASMatchResult::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASMatchResult::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASMatchResult::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndVASMatchResult::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.mcid)
  return mcid_;
}
inline void IndVASMatchResult::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.mcid)
}

// optional uint32 vasid = 3;
inline bool IndVASMatchResult::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVASMatchResult::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVASMatchResult::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVASMatchResult::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 IndVASMatchResult::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.vasid)
  return vasid_;
}
inline void IndVASMatchResult::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASMatchResult.vasid)
}

// repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
inline int IndVASMatchResult::matchresults_size() const {
  return matchresults_.size();
}
inline void IndVASMatchResult::clear_matchresults() {
  matchresults_.Clear();
}
inline const ::SRMsgs::IndVASMatchResult_MatchResult& IndVASMatchResult::matchresults(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASMatchResult.matchresults)
  return matchresults_.Get(index);
}
inline ::SRMsgs::IndVASMatchResult_MatchResult* IndVASMatchResult::mutable_matchresults(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASMatchResult.matchresults)
  return matchresults_.Mutable(index);
}
inline ::SRMsgs::IndVASMatchResult_MatchResult* IndVASMatchResult::add_matchresults() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVASMatchResult.matchresults)
  return matchresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_MatchResult >&
IndVASMatchResult::matchresults() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVASMatchResult.matchresults)
  return matchresults_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASMatchResult_MatchResult >*
IndVASMatchResult::mutable_matchresults() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVASMatchResult.matchresults)
  return &matchresults_;
}

// -------------------------------------------------------------------

// CmdMCVASSeleteVideo_TermInfo

// optional uint32 terid = 1;
inline bool CmdMCVASSeleteVideo_TermInfo::has_terid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_has_terid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_has_terid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_terid() {
  terid_ = 0u;
  clear_has_terid();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo_TermInfo::terid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.TermInfo.terid)
  return terid_;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_terid(::google::protobuf::uint32 value) {
  set_has_terid();
  terid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.TermInfo.terid)
}

// optional uint32 screenid = 2;
inline bool CmdMCVASSeleteVideo_TermInfo::has_screenid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_has_screenid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_has_screenid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_screenid() {
  screenid_ = 0u;
  clear_has_screenid();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo_TermInfo::screenid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.TermInfo.screenid)
  return screenid_;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_screenid(::google::protobuf::uint32 value) {
  set_has_screenid();
  screenid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.TermInfo.screenid)
}

// optional uint32 videosize = 3;
inline bool CmdMCVASSeleteVideo_TermInfo::has_videosize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_has_videosize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_has_videosize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_videosize() {
  videosize_ = 0u;
  clear_has_videosize();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo_TermInfo::videosize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.TermInfo.videosize)
  return videosize_;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_videosize(::google::protobuf::uint32 value) {
  set_has_videosize();
  videosize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.TermInfo.videosize)
}

// optional uint32 recvfps = 4;
inline bool CmdMCVASSeleteVideo_TermInfo::has_recvfps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_has_recvfps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_has_recvfps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCVASSeleteVideo_TermInfo::clear_recvfps() {
  recvfps_ = 0u;
  clear_has_recvfps();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo_TermInfo::recvfps() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.TermInfo.recvfps)
  return recvfps_;
}
inline void CmdMCVASSeleteVideo_TermInfo::set_recvfps(::google::protobuf::uint32 value) {
  set_has_recvfps();
  recvfps_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.TermInfo.recvfps)
}

// -------------------------------------------------------------------

// CmdMCVASSeleteVideo

// optional uint64 confid = 1;
inline bool CmdMCVASSeleteVideo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdMCVASSeleteVideo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdMCVASSeleteVideo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdMCVASSeleteVideo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 CmdMCVASSeleteVideo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.confid)
  return confid_;
}
inline void CmdMCVASSeleteVideo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.confid)
}

// optional uint32 mcid = 2;
inline bool CmdMCVASSeleteVideo::has_mcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdMCVASSeleteVideo::set_has_mcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdMCVASSeleteVideo::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdMCVASSeleteVideo::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.mcid)
  return mcid_;
}
inline void CmdMCVASSeleteVideo::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.mcid)
}

// optional uint32 vasid = 3;
inline bool CmdMCVASSeleteVideo::has_vasid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdMCVASSeleteVideo::set_has_vasid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdMCVASSeleteVideo::clear_has_vasid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdMCVASSeleteVideo::clear_vasid() {
  vasid_ = 0u;
  clear_has_vasid();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo::vasid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.vasid)
  return vasid_;
}
inline void CmdMCVASSeleteVideo::set_vasid(::google::protobuf::uint32 value) {
  set_has_vasid();
  vasid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.vasid)
}

// optional uint32 vaschannelid = 4;
inline bool CmdMCVASSeleteVideo::has_vaschannelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdMCVASSeleteVideo::set_has_vaschannelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdMCVASSeleteVideo::clear_has_vaschannelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdMCVASSeleteVideo::clear_vaschannelid() {
  vaschannelid_ = 0u;
  clear_has_vaschannelid();
}
inline ::google::protobuf::uint32 CmdMCVASSeleteVideo::vaschannelid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.vaschannelid)
  return vaschannelid_;
}
inline void CmdMCVASSeleteVideo::set_vaschannelid(::google::protobuf::uint32 value) {
  set_has_vaschannelid();
  vaschannelid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdMCVASSeleteVideo.vaschannelid)
}

// repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
inline int CmdMCVASSeleteVideo::seleteterinfo_size() const {
  return seleteterinfo_.size();
}
inline void CmdMCVASSeleteVideo::clear_seleteterinfo() {
  seleteterinfo_.Clear();
}
inline const ::SRMsgs::CmdMCVASSeleteVideo_TermInfo& CmdMCVASSeleteVideo::seleteterinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdMCVASSeleteVideo.seleteterinfo)
  return seleteterinfo_.Get(index);
}
inline ::SRMsgs::CmdMCVASSeleteVideo_TermInfo* CmdMCVASSeleteVideo::mutable_seleteterinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdMCVASSeleteVideo.seleteterinfo)
  return seleteterinfo_.Mutable(index);
}
inline ::SRMsgs::CmdMCVASSeleteVideo_TermInfo* CmdMCVASSeleteVideo::add_seleteterinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdMCVASSeleteVideo.seleteterinfo)
  return seleteterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCVASSeleteVideo_TermInfo >&
CmdMCVASSeleteVideo::seleteterinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdMCVASSeleteVideo.seleteterinfo)
  return seleteterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdMCVASSeleteVideo_TermInfo >*
CmdMCVASSeleteVideo::mutable_seleteterinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdMCVASSeleteVideo.seleteterinfo)
  return &seleteterinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mc_5fvas_2eproto__INCLUDED
