// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_ser.proto

#ifndef PROTOBUF_device_5fser_2eproto__INCLUDED
#define PROTOBUF_device_5fser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_device_5fser_2eproto();
void protobuf_AssignDesc_device_5fser_2eproto();
void protobuf_ShutdownFile_device_5fser_2eproto();

class ReqRegister;
class ReqRegister_TerInfo;
class ReqRegister_ConfInfo;
class ReqRegister_MapIPInfo;
class ReqUnRegister;
class ReqConfInfoFromDevMgr;
class ReqGetDeviceInfo;
class ReqGetSysDeviceInfo;
class ReqGetSystemCurLoad;
class ReqUpdateDeviceInfo;
class ReqUpdateDeviceInfo_DeviceInfo;
class IndNewTermJoinConf;
class IndTermLeaveConf;
class IndMCCreateConf;
class IndsertodevHeart;
class IndsertodevHeart_LoadInfo;
class IndMCEndConf;
class IndNetMPConfInfoInMC;
class IndNetMPConnStatusInMC;
class IndCRSStartRec;
class IndCRSStopRec;
class IndCRSFileStoragePath;
class IndVASAnalyVideoState;
class IndCRSStartLive;
class IndCRSStartLive_LiveAddr;
class IndCRSStartLive_LiveSetting;
class IndCRSStopLive;
class IndModifyConfCallList;
class IndModifyConfCallList_ParticipantInfo;
class IndModifyConfCallList_RollCallInfo;
class IndTerStatisticsInfo;
class IndTerStatisticsInfo_FrameInfo;
class IndTerStatisticsInfo_AdvanceInfo;
class IndTerStatisticsInfo_BaseInfo;
class IndTerStatisticsInfo_AudioInfo;
class IndTerStatisticsInfo_VideoInfo;
class IndTerStatisticsInfo_XfeInfo;
class IndTerStatisticsInfo_TerStatisticsInfo;
class IndSubSvrInfoToDevmgr;
class IndSubSvrInfoToDevmgr_IPPORTInfo;
class IndSubSvrInfoToDevmgr_ServerInfo;
class IndSubSvrInfoToDevmgr_DomainInfo;
class IndSubSvrHeartTodev;
class IndSubSvrHeartTodev_LoadInfo;
class IndSubSvrHeartTodev_ServerInfo;
class IndSubSvrHeartTodev_DomainInfo;
class IndVASAnalyVideoResult;
class IndVASAnalyVideoResult_videoMatch;
class IndVASAnalyVideoResult_MatchResult;
class RspConfInfoToMC;
class RspConfInfoToMC_AgcSetting;
class RspConfInfoToMC_Confcfg;
class RspConfInfoToMC_ParticipantInfo;
class RspConfInfoToMC_LiveSetting;
class RspConfInfoToMC_RollCallInfo;
class RspConfInfoToMC_AutoPollInfo;
class IndDevtoserHeart;
class IndUpSvrInfoToDevmgr;
class IndUpSvrInfoToDevmgr_IPPORTInfo;
class IndUpSvrInfoToDevmgr_ServerInfo;
class IndUpSvrInfoToDevmgr_DomainInfo;
class IndUpSvrHeartTodev;
class IndUpSvrHeartTodev_LoadInfo;
class IndUpSvrHeartTodev_ServerInfo;
class IndUpSvrHeartTodev_DomainInfo;
class RspRegister;
class RspRegister_Capset;
class RspRegister_CapInfo;
class RspUnRegister;
class RspGetDeviceInfo;
class RspGetDeviceInfo_MapIPInfo;
class RspGetDeviceInfo_DeviceInfo;
class RspGetSysDeviceInfo;
class RspGetSysDeviceInfo_LoadInfo;
class RspGetSysDeviceInfo_IPPORTInfo;
class RspGetSysDeviceInfo_DeviceInfo;
class RspGetSysDeviceInfo_DomainInfo;
class RspGetSystemCurLoad;
class RspUpdateDeviceInfo;
class RspUpdateDeviceInfo_DeviceInfo;
class CmdGWOPMonitor;
class CmdGWOPAVConfig;
class CmdGWOPAVConfig_Capset;
class CmdGWOPAVConfig_CapInfo;

// ===================================================================

class ReqRegister_TerInfo : public ::google::protobuf::Message {
 public:
  ReqRegister_TerInfo();
  virtual ~ReqRegister_TerInfo();

  ReqRegister_TerInfo(const ReqRegister_TerInfo& from);

  inline ReqRegister_TerInfo& operator=(const ReqRegister_TerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegister_TerInfo& default_instance();

  void Swap(ReqRegister_TerInfo* other);

  // implements Message ----------------------------------------------

  ReqRegister_TerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegister_TerInfo& from);
  void MergeFrom(const ReqRegister_TerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string alias = 3;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 3;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional uint32 netmpid = 4;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 4;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional uint32 fromtype = 5;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromtypeFieldNumber = 5;
  inline ::google::protobuf::uint32 fromtype() const;
  inline void set_fromtype(::google::protobuf::uint32 value);

  // optional uint32 termtype = 6;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 7;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 7;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqRegister.TerInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 netmpid_;
  ::std::string* alias_;
  ::google::protobuf::uint32 fromtype_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqRegister_TerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqRegister_ConfInfo : public ::google::protobuf::Message {
 public:
  ReqRegister_ConfInfo();
  virtual ~ReqRegister_ConfInfo();

  ReqRegister_ConfInfo(const ReqRegister_ConfInfo& from);

  inline ReqRegister_ConfInfo& operator=(const ReqRegister_ConfInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegister_ConfInfo& default_instance();

  void Swap(ReqRegister_ConfInfo* other);

  // implements Message ----------------------------------------------

  ReqRegister_ConfInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegister_ConfInfo& from);
  void MergeFrom(const ReqRegister_ConfInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 confid = 1;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 1;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
  inline int terlist_size() const;
  inline void clear_terlist();
  static const int kTerlistFieldNumber = 2;
  inline const ::SRMsgs::ReqRegister_TerInfo& terlist(int index) const;
  inline ::SRMsgs::ReqRegister_TerInfo* mutable_terlist(int index);
  inline ::SRMsgs::ReqRegister_TerInfo* add_terlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_TerInfo >&
      terlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_TerInfo >*
      mutable_terlist();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqRegister.ConfInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_TerInfo > terlist_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqRegister_ConfInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqRegister_MapIPInfo : public ::google::protobuf::Message {
 public:
  ReqRegister_MapIPInfo();
  virtual ~ReqRegister_MapIPInfo();

  ReqRegister_MapIPInfo(const ReqRegister_MapIPInfo& from);

  inline ReqRegister_MapIPInfo& operator=(const ReqRegister_MapIPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegister_MapIPInfo& default_instance();

  void Swap(ReqRegister_MapIPInfo* other);

  // implements Message ----------------------------------------------

  ReqRegister_MapIPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegister_MapIPInfo& from);
  void MergeFrom(const ReqRegister_MapIPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mapip = 1;
  inline bool has_mapip() const;
  inline void clear_mapip();
  static const int kMapipFieldNumber = 1;
  inline const ::std::string& mapip() const;
  inline void set_mapip(const ::std::string& value);
  inline void set_mapip(const char* value);
  inline void set_mapip(const char* value, size_t size);
  inline ::std::string* mutable_mapip();
  inline ::std::string* release_mapip();
  inline void set_allocated_mapip(::std::string* mapip);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqRegister.MapIPInfo)
 private:
  inline void set_has_mapip();
  inline void clear_has_mapip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapip_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqRegister_MapIPInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqRegister : public ::google::protobuf::Message {
 public:
  ReqRegister();
  virtual ~ReqRegister();

  ReqRegister(const ReqRegister& from);

  inline ReqRegister& operator=(const ReqRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegister& default_instance();

  void Swap(ReqRegister* other);

  // implements Message ----------------------------------------------

  ReqRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegister& from);
  void MergeFrom(const ReqRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqRegister_TerInfo TerInfo;
  typedef ReqRegister_ConfInfo ConfInfo;
  typedef ReqRegister_MapIPInfo MapIPInfo;

  // accessors -------------------------------------------------------

  // optional uint32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string auth_password = 3;
  inline bool has_auth_password() const;
  inline void clear_auth_password();
  static const int kAuthPasswordFieldNumber = 3;
  inline const ::std::string& auth_password() const;
  inline void set_auth_password(const ::std::string& value);
  inline void set_auth_password(const char* value);
  inline void set_auth_password(const char* value, size_t size);
  inline ::std::string* mutable_auth_password();
  inline ::std::string* release_auth_password();
  inline void set_allocated_auth_password(::std::string* auth_password);

  // optional uint32 svr_type = 4;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 cpunums = 5;
  inline bool has_cpunums() const;
  inline void clear_cpunums();
  static const int kCpunumsFieldNumber = 5;
  inline ::google::protobuf::uint32 cpunums() const;
  inline void set_cpunums(::google::protobuf::uint32 value);

  // optional uint32 max_bandwidth = 6;
  inline bool has_max_bandwidth() const;
  inline void clear_max_bandwidth();
  static const int kMaxBandwidthFieldNumber = 6;
  inline ::google::protobuf::uint32 max_bandwidth() const;
  inline void set_max_bandwidth(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
  inline int conflist_size() const;
  inline void clear_conflist();
  static const int kConflistFieldNumber = 7;
  inline const ::SRMsgs::ReqRegister_ConfInfo& conflist(int index) const;
  inline ::SRMsgs::ReqRegister_ConfInfo* mutable_conflist(int index);
  inline ::SRMsgs::ReqRegister_ConfInfo* add_conflist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_ConfInfo >&
      conflist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_ConfInfo >*
      mutable_conflist();

  // optional string systemlicence = 8;
  inline bool has_systemlicence() const;
  inline void clear_systemlicence();
  static const int kSystemlicenceFieldNumber = 8;
  inline const ::std::string& systemlicence() const;
  inline void set_systemlicence(const ::std::string& value);
  inline void set_systemlicence(const char* value);
  inline void set_systemlicence(const char* value, size_t size);
  inline ::std::string* mutable_systemlicence();
  inline ::std::string* release_systemlicence();
  inline void set_allocated_systemlicence(::std::string* systemlicence);

  // optional uint32 nettype = 9;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 9;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string version = 10;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 10;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string domainname = 11;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 11;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional uint32 httpport = 12;
  inline bool has_httpport() const;
  inline void clear_httpport();
  static const int kHttpportFieldNumber = 12;
  inline ::google::protobuf::uint32 httpport() const;
  inline void set_httpport(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
  inline int mapinternetips_size() const;
  inline void clear_mapinternetips();
  static const int kMapinternetipsFieldNumber = 13;
  inline const ::SRMsgs::ReqRegister_MapIPInfo& mapinternetips(int index) const;
  inline ::SRMsgs::ReqRegister_MapIPInfo* mutable_mapinternetips(int index);
  inline ::SRMsgs::ReqRegister_MapIPInfo* add_mapinternetips();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_MapIPInfo >&
      mapinternetips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_MapIPInfo >*
      mutable_mapinternetips();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqRegister)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_auth_password();
  inline void clear_has_auth_password();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_cpunums();
  inline void clear_has_cpunums();
  inline void set_has_max_bandwidth();
  inline void clear_has_max_bandwidth();
  inline void set_has_systemlicence();
  inline void clear_has_systemlicence();
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_httpport();
  inline void clear_has_httpport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::std::string* auth_password_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 cpunums_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_ConfInfo > conflist_;
  ::google::protobuf::uint32 max_bandwidth_;
  ::google::protobuf::uint32 nettype_;
  ::std::string* systemlicence_;
  ::std::string* version_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_MapIPInfo > mapinternetips_;
  ::google::protobuf::uint32 httpport_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqRegister* default_instance_;
};
// -------------------------------------------------------------------

class ReqUnRegister : public ::google::protobuf::Message {
 public:
  ReqUnRegister();
  virtual ~ReqUnRegister();

  ReqUnRegister(const ReqUnRegister& from);

  inline ReqUnRegister& operator=(const ReqUnRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUnRegister& default_instance();

  void Swap(ReqUnRegister* other);

  // implements Message ----------------------------------------------

  ReqUnRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUnRegister& from);
  void MergeFrom(const ReqUnRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqUnRegister)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqUnRegister* default_instance_;
};
// -------------------------------------------------------------------

class ReqConfInfoFromDevMgr : public ::google::protobuf::Message {
 public:
  ReqConfInfoFromDevMgr();
  virtual ~ReqConfInfoFromDevMgr();

  ReqConfInfoFromDevMgr(const ReqConfInfoFromDevMgr& from);

  inline ReqConfInfoFromDevMgr& operator=(const ReqConfInfoFromDevMgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqConfInfoFromDevMgr& default_instance();

  void Swap(ReqConfInfoFromDevMgr* other);

  // implements Message ----------------------------------------------

  ReqConfInfoFromDevMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqConfInfoFromDevMgr& from);
  void MergeFrom(const ReqConfInfoFromDevMgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqConfInfoFromDevMgr)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqConfInfoFromDevMgr* default_instance_;
};
// -------------------------------------------------------------------

class ReqGetDeviceInfo : public ::google::protobuf::Message {
 public:
  ReqGetDeviceInfo();
  virtual ~ReqGetDeviceInfo();

  ReqGetDeviceInfo(const ReqGetDeviceInfo& from);

  inline ReqGetDeviceInfo& operator=(const ReqGetDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetDeviceInfo& default_instance();

  void Swap(ReqGetDeviceInfo* other);

  // implements Message ----------------------------------------------

  ReqGetDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGetDeviceInfo& from);
  void MergeFrom(const ReqGetDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 svr_type = 3;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 get_svr_type = 4;
  inline bool has_get_svr_type() const;
  inline void clear_get_svr_type();
  static const int kGetSvrTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 get_svr_type() const;
  inline void set_get_svr_type(::google::protobuf::uint32 value);

  // optional uint32 devnums = 5;
  inline bool has_devnums() const;
  inline void clear_devnums();
  static const int kDevnumsFieldNumber = 5;
  inline ::google::protobuf::uint32 devnums() const;
  inline void set_devnums(::google::protobuf::uint32 value);

  // optional string domainname = 6;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 6;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqGetDeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_get_svr_type();
  inline void clear_has_get_svr_type();
  inline void set_has_devnums();
  inline void clear_has_devnums();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 get_svr_type_;
  ::google::protobuf::uint32 devnums_;
  ::std::string* domainname_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqGetDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqGetSysDeviceInfo : public ::google::protobuf::Message {
 public:
  ReqGetSysDeviceInfo();
  virtual ~ReqGetSysDeviceInfo();

  ReqGetSysDeviceInfo(const ReqGetSysDeviceInfo& from);

  inline ReqGetSysDeviceInfo& operator=(const ReqGetSysDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetSysDeviceInfo& default_instance();

  void Swap(ReqGetSysDeviceInfo* other);

  // implements Message ----------------------------------------------

  ReqGetSysDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGetSysDeviceInfo& from);
  void MergeFrom(const ReqGetSysDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 svr_type = 3;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional string domainname = 4;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 4;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional uint32 get_svr_type = 5;
  inline bool has_get_svr_type() const;
  inline void clear_get_svr_type();
  static const int kGetSvrTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 get_svr_type() const;
  inline void set_get_svr_type(::google::protobuf::uint32 value);

  // repeated string get_domainnames = 6;
  inline int get_domainnames_size() const;
  inline void clear_get_domainnames();
  static const int kGetDomainnamesFieldNumber = 6;
  inline const ::std::string& get_domainnames(int index) const;
  inline ::std::string* mutable_get_domainnames(int index);
  inline void set_get_domainnames(int index, const ::std::string& value);
  inline void set_get_domainnames(int index, const char* value);
  inline void set_get_domainnames(int index, const char* value, size_t size);
  inline ::std::string* add_get_domainnames();
  inline void add_get_domainnames(const ::std::string& value);
  inline void add_get_domainnames(const char* value);
  inline void add_get_domainnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& get_domainnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_get_domainnames();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqGetSysDeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_get_svr_type();
  inline void clear_has_get_svr_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svr_type_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> get_domainnames_;
  ::google::protobuf::uint32 get_svr_type_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqGetSysDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqGetSystemCurLoad : public ::google::protobuf::Message {
 public:
  ReqGetSystemCurLoad();
  virtual ~ReqGetSystemCurLoad();

  ReqGetSystemCurLoad(const ReqGetSystemCurLoad& from);

  inline ReqGetSystemCurLoad& operator=(const ReqGetSystemCurLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetSystemCurLoad& default_instance();

  void Swap(ReqGetSystemCurLoad* other);

  // implements Message ----------------------------------------------

  ReqGetSystemCurLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGetSystemCurLoad& from);
  void MergeFrom(const ReqGetSystemCurLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqGetSystemCurLoad)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqGetSystemCurLoad* default_instance_;
};
// -------------------------------------------------------------------

class ReqUpdateDeviceInfo_DeviceInfo : public ::google::protobuf::Message {
 public:
  ReqUpdateDeviceInfo_DeviceInfo();
  virtual ~ReqUpdateDeviceInfo_DeviceInfo();

  ReqUpdateDeviceInfo_DeviceInfo(const ReqUpdateDeviceInfo_DeviceInfo& from);

  inline ReqUpdateDeviceInfo_DeviceInfo& operator=(const ReqUpdateDeviceInfo_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUpdateDeviceInfo_DeviceInfo& default_instance();

  void Swap(ReqUpdateDeviceInfo_DeviceInfo* other);

  // implements Message ----------------------------------------------

  ReqUpdateDeviceInfo_DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUpdateDeviceInfo_DeviceInfo& from);
  void MergeFrom(const ReqUpdateDeviceInfo_DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional uint32 update_svr_type = 2;
  inline bool has_update_svr_type() const;
  inline void clear_update_svr_type();
  static const int kUpdateSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 update_svr_type() const;
  inline void set_update_svr_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_update_svr_type();
  inline void clear_has_update_svr_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 update_svr_type_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqUpdateDeviceInfo_DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqUpdateDeviceInfo : public ::google::protobuf::Message {
 public:
  ReqUpdateDeviceInfo();
  virtual ~ReqUpdateDeviceInfo();

  ReqUpdateDeviceInfo(const ReqUpdateDeviceInfo& from);

  inline ReqUpdateDeviceInfo& operator=(const ReqUpdateDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUpdateDeviceInfo& default_instance();

  void Swap(ReqUpdateDeviceInfo* other);

  // implements Message ----------------------------------------------

  ReqUpdateDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUpdateDeviceInfo& from);
  void MergeFrom(const ReqUpdateDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqUpdateDeviceInfo_DeviceInfo DeviceInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 svr_type = 3;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
  inline int update_devices_size() const;
  inline void clear_update_devices();
  static const int kUpdateDevicesFieldNumber = 4;
  inline const ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo& update_devices(int index) const;
  inline ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo* mutable_update_devices(int index);
  inline ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo* add_update_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo >&
      update_devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo >*
      mutable_update_devices();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqUpdateDeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo > update_devices_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static ReqUpdateDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndNewTermJoinConf : public ::google::protobuf::Message {
 public:
  IndNewTermJoinConf();
  virtual ~IndNewTermJoinConf();

  IndNewTermJoinConf(const IndNewTermJoinConf& from);

  inline IndNewTermJoinConf& operator=(const IndNewTermJoinConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNewTermJoinConf& default_instance();

  void Swap(IndNewTermJoinConf* other);

  // implements Message ----------------------------------------------

  IndNewTermJoinConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNewTermJoinConf& from);
  void MergeFrom(const IndNewTermJoinConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 suid = 4;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 4;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string alias = 6;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 6;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional uint32 netmpid = 7;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 7;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional uint64 confreportid = 8;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 8;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint32 fromtype = 9;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromtypeFieldNumber = 9;
  inline ::google::protobuf::uint32 fromtype() const;
  inline void set_fromtype(::google::protobuf::uint32 value);

  // optional uint32 termtype = 10;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 10;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 producttype = 11;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 11;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNewTermJoinConf)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* ip_;
  ::std::string* alias_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint32 netmpid_;
  ::google::protobuf::uint32 fromtype_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndNewTermJoinConf* default_instance_;
};
// -------------------------------------------------------------------

class IndTermLeaveConf : public ::google::protobuf::Message {
 public:
  IndTermLeaveConf();
  virtual ~IndTermLeaveConf();

  IndTermLeaveConf(const IndTermLeaveConf& from);

  inline IndTermLeaveConf& operator=(const IndTermLeaveConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTermLeaveConf& default_instance();

  void Swap(IndTermLeaveConf* other);

  // implements Message ----------------------------------------------

  IndTermLeaveConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTermLeaveConf& from);
  void MergeFrom(const IndTermLeaveConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 suid = 4;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 4;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string alias = 6;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 6;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional uint32 netmpid = 7;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 7;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional uint64 confreportid = 8;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 8;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTermLeaveConf)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* ip_;
  ::std::string* alias_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint32 netmpid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTermLeaveConf* default_instance_;
};
// -------------------------------------------------------------------

class IndMCCreateConf : public ::google::protobuf::Message {
 public:
  IndMCCreateConf();
  virtual ~IndMCCreateConf();

  IndMCCreateConf(const IndMCCreateConf& from);

  inline IndMCCreateConf& operator=(const IndMCCreateConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCCreateConf& default_instance();

  void Swap(IndMCCreateConf* other);

  // implements Message ----------------------------------------------

  IndMCCreateConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCCreateConf& from);
  void MergeFrom(const IndMCCreateConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional bool isok = 3;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 3;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint64 confid = 4;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 4;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional string failreason = 5;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 5;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional uint64 confreportid = 6;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 6;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCCreateConf)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  bool isok_;
  ::google::protobuf::uint64 confid_;
  ::std::string* failreason_;
  ::google::protobuf::uint64 confreportid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndMCCreateConf* default_instance_;
};
// -------------------------------------------------------------------

class IndsertodevHeart_LoadInfo : public ::google::protobuf::Message {
 public:
  IndsertodevHeart_LoadInfo();
  virtual ~IndsertodevHeart_LoadInfo();

  IndsertodevHeart_LoadInfo(const IndsertodevHeart_LoadInfo& from);

  inline IndsertodevHeart_LoadInfo& operator=(const IndsertodevHeart_LoadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndsertodevHeart_LoadInfo& default_instance();

  void Swap(IndsertodevHeart_LoadInfo* other);

  // implements Message ----------------------------------------------

  IndsertodevHeart_LoadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndsertodevHeart_LoadInfo& from);
  void MergeFrom(const IndsertodevHeart_LoadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ternum = 1;
  inline bool has_ternum() const;
  inline void clear_ternum();
  static const int kTernumFieldNumber = 1;
  inline ::google::protobuf::uint32 ternum() const;
  inline void set_ternum(::google::protobuf::uint32 value);

  // optional uint32 cpu = 2;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 2;
  inline ::google::protobuf::uint32 cpu() const;
  inline void set_cpu(::google::protobuf::uint32 value);

  // optional uint32 srcnt = 3;
  inline bool has_srcnt() const;
  inline void clear_srcnt();
  static const int kSrcntFieldNumber = 3;
  inline ::google::protobuf::uint32 srcnt() const;
  inline void set_srcnt(::google::protobuf::uint32 value);

  // optional uint32 stdcnt = 4;
  inline bool has_stdcnt() const;
  inline void clear_stdcnt();
  static const int kStdcntFieldNumber = 4;
  inline ::google::protobuf::uint32 stdcnt() const;
  inline void set_stdcnt(::google::protobuf::uint32 value);

  // optional uint32 reccnt = 5;
  inline bool has_reccnt() const;
  inline void clear_reccnt();
  static const int kReccntFieldNumber = 5;
  inline ::google::protobuf::uint32 reccnt() const;
  inline void set_reccnt(::google::protobuf::uint32 value);

  // optional uint32 confcnt = 6;
  inline bool has_confcnt() const;
  inline void clear_confcnt();
  static const int kConfcntFieldNumber = 6;
  inline ::google::protobuf::uint32 confcnt() const;
  inline void set_confcnt(::google::protobuf::uint32 value);

  // optional uint32 livecnt = 7;
  inline bool has_livecnt() const;
  inline void clear_livecnt();
  static const int kLivecntFieldNumber = 7;
  inline ::google::protobuf::uint32 livecnt() const;
  inline void set_livecnt(::google::protobuf::uint32 value);

  // optional uint32 analycnt = 8;
  inline bool has_analycnt() const;
  inline void clear_analycnt();
  static const int kAnalycntFieldNumber = 8;
  inline ::google::protobuf::uint32 analycnt() const;
  inline void set_analycnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndsertodevHeart.LoadInfo)
 private:
  inline void set_has_ternum();
  inline void clear_has_ternum();
  inline void set_has_cpu();
  inline void clear_has_cpu();
  inline void set_has_srcnt();
  inline void clear_has_srcnt();
  inline void set_has_stdcnt();
  inline void clear_has_stdcnt();
  inline void set_has_reccnt();
  inline void clear_has_reccnt();
  inline void set_has_confcnt();
  inline void clear_has_confcnt();
  inline void set_has_livecnt();
  inline void clear_has_livecnt();
  inline void set_has_analycnt();
  inline void clear_has_analycnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ternum_;
  ::google::protobuf::uint32 cpu_;
  ::google::protobuf::uint32 srcnt_;
  ::google::protobuf::uint32 stdcnt_;
  ::google::protobuf::uint32 reccnt_;
  ::google::protobuf::uint32 confcnt_;
  ::google::protobuf::uint32 livecnt_;
  ::google::protobuf::uint32 analycnt_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndsertodevHeart_LoadInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndsertodevHeart : public ::google::protobuf::Message {
 public:
  IndsertodevHeart();
  virtual ~IndsertodevHeart();

  IndsertodevHeart(const IndsertodevHeart& from);

  inline IndsertodevHeart& operator=(const IndsertodevHeart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndsertodevHeart& default_instance();

  void Swap(IndsertodevHeart* other);

  // implements Message ----------------------------------------------

  IndsertodevHeart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndsertodevHeart& from);
  void MergeFrom(const IndsertodevHeart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndsertodevHeart_LoadInfo LoadInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 load1 = 3;
  inline bool has_load1() const;
  inline void clear_load1();
  static const int kLoad1FieldNumber = 3;
  inline ::google::protobuf::uint32 load1() const;
  inline void set_load1(::google::protobuf::uint32 value);

  // optional uint32 load2 = 4;
  inline bool has_load2() const;
  inline void clear_load2();
  static const int kLoad2FieldNumber = 4;
  inline ::google::protobuf::uint32 load2() const;
  inline void set_load2(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 5;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
  inline bool has_loadinfo() const;
  inline void clear_loadinfo();
  static const int kLoadinfoFieldNumber = 6;
  inline const ::SRMsgs::IndsertodevHeart_LoadInfo& loadinfo() const;
  inline ::SRMsgs::IndsertodevHeart_LoadInfo* mutable_loadinfo();
  inline ::SRMsgs::IndsertodevHeart_LoadInfo* release_loadinfo();
  inline void set_allocated_loadinfo(::SRMsgs::IndsertodevHeart_LoadInfo* loadinfo);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndsertodevHeart)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_load1();
  inline void clear_has_load1();
  inline void set_has_load2();
  inline void clear_has_load2();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_loadinfo();
  inline void clear_has_loadinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 load1_;
  ::google::protobuf::uint32 load2_;
  ::google::protobuf::uint32 svr_type_;
  ::SRMsgs::IndsertodevHeart_LoadInfo* loadinfo_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndsertodevHeart* default_instance_;
};
// -------------------------------------------------------------------

class IndMCEndConf : public ::google::protobuf::Message {
 public:
  IndMCEndConf();
  virtual ~IndMCEndConf();

  IndMCEndConf(const IndMCEndConf& from);

  inline IndMCEndConf& operator=(const IndMCEndConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCEndConf& default_instance();

  void Swap(IndMCEndConf* other);

  // implements Message ----------------------------------------------

  IndMCEndConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCEndConf& from);
  void MergeFrom(const IndMCEndConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint64 confreportid = 4;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 4;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint32 permanentenable = 5;
  inline bool has_permanentenable() const;
  inline void clear_permanentenable();
  static const int kPermanentenableFieldNumber = 5;
  inline ::google::protobuf::uint32 permanentenable() const;
  inline void set_permanentenable(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCEndConf)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_permanentenable();
  inline void clear_has_permanentenable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 permanentenable_;
  ::google::protobuf::uint64 confreportid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndMCEndConf* default_instance_;
};
// -------------------------------------------------------------------

class IndNetMPConfInfoInMC : public ::google::protobuf::Message {
 public:
  IndNetMPConfInfoInMC();
  virtual ~IndNetMPConfInfoInMC();

  IndNetMPConfInfoInMC(const IndNetMPConfInfoInMC& from);

  inline IndNetMPConfInfoInMC& operator=(const IndNetMPConfInfoInMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNetMPConfInfoInMC& default_instance();

  void Swap(IndNetMPConfInfoInMC* other);

  // implements Message ----------------------------------------------

  IndNetMPConfInfoInMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNetMPConfInfoInMC& from);
  void MergeFrom(const IndNetMPConfInfoInMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 netmpid = 4;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 4;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional uint32 addordel = 5;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 5;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // optional uint64 confreportid = 6;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 6;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNetMPConfInfoInMC)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_addordel();
  inline void clear_has_addordel();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 netmpid_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint32 addordel_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndNetMPConfInfoInMC* default_instance_;
};
// -------------------------------------------------------------------

class IndNetMPConnStatusInMC : public ::google::protobuf::Message {
 public:
  IndNetMPConnStatusInMC();
  virtual ~IndNetMPConnStatusInMC();

  IndNetMPConnStatusInMC(const IndNetMPConnStatusInMC& from);

  inline IndNetMPConnStatusInMC& operator=(const IndNetMPConnStatusInMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndNetMPConnStatusInMC& default_instance();

  void Swap(IndNetMPConnStatusInMC* other);

  // implements Message ----------------------------------------------

  IndNetMPConnStatusInMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndNetMPConnStatusInMC& from);
  void MergeFrom(const IndNetMPConnStatusInMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 netmpid = 3;
  inline bool has_netmpid() const;
  inline void clear_netmpid();
  static const int kNetmpidFieldNumber = 3;
  inline ::google::protobuf::uint32 netmpid() const;
  inline void set_netmpid(::google::protobuf::uint32 value);

  // optional uint32 connstatus = 4;
  inline bool has_connstatus() const;
  inline void clear_connstatus();
  static const int kConnstatusFieldNumber = 4;
  inline ::google::protobuf::uint32 connstatus() const;
  inline void set_connstatus(::google::protobuf::uint32 value);

  // optional uint32 groupid = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndNetMPConnStatusInMC)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_netmpid();
  inline void clear_has_netmpid();
  inline void set_has_connstatus();
  inline void clear_has_connstatus();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 netmpid_;
  ::google::protobuf::uint32 connstatus_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndNetMPConnStatusInMC* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStartRec : public ::google::protobuf::Message {
 public:
  IndCRSStartRec();
  virtual ~IndCRSStartRec();

  IndCRSStartRec(const IndCRSStartRec& from);

  inline IndCRSStartRec& operator=(const IndCRSStartRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStartRec& default_instance();

  void Swap(IndCRSStartRec* other);

  // implements Message ----------------------------------------------

  IndCRSStartRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStartRec& from);
  void MergeFrom(const IndCRSStartRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 5;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 5;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 6;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 6;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 7;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 7;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string relativepath = 8;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 8;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional string confname = 9;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 9;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional uint64 confreportid = 10;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 10;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStartRec)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::std::string* relativepath_;
  ::std::string* confname_;
  ::google::protobuf::uint64 confreportid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStartRec* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStopRec : public ::google::protobuf::Message {
 public:
  IndCRSStopRec();
  virtual ~IndCRSStopRec();

  IndCRSStopRec(const IndCRSStopRec& from);

  inline IndCRSStopRec& operator=(const IndCRSStopRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStopRec& default_instance();

  void Swap(IndCRSStopRec* other);

  // implements Message ----------------------------------------------

  IndCRSStopRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStopRec& from);
  void MergeFrom(const IndCRSStopRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 5;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 5;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 6;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 6;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 7;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 7;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string relativepath = 8;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 8;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional uint32 stopreason = 9;
  inline bool has_stopreason() const;
  inline void clear_stopreason();
  static const int kStopreasonFieldNumber = 9;
  inline ::google::protobuf::uint32 stopreason() const;
  inline void set_stopreason(::google::protobuf::uint32 value);

  // optional string confname = 10;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 10;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional uint64 confreportid = 11;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 11;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint64 filesize = 12;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 12;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStopRec)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_stopreason();
  inline void clear_has_stopreason();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_filesize();
  inline void clear_has_filesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::std::string* relativepath_;
  ::std::string* confname_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 stopreason_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStopRec* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSFileStoragePath : public ::google::protobuf::Message {
 public:
  IndCRSFileStoragePath();
  virtual ~IndCRSFileStoragePath();

  IndCRSFileStoragePath(const IndCRSFileStoragePath& from);

  inline IndCRSFileStoragePath& operator=(const IndCRSFileStoragePath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSFileStoragePath& default_instance();

  void Swap(IndCRSFileStoragePath* other);

  // implements Message ----------------------------------------------

  IndCRSFileStoragePath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSFileStoragePath& from);
  void MergeFrom(const IndCRSFileStoragePath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional string filestorsvrip = 5;
  inline bool has_filestorsvrip() const;
  inline void clear_filestorsvrip();
  static const int kFilestorsvripFieldNumber = 5;
  inline const ::std::string& filestorsvrip() const;
  inline void set_filestorsvrip(const ::std::string& value);
  inline void set_filestorsvrip(const char* value);
  inline void set_filestorsvrip(const char* value, size_t size);
  inline ::std::string* mutable_filestorsvrip();
  inline ::std::string* release_filestorsvrip();
  inline void set_allocated_filestorsvrip(::std::string* filestorsvrip);

  // optional string filestorpath = 6;
  inline bool has_filestorpath() const;
  inline void clear_filestorpath();
  static const int kFilestorpathFieldNumber = 6;
  inline const ::std::string& filestorpath() const;
  inline void set_filestorpath(const ::std::string& value);
  inline void set_filestorpath(const char* value);
  inline void set_filestorpath(const char* value, size_t size);
  inline ::std::string* mutable_filestorpath();
  inline ::std::string* release_filestorpath();
  inline void set_allocated_filestorpath(::std::string* filestorpath);

  // optional string sdefilepath = 7;
  inline bool has_sdefilepath() const;
  inline void clear_sdefilepath();
  static const int kSdefilepathFieldNumber = 7;
  inline const ::std::string& sdefilepath() const;
  inline void set_sdefilepath(const ::std::string& value);
  inline void set_sdefilepath(const char* value);
  inline void set_sdefilepath(const char* value, size_t size);
  inline ::std::string* mutable_sdefilepath();
  inline ::std::string* release_sdefilepath();
  inline void set_allocated_sdefilepath(::std::string* sdefilepath);

  // optional string relativepath = 8;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativepathFieldNumber = 8;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional uint32 recordstate = 9;
  inline bool has_recordstate() const;
  inline void clear_recordstate();
  static const int kRecordstateFieldNumber = 9;
  inline ::google::protobuf::uint32 recordstate() const;
  inline void set_recordstate(::google::protobuf::uint32 value);

  // optional uint64 confreportid = 10;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 10;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint64 filesize = 11;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 11;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSFileStoragePath)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_filestorsvrip();
  inline void clear_has_filestorsvrip();
  inline void set_has_filestorpath();
  inline void clear_has_filestorpath();
  inline void set_has_sdefilepath();
  inline void clear_has_sdefilepath();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_recordstate();
  inline void clear_has_recordstate();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_filesize();
  inline void clear_has_filesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* filestorsvrip_;
  ::std::string* filestorpath_;
  ::std::string* sdefilepath_;
  ::std::string* relativepath_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint64 filesize_;
  ::google::protobuf::uint32 recordstate_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSFileStoragePath* default_instance_;
};
// -------------------------------------------------------------------

class IndVASAnalyVideoState : public ::google::protobuf::Message {
 public:
  IndVASAnalyVideoState();
  virtual ~IndVASAnalyVideoState();

  IndVASAnalyVideoState(const IndVASAnalyVideoState& from);

  inline IndVASAnalyVideoState& operator=(const IndVASAnalyVideoState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASAnalyVideoState& default_instance();

  void Swap(IndVASAnalyVideoState* other);

  // implements Message ----------------------------------------------

  IndVASAnalyVideoState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASAnalyVideoState& from);
  void MergeFrom(const IndVASAnalyVideoState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint64 confreportid = 4;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 4;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint32 analystate = 5;
  inline bool has_analystate() const;
  inline void clear_analystate();
  static const int kAnalystateFieldNumber = 5;
  inline ::google::protobuf::uint32 analystate() const;
  inline void set_analystate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASAnalyVideoState)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_analystate();
  inline void clear_has_analystate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 analystate_;
  ::google::protobuf::uint64 confreportid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndVASAnalyVideoState* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStartLive_LiveAddr : public ::google::protobuf::Message {
 public:
  IndCRSStartLive_LiveAddr();
  virtual ~IndCRSStartLive_LiveAddr();

  IndCRSStartLive_LiveAddr(const IndCRSStartLive_LiveAddr& from);

  inline IndCRSStartLive_LiveAddr& operator=(const IndCRSStartLive_LiveAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStartLive_LiveAddr& default_instance();

  void Swap(IndCRSStartLive_LiveAddr* other);

  // implements Message ----------------------------------------------

  IndCRSStartLive_LiveAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStartLive_LiveAddr& from);
  void MergeFrom(const IndCRSStartLive_LiveAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStartLive.LiveAddr)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStartLive_LiveAddr* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStartLive_LiveSetting : public ::google::protobuf::Message {
 public:
  IndCRSStartLive_LiveSetting();
  virtual ~IndCRSStartLive_LiveSetting();

  IndCRSStartLive_LiveSetting(const IndCRSStartLive_LiveSetting& from);

  inline IndCRSStartLive_LiveSetting& operator=(const IndCRSStartLive_LiveSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStartLive_LiveSetting& default_instance();

  void Swap(IndCRSStartLive_LiveSetting* other);

  // implements Message ----------------------------------------------

  IndCRSStartLive_LiveSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStartLive_LiveSetting& from);
  void MergeFrom(const IndCRSStartLive_LiveSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chairman = 1;
  inline bool has_chairman() const;
  inline void clear_chairman();
  static const int kChairmanFieldNumber = 1;
  inline const ::std::string& chairman() const;
  inline void set_chairman(const ::std::string& value);
  inline void set_chairman(const char* value);
  inline void set_chairman(const char* value, size_t size);
  inline ::std::string* mutable_chairman();
  inline ::std::string* release_chairman();
  inline void set_allocated_chairman(::std::string* chairman);

  // optional string subject = 2;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 2;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional string abstract = 3;
  inline bool has_abstract() const;
  inline void clear_abstract();
  static const int kAbstractFieldNumber = 3;
  inline const ::std::string& abstract() const;
  inline void set_abstract(const ::std::string& value);
  inline void set_abstract(const char* value);
  inline void set_abstract(const char* value, size_t size);
  inline ::std::string* mutable_abstract();
  inline ::std::string* release_abstract();
  inline void set_allocated_abstract(::std::string* abstract);

  // optional uint32 ispublic = 4;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIspublicFieldNumber = 4;
  inline ::google::protobuf::uint32 ispublic() const;
  inline void set_ispublic(::google::protobuf::uint32 value);

  // optional string livepwd = 5;
  inline bool has_livepwd() const;
  inline void clear_livepwd();
  static const int kLivepwdFieldNumber = 5;
  inline const ::std::string& livepwd() const;
  inline void set_livepwd(const ::std::string& value);
  inline void set_livepwd(const char* value);
  inline void set_livepwd(const char* value, size_t size);
  inline ::std::string* mutable_livepwd();
  inline ::std::string* release_livepwd();
  inline void set_allocated_livepwd(::std::string* livepwd);

  // optional uint32 isuserec = 6;
  inline bool has_isuserec() const;
  inline void clear_isuserec();
  static const int kIsuserecFieldNumber = 6;
  inline ::google::protobuf::uint32 isuserec() const;
  inline void set_isuserec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStartLive.LiveSetting)
 private:
  inline void set_has_chairman();
  inline void clear_has_chairman();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_abstract();
  inline void clear_has_abstract();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_livepwd();
  inline void clear_has_livepwd();
  inline void set_has_isuserec();
  inline void clear_has_isuserec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* chairman_;
  ::std::string* subject_;
  ::std::string* abstract_;
  ::std::string* livepwd_;
  ::google::protobuf::uint32 ispublic_;
  ::google::protobuf::uint32 isuserec_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStartLive_LiveSetting* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStartLive : public ::google::protobuf::Message {
 public:
  IndCRSStartLive();
  virtual ~IndCRSStartLive();

  IndCRSStartLive(const IndCRSStartLive& from);

  inline IndCRSStartLive& operator=(const IndCRSStartLive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStartLive& default_instance();

  void Swap(IndCRSStartLive* other);

  // implements Message ----------------------------------------------

  IndCRSStartLive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStartLive& from);
  void MergeFrom(const IndCRSStartLive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndCRSStartLive_LiveAddr LiveAddr;
  typedef IndCRSStartLive_LiveSetting LiveSetting;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional string livepushurl = 5;
  inline bool has_livepushurl() const;
  inline void clear_livepushurl();
  static const int kLivepushurlFieldNumber = 5;
  inline const ::std::string& livepushurl() const;
  inline void set_livepushurl(const ::std::string& value);
  inline void set_livepushurl(const char* value);
  inline void set_livepushurl(const char* value, size_t size);
  inline ::std::string* mutable_livepushurl();
  inline ::std::string* release_livepushurl();
  inline void set_allocated_livepushurl(::std::string* livepushurl);

  // optional string livepullurl = 6;
  inline bool has_livepullurl() const;
  inline void clear_livepullurl();
  static const int kLivepullurlFieldNumber = 6;
  inline const ::std::string& livepullurl() const;
  inline void set_livepullurl(const ::std::string& value);
  inline void set_livepullurl(const char* value);
  inline void set_livepullurl(const char* value, size_t size);
  inline ::std::string* mutable_livepullurl();
  inline ::std::string* release_livepullurl();
  inline void set_allocated_livepullurl(::std::string* livepullurl);

  // optional string liveplayurl = 7;
  inline bool has_liveplayurl() const;
  inline void clear_liveplayurl();
  static const int kLiveplayurlFieldNumber = 7;
  inline const ::std::string& liveplayurl() const;
  inline void set_liveplayurl(const ::std::string& value);
  inline void set_liveplayurl(const char* value);
  inline void set_liveplayurl(const char* value, size_t size);
  inline ::std::string* mutable_liveplayurl();
  inline ::std::string* release_liveplayurl();
  inline void set_allocated_liveplayurl(::std::string* liveplayurl);

  // optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
  inline bool has_livesetinfo() const;
  inline void clear_livesetinfo();
  static const int kLivesetinfoFieldNumber = 8;
  inline const ::SRMsgs::IndCRSStartLive_LiveSetting& livesetinfo() const;
  inline ::SRMsgs::IndCRSStartLive_LiveSetting* mutable_livesetinfo();
  inline ::SRMsgs::IndCRSStartLive_LiveSetting* release_livesetinfo();
  inline void set_allocated_livesetinfo(::SRMsgs::IndCRSStartLive_LiveSetting* livesetinfo);

  // optional uint64 confreportid = 9;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 9;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint32 livesvrtype = 10;
  inline bool has_livesvrtype() const;
  inline void clear_livesvrtype();
  static const int kLivesvrtypeFieldNumber = 10;
  inline ::google::protobuf::uint32 livesvrtype() const;
  inline void set_livesvrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
  inline int liveaddrs_size() const;
  inline void clear_liveaddrs();
  static const int kLiveaddrsFieldNumber = 11;
  inline const ::SRMsgs::IndCRSStartLive_LiveAddr& liveaddrs(int index) const;
  inline ::SRMsgs::IndCRSStartLive_LiveAddr* mutable_liveaddrs(int index);
  inline ::SRMsgs::IndCRSStartLive_LiveAddr* add_liveaddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSStartLive_LiveAddr >&
      liveaddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSStartLive_LiveAddr >*
      mutable_liveaddrs();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStartLive)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_livepushurl();
  inline void clear_has_livepushurl();
  inline void set_has_livepullurl();
  inline void clear_has_livepullurl();
  inline void set_has_liveplayurl();
  inline void clear_has_liveplayurl();
  inline void set_has_livesetinfo();
  inline void clear_has_livesetinfo();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_livesvrtype();
  inline void clear_has_livesvrtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* livepushurl_;
  ::std::string* livepullurl_;
  ::std::string* liveplayurl_;
  ::SRMsgs::IndCRSStartLive_LiveSetting* livesetinfo_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSStartLive_LiveAddr > liveaddrs_;
  ::google::protobuf::uint32 livesvrtype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStartLive* default_instance_;
};
// -------------------------------------------------------------------

class IndCRSStopLive : public ::google::protobuf::Message {
 public:
  IndCRSStopLive();
  virtual ~IndCRSStopLive();

  IndCRSStopLive(const IndCRSStopLive& from);

  inline IndCRSStopLive& operator=(const IndCRSStopLive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndCRSStopLive& default_instance();

  void Swap(IndCRSStopLive* other);

  // implements Message ----------------------------------------------

  IndCRSStopLive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndCRSStopLive& from);
  void MergeFrom(const IndCRSStopLive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 crsid = 4;
  inline bool has_crsid() const;
  inline void clear_crsid();
  static const int kCrsidFieldNumber = 4;
  inline ::google::protobuf::uint32 crsid() const;
  inline void set_crsid(::google::protobuf::uint32 value);

  // optional string liveurl = 5;
  inline bool has_liveurl() const;
  inline void clear_liveurl();
  static const int kLiveurlFieldNumber = 5;
  inline const ::std::string& liveurl() const;
  inline void set_liveurl(const ::std::string& value);
  inline void set_liveurl(const char* value);
  inline void set_liveurl(const char* value, size_t size);
  inline ::std::string* mutable_liveurl();
  inline ::std::string* release_liveurl();
  inline void set_allocated_liveurl(::std::string* liveurl);

  // optional uint64 confreportid = 6;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 6;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndCRSStopLive)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_crsid();
  inline void clear_has_crsid();
  inline void set_has_liveurl();
  inline void clear_has_liveurl();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 crsid_;
  ::google::protobuf::uint64 confid_;
  ::std::string* liveurl_;
  ::google::protobuf::uint64 confreportid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndCRSStopLive* default_instance_;
};
// -------------------------------------------------------------------

class IndModifyConfCallList_ParticipantInfo : public ::google::protobuf::Message {
 public:
  IndModifyConfCallList_ParticipantInfo();
  virtual ~IndModifyConfCallList_ParticipantInfo();

  IndModifyConfCallList_ParticipantInfo(const IndModifyConfCallList_ParticipantInfo& from);

  inline IndModifyConfCallList_ParticipantInfo& operator=(const IndModifyConfCallList_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndModifyConfCallList_ParticipantInfo& default_instance();

  void Swap(IndModifyConfCallList_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  IndModifyConfCallList_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndModifyConfCallList_ParticipantInfo& from);
  void MergeFrom(const IndModifyConfCallList_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndModifyConfCallList.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndModifyConfCallList_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndModifyConfCallList_RollCallInfo : public ::google::protobuf::Message {
 public:
  IndModifyConfCallList_RollCallInfo();
  virtual ~IndModifyConfCallList_RollCallInfo();

  IndModifyConfCallList_RollCallInfo(const IndModifyConfCallList_RollCallInfo& from);

  inline IndModifyConfCallList_RollCallInfo& operator=(const IndModifyConfCallList_RollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndModifyConfCallList_RollCallInfo& default_instance();

  void Swap(IndModifyConfCallList_RollCallInfo* other);

  // implements Message ----------------------------------------------

  IndModifyConfCallList_RollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndModifyConfCallList_RollCallInfo& from);
  void MergeFrom(const IndModifyConfCallList_RollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::IndModifyConfCallList_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::IndModifyConfCallList_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::IndModifyConfCallList_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndModifyConfCallList_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndModifyConfCallList_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndModifyConfCallList.RollCallInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndModifyConfCallList_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndModifyConfCallList_RollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndModifyConfCallList : public ::google::protobuf::Message {
 public:
  IndModifyConfCallList();
  virtual ~IndModifyConfCallList();

  IndModifyConfCallList(const IndModifyConfCallList& from);

  inline IndModifyConfCallList& operator=(const IndModifyConfCallList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndModifyConfCallList& default_instance();

  void Swap(IndModifyConfCallList* other);

  // implements Message ----------------------------------------------

  IndModifyConfCallList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndModifyConfCallList& from);
  void MergeFrom(const IndModifyConfCallList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndModifyConfCallList_ParticipantInfo ParticipantInfo;
  typedef IndModifyConfCallList_RollCallInfo RollCallInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 optype = 4;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 4;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
  inline bool has_rollcalllist() const;
  inline void clear_rollcalllist();
  static const int kRollcalllistFieldNumber = 5;
  inline const ::SRMsgs::IndModifyConfCallList_RollCallInfo& rollcalllist() const;
  inline ::SRMsgs::IndModifyConfCallList_RollCallInfo* mutable_rollcalllist();
  inline ::SRMsgs::IndModifyConfCallList_RollCallInfo* release_rollcalllist();
  inline void set_allocated_rollcalllist(::SRMsgs::IndModifyConfCallList_RollCallInfo* rollcalllist);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndModifyConfCallList)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_rollcalllist();
  inline void clear_has_rollcalllist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 optype_;
  ::google::protobuf::uint64 confid_;
  ::SRMsgs::IndModifyConfCallList_RollCallInfo* rollcalllist_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndModifyConfCallList* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_FrameInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_FrameInfo();
  virtual ~IndTerStatisticsInfo_FrameInfo();

  IndTerStatisticsInfo_FrameInfo(const IndTerStatisticsInfo_FrameInfo& from);

  inline IndTerStatisticsInfo_FrameInfo& operator=(const IndTerStatisticsInfo_FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_FrameInfo& default_instance();

  void Swap(IndTerStatisticsInfo_FrameInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_FrameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_FrameInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_FrameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fsw = 1;
  inline bool has_fsw() const;
  inline void clear_fsw();
  static const int kFswFieldNumber = 1;
  inline ::google::protobuf::uint32 fsw() const;
  inline void set_fsw(::google::protobuf::uint32 value);

  // optional uint32 fsh = 2;
  inline bool has_fsh() const;
  inline void clear_fsh();
  static const int kFshFieldNumber = 2;
  inline ::google::protobuf::uint32 fsh() const;
  inline void set_fsh(::google::protobuf::uint32 value);

  // optional uint32 fps = 3;
  inline bool has_fps() const;
  inline void clear_fps();
  static const int kFpsFieldNumber = 3;
  inline ::google::protobuf::uint32 fps() const;
  inline void set_fps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.FrameInfo)
 private:
  inline void set_has_fsw();
  inline void clear_has_fsw();
  inline void set_has_fsh();
  inline void clear_has_fsh();
  inline void set_has_fps();
  inline void clear_has_fps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fsw_;
  ::google::protobuf::uint32 fsh_;
  ::google::protobuf::uint32 fps_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_FrameInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_AdvanceInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_AdvanceInfo();
  virtual ~IndTerStatisticsInfo_AdvanceInfo();

  IndTerStatisticsInfo_AdvanceInfo(const IndTerStatisticsInfo_AdvanceInfo& from);

  inline IndTerStatisticsInfo_AdvanceInfo& operator=(const IndTerStatisticsInfo_AdvanceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_AdvanceInfo& default_instance();

  void Swap(IndTerStatisticsInfo_AdvanceInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_AdvanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_AdvanceInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_AdvanceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 jitter = 2;
  inline bool has_jitter() const;
  inline void clear_jitter();
  static const int kJitterFieldNumber = 2;
  inline ::google::protobuf::uint32 jitter() const;
  inline void set_jitter(::google::protobuf::uint32 value);

  // optional uint32 loss = 3;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 3;
  inline ::google::protobuf::uint32 loss() const;
  inline void set_loss(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_jitter();
  inline void clear_has_jitter();
  inline void set_has_loss();
  inline void clear_has_loss();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 jitter_;
  ::google::protobuf::uint32 loss_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_AdvanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_BaseInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_BaseInfo();
  virtual ~IndTerStatisticsInfo_BaseInfo();

  IndTerStatisticsInfo_BaseInfo(const IndTerStatisticsInfo_BaseInfo& from);

  inline IndTerStatisticsInfo_BaseInfo& operator=(const IndTerStatisticsInfo_BaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_BaseInfo& default_instance();

  void Swap(IndTerStatisticsInfo_BaseInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_BaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_BaseInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_BaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 format = 1;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 1;
  inline ::google::protobuf::uint32 format() const;
  inline void set_format(::google::protobuf::uint32 value);

  // optional uint32 bitrate = 2;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitrateFieldNumber = 2;
  inline ::google::protobuf::uint32 bitrate() const;
  inline void set_bitrate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.BaseInfo)
 private:
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 format_;
  ::google::protobuf::uint32 bitrate_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_BaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_AudioInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_AudioInfo();
  virtual ~IndTerStatisticsInfo_AudioInfo();

  IndTerStatisticsInfo_AudioInfo(const IndTerStatisticsInfo_AudioInfo& from);

  inline IndTerStatisticsInfo_AudioInfo& operator=(const IndTerStatisticsInfo_AudioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_AudioInfo& default_instance();

  void Swap(IndTerStatisticsInfo_AudioInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_AudioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_AudioInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_AudioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 atype = 1;
  inline bool has_atype() const;
  inline void clear_atype();
  static const int kAtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 atype() const;
  inline void set_atype(::google::protobuf::uint32 value);

  // optional uint32 atersuid = 2;
  inline bool has_atersuid() const;
  inline void clear_atersuid();
  static const int kAtersuidFieldNumber = 2;
  inline ::google::protobuf::uint32 atersuid() const;
  inline void set_atersuid(::google::protobuf::uint32 value);

  // optional string ateralias = 3;
  inline bool has_ateralias() const;
  inline void clear_ateralias();
  static const int kAteraliasFieldNumber = 3;
  inline const ::std::string& ateralias() const;
  inline void set_ateralias(const ::std::string& value);
  inline void set_ateralias(const char* value);
  inline void set_ateralias(const char* value, size_t size);
  inline ::std::string* mutable_ateralias();
  inline ::std::string* release_ateralias();
  inline void set_allocated_ateralias(::std::string* ateralias);

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 4;
  inline const ::SRMsgs::IndTerStatisticsInfo_BaseInfo& baseinfo() const;
  inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* mutable_baseinfo();
  inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo);

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  inline bool has_advinfo() const;
  inline void clear_advinfo();
  static const int kAdvinfoFieldNumber = 5;
  inline const ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo& advinfo() const;
  inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* mutable_advinfo();
  inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* release_advinfo();
  inline void set_allocated_advinfo(::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.AudioInfo)
 private:
  inline void set_has_atype();
  inline void clear_has_atype();
  inline void set_has_atersuid();
  inline void clear_has_atersuid();
  inline void set_has_ateralias();
  inline void clear_has_ateralias();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_advinfo();
  inline void clear_has_advinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 atype_;
  ::google::protobuf::uint32 atersuid_;
  ::std::string* ateralias_;
  ::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo_;
  ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_AudioInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_VideoInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_VideoInfo();
  virtual ~IndTerStatisticsInfo_VideoInfo();

  IndTerStatisticsInfo_VideoInfo(const IndTerStatisticsInfo_VideoInfo& from);

  inline IndTerStatisticsInfo_VideoInfo& operator=(const IndTerStatisticsInfo_VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_VideoInfo& default_instance();

  void Swap(IndTerStatisticsInfo_VideoInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_VideoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_VideoInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_VideoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 vtype = 1;
  inline bool has_vtype() const;
  inline void clear_vtype();
  static const int kVtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 vtype() const;
  inline void set_vtype(::google::protobuf::uint32 value);

  // optional uint32 vtersuid = 2;
  inline bool has_vtersuid() const;
  inline void clear_vtersuid();
  static const int kVtersuidFieldNumber = 2;
  inline ::google::protobuf::uint32 vtersuid() const;
  inline void set_vtersuid(::google::protobuf::uint32 value);

  // optional string vteralias = 3;
  inline bool has_vteralias() const;
  inline void clear_vteralias();
  static const int kVteraliasFieldNumber = 3;
  inline const ::std::string& vteralias() const;
  inline void set_vteralias(const ::std::string& value);
  inline void set_vteralias(const char* value);
  inline void set_vteralias(const char* value, size_t size);
  inline ::std::string* mutable_vteralias();
  inline ::std::string* release_vteralias();
  inline void set_allocated_vteralias(::std::string* vteralias);

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 4;
  inline const ::SRMsgs::IndTerStatisticsInfo_BaseInfo& baseinfo() const;
  inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* mutable_baseinfo();
  inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo);

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  inline bool has_advinfo() const;
  inline void clear_advinfo();
  static const int kAdvinfoFieldNumber = 5;
  inline const ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo& advinfo() const;
  inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* mutable_advinfo();
  inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* release_advinfo();
  inline void set_allocated_advinfo(::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo);

  // repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
  inline int frameinfo_size() const;
  inline void clear_frameinfo();
  static const int kFrameinfoFieldNumber = 6;
  inline const ::SRMsgs::IndTerStatisticsInfo_FrameInfo& frameinfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_FrameInfo* mutable_frameinfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_FrameInfo* add_frameinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_FrameInfo >&
      frameinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_FrameInfo >*
      mutable_frameinfo();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.VideoInfo)
 private:
  inline void set_has_vtype();
  inline void clear_has_vtype();
  inline void set_has_vtersuid();
  inline void clear_has_vtersuid();
  inline void set_has_vteralias();
  inline void clear_has_vteralias();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_advinfo();
  inline void clear_has_advinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 vtype_;
  ::google::protobuf::uint32 vtersuid_;
  ::std::string* vteralias_;
  ::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo_;
  ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_FrameInfo > frameinfo_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_VideoInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_XfeInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_XfeInfo();
  virtual ~IndTerStatisticsInfo_XfeInfo();

  IndTerStatisticsInfo_XfeInfo(const IndTerStatisticsInfo_XfeInfo& from);

  inline IndTerStatisticsInfo_XfeInfo& operator=(const IndTerStatisticsInfo_XfeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_XfeInfo& default_instance();

  void Swap(IndTerStatisticsInfo_XfeInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_XfeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_XfeInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_XfeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
  inline int ainfo_size() const;
  inline void clear_ainfo();
  static const int kAinfoFieldNumber = 1;
  inline const ::SRMsgs::IndTerStatisticsInfo_AudioInfo& ainfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_AudioInfo* mutable_ainfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_AudioInfo* add_ainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_AudioInfo >&
      ainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_AudioInfo >*
      mutable_ainfo();

  // repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
  inline int vinfo_size() const;
  inline void clear_vinfo();
  static const int kVinfoFieldNumber = 2;
  inline const ::SRMsgs::IndTerStatisticsInfo_VideoInfo& vinfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_VideoInfo* mutable_vinfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_VideoInfo* add_vinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_VideoInfo >&
      vinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_VideoInfo >*
      mutable_vinfo();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.XfeInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_AudioInfo > ainfo_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_VideoInfo > vinfo_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_XfeInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo_TerStatisticsInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo_TerStatisticsInfo();
  virtual ~IndTerStatisticsInfo_TerStatisticsInfo();

  IndTerStatisticsInfo_TerStatisticsInfo(const IndTerStatisticsInfo_TerStatisticsInfo& from);

  inline IndTerStatisticsInfo_TerStatisticsInfo& operator=(const IndTerStatisticsInfo_TerStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo_TerStatisticsInfo& default_instance();

  void Swap(IndTerStatisticsInfo_TerStatisticsInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo_TerStatisticsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo_TerStatisticsInfo& from);
  void MergeFrom(const IndTerStatisticsInfo_TerStatisticsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional string alias = 2;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 2;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
  inline int txinfo_size() const;
  inline void clear_txinfo();
  static const int kTxinfoFieldNumber = 3;
  inline const ::SRMsgs::IndTerStatisticsInfo_XfeInfo& txinfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* mutable_txinfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* add_txinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >&
      txinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >*
      mutable_txinfo();

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
  inline int rxinfo_size() const;
  inline void clear_rxinfo();
  static const int kRxinfoFieldNumber = 4;
  inline const ::SRMsgs::IndTerStatisticsInfo_XfeInfo& rxinfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* mutable_rxinfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* add_rxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >&
      rxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >*
      mutable_rxinfo();

  // optional uint32 fromtype = 5;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromtypeFieldNumber = 5;
  inline ::google::protobuf::uint32 fromtype() const;
  inline void set_fromtype(::google::protobuf::uint32 value);

  // optional uint32 termtype = 6;
  inline bool has_termtype() const;
  inline void clear_termtype();
  static const int kTermtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 termtype() const;
  inline void set_termtype(::google::protobuf::uint32 value);

  // optional uint32 txbweresult = 7;
  inline bool has_txbweresult() const;
  inline void clear_txbweresult();
  static const int kTxbweresultFieldNumber = 7;
  inline ::google::protobuf::uint32 txbweresult() const;
  inline void set_txbweresult(::google::protobuf::uint32 value);

  // optional uint32 producttype = 8;
  inline bool has_producttype() const;
  inline void clear_producttype();
  static const int kProducttypeFieldNumber = 8;
  inline ::google::protobuf::uint32 producttype() const;
  inline void set_producttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_txbweresult();
  inline void clear_has_txbweresult();
  inline void set_has_producttype();
  inline void clear_has_producttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* alias_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo > txinfo_;
  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 fromtype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo > rxinfo_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 txbweresult_;
  ::google::protobuf::uint32 producttype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo_TerStatisticsInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndTerStatisticsInfo : public ::google::protobuf::Message {
 public:
  IndTerStatisticsInfo();
  virtual ~IndTerStatisticsInfo();

  IndTerStatisticsInfo(const IndTerStatisticsInfo& from);

  inline IndTerStatisticsInfo& operator=(const IndTerStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndTerStatisticsInfo& default_instance();

  void Swap(IndTerStatisticsInfo* other);

  // implements Message ----------------------------------------------

  IndTerStatisticsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndTerStatisticsInfo& from);
  void MergeFrom(const IndTerStatisticsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndTerStatisticsInfo_FrameInfo FrameInfo;
  typedef IndTerStatisticsInfo_AdvanceInfo AdvanceInfo;
  typedef IndTerStatisticsInfo_BaseInfo BaseInfo;
  typedef IndTerStatisticsInfo_AudioInfo AudioInfo;
  typedef IndTerStatisticsInfo_VideoInfo VideoInfo;
  typedef IndTerStatisticsInfo_XfeInfo XfeInfo;
  typedef IndTerStatisticsInfo_TerStatisticsInfo TerStatisticsInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
  inline int tsinfo_size() const;
  inline void clear_tsinfo();
  static const int kTsinfoFieldNumber = 4;
  inline const ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo& tsinfo(int index) const;
  inline ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo* mutable_tsinfo(int index);
  inline ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo* add_tsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo >&
      tsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo >*
      mutable_tsinfo();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndTerStatisticsInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo > tsinfo_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndTerStatisticsInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrInfoToDevmgr_IPPORTInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrInfoToDevmgr_IPPORTInfo();
  virtual ~IndSubSvrInfoToDevmgr_IPPORTInfo();

  IndSubSvrInfoToDevmgr_IPPORTInfo(const IndSubSvrInfoToDevmgr_IPPORTInfo& from);

  inline IndSubSvrInfoToDevmgr_IPPORTInfo& operator=(const IndSubSvrInfoToDevmgr_IPPORTInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrInfoToDevmgr_IPPORTInfo& default_instance();

  void Swap(IndSubSvrInfoToDevmgr_IPPORTInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrInfoToDevmgr_IPPORTInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrInfoToDevmgr_IPPORTInfo& from);
  void MergeFrom(const IndSubSvrInfoToDevmgr_IPPORTInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inner = 1;
  inline bool has_inner() const;
  inline void clear_inner();
  static const int kInnerFieldNumber = 1;
  inline const ::std::string& inner() const;
  inline void set_inner(const ::std::string& value);
  inline void set_inner(const char* value);
  inline void set_inner(const char* value, size_t size);
  inline ::std::string* mutable_inner();
  inline ::std::string* release_inner();
  inline void set_allocated_inner(::std::string* inner);

  // optional string outer = 2;
  inline bool has_outer() const;
  inline void clear_outer();
  static const int kOuterFieldNumber = 2;
  inline const ::std::string& outer() const;
  inline void set_outer(const ::std::string& value);
  inline void set_outer(const char* value);
  inline void set_outer(const char* value, size_t size);
  inline ::std::string* mutable_outer();
  inline ::std::string* release_outer();
  inline void set_allocated_outer(::std::string* outer);

  // optional string vpn = 3;
  inline bool has_vpn() const;
  inline void clear_vpn();
  static const int kVpnFieldNumber = 3;
  inline const ::std::string& vpn() const;
  inline void set_vpn(const ::std::string& value);
  inline void set_vpn(const char* value);
  inline void set_vpn(const char* value, size_t size);
  inline ::std::string* mutable_vpn();
  inline ::std::string* release_vpn();
  inline void set_allocated_vpn(::std::string* vpn);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
 private:
  inline void set_has_inner();
  inline void clear_has_inner();
  inline void set_has_outer();
  inline void clear_has_outer();
  inline void set_has_vpn();
  inline void clear_has_vpn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inner_;
  ::std::string* outer_;
  ::std::string* vpn_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrInfoToDevmgr_IPPORTInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrInfoToDevmgr_ServerInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrInfoToDevmgr_ServerInfo();
  virtual ~IndSubSvrInfoToDevmgr_ServerInfo();

  IndSubSvrInfoToDevmgr_ServerInfo(const IndSubSvrInfoToDevmgr_ServerInfo& from);

  inline IndSubSvrInfoToDevmgr_ServerInfo& operator=(const IndSubSvrInfoToDevmgr_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrInfoToDevmgr_ServerInfo& default_instance();

  void Swap(IndSubSvrInfoToDevmgr_ServerInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrInfoToDevmgr_ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrInfoToDevmgr_ServerInfo& from);
  void MergeFrom(const IndSubSvrInfoToDevmgr_ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 deviceid = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  inline bool has_ipport() const;
  inline void clear_ipport();
  static const int kIpportFieldNumber = 3;
  inline const ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo& ipport() const;
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* mutable_ipport();
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* release_ipport();
  inline void set_allocated_ipport(::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* ipport);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_ipport();
  inline void clear_has_ipport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 deviceid_;
  ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* ipport_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrInfoToDevmgr_ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrInfoToDevmgr_DomainInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrInfoToDevmgr_DomainInfo();
  virtual ~IndSubSvrInfoToDevmgr_DomainInfo();

  IndSubSvrInfoToDevmgr_DomainInfo(const IndSubSvrInfoToDevmgr_DomainInfo& from);

  inline IndSubSvrInfoToDevmgr_DomainInfo& operator=(const IndSubSvrInfoToDevmgr_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrInfoToDevmgr_DomainInfo& default_instance();

  void Swap(IndSubSvrInfoToDevmgr_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrInfoToDevmgr_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrInfoToDevmgr_DomainInfo& from);
  void MergeFrom(const IndSubSvrInfoToDevmgr_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domainname = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  inline int svrinfos_size() const;
  inline void clear_svrinfos();
  static const int kSvrinfosFieldNumber = 3;
  inline const ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo& svrinfos(int index) const;
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo* mutable_svrinfos(int index);
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo* add_svrinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo >&
      svrinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo >*
      mutable_svrinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo > svrinfos_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrInfoToDevmgr_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrInfoToDevmgr : public ::google::protobuf::Message {
 public:
  IndSubSvrInfoToDevmgr();
  virtual ~IndSubSvrInfoToDevmgr();

  IndSubSvrInfoToDevmgr(const IndSubSvrInfoToDevmgr& from);

  inline IndSubSvrInfoToDevmgr& operator=(const IndSubSvrInfoToDevmgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrInfoToDevmgr& default_instance();

  void Swap(IndSubSvrInfoToDevmgr* other);

  // implements Message ----------------------------------------------

  IndSubSvrInfoToDevmgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrInfoToDevmgr& from);
  void MergeFrom(const IndSubSvrInfoToDevmgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndSubSvrInfoToDevmgr_IPPORTInfo IPPORTInfo;
  typedef IndSubSvrInfoToDevmgr_ServerInfo ServerInfo;
  typedef IndSubSvrInfoToDevmgr_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  inline int domaininfos_size() const;
  inline void clear_domaininfos();
  static const int kDomaininfosFieldNumber = 4;
  inline const ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo& domaininfos(int index) const;
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo* mutable_domaininfos(int index);
  inline ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo* add_domaininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo >&
      domaininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo >*
      mutable_domaininfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrInfoToDevmgr)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_addordel();
  inline void clear_has_addordel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo > domaininfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrInfoToDevmgr* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrHeartTodev_LoadInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrHeartTodev_LoadInfo();
  virtual ~IndSubSvrHeartTodev_LoadInfo();

  IndSubSvrHeartTodev_LoadInfo(const IndSubSvrHeartTodev_LoadInfo& from);

  inline IndSubSvrHeartTodev_LoadInfo& operator=(const IndSubSvrHeartTodev_LoadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrHeartTodev_LoadInfo& default_instance();

  void Swap(IndSubSvrHeartTodev_LoadInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrHeartTodev_LoadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrHeartTodev_LoadInfo& from);
  void MergeFrom(const IndSubSvrHeartTodev_LoadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ternum = 1;
  inline bool has_ternum() const;
  inline void clear_ternum();
  static const int kTernumFieldNumber = 1;
  inline ::google::protobuf::uint32 ternum() const;
  inline void set_ternum(::google::protobuf::uint32 value);

  // optional uint32 tx = 2;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 2;
  inline ::google::protobuf::uint32 tx() const;
  inline void set_tx(::google::protobuf::uint32 value);

  // optional uint32 rx = 3;
  inline bool has_rx() const;
  inline void clear_rx();
  static const int kRxFieldNumber = 3;
  inline ::google::protobuf::uint32 rx() const;
  inline void set_rx(::google::protobuf::uint32 value);

  // optional uint32 cpu = 4;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 4;
  inline ::google::protobuf::uint32 cpu() const;
  inline void set_cpu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
 private:
  inline void set_has_ternum();
  inline void clear_has_ternum();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_rx();
  inline void clear_has_rx();
  inline void set_has_cpu();
  inline void clear_has_cpu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ternum_;
  ::google::protobuf::uint32 tx_;
  ::google::protobuf::uint32 rx_;
  ::google::protobuf::uint32 cpu_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrHeartTodev_LoadInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrHeartTodev_ServerInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrHeartTodev_ServerInfo();
  virtual ~IndSubSvrHeartTodev_ServerInfo();

  IndSubSvrHeartTodev_ServerInfo(const IndSubSvrHeartTodev_ServerInfo& from);

  inline IndSubSvrHeartTodev_ServerInfo& operator=(const IndSubSvrHeartTodev_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrHeartTodev_ServerInfo& default_instance();

  void Swap(IndSubSvrHeartTodev_ServerInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrHeartTodev_ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrHeartTodev_ServerInfo& from);
  void MergeFrom(const IndSubSvrHeartTodev_ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 deviceid = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
  inline bool has_loadinfos() const;
  inline void clear_loadinfos();
  static const int kLoadinfosFieldNumber = 3;
  inline const ::SRMsgs::IndSubSvrHeartTodev_LoadInfo& loadinfos() const;
  inline ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* mutable_loadinfos();
  inline ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* release_loadinfos();
  inline void set_allocated_loadinfos(::SRMsgs::IndSubSvrHeartTodev_LoadInfo* loadinfos);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_loadinfos();
  inline void clear_has_loadinfos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 deviceid_;
  ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* loadinfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrHeartTodev_ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrHeartTodev_DomainInfo : public ::google::protobuf::Message {
 public:
  IndSubSvrHeartTodev_DomainInfo();
  virtual ~IndSubSvrHeartTodev_DomainInfo();

  IndSubSvrHeartTodev_DomainInfo(const IndSubSvrHeartTodev_DomainInfo& from);

  inline IndSubSvrHeartTodev_DomainInfo& operator=(const IndSubSvrHeartTodev_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrHeartTodev_DomainInfo& default_instance();

  void Swap(IndSubSvrHeartTodev_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndSubSvrHeartTodev_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrHeartTodev_DomainInfo& from);
  void MergeFrom(const IndSubSvrHeartTodev_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domainname = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
  inline int svrinfos_size() const;
  inline void clear_svrinfos();
  static const int kSvrinfosFieldNumber = 3;
  inline const ::SRMsgs::IndSubSvrHeartTodev_ServerInfo& svrinfos(int index) const;
  inline ::SRMsgs::IndSubSvrHeartTodev_ServerInfo* mutable_svrinfos(int index);
  inline ::SRMsgs::IndSubSvrHeartTodev_ServerInfo* add_svrinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_ServerInfo >&
      svrinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_ServerInfo >*
      mutable_svrinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_ServerInfo > svrinfos_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrHeartTodev_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndSubSvrHeartTodev : public ::google::protobuf::Message {
 public:
  IndSubSvrHeartTodev();
  virtual ~IndSubSvrHeartTodev();

  IndSubSvrHeartTodev(const IndSubSvrHeartTodev& from);

  inline IndSubSvrHeartTodev& operator=(const IndSubSvrHeartTodev& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndSubSvrHeartTodev& default_instance();

  void Swap(IndSubSvrHeartTodev* other);

  // implements Message ----------------------------------------------

  IndSubSvrHeartTodev* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndSubSvrHeartTodev& from);
  void MergeFrom(const IndSubSvrHeartTodev& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndSubSvrHeartTodev_LoadInfo LoadInfo;
  typedef IndSubSvrHeartTodev_ServerInfo ServerInfo;
  typedef IndSubSvrHeartTodev_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
  inline int domaininfos_size() const;
  inline void clear_domaininfos();
  static const int kDomaininfosFieldNumber = 3;
  inline const ::SRMsgs::IndSubSvrHeartTodev_DomainInfo& domaininfos(int index) const;
  inline ::SRMsgs::IndSubSvrHeartTodev_DomainInfo* mutable_domaininfos(int index);
  inline ::SRMsgs::IndSubSvrHeartTodev_DomainInfo* add_domaininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_DomainInfo >&
      domaininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_DomainInfo >*
      mutable_domaininfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndSubSvrHeartTodev)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_DomainInfo > domaininfos_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndSubSvrHeartTodev* default_instance_;
};
// -------------------------------------------------------------------

class IndVASAnalyVideoResult_videoMatch : public ::google::protobuf::Message {
 public:
  IndVASAnalyVideoResult_videoMatch();
  virtual ~IndVASAnalyVideoResult_videoMatch();

  IndVASAnalyVideoResult_videoMatch(const IndVASAnalyVideoResult_videoMatch& from);

  inline IndVASAnalyVideoResult_videoMatch& operator=(const IndVASAnalyVideoResult_videoMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASAnalyVideoResult_videoMatch& default_instance();

  void Swap(IndVASAnalyVideoResult_videoMatch* other);

  // implements Message ----------------------------------------------

  IndVASAnalyVideoResult_videoMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASAnalyVideoResult_videoMatch& from);
  void MergeFrom(const IndVASAnalyVideoResult_videoMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional uint32 rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASAnalyVideoResult.videoMatch)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 rate_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndVASAnalyVideoResult_videoMatch* default_instance_;
};
// -------------------------------------------------------------------

class IndVASAnalyVideoResult_MatchResult : public ::google::protobuf::Message {
 public:
  IndVASAnalyVideoResult_MatchResult();
  virtual ~IndVASAnalyVideoResult_MatchResult();

  IndVASAnalyVideoResult_MatchResult(const IndVASAnalyVideoResult_MatchResult& from);

  inline IndVASAnalyVideoResult_MatchResult& operator=(const IndVASAnalyVideoResult_MatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASAnalyVideoResult_MatchResult& default_instance();

  void Swap(IndVASAnalyVideoResult_MatchResult* other);

  // implements Message ----------------------------------------------

  IndVASAnalyVideoResult_MatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASAnalyVideoResult_MatchResult& from);
  void MergeFrom(const IndVASAnalyVideoResult_MatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hasmismatch = 1;
  inline bool has_hasmismatch() const;
  inline void clear_hasmismatch();
  static const int kHasmismatchFieldNumber = 1;
  inline bool hasmismatch() const;
  inline void set_hasmismatch(bool value);

  // repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
  inline int videomatchs_size() const;
  inline void clear_videomatchs();
  static const int kVideoMatchsFieldNumber = 2;
  inline const ::SRMsgs::IndVASAnalyVideoResult_videoMatch& videomatchs(int index) const;
  inline ::SRMsgs::IndVASAnalyVideoResult_videoMatch* mutable_videomatchs(int index);
  inline ::SRMsgs::IndVASAnalyVideoResult_videoMatch* add_videomatchs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_videoMatch >&
      videomatchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_videoMatch >*
      mutable_videomatchs();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASAnalyVideoResult.MatchResult)
 private:
  inline void set_has_hasmismatch();
  inline void clear_has_hasmismatch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_videoMatch > videomatchs_;
  bool hasmismatch_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndVASAnalyVideoResult_MatchResult* default_instance_;
};
// -------------------------------------------------------------------

class IndVASAnalyVideoResult : public ::google::protobuf::Message {
 public:
  IndVASAnalyVideoResult();
  virtual ~IndVASAnalyVideoResult();

  IndVASAnalyVideoResult(const IndVASAnalyVideoResult& from);

  inline IndVASAnalyVideoResult& operator=(const IndVASAnalyVideoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndVASAnalyVideoResult& default_instance();

  void Swap(IndVASAnalyVideoResult* other);

  // implements Message ----------------------------------------------

  IndVASAnalyVideoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndVASAnalyVideoResult& from);
  void MergeFrom(const IndVASAnalyVideoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndVASAnalyVideoResult_videoMatch videoMatch;
  typedef IndVASAnalyVideoResult_MatchResult MatchResult;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint64 confreportid = 4;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 4;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
  inline int matchresults_size() const;
  inline void clear_matchresults();
  static const int kMatchresultsFieldNumber = 5;
  inline const ::SRMsgs::IndVASAnalyVideoResult_MatchResult& matchresults(int index) const;
  inline ::SRMsgs::IndVASAnalyVideoResult_MatchResult* mutable_matchresults(int index);
  inline ::SRMsgs::IndVASAnalyVideoResult_MatchResult* add_matchresults();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_MatchResult >&
      matchresults() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_MatchResult >*
      mutable_matchresults();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndVASAnalyVideoResult)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_MatchResult > matchresults_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndVASAnalyVideoResult* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_AgcSetting : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_AgcSetting();
  virtual ~RspConfInfoToMC_AgcSetting();

  RspConfInfoToMC_AgcSetting(const RspConfInfoToMC_AgcSetting& from);

  inline RspConfInfoToMC_AgcSetting& operator=(const RspConfInfoToMC_AgcSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_AgcSetting& default_instance();

  void Swap(RspConfInfoToMC_AgcSetting* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_AgcSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_AgcSetting& from);
  void MergeFrom(const RspConfInfoToMC_AgcSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool agc_enable = 1;
  inline bool has_agc_enable() const;
  inline void clear_agc_enable();
  static const int kAgcEnableFieldNumber = 1;
  inline bool agc_enable() const;
  inline void set_agc_enable(bool value);

  // optional int32 target_level_dbfs = 2;
  inline bool has_target_level_dbfs() const;
  inline void clear_target_level_dbfs();
  static const int kTargetLevelDbfsFieldNumber = 2;
  inline ::google::protobuf::int32 target_level_dbfs() const;
  inline void set_target_level_dbfs(::google::protobuf::int32 value);

  // optional int32 compression_gain_db = 3;
  inline bool has_compression_gain_db() const;
  inline void clear_compression_gain_db();
  static const int kCompressionGainDbFieldNumber = 3;
  inline ::google::protobuf::int32 compression_gain_db() const;
  inline void set_compression_gain_db(::google::protobuf::int32 value);

  // optional bool limiter_enable = 4;
  inline bool has_limiter_enable() const;
  inline void clear_limiter_enable();
  static const int kLimiterEnableFieldNumber = 4;
  inline bool limiter_enable() const;
  inline void set_limiter_enable(bool value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.AgcSetting)
 private:
  inline void set_has_agc_enable();
  inline void clear_has_agc_enable();
  inline void set_has_target_level_dbfs();
  inline void clear_has_target_level_dbfs();
  inline void set_has_compression_gain_db();
  inline void clear_has_compression_gain_db();
  inline void set_has_limiter_enable();
  inline void clear_has_limiter_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 target_level_dbfs_;
  bool agc_enable_;
  bool limiter_enable_;
  ::google::protobuf::int32 compression_gain_db_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_AgcSetting* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_Confcfg : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_Confcfg();
  virtual ~RspConfInfoToMC_Confcfg();

  RspConfInfoToMC_Confcfg(const RspConfInfoToMC_Confcfg& from);

  inline RspConfInfoToMC_Confcfg& operator=(const RspConfInfoToMC_Confcfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_Confcfg& default_instance();

  void Swap(RspConfInfoToMC_Confcfg* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_Confcfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_Confcfg& from);
  void MergeFrom(const RspConfInfoToMC_Confcfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_audiomix_num = 1;
  inline bool has_max_audiomix_num() const;
  inline void clear_max_audiomix_num();
  static const int kMaxAudiomixNumFieldNumber = 1;
  inline ::google::protobuf::uint32 max_audiomix_num() const;
  inline void set_max_audiomix_num(::google::protobuf::uint32 value);

  // optional uint32 useVideoMixer = 2;
  inline bool has_usevideomixer() const;
  inline void clear_usevideomixer();
  static const int kUseVideoMixerFieldNumber = 2;
  inline ::google::protobuf::uint32 usevideomixer() const;
  inline void set_usevideomixer(::google::protobuf::uint32 value);

  // optional uint32 useAudioMixer = 3;
  inline bool has_useaudiomixer() const;
  inline void clear_useaudiomixer();
  static const int kUseAudioMixerFieldNumber = 3;
  inline ::google::protobuf::uint32 useaudiomixer() const;
  inline void set_useaudiomixer(::google::protobuf::uint32 value);

  // optional uint32 mixing_frequency = 4;
  inline bool has_mixing_frequency() const;
  inline void clear_mixing_frequency();
  static const int kMixingFrequencyFieldNumber = 4;
  inline ::google::protobuf::uint32 mixing_frequency() const;
  inline void set_mixing_frequency(::google::protobuf::uint32 value);

  // optional uint32 max_encoder_num = 5;
  inline bool has_max_encoder_num() const;
  inline void clear_max_encoder_num();
  static const int kMaxEncoderNumFieldNumber = 5;
  inline ::google::protobuf::uint32 max_encoder_num() const;
  inline void set_max_encoder_num(::google::protobuf::uint32 value);

  // optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
  inline bool has_agc_setting() const;
  inline void clear_agc_setting();
  static const int kAgcSettingFieldNumber = 6;
  inline const ::SRMsgs::RspConfInfoToMC_AgcSetting& agc_setting() const;
  inline ::SRMsgs::RspConfInfoToMC_AgcSetting* mutable_agc_setting();
  inline ::SRMsgs::RspConfInfoToMC_AgcSetting* release_agc_setting();
  inline void set_allocated_agc_setting(::SRMsgs::RspConfInfoToMC_AgcSetting* agc_setting);

  // optional uint32 videosize = 7;
  inline bool has_videosize() const;
  inline void clear_videosize();
  static const int kVideosizeFieldNumber = 7;
  inline ::google::protobuf::uint32 videosize() const;
  inline void set_videosize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.Confcfg)
 private:
  inline void set_has_max_audiomix_num();
  inline void clear_has_max_audiomix_num();
  inline void set_has_usevideomixer();
  inline void clear_has_usevideomixer();
  inline void set_has_useaudiomixer();
  inline void clear_has_useaudiomixer();
  inline void set_has_mixing_frequency();
  inline void clear_has_mixing_frequency();
  inline void set_has_max_encoder_num();
  inline void clear_has_max_encoder_num();
  inline void set_has_agc_setting();
  inline void clear_has_agc_setting();
  inline void set_has_videosize();
  inline void clear_has_videosize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 max_audiomix_num_;
  ::google::protobuf::uint32 usevideomixer_;
  ::google::protobuf::uint32 useaudiomixer_;
  ::google::protobuf::uint32 mixing_frequency_;
  ::SRMsgs::RspConfInfoToMC_AgcSetting* agc_setting_;
  ::google::protobuf::uint32 max_encoder_num_;
  ::google::protobuf::uint32 videosize_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_Confcfg* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_ParticipantInfo : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_ParticipantInfo();
  virtual ~RspConfInfoToMC_ParticipantInfo();

  RspConfInfoToMC_ParticipantInfo(const RspConfInfoToMC_ParticipantInfo& from);

  inline RspConfInfoToMC_ParticipantInfo& operator=(const RspConfInfoToMC_ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_ParticipantInfo& default_instance();

  void Swap(RspConfInfoToMC_ParticipantInfo* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_ParticipantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_ParticipantInfo& from);
  void MergeFrom(const RspConfInfoToMC_ParticipantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 psuid = 1;
  inline bool has_psuid() const;
  inline void clear_psuid();
  static const int kPsuidFieldNumber = 1;
  inline ::google::protobuf::uint32 psuid() const;
  inline void set_psuid(::google::protobuf::uint32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 protocoltype = 4;
  inline bool has_protocoltype() const;
  inline void clear_protocoltype();
  static const int kProtocoltypeFieldNumber = 4;
  inline ::google::protobuf::uint32 protocoltype() const;
  inline void set_protocoltype(::google::protobuf::uint32 value);

  // optional uint32 bandwidth = 5;
  inline bool has_bandwidth() const;
  inline void clear_bandwidth();
  static const int kBandwidthFieldNumber = 5;
  inline ::google::protobuf::uint32 bandwidth() const;
  inline void set_bandwidth(::google::protobuf::uint32 value);

  // optional uint32 usertype = 6;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUsertypeFieldNumber = 6;
  inline ::google::protobuf::uint32 usertype() const;
  inline void set_usertype(::google::protobuf::uint32 value);

  // optional uint32 devicetype = 7;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDevicetypeFieldNumber = 7;
  inline ::google::protobuf::uint32 devicetype() const;
  inline void set_devicetype(::google::protobuf::uint32 value);

  // optional string devicecode = 8;
  inline bool has_devicecode() const;
  inline void clear_devicecode();
  static const int kDevicecodeFieldNumber = 8;
  inline const ::std::string& devicecode() const;
  inline void set_devicecode(const ::std::string& value);
  inline void set_devicecode(const char* value);
  inline void set_devicecode(const char* value, size_t size);
  inline ::std::string* mutable_devicecode();
  inline ::std::string* release_devicecode();
  inline void set_allocated_devicecode(::std::string* devicecode);

  // optional string shortname = 9;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortnameFieldNumber = 9;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // optional uint32 orderno = 10;
  inline bool has_orderno() const;
  inline void clear_orderno();
  static const int kOrdernoFieldNumber = 10;
  inline ::google::protobuf::uint32 orderno() const;
  inline void set_orderno(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.ParticipantInfo)
 private:
  inline void set_has_psuid();
  inline void clear_has_psuid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_protocoltype();
  inline void clear_has_protocoltype();
  inline void set_has_bandwidth();
  inline void clear_has_bandwidth();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_devicecode();
  inline void clear_has_devicecode();
  inline void set_has_shortname();
  inline void clear_has_shortname();
  inline void set_has_orderno();
  inline void clear_has_orderno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 psuid_;
  ::google::protobuf::uint32 protocoltype_;
  ::std::string* ip_;
  ::google::protobuf::uint32 bandwidth_;
  ::google::protobuf::uint32 usertype_;
  ::std::string* devicecode_;
  ::google::protobuf::uint32 devicetype_;
  ::google::protobuf::uint32 orderno_;
  ::std::string* shortname_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_ParticipantInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_LiveSetting : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_LiveSetting();
  virtual ~RspConfInfoToMC_LiveSetting();

  RspConfInfoToMC_LiveSetting(const RspConfInfoToMC_LiveSetting& from);

  inline RspConfInfoToMC_LiveSetting& operator=(const RspConfInfoToMC_LiveSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_LiveSetting& default_instance();

  void Swap(RspConfInfoToMC_LiveSetting* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_LiveSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_LiveSetting& from);
  void MergeFrom(const RspConfInfoToMC_LiveSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chairman = 1;
  inline bool has_chairman() const;
  inline void clear_chairman();
  static const int kChairmanFieldNumber = 1;
  inline const ::std::string& chairman() const;
  inline void set_chairman(const ::std::string& value);
  inline void set_chairman(const char* value);
  inline void set_chairman(const char* value, size_t size);
  inline ::std::string* mutable_chairman();
  inline ::std::string* release_chairman();
  inline void set_allocated_chairman(::std::string* chairman);

  // optional string subject = 2;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 2;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional string abstract = 3;
  inline bool has_abstract() const;
  inline void clear_abstract();
  static const int kAbstractFieldNumber = 3;
  inline const ::std::string& abstract() const;
  inline void set_abstract(const ::std::string& value);
  inline void set_abstract(const char* value);
  inline void set_abstract(const char* value, size_t size);
  inline ::std::string* mutable_abstract();
  inline ::std::string* release_abstract();
  inline void set_allocated_abstract(::std::string* abstract);

  // optional uint32 ispublic = 4;
  inline bool has_ispublic() const;
  inline void clear_ispublic();
  static const int kIspublicFieldNumber = 4;
  inline ::google::protobuf::uint32 ispublic() const;
  inline void set_ispublic(::google::protobuf::uint32 value);

  // optional string livepwd = 5;
  inline bool has_livepwd() const;
  inline void clear_livepwd();
  static const int kLivepwdFieldNumber = 5;
  inline const ::std::string& livepwd() const;
  inline void set_livepwd(const ::std::string& value);
  inline void set_livepwd(const char* value);
  inline void set_livepwd(const char* value, size_t size);
  inline ::std::string* mutable_livepwd();
  inline ::std::string* release_livepwd();
  inline void set_allocated_livepwd(::std::string* livepwd);

  // optional uint32 isuserec = 6;
  inline bool has_isuserec() const;
  inline void clear_isuserec();
  static const int kIsuserecFieldNumber = 6;
  inline ::google::protobuf::uint32 isuserec() const;
  inline void set_isuserec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.LiveSetting)
 private:
  inline void set_has_chairman();
  inline void clear_has_chairman();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_abstract();
  inline void clear_has_abstract();
  inline void set_has_ispublic();
  inline void clear_has_ispublic();
  inline void set_has_livepwd();
  inline void clear_has_livepwd();
  inline void set_has_isuserec();
  inline void clear_has_isuserec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* chairman_;
  ::std::string* subject_;
  ::std::string* abstract_;
  ::std::string* livepwd_;
  ::google::protobuf::uint32 ispublic_;
  ::google::protobuf::uint32 isuserec_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_LiveSetting* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_RollCallInfo : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_RollCallInfo();
  virtual ~RspConfInfoToMC_RollCallInfo();

  RspConfInfoToMC_RollCallInfo(const RspConfInfoToMC_RollCallInfo& from);

  inline RspConfInfoToMC_RollCallInfo& operator=(const RspConfInfoToMC_RollCallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_RollCallInfo& default_instance();

  void Swap(RspConfInfoToMC_RollCallInfo* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_RollCallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_RollCallInfo& from);
  void MergeFrom(const RspConfInfoToMC_RollCallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rcid = 1;
  inline bool has_rcid() const;
  inline void clear_rcid();
  static const int kRcidFieldNumber = 1;
  inline ::google::protobuf::uint64 rcid() const;
  inline void set_rcid(::google::protobuf::uint64 value);

  // optional string rcname = 2;
  inline bool has_rcname() const;
  inline void clear_rcname();
  static const int kRcnameFieldNumber = 2;
  inline const ::std::string& rcname() const;
  inline void set_rcname(const ::std::string& value);
  inline void set_rcname(const char* value);
  inline void set_rcname(const char* value, size_t size);
  inline ::std::string* mutable_rcname();
  inline ::std::string* release_rcname();
  inline void set_allocated_rcname(::std::string* rcname);

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.RollCallInfo)
 private:
  inline void set_has_rcid();
  inline void clear_has_rcid();
  inline void set_has_rcname();
  inline void clear_has_rcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rcid_;
  ::std::string* rcname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_RollCallInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC_AutoPollInfo : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC_AutoPollInfo();
  virtual ~RspConfInfoToMC_AutoPollInfo();

  RspConfInfoToMC_AutoPollInfo(const RspConfInfoToMC_AutoPollInfo& from);

  inline RspConfInfoToMC_AutoPollInfo& operator=(const RspConfInfoToMC_AutoPollInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC_AutoPollInfo& default_instance();

  void Swap(RspConfInfoToMC_AutoPollInfo* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC_AutoPollInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC_AutoPollInfo& from);
  void MergeFrom(const RspConfInfoToMC_AutoPollInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apid = 1;
  inline bool has_apid() const;
  inline void clear_apid();
  static const int kApidFieldNumber = 1;
  inline ::google::protobuf::uint64 apid() const;
  inline void set_apid(::google::protobuf::uint64 value);

  // optional string apname = 2;
  inline bool has_apname() const;
  inline void clear_apname();
  static const int kApnameFieldNumber = 2;
  inline const ::std::string& apname() const;
  inline void set_apname(const ::std::string& value);
  inline void set_apname(const char* value);
  inline void set_apname(const char* value, size_t size);
  inline ::std::string* mutable_apname();
  inline ::std::string* release_apname();
  inline void set_allocated_apname(::std::string* apname);

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 3;
  inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& parts(int index) const;
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* mutable_parts(int index);
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC.AutoPollInfo)
 private:
  inline void set_has_apid();
  inline void clear_has_apid();
  inline void set_has_apname();
  inline void clear_has_apname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 apid_;
  ::std::string* apname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo > parts_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC_AutoPollInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspConfInfoToMC : public ::google::protobuf::Message {
 public:
  RspConfInfoToMC();
  virtual ~RspConfInfoToMC();

  RspConfInfoToMC(const RspConfInfoToMC& from);

  inline RspConfInfoToMC& operator=(const RspConfInfoToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspConfInfoToMC& default_instance();

  void Swap(RspConfInfoToMC* other);

  // implements Message ----------------------------------------------

  RspConfInfoToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspConfInfoToMC& from);
  void MergeFrom(const RspConfInfoToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspConfInfoToMC_AgcSetting AgcSetting;
  typedef RspConfInfoToMC_Confcfg Confcfg;
  typedef RspConfInfoToMC_ParticipantInfo ParticipantInfo;
  typedef RspConfInfoToMC_LiveSetting LiveSetting;
  typedef RspConfInfoToMC_RollCallInfo RollCallInfo;
  typedef RspConfInfoToMC_AutoPollInfo AutoPollInfo;

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint32 suid = 2;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 2;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional string confpwd = 4;
  inline bool has_confpwd() const;
  inline void clear_confpwd();
  static const int kConfpwdFieldNumber = 4;
  inline const ::std::string& confpwd() const;
  inline void set_confpwd(const ::std::string& value);
  inline void set_confpwd(const char* value);
  inline void set_confpwd(const char* value, size_t size);
  inline ::std::string* mutable_confpwd();
  inline ::std::string* release_confpwd();
  inline void set_allocated_confpwd(::std::string* confpwd);

  // optional string recvpwd = 5;
  inline bool has_recvpwd() const;
  inline void clear_recvpwd();
  static const int kRecvpwdFieldNumber = 5;
  inline const ::std::string& recvpwd() const;
  inline void set_recvpwd(const ::std::string& value);
  inline void set_recvpwd(const char* value);
  inline void set_recvpwd(const char* value, size_t size);
  inline ::std::string* mutable_recvpwd();
  inline ::std::string* release_recvpwd();
  inline void set_allocated_recvpwd(::std::string* recvpwd);

  // optional string begintime = 6;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 6;
  inline const ::std::string& begintime() const;
  inline void set_begintime(const ::std::string& value);
  inline void set_begintime(const char* value);
  inline void set_begintime(const char* value, size_t size);
  inline ::std::string* mutable_begintime();
  inline ::std::string* release_begintime();
  inline void set_allocated_begintime(::std::string* begintime);

  // optional string endtime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 7;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional bool islimited = 8;
  inline bool has_islimited() const;
  inline void clear_islimited();
  static const int kIslimitedFieldNumber = 8;
  inline bool islimited() const;
  inline void set_islimited(bool value);

  // optional string subject = 9;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 9;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional uint32 conftype = 10;
  inline bool has_conftype() const;
  inline void clear_conftype();
  static const int kConftypeFieldNumber = 10;
  inline ::google::protobuf::uint32 conftype() const;
  inline void set_conftype(::google::protobuf::uint32 value);

  // optional uint32 confstartmethod = 11;
  inline bool has_confstartmethod() const;
  inline void clear_confstartmethod();
  static const int kConfstartmethodFieldNumber = 11;
  inline ::google::protobuf::uint32 confstartmethod() const;
  inline void set_confstartmethod(::google::protobuf::uint32 value);

  // optional uint32 mutetype = 12;
  inline bool has_mutetype() const;
  inline void clear_mutetype();
  static const int kMutetypeFieldNumber = 12;
  inline ::google::protobuf::uint32 mutetype() const;
  inline void set_mutetype(::google::protobuf::uint32 value);

  // optional uint32 ternums = 13;
  inline bool has_ternums() const;
  inline void clear_ternums();
  static const int kTernumsFieldNumber = 13;
  inline ::google::protobuf::uint32 ternums() const;
  inline void set_ternums(::google::protobuf::uint32 value);

  // optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
  inline bool has_confcfg() const;
  inline void clear_confcfg();
  static const int kConfcfgFieldNumber = 14;
  inline const ::SRMsgs::RspConfInfoToMC_Confcfg& confcfg() const;
  inline ::SRMsgs::RspConfInfoToMC_Confcfg* mutable_confcfg();
  inline ::SRMsgs::RspConfInfoToMC_Confcfg* release_confcfg();
  inline void set_allocated_confcfg(::SRMsgs::RspConfInfoToMC_Confcfg* confcfg);

  // optional string failurereason = 15;
  inline bool has_failurereason() const;
  inline void clear_failurereason();
  static const int kFailurereasonFieldNumber = 15;
  inline const ::std::string& failurereason() const;
  inline void set_failurereason(const ::std::string& value);
  inline void set_failurereason(const char* value);
  inline void set_failurereason(const char* value, size_t size);
  inline ::std::string* mutable_failurereason();
  inline ::std::string* release_failurereason();
  inline void set_allocated_failurereason(::std::string* failurereason);

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
  inline int participants_size() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 16;
  inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& participants(int index) const;
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* mutable_participants(int index);
  inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* add_participants();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
      participants() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
      mutable_participants();

  // optional uint32 confctrlsuid = 17;
  inline bool has_confctrlsuid() const;
  inline void clear_confctrlsuid();
  static const int kConfctrlsuidFieldNumber = 17;
  inline ::google::protobuf::uint32 confctrlsuid() const;
  inline void set_confctrlsuid(::google::protobuf::uint32 value);

  // optional uint32 audioenable = 18;
  inline bool has_audioenable() const;
  inline void clear_audioenable();
  static const int kAudioenableFieldNumber = 18;
  inline ::google::protobuf::uint32 audioenable() const;
  inline void set_audioenable(::google::protobuf::uint32 value);

  // optional uint32 videoenable = 19;
  inline bool has_videoenable() const;
  inline void clear_videoenable();
  static const int kVideoenableFieldNumber = 19;
  inline ::google::protobuf::uint32 videoenable() const;
  inline void set_videoenable(::google::protobuf::uint32 value);

  // optional string confname = 20;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfnameFieldNumber = 20;
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // optional uint32 encryptalg = 21;
  inline bool has_encryptalg() const;
  inline void clear_encryptalg();
  static const int kEncryptalgFieldNumber = 21;
  inline ::google::protobuf::uint32 encryptalg() const;
  inline void set_encryptalg(::google::protobuf::uint32 value);

  // optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
  inline bool has_livesetinfo() const;
  inline void clear_livesetinfo();
  static const int kLivesetinfoFieldNumber = 22;
  inline const ::SRMsgs::RspConfInfoToMC_LiveSetting& livesetinfo() const;
  inline ::SRMsgs::RspConfInfoToMC_LiveSetting* mutable_livesetinfo();
  inline ::SRMsgs::RspConfInfoToMC_LiveSetting* release_livesetinfo();
  inline void set_allocated_livesetinfo(::SRMsgs::RspConfInfoToMC_LiveSetting* livesetinfo);

  // optional uint32 autorec = 23;
  inline bool has_autorec() const;
  inline void clear_autorec();
  static const int kAutorecFieldNumber = 23;
  inline ::google::protobuf::uint32 autorec() const;
  inline void set_autorec(::google::protobuf::uint32 value);

  // optional uint64 confreportid = 24;
  inline bool has_confreportid() const;
  inline void clear_confreportid();
  static const int kConfreportidFieldNumber = 24;
  inline ::google::protobuf::uint64 confreportid() const;
  inline void set_confreportid(::google::protobuf::uint64 value);

  // optional uint32 errorcode = 25;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 25;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
  inline int rollcalllist_size() const;
  inline void clear_rollcalllist();
  static const int kRollcalllistFieldNumber = 26;
  inline const ::SRMsgs::RspConfInfoToMC_RollCallInfo& rollcalllist(int index) const;
  inline ::SRMsgs::RspConfInfoToMC_RollCallInfo* mutable_rollcalllist(int index);
  inline ::SRMsgs::RspConfInfoToMC_RollCallInfo* add_rollcalllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_RollCallInfo >&
      rollcalllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_RollCallInfo >*
      mutable_rollcalllist();

  // optional uint32 permanentenable = 27;
  inline bool has_permanentenable() const;
  inline void clear_permanentenable();
  static const int kPermanentenableFieldNumber = 27;
  inline ::google::protobuf::uint32 permanentenable() const;
  inline void set_permanentenable(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
  inline int autopolllist_size() const;
  inline void clear_autopolllist();
  static const int kAutopolllistFieldNumber = 28;
  inline const ::SRMsgs::RspConfInfoToMC_AutoPollInfo& autopolllist(int index) const;
  inline ::SRMsgs::RspConfInfoToMC_AutoPollInfo* mutable_autopolllist(int index);
  inline ::SRMsgs::RspConfInfoToMC_AutoPollInfo* add_autopolllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_AutoPollInfo >&
      autopolllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_AutoPollInfo >*
      mutable_autopolllist();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspConfInfoToMC)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_confpwd();
  inline void clear_has_confpwd();
  inline void set_has_recvpwd();
  inline void clear_has_recvpwd();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_islimited();
  inline void clear_has_islimited();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_conftype();
  inline void clear_has_conftype();
  inline void set_has_confstartmethod();
  inline void clear_has_confstartmethod();
  inline void set_has_mutetype();
  inline void clear_has_mutetype();
  inline void set_has_ternums();
  inline void clear_has_ternums();
  inline void set_has_confcfg();
  inline void clear_has_confcfg();
  inline void set_has_failurereason();
  inline void clear_has_failurereason();
  inline void set_has_confctrlsuid();
  inline void clear_has_confctrlsuid();
  inline void set_has_audioenable();
  inline void clear_has_audioenable();
  inline void set_has_videoenable();
  inline void clear_has_videoenable();
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_encryptalg();
  inline void clear_has_encryptalg();
  inline void set_has_livesetinfo();
  inline void clear_has_livesetinfo();
  inline void set_has_autorec();
  inline void clear_has_autorec();
  inline void set_has_confreportid();
  inline void clear_has_confreportid();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_permanentenable();
  inline void clear_has_permanentenable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 suid_;
  bool isok_;
  bool islimited_;
  ::std::string* confpwd_;
  ::std::string* recvpwd_;
  ::std::string* begintime_;
  ::std::string* endtime_;
  ::std::string* subject_;
  ::google::protobuf::uint32 conftype_;
  ::google::protobuf::uint32 confstartmethod_;
  ::google::protobuf::uint32 mutetype_;
  ::google::protobuf::uint32 ternums_;
  ::SRMsgs::RspConfInfoToMC_Confcfg* confcfg_;
  ::std::string* failurereason_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo > participants_;
  ::google::protobuf::uint32 confctrlsuid_;
  ::google::protobuf::uint32 audioenable_;
  ::std::string* confname_;
  ::google::protobuf::uint32 videoenable_;
  ::google::protobuf::uint32 encryptalg_;
  ::SRMsgs::RspConfInfoToMC_LiveSetting* livesetinfo_;
  ::google::protobuf::uint64 confreportid_;
  ::google::protobuf::uint32 autorec_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_RollCallInfo > rollcalllist_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_AutoPollInfo > autopolllist_;
  ::google::protobuf::uint32 permanentenable_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspConfInfoToMC* default_instance_;
};
// -------------------------------------------------------------------

class IndDevtoserHeart : public ::google::protobuf::Message {
 public:
  IndDevtoserHeart();
  virtual ~IndDevtoserHeart();

  IndDevtoserHeart(const IndDevtoserHeart& from);

  inline IndDevtoserHeart& operator=(const IndDevtoserHeart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndDevtoserHeart& default_instance();

  void Swap(IndDevtoserHeart* other);

  // implements Message ----------------------------------------------

  IndDevtoserHeart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndDevtoserHeart& from);
  void MergeFrom(const IndDevtoserHeart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndDevtoserHeart)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndDevtoserHeart* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrInfoToDevmgr_IPPORTInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrInfoToDevmgr_IPPORTInfo();
  virtual ~IndUpSvrInfoToDevmgr_IPPORTInfo();

  IndUpSvrInfoToDevmgr_IPPORTInfo(const IndUpSvrInfoToDevmgr_IPPORTInfo& from);

  inline IndUpSvrInfoToDevmgr_IPPORTInfo& operator=(const IndUpSvrInfoToDevmgr_IPPORTInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrInfoToDevmgr_IPPORTInfo& default_instance();

  void Swap(IndUpSvrInfoToDevmgr_IPPORTInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrInfoToDevmgr_IPPORTInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrInfoToDevmgr_IPPORTInfo& from);
  void MergeFrom(const IndUpSvrInfoToDevmgr_IPPORTInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inner = 1;
  inline bool has_inner() const;
  inline void clear_inner();
  static const int kInnerFieldNumber = 1;
  inline const ::std::string& inner() const;
  inline void set_inner(const ::std::string& value);
  inline void set_inner(const char* value);
  inline void set_inner(const char* value, size_t size);
  inline ::std::string* mutable_inner();
  inline ::std::string* release_inner();
  inline void set_allocated_inner(::std::string* inner);

  // optional string outer = 2;
  inline bool has_outer() const;
  inline void clear_outer();
  static const int kOuterFieldNumber = 2;
  inline const ::std::string& outer() const;
  inline void set_outer(const ::std::string& value);
  inline void set_outer(const char* value);
  inline void set_outer(const char* value, size_t size);
  inline ::std::string* mutable_outer();
  inline ::std::string* release_outer();
  inline void set_allocated_outer(::std::string* outer);

  // optional string vpn = 3;
  inline bool has_vpn() const;
  inline void clear_vpn();
  static const int kVpnFieldNumber = 3;
  inline const ::std::string& vpn() const;
  inline void set_vpn(const ::std::string& value);
  inline void set_vpn(const char* value);
  inline void set_vpn(const char* value, size_t size);
  inline ::std::string* mutable_vpn();
  inline ::std::string* release_vpn();
  inline void set_allocated_vpn(::std::string* vpn);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
 private:
  inline void set_has_inner();
  inline void clear_has_inner();
  inline void set_has_outer();
  inline void clear_has_outer();
  inline void set_has_vpn();
  inline void clear_has_vpn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inner_;
  ::std::string* outer_;
  ::std::string* vpn_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrInfoToDevmgr_IPPORTInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrInfoToDevmgr_ServerInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrInfoToDevmgr_ServerInfo();
  virtual ~IndUpSvrInfoToDevmgr_ServerInfo();

  IndUpSvrInfoToDevmgr_ServerInfo(const IndUpSvrInfoToDevmgr_ServerInfo& from);

  inline IndUpSvrInfoToDevmgr_ServerInfo& operator=(const IndUpSvrInfoToDevmgr_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrInfoToDevmgr_ServerInfo& default_instance();

  void Swap(IndUpSvrInfoToDevmgr_ServerInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrInfoToDevmgr_ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrInfoToDevmgr_ServerInfo& from);
  void MergeFrom(const IndUpSvrInfoToDevmgr_ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 deviceid = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  inline bool has_ipport() const;
  inline void clear_ipport();
  static const int kIpportFieldNumber = 3;
  inline const ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo& ipport() const;
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* mutable_ipport();
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* release_ipport();
  inline void set_allocated_ipport(::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* ipport);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_ipport();
  inline void clear_has_ipport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 deviceid_;
  ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* ipport_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrInfoToDevmgr_ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrInfoToDevmgr_DomainInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrInfoToDevmgr_DomainInfo();
  virtual ~IndUpSvrInfoToDevmgr_DomainInfo();

  IndUpSvrInfoToDevmgr_DomainInfo(const IndUpSvrInfoToDevmgr_DomainInfo& from);

  inline IndUpSvrInfoToDevmgr_DomainInfo& operator=(const IndUpSvrInfoToDevmgr_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrInfoToDevmgr_DomainInfo& default_instance();

  void Swap(IndUpSvrInfoToDevmgr_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrInfoToDevmgr_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrInfoToDevmgr_DomainInfo& from);
  void MergeFrom(const IndUpSvrInfoToDevmgr_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domainname = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  inline int svrinfos_size() const;
  inline void clear_svrinfos();
  static const int kSvrinfosFieldNumber = 3;
  inline const ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo& svrinfos(int index) const;
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo* mutable_svrinfos(int index);
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo* add_svrinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo >&
      svrinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo >*
      mutable_svrinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo > svrinfos_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrInfoToDevmgr_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrInfoToDevmgr : public ::google::protobuf::Message {
 public:
  IndUpSvrInfoToDevmgr();
  virtual ~IndUpSvrInfoToDevmgr();

  IndUpSvrInfoToDevmgr(const IndUpSvrInfoToDevmgr& from);

  inline IndUpSvrInfoToDevmgr& operator=(const IndUpSvrInfoToDevmgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrInfoToDevmgr& default_instance();

  void Swap(IndUpSvrInfoToDevmgr* other);

  // implements Message ----------------------------------------------

  IndUpSvrInfoToDevmgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrInfoToDevmgr& from);
  void MergeFrom(const IndUpSvrInfoToDevmgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndUpSvrInfoToDevmgr_IPPORTInfo IPPORTInfo;
  typedef IndUpSvrInfoToDevmgr_ServerInfo ServerInfo;
  typedef IndUpSvrInfoToDevmgr_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 addordel = 3;
  inline bool has_addordel() const;
  inline void clear_addordel();
  static const int kAddordelFieldNumber = 3;
  inline ::google::protobuf::uint32 addordel() const;
  inline void set_addordel(::google::protobuf::uint32 value);

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  inline int domaininfos_size() const;
  inline void clear_domaininfos();
  static const int kDomaininfosFieldNumber = 4;
  inline const ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo& domaininfos(int index) const;
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo* mutable_domaininfos(int index);
  inline ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo* add_domaininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo >&
      domaininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo >*
      mutable_domaininfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrInfoToDevmgr)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_addordel();
  inline void clear_has_addordel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 addordel_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo > domaininfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrInfoToDevmgr* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrHeartTodev_LoadInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrHeartTodev_LoadInfo();
  virtual ~IndUpSvrHeartTodev_LoadInfo();

  IndUpSvrHeartTodev_LoadInfo(const IndUpSvrHeartTodev_LoadInfo& from);

  inline IndUpSvrHeartTodev_LoadInfo& operator=(const IndUpSvrHeartTodev_LoadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrHeartTodev_LoadInfo& default_instance();

  void Swap(IndUpSvrHeartTodev_LoadInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrHeartTodev_LoadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrHeartTodev_LoadInfo& from);
  void MergeFrom(const IndUpSvrHeartTodev_LoadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ternum = 1;
  inline bool has_ternum() const;
  inline void clear_ternum();
  static const int kTernumFieldNumber = 1;
  inline ::google::protobuf::uint32 ternum() const;
  inline void set_ternum(::google::protobuf::uint32 value);

  // optional uint32 tx = 2;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 2;
  inline ::google::protobuf::uint32 tx() const;
  inline void set_tx(::google::protobuf::uint32 value);

  // optional uint32 rx = 3;
  inline bool has_rx() const;
  inline void clear_rx();
  static const int kRxFieldNumber = 3;
  inline ::google::protobuf::uint32 rx() const;
  inline void set_rx(::google::protobuf::uint32 value);

  // optional uint32 cpu = 4;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 4;
  inline ::google::protobuf::uint32 cpu() const;
  inline void set_cpu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
 private:
  inline void set_has_ternum();
  inline void clear_has_ternum();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_rx();
  inline void clear_has_rx();
  inline void set_has_cpu();
  inline void clear_has_cpu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ternum_;
  ::google::protobuf::uint32 tx_;
  ::google::protobuf::uint32 rx_;
  ::google::protobuf::uint32 cpu_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrHeartTodev_LoadInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrHeartTodev_ServerInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrHeartTodev_ServerInfo();
  virtual ~IndUpSvrHeartTodev_ServerInfo();

  IndUpSvrHeartTodev_ServerInfo(const IndUpSvrHeartTodev_ServerInfo& from);

  inline IndUpSvrHeartTodev_ServerInfo& operator=(const IndUpSvrHeartTodev_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrHeartTodev_ServerInfo& default_instance();

  void Swap(IndUpSvrHeartTodev_ServerInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrHeartTodev_ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrHeartTodev_ServerInfo& from);
  void MergeFrom(const IndUpSvrHeartTodev_ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 deviceid = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
  inline bool has_loadinfos() const;
  inline void clear_loadinfos();
  static const int kLoadinfosFieldNumber = 3;
  inline const ::SRMsgs::IndUpSvrHeartTodev_LoadInfo& loadinfos() const;
  inline ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* mutable_loadinfos();
  inline ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* release_loadinfos();
  inline void set_allocated_loadinfos(::SRMsgs::IndUpSvrHeartTodev_LoadInfo* loadinfos);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_loadinfos();
  inline void clear_has_loadinfos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 deviceid_;
  ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* loadinfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrHeartTodev_ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrHeartTodev_DomainInfo : public ::google::protobuf::Message {
 public:
  IndUpSvrHeartTodev_DomainInfo();
  virtual ~IndUpSvrHeartTodev_DomainInfo();

  IndUpSvrHeartTodev_DomainInfo(const IndUpSvrHeartTodev_DomainInfo& from);

  inline IndUpSvrHeartTodev_DomainInfo& operator=(const IndUpSvrHeartTodev_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrHeartTodev_DomainInfo& default_instance();

  void Swap(IndUpSvrHeartTodev_DomainInfo* other);

  // implements Message ----------------------------------------------

  IndUpSvrHeartTodev_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrHeartTodev_DomainInfo& from);
  void MergeFrom(const IndUpSvrHeartTodev_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domainname = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
  inline int svrinfos_size() const;
  inline void clear_svrinfos();
  static const int kSvrinfosFieldNumber = 3;
  inline const ::SRMsgs::IndUpSvrHeartTodev_ServerInfo& svrinfos(int index) const;
  inline ::SRMsgs::IndUpSvrHeartTodev_ServerInfo* mutable_svrinfos(int index);
  inline ::SRMsgs::IndUpSvrHeartTodev_ServerInfo* add_svrinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_ServerInfo >&
      svrinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_ServerInfo >*
      mutable_svrinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_ServerInfo > svrinfos_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrHeartTodev_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndUpSvrHeartTodev : public ::google::protobuf::Message {
 public:
  IndUpSvrHeartTodev();
  virtual ~IndUpSvrHeartTodev();

  IndUpSvrHeartTodev(const IndUpSvrHeartTodev& from);

  inline IndUpSvrHeartTodev& operator=(const IndUpSvrHeartTodev& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndUpSvrHeartTodev& default_instance();

  void Swap(IndUpSvrHeartTodev* other);

  // implements Message ----------------------------------------------

  IndUpSvrHeartTodev* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndUpSvrHeartTodev& from);
  void MergeFrom(const IndUpSvrHeartTodev& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndUpSvrHeartTodev_LoadInfo LoadInfo;
  typedef IndUpSvrHeartTodev_ServerInfo ServerInfo;
  typedef IndUpSvrHeartTodev_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
  inline int domaininfos_size() const;
  inline void clear_domaininfos();
  static const int kDomaininfosFieldNumber = 3;
  inline const ::SRMsgs::IndUpSvrHeartTodev_DomainInfo& domaininfos(int index) const;
  inline ::SRMsgs::IndUpSvrHeartTodev_DomainInfo* mutable_domaininfos(int index);
  inline ::SRMsgs::IndUpSvrHeartTodev_DomainInfo* add_domaininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_DomainInfo >&
      domaininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_DomainInfo >*
      mutable_domaininfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.IndUpSvrHeartTodev)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_DomainInfo > domaininfos_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static IndUpSvrHeartTodev* default_instance_;
};
// -------------------------------------------------------------------

class RspRegister_Capset : public ::google::protobuf::Message {
 public:
  RspRegister_Capset();
  virtual ~RspRegister_Capset();

  RspRegister_Capset(const RspRegister_Capset& from);

  inline RspRegister_Capset& operator=(const RspRegister_Capset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegister_Capset& default_instance();

  void Swap(RspRegister_Capset* other);

  // implements Message ----------------------------------------------

  RspRegister_Capset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspRegister_Capset& from);
  void MergeFrom(const RspRegister_Capset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fmt = 1;
  inline bool has_fmt() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 1;
  inline const ::std::string& fmt() const;
  inline void set_fmt(const ::std::string& value);
  inline void set_fmt(const char* value);
  inline void set_fmt(const char* value, size_t size);
  inline ::std::string* mutable_fmt();
  inline ::std::string* release_fmt();
  inline void set_allocated_fmt(::std::string* fmt);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspRegister.Capset)
 private:
  inline void set_has_fmt();
  inline void clear_has_fmt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fmt_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspRegister_Capset* default_instance_;
};
// -------------------------------------------------------------------

class RspRegister_CapInfo : public ::google::protobuf::Message {
 public:
  RspRegister_CapInfo();
  virtual ~RspRegister_CapInfo();

  RspRegister_CapInfo(const RspRegister_CapInfo& from);

  inline RspRegister_CapInfo& operator=(const RspRegister_CapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegister_CapInfo& default_instance();

  void Swap(RspRegister_CapInfo* other);

  // implements Message ----------------------------------------------

  RspRegister_CapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspRegister_CapInfo& from);
  void MergeFrom(const RspRegister_CapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 captype = 1;
  inline bool has_captype() const;
  inline void clear_captype();
  static const int kCaptypeFieldNumber = 1;
  inline ::google::protobuf::uint32 captype() const;
  inline void set_captype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspRegister.Capset capsets = 2;
  inline int capsets_size() const;
  inline void clear_capsets();
  static const int kCapsetsFieldNumber = 2;
  inline const ::SRMsgs::RspRegister_Capset& capsets(int index) const;
  inline ::SRMsgs::RspRegister_Capset* mutable_capsets(int index);
  inline ::SRMsgs::RspRegister_Capset* add_capsets();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_Capset >&
      capsets() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_Capset >*
      mutable_capsets();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspRegister.CapInfo)
 private:
  inline void set_has_captype();
  inline void clear_has_captype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_Capset > capsets_;
  ::google::protobuf::uint32 captype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspRegister_CapInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspRegister : public ::google::protobuf::Message {
 public:
  RspRegister();
  virtual ~RspRegister();

  RspRegister(const RspRegister& from);

  inline RspRegister& operator=(const RspRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegister& default_instance();

  void Swap(RspRegister* other);

  // implements Message ----------------------------------------------

  RspRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspRegister& from);
  void MergeFrom(const RspRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspRegister_Capset Capset;
  typedef RspRegister_CapInfo CapInfo;

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint32 deviceid = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string failurereason = 4;
  inline bool has_failurereason() const;
  inline void clear_failurereason();
  static const int kFailurereasonFieldNumber = 4;
  inline const ::std::string& failurereason() const;
  inline void set_failurereason(const ::std::string& value);
  inline void set_failurereason(const char* value);
  inline void set_failurereason(const char* value, size_t size);
  inline ::std::string* mutable_failurereason();
  inline ::std::string* release_failurereason();
  inline void set_allocated_failurereason(::std::string* failurereason);

  // optional uint32 groupid = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string domainname = 6;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 6;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional uint32 errorcode = 7;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 7;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
  inline int capinfos_size() const;
  inline void clear_capinfos();
  static const int kCapinfosFieldNumber = 8;
  inline const ::SRMsgs::RspRegister_CapInfo& capinfos(int index) const;
  inline ::SRMsgs::RspRegister_CapInfo* mutable_capinfos(int index);
  inline ::SRMsgs::RspRegister_CapInfo* add_capinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_CapInfo >&
      capinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_CapInfo >*
      mutable_capinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspRegister)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_failurereason();
  inline void clear_has_failurereason();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isok_;
  ::google::protobuf::uint32 deviceid_;
  ::std::string* token_;
  ::std::string* failurereason_;
  ::std::string* domainname_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_CapInfo > capinfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspRegister* default_instance_;
};
// -------------------------------------------------------------------

class RspUnRegister : public ::google::protobuf::Message {
 public:
  RspUnRegister();
  virtual ~RspUnRegister();

  RspUnRegister(const RspUnRegister& from);

  inline RspUnRegister& operator=(const RspUnRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspUnRegister& default_instance();

  void Swap(RspUnRegister* other);

  // implements Message ----------------------------------------------

  RspUnRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspUnRegister& from);
  void MergeFrom(const RspUnRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isok = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional string failurereason = 2;
  inline bool has_failurereason() const;
  inline void clear_failurereason();
  static const int kFailurereasonFieldNumber = 2;
  inline const ::std::string& failurereason() const;
  inline void set_failurereason(const ::std::string& value);
  inline void set_failurereason(const char* value);
  inline void set_failurereason(const char* value, size_t size);
  inline ::std::string* mutable_failurereason();
  inline ::std::string* release_failurereason();
  inline void set_allocated_failurereason(::std::string* failurereason);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspUnRegister)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_failurereason();
  inline void clear_has_failurereason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* failurereason_;
  bool isok_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspUnRegister* default_instance_;
};
// -------------------------------------------------------------------

class RspGetDeviceInfo_MapIPInfo : public ::google::protobuf::Message {
 public:
  RspGetDeviceInfo_MapIPInfo();
  virtual ~RspGetDeviceInfo_MapIPInfo();

  RspGetDeviceInfo_MapIPInfo(const RspGetDeviceInfo_MapIPInfo& from);

  inline RspGetDeviceInfo_MapIPInfo& operator=(const RspGetDeviceInfo_MapIPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetDeviceInfo_MapIPInfo& default_instance();

  void Swap(RspGetDeviceInfo_MapIPInfo* other);

  // implements Message ----------------------------------------------

  RspGetDeviceInfo_MapIPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetDeviceInfo_MapIPInfo& from);
  void MergeFrom(const RspGetDeviceInfo_MapIPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mapip = 1;
  inline bool has_mapip() const;
  inline void clear_mapip();
  static const int kMapipFieldNumber = 1;
  inline const ::std::string& mapip() const;
  inline void set_mapip(const ::std::string& value);
  inline void set_mapip(const char* value);
  inline void set_mapip(const char* value, size_t size);
  inline ::std::string* mutable_mapip();
  inline ::std::string* release_mapip();
  inline void set_allocated_mapip(::std::string* mapip);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetDeviceInfo.MapIPInfo)
 private:
  inline void set_has_mapip();
  inline void clear_has_mapip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapip_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetDeviceInfo_MapIPInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetDeviceInfo_DeviceInfo : public ::google::protobuf::Message {
 public:
  RspGetDeviceInfo_DeviceInfo();
  virtual ~RspGetDeviceInfo_DeviceInfo();

  RspGetDeviceInfo_DeviceInfo(const RspGetDeviceInfo_DeviceInfo& from);

  inline RspGetDeviceInfo_DeviceInfo& operator=(const RspGetDeviceInfo_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetDeviceInfo_DeviceInfo& default_instance();

  void Swap(RspGetDeviceInfo_DeviceInfo* other);

  // implements Message ----------------------------------------------

  RspGetDeviceInfo_DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetDeviceInfo_DeviceInfo& from);
  void MergeFrom(const RspGetDeviceInfo_DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 get_svr_type = 3;
  inline bool has_get_svr_type() const;
  inline void clear_get_svr_type();
  static const int kGetSvrTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 get_svr_type() const;
  inline void set_get_svr_type(::google::protobuf::uint32 value);

  // optional uint32 ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 load = 6;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 6;
  inline ::google::protobuf::uint32 load() const;
  inline void set_load(::google::protobuf::uint32 value);

  // optional uint32 load2 = 7;
  inline bool has_load2() const;
  inline void clear_load2();
  static const int kLoad2FieldNumber = 7;
  inline ::google::protobuf::uint32 load2() const;
  inline void set_load2(::google::protobuf::uint32 value);

  // optional uint32 groupid = 8;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 8;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string domainname = 9;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 9;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
  inline int mapinternetips_size() const;
  inline void clear_mapinternetips();
  static const int kMapinternetipsFieldNumber = 10;
  inline const ::SRMsgs::RspGetDeviceInfo_MapIPInfo& mapinternetips(int index) const;
  inline ::SRMsgs::RspGetDeviceInfo_MapIPInfo* mutable_mapinternetips(int index);
  inline ::SRMsgs::RspGetDeviceInfo_MapIPInfo* add_mapinternetips();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_MapIPInfo >&
      mapinternetips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_MapIPInfo >*
      mutable_mapinternetips();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetDeviceInfo.DeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_get_svr_type();
  inline void clear_has_get_svr_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_load2();
  inline void clear_has_load2();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_domainname();
  inline void clear_has_domainname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 get_svr_type_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 load_;
  ::google::protobuf::uint32 load2_;
  ::google::protobuf::uint32 groupid_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_MapIPInfo > mapinternetips_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetDeviceInfo_DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetDeviceInfo : public ::google::protobuf::Message {
 public:
  RspGetDeviceInfo();
  virtual ~RspGetDeviceInfo();

  RspGetDeviceInfo(const RspGetDeviceInfo& from);

  inline RspGetDeviceInfo& operator=(const RspGetDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetDeviceInfo& default_instance();

  void Swap(RspGetDeviceInfo* other);

  // implements Message ----------------------------------------------

  RspGetDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetDeviceInfo& from);
  void MergeFrom(const RspGetDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspGetDeviceInfo_MapIPInfo MapIPInfo;
  typedef RspGetDeviceInfo_DeviceInfo DeviceInfo;

  // accessors -------------------------------------------------------

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
  inline int deviceinfolist_size() const;
  inline void clear_deviceinfolist();
  static const int kDeviceinfolistFieldNumber = 3;
  inline const ::SRMsgs::RspGetDeviceInfo_DeviceInfo& deviceinfolist(int index) const;
  inline ::SRMsgs::RspGetDeviceInfo_DeviceInfo* mutable_deviceinfolist(int index);
  inline ::SRMsgs::RspGetDeviceInfo_DeviceInfo* add_deviceinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_DeviceInfo >&
      deviceinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_DeviceInfo >*
      mutable_deviceinfolist();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetDeviceInfo)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_DeviceInfo > deviceinfolist_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSysDeviceInfo_LoadInfo : public ::google::protobuf::Message {
 public:
  RspGetSysDeviceInfo_LoadInfo();
  virtual ~RspGetSysDeviceInfo_LoadInfo();

  RspGetSysDeviceInfo_LoadInfo(const RspGetSysDeviceInfo_LoadInfo& from);

  inline RspGetSysDeviceInfo_LoadInfo& operator=(const RspGetSysDeviceInfo_LoadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSysDeviceInfo_LoadInfo& default_instance();

  void Swap(RspGetSysDeviceInfo_LoadInfo* other);

  // implements Message ----------------------------------------------

  RspGetSysDeviceInfo_LoadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSysDeviceInfo_LoadInfo& from);
  void MergeFrom(const RspGetSysDeviceInfo_LoadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ternum = 1;
  inline bool has_ternum() const;
  inline void clear_ternum();
  static const int kTernumFieldNumber = 1;
  inline ::google::protobuf::uint32 ternum() const;
  inline void set_ternum(::google::protobuf::uint32 value);

  // optional uint32 tx = 2;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 2;
  inline ::google::protobuf::uint32 tx() const;
  inline void set_tx(::google::protobuf::uint32 value);

  // optional uint32 rx = 3;
  inline bool has_rx() const;
  inline void clear_rx();
  static const int kRxFieldNumber = 3;
  inline ::google::protobuf::uint32 rx() const;
  inline void set_rx(::google::protobuf::uint32 value);

  // optional uint32 cpu = 4;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 4;
  inline ::google::protobuf::uint32 cpu() const;
  inline void set_cpu(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
 private:
  inline void set_has_ternum();
  inline void clear_has_ternum();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_rx();
  inline void clear_has_rx();
  inline void set_has_cpu();
  inline void clear_has_cpu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ternum_;
  ::google::protobuf::uint32 tx_;
  ::google::protobuf::uint32 rx_;
  ::google::protobuf::uint32 cpu_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSysDeviceInfo_LoadInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSysDeviceInfo_IPPORTInfo : public ::google::protobuf::Message {
 public:
  RspGetSysDeviceInfo_IPPORTInfo();
  virtual ~RspGetSysDeviceInfo_IPPORTInfo();

  RspGetSysDeviceInfo_IPPORTInfo(const RspGetSysDeviceInfo_IPPORTInfo& from);

  inline RspGetSysDeviceInfo_IPPORTInfo& operator=(const RspGetSysDeviceInfo_IPPORTInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSysDeviceInfo_IPPORTInfo& default_instance();

  void Swap(RspGetSysDeviceInfo_IPPORTInfo* other);

  // implements Message ----------------------------------------------

  RspGetSysDeviceInfo_IPPORTInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSysDeviceInfo_IPPORTInfo& from);
  void MergeFrom(const RspGetSysDeviceInfo_IPPORTInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inner = 1;
  inline bool has_inner() const;
  inline void clear_inner();
  static const int kInnerFieldNumber = 1;
  inline const ::std::string& inner() const;
  inline void set_inner(const ::std::string& value);
  inline void set_inner(const char* value);
  inline void set_inner(const char* value, size_t size);
  inline ::std::string* mutable_inner();
  inline ::std::string* release_inner();
  inline void set_allocated_inner(::std::string* inner);

  // optional string outer = 2;
  inline bool has_outer() const;
  inline void clear_outer();
  static const int kOuterFieldNumber = 2;
  inline const ::std::string& outer() const;
  inline void set_outer(const ::std::string& value);
  inline void set_outer(const char* value);
  inline void set_outer(const char* value, size_t size);
  inline ::std::string* mutable_outer();
  inline ::std::string* release_outer();
  inline void set_allocated_outer(::std::string* outer);

  // optional string vpn = 3;
  inline bool has_vpn() const;
  inline void clear_vpn();
  static const int kVpnFieldNumber = 3;
  inline const ::std::string& vpn() const;
  inline void set_vpn(const ::std::string& value);
  inline void set_vpn(const char* value);
  inline void set_vpn(const char* value, size_t size);
  inline ::std::string* mutable_vpn();
  inline ::std::string* release_vpn();
  inline void set_allocated_vpn(::std::string* vpn);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
 private:
  inline void set_has_inner();
  inline void clear_has_inner();
  inline void set_has_outer();
  inline void clear_has_outer();
  inline void set_has_vpn();
  inline void clear_has_vpn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inner_;
  ::std::string* outer_;
  ::std::string* vpn_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSysDeviceInfo_IPPORTInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSysDeviceInfo_DeviceInfo : public ::google::protobuf::Message {
 public:
  RspGetSysDeviceInfo_DeviceInfo();
  virtual ~RspGetSysDeviceInfo_DeviceInfo();

  RspGetSysDeviceInfo_DeviceInfo(const RspGetSysDeviceInfo_DeviceInfo& from);

  inline RspGetSysDeviceInfo_DeviceInfo& operator=(const RspGetSysDeviceInfo_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSysDeviceInfo_DeviceInfo& default_instance();

  void Swap(RspGetSysDeviceInfo_DeviceInfo* other);

  // implements Message ----------------------------------------------

  RspGetSysDeviceInfo_DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSysDeviceInfo_DeviceInfo& from);
  void MergeFrom(const RspGetSysDeviceInfo_DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
  inline bool has_ipport() const;
  inline void clear_ipport();
  static const int kIpportFieldNumber = 2;
  inline const ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo& ipport() const;
  inline ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* mutable_ipport();
  inline ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* release_ipport();
  inline void set_allocated_ipport(::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* ipport);

  // optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
  inline bool has_loadinfos() const;
  inline void clear_loadinfos();
  static const int kLoadinfosFieldNumber = 3;
  inline const ::SRMsgs::RspGetSysDeviceInfo_LoadInfo& loadinfos() const;
  inline ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* mutable_loadinfos();
  inline ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* release_loadinfos();
  inline void set_allocated_loadinfos(::SRMsgs::RspGetSysDeviceInfo_LoadInfo* loadinfos);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_ipport();
  inline void clear_has_ipport();
  inline void set_has_loadinfos();
  inline void clear_has_loadinfos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* ipport_;
  ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* loadinfos_;
  ::google::protobuf::uint32 deviceid_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSysDeviceInfo_DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSysDeviceInfo_DomainInfo : public ::google::protobuf::Message {
 public:
  RspGetSysDeviceInfo_DomainInfo();
  virtual ~RspGetSysDeviceInfo_DomainInfo();

  RspGetSysDeviceInfo_DomainInfo(const RspGetSysDeviceInfo_DomainInfo& from);

  inline RspGetSysDeviceInfo_DomainInfo& operator=(const RspGetSysDeviceInfo_DomainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSysDeviceInfo_DomainInfo& default_instance();

  void Swap(RspGetSysDeviceInfo_DomainInfo* other);

  // implements Message ----------------------------------------------

  RspGetSysDeviceInfo_DomainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSysDeviceInfo_DomainInfo& from);
  void MergeFrom(const RspGetSysDeviceInfo_DomainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domainname = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainnameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
  inline int devices_size() const;
  inline void clear_devices();
  static const int kDevicesFieldNumber = 3;
  inline const ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo& devices(int index) const;
  inline ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo* mutable_devices(int index);
  inline ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo* add_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo >&
      devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo >*
      mutable_devices();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo > devices_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSysDeviceInfo_DomainInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSysDeviceInfo : public ::google::protobuf::Message {
 public:
  RspGetSysDeviceInfo();
  virtual ~RspGetSysDeviceInfo();

  RspGetSysDeviceInfo(const RspGetSysDeviceInfo& from);

  inline RspGetSysDeviceInfo& operator=(const RspGetSysDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSysDeviceInfo& default_instance();

  void Swap(RspGetSysDeviceInfo* other);

  // implements Message ----------------------------------------------

  RspGetSysDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSysDeviceInfo& from);
  void MergeFrom(const RspGetSysDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspGetSysDeviceInfo_LoadInfo LoadInfo;
  typedef RspGetSysDeviceInfo_IPPORTInfo IPPORTInfo;
  typedef RspGetSysDeviceInfo_DeviceInfo DeviceInfo;
  typedef RspGetSysDeviceInfo_DomainInfo DomainInfo;

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 svrtype = 3;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
  inline int domaininfos_size() const;
  inline void clear_domaininfos();
  static const int kDomaininfosFieldNumber = 4;
  inline const ::SRMsgs::RspGetSysDeviceInfo_DomainInfo& domaininfos(int index) const;
  inline ::SRMsgs::RspGetSysDeviceInfo_DomainInfo* mutable_domaininfos(int index);
  inline ::SRMsgs::RspGetSysDeviceInfo_DomainInfo* add_domaininfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DomainInfo >&
      domaininfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DomainInfo >*
      mutable_domaininfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSysDeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_svrtype();
  inline void clear_has_svrtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DomainInfo > domaininfos_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSysDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspGetSystemCurLoad : public ::google::protobuf::Message {
 public:
  RspGetSystemCurLoad();
  virtual ~RspGetSystemCurLoad();

  RspGetSystemCurLoad(const RspGetSystemCurLoad& from);

  inline RspGetSystemCurLoad& operator=(const RspGetSystemCurLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspGetSystemCurLoad& default_instance();

  void Swap(RspGetSystemCurLoad* other);

  // implements Message ----------------------------------------------

  RspGetSystemCurLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspGetSystemCurLoad& from);
  void MergeFrom(const RspGetSystemCurLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 curconfcnt = 2;
  inline bool has_curconfcnt() const;
  inline void clear_curconfcnt();
  static const int kCurconfcntFieldNumber = 2;
  inline ::google::protobuf::uint32 curconfcnt() const;
  inline void set_curconfcnt(::google::protobuf::uint32 value);

  // optional uint32 curreccnt = 3;
  inline bool has_curreccnt() const;
  inline void clear_curreccnt();
  static const int kCurreccntFieldNumber = 3;
  inline ::google::protobuf::uint32 curreccnt() const;
  inline void set_curreccnt(::google::protobuf::uint32 value);

  // optional uint32 curlivecnt = 4;
  inline bool has_curlivecnt() const;
  inline void clear_curlivecnt();
  static const int kCurlivecntFieldNumber = 4;
  inline ::google::protobuf::uint32 curlivecnt() const;
  inline void set_curlivecnt(::google::protobuf::uint32 value);

  // optional uint32 curanalycnt = 5;
  inline bool has_curanalycnt() const;
  inline void clear_curanalycnt();
  static const int kCuranalycntFieldNumber = 5;
  inline ::google::protobuf::uint32 curanalycnt() const;
  inline void set_curanalycnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspGetSystemCurLoad)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_curconfcnt();
  inline void clear_has_curconfcnt();
  inline void set_has_curreccnt();
  inline void clear_has_curreccnt();
  inline void set_has_curlivecnt();
  inline void clear_has_curlivecnt();
  inline void set_has_curanalycnt();
  inline void clear_has_curanalycnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 curconfcnt_;
  ::google::protobuf::uint32 curreccnt_;
  ::google::protobuf::uint32 curlivecnt_;
  ::google::protobuf::uint32 curanalycnt_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspGetSystemCurLoad* default_instance_;
};
// -------------------------------------------------------------------

class RspUpdateDeviceInfo_DeviceInfo : public ::google::protobuf::Message {
 public:
  RspUpdateDeviceInfo_DeviceInfo();
  virtual ~RspUpdateDeviceInfo_DeviceInfo();

  RspUpdateDeviceInfo_DeviceInfo(const RspUpdateDeviceInfo_DeviceInfo& from);

  inline RspUpdateDeviceInfo_DeviceInfo& operator=(const RspUpdateDeviceInfo_DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspUpdateDeviceInfo_DeviceInfo& default_instance();

  void Swap(RspUpdateDeviceInfo_DeviceInfo* other);

  // implements Message ----------------------------------------------

  RspUpdateDeviceInfo_DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspUpdateDeviceInfo_DeviceInfo& from);
  void MergeFrom(const RspUpdateDeviceInfo_DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline ::google::protobuf::uint32 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 load = 6;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 6;
  inline ::google::protobuf::uint32 load() const;
  inline void set_load(::google::protobuf::uint32 value);

  // optional uint32 load2 = 7;
  inline bool has_load2() const;
  inline void clear_load2();
  static const int kLoad2FieldNumber = 7;
  inline ::google::protobuf::uint32 load2() const;
  inline void set_load2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_load2();
  inline void clear_has_load2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 load_;
  ::google::protobuf::uint32 load2_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspUpdateDeviceInfo_DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspUpdateDeviceInfo : public ::google::protobuf::Message {
 public:
  RspUpdateDeviceInfo();
  virtual ~RspUpdateDeviceInfo();

  RspUpdateDeviceInfo(const RspUpdateDeviceInfo& from);

  inline RspUpdateDeviceInfo& operator=(const RspUpdateDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspUpdateDeviceInfo& default_instance();

  void Swap(RspUpdateDeviceInfo* other);

  // implements Message ----------------------------------------------

  RspUpdateDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspUpdateDeviceInfo& from);
  void MergeFrom(const RspUpdateDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspUpdateDeviceInfo_DeviceInfo DeviceInfo;

  // accessors -------------------------------------------------------

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
  inline int update_devices_size() const;
  inline void clear_update_devices();
  static const int kUpdateDevicesFieldNumber = 3;
  inline const ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo& update_devices(int index) const;
  inline ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo* mutable_update_devices(int index);
  inline ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo* add_update_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo >&
      update_devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo >*
      mutable_update_devices();

  // @@protoc_insertion_point(class_scope:SRMsgs.RspUpdateDeviceInfo)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo > update_devices_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static RspUpdateDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdGWOPMonitor : public ::google::protobuf::Message {
 public:
  CmdGWOPMonitor();
  virtual ~CmdGWOPMonitor();

  CmdGWOPMonitor(const CmdGWOPMonitor& from);

  inline CmdGWOPMonitor& operator=(const CmdGWOPMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdGWOPMonitor& default_instance();

  void Swap(CmdGWOPMonitor* other);

  // implements Message ----------------------------------------------

  CmdGWOPMonitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdGWOPMonitor& from);
  void MergeFrom(const CmdGWOPMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 optype = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 2;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // optional string platformcode = 3;
  inline bool has_platformcode() const;
  inline void clear_platformcode();
  static const int kPlatformcodeFieldNumber = 3;
  inline const ::std::string& platformcode() const;
  inline void set_platformcode(const ::std::string& value);
  inline void set_platformcode(const char* value);
  inline void set_platformcode(const char* value, size_t size);
  inline ::std::string* mutable_platformcode();
  inline ::std::string* release_platformcode();
  inline void set_allocated_platformcode(::std::string* platformcode);

  // optional string dsturl = 4;
  inline bool has_dsturl() const;
  inline void clear_dsturl();
  static const int kDsturlFieldNumber = 4;
  inline const ::std::string& dsturl() const;
  inline void set_dsturl(const ::std::string& value);
  inline void set_dsturl(const char* value);
  inline void set_dsturl(const char* value, size_t size);
  inline ::std::string* mutable_dsturl();
  inline ::std::string* release_dsturl();
  inline void set_allocated_dsturl(::std::string* dsturl);

  // optional string platformnewcode = 5;
  inline bool has_platformnewcode() const;
  inline void clear_platformnewcode();
  static const int kPlatformnewcodeFieldNumber = 5;
  inline const ::std::string& platformnewcode() const;
  inline void set_platformnewcode(const ::std::string& value);
  inline void set_platformnewcode(const char* value);
  inline void set_platformnewcode(const char* value, size_t size);
  inline ::std::string* mutable_platformnewcode();
  inline ::std::string* release_platformnewcode();
  inline void set_allocated_platformnewcode(::std::string* platformnewcode);

  // optional string platformnewkey = 6;
  inline bool has_platformnewkey() const;
  inline void clear_platformnewkey();
  static const int kPlatformnewkeyFieldNumber = 6;
  inline const ::std::string& platformnewkey() const;
  inline void set_platformnewkey(const ::std::string& value);
  inline void set_platformnewkey(const char* value);
  inline void set_platformnewkey(const char* value, size_t size);
  inline ::std::string* mutable_platformnewkey();
  inline ::std::string* release_platformnewkey();
  inline void set_allocated_platformnewkey(::std::string* platformnewkey);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdGWOPMonitor)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_platformcode();
  inline void clear_has_platformcode();
  inline void set_has_dsturl();
  inline void clear_has_dsturl();
  inline void set_has_platformnewcode();
  inline void clear_has_platformnewcode();
  inline void set_has_platformnewkey();
  inline void clear_has_platformnewkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::std::string* platformcode_;
  ::std::string* dsturl_;
  ::std::string* platformnewcode_;
  ::std::string* platformnewkey_;
  ::google::protobuf::uint32 optype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static CmdGWOPMonitor* default_instance_;
};
// -------------------------------------------------------------------

class CmdGWOPAVConfig_Capset : public ::google::protobuf::Message {
 public:
  CmdGWOPAVConfig_Capset();
  virtual ~CmdGWOPAVConfig_Capset();

  CmdGWOPAVConfig_Capset(const CmdGWOPAVConfig_Capset& from);

  inline CmdGWOPAVConfig_Capset& operator=(const CmdGWOPAVConfig_Capset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdGWOPAVConfig_Capset& default_instance();

  void Swap(CmdGWOPAVConfig_Capset* other);

  // implements Message ----------------------------------------------

  CmdGWOPAVConfig_Capset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdGWOPAVConfig_Capset& from);
  void MergeFrom(const CmdGWOPAVConfig_Capset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fmt = 1;
  inline bool has_fmt() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 1;
  inline const ::std::string& fmt() const;
  inline void set_fmt(const ::std::string& value);
  inline void set_fmt(const char* value);
  inline void set_fmt(const char* value, size_t size);
  inline ::std::string* mutable_fmt();
  inline ::std::string* release_fmt();
  inline void set_allocated_fmt(::std::string* fmt);

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdGWOPAVConfig.Capset)
 private:
  inline void set_has_fmt();
  inline void clear_has_fmt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fmt_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static CmdGWOPAVConfig_Capset* default_instance_;
};
// -------------------------------------------------------------------

class CmdGWOPAVConfig_CapInfo : public ::google::protobuf::Message {
 public:
  CmdGWOPAVConfig_CapInfo();
  virtual ~CmdGWOPAVConfig_CapInfo();

  CmdGWOPAVConfig_CapInfo(const CmdGWOPAVConfig_CapInfo& from);

  inline CmdGWOPAVConfig_CapInfo& operator=(const CmdGWOPAVConfig_CapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdGWOPAVConfig_CapInfo& default_instance();

  void Swap(CmdGWOPAVConfig_CapInfo* other);

  // implements Message ----------------------------------------------

  CmdGWOPAVConfig_CapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdGWOPAVConfig_CapInfo& from);
  void MergeFrom(const CmdGWOPAVConfig_CapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 captype = 1;
  inline bool has_captype() const;
  inline void clear_captype();
  static const int kCaptypeFieldNumber = 1;
  inline ::google::protobuf::uint32 captype() const;
  inline void set_captype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
  inline int capsets_size() const;
  inline void clear_capsets();
  static const int kCapsetsFieldNumber = 2;
  inline const ::SRMsgs::CmdGWOPAVConfig_Capset& capsets(int index) const;
  inline ::SRMsgs::CmdGWOPAVConfig_Capset* mutable_capsets(int index);
  inline ::SRMsgs::CmdGWOPAVConfig_Capset* add_capsets();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_Capset >&
      capsets() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_Capset >*
      mutable_capsets();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdGWOPAVConfig.CapInfo)
 private:
  inline void set_has_captype();
  inline void clear_has_captype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_Capset > capsets_;
  ::google::protobuf::uint32 captype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static CmdGWOPAVConfig_CapInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdGWOPAVConfig : public ::google::protobuf::Message {
 public:
  CmdGWOPAVConfig();
  virtual ~CmdGWOPAVConfig();

  CmdGWOPAVConfig(const CmdGWOPAVConfig& from);

  inline CmdGWOPAVConfig& operator=(const CmdGWOPAVConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdGWOPAVConfig& default_instance();

  void Swap(CmdGWOPAVConfig* other);

  // implements Message ----------------------------------------------

  CmdGWOPAVConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdGWOPAVConfig& from);
  void MergeFrom(const CmdGWOPAVConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdGWOPAVConfig_Capset Capset;
  typedef CmdGWOPAVConfig_CapInfo CapInfo;

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 optype = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 2;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
  inline int capinfos_size() const;
  inline void clear_capinfos();
  static const int kCapinfosFieldNumber = 3;
  inline const ::SRMsgs::CmdGWOPAVConfig_CapInfo& capinfos(int index) const;
  inline ::SRMsgs::CmdGWOPAVConfig_CapInfo* mutable_capinfos(int index);
  inline ::SRMsgs::CmdGWOPAVConfig_CapInfo* add_capinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_CapInfo >&
      capinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_CapInfo >*
      mutable_capinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.CmdGWOPAVConfig)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_CapInfo > capinfos_;
  ::google::protobuf::uint32 optype_;
  friend void  protobuf_AddDesc_device_5fser_2eproto();
  friend void protobuf_AssignDesc_device_5fser_2eproto();
  friend void protobuf_ShutdownFile_device_5fser_2eproto();

  void InitAsDefaultInstance();
  static CmdGWOPAVConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqRegister_TerInfo

// optional uint32 suid = 1;
inline bool ReqRegister_TerInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegister_TerInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegister_TerInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegister_TerInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 ReqRegister_TerInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.suid)
  return suid_;
}
inline void ReqRegister_TerInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.suid)
}

// optional string ip = 2;
inline bool ReqRegister_TerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRegister_TerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRegister_TerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRegister_TerInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqRegister_TerInfo::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.ip)
  return *ip_;
}
inline void ReqRegister_TerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.ip)
}
inline void ReqRegister_TerInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.TerInfo.ip)
}
inline void ReqRegister_TerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.TerInfo.ip)
}
inline ::std::string* ReqRegister_TerInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.TerInfo.ip)
  return ip_;
}
inline ::std::string* ReqRegister_TerInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister_TerInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.TerInfo.ip)
}

// optional string alias = 3;
inline bool ReqRegister_TerInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRegister_TerInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRegister_TerInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRegister_TerInfo::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& ReqRegister_TerInfo::alias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.alias)
  return *alias_;
}
inline void ReqRegister_TerInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.alias)
}
inline void ReqRegister_TerInfo::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.TerInfo.alias)
}
inline void ReqRegister_TerInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.TerInfo.alias)
}
inline ::std::string* ReqRegister_TerInfo::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.TerInfo.alias)
  return alias_;
}
inline ::std::string* ReqRegister_TerInfo::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister_TerInfo::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.TerInfo.alias)
}

// optional uint32 netmpid = 4;
inline bool ReqRegister_TerInfo::has_netmpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqRegister_TerInfo::set_has_netmpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqRegister_TerInfo::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqRegister_TerInfo::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 ReqRegister_TerInfo::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.netmpid)
  return netmpid_;
}
inline void ReqRegister_TerInfo::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.netmpid)
}

// optional uint32 fromtype = 5;
inline bool ReqRegister_TerInfo::has_fromtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqRegister_TerInfo::set_has_fromtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqRegister_TerInfo::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqRegister_TerInfo::clear_fromtype() {
  fromtype_ = 0u;
  clear_has_fromtype();
}
inline ::google::protobuf::uint32 ReqRegister_TerInfo::fromtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.fromtype)
  return fromtype_;
}
inline void ReqRegister_TerInfo::set_fromtype(::google::protobuf::uint32 value) {
  set_has_fromtype();
  fromtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.fromtype)
}

// optional uint32 termtype = 6;
inline bool ReqRegister_TerInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqRegister_TerInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqRegister_TerInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqRegister_TerInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 ReqRegister_TerInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.termtype)
  return termtype_;
}
inline void ReqRegister_TerInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.termtype)
}

// optional uint32 producttype = 7;
inline bool ReqRegister_TerInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqRegister_TerInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqRegister_TerInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqRegister_TerInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 ReqRegister_TerInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.TerInfo.producttype)
  return producttype_;
}
inline void ReqRegister_TerInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.TerInfo.producttype)
}

// -------------------------------------------------------------------

// ReqRegister_ConfInfo

// optional uint64 confid = 1;
inline bool ReqRegister_ConfInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegister_ConfInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegister_ConfInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegister_ConfInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqRegister_ConfInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.ConfInfo.confid)
  return confid_;
}
inline void ReqRegister_ConfInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.ConfInfo.confid)
}

// repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
inline int ReqRegister_ConfInfo::terlist_size() const {
  return terlist_.size();
}
inline void ReqRegister_ConfInfo::clear_terlist() {
  terlist_.Clear();
}
inline const ::SRMsgs::ReqRegister_TerInfo& ReqRegister_ConfInfo::terlist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.ConfInfo.terlist)
  return terlist_.Get(index);
}
inline ::SRMsgs::ReqRegister_TerInfo* ReqRegister_ConfInfo::mutable_terlist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.ConfInfo.terlist)
  return terlist_.Mutable(index);
}
inline ::SRMsgs::ReqRegister_TerInfo* ReqRegister_ConfInfo::add_terlist() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqRegister.ConfInfo.terlist)
  return terlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_TerInfo >&
ReqRegister_ConfInfo::terlist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqRegister.ConfInfo.terlist)
  return terlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_TerInfo >*
ReqRegister_ConfInfo::mutable_terlist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqRegister.ConfInfo.terlist)
  return &terlist_;
}

// -------------------------------------------------------------------

// ReqRegister_MapIPInfo

// optional string mapip = 1;
inline bool ReqRegister_MapIPInfo::has_mapip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegister_MapIPInfo::set_has_mapip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegister_MapIPInfo::clear_has_mapip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegister_MapIPInfo::clear_mapip() {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_->clear();
  }
  clear_has_mapip();
}
inline const ::std::string& ReqRegister_MapIPInfo::mapip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.MapIPInfo.mapip)
  return *mapip_;
}
inline void ReqRegister_MapIPInfo::set_mapip(const ::std::string& value) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.MapIPInfo.mapip)
}
inline void ReqRegister_MapIPInfo::set_mapip(const char* value) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.MapIPInfo.mapip)
}
inline void ReqRegister_MapIPInfo::set_mapip(const char* value, size_t size) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.MapIPInfo.mapip)
}
inline ::std::string* ReqRegister_MapIPInfo::mutable_mapip() {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.MapIPInfo.mapip)
  return mapip_;
}
inline ::std::string* ReqRegister_MapIPInfo::release_mapip() {
  clear_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapip_;
    mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister_MapIPInfo::set_allocated_mapip(::std::string* mapip) {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapip_;
  }
  if (mapip) {
    set_has_mapip();
    mapip_ = mapip;
  } else {
    clear_has_mapip();
    mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.MapIPInfo.mapip)
}

// -------------------------------------------------------------------

// ReqRegister

// optional uint32 ip = 1;
inline bool ReqRegister::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegister::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegister::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegister::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 ReqRegister::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.ip)
  return ip_;
}
inline void ReqRegister::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.ip)
}

// optional uint32 port = 2;
inline bool ReqRegister::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRegister::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRegister::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRegister::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqRegister::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.port)
  return port_;
}
inline void ReqRegister::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.port)
}

// optional string auth_password = 3;
inline bool ReqRegister::has_auth_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRegister::set_has_auth_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRegister::clear_has_auth_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRegister::clear_auth_password() {
  if (auth_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_password_->clear();
  }
  clear_has_auth_password();
}
inline const ::std::string& ReqRegister::auth_password() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.auth_password)
  return *auth_password_;
}
inline void ReqRegister::set_auth_password(const ::std::string& value) {
  set_has_auth_password();
  if (auth_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_password_ = new ::std::string;
  }
  auth_password_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.auth_password)
}
inline void ReqRegister::set_auth_password(const char* value) {
  set_has_auth_password();
  if (auth_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_password_ = new ::std::string;
  }
  auth_password_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.auth_password)
}
inline void ReqRegister::set_auth_password(const char* value, size_t size) {
  set_has_auth_password();
  if (auth_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_password_ = new ::std::string;
  }
  auth_password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.auth_password)
}
inline ::std::string* ReqRegister::mutable_auth_password() {
  set_has_auth_password();
  if (auth_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.auth_password)
  return auth_password_;
}
inline ::std::string* ReqRegister::release_auth_password() {
  clear_has_auth_password();
  if (auth_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auth_password_;
    auth_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_password_;
  }
  if (auth_password) {
    set_has_auth_password();
    auth_password_ = auth_password;
  } else {
    clear_has_auth_password();
    auth_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.auth_password)
}

// optional uint32 svr_type = 4;
inline bool ReqRegister::has_svr_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqRegister::set_has_svr_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqRegister::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqRegister::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 ReqRegister::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.svr_type)
  return svr_type_;
}
inline void ReqRegister::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.svr_type)
}

// optional uint32 cpunums = 5;
inline bool ReqRegister::has_cpunums() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqRegister::set_has_cpunums() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqRegister::clear_has_cpunums() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqRegister::clear_cpunums() {
  cpunums_ = 0u;
  clear_has_cpunums();
}
inline ::google::protobuf::uint32 ReqRegister::cpunums() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.cpunums)
  return cpunums_;
}
inline void ReqRegister::set_cpunums(::google::protobuf::uint32 value) {
  set_has_cpunums();
  cpunums_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.cpunums)
}

// optional uint32 max_bandwidth = 6;
inline bool ReqRegister::has_max_bandwidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqRegister::set_has_max_bandwidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqRegister::clear_has_max_bandwidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqRegister::clear_max_bandwidth() {
  max_bandwidth_ = 0u;
  clear_has_max_bandwidth();
}
inline ::google::protobuf::uint32 ReqRegister::max_bandwidth() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.max_bandwidth)
  return max_bandwidth_;
}
inline void ReqRegister::set_max_bandwidth(::google::protobuf::uint32 value) {
  set_has_max_bandwidth();
  max_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.max_bandwidth)
}

// repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
inline int ReqRegister::conflist_size() const {
  return conflist_.size();
}
inline void ReqRegister::clear_conflist() {
  conflist_.Clear();
}
inline const ::SRMsgs::ReqRegister_ConfInfo& ReqRegister::conflist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.conflist)
  return conflist_.Get(index);
}
inline ::SRMsgs::ReqRegister_ConfInfo* ReqRegister::mutable_conflist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.conflist)
  return conflist_.Mutable(index);
}
inline ::SRMsgs::ReqRegister_ConfInfo* ReqRegister::add_conflist() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqRegister.conflist)
  return conflist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_ConfInfo >&
ReqRegister::conflist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqRegister.conflist)
  return conflist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_ConfInfo >*
ReqRegister::mutable_conflist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqRegister.conflist)
  return &conflist_;
}

// optional string systemlicence = 8;
inline bool ReqRegister::has_systemlicence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqRegister::set_has_systemlicence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqRegister::clear_has_systemlicence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqRegister::clear_systemlicence() {
  if (systemlicence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    systemlicence_->clear();
  }
  clear_has_systemlicence();
}
inline const ::std::string& ReqRegister::systemlicence() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.systemlicence)
  return *systemlicence_;
}
inline void ReqRegister::set_systemlicence(const ::std::string& value) {
  set_has_systemlicence();
  if (systemlicence_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    systemlicence_ = new ::std::string;
  }
  systemlicence_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.systemlicence)
}
inline void ReqRegister::set_systemlicence(const char* value) {
  set_has_systemlicence();
  if (systemlicence_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    systemlicence_ = new ::std::string;
  }
  systemlicence_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.systemlicence)
}
inline void ReqRegister::set_systemlicence(const char* value, size_t size) {
  set_has_systemlicence();
  if (systemlicence_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    systemlicence_ = new ::std::string;
  }
  systemlicence_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.systemlicence)
}
inline ::std::string* ReqRegister::mutable_systemlicence() {
  set_has_systemlicence();
  if (systemlicence_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    systemlicence_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.systemlicence)
  return systemlicence_;
}
inline ::std::string* ReqRegister::release_systemlicence() {
  clear_has_systemlicence();
  if (systemlicence_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = systemlicence_;
    systemlicence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister::set_allocated_systemlicence(::std::string* systemlicence) {
  if (systemlicence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete systemlicence_;
  }
  if (systemlicence) {
    set_has_systemlicence();
    systemlicence_ = systemlicence;
  } else {
    clear_has_systemlicence();
    systemlicence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.systemlicence)
}

// optional uint32 nettype = 9;
inline bool ReqRegister::has_nettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqRegister::set_has_nettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqRegister::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqRegister::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqRegister::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.nettype)
  return nettype_;
}
inline void ReqRegister::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.nettype)
}

// optional string version = 10;
inline bool ReqRegister::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqRegister::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqRegister::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqRegister::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ReqRegister::version() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.version)
  return *version_;
}
inline void ReqRegister::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.version)
}
inline void ReqRegister::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.version)
}
inline void ReqRegister::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.version)
}
inline ::std::string* ReqRegister::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.version)
  return version_;
}
inline ::std::string* ReqRegister::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.version)
}

// optional string domainname = 11;
inline bool ReqRegister::has_domainname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqRegister::set_has_domainname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqRegister::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqRegister::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqRegister::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.domainname)
  return *domainname_;
}
inline void ReqRegister::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.domainname)
}
inline void ReqRegister::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqRegister.domainname)
}
inline void ReqRegister::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqRegister.domainname)
}
inline ::std::string* ReqRegister::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.domainname)
  return domainname_;
}
inline ::std::string* ReqRegister::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRegister::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqRegister.domainname)
}

// optional uint32 httpport = 12;
inline bool ReqRegister::has_httpport() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqRegister::set_has_httpport() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqRegister::clear_has_httpport() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqRegister::clear_httpport() {
  httpport_ = 0u;
  clear_has_httpport();
}
inline ::google::protobuf::uint32 ReqRegister::httpport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.httpport)
  return httpport_;
}
inline void ReqRegister::set_httpport(::google::protobuf::uint32 value) {
  set_has_httpport();
  httpport_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqRegister.httpport)
}

// repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
inline int ReqRegister::mapinternetips_size() const {
  return mapinternetips_.size();
}
inline void ReqRegister::clear_mapinternetips() {
  mapinternetips_.Clear();
}
inline const ::SRMsgs::ReqRegister_MapIPInfo& ReqRegister::mapinternetips(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqRegister.mapinternetips)
  return mapinternetips_.Get(index);
}
inline ::SRMsgs::ReqRegister_MapIPInfo* ReqRegister::mutable_mapinternetips(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqRegister.mapinternetips)
  return mapinternetips_.Mutable(index);
}
inline ::SRMsgs::ReqRegister_MapIPInfo* ReqRegister::add_mapinternetips() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqRegister.mapinternetips)
  return mapinternetips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_MapIPInfo >&
ReqRegister::mapinternetips() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqRegister.mapinternetips)
  return mapinternetips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqRegister_MapIPInfo >*
ReqRegister::mutable_mapinternetips() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqRegister.mapinternetips)
  return &mapinternetips_;
}

// -------------------------------------------------------------------

// ReqUnRegister

// optional string token = 1;
inline bool ReqUnRegister::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUnRegister::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUnRegister::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUnRegister::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqUnRegister::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUnRegister.token)
  return *token_;
}
inline void ReqUnRegister::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUnRegister.token)
}
inline void ReqUnRegister::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqUnRegister.token)
}
inline void ReqUnRegister::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqUnRegister.token)
}
inline ::std::string* ReqUnRegister::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqUnRegister.token)
  return token_;
}
inline ::std::string* ReqUnRegister::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqUnRegister::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqUnRegister.token)
}

// -------------------------------------------------------------------

// ReqConfInfoFromDevMgr

// optional uint32 deviceid = 1;
inline bool ReqConfInfoFromDevMgr::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqConfInfoFromDevMgr::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqConfInfoFromDevMgr::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqConfInfoFromDevMgr::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqConfInfoFromDevMgr::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfInfoFromDevMgr.deviceid)
  return deviceid_;
}
inline void ReqConfInfoFromDevMgr::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfInfoFromDevMgr.deviceid)
}

// optional string token = 2;
inline bool ReqConfInfoFromDevMgr::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqConfInfoFromDevMgr::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqConfInfoFromDevMgr::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqConfInfoFromDevMgr::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqConfInfoFromDevMgr::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfInfoFromDevMgr.token)
  return *token_;
}
inline void ReqConfInfoFromDevMgr::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfInfoFromDevMgr.token)
}
inline void ReqConfInfoFromDevMgr::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqConfInfoFromDevMgr.token)
}
inline void ReqConfInfoFromDevMgr::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqConfInfoFromDevMgr.token)
}
inline ::std::string* ReqConfInfoFromDevMgr::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqConfInfoFromDevMgr.token)
  return token_;
}
inline ::std::string* ReqConfInfoFromDevMgr::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqConfInfoFromDevMgr::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqConfInfoFromDevMgr.token)
}

// optional uint64 confid = 3;
inline bool ReqConfInfoFromDevMgr::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqConfInfoFromDevMgr::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqConfInfoFromDevMgr::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqConfInfoFromDevMgr::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqConfInfoFromDevMgr::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqConfInfoFromDevMgr.confid)
  return confid_;
}
inline void ReqConfInfoFromDevMgr::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqConfInfoFromDevMgr.confid)
}

// -------------------------------------------------------------------

// ReqGetDeviceInfo

// optional uint32 deviceid = 1;
inline bool ReqGetDeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGetDeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGetDeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGetDeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqGetDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.deviceid)
  return deviceid_;
}
inline void ReqGetDeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.deviceid)
}

// optional string token = 2;
inline bool ReqGetDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGetDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGetDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGetDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqGetDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.token)
  return *token_;
}
inline void ReqGetDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.token)
}
inline void ReqGetDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetDeviceInfo.token)
}
inline void ReqGetDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetDeviceInfo.token)
}
inline ::std::string* ReqGetDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetDeviceInfo.token)
  return token_;
}
inline ::std::string* ReqGetDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqGetDeviceInfo.token)
}

// optional uint32 svr_type = 3;
inline bool ReqGetDeviceInfo::has_svr_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqGetDeviceInfo::set_has_svr_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqGetDeviceInfo::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqGetDeviceInfo::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 ReqGetDeviceInfo::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.svr_type)
  return svr_type_;
}
inline void ReqGetDeviceInfo::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.svr_type)
}

// optional uint32 get_svr_type = 4;
inline bool ReqGetDeviceInfo::has_get_svr_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqGetDeviceInfo::set_has_get_svr_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqGetDeviceInfo::clear_has_get_svr_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqGetDeviceInfo::clear_get_svr_type() {
  get_svr_type_ = 0u;
  clear_has_get_svr_type();
}
inline ::google::protobuf::uint32 ReqGetDeviceInfo::get_svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.get_svr_type)
  return get_svr_type_;
}
inline void ReqGetDeviceInfo::set_get_svr_type(::google::protobuf::uint32 value) {
  set_has_get_svr_type();
  get_svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.get_svr_type)
}

// optional uint32 devnums = 5;
inline bool ReqGetDeviceInfo::has_devnums() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqGetDeviceInfo::set_has_devnums() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqGetDeviceInfo::clear_has_devnums() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqGetDeviceInfo::clear_devnums() {
  devnums_ = 0u;
  clear_has_devnums();
}
inline ::google::protobuf::uint32 ReqGetDeviceInfo::devnums() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.devnums)
  return devnums_;
}
inline void ReqGetDeviceInfo::set_devnums(::google::protobuf::uint32 value) {
  set_has_devnums();
  devnums_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.devnums)
}

// optional string domainname = 6;
inline bool ReqGetDeviceInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqGetDeviceInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqGetDeviceInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqGetDeviceInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqGetDeviceInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetDeviceInfo.domainname)
  return *domainname_;
}
inline void ReqGetDeviceInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetDeviceInfo.domainname)
}
inline void ReqGetDeviceInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetDeviceInfo.domainname)
}
inline void ReqGetDeviceInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetDeviceInfo.domainname)
}
inline ::std::string* ReqGetDeviceInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetDeviceInfo.domainname)
  return domainname_;
}
inline ::std::string* ReqGetDeviceInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetDeviceInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqGetDeviceInfo.domainname)
}

// -------------------------------------------------------------------

// ReqGetSysDeviceInfo

// optional uint32 deviceid = 1;
inline bool ReqGetSysDeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGetSysDeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGetSysDeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGetSysDeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqGetSysDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.deviceid)
  return deviceid_;
}
inline void ReqGetSysDeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.deviceid)
}

// optional string token = 2;
inline bool ReqGetSysDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGetSysDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGetSysDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGetSysDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqGetSysDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.token)
  return *token_;
}
inline void ReqGetSysDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.token)
}
inline void ReqGetSysDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetSysDeviceInfo.token)
}
inline void ReqGetSysDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetSysDeviceInfo.token)
}
inline ::std::string* ReqGetSysDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetSysDeviceInfo.token)
  return token_;
}
inline ::std::string* ReqGetSysDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetSysDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqGetSysDeviceInfo.token)
}

// optional uint32 svr_type = 3;
inline bool ReqGetSysDeviceInfo::has_svr_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqGetSysDeviceInfo::set_has_svr_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqGetSysDeviceInfo::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqGetSysDeviceInfo::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 ReqGetSysDeviceInfo::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.svr_type)
  return svr_type_;
}
inline void ReqGetSysDeviceInfo::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.svr_type)
}

// optional string domainname = 4;
inline bool ReqGetSysDeviceInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqGetSysDeviceInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqGetSysDeviceInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqGetSysDeviceInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& ReqGetSysDeviceInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.domainname)
  return *domainname_;
}
inline void ReqGetSysDeviceInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.domainname)
}
inline void ReqGetSysDeviceInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetSysDeviceInfo.domainname)
}
inline void ReqGetSysDeviceInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetSysDeviceInfo.domainname)
}
inline ::std::string* ReqGetSysDeviceInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetSysDeviceInfo.domainname)
  return domainname_;
}
inline ::std::string* ReqGetSysDeviceInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetSysDeviceInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqGetSysDeviceInfo.domainname)
}

// optional uint32 get_svr_type = 5;
inline bool ReqGetSysDeviceInfo::has_get_svr_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqGetSysDeviceInfo::set_has_get_svr_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqGetSysDeviceInfo::clear_has_get_svr_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqGetSysDeviceInfo::clear_get_svr_type() {
  get_svr_type_ = 0u;
  clear_has_get_svr_type();
}
inline ::google::protobuf::uint32 ReqGetSysDeviceInfo::get_svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.get_svr_type)
  return get_svr_type_;
}
inline void ReqGetSysDeviceInfo::set_get_svr_type(::google::protobuf::uint32 value) {
  set_has_get_svr_type();
  get_svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.get_svr_type)
}

// repeated string get_domainnames = 6;
inline int ReqGetSysDeviceInfo::get_domainnames_size() const {
  return get_domainnames_.size();
}
inline void ReqGetSysDeviceInfo::clear_get_domainnames() {
  get_domainnames_.Clear();
}
inline const ::std::string& ReqGetSysDeviceInfo::get_domainnames(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
  return get_domainnames_.Get(index);
}
inline ::std::string* ReqGetSysDeviceInfo::mutable_get_domainnames(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
  return get_domainnames_.Mutable(index);
}
inline void ReqGetSysDeviceInfo::set_get_domainnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
  get_domainnames_.Mutable(index)->assign(value);
}
inline void ReqGetSysDeviceInfo::set_get_domainnames(int index, const char* value) {
  get_domainnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
}
inline void ReqGetSysDeviceInfo::set_get_domainnames(int index, const char* value, size_t size) {
  get_domainnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
}
inline ::std::string* ReqGetSysDeviceInfo::add_get_domainnames() {
  return get_domainnames_.Add();
}
inline void ReqGetSysDeviceInfo::add_get_domainnames(const ::std::string& value) {
  get_domainnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
}
inline void ReqGetSysDeviceInfo::add_get_domainnames(const char* value) {
  get_domainnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
}
inline void ReqGetSysDeviceInfo::add_get_domainnames(const char* value, size_t size) {
  get_domainnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqGetSysDeviceInfo::get_domainnames() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
  return get_domainnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqGetSysDeviceInfo::mutable_get_domainnames() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqGetSysDeviceInfo.get_domainnames)
  return &get_domainnames_;
}

// -------------------------------------------------------------------

// ReqGetSystemCurLoad

// optional uint32 deviceid = 1;
inline bool ReqGetSystemCurLoad::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGetSystemCurLoad::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGetSystemCurLoad::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGetSystemCurLoad::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqGetSystemCurLoad::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSystemCurLoad.deviceid)
  return deviceid_;
}
inline void ReqGetSystemCurLoad::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSystemCurLoad.deviceid)
}

// optional string token = 2;
inline bool ReqGetSystemCurLoad::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGetSystemCurLoad::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGetSystemCurLoad::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGetSystemCurLoad::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqGetSystemCurLoad::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqGetSystemCurLoad.token)
  return *token_;
}
inline void ReqGetSystemCurLoad::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqGetSystemCurLoad.token)
}
inline void ReqGetSystemCurLoad::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqGetSystemCurLoad.token)
}
inline void ReqGetSystemCurLoad::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqGetSystemCurLoad.token)
}
inline ::std::string* ReqGetSystemCurLoad::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqGetSystemCurLoad.token)
  return token_;
}
inline ::std::string* ReqGetSystemCurLoad::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqGetSystemCurLoad::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqGetSystemCurLoad.token)
}

// -------------------------------------------------------------------

// ReqUpdateDeviceInfo_DeviceInfo

// optional uint32 deviceid = 1;
inline bool ReqUpdateDeviceInfo_DeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqUpdateDeviceInfo_DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo.deviceid)
  return deviceid_;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo.deviceid)
}

// optional uint32 update_svr_type = 2;
inline bool ReqUpdateDeviceInfo_DeviceInfo::has_update_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::set_has_update_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::clear_has_update_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::clear_update_svr_type() {
  update_svr_type_ = 0u;
  clear_has_update_svr_type();
}
inline ::google::protobuf::uint32 ReqUpdateDeviceInfo_DeviceInfo::update_svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo.update_svr_type)
  return update_svr_type_;
}
inline void ReqUpdateDeviceInfo_DeviceInfo::set_update_svr_type(::google::protobuf::uint32 value) {
  set_has_update_svr_type();
  update_svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo.update_svr_type)
}

// -------------------------------------------------------------------

// ReqUpdateDeviceInfo

// optional uint32 deviceid = 1;
inline bool ReqUpdateDeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUpdateDeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUpdateDeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUpdateDeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 ReqUpdateDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.deviceid)
  return deviceid_;
}
inline void ReqUpdateDeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUpdateDeviceInfo.deviceid)
}

// optional string token = 2;
inline bool ReqUpdateDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUpdateDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUpdateDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUpdateDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ReqUpdateDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.token)
  return *token_;
}
inline void ReqUpdateDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUpdateDeviceInfo.token)
}
inline void ReqUpdateDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqUpdateDeviceInfo.token)
}
inline void ReqUpdateDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqUpdateDeviceInfo.token)
}
inline ::std::string* ReqUpdateDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqUpdateDeviceInfo.token)
  return token_;
}
inline ::std::string* ReqUpdateDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqUpdateDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqUpdateDeviceInfo.token)
}

// optional uint32 svr_type = 3;
inline bool ReqUpdateDeviceInfo::has_svr_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqUpdateDeviceInfo::set_has_svr_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqUpdateDeviceInfo::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqUpdateDeviceInfo::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 ReqUpdateDeviceInfo::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.svr_type)
  return svr_type_;
}
inline void ReqUpdateDeviceInfo::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqUpdateDeviceInfo.svr_type)
}

// repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
inline int ReqUpdateDeviceInfo::update_devices_size() const {
  return update_devices_.size();
}
inline void ReqUpdateDeviceInfo::clear_update_devices() {
  update_devices_.Clear();
}
inline const ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo& ReqUpdateDeviceInfo::update_devices(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqUpdateDeviceInfo.update_devices)
  return update_devices_.Get(index);
}
inline ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo* ReqUpdateDeviceInfo::mutable_update_devices(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqUpdateDeviceInfo.update_devices)
  return update_devices_.Mutable(index);
}
inline ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo* ReqUpdateDeviceInfo::add_update_devices() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqUpdateDeviceInfo.update_devices)
  return update_devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo >&
ReqUpdateDeviceInfo::update_devices() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqUpdateDeviceInfo.update_devices)
  return update_devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqUpdateDeviceInfo_DeviceInfo >*
ReqUpdateDeviceInfo::mutable_update_devices() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqUpdateDeviceInfo.update_devices)
  return &update_devices_;
}

// -------------------------------------------------------------------

// IndNewTermJoinConf

// optional uint32 deviceid = 1;
inline bool IndNewTermJoinConf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNewTermJoinConf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNewTermJoinConf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNewTermJoinConf::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.deviceid)
  return deviceid_;
}
inline void IndNewTermJoinConf::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.deviceid)
}

// optional string token = 2;
inline bool IndNewTermJoinConf::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNewTermJoinConf::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNewTermJoinConf::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNewTermJoinConf::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndNewTermJoinConf::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.token)
  return *token_;
}
inline void IndNewTermJoinConf::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.token)
}
inline void IndNewTermJoinConf::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewTermJoinConf.token)
}
inline void IndNewTermJoinConf::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewTermJoinConf.token)
}
inline ::std::string* IndNewTermJoinConf::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewTermJoinConf.token)
  return token_;
}
inline ::std::string* IndNewTermJoinConf::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewTermJoinConf::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewTermJoinConf.token)
}

// optional uint64 confid = 3;
inline bool IndNewTermJoinConf::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNewTermJoinConf::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNewTermJoinConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNewTermJoinConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndNewTermJoinConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.confid)
  return confid_;
}
inline void IndNewTermJoinConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.confid)
}

// optional uint32 suid = 4;
inline bool IndNewTermJoinConf::has_suid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNewTermJoinConf::set_has_suid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNewTermJoinConf::clear_has_suid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNewTermJoinConf::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.suid)
  return suid_;
}
inline void IndNewTermJoinConf::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.suid)
}

// optional string ip = 5;
inline bool IndNewTermJoinConf::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndNewTermJoinConf::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndNewTermJoinConf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndNewTermJoinConf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndNewTermJoinConf::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.ip)
  return *ip_;
}
inline void IndNewTermJoinConf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.ip)
}
inline void IndNewTermJoinConf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewTermJoinConf.ip)
}
inline void IndNewTermJoinConf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewTermJoinConf.ip)
}
inline ::std::string* IndNewTermJoinConf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewTermJoinConf.ip)
  return ip_;
}
inline ::std::string* IndNewTermJoinConf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewTermJoinConf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewTermJoinConf.ip)
}

// optional string alias = 6;
inline bool IndNewTermJoinConf::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndNewTermJoinConf::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndNewTermJoinConf::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndNewTermJoinConf::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& IndNewTermJoinConf::alias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.alias)
  return *alias_;
}
inline void IndNewTermJoinConf::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.alias)
}
inline void IndNewTermJoinConf::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNewTermJoinConf.alias)
}
inline void IndNewTermJoinConf::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNewTermJoinConf.alias)
}
inline ::std::string* IndNewTermJoinConf::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNewTermJoinConf.alias)
  return alias_;
}
inline ::std::string* IndNewTermJoinConf::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNewTermJoinConf::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNewTermJoinConf.alias)
}

// optional uint32 netmpid = 7;
inline bool IndNewTermJoinConf::has_netmpid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndNewTermJoinConf::set_has_netmpid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndNewTermJoinConf::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndNewTermJoinConf::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.netmpid)
  return netmpid_;
}
inline void IndNewTermJoinConf::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.netmpid)
}

// optional uint64 confreportid = 8;
inline bool IndNewTermJoinConf::has_confreportid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndNewTermJoinConf::set_has_confreportid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndNewTermJoinConf::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndNewTermJoinConf::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndNewTermJoinConf::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.confreportid)
  return confreportid_;
}
inline void IndNewTermJoinConf::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.confreportid)
}

// optional uint32 fromtype = 9;
inline bool IndNewTermJoinConf::has_fromtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndNewTermJoinConf::set_has_fromtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndNewTermJoinConf::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndNewTermJoinConf::clear_fromtype() {
  fromtype_ = 0u;
  clear_has_fromtype();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::fromtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.fromtype)
  return fromtype_;
}
inline void IndNewTermJoinConf::set_fromtype(::google::protobuf::uint32 value) {
  set_has_fromtype();
  fromtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.fromtype)
}

// optional uint32 termtype = 10;
inline bool IndNewTermJoinConf::has_termtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndNewTermJoinConf::set_has_termtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndNewTermJoinConf::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndNewTermJoinConf::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.termtype)
  return termtype_;
}
inline void IndNewTermJoinConf::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.termtype)
}

// optional uint32 producttype = 11;
inline bool IndNewTermJoinConf::has_producttype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndNewTermJoinConf::set_has_producttype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndNewTermJoinConf::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndNewTermJoinConf::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndNewTermJoinConf::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNewTermJoinConf.producttype)
  return producttype_;
}
inline void IndNewTermJoinConf::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNewTermJoinConf.producttype)
}

// -------------------------------------------------------------------

// IndTermLeaveConf

// optional uint32 deviceid = 1;
inline bool IndTermLeaveConf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTermLeaveConf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTermLeaveConf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTermLeaveConf::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndTermLeaveConf::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.deviceid)
  return deviceid_;
}
inline void IndTermLeaveConf::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.deviceid)
}

// optional string token = 2;
inline bool IndTermLeaveConf::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTermLeaveConf::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTermLeaveConf::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTermLeaveConf::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndTermLeaveConf::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.token)
  return *token_;
}
inline void IndTermLeaveConf::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.token)
}
inline void IndTermLeaveConf::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTermLeaveConf.token)
}
inline void IndTermLeaveConf::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTermLeaveConf.token)
}
inline ::std::string* IndTermLeaveConf::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTermLeaveConf.token)
  return token_;
}
inline ::std::string* IndTermLeaveConf::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTermLeaveConf::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTermLeaveConf.token)
}

// optional uint64 confid = 3;
inline bool IndTermLeaveConf::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTermLeaveConf::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTermLeaveConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTermLeaveConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTermLeaveConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.confid)
  return confid_;
}
inline void IndTermLeaveConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.confid)
}

// optional uint32 suid = 4;
inline bool IndTermLeaveConf::has_suid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTermLeaveConf::set_has_suid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTermLeaveConf::clear_has_suid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTermLeaveConf::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndTermLeaveConf::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.suid)
  return suid_;
}
inline void IndTermLeaveConf::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.suid)
}

// optional string ip = 5;
inline bool IndTermLeaveConf::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTermLeaveConf::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTermLeaveConf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTermLeaveConf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IndTermLeaveConf::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.ip)
  return *ip_;
}
inline void IndTermLeaveConf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.ip)
}
inline void IndTermLeaveConf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTermLeaveConf.ip)
}
inline void IndTermLeaveConf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTermLeaveConf.ip)
}
inline ::std::string* IndTermLeaveConf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTermLeaveConf.ip)
  return ip_;
}
inline ::std::string* IndTermLeaveConf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTermLeaveConf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTermLeaveConf.ip)
}

// optional string alias = 6;
inline bool IndTermLeaveConf::has_alias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTermLeaveConf::set_has_alias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTermLeaveConf::clear_has_alias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTermLeaveConf::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& IndTermLeaveConf::alias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.alias)
  return *alias_;
}
inline void IndTermLeaveConf::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.alias)
}
inline void IndTermLeaveConf::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTermLeaveConf.alias)
}
inline void IndTermLeaveConf::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTermLeaveConf.alias)
}
inline ::std::string* IndTermLeaveConf::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTermLeaveConf.alias)
  return alias_;
}
inline ::std::string* IndTermLeaveConf::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTermLeaveConf::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTermLeaveConf.alias)
}

// optional uint32 netmpid = 7;
inline bool IndTermLeaveConf::has_netmpid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTermLeaveConf::set_has_netmpid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTermLeaveConf::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTermLeaveConf::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 IndTermLeaveConf::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.netmpid)
  return netmpid_;
}
inline void IndTermLeaveConf::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.netmpid)
}

// optional uint64 confreportid = 8;
inline bool IndTermLeaveConf::has_confreportid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTermLeaveConf::set_has_confreportid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTermLeaveConf::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTermLeaveConf::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndTermLeaveConf::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTermLeaveConf.confreportid)
  return confreportid_;
}
inline void IndTermLeaveConf::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTermLeaveConf.confreportid)
}

// -------------------------------------------------------------------

// IndMCCreateConf

// optional uint32 deviceid = 1;
inline bool IndMCCreateConf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCCreateConf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCCreateConf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCCreateConf::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndMCCreateConf::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.deviceid)
  return deviceid_;
}
inline void IndMCCreateConf::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.deviceid)
}

// optional string token = 2;
inline bool IndMCCreateConf::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCCreateConf::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCCreateConf::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCCreateConf::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndMCCreateConf::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.token)
  return *token_;
}
inline void IndMCCreateConf::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.token)
}
inline void IndMCCreateConf::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCCreateConf.token)
}
inline void IndMCCreateConf::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCCreateConf.token)
}
inline ::std::string* IndMCCreateConf::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCCreateConf.token)
  return token_;
}
inline ::std::string* IndMCCreateConf::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCCreateConf::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCCreateConf.token)
}

// optional bool isok = 3;
inline bool IndMCCreateConf::has_isok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMCCreateConf::set_has_isok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMCCreateConf::clear_has_isok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMCCreateConf::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool IndMCCreateConf::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.isok)
  return isok_;
}
inline void IndMCCreateConf::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.isok)
}

// optional uint64 confid = 4;
inline bool IndMCCreateConf::has_confid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndMCCreateConf::set_has_confid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndMCCreateConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndMCCreateConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndMCCreateConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.confid)
  return confid_;
}
inline void IndMCCreateConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.confid)
}

// optional string failreason = 5;
inline bool IndMCCreateConf::has_failreason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndMCCreateConf::set_has_failreason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndMCCreateConf::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndMCCreateConf::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& IndMCCreateConf::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.failreason)
  return *failreason_;
}
inline void IndMCCreateConf::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.failreason)
}
inline void IndMCCreateConf::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCCreateConf.failreason)
}
inline void IndMCCreateConf::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCCreateConf.failreason)
}
inline ::std::string* IndMCCreateConf::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCCreateConf.failreason)
  return failreason_;
}
inline ::std::string* IndMCCreateConf::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCCreateConf::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCCreateConf.failreason)
}

// optional uint64 confreportid = 6;
inline bool IndMCCreateConf::has_confreportid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndMCCreateConf::set_has_confreportid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndMCCreateConf::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndMCCreateConf::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndMCCreateConf::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCCreateConf.confreportid)
  return confreportid_;
}
inline void IndMCCreateConf::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCCreateConf.confreportid)
}

// -------------------------------------------------------------------

// IndsertodevHeart_LoadInfo

// optional uint32 ternum = 1;
inline bool IndsertodevHeart_LoadInfo::has_ternum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_ternum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_ternum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndsertodevHeart_LoadInfo::clear_ternum() {
  ternum_ = 0u;
  clear_has_ternum();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::ternum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.ternum)
  return ternum_;
}
inline void IndsertodevHeart_LoadInfo::set_ternum(::google::protobuf::uint32 value) {
  set_has_ternum();
  ternum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.ternum)
}

// optional uint32 cpu = 2;
inline bool IndsertodevHeart_LoadInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndsertodevHeart_LoadInfo::clear_cpu() {
  cpu_ = 0u;
  clear_has_cpu();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::cpu() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.cpu)
  return cpu_;
}
inline void IndsertodevHeart_LoadInfo::set_cpu(::google::protobuf::uint32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.cpu)
}

// optional uint32 srcnt = 3;
inline bool IndsertodevHeart_LoadInfo::has_srcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_srcnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_srcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndsertodevHeart_LoadInfo::clear_srcnt() {
  srcnt_ = 0u;
  clear_has_srcnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::srcnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.srcnt)
  return srcnt_;
}
inline void IndsertodevHeart_LoadInfo::set_srcnt(::google::protobuf::uint32 value) {
  set_has_srcnt();
  srcnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.srcnt)
}

// optional uint32 stdcnt = 4;
inline bool IndsertodevHeart_LoadInfo::has_stdcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_stdcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_stdcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndsertodevHeart_LoadInfo::clear_stdcnt() {
  stdcnt_ = 0u;
  clear_has_stdcnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::stdcnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.stdcnt)
  return stdcnt_;
}
inline void IndsertodevHeart_LoadInfo::set_stdcnt(::google::protobuf::uint32 value) {
  set_has_stdcnt();
  stdcnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.stdcnt)
}

// optional uint32 reccnt = 5;
inline bool IndsertodevHeart_LoadInfo::has_reccnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_reccnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_reccnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndsertodevHeart_LoadInfo::clear_reccnt() {
  reccnt_ = 0u;
  clear_has_reccnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::reccnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.reccnt)
  return reccnt_;
}
inline void IndsertodevHeart_LoadInfo::set_reccnt(::google::protobuf::uint32 value) {
  set_has_reccnt();
  reccnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.reccnt)
}

// optional uint32 confcnt = 6;
inline bool IndsertodevHeart_LoadInfo::has_confcnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_confcnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_confcnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndsertodevHeart_LoadInfo::clear_confcnt() {
  confcnt_ = 0u;
  clear_has_confcnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::confcnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.confcnt)
  return confcnt_;
}
inline void IndsertodevHeart_LoadInfo::set_confcnt(::google::protobuf::uint32 value) {
  set_has_confcnt();
  confcnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.confcnt)
}

// optional uint32 livecnt = 7;
inline bool IndsertodevHeart_LoadInfo::has_livecnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_livecnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_livecnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndsertodevHeart_LoadInfo::clear_livecnt() {
  livecnt_ = 0u;
  clear_has_livecnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::livecnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.livecnt)
  return livecnt_;
}
inline void IndsertodevHeart_LoadInfo::set_livecnt(::google::protobuf::uint32 value) {
  set_has_livecnt();
  livecnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.livecnt)
}

// optional uint32 analycnt = 8;
inline bool IndsertodevHeart_LoadInfo::has_analycnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndsertodevHeart_LoadInfo::set_has_analycnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndsertodevHeart_LoadInfo::clear_has_analycnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndsertodevHeart_LoadInfo::clear_analycnt() {
  analycnt_ = 0u;
  clear_has_analycnt();
}
inline ::google::protobuf::uint32 IndsertodevHeart_LoadInfo::analycnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.LoadInfo.analycnt)
  return analycnt_;
}
inline void IndsertodevHeart_LoadInfo::set_analycnt(::google::protobuf::uint32 value) {
  set_has_analycnt();
  analycnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.LoadInfo.analycnt)
}

// -------------------------------------------------------------------

// IndsertodevHeart

// optional uint32 deviceid = 1;
inline bool IndsertodevHeart::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndsertodevHeart::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndsertodevHeart::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndsertodevHeart::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndsertodevHeart::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.deviceid)
  return deviceid_;
}
inline void IndsertodevHeart::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.deviceid)
}

// optional string token = 2;
inline bool IndsertodevHeart::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndsertodevHeart::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndsertodevHeart::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndsertodevHeart::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndsertodevHeart::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.token)
  return *token_;
}
inline void IndsertodevHeart::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.token)
}
inline void IndsertodevHeart::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndsertodevHeart.token)
}
inline void IndsertodevHeart::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndsertodevHeart.token)
}
inline ::std::string* IndsertodevHeart::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndsertodevHeart.token)
  return token_;
}
inline ::std::string* IndsertodevHeart::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndsertodevHeart::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndsertodevHeart.token)
}

// optional uint32 load1 = 3;
inline bool IndsertodevHeart::has_load1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndsertodevHeart::set_has_load1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndsertodevHeart::clear_has_load1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndsertodevHeart::clear_load1() {
  load1_ = 0u;
  clear_has_load1();
}
inline ::google::protobuf::uint32 IndsertodevHeart::load1() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.load1)
  return load1_;
}
inline void IndsertodevHeart::set_load1(::google::protobuf::uint32 value) {
  set_has_load1();
  load1_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.load1)
}

// optional uint32 load2 = 4;
inline bool IndsertodevHeart::has_load2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndsertodevHeart::set_has_load2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndsertodevHeart::clear_has_load2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndsertodevHeart::clear_load2() {
  load2_ = 0u;
  clear_has_load2();
}
inline ::google::protobuf::uint32 IndsertodevHeart::load2() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.load2)
  return load2_;
}
inline void IndsertodevHeart::set_load2(::google::protobuf::uint32 value) {
  set_has_load2();
  load2_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.load2)
}

// optional uint32 svr_type = 5;
inline bool IndsertodevHeart::has_svr_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndsertodevHeart::set_has_svr_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndsertodevHeart::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndsertodevHeart::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 IndsertodevHeart::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.svr_type)
  return svr_type_;
}
inline void IndsertodevHeart::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndsertodevHeart.svr_type)
}

// optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
inline bool IndsertodevHeart::has_loadinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndsertodevHeart::set_has_loadinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndsertodevHeart::clear_has_loadinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndsertodevHeart::clear_loadinfo() {
  if (loadinfo_ != NULL) loadinfo_->::SRMsgs::IndsertodevHeart_LoadInfo::Clear();
  clear_has_loadinfo();
}
inline const ::SRMsgs::IndsertodevHeart_LoadInfo& IndsertodevHeart::loadinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndsertodevHeart.loadinfo)
  return loadinfo_ != NULL ? *loadinfo_ : *default_instance_->loadinfo_;
}
inline ::SRMsgs::IndsertodevHeart_LoadInfo* IndsertodevHeart::mutable_loadinfo() {
  set_has_loadinfo();
  if (loadinfo_ == NULL) loadinfo_ = new ::SRMsgs::IndsertodevHeart_LoadInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndsertodevHeart.loadinfo)
  return loadinfo_;
}
inline ::SRMsgs::IndsertodevHeart_LoadInfo* IndsertodevHeart::release_loadinfo() {
  clear_has_loadinfo();
  ::SRMsgs::IndsertodevHeart_LoadInfo* temp = loadinfo_;
  loadinfo_ = NULL;
  return temp;
}
inline void IndsertodevHeart::set_allocated_loadinfo(::SRMsgs::IndsertodevHeart_LoadInfo* loadinfo) {
  delete loadinfo_;
  loadinfo_ = loadinfo;
  if (loadinfo) {
    set_has_loadinfo();
  } else {
    clear_has_loadinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndsertodevHeart.loadinfo)
}

// -------------------------------------------------------------------

// IndMCEndConf

// optional uint32 deviceid = 1;
inline bool IndMCEndConf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCEndConf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCEndConf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCEndConf::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndMCEndConf::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCEndConf.deviceid)
  return deviceid_;
}
inline void IndMCEndConf::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCEndConf.deviceid)
}

// optional string token = 2;
inline bool IndMCEndConf::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCEndConf::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCEndConf::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCEndConf::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndMCEndConf::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCEndConf.token)
  return *token_;
}
inline void IndMCEndConf::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCEndConf.token)
}
inline void IndMCEndConf::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndMCEndConf.token)
}
inline void IndMCEndConf::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndMCEndConf.token)
}
inline ::std::string* IndMCEndConf::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndMCEndConf.token)
  return token_;
}
inline ::std::string* IndMCEndConf::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndMCEndConf::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndMCEndConf.token)
}

// optional uint64 confid = 3;
inline bool IndMCEndConf::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndMCEndConf::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndMCEndConf::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndMCEndConf::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndMCEndConf::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCEndConf.confid)
  return confid_;
}
inline void IndMCEndConf::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCEndConf.confid)
}

// optional uint64 confreportid = 4;
inline bool IndMCEndConf::has_confreportid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndMCEndConf::set_has_confreportid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndMCEndConf::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndMCEndConf::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndMCEndConf::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCEndConf.confreportid)
  return confreportid_;
}
inline void IndMCEndConf::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCEndConf.confreportid)
}

// optional uint32 permanentenable = 5;
inline bool IndMCEndConf::has_permanentenable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndMCEndConf::set_has_permanentenable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndMCEndConf::clear_has_permanentenable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndMCEndConf::clear_permanentenable() {
  permanentenable_ = 0u;
  clear_has_permanentenable();
}
inline ::google::protobuf::uint32 IndMCEndConf::permanentenable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCEndConf.permanentenable)
  return permanentenable_;
}
inline void IndMCEndConf::set_permanentenable(::google::protobuf::uint32 value) {
  set_has_permanentenable();
  permanentenable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCEndConf.permanentenable)
}

// -------------------------------------------------------------------

// IndNetMPConfInfoInMC

// optional uint32 deviceid = 1;
inline bool IndNetMPConfInfoInMC::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNetMPConfInfoInMC::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNetMPConfInfoInMC::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndNetMPConfInfoInMC::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.deviceid)
  return deviceid_;
}
inline void IndNetMPConfInfoInMC::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.deviceid)
}

// optional string token = 2;
inline bool IndNetMPConfInfoInMC::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNetMPConfInfoInMC::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNetMPConfInfoInMC::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndNetMPConfInfoInMC::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.token)
  return *token_;
}
inline void IndNetMPConfInfoInMC::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.token)
}
inline void IndNetMPConfInfoInMC::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNetMPConfInfoInMC.token)
}
inline void IndNetMPConfInfoInMC::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNetMPConfInfoInMC.token)
}
inline ::std::string* IndNetMPConfInfoInMC::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNetMPConfInfoInMC.token)
  return token_;
}
inline ::std::string* IndNetMPConfInfoInMC::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNetMPConfInfoInMC::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNetMPConfInfoInMC.token)
}

// optional uint64 confid = 3;
inline bool IndNetMPConfInfoInMC::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNetMPConfInfoInMC::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNetMPConfInfoInMC::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndNetMPConfInfoInMC::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.confid)
  return confid_;
}
inline void IndNetMPConfInfoInMC::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.confid)
}

// optional uint32 netmpid = 4;
inline bool IndNetMPConfInfoInMC::has_netmpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_netmpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNetMPConfInfoInMC::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNetMPConfInfoInMC::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 IndNetMPConfInfoInMC::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.netmpid)
  return netmpid_;
}
inline void IndNetMPConfInfoInMC::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.netmpid)
}

// optional uint32 addordel = 5;
inline bool IndNetMPConfInfoInMC::has_addordel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_addordel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndNetMPConfInfoInMC::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndNetMPConfInfoInMC::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndNetMPConfInfoInMC::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.addordel)
  return addordel_;
}
inline void IndNetMPConfInfoInMC::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.addordel)
}

// optional uint64 confreportid = 6;
inline bool IndNetMPConfInfoInMC::has_confreportid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndNetMPConfInfoInMC::set_has_confreportid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndNetMPConfInfoInMC::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndNetMPConfInfoInMC::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndNetMPConfInfoInMC::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConfInfoInMC.confreportid)
  return confreportid_;
}
inline void IndNetMPConfInfoInMC::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConfInfoInMC.confreportid)
}

// -------------------------------------------------------------------

// IndNetMPConnStatusInMC

// optional uint32 deviceid = 1;
inline bool IndNetMPConnStatusInMC::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndNetMPConnStatusInMC::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndNetMPConnStatusInMC::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndNetMPConnStatusInMC::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndNetMPConnStatusInMC::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConnStatusInMC.deviceid)
  return deviceid_;
}
inline void IndNetMPConnStatusInMC::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConnStatusInMC.deviceid)
}

// optional string token = 2;
inline bool IndNetMPConnStatusInMC::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndNetMPConnStatusInMC::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndNetMPConnStatusInMC::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndNetMPConnStatusInMC::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndNetMPConnStatusInMC::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConnStatusInMC.token)
  return *token_;
}
inline void IndNetMPConnStatusInMC::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConnStatusInMC.token)
}
inline void IndNetMPConnStatusInMC::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndNetMPConnStatusInMC.token)
}
inline void IndNetMPConnStatusInMC::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndNetMPConnStatusInMC.token)
}
inline ::std::string* IndNetMPConnStatusInMC::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndNetMPConnStatusInMC.token)
  return token_;
}
inline ::std::string* IndNetMPConnStatusInMC::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndNetMPConnStatusInMC::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndNetMPConnStatusInMC.token)
}

// optional uint32 netmpid = 3;
inline bool IndNetMPConnStatusInMC::has_netmpid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndNetMPConnStatusInMC::set_has_netmpid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndNetMPConnStatusInMC::clear_has_netmpid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndNetMPConnStatusInMC::clear_netmpid() {
  netmpid_ = 0u;
  clear_has_netmpid();
}
inline ::google::protobuf::uint32 IndNetMPConnStatusInMC::netmpid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConnStatusInMC.netmpid)
  return netmpid_;
}
inline void IndNetMPConnStatusInMC::set_netmpid(::google::protobuf::uint32 value) {
  set_has_netmpid();
  netmpid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConnStatusInMC.netmpid)
}

// optional uint32 connstatus = 4;
inline bool IndNetMPConnStatusInMC::has_connstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndNetMPConnStatusInMC::set_has_connstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndNetMPConnStatusInMC::clear_has_connstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndNetMPConnStatusInMC::clear_connstatus() {
  connstatus_ = 0u;
  clear_has_connstatus();
}
inline ::google::protobuf::uint32 IndNetMPConnStatusInMC::connstatus() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConnStatusInMC.connstatus)
  return connstatus_;
}
inline void IndNetMPConnStatusInMC::set_connstatus(::google::protobuf::uint32 value) {
  set_has_connstatus();
  connstatus_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConnStatusInMC.connstatus)
}

// optional uint32 groupid = 5;
inline bool IndNetMPConnStatusInMC::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndNetMPConnStatusInMC::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndNetMPConnStatusInMC::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndNetMPConnStatusInMC::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 IndNetMPConnStatusInMC::groupid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndNetMPConnStatusInMC.groupid)
  return groupid_;
}
inline void IndNetMPConnStatusInMC::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndNetMPConnStatusInMC.groupid)
}

// -------------------------------------------------------------------

// IndCRSStartRec

// optional uint32 deviceid = 1;
inline bool IndCRSStartRec::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStartRec::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStartRec::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStartRec::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndCRSStartRec::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.deviceid)
  return deviceid_;
}
inline void IndCRSStartRec::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.deviceid)
}

// optional string token = 2;
inline bool IndCRSStartRec::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStartRec::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStartRec::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStartRec::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndCRSStartRec::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.token)
  return *token_;
}
inline void IndCRSStartRec::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.token)
}
inline void IndCRSStartRec::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.token)
}
inline void IndCRSStartRec::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.token)
}
inline ::std::string* IndCRSStartRec::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.token)
  return token_;
}
inline ::std::string* IndCRSStartRec::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.token)
}

// optional uint64 confid = 3;
inline bool IndCRSStartRec::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSStartRec::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSStartRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSStartRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSStartRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.confid)
  return confid_;
}
inline void IndCRSStartRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.confid)
}

// optional uint32 crsid = 4;
inline bool IndCRSStartRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSStartRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSStartRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSStartRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSStartRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.crsid)
  return crsid_;
}
inline void IndCRSStartRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.crsid)
}

// optional string filestorsvrip = 5;
inline bool IndCRSStartRec::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSStartRec::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSStartRec::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSStartRec::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& IndCRSStartRec::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.filestorsvrip)
  return *filestorsvrip_;
}
inline void IndCRSStartRec::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.filestorsvrip)
}
inline void IndCRSStartRec::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.filestorsvrip)
}
inline void IndCRSStartRec::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.filestorsvrip)
}
inline ::std::string* IndCRSStartRec::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* IndCRSStartRec::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.filestorsvrip)
}

// optional string filestorpath = 6;
inline bool IndCRSStartRec::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSStartRec::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSStartRec::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSStartRec::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& IndCRSStartRec::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.filestorpath)
  return *filestorpath_;
}
inline void IndCRSStartRec::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.filestorpath)
}
inline void IndCRSStartRec::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.filestorpath)
}
inline void IndCRSStartRec::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.filestorpath)
}
inline ::std::string* IndCRSStartRec::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.filestorpath)
  return filestorpath_;
}
inline ::std::string* IndCRSStartRec::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.filestorpath)
}

// optional string sdefilepath = 7;
inline bool IndCRSStartRec::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSStartRec::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSStartRec::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSStartRec::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& IndCRSStartRec::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.sdefilepath)
  return *sdefilepath_;
}
inline void IndCRSStartRec::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.sdefilepath)
}
inline void IndCRSStartRec::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.sdefilepath)
}
inline void IndCRSStartRec::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.sdefilepath)
}
inline ::std::string* IndCRSStartRec::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* IndCRSStartRec::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.sdefilepath)
}

// optional string relativepath = 8;
inline bool IndCRSStartRec::has_relativepath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSStartRec::set_has_relativepath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSStartRec::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSStartRec::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& IndCRSStartRec::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.relativepath)
  return *relativepath_;
}
inline void IndCRSStartRec::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.relativepath)
}
inline void IndCRSStartRec::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.relativepath)
}
inline void IndCRSStartRec::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.relativepath)
}
inline ::std::string* IndCRSStartRec::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.relativepath)
  return relativepath_;
}
inline ::std::string* IndCRSStartRec::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.relativepath)
}

// optional string confname = 9;
inline bool IndCRSStartRec::has_confname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSStartRec::set_has_confname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSStartRec::clear_has_confname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSStartRec::clear_confname() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& IndCRSStartRec::confname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.confname)
  return *confname_;
}
inline void IndCRSStartRec::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.confname)
}
inline void IndCRSStartRec::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartRec.confname)
}
inline void IndCRSStartRec::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartRec.confname)
}
inline ::std::string* IndCRSStartRec::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartRec.confname)
  return confname_;
}
inline ::std::string* IndCRSStartRec::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartRec::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartRec.confname)
}

// optional uint64 confreportid = 10;
inline bool IndCRSStartRec::has_confreportid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSStartRec::set_has_confreportid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSStartRec::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSStartRec::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndCRSStartRec::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartRec.confreportid)
  return confreportid_;
}
inline void IndCRSStartRec::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartRec.confreportid)
}

// -------------------------------------------------------------------

// IndCRSStopRec

// optional uint32 deviceid = 1;
inline bool IndCRSStopRec::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStopRec::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStopRec::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStopRec::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndCRSStopRec::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.deviceid)
  return deviceid_;
}
inline void IndCRSStopRec::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.deviceid)
}

// optional string token = 2;
inline bool IndCRSStopRec::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStopRec::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStopRec::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStopRec::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndCRSStopRec::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.token)
  return *token_;
}
inline void IndCRSStopRec::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.token)
}
inline void IndCRSStopRec::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.token)
}
inline void IndCRSStopRec::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.token)
}
inline ::std::string* IndCRSStopRec::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.token)
  return token_;
}
inline ::std::string* IndCRSStopRec::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.token)
}

// optional uint64 confid = 3;
inline bool IndCRSStopRec::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSStopRec::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSStopRec::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSStopRec::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSStopRec::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.confid)
  return confid_;
}
inline void IndCRSStopRec::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.confid)
}

// optional uint32 crsid = 4;
inline bool IndCRSStopRec::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSStopRec::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSStopRec::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSStopRec::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSStopRec::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.crsid)
  return crsid_;
}
inline void IndCRSStopRec::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.crsid)
}

// optional string filestorsvrip = 5;
inline bool IndCRSStopRec::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSStopRec::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSStopRec::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSStopRec::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& IndCRSStopRec::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.filestorsvrip)
  return *filestorsvrip_;
}
inline void IndCRSStopRec::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.filestorsvrip)
}
inline void IndCRSStopRec::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.filestorsvrip)
}
inline void IndCRSStopRec::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.filestorsvrip)
}
inline ::std::string* IndCRSStopRec::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* IndCRSStopRec::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.filestorsvrip)
}

// optional string filestorpath = 6;
inline bool IndCRSStopRec::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSStopRec::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSStopRec::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSStopRec::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& IndCRSStopRec::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.filestorpath)
  return *filestorpath_;
}
inline void IndCRSStopRec::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.filestorpath)
}
inline void IndCRSStopRec::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.filestorpath)
}
inline void IndCRSStopRec::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.filestorpath)
}
inline ::std::string* IndCRSStopRec::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.filestorpath)
  return filestorpath_;
}
inline ::std::string* IndCRSStopRec::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.filestorpath)
}

// optional string sdefilepath = 7;
inline bool IndCRSStopRec::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSStopRec::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSStopRec::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSStopRec::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& IndCRSStopRec::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.sdefilepath)
  return *sdefilepath_;
}
inline void IndCRSStopRec::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.sdefilepath)
}
inline void IndCRSStopRec::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.sdefilepath)
}
inline void IndCRSStopRec::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.sdefilepath)
}
inline ::std::string* IndCRSStopRec::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* IndCRSStopRec::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.sdefilepath)
}

// optional string relativepath = 8;
inline bool IndCRSStopRec::has_relativepath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSStopRec::set_has_relativepath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSStopRec::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSStopRec::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& IndCRSStopRec::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.relativepath)
  return *relativepath_;
}
inline void IndCRSStopRec::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.relativepath)
}
inline void IndCRSStopRec::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.relativepath)
}
inline void IndCRSStopRec::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.relativepath)
}
inline ::std::string* IndCRSStopRec::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.relativepath)
  return relativepath_;
}
inline ::std::string* IndCRSStopRec::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.relativepath)
}

// optional uint32 stopreason = 9;
inline bool IndCRSStopRec::has_stopreason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSStopRec::set_has_stopreason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSStopRec::clear_has_stopreason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSStopRec::clear_stopreason() {
  stopreason_ = 0u;
  clear_has_stopreason();
}
inline ::google::protobuf::uint32 IndCRSStopRec::stopreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.stopreason)
  return stopreason_;
}
inline void IndCRSStopRec::set_stopreason(::google::protobuf::uint32 value) {
  set_has_stopreason();
  stopreason_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.stopreason)
}

// optional string confname = 10;
inline bool IndCRSStopRec::has_confname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSStopRec::set_has_confname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSStopRec::clear_has_confname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSStopRec::clear_confname() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& IndCRSStopRec::confname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.confname)
  return *confname_;
}
inline void IndCRSStopRec::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.confname)
}
inline void IndCRSStopRec::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopRec.confname)
}
inline void IndCRSStopRec::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopRec.confname)
}
inline ::std::string* IndCRSStopRec::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopRec.confname)
  return confname_;
}
inline ::std::string* IndCRSStopRec::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopRec::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopRec.confname)
}

// optional uint64 confreportid = 11;
inline bool IndCRSStopRec::has_confreportid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndCRSStopRec::set_has_confreportid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndCRSStopRec::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndCRSStopRec::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndCRSStopRec::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.confreportid)
  return confreportid_;
}
inline void IndCRSStopRec::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.confreportid)
}

// optional uint64 filesize = 12;
inline bool IndCRSStopRec::has_filesize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndCRSStopRec::set_has_filesize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndCRSStopRec::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndCRSStopRec::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 IndCRSStopRec::filesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopRec.filesize)
  return filesize_;
}
inline void IndCRSStopRec::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopRec.filesize)
}

// -------------------------------------------------------------------

// IndCRSFileStoragePath

// optional uint32 deviceid = 1;
inline bool IndCRSFileStoragePath::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSFileStoragePath::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSFileStoragePath::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSFileStoragePath::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndCRSFileStoragePath::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.deviceid)
  return deviceid_;
}
inline void IndCRSFileStoragePath::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.deviceid)
}

// optional string token = 2;
inline bool IndCRSFileStoragePath::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSFileStoragePath::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSFileStoragePath::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSFileStoragePath::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndCRSFileStoragePath::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.token)
  return *token_;
}
inline void IndCRSFileStoragePath::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.token)
}
inline void IndCRSFileStoragePath::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStoragePath.token)
}
inline void IndCRSFileStoragePath::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStoragePath.token)
}
inline ::std::string* IndCRSFileStoragePath::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStoragePath.token)
  return token_;
}
inline ::std::string* IndCRSFileStoragePath::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStoragePath::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStoragePath.token)
}

// optional uint64 confid = 3;
inline bool IndCRSFileStoragePath::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSFileStoragePath::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSFileStoragePath::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSFileStoragePath::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSFileStoragePath::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.confid)
  return confid_;
}
inline void IndCRSFileStoragePath::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.confid)
}

// optional uint32 crsid = 4;
inline bool IndCRSFileStoragePath::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSFileStoragePath::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSFileStoragePath::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSFileStoragePath::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSFileStoragePath::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.crsid)
  return crsid_;
}
inline void IndCRSFileStoragePath::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.crsid)
}

// optional string filestorsvrip = 5;
inline bool IndCRSFileStoragePath::has_filestorsvrip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSFileStoragePath::set_has_filestorsvrip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSFileStoragePath::clear_has_filestorsvrip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSFileStoragePath::clear_filestorsvrip() {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_->clear();
  }
  clear_has_filestorsvrip();
}
inline const ::std::string& IndCRSFileStoragePath::filestorsvrip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
  return *filestorsvrip_;
}
inline void IndCRSFileStoragePath::set_filestorsvrip(const ::std::string& value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
}
inline void IndCRSFileStoragePath::set_filestorsvrip(const char* value) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
}
inline void IndCRSFileStoragePath::set_filestorsvrip(const char* value, size_t size) {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  filestorsvrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
}
inline ::std::string* IndCRSFileStoragePath::mutable_filestorsvrip() {
  set_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorsvrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
  return filestorsvrip_;
}
inline ::std::string* IndCRSFileStoragePath::release_filestorsvrip() {
  clear_has_filestorsvrip();
  if (filestorsvrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorsvrip_;
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStoragePath::set_allocated_filestorsvrip(::std::string* filestorsvrip) {
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorsvrip) {
    set_has_filestorsvrip();
    filestorsvrip_ = filestorsvrip;
  } else {
    clear_has_filestorsvrip();
    filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStoragePath.filestorsvrip)
}

// optional string filestorpath = 6;
inline bool IndCRSFileStoragePath::has_filestorpath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSFileStoragePath::set_has_filestorpath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSFileStoragePath::clear_has_filestorpath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSFileStoragePath::clear_filestorpath() {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_->clear();
  }
  clear_has_filestorpath();
}
inline const ::std::string& IndCRSFileStoragePath::filestorpath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.filestorpath)
  return *filestorpath_;
}
inline void IndCRSFileStoragePath::set_filestorpath(const ::std::string& value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.filestorpath)
}
inline void IndCRSFileStoragePath::set_filestorpath(const char* value) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStoragePath.filestorpath)
}
inline void IndCRSFileStoragePath::set_filestorpath(const char* value, size_t size) {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  filestorpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStoragePath.filestorpath)
}
inline ::std::string* IndCRSFileStoragePath::mutable_filestorpath() {
  set_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filestorpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStoragePath.filestorpath)
  return filestorpath_;
}
inline ::std::string* IndCRSFileStoragePath::release_filestorpath() {
  clear_has_filestorpath();
  if (filestorpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filestorpath_;
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStoragePath::set_allocated_filestorpath(::std::string* filestorpath) {
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (filestorpath) {
    set_has_filestorpath();
    filestorpath_ = filestorpath;
  } else {
    clear_has_filestorpath();
    filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStoragePath.filestorpath)
}

// optional string sdefilepath = 7;
inline bool IndCRSFileStoragePath::has_sdefilepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSFileStoragePath::set_has_sdefilepath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSFileStoragePath::clear_has_sdefilepath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSFileStoragePath::clear_sdefilepath() {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_->clear();
  }
  clear_has_sdefilepath();
}
inline const ::std::string& IndCRSFileStoragePath::sdefilepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.sdefilepath)
  return *sdefilepath_;
}
inline void IndCRSFileStoragePath::set_sdefilepath(const ::std::string& value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.sdefilepath)
}
inline void IndCRSFileStoragePath::set_sdefilepath(const char* value) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStoragePath.sdefilepath)
}
inline void IndCRSFileStoragePath::set_sdefilepath(const char* value, size_t size) {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  sdefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStoragePath.sdefilepath)
}
inline ::std::string* IndCRSFileStoragePath::mutable_sdefilepath() {
  set_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStoragePath.sdefilepath)
  return sdefilepath_;
}
inline ::std::string* IndCRSFileStoragePath::release_sdefilepath() {
  clear_has_sdefilepath();
  if (sdefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdefilepath_;
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStoragePath::set_allocated_sdefilepath(::std::string* sdefilepath) {
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (sdefilepath) {
    set_has_sdefilepath();
    sdefilepath_ = sdefilepath;
  } else {
    clear_has_sdefilepath();
    sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStoragePath.sdefilepath)
}

// optional string relativepath = 8;
inline bool IndCRSFileStoragePath::has_relativepath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSFileStoragePath::set_has_relativepath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSFileStoragePath::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSFileStoragePath::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& IndCRSFileStoragePath::relativepath() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.relativepath)
  return *relativepath_;
}
inline void IndCRSFileStoragePath::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.relativepath)
}
inline void IndCRSFileStoragePath::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSFileStoragePath.relativepath)
}
inline void IndCRSFileStoragePath::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSFileStoragePath.relativepath)
}
inline ::std::string* IndCRSFileStoragePath::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relativepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSFileStoragePath.relativepath)
  return relativepath_;
}
inline ::std::string* IndCRSFileStoragePath::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSFileStoragePath::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSFileStoragePath.relativepath)
}

// optional uint32 recordstate = 9;
inline bool IndCRSFileStoragePath::has_recordstate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSFileStoragePath::set_has_recordstate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSFileStoragePath::clear_has_recordstate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSFileStoragePath::clear_recordstate() {
  recordstate_ = 0u;
  clear_has_recordstate();
}
inline ::google::protobuf::uint32 IndCRSFileStoragePath::recordstate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.recordstate)
  return recordstate_;
}
inline void IndCRSFileStoragePath::set_recordstate(::google::protobuf::uint32 value) {
  set_has_recordstate();
  recordstate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.recordstate)
}

// optional uint64 confreportid = 10;
inline bool IndCRSFileStoragePath::has_confreportid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSFileStoragePath::set_has_confreportid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSFileStoragePath::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSFileStoragePath::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndCRSFileStoragePath::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.confreportid)
  return confreportid_;
}
inline void IndCRSFileStoragePath::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.confreportid)
}

// optional uint64 filesize = 11;
inline bool IndCRSFileStoragePath::has_filesize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IndCRSFileStoragePath::set_has_filesize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IndCRSFileStoragePath::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IndCRSFileStoragePath::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 IndCRSFileStoragePath::filesize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSFileStoragePath.filesize)
  return filesize_;
}
inline void IndCRSFileStoragePath::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSFileStoragePath.filesize)
}

// -------------------------------------------------------------------

// IndVASAnalyVideoState

// optional uint32 deviceid = 1;
inline bool IndVASAnalyVideoState::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASAnalyVideoState::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASAnalyVideoState::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASAnalyVideoState::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndVASAnalyVideoState::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoState.deviceid)
  return deviceid_;
}
inline void IndVASAnalyVideoState::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoState.deviceid)
}

// optional string token = 2;
inline bool IndVASAnalyVideoState::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASAnalyVideoState::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASAnalyVideoState::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASAnalyVideoState::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndVASAnalyVideoState::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoState.token)
  return *token_;
}
inline void IndVASAnalyVideoState::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoState.token)
}
inline void IndVASAnalyVideoState::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVASAnalyVideoState.token)
}
inline void IndVASAnalyVideoState::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVASAnalyVideoState.token)
}
inline ::std::string* IndVASAnalyVideoState::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASAnalyVideoState.token)
  return token_;
}
inline ::std::string* IndVASAnalyVideoState::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVASAnalyVideoState::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVASAnalyVideoState.token)
}

// optional uint64 confid = 3;
inline bool IndVASAnalyVideoState::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVASAnalyVideoState::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVASAnalyVideoState::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVASAnalyVideoState::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndVASAnalyVideoState::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoState.confid)
  return confid_;
}
inline void IndVASAnalyVideoState::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoState.confid)
}

// optional uint64 confreportid = 4;
inline bool IndVASAnalyVideoState::has_confreportid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndVASAnalyVideoState::set_has_confreportid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndVASAnalyVideoState::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndVASAnalyVideoState::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndVASAnalyVideoState::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoState.confreportid)
  return confreportid_;
}
inline void IndVASAnalyVideoState::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoState.confreportid)
}

// optional uint32 analystate = 5;
inline bool IndVASAnalyVideoState::has_analystate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndVASAnalyVideoState::set_has_analystate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndVASAnalyVideoState::clear_has_analystate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndVASAnalyVideoState::clear_analystate() {
  analystate_ = 0u;
  clear_has_analystate();
}
inline ::google::protobuf::uint32 IndVASAnalyVideoState::analystate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoState.analystate)
  return analystate_;
}
inline void IndVASAnalyVideoState::set_analystate(::google::protobuf::uint32 value) {
  set_has_analystate();
  analystate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoState.analystate)
}

// -------------------------------------------------------------------

// IndCRSStartLive_LiveAddr

// optional uint32 type = 1;
inline bool IndCRSStartLive_LiveAddr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStartLive_LiveAddr::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStartLive_LiveAddr::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStartLive_LiveAddr::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IndCRSStartLive_LiveAddr::type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveAddr.type)
  return type_;
}
inline void IndCRSStartLive_LiveAddr::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveAddr.type)
}

// optional string url = 2;
inline bool IndCRSStartLive_LiveAddr::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStartLive_LiveAddr::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStartLive_LiveAddr::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStartLive_LiveAddr::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& IndCRSStartLive_LiveAddr::url() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveAddr.url)
  return *url_;
}
inline void IndCRSStartLive_LiveAddr::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveAddr.url)
}
inline void IndCRSStartLive_LiveAddr::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.LiveAddr.url)
}
inline void IndCRSStartLive_LiveAddr::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.LiveAddr.url)
}
inline ::std::string* IndCRSStartLive_LiveAddr::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.LiveAddr.url)
  return url_;
}
inline ::std::string* IndCRSStartLive_LiveAddr::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive_LiveAddr::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.LiveAddr.url)
}

// -------------------------------------------------------------------

// IndCRSStartLive_LiveSetting

// optional string chairman = 1;
inline bool IndCRSStartLive_LiveSetting::has_chairman() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_chairman() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_chairman() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStartLive_LiveSetting::clear_chairman() {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_->clear();
  }
  clear_has_chairman();
}
inline const ::std::string& IndCRSStartLive_LiveSetting::chairman() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
  return *chairman_;
}
inline void IndCRSStartLive_LiveSetting::set_chairman(const ::std::string& value) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
}
inline void IndCRSStartLive_LiveSetting::set_chairman(const char* value) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
}
inline void IndCRSStartLive_LiveSetting::set_chairman(const char* value, size_t size) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
}
inline ::std::string* IndCRSStartLive_LiveSetting::mutable_chairman() {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
  return chairman_;
}
inline ::std::string* IndCRSStartLive_LiveSetting::release_chairman() {
  clear_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chairman_;
    chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive_LiveSetting::set_allocated_chairman(::std::string* chairman) {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairman_;
  }
  if (chairman) {
    set_has_chairman();
    chairman_ = chairman;
  } else {
    clear_has_chairman();
    chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.LiveSetting.chairman)
}

// optional string subject = 2;
inline bool IndCRSStartLive_LiveSetting::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStartLive_LiveSetting::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& IndCRSStartLive_LiveSetting::subject() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.subject)
  return *subject_;
}
inline void IndCRSStartLive_LiveSetting::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.subject)
}
inline void IndCRSStartLive_LiveSetting::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.LiveSetting.subject)
}
inline void IndCRSStartLive_LiveSetting::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.LiveSetting.subject)
}
inline ::std::string* IndCRSStartLive_LiveSetting::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.LiveSetting.subject)
  return subject_;
}
inline ::std::string* IndCRSStartLive_LiveSetting::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive_LiveSetting::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.LiveSetting.subject)
}

// optional string abstract = 3;
inline bool IndCRSStartLive_LiveSetting::has_abstract() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_abstract() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_abstract() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSStartLive_LiveSetting::clear_abstract() {
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_->clear();
  }
  clear_has_abstract();
}
inline const ::std::string& IndCRSStartLive_LiveSetting::abstract() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
  return *abstract_;
}
inline void IndCRSStartLive_LiveSetting::set_abstract(const ::std::string& value) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
}
inline void IndCRSStartLive_LiveSetting::set_abstract(const char* value) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
}
inline void IndCRSStartLive_LiveSetting::set_abstract(const char* value, size_t size) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
}
inline ::std::string* IndCRSStartLive_LiveSetting::mutable_abstract() {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
  return abstract_;
}
inline ::std::string* IndCRSStartLive_LiveSetting::release_abstract() {
  clear_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abstract_;
    abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive_LiveSetting::set_allocated_abstract(::std::string* abstract) {
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abstract_;
  }
  if (abstract) {
    set_has_abstract();
    abstract_ = abstract;
  } else {
    clear_has_abstract();
    abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.LiveSetting.abstract)
}

// optional uint32 ispublic = 4;
inline bool IndCRSStartLive_LiveSetting::has_ispublic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_ispublic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSStartLive_LiveSetting::clear_ispublic() {
  ispublic_ = 0u;
  clear_has_ispublic();
}
inline ::google::protobuf::uint32 IndCRSStartLive_LiveSetting::ispublic() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.ispublic)
  return ispublic_;
}
inline void IndCRSStartLive_LiveSetting::set_ispublic(::google::protobuf::uint32 value) {
  set_has_ispublic();
  ispublic_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.ispublic)
}

// optional string livepwd = 5;
inline bool IndCRSStartLive_LiveSetting::has_livepwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_livepwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_livepwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSStartLive_LiveSetting::clear_livepwd() {
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_->clear();
  }
  clear_has_livepwd();
}
inline const ::std::string& IndCRSStartLive_LiveSetting::livepwd() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
  return *livepwd_;
}
inline void IndCRSStartLive_LiveSetting::set_livepwd(const ::std::string& value) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
}
inline void IndCRSStartLive_LiveSetting::set_livepwd(const char* value) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
}
inline void IndCRSStartLive_LiveSetting::set_livepwd(const char* value, size_t size) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
}
inline ::std::string* IndCRSStartLive_LiveSetting::mutable_livepwd() {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
  return livepwd_;
}
inline ::std::string* IndCRSStartLive_LiveSetting::release_livepwd() {
  clear_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livepwd_;
    livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive_LiveSetting::set_allocated_livepwd(::std::string* livepwd) {
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepwd_;
  }
  if (livepwd) {
    set_has_livepwd();
    livepwd_ = livepwd;
  } else {
    clear_has_livepwd();
    livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.LiveSetting.livepwd)
}

// optional uint32 isuserec = 6;
inline bool IndCRSStartLive_LiveSetting::has_isuserec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSStartLive_LiveSetting::set_has_isuserec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSStartLive_LiveSetting::clear_has_isuserec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSStartLive_LiveSetting::clear_isuserec() {
  isuserec_ = 0u;
  clear_has_isuserec();
}
inline ::google::protobuf::uint32 IndCRSStartLive_LiveSetting::isuserec() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.LiveSetting.isuserec)
  return isuserec_;
}
inline void IndCRSStartLive_LiveSetting::set_isuserec(::google::protobuf::uint32 value) {
  set_has_isuserec();
  isuserec_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.LiveSetting.isuserec)
}

// -------------------------------------------------------------------

// IndCRSStartLive

// optional uint32 deviceid = 1;
inline bool IndCRSStartLive::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStartLive::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStartLive::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStartLive::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndCRSStartLive::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.deviceid)
  return deviceid_;
}
inline void IndCRSStartLive::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.deviceid)
}

// optional string token = 2;
inline bool IndCRSStartLive::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStartLive::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStartLive::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStartLive::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndCRSStartLive::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.token)
  return *token_;
}
inline void IndCRSStartLive::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.token)
}
inline void IndCRSStartLive::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.token)
}
inline void IndCRSStartLive::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.token)
}
inline ::std::string* IndCRSStartLive::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.token)
  return token_;
}
inline ::std::string* IndCRSStartLive::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.token)
}

// optional uint64 confid = 3;
inline bool IndCRSStartLive::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSStartLive::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSStartLive::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSStartLive::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSStartLive::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.confid)
  return confid_;
}
inline void IndCRSStartLive::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.confid)
}

// optional uint32 crsid = 4;
inline bool IndCRSStartLive::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSStartLive::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSStartLive::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSStartLive::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSStartLive::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.crsid)
  return crsid_;
}
inline void IndCRSStartLive::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.crsid)
}

// optional string livepushurl = 5;
inline bool IndCRSStartLive::has_livepushurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSStartLive::set_has_livepushurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSStartLive::clear_has_livepushurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSStartLive::clear_livepushurl() {
  if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepushurl_->clear();
  }
  clear_has_livepushurl();
}
inline const ::std::string& IndCRSStartLive::livepushurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.livepushurl)
  return *livepushurl_;
}
inline void IndCRSStartLive::set_livepushurl(const ::std::string& value) {
  set_has_livepushurl();
  if (livepushurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepushurl_ = new ::std::string;
  }
  livepushurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.livepushurl)
}
inline void IndCRSStartLive::set_livepushurl(const char* value) {
  set_has_livepushurl();
  if (livepushurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepushurl_ = new ::std::string;
  }
  livepushurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.livepushurl)
}
inline void IndCRSStartLive::set_livepushurl(const char* value, size_t size) {
  set_has_livepushurl();
  if (livepushurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepushurl_ = new ::std::string;
  }
  livepushurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.livepushurl)
}
inline ::std::string* IndCRSStartLive::mutable_livepushurl() {
  set_has_livepushurl();
  if (livepushurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepushurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.livepushurl)
  return livepushurl_;
}
inline ::std::string* IndCRSStartLive::release_livepushurl() {
  clear_has_livepushurl();
  if (livepushurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livepushurl_;
    livepushurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive::set_allocated_livepushurl(::std::string* livepushurl) {
  if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepushurl_;
  }
  if (livepushurl) {
    set_has_livepushurl();
    livepushurl_ = livepushurl;
  } else {
    clear_has_livepushurl();
    livepushurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.livepushurl)
}

// optional string livepullurl = 6;
inline bool IndCRSStartLive::has_livepullurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSStartLive::set_has_livepullurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSStartLive::clear_has_livepullurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSStartLive::clear_livepullurl() {
  if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepullurl_->clear();
  }
  clear_has_livepullurl();
}
inline const ::std::string& IndCRSStartLive::livepullurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.livepullurl)
  return *livepullurl_;
}
inline void IndCRSStartLive::set_livepullurl(const ::std::string& value) {
  set_has_livepullurl();
  if (livepullurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepullurl_ = new ::std::string;
  }
  livepullurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.livepullurl)
}
inline void IndCRSStartLive::set_livepullurl(const char* value) {
  set_has_livepullurl();
  if (livepullurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepullurl_ = new ::std::string;
  }
  livepullurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.livepullurl)
}
inline void IndCRSStartLive::set_livepullurl(const char* value, size_t size) {
  set_has_livepullurl();
  if (livepullurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepullurl_ = new ::std::string;
  }
  livepullurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.livepullurl)
}
inline ::std::string* IndCRSStartLive::mutable_livepullurl() {
  set_has_livepullurl();
  if (livepullurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepullurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.livepullurl)
  return livepullurl_;
}
inline ::std::string* IndCRSStartLive::release_livepullurl() {
  clear_has_livepullurl();
  if (livepullurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livepullurl_;
    livepullurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive::set_allocated_livepullurl(::std::string* livepullurl) {
  if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepullurl_;
  }
  if (livepullurl) {
    set_has_livepullurl();
    livepullurl_ = livepullurl;
  } else {
    clear_has_livepullurl();
    livepullurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.livepullurl)
}

// optional string liveplayurl = 7;
inline bool IndCRSStartLive::has_liveplayurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndCRSStartLive::set_has_liveplayurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndCRSStartLive::clear_has_liveplayurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndCRSStartLive::clear_liveplayurl() {
  if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveplayurl_->clear();
  }
  clear_has_liveplayurl();
}
inline const ::std::string& IndCRSStartLive::liveplayurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.liveplayurl)
  return *liveplayurl_;
}
inline void IndCRSStartLive::set_liveplayurl(const ::std::string& value) {
  set_has_liveplayurl();
  if (liveplayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveplayurl_ = new ::std::string;
  }
  liveplayurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.liveplayurl)
}
inline void IndCRSStartLive::set_liveplayurl(const char* value) {
  set_has_liveplayurl();
  if (liveplayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveplayurl_ = new ::std::string;
  }
  liveplayurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStartLive.liveplayurl)
}
inline void IndCRSStartLive::set_liveplayurl(const char* value, size_t size) {
  set_has_liveplayurl();
  if (liveplayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveplayurl_ = new ::std::string;
  }
  liveplayurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStartLive.liveplayurl)
}
inline ::std::string* IndCRSStartLive::mutable_liveplayurl() {
  set_has_liveplayurl();
  if (liveplayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveplayurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.liveplayurl)
  return liveplayurl_;
}
inline ::std::string* IndCRSStartLive::release_liveplayurl() {
  clear_has_liveplayurl();
  if (liveplayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liveplayurl_;
    liveplayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStartLive::set_allocated_liveplayurl(::std::string* liveplayurl) {
  if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveplayurl_;
  }
  if (liveplayurl) {
    set_has_liveplayurl();
    liveplayurl_ = liveplayurl;
  } else {
    clear_has_liveplayurl();
    liveplayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.liveplayurl)
}

// optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
inline bool IndCRSStartLive::has_livesetinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndCRSStartLive::set_has_livesetinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndCRSStartLive::clear_has_livesetinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndCRSStartLive::clear_livesetinfo() {
  if (livesetinfo_ != NULL) livesetinfo_->::SRMsgs::IndCRSStartLive_LiveSetting::Clear();
  clear_has_livesetinfo();
}
inline const ::SRMsgs::IndCRSStartLive_LiveSetting& IndCRSStartLive::livesetinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.livesetinfo)
  return livesetinfo_ != NULL ? *livesetinfo_ : *default_instance_->livesetinfo_;
}
inline ::SRMsgs::IndCRSStartLive_LiveSetting* IndCRSStartLive::mutable_livesetinfo() {
  set_has_livesetinfo();
  if (livesetinfo_ == NULL) livesetinfo_ = new ::SRMsgs::IndCRSStartLive_LiveSetting;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.livesetinfo)
  return livesetinfo_;
}
inline ::SRMsgs::IndCRSStartLive_LiveSetting* IndCRSStartLive::release_livesetinfo() {
  clear_has_livesetinfo();
  ::SRMsgs::IndCRSStartLive_LiveSetting* temp = livesetinfo_;
  livesetinfo_ = NULL;
  return temp;
}
inline void IndCRSStartLive::set_allocated_livesetinfo(::SRMsgs::IndCRSStartLive_LiveSetting* livesetinfo) {
  delete livesetinfo_;
  livesetinfo_ = livesetinfo;
  if (livesetinfo) {
    set_has_livesetinfo();
  } else {
    clear_has_livesetinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStartLive.livesetinfo)
}

// optional uint64 confreportid = 9;
inline bool IndCRSStartLive::has_confreportid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndCRSStartLive::set_has_confreportid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndCRSStartLive::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndCRSStartLive::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndCRSStartLive::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.confreportid)
  return confreportid_;
}
inline void IndCRSStartLive::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.confreportid)
}

// optional uint32 livesvrtype = 10;
inline bool IndCRSStartLive::has_livesvrtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndCRSStartLive::set_has_livesvrtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndCRSStartLive::clear_has_livesvrtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndCRSStartLive::clear_livesvrtype() {
  livesvrtype_ = 0u;
  clear_has_livesvrtype();
}
inline ::google::protobuf::uint32 IndCRSStartLive::livesvrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.livesvrtype)
  return livesvrtype_;
}
inline void IndCRSStartLive::set_livesvrtype(::google::protobuf::uint32 value) {
  set_has_livesvrtype();
  livesvrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStartLive.livesvrtype)
}

// repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
inline int IndCRSStartLive::liveaddrs_size() const {
  return liveaddrs_.size();
}
inline void IndCRSStartLive::clear_liveaddrs() {
  liveaddrs_.Clear();
}
inline const ::SRMsgs::IndCRSStartLive_LiveAddr& IndCRSStartLive::liveaddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStartLive.liveaddrs)
  return liveaddrs_.Get(index);
}
inline ::SRMsgs::IndCRSStartLive_LiveAddr* IndCRSStartLive::mutable_liveaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStartLive.liveaddrs)
  return liveaddrs_.Mutable(index);
}
inline ::SRMsgs::IndCRSStartLive_LiveAddr* IndCRSStartLive::add_liveaddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndCRSStartLive.liveaddrs)
  return liveaddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSStartLive_LiveAddr >&
IndCRSStartLive::liveaddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndCRSStartLive.liveaddrs)
  return liveaddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndCRSStartLive_LiveAddr >*
IndCRSStartLive::mutable_liveaddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndCRSStartLive.liveaddrs)
  return &liveaddrs_;
}

// -------------------------------------------------------------------

// IndCRSStopLive

// optional uint32 deviceid = 1;
inline bool IndCRSStopLive::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndCRSStopLive::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndCRSStopLive::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndCRSStopLive::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndCRSStopLive::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.deviceid)
  return deviceid_;
}
inline void IndCRSStopLive::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.deviceid)
}

// optional string token = 2;
inline bool IndCRSStopLive::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndCRSStopLive::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndCRSStopLive::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndCRSStopLive::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndCRSStopLive::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.token)
  return *token_;
}
inline void IndCRSStopLive::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.token)
}
inline void IndCRSStopLive::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopLive.token)
}
inline void IndCRSStopLive::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopLive.token)
}
inline ::std::string* IndCRSStopLive::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopLive.token)
  return token_;
}
inline ::std::string* IndCRSStopLive::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopLive::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopLive.token)
}

// optional uint64 confid = 3;
inline bool IndCRSStopLive::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndCRSStopLive::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndCRSStopLive::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndCRSStopLive::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndCRSStopLive::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.confid)
  return confid_;
}
inline void IndCRSStopLive::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.confid)
}

// optional uint32 crsid = 4;
inline bool IndCRSStopLive::has_crsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndCRSStopLive::set_has_crsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndCRSStopLive::clear_has_crsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndCRSStopLive::clear_crsid() {
  crsid_ = 0u;
  clear_has_crsid();
}
inline ::google::protobuf::uint32 IndCRSStopLive::crsid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.crsid)
  return crsid_;
}
inline void IndCRSStopLive::set_crsid(::google::protobuf::uint32 value) {
  set_has_crsid();
  crsid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.crsid)
}

// optional string liveurl = 5;
inline bool IndCRSStopLive::has_liveurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndCRSStopLive::set_has_liveurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndCRSStopLive::clear_has_liveurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndCRSStopLive::clear_liveurl() {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_->clear();
  }
  clear_has_liveurl();
}
inline const ::std::string& IndCRSStopLive::liveurl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.liveurl)
  return *liveurl_;
}
inline void IndCRSStopLive::set_liveurl(const ::std::string& value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.liveurl)
}
inline void IndCRSStopLive::set_liveurl(const char* value) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndCRSStopLive.liveurl)
}
inline void IndCRSStopLive::set_liveurl(const char* value, size_t size) {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  liveurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndCRSStopLive.liveurl)
}
inline ::std::string* IndCRSStopLive::mutable_liveurl() {
  set_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liveurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndCRSStopLive.liveurl)
  return liveurl_;
}
inline ::std::string* IndCRSStopLive::release_liveurl() {
  clear_has_liveurl();
  if (liveurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liveurl_;
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndCRSStopLive::set_allocated_liveurl(::std::string* liveurl) {
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (liveurl) {
    set_has_liveurl();
    liveurl_ = liveurl;
  } else {
    clear_has_liveurl();
    liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndCRSStopLive.liveurl)
}

// optional uint64 confreportid = 6;
inline bool IndCRSStopLive::has_confreportid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndCRSStopLive::set_has_confreportid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndCRSStopLive::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndCRSStopLive::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndCRSStopLive::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndCRSStopLive.confreportid)
  return confreportid_;
}
inline void IndCRSStopLive::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndCRSStopLive.confreportid)
}

// -------------------------------------------------------------------

// IndModifyConfCallList_ParticipantInfo

// optional uint32 psuid = 1;
inline bool IndModifyConfCallList_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndModifyConfCallList_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndModifyConfCallList_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndModifyConfCallList_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 IndModifyConfCallList_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.ParticipantInfo.psuid)
  return psuid_;
}
inline void IndModifyConfCallList_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.ParticipantInfo.psuid)
}

// optional string nickname = 2;
inline bool IndModifyConfCallList_ParticipantInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndModifyConfCallList_ParticipantInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndModifyConfCallList_ParticipantInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndModifyConfCallList_ParticipantInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& IndModifyConfCallList_ParticipantInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
  return *nickname_;
}
inline void IndModifyConfCallList_ParticipantInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
}
inline void IndModifyConfCallList_ParticipantInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
}
inline void IndModifyConfCallList_ParticipantInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
}
inline ::std::string* IndModifyConfCallList_ParticipantInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
  return nickname_;
}
inline ::std::string* IndModifyConfCallList_ParticipantInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndModifyConfCallList_ParticipantInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndModifyConfCallList.ParticipantInfo.nickname)
}

// -------------------------------------------------------------------

// IndModifyConfCallList_RollCallInfo

// optional uint64 rcid = 1;
inline bool IndModifyConfCallList_RollCallInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndModifyConfCallList_RollCallInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndModifyConfCallList_RollCallInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndModifyConfCallList_RollCallInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 IndModifyConfCallList_RollCallInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.RollCallInfo.rcid)
  return rcid_;
}
inline void IndModifyConfCallList_RollCallInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.RollCallInfo.rcid)
}

// optional string rcname = 2;
inline bool IndModifyConfCallList_RollCallInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndModifyConfCallList_RollCallInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndModifyConfCallList_RollCallInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndModifyConfCallList_RollCallInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& IndModifyConfCallList_RollCallInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
  return *rcname_;
}
inline void IndModifyConfCallList_RollCallInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
}
inline void IndModifyConfCallList_RollCallInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
}
inline void IndModifyConfCallList_RollCallInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
}
inline ::std::string* IndModifyConfCallList_RollCallInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
  return rcname_;
}
inline ::std::string* IndModifyConfCallList_RollCallInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndModifyConfCallList_RollCallInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndModifyConfCallList.RollCallInfo.rcname)
}

// repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
inline int IndModifyConfCallList_RollCallInfo::parts_size() const {
  return parts_.size();
}
inline void IndModifyConfCallList_RollCallInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::IndModifyConfCallList_ParticipantInfo& IndModifyConfCallList_RollCallInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.RollCallInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::IndModifyConfCallList_ParticipantInfo* IndModifyConfCallList_RollCallInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndModifyConfCallList.RollCallInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::IndModifyConfCallList_ParticipantInfo* IndModifyConfCallList_RollCallInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndModifyConfCallList.RollCallInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndModifyConfCallList_ParticipantInfo >&
IndModifyConfCallList_RollCallInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndModifyConfCallList.RollCallInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndModifyConfCallList_ParticipantInfo >*
IndModifyConfCallList_RollCallInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndModifyConfCallList.RollCallInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// IndModifyConfCallList

// optional uint32 deviceid = 1;
inline bool IndModifyConfCallList::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndModifyConfCallList::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndModifyConfCallList::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndModifyConfCallList::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndModifyConfCallList::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.deviceid)
  return deviceid_;
}
inline void IndModifyConfCallList::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.deviceid)
}

// optional string token = 2;
inline bool IndModifyConfCallList::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndModifyConfCallList::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndModifyConfCallList::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndModifyConfCallList::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndModifyConfCallList::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.token)
  return *token_;
}
inline void IndModifyConfCallList::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.token)
}
inline void IndModifyConfCallList::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndModifyConfCallList.token)
}
inline void IndModifyConfCallList::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndModifyConfCallList.token)
}
inline ::std::string* IndModifyConfCallList::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndModifyConfCallList.token)
  return token_;
}
inline ::std::string* IndModifyConfCallList::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndModifyConfCallList::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndModifyConfCallList.token)
}

// optional uint64 confid = 3;
inline bool IndModifyConfCallList::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndModifyConfCallList::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndModifyConfCallList::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndModifyConfCallList::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndModifyConfCallList::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.confid)
  return confid_;
}
inline void IndModifyConfCallList::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.confid)
}

// optional uint32 optype = 4;
inline bool IndModifyConfCallList::has_optype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndModifyConfCallList::set_has_optype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndModifyConfCallList::clear_has_optype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndModifyConfCallList::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 IndModifyConfCallList::optype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.optype)
  return optype_;
}
inline void IndModifyConfCallList::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndModifyConfCallList.optype)
}

// optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
inline bool IndModifyConfCallList::has_rollcalllist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndModifyConfCallList::set_has_rollcalllist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndModifyConfCallList::clear_has_rollcalllist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndModifyConfCallList::clear_rollcalllist() {
  if (rollcalllist_ != NULL) rollcalllist_->::SRMsgs::IndModifyConfCallList_RollCallInfo::Clear();
  clear_has_rollcalllist();
}
inline const ::SRMsgs::IndModifyConfCallList_RollCallInfo& IndModifyConfCallList::rollcalllist() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndModifyConfCallList.rollcalllist)
  return rollcalllist_ != NULL ? *rollcalllist_ : *default_instance_->rollcalllist_;
}
inline ::SRMsgs::IndModifyConfCallList_RollCallInfo* IndModifyConfCallList::mutable_rollcalllist() {
  set_has_rollcalllist();
  if (rollcalllist_ == NULL) rollcalllist_ = new ::SRMsgs::IndModifyConfCallList_RollCallInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndModifyConfCallList.rollcalllist)
  return rollcalllist_;
}
inline ::SRMsgs::IndModifyConfCallList_RollCallInfo* IndModifyConfCallList::release_rollcalllist() {
  clear_has_rollcalllist();
  ::SRMsgs::IndModifyConfCallList_RollCallInfo* temp = rollcalllist_;
  rollcalllist_ = NULL;
  return temp;
}
inline void IndModifyConfCallList::set_allocated_rollcalllist(::SRMsgs::IndModifyConfCallList_RollCallInfo* rollcalllist) {
  delete rollcalllist_;
  rollcalllist_ = rollcalllist;
  if (rollcalllist) {
    set_has_rollcalllist();
  } else {
    clear_has_rollcalllist();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndModifyConfCallList.rollcalllist)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_FrameInfo

// optional uint32 fsw = 1;
inline bool IndTerStatisticsInfo_FrameInfo::has_fsw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_FrameInfo::set_has_fsw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_has_fsw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_fsw() {
  fsw_ = 0u;
  clear_has_fsw();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_FrameInfo::fsw() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.FrameInfo.fsw)
  return fsw_;
}
inline void IndTerStatisticsInfo_FrameInfo::set_fsw(::google::protobuf::uint32 value) {
  set_has_fsw();
  fsw_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.FrameInfo.fsw)
}

// optional uint32 fsh = 2;
inline bool IndTerStatisticsInfo_FrameInfo::has_fsh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_FrameInfo::set_has_fsh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_has_fsh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_fsh() {
  fsh_ = 0u;
  clear_has_fsh();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_FrameInfo::fsh() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.FrameInfo.fsh)
  return fsh_;
}
inline void IndTerStatisticsInfo_FrameInfo::set_fsh(::google::protobuf::uint32 value) {
  set_has_fsh();
  fsh_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.FrameInfo.fsh)
}

// optional uint32 fps = 3;
inline bool IndTerStatisticsInfo_FrameInfo::has_fps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerStatisticsInfo_FrameInfo::set_has_fps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_has_fps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerStatisticsInfo_FrameInfo::clear_fps() {
  fps_ = 0u;
  clear_has_fps();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_FrameInfo::fps() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.FrameInfo.fps)
  return fps_;
}
inline void IndTerStatisticsInfo_FrameInfo::set_fps(::google::protobuf::uint32 value) {
  set_has_fps();
  fps_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.FrameInfo.fps)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_AdvanceInfo

// optional uint32 delay = 1;
inline bool IndTerStatisticsInfo_AdvanceInfo::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_AdvanceInfo::delay() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.delay)
  return delay_;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.delay)
}

// optional uint32 jitter = 2;
inline bool IndTerStatisticsInfo_AdvanceInfo::has_jitter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_has_jitter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_jitter() {
  jitter_ = 0u;
  clear_has_jitter();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_AdvanceInfo::jitter() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.jitter)
  return jitter_;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_jitter(::google::protobuf::uint32 value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.jitter)
}

// optional uint32 loss = 3;
inline bool IndTerStatisticsInfo_AdvanceInfo::has_loss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_has_loss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_has_loss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerStatisticsInfo_AdvanceInfo::clear_loss() {
  loss_ = 0u;
  clear_has_loss();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_AdvanceInfo::loss() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.loss)
  return loss_;
}
inline void IndTerStatisticsInfo_AdvanceInfo::set_loss(::google::protobuf::uint32 value) {
  set_has_loss();
  loss_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AdvanceInfo.loss)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_BaseInfo

// optional uint32 format = 1;
inline bool IndTerStatisticsInfo_BaseInfo::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_BaseInfo::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_BaseInfo::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_BaseInfo::clear_format() {
  format_ = 0u;
  clear_has_format();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_BaseInfo::format() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.BaseInfo.format)
  return format_;
}
inline void IndTerStatisticsInfo_BaseInfo::set_format(::google::protobuf::uint32 value) {
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.BaseInfo.format)
}

// optional uint32 bitrate = 2;
inline bool IndTerStatisticsInfo_BaseInfo::has_bitrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_BaseInfo::set_has_bitrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_BaseInfo::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_BaseInfo::clear_bitrate() {
  bitrate_ = 0u;
  clear_has_bitrate();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_BaseInfo::bitrate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.BaseInfo.bitrate)
  return bitrate_;
}
inline void IndTerStatisticsInfo_BaseInfo::set_bitrate(::google::protobuf::uint32 value) {
  set_has_bitrate();
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.BaseInfo.bitrate)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_AudioInfo

// optional uint32 atype = 1;
inline bool IndTerStatisticsInfo_AudioInfo::has_atype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_AudioInfo::set_has_atype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_has_atype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_atype() {
  atype_ = 0u;
  clear_has_atype();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_AudioInfo::atype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AudioInfo.atype)
  return atype_;
}
inline void IndTerStatisticsInfo_AudioInfo::set_atype(::google::protobuf::uint32 value) {
  set_has_atype();
  atype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AudioInfo.atype)
}

// optional uint32 atersuid = 2;
inline bool IndTerStatisticsInfo_AudioInfo::has_atersuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_AudioInfo::set_has_atersuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_has_atersuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_atersuid() {
  atersuid_ = 0u;
  clear_has_atersuid();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_AudioInfo::atersuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AudioInfo.atersuid)
  return atersuid_;
}
inline void IndTerStatisticsInfo_AudioInfo::set_atersuid(::google::protobuf::uint32 value) {
  set_has_atersuid();
  atersuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AudioInfo.atersuid)
}

// optional string ateralias = 3;
inline bool IndTerStatisticsInfo_AudioInfo::has_ateralias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerStatisticsInfo_AudioInfo::set_has_ateralias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_has_ateralias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_ateralias() {
  if (ateralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ateralias_->clear();
  }
  clear_has_ateralias();
}
inline const ::std::string& IndTerStatisticsInfo_AudioInfo::ateralias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
  return *ateralias_;
}
inline void IndTerStatisticsInfo_AudioInfo::set_ateralias(const ::std::string& value) {
  set_has_ateralias();
  if (ateralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ateralias_ = new ::std::string;
  }
  ateralias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
}
inline void IndTerStatisticsInfo_AudioInfo::set_ateralias(const char* value) {
  set_has_ateralias();
  if (ateralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ateralias_ = new ::std::string;
  }
  ateralias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
}
inline void IndTerStatisticsInfo_AudioInfo::set_ateralias(const char* value, size_t size) {
  set_has_ateralias();
  if (ateralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ateralias_ = new ::std::string;
  }
  ateralias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
}
inline ::std::string* IndTerStatisticsInfo_AudioInfo::mutable_ateralias() {
  set_has_ateralias();
  if (ateralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ateralias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
  return ateralias_;
}
inline ::std::string* IndTerStatisticsInfo_AudioInfo::release_ateralias() {
  clear_has_ateralias();
  if (ateralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ateralias_;
    ateralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerStatisticsInfo_AudioInfo::set_allocated_ateralias(::std::string* ateralias) {
  if (ateralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ateralias_;
  }
  if (ateralias) {
    set_has_ateralias();
    ateralias_ = ateralias;
  } else {
    clear_has_ateralias();
    ateralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.AudioInfo.ateralias)
}

// optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
inline bool IndTerStatisticsInfo_AudioInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerStatisticsInfo_AudioInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfo_BaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::SRMsgs::IndTerStatisticsInfo_BaseInfo& IndTerStatisticsInfo_AudioInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AudioInfo.baseinfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_AudioInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::SRMsgs::IndTerStatisticsInfo_BaseInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.AudioInfo.baseinfo)
  return baseinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_AudioInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::SRMsgs::IndTerStatisticsInfo_BaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void IndTerStatisticsInfo_AudioInfo::set_allocated_baseinfo(::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.AudioInfo.baseinfo)
}

// optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
inline bool IndTerStatisticsInfo_AudioInfo::has_advinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerStatisticsInfo_AudioInfo::set_has_advinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_has_advinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerStatisticsInfo_AudioInfo::clear_advinfo() {
  if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::Clear();
  clear_has_advinfo();
}
inline const ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo& IndTerStatisticsInfo_AudioInfo::advinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.AudioInfo.advinfo)
  return advinfo_ != NULL ? *advinfo_ : *default_instance_->advinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_AudioInfo::mutable_advinfo() {
  set_has_advinfo();
  if (advinfo_ == NULL) advinfo_ = new ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.AudioInfo.advinfo)
  return advinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_AudioInfo::release_advinfo() {
  clear_has_advinfo();
  ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* temp = advinfo_;
  advinfo_ = NULL;
  return temp;
}
inline void IndTerStatisticsInfo_AudioInfo::set_allocated_advinfo(::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo) {
  delete advinfo_;
  advinfo_ = advinfo;
  if (advinfo) {
    set_has_advinfo();
  } else {
    clear_has_advinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.AudioInfo.advinfo)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_VideoInfo

// optional uint32 vtype = 1;
inline bool IndTerStatisticsInfo_VideoInfo::has_vtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_VideoInfo::set_has_vtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_has_vtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_vtype() {
  vtype_ = 0u;
  clear_has_vtype();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_VideoInfo::vtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.vtype)
  return vtype_;
}
inline void IndTerStatisticsInfo_VideoInfo::set_vtype(::google::protobuf::uint32 value) {
  set_has_vtype();
  vtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.VideoInfo.vtype)
}

// optional uint32 vtersuid = 2;
inline bool IndTerStatisticsInfo_VideoInfo::has_vtersuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_VideoInfo::set_has_vtersuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_has_vtersuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_vtersuid() {
  vtersuid_ = 0u;
  clear_has_vtersuid();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_VideoInfo::vtersuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.vtersuid)
  return vtersuid_;
}
inline void IndTerStatisticsInfo_VideoInfo::set_vtersuid(::google::protobuf::uint32 value) {
  set_has_vtersuid();
  vtersuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.VideoInfo.vtersuid)
}

// optional string vteralias = 3;
inline bool IndTerStatisticsInfo_VideoInfo::has_vteralias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerStatisticsInfo_VideoInfo::set_has_vteralias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_has_vteralias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_vteralias() {
  if (vteralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vteralias_->clear();
  }
  clear_has_vteralias();
}
inline const ::std::string& IndTerStatisticsInfo_VideoInfo::vteralias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
  return *vteralias_;
}
inline void IndTerStatisticsInfo_VideoInfo::set_vteralias(const ::std::string& value) {
  set_has_vteralias();
  if (vteralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vteralias_ = new ::std::string;
  }
  vteralias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
}
inline void IndTerStatisticsInfo_VideoInfo::set_vteralias(const char* value) {
  set_has_vteralias();
  if (vteralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vteralias_ = new ::std::string;
  }
  vteralias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
}
inline void IndTerStatisticsInfo_VideoInfo::set_vteralias(const char* value, size_t size) {
  set_has_vteralias();
  if (vteralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vteralias_ = new ::std::string;
  }
  vteralias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
}
inline ::std::string* IndTerStatisticsInfo_VideoInfo::mutable_vteralias() {
  set_has_vteralias();
  if (vteralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vteralias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
  return vteralias_;
}
inline ::std::string* IndTerStatisticsInfo_VideoInfo::release_vteralias() {
  clear_has_vteralias();
  if (vteralias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vteralias_;
    vteralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerStatisticsInfo_VideoInfo::set_allocated_vteralias(::std::string* vteralias) {
  if (vteralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vteralias_;
  }
  if (vteralias) {
    set_has_vteralias();
    vteralias_ = vteralias;
  } else {
    clear_has_vteralias();
    vteralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.VideoInfo.vteralias)
}

// optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
inline bool IndTerStatisticsInfo_VideoInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndTerStatisticsInfo_VideoInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfo_BaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::SRMsgs::IndTerStatisticsInfo_BaseInfo& IndTerStatisticsInfo_VideoInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.baseinfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_VideoInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::SRMsgs::IndTerStatisticsInfo_BaseInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.VideoInfo.baseinfo)
  return baseinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_VideoInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::SRMsgs::IndTerStatisticsInfo_BaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void IndTerStatisticsInfo_VideoInfo::set_allocated_baseinfo(::SRMsgs::IndTerStatisticsInfo_BaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.VideoInfo.baseinfo)
}

// optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
inline bool IndTerStatisticsInfo_VideoInfo::has_advinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerStatisticsInfo_VideoInfo::set_has_advinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_has_advinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerStatisticsInfo_VideoInfo::clear_advinfo() {
  if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::Clear();
  clear_has_advinfo();
}
inline const ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo& IndTerStatisticsInfo_VideoInfo::advinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.advinfo)
  return advinfo_ != NULL ? *advinfo_ : *default_instance_->advinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_VideoInfo::mutable_advinfo() {
  set_has_advinfo();
  if (advinfo_ == NULL) advinfo_ = new ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.VideoInfo.advinfo)
  return advinfo_;
}
inline ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_VideoInfo::release_advinfo() {
  clear_has_advinfo();
  ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* temp = advinfo_;
  advinfo_ = NULL;
  return temp;
}
inline void IndTerStatisticsInfo_VideoInfo::set_allocated_advinfo(::SRMsgs::IndTerStatisticsInfo_AdvanceInfo* advinfo) {
  delete advinfo_;
  advinfo_ = advinfo;
  if (advinfo) {
    set_has_advinfo();
  } else {
    clear_has_advinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.VideoInfo.advinfo)
}

// repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
inline int IndTerStatisticsInfo_VideoInfo::frameinfo_size() const {
  return frameinfo_.size();
}
inline void IndTerStatisticsInfo_VideoInfo::clear_frameinfo() {
  frameinfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_FrameInfo& IndTerStatisticsInfo_VideoInfo::frameinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.VideoInfo.frameinfo)
  return frameinfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_FrameInfo* IndTerStatisticsInfo_VideoInfo::mutable_frameinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.VideoInfo.frameinfo)
  return frameinfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_FrameInfo* IndTerStatisticsInfo_VideoInfo::add_frameinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.VideoInfo.frameinfo)
  return frameinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_FrameInfo >&
IndTerStatisticsInfo_VideoInfo::frameinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.VideoInfo.frameinfo)
  return frameinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_FrameInfo >*
IndTerStatisticsInfo_VideoInfo::mutable_frameinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.VideoInfo.frameinfo)
  return &frameinfo_;
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_XfeInfo

// repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
inline int IndTerStatisticsInfo_XfeInfo::ainfo_size() const {
  return ainfo_.size();
}
inline void IndTerStatisticsInfo_XfeInfo::clear_ainfo() {
  ainfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_AudioInfo& IndTerStatisticsInfo_XfeInfo::ainfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.XfeInfo.ainfo)
  return ainfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_AudioInfo* IndTerStatisticsInfo_XfeInfo::mutable_ainfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.XfeInfo.ainfo)
  return ainfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_AudioInfo* IndTerStatisticsInfo_XfeInfo::add_ainfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.XfeInfo.ainfo)
  return ainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_AudioInfo >&
IndTerStatisticsInfo_XfeInfo::ainfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.XfeInfo.ainfo)
  return ainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_AudioInfo >*
IndTerStatisticsInfo_XfeInfo::mutable_ainfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.XfeInfo.ainfo)
  return &ainfo_;
}

// repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
inline int IndTerStatisticsInfo_XfeInfo::vinfo_size() const {
  return vinfo_.size();
}
inline void IndTerStatisticsInfo_XfeInfo::clear_vinfo() {
  vinfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_VideoInfo& IndTerStatisticsInfo_XfeInfo::vinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.XfeInfo.vinfo)
  return vinfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_VideoInfo* IndTerStatisticsInfo_XfeInfo::mutable_vinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.XfeInfo.vinfo)
  return vinfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_VideoInfo* IndTerStatisticsInfo_XfeInfo::add_vinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.XfeInfo.vinfo)
  return vinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_VideoInfo >&
IndTerStatisticsInfo_XfeInfo::vinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.XfeInfo.vinfo)
  return vinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_VideoInfo >*
IndTerStatisticsInfo_XfeInfo::mutable_vinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.XfeInfo.vinfo)
  return &vinfo_;
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo_TerStatisticsInfo

// optional uint32 suid = 1;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_TerStatisticsInfo::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.suid)
  return suid_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.suid)
}

// optional string alias = 2;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& IndTerStatisticsInfo_TerStatisticsInfo::alias() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
  return *alias_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
}
inline ::std::string* IndTerStatisticsInfo_TerStatisticsInfo::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
  return alias_;
}
inline ::std::string* IndTerStatisticsInfo_TerStatisticsInfo::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.alias)
}

// repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
inline int IndTerStatisticsInfo_TerStatisticsInfo::txinfo_size() const {
  return txinfo_.size();
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_txinfo() {
  txinfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_XfeInfo& IndTerStatisticsInfo_TerStatisticsInfo::txinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txinfo)
  return txinfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_TerStatisticsInfo::mutable_txinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txinfo)
  return txinfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_TerStatisticsInfo::add_txinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txinfo)
  return txinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >&
IndTerStatisticsInfo_TerStatisticsInfo::txinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txinfo)
  return txinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >*
IndTerStatisticsInfo_TerStatisticsInfo::mutable_txinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txinfo)
  return &txinfo_;
}

// repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
inline int IndTerStatisticsInfo_TerStatisticsInfo::rxinfo_size() const {
  return rxinfo_.size();
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_rxinfo() {
  rxinfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_XfeInfo& IndTerStatisticsInfo_TerStatisticsInfo::rxinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.rxinfo)
  return rxinfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_TerStatisticsInfo::mutable_rxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.rxinfo)
  return rxinfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_TerStatisticsInfo::add_rxinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.rxinfo)
  return rxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >&
IndTerStatisticsInfo_TerStatisticsInfo::rxinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.rxinfo)
  return rxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_XfeInfo >*
IndTerStatisticsInfo_TerStatisticsInfo::mutable_rxinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.rxinfo)
  return &rxinfo_;
}

// optional uint32 fromtype = 5;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_fromtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_fromtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_fromtype() {
  fromtype_ = 0u;
  clear_has_fromtype();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_TerStatisticsInfo::fromtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.fromtype)
  return fromtype_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_fromtype(::google::protobuf::uint32 value) {
  set_has_fromtype();
  fromtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.fromtype)
}

// optional uint32 termtype = 6;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_termtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_termtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_TerStatisticsInfo::termtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.termtype)
  return termtype_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.termtype)
}

// optional uint32 txbweresult = 7;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_txbweresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_txbweresult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_txbweresult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_txbweresult() {
  txbweresult_ = 0u;
  clear_has_txbweresult();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_TerStatisticsInfo::txbweresult() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txbweresult)
  return txbweresult_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_txbweresult(::google::protobuf::uint32 value) {
  set_has_txbweresult();
  txbweresult_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.txbweresult)
}

// optional uint32 producttype = 8;
inline bool IndTerStatisticsInfo_TerStatisticsInfo::has_producttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_has_producttype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_has_producttype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::clear_producttype() {
  producttype_ = 0u;
  clear_has_producttype();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo_TerStatisticsInfo::producttype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.producttype)
  return producttype_;
}
inline void IndTerStatisticsInfo_TerStatisticsInfo::set_producttype(::google::protobuf::uint32 value) {
  set_has_producttype();
  producttype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo.producttype)
}

// -------------------------------------------------------------------

// IndTerStatisticsInfo

// optional uint32 deviceid = 1;
inline bool IndTerStatisticsInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndTerStatisticsInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndTerStatisticsInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndTerStatisticsInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndTerStatisticsInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.deviceid)
  return deviceid_;
}
inline void IndTerStatisticsInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.deviceid)
}

// optional string token = 2;
inline bool IndTerStatisticsInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndTerStatisticsInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndTerStatisticsInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndTerStatisticsInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndTerStatisticsInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.token)
  return *token_;
}
inline void IndTerStatisticsInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.token)
}
inline void IndTerStatisticsInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndTerStatisticsInfo.token)
}
inline void IndTerStatisticsInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndTerStatisticsInfo.token)
}
inline ::std::string* IndTerStatisticsInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.token)
  return token_;
}
inline ::std::string* IndTerStatisticsInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndTerStatisticsInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndTerStatisticsInfo.token)
}

// optional uint64 confid = 3;
inline bool IndTerStatisticsInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndTerStatisticsInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndTerStatisticsInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndTerStatisticsInfo::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndTerStatisticsInfo::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.confid)
  return confid_;
}
inline void IndTerStatisticsInfo::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndTerStatisticsInfo.confid)
}

// repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
inline int IndTerStatisticsInfo::tsinfo_size() const {
  return tsinfo_.size();
}
inline void IndTerStatisticsInfo::clear_tsinfo() {
  tsinfo_.Clear();
}
inline const ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo& IndTerStatisticsInfo::tsinfo(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndTerStatisticsInfo.tsinfo)
  return tsinfo_.Get(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo* IndTerStatisticsInfo::mutable_tsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndTerStatisticsInfo.tsinfo)
  return tsinfo_.Mutable(index);
}
inline ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo* IndTerStatisticsInfo::add_tsinfo() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndTerStatisticsInfo.tsinfo)
  return tsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo >&
IndTerStatisticsInfo::tsinfo() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndTerStatisticsInfo.tsinfo)
  return tsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndTerStatisticsInfo_TerStatisticsInfo >*
IndTerStatisticsInfo::mutable_tsinfo() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndTerStatisticsInfo.tsinfo)
  return &tsinfo_;
}

// -------------------------------------------------------------------

// IndSubSvrInfoToDevmgr_IPPORTInfo

// optional string inner = 1;
inline bool IndSubSvrInfoToDevmgr_IPPORTInfo::has_inner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_has_inner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_has_inner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_inner() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_->clear();
  }
  clear_has_inner();
}
inline const ::std::string& IndSubSvrInfoToDevmgr_IPPORTInfo::inner() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
  return *inner_;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_inner(const ::std::string& value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_inner(const char* value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_inner(const char* value, size_t size) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::mutable_inner() {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
  return inner_;
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::release_inner() {
  clear_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inner_;
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_allocated_inner(::std::string* inner) {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (inner) {
    set_has_inner();
    inner_ = inner;
  } else {
    clear_has_inner();
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.inner)
}

// optional string outer = 2;
inline bool IndSubSvrInfoToDevmgr_IPPORTInfo::has_outer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_has_outer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_has_outer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_outer() {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_->clear();
  }
  clear_has_outer();
}
inline const ::std::string& IndSubSvrInfoToDevmgr_IPPORTInfo::outer() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
  return *outer_;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_outer(const ::std::string& value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_outer(const char* value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_outer(const char* value, size_t size) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::mutable_outer() {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
  return outer_;
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::release_outer() {
  clear_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = outer_;
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_allocated_outer(::std::string* outer) {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (outer) {
    set_has_outer();
    outer_ = outer;
  } else {
    clear_has_outer();
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.outer)
}

// optional string vpn = 3;
inline bool IndSubSvrInfoToDevmgr_IPPORTInfo::has_vpn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_has_vpn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_has_vpn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::clear_vpn() {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_->clear();
  }
  clear_has_vpn();
}
inline const ::std::string& IndSubSvrInfoToDevmgr_IPPORTInfo::vpn() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
  return *vpn_;
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_vpn(const ::std::string& value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_vpn(const char* value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_vpn(const char* value, size_t size) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::mutable_vpn() {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
  return vpn_;
}
inline ::std::string* IndSubSvrInfoToDevmgr_IPPORTInfo::release_vpn() {
  clear_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vpn_;
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrInfoToDevmgr_IPPORTInfo::set_allocated_vpn(::std::string* vpn) {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (vpn) {
    set_has_vpn();
    vpn_ = vpn;
  } else {
    clear_has_vpn();
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo.vpn)
}

// -------------------------------------------------------------------

// IndSubSvrInfoToDevmgr_ServerInfo

// optional uint32 svrtype = 1;
inline bool IndSubSvrInfoToDevmgr_ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndSubSvrInfoToDevmgr_ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.svrtype)
  return svrtype_;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.svrtype)
}

// optional uint32 deviceid = 2;
inline bool IndSubSvrInfoToDevmgr_ServerInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndSubSvrInfoToDevmgr_ServerInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.deviceid)
  return deviceid_;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.deviceid)
}

// optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
inline bool IndSubSvrInfoToDevmgr_ServerInfo::has_ipport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_has_ipport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_has_ipport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::clear_ipport() {
  if (ipport_ != NULL) ipport_->::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo::Clear();
  clear_has_ipport();
}
inline const ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo& IndSubSvrInfoToDevmgr_ServerInfo::ipport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.ipport)
  return ipport_ != NULL ? *ipport_ : *default_instance_->ipport_;
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* IndSubSvrInfoToDevmgr_ServerInfo::mutable_ipport() {
  set_has_ipport();
  if (ipport_ == NULL) ipport_ = new ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.ipport)
  return ipport_;
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* IndSubSvrInfoToDevmgr_ServerInfo::release_ipport() {
  clear_has_ipport();
  ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* temp = ipport_;
  ipport_ = NULL;
  return temp;
}
inline void IndSubSvrInfoToDevmgr_ServerInfo::set_allocated_ipport(::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo* ipport) {
  delete ipport_;
  ipport_ = ipport;
  if (ipport) {
    set_has_ipport();
  } else {
    clear_has_ipport();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo.ipport)
}

// -------------------------------------------------------------------

// IndSubSvrInfoToDevmgr_DomainInfo

// optional string domainname = 1;
inline bool IndSubSvrInfoToDevmgr_DomainInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndSubSvrInfoToDevmgr_DomainInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
  return *domainname_;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
}
inline ::std::string* IndSubSvrInfoToDevmgr_DomainInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
  return domainname_;
}
inline ::std::string* IndSubSvrInfoToDevmgr_DomainInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.domainname)
}

// optional sint32 level = 2;
inline bool IndSubSvrInfoToDevmgr_DomainInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 IndSubSvrInfoToDevmgr_DomainInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.level)
  return level_;
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.level)
}

// repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
inline int IndSubSvrInfoToDevmgr_DomainInfo::svrinfos_size() const {
  return svrinfos_.size();
}
inline void IndSubSvrInfoToDevmgr_DomainInfo::clear_svrinfos() {
  svrinfos_.Clear();
}
inline const ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo& IndSubSvrInfoToDevmgr_DomainInfo::svrinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Get(index);
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo* IndSubSvrInfoToDevmgr_DomainInfo::mutable_svrinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Mutable(index);
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo* IndSubSvrInfoToDevmgr_DomainInfo::add_svrinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo >&
IndSubSvrInfoToDevmgr_DomainInfo::svrinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_ServerInfo >*
IndSubSvrInfoToDevmgr_DomainInfo::mutable_svrinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo.svrinfos)
  return &svrinfos_;
}

// -------------------------------------------------------------------

// IndSubSvrInfoToDevmgr

// optional uint32 deviceid = 1;
inline bool IndSubSvrInfoToDevmgr::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrInfoToDevmgr::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrInfoToDevmgr::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrInfoToDevmgr::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndSubSvrInfoToDevmgr::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.deviceid)
  return deviceid_;
}
inline void IndSubSvrInfoToDevmgr::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.deviceid)
}

// optional string token = 2;
inline bool IndSubSvrInfoToDevmgr::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrInfoToDevmgr::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrInfoToDevmgr::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrInfoToDevmgr::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndSubSvrInfoToDevmgr::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.token)
  return *token_;
}
inline void IndSubSvrInfoToDevmgr::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.token)
}
inline void IndSubSvrInfoToDevmgr::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrInfoToDevmgr.token)
}
inline void IndSubSvrInfoToDevmgr::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrInfoToDevmgr.token)
}
inline ::std::string* IndSubSvrInfoToDevmgr::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.token)
  return token_;
}
inline ::std::string* IndSubSvrInfoToDevmgr::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrInfoToDevmgr::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrInfoToDevmgr.token)
}

// optional uint32 addordel = 3;
inline bool IndSubSvrInfoToDevmgr::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSubSvrInfoToDevmgr::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSubSvrInfoToDevmgr::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSubSvrInfoToDevmgr::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndSubSvrInfoToDevmgr::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.addordel)
  return addordel_;
}
inline void IndSubSvrInfoToDevmgr::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrInfoToDevmgr.addordel)
}

// repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
inline int IndSubSvrInfoToDevmgr::domaininfos_size() const {
  return domaininfos_.size();
}
inline void IndSubSvrInfoToDevmgr::clear_domaininfos() {
  domaininfos_.Clear();
}
inline const ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo& IndSubSvrInfoToDevmgr::domaininfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Get(index);
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo* IndSubSvrInfoToDevmgr::mutable_domaininfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Mutable(index);
}
inline ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo* IndSubSvrInfoToDevmgr::add_domaininfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSubSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo >&
IndSubSvrInfoToDevmgr::domaininfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSubSvrInfoToDevmgr.domaininfos)
  return domaininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrInfoToDevmgr_DomainInfo >*
IndSubSvrInfoToDevmgr::mutable_domaininfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSubSvrInfoToDevmgr.domaininfos)
  return &domaininfos_;
}

// -------------------------------------------------------------------

// IndSubSvrHeartTodev_LoadInfo

// optional uint32 ternum = 1;
inline bool IndSubSvrHeartTodev_LoadInfo::has_ternum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_has_ternum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_has_ternum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_ternum() {
  ternum_ = 0u;
  clear_has_ternum();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_LoadInfo::ternum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.LoadInfo.ternum)
  return ternum_;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_ternum(::google::protobuf::uint32 value) {
  set_has_ternum();
  ternum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.LoadInfo.ternum)
}

// optional uint32 tx = 2;
inline bool IndSubSvrHeartTodev_LoadInfo::has_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_has_tx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_has_tx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_tx() {
  tx_ = 0u;
  clear_has_tx();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_LoadInfo::tx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.LoadInfo.tx)
  return tx_;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_tx(::google::protobuf::uint32 value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.LoadInfo.tx)
}

// optional uint32 rx = 3;
inline bool IndSubSvrHeartTodev_LoadInfo::has_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_has_rx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_has_rx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_rx() {
  rx_ = 0u;
  clear_has_rx();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_LoadInfo::rx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.LoadInfo.rx)
  return rx_;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_rx(::google::protobuf::uint32 value) {
  set_has_rx();
  rx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.LoadInfo.rx)
}

// optional uint32 cpu = 4;
inline bool IndSubSvrHeartTodev_LoadInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndSubSvrHeartTodev_LoadInfo::clear_cpu() {
  cpu_ = 0u;
  clear_has_cpu();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_LoadInfo::cpu() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.LoadInfo.cpu)
  return cpu_;
}
inline void IndSubSvrHeartTodev_LoadInfo::set_cpu(::google::protobuf::uint32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.LoadInfo.cpu)
}

// -------------------------------------------------------------------

// IndSubSvrHeartTodev_ServerInfo

// optional uint32 svrtype = 1;
inline bool IndSubSvrHeartTodev_ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.ServerInfo.svrtype)
  return svrtype_;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.ServerInfo.svrtype)
}

// optional uint32 deviceid = 2;
inline bool IndSubSvrHeartTodev_ServerInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev_ServerInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.ServerInfo.deviceid)
  return deviceid_;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.ServerInfo.deviceid)
}

// optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
inline bool IndSubSvrHeartTodev_ServerInfo::has_loadinfos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_has_loadinfos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_has_loadinfos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndSubSvrHeartTodev_ServerInfo::clear_loadinfos() {
  if (loadinfos_ != NULL) loadinfos_->::SRMsgs::IndSubSvrHeartTodev_LoadInfo::Clear();
  clear_has_loadinfos();
}
inline const ::SRMsgs::IndSubSvrHeartTodev_LoadInfo& IndSubSvrHeartTodev_ServerInfo::loadinfos() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.ServerInfo.loadinfos)
  return loadinfos_ != NULL ? *loadinfos_ : *default_instance_->loadinfos_;
}
inline ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* IndSubSvrHeartTodev_ServerInfo::mutable_loadinfos() {
  set_has_loadinfos();
  if (loadinfos_ == NULL) loadinfos_ = new ::SRMsgs::IndSubSvrHeartTodev_LoadInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrHeartTodev.ServerInfo.loadinfos)
  return loadinfos_;
}
inline ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* IndSubSvrHeartTodev_ServerInfo::release_loadinfos() {
  clear_has_loadinfos();
  ::SRMsgs::IndSubSvrHeartTodev_LoadInfo* temp = loadinfos_;
  loadinfos_ = NULL;
  return temp;
}
inline void IndSubSvrHeartTodev_ServerInfo::set_allocated_loadinfos(::SRMsgs::IndSubSvrHeartTodev_LoadInfo* loadinfos) {
  delete loadinfos_;
  loadinfos_ = loadinfos;
  if (loadinfos) {
    set_has_loadinfos();
  } else {
    clear_has_loadinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrHeartTodev.ServerInfo.loadinfos)
}

// -------------------------------------------------------------------

// IndSubSvrHeartTodev_DomainInfo

// optional string domainname = 1;
inline bool IndSubSvrHeartTodev_DomainInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrHeartTodev_DomainInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrHeartTodev_DomainInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrHeartTodev_DomainInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndSubSvrHeartTodev_DomainInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
  return *domainname_;
}
inline void IndSubSvrHeartTodev_DomainInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
}
inline void IndSubSvrHeartTodev_DomainInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
}
inline void IndSubSvrHeartTodev_DomainInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
}
inline ::std::string* IndSubSvrHeartTodev_DomainInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
  return domainname_;
}
inline ::std::string* IndSubSvrHeartTodev_DomainInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrHeartTodev_DomainInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrHeartTodev.DomainInfo.domainname)
}

// optional sint32 level = 2;
inline bool IndSubSvrHeartTodev_DomainInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrHeartTodev_DomainInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrHeartTodev_DomainInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrHeartTodev_DomainInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 IndSubSvrHeartTodev_DomainInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.DomainInfo.level)
  return level_;
}
inline void IndSubSvrHeartTodev_DomainInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.DomainInfo.level)
}

// repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
inline int IndSubSvrHeartTodev_DomainInfo::svrinfos_size() const {
  return svrinfos_.size();
}
inline void IndSubSvrHeartTodev_DomainInfo::clear_svrinfos() {
  svrinfos_.Clear();
}
inline const ::SRMsgs::IndSubSvrHeartTodev_ServerInfo& IndSubSvrHeartTodev_DomainInfo::svrinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Get(index);
}
inline ::SRMsgs::IndSubSvrHeartTodev_ServerInfo* IndSubSvrHeartTodev_DomainInfo::mutable_svrinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Mutable(index);
}
inline ::SRMsgs::IndSubSvrHeartTodev_ServerInfo* IndSubSvrHeartTodev_DomainInfo::add_svrinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSubSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_ServerInfo >&
IndSubSvrHeartTodev_DomainInfo::svrinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSubSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_ServerInfo >*
IndSubSvrHeartTodev_DomainInfo::mutable_svrinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSubSvrHeartTodev.DomainInfo.svrinfos)
  return &svrinfos_;
}

// -------------------------------------------------------------------

// IndSubSvrHeartTodev

// optional uint32 deviceid = 1;
inline bool IndSubSvrHeartTodev::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndSubSvrHeartTodev::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndSubSvrHeartTodev::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndSubSvrHeartTodev::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndSubSvrHeartTodev::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.deviceid)
  return deviceid_;
}
inline void IndSubSvrHeartTodev::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.deviceid)
}

// optional string token = 2;
inline bool IndSubSvrHeartTodev::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndSubSvrHeartTodev::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndSubSvrHeartTodev::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndSubSvrHeartTodev::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndSubSvrHeartTodev::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.token)
  return *token_;
}
inline void IndSubSvrHeartTodev::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndSubSvrHeartTodev.token)
}
inline void IndSubSvrHeartTodev::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndSubSvrHeartTodev.token)
}
inline void IndSubSvrHeartTodev::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndSubSvrHeartTodev.token)
}
inline ::std::string* IndSubSvrHeartTodev::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrHeartTodev.token)
  return token_;
}
inline ::std::string* IndSubSvrHeartTodev::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndSubSvrHeartTodev::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndSubSvrHeartTodev.token)
}

// repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
inline int IndSubSvrHeartTodev::domaininfos_size() const {
  return domaininfos_.size();
}
inline void IndSubSvrHeartTodev::clear_domaininfos() {
  domaininfos_.Clear();
}
inline const ::SRMsgs::IndSubSvrHeartTodev_DomainInfo& IndSubSvrHeartTodev::domaininfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndSubSvrHeartTodev.domaininfos)
  return domaininfos_.Get(index);
}
inline ::SRMsgs::IndSubSvrHeartTodev_DomainInfo* IndSubSvrHeartTodev::mutable_domaininfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndSubSvrHeartTodev.domaininfos)
  return domaininfos_.Mutable(index);
}
inline ::SRMsgs::IndSubSvrHeartTodev_DomainInfo* IndSubSvrHeartTodev::add_domaininfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndSubSvrHeartTodev.domaininfos)
  return domaininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_DomainInfo >&
IndSubSvrHeartTodev::domaininfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndSubSvrHeartTodev.domaininfos)
  return domaininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndSubSvrHeartTodev_DomainInfo >*
IndSubSvrHeartTodev::mutable_domaininfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndSubSvrHeartTodev.domaininfos)
  return &domaininfos_;
}

// -------------------------------------------------------------------

// IndVASAnalyVideoResult_videoMatch

// optional uint32 userid = 1;
inline bool IndVASAnalyVideoResult_videoMatch::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASAnalyVideoResult_videoMatch::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASAnalyVideoResult_videoMatch::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASAnalyVideoResult_videoMatch::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 IndVASAnalyVideoResult_videoMatch::userid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.videoMatch.userid)
  return userid_;
}
inline void IndVASAnalyVideoResult_videoMatch::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.videoMatch.userid)
}

// optional uint32 rate = 2;
inline bool IndVASAnalyVideoResult_videoMatch::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASAnalyVideoResult_videoMatch::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASAnalyVideoResult_videoMatch::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASAnalyVideoResult_videoMatch::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 IndVASAnalyVideoResult_videoMatch::rate() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.videoMatch.rate)
  return rate_;
}
inline void IndVASAnalyVideoResult_videoMatch::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.videoMatch.rate)
}

// -------------------------------------------------------------------

// IndVASAnalyVideoResult_MatchResult

// optional bool hasmismatch = 1;
inline bool IndVASAnalyVideoResult_MatchResult::has_hasmismatch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASAnalyVideoResult_MatchResult::set_has_hasmismatch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASAnalyVideoResult_MatchResult::clear_has_hasmismatch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASAnalyVideoResult_MatchResult::clear_hasmismatch() {
  hasmismatch_ = false;
  clear_has_hasmismatch();
}
inline bool IndVASAnalyVideoResult_MatchResult::hasmismatch() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.MatchResult.hasmismatch)
  return hasmismatch_;
}
inline void IndVASAnalyVideoResult_MatchResult::set_hasmismatch(bool value) {
  set_has_hasmismatch();
  hasmismatch_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.MatchResult.hasmismatch)
}

// repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
inline int IndVASAnalyVideoResult_MatchResult::videomatchs_size() const {
  return videomatchs_.size();
}
inline void IndVASAnalyVideoResult_MatchResult::clear_videomatchs() {
  videomatchs_.Clear();
}
inline const ::SRMsgs::IndVASAnalyVideoResult_videoMatch& IndVASAnalyVideoResult_MatchResult::videomatchs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.MatchResult.videoMatchs)
  return videomatchs_.Get(index);
}
inline ::SRMsgs::IndVASAnalyVideoResult_videoMatch* IndVASAnalyVideoResult_MatchResult::mutable_videomatchs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASAnalyVideoResult.MatchResult.videoMatchs)
  return videomatchs_.Mutable(index);
}
inline ::SRMsgs::IndVASAnalyVideoResult_videoMatch* IndVASAnalyVideoResult_MatchResult::add_videomatchs() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVASAnalyVideoResult.MatchResult.videoMatchs)
  return videomatchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_videoMatch >&
IndVASAnalyVideoResult_MatchResult::videomatchs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVASAnalyVideoResult.MatchResult.videoMatchs)
  return videomatchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_videoMatch >*
IndVASAnalyVideoResult_MatchResult::mutable_videomatchs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVASAnalyVideoResult.MatchResult.videoMatchs)
  return &videomatchs_;
}

// -------------------------------------------------------------------

// IndVASAnalyVideoResult

// optional uint32 deviceid = 1;
inline bool IndVASAnalyVideoResult::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndVASAnalyVideoResult::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndVASAnalyVideoResult::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndVASAnalyVideoResult::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndVASAnalyVideoResult::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.deviceid)
  return deviceid_;
}
inline void IndVASAnalyVideoResult::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.deviceid)
}

// optional string token = 2;
inline bool IndVASAnalyVideoResult::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndVASAnalyVideoResult::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndVASAnalyVideoResult::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndVASAnalyVideoResult::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndVASAnalyVideoResult::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.token)
  return *token_;
}
inline void IndVASAnalyVideoResult::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.token)
}
inline void IndVASAnalyVideoResult::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndVASAnalyVideoResult.token)
}
inline void IndVASAnalyVideoResult::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndVASAnalyVideoResult.token)
}
inline ::std::string* IndVASAnalyVideoResult::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASAnalyVideoResult.token)
  return token_;
}
inline ::std::string* IndVASAnalyVideoResult::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndVASAnalyVideoResult::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndVASAnalyVideoResult.token)
}

// optional uint64 confid = 3;
inline bool IndVASAnalyVideoResult::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndVASAnalyVideoResult::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndVASAnalyVideoResult::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndVASAnalyVideoResult::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 IndVASAnalyVideoResult::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.confid)
  return confid_;
}
inline void IndVASAnalyVideoResult::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.confid)
}

// optional uint64 confreportid = 4;
inline bool IndVASAnalyVideoResult::has_confreportid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndVASAnalyVideoResult::set_has_confreportid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndVASAnalyVideoResult::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndVASAnalyVideoResult::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 IndVASAnalyVideoResult::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.confreportid)
  return confreportid_;
}
inline void IndVASAnalyVideoResult::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndVASAnalyVideoResult.confreportid)
}

// repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
inline int IndVASAnalyVideoResult::matchresults_size() const {
  return matchresults_.size();
}
inline void IndVASAnalyVideoResult::clear_matchresults() {
  matchresults_.Clear();
}
inline const ::SRMsgs::IndVASAnalyVideoResult_MatchResult& IndVASAnalyVideoResult::matchresults(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndVASAnalyVideoResult.matchresults)
  return matchresults_.Get(index);
}
inline ::SRMsgs::IndVASAnalyVideoResult_MatchResult* IndVASAnalyVideoResult::mutable_matchresults(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndVASAnalyVideoResult.matchresults)
  return matchresults_.Mutable(index);
}
inline ::SRMsgs::IndVASAnalyVideoResult_MatchResult* IndVASAnalyVideoResult::add_matchresults() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndVASAnalyVideoResult.matchresults)
  return matchresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_MatchResult >&
IndVASAnalyVideoResult::matchresults() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndVASAnalyVideoResult.matchresults)
  return matchresults_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndVASAnalyVideoResult_MatchResult >*
IndVASAnalyVideoResult::mutable_matchresults() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndVASAnalyVideoResult.matchresults)
  return &matchresults_;
}

// -------------------------------------------------------------------

// RspConfInfoToMC_AgcSetting

// optional bool agc_enable = 1;
inline bool RspConfInfoToMC_AgcSetting::has_agc_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_AgcSetting::set_has_agc_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_AgcSetting::clear_has_agc_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_AgcSetting::clear_agc_enable() {
  agc_enable_ = false;
  clear_has_agc_enable();
}
inline bool RspConfInfoToMC_AgcSetting::agc_enable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AgcSetting.agc_enable)
  return agc_enable_;
}
inline void RspConfInfoToMC_AgcSetting::set_agc_enable(bool value) {
  set_has_agc_enable();
  agc_enable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AgcSetting.agc_enable)
}

// optional int32 target_level_dbfs = 2;
inline bool RspConfInfoToMC_AgcSetting::has_target_level_dbfs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_AgcSetting::set_has_target_level_dbfs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_AgcSetting::clear_has_target_level_dbfs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_AgcSetting::clear_target_level_dbfs() {
  target_level_dbfs_ = 0;
  clear_has_target_level_dbfs();
}
inline ::google::protobuf::int32 RspConfInfoToMC_AgcSetting::target_level_dbfs() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AgcSetting.target_level_dbfs)
  return target_level_dbfs_;
}
inline void RspConfInfoToMC_AgcSetting::set_target_level_dbfs(::google::protobuf::int32 value) {
  set_has_target_level_dbfs();
  target_level_dbfs_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AgcSetting.target_level_dbfs)
}

// optional int32 compression_gain_db = 3;
inline bool RspConfInfoToMC_AgcSetting::has_compression_gain_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfInfoToMC_AgcSetting::set_has_compression_gain_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfInfoToMC_AgcSetting::clear_has_compression_gain_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfInfoToMC_AgcSetting::clear_compression_gain_db() {
  compression_gain_db_ = 0;
  clear_has_compression_gain_db();
}
inline ::google::protobuf::int32 RspConfInfoToMC_AgcSetting::compression_gain_db() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AgcSetting.compression_gain_db)
  return compression_gain_db_;
}
inline void RspConfInfoToMC_AgcSetting::set_compression_gain_db(::google::protobuf::int32 value) {
  set_has_compression_gain_db();
  compression_gain_db_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AgcSetting.compression_gain_db)
}

// optional bool limiter_enable = 4;
inline bool RspConfInfoToMC_AgcSetting::has_limiter_enable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfInfoToMC_AgcSetting::set_has_limiter_enable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfInfoToMC_AgcSetting::clear_has_limiter_enable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfInfoToMC_AgcSetting::clear_limiter_enable() {
  limiter_enable_ = false;
  clear_has_limiter_enable();
}
inline bool RspConfInfoToMC_AgcSetting::limiter_enable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AgcSetting.limiter_enable)
  return limiter_enable_;
}
inline void RspConfInfoToMC_AgcSetting::set_limiter_enable(bool value) {
  set_has_limiter_enable();
  limiter_enable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AgcSetting.limiter_enable)
}

// -------------------------------------------------------------------

// RspConfInfoToMC_Confcfg

// optional uint32 max_audiomix_num = 1;
inline bool RspConfInfoToMC_Confcfg::has_max_audiomix_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_max_audiomix_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_max_audiomix_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_Confcfg::clear_max_audiomix_num() {
  max_audiomix_num_ = 0u;
  clear_has_max_audiomix_num();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::max_audiomix_num() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.max_audiomix_num)
  return max_audiomix_num_;
}
inline void RspConfInfoToMC_Confcfg::set_max_audiomix_num(::google::protobuf::uint32 value) {
  set_has_max_audiomix_num();
  max_audiomix_num_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.max_audiomix_num)
}

// optional uint32 useVideoMixer = 2;
inline bool RspConfInfoToMC_Confcfg::has_usevideomixer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_usevideomixer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_usevideomixer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_Confcfg::clear_usevideomixer() {
  usevideomixer_ = 0u;
  clear_has_usevideomixer();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::usevideomixer() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.useVideoMixer)
  return usevideomixer_;
}
inline void RspConfInfoToMC_Confcfg::set_usevideomixer(::google::protobuf::uint32 value) {
  set_has_usevideomixer();
  usevideomixer_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.useVideoMixer)
}

// optional uint32 useAudioMixer = 3;
inline bool RspConfInfoToMC_Confcfg::has_useaudiomixer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_useaudiomixer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_useaudiomixer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfInfoToMC_Confcfg::clear_useaudiomixer() {
  useaudiomixer_ = 0u;
  clear_has_useaudiomixer();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::useaudiomixer() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.useAudioMixer)
  return useaudiomixer_;
}
inline void RspConfInfoToMC_Confcfg::set_useaudiomixer(::google::protobuf::uint32 value) {
  set_has_useaudiomixer();
  useaudiomixer_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.useAudioMixer)
}

// optional uint32 mixing_frequency = 4;
inline bool RspConfInfoToMC_Confcfg::has_mixing_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_mixing_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_mixing_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfInfoToMC_Confcfg::clear_mixing_frequency() {
  mixing_frequency_ = 0u;
  clear_has_mixing_frequency();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::mixing_frequency() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.mixing_frequency)
  return mixing_frequency_;
}
inline void RspConfInfoToMC_Confcfg::set_mixing_frequency(::google::protobuf::uint32 value) {
  set_has_mixing_frequency();
  mixing_frequency_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.mixing_frequency)
}

// optional uint32 max_encoder_num = 5;
inline bool RspConfInfoToMC_Confcfg::has_max_encoder_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_max_encoder_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_max_encoder_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfInfoToMC_Confcfg::clear_max_encoder_num() {
  max_encoder_num_ = 0u;
  clear_has_max_encoder_num();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::max_encoder_num() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.max_encoder_num)
  return max_encoder_num_;
}
inline void RspConfInfoToMC_Confcfg::set_max_encoder_num(::google::protobuf::uint32 value) {
  set_has_max_encoder_num();
  max_encoder_num_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.max_encoder_num)
}

// optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
inline bool RspConfInfoToMC_Confcfg::has_agc_setting() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_agc_setting() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_agc_setting() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfInfoToMC_Confcfg::clear_agc_setting() {
  if (agc_setting_ != NULL) agc_setting_->::SRMsgs::RspConfInfoToMC_AgcSetting::Clear();
  clear_has_agc_setting();
}
inline const ::SRMsgs::RspConfInfoToMC_AgcSetting& RspConfInfoToMC_Confcfg::agc_setting() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.agc_setting)
  return agc_setting_ != NULL ? *agc_setting_ : *default_instance_->agc_setting_;
}
inline ::SRMsgs::RspConfInfoToMC_AgcSetting* RspConfInfoToMC_Confcfg::mutable_agc_setting() {
  set_has_agc_setting();
  if (agc_setting_ == NULL) agc_setting_ = new ::SRMsgs::RspConfInfoToMC_AgcSetting;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.Confcfg.agc_setting)
  return agc_setting_;
}
inline ::SRMsgs::RspConfInfoToMC_AgcSetting* RspConfInfoToMC_Confcfg::release_agc_setting() {
  clear_has_agc_setting();
  ::SRMsgs::RspConfInfoToMC_AgcSetting* temp = agc_setting_;
  agc_setting_ = NULL;
  return temp;
}
inline void RspConfInfoToMC_Confcfg::set_allocated_agc_setting(::SRMsgs::RspConfInfoToMC_AgcSetting* agc_setting) {
  delete agc_setting_;
  agc_setting_ = agc_setting;
  if (agc_setting) {
    set_has_agc_setting();
  } else {
    clear_has_agc_setting();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.Confcfg.agc_setting)
}

// optional uint32 videosize = 7;
inline bool RspConfInfoToMC_Confcfg::has_videosize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspConfInfoToMC_Confcfg::set_has_videosize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspConfInfoToMC_Confcfg::clear_has_videosize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspConfInfoToMC_Confcfg::clear_videosize() {
  videosize_ = 0u;
  clear_has_videosize();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_Confcfg::videosize() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.Confcfg.videosize)
  return videosize_;
}
inline void RspConfInfoToMC_Confcfg::set_videosize(::google::protobuf::uint32 value) {
  set_has_videosize();
  videosize_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.Confcfg.videosize)
}

// -------------------------------------------------------------------

// RspConfInfoToMC_ParticipantInfo

// optional uint32 psuid = 1;
inline bool RspConfInfoToMC_ParticipantInfo::has_psuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_psuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_psuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_psuid() {
  psuid_ = 0u;
  clear_has_psuid();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::psuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.psuid)
  return psuid_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_psuid(::google::protobuf::uint32 value) {
  set_has_psuid();
  psuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.psuid)
}

// optional string nickname = 2;
inline bool RspConfInfoToMC_ParticipantInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RspConfInfoToMC_ParticipantInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
  return *nickname_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
}
inline void RspConfInfoToMC_ParticipantInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
}
inline void RspConfInfoToMC_ParticipantInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
  return nickname_;
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_ParticipantInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.ParticipantInfo.nickname)
}

// optional string ip = 3;
inline bool RspConfInfoToMC_ParticipantInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspConfInfoToMC_ParticipantInfo::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
  return *ip_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
}
inline void RspConfInfoToMC_ParticipantInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
}
inline void RspConfInfoToMC_ParticipantInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
  return ip_;
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_ParticipantInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.ParticipantInfo.ip)
}

// optional uint32 protocoltype = 4;
inline bool RspConfInfoToMC_ParticipantInfo::has_protocoltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_protocoltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_protocoltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_protocoltype() {
  protocoltype_ = 0u;
  clear_has_protocoltype();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::protocoltype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.protocoltype)
  return protocoltype_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_protocoltype(::google::protobuf::uint32 value) {
  set_has_protocoltype();
  protocoltype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.protocoltype)
}

// optional uint32 bandwidth = 5;
inline bool RspConfInfoToMC_ParticipantInfo::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_bandwidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_bandwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_bandwidth() {
  bandwidth_ = 0u;
  clear_has_bandwidth();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::bandwidth() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.bandwidth)
  return bandwidth_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_bandwidth(::google::protobuf::uint32 value) {
  set_has_bandwidth();
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.bandwidth)
}

// optional uint32 usertype = 6;
inline bool RspConfInfoToMC_ParticipantInfo::has_usertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_usertype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_usertype() {
  usertype_ = 0u;
  clear_has_usertype();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::usertype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.usertype)
  return usertype_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_usertype(::google::protobuf::uint32 value) {
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.usertype)
}

// optional uint32 devicetype = 7;
inline bool RspConfInfoToMC_ParticipantInfo::has_devicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_devicetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_devicetype() {
  devicetype_ = 0u;
  clear_has_devicetype();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::devicetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicetype)
  return devicetype_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_devicetype(::google::protobuf::uint32 value) {
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicetype)
}

// optional string devicecode = 8;
inline bool RspConfInfoToMC_ParticipantInfo::has_devicecode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_devicecode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_devicecode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_devicecode() {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_->clear();
  }
  clear_has_devicecode();
}
inline const ::std::string& RspConfInfoToMC_ParticipantInfo::devicecode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
  return *devicecode_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_devicecode(const ::std::string& value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
}
inline void RspConfInfoToMC_ParticipantInfo::set_devicecode(const char* value) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
}
inline void RspConfInfoToMC_ParticipantInfo::set_devicecode(const char* value, size_t size) {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  devicecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::mutable_devicecode() {
  set_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
  return devicecode_;
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::release_devicecode() {
  clear_has_devicecode();
  if (devicecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicecode_;
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_ParticipantInfo::set_allocated_devicecode(::std::string* devicecode) {
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (devicecode) {
    set_has_devicecode();
    devicecode_ = devicecode;
  } else {
    clear_has_devicecode();
    devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.ParticipantInfo.devicecode)
}

// optional string shortname = 9;
inline bool RspConfInfoToMC_ParticipantInfo::has_shortname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_shortname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& RspConfInfoToMC_ParticipantInfo::shortname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
  return *shortname_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
}
inline void RspConfInfoToMC_ParticipantInfo::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
}
inline void RspConfInfoToMC_ParticipantInfo::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
  return shortname_;
}
inline ::std::string* RspConfInfoToMC_ParticipantInfo::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_ParticipantInfo::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.ParticipantInfo.shortname)
}

// optional uint32 orderno = 10;
inline bool RspConfInfoToMC_ParticipantInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspConfInfoToMC_ParticipantInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspConfInfoToMC_ParticipantInfo::clear_orderno() {
  orderno_ = 0u;
  clear_has_orderno();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_ParticipantInfo::orderno() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ParticipantInfo.orderno)
  return orderno_;
}
inline void RspConfInfoToMC_ParticipantInfo::set_orderno(::google::protobuf::uint32 value) {
  set_has_orderno();
  orderno_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ParticipantInfo.orderno)
}

// -------------------------------------------------------------------

// RspConfInfoToMC_LiveSetting

// optional string chairman = 1;
inline bool RspConfInfoToMC_LiveSetting::has_chairman() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_chairman() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_chairman() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_LiveSetting::clear_chairman() {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_->clear();
  }
  clear_has_chairman();
}
inline const ::std::string& RspConfInfoToMC_LiveSetting::chairman() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
  return *chairman_;
}
inline void RspConfInfoToMC_LiveSetting::set_chairman(const ::std::string& value) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
}
inline void RspConfInfoToMC_LiveSetting::set_chairman(const char* value) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
}
inline void RspConfInfoToMC_LiveSetting::set_chairman(const char* value, size_t size) {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  chairman_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
}
inline ::std::string* RspConfInfoToMC_LiveSetting::mutable_chairman() {
  set_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chairman_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
  return chairman_;
}
inline ::std::string* RspConfInfoToMC_LiveSetting::release_chairman() {
  clear_has_chairman();
  if (chairman_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chairman_;
    chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_LiveSetting::set_allocated_chairman(::std::string* chairman) {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairman_;
  }
  if (chairman) {
    set_has_chairman();
    chairman_ = chairman;
  } else {
    clear_has_chairman();
    chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.LiveSetting.chairman)
}

// optional string subject = 2;
inline bool RspConfInfoToMC_LiveSetting::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_LiveSetting::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& RspConfInfoToMC_LiveSetting::subject() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
  return *subject_;
}
inline void RspConfInfoToMC_LiveSetting::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
}
inline void RspConfInfoToMC_LiveSetting::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
}
inline void RspConfInfoToMC_LiveSetting::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
}
inline ::std::string* RspConfInfoToMC_LiveSetting::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
  return subject_;
}
inline ::std::string* RspConfInfoToMC_LiveSetting::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_LiveSetting::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.LiveSetting.subject)
}

// optional string abstract = 3;
inline bool RspConfInfoToMC_LiveSetting::has_abstract() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_abstract() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_abstract() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfInfoToMC_LiveSetting::clear_abstract() {
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_->clear();
  }
  clear_has_abstract();
}
inline const ::std::string& RspConfInfoToMC_LiveSetting::abstract() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
  return *abstract_;
}
inline void RspConfInfoToMC_LiveSetting::set_abstract(const ::std::string& value) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
}
inline void RspConfInfoToMC_LiveSetting::set_abstract(const char* value) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
}
inline void RspConfInfoToMC_LiveSetting::set_abstract(const char* value, size_t size) {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  abstract_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
}
inline ::std::string* RspConfInfoToMC_LiveSetting::mutable_abstract() {
  set_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abstract_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
  return abstract_;
}
inline ::std::string* RspConfInfoToMC_LiveSetting::release_abstract() {
  clear_has_abstract();
  if (abstract_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abstract_;
    abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_LiveSetting::set_allocated_abstract(::std::string* abstract) {
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abstract_;
  }
  if (abstract) {
    set_has_abstract();
    abstract_ = abstract;
  } else {
    clear_has_abstract();
    abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.LiveSetting.abstract)
}

// optional uint32 ispublic = 4;
inline bool RspConfInfoToMC_LiveSetting::has_ispublic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_ispublic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_ispublic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfInfoToMC_LiveSetting::clear_ispublic() {
  ispublic_ = 0u;
  clear_has_ispublic();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_LiveSetting::ispublic() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.ispublic)
  return ispublic_;
}
inline void RspConfInfoToMC_LiveSetting::set_ispublic(::google::protobuf::uint32 value) {
  set_has_ispublic();
  ispublic_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.ispublic)
}

// optional string livepwd = 5;
inline bool RspConfInfoToMC_LiveSetting::has_livepwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_livepwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_livepwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfInfoToMC_LiveSetting::clear_livepwd() {
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_->clear();
  }
  clear_has_livepwd();
}
inline const ::std::string& RspConfInfoToMC_LiveSetting::livepwd() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
  return *livepwd_;
}
inline void RspConfInfoToMC_LiveSetting::set_livepwd(const ::std::string& value) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
}
inline void RspConfInfoToMC_LiveSetting::set_livepwd(const char* value) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
}
inline void RspConfInfoToMC_LiveSetting::set_livepwd(const char* value, size_t size) {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  livepwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
}
inline ::std::string* RspConfInfoToMC_LiveSetting::mutable_livepwd() {
  set_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livepwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
  return livepwd_;
}
inline ::std::string* RspConfInfoToMC_LiveSetting::release_livepwd() {
  clear_has_livepwd();
  if (livepwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livepwd_;
    livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_LiveSetting::set_allocated_livepwd(::std::string* livepwd) {
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepwd_;
  }
  if (livepwd) {
    set_has_livepwd();
    livepwd_ = livepwd;
  } else {
    clear_has_livepwd();
    livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.LiveSetting.livepwd)
}

// optional uint32 isuserec = 6;
inline bool RspConfInfoToMC_LiveSetting::has_isuserec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfInfoToMC_LiveSetting::set_has_isuserec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfInfoToMC_LiveSetting::clear_has_isuserec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfInfoToMC_LiveSetting::clear_isuserec() {
  isuserec_ = 0u;
  clear_has_isuserec();
}
inline ::google::protobuf::uint32 RspConfInfoToMC_LiveSetting::isuserec() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.LiveSetting.isuserec)
  return isuserec_;
}
inline void RspConfInfoToMC_LiveSetting::set_isuserec(::google::protobuf::uint32 value) {
  set_has_isuserec();
  isuserec_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.LiveSetting.isuserec)
}

// -------------------------------------------------------------------

// RspConfInfoToMC_RollCallInfo

// optional uint64 rcid = 1;
inline bool RspConfInfoToMC_RollCallInfo::has_rcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_RollCallInfo::set_has_rcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_RollCallInfo::clear_has_rcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_RollCallInfo::clear_rcid() {
  rcid_ = GOOGLE_ULONGLONG(0);
  clear_has_rcid();
}
inline ::google::protobuf::uint64 RspConfInfoToMC_RollCallInfo::rcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.RollCallInfo.rcid)
  return rcid_;
}
inline void RspConfInfoToMC_RollCallInfo::set_rcid(::google::protobuf::uint64 value) {
  set_has_rcid();
  rcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.RollCallInfo.rcid)
}

// optional string rcname = 2;
inline bool RspConfInfoToMC_RollCallInfo::has_rcname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_RollCallInfo::set_has_rcname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_RollCallInfo::clear_has_rcname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_RollCallInfo::clear_rcname() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_->clear();
  }
  clear_has_rcname();
}
inline const ::std::string& RspConfInfoToMC_RollCallInfo::rcname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
  return *rcname_;
}
inline void RspConfInfoToMC_RollCallInfo::set_rcname(const ::std::string& value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
}
inline void RspConfInfoToMC_RollCallInfo::set_rcname(const char* value) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
}
inline void RspConfInfoToMC_RollCallInfo::set_rcname(const char* value, size_t size) {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  rcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
}
inline ::std::string* RspConfInfoToMC_RollCallInfo::mutable_rcname() {
  set_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rcname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
  return rcname_;
}
inline ::std::string* RspConfInfoToMC_RollCallInfo::release_rcname() {
  clear_has_rcname();
  if (rcname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rcname_;
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_RollCallInfo::set_allocated_rcname(::std::string* rcname) {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (rcname) {
    set_has_rcname();
    rcname_ = rcname;
  } else {
    clear_has_rcname();
    rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.RollCallInfo.rcname)
}

// repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
inline int RspConfInfoToMC_RollCallInfo::parts_size() const {
  return parts_.size();
}
inline void RspConfInfoToMC_RollCallInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& RspConfInfoToMC_RollCallInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.RollCallInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_RollCallInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.RollCallInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_RollCallInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfInfoToMC.RollCallInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
RspConfInfoToMC_RollCallInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfInfoToMC.RollCallInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
RspConfInfoToMC_RollCallInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfInfoToMC.RollCallInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// RspConfInfoToMC_AutoPollInfo

// optional uint64 apid = 1;
inline bool RspConfInfoToMC_AutoPollInfo::has_apid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC_AutoPollInfo::set_has_apid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC_AutoPollInfo::clear_has_apid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC_AutoPollInfo::clear_apid() {
  apid_ = GOOGLE_ULONGLONG(0);
  clear_has_apid();
}
inline ::google::protobuf::uint64 RspConfInfoToMC_AutoPollInfo::apid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AutoPollInfo.apid)
  return apid_;
}
inline void RspConfInfoToMC_AutoPollInfo::set_apid(::google::protobuf::uint64 value) {
  set_has_apid();
  apid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AutoPollInfo.apid)
}

// optional string apname = 2;
inline bool RspConfInfoToMC_AutoPollInfo::has_apname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC_AutoPollInfo::set_has_apname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC_AutoPollInfo::clear_has_apname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC_AutoPollInfo::clear_apname() {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_->clear();
  }
  clear_has_apname();
}
inline const ::std::string& RspConfInfoToMC_AutoPollInfo::apname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
  return *apname_;
}
inline void RspConfInfoToMC_AutoPollInfo::set_apname(const ::std::string& value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
}
inline void RspConfInfoToMC_AutoPollInfo::set_apname(const char* value) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
}
inline void RspConfInfoToMC_AutoPollInfo::set_apname(const char* value, size_t size) {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  apname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
}
inline ::std::string* RspConfInfoToMC_AutoPollInfo::mutable_apname() {
  set_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
  return apname_;
}
inline ::std::string* RspConfInfoToMC_AutoPollInfo::release_apname() {
  clear_has_apname();
  if (apname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apname_;
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC_AutoPollInfo::set_allocated_apname(::std::string* apname) {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apname_;
  }
  if (apname) {
    set_has_apname();
    apname_ = apname;
  } else {
    clear_has_apname();
    apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.AutoPollInfo.apname)
}

// repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
inline int RspConfInfoToMC_AutoPollInfo::parts_size() const {
  return parts_.size();
}
inline void RspConfInfoToMC_AutoPollInfo::clear_parts() {
  parts_.Clear();
}
inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& RspConfInfoToMC_AutoPollInfo::parts(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.AutoPollInfo.parts)
  return parts_.Get(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_AutoPollInfo::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.AutoPollInfo.parts)
  return parts_.Mutable(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_AutoPollInfo::add_parts() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfInfoToMC.AutoPollInfo.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
RspConfInfoToMC_AutoPollInfo::parts() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfInfoToMC.AutoPollInfo.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
RspConfInfoToMC_AutoPollInfo::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfInfoToMC.AutoPollInfo.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// RspConfInfoToMC

// optional bool isok = 1;
inline bool RspConfInfoToMC::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspConfInfoToMC::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspConfInfoToMC::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspConfInfoToMC::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspConfInfoToMC::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.isok)
  return isok_;
}
inline void RspConfInfoToMC::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.isok)
}

// optional uint32 suid = 2;
inline bool RspConfInfoToMC::has_suid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspConfInfoToMC::set_has_suid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspConfInfoToMC::clear_has_suid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspConfInfoToMC::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.suid)
  return suid_;
}
inline void RspConfInfoToMC::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.suid)
}

// optional uint64 confid = 3;
inline bool RspConfInfoToMC::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspConfInfoToMC::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspConfInfoToMC::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspConfInfoToMC::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspConfInfoToMC::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confid)
  return confid_;
}
inline void RspConfInfoToMC::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confid)
}

// optional string confpwd = 4;
inline bool RspConfInfoToMC::has_confpwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspConfInfoToMC::set_has_confpwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspConfInfoToMC::clear_has_confpwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspConfInfoToMC::clear_confpwd() {
  if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confpwd_->clear();
  }
  clear_has_confpwd();
}
inline const ::std::string& RspConfInfoToMC::confpwd() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confpwd)
  return *confpwd_;
}
inline void RspConfInfoToMC::set_confpwd(const ::std::string& value) {
  set_has_confpwd();
  if (confpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confpwd_ = new ::std::string;
  }
  confpwd_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confpwd)
}
inline void RspConfInfoToMC::set_confpwd(const char* value) {
  set_has_confpwd();
  if (confpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confpwd_ = new ::std::string;
  }
  confpwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.confpwd)
}
inline void RspConfInfoToMC::set_confpwd(const char* value, size_t size) {
  set_has_confpwd();
  if (confpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confpwd_ = new ::std::string;
  }
  confpwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.confpwd)
}
inline ::std::string* RspConfInfoToMC::mutable_confpwd() {
  set_has_confpwd();
  if (confpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confpwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.confpwd)
  return confpwd_;
}
inline ::std::string* RspConfInfoToMC::release_confpwd() {
  clear_has_confpwd();
  if (confpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = confpwd_;
    confpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_confpwd(::std::string* confpwd) {
  if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confpwd_;
  }
  if (confpwd) {
    set_has_confpwd();
    confpwd_ = confpwd;
  } else {
    clear_has_confpwd();
    confpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.confpwd)
}

// optional string recvpwd = 5;
inline bool RspConfInfoToMC::has_recvpwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspConfInfoToMC::set_has_recvpwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspConfInfoToMC::clear_has_recvpwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspConfInfoToMC::clear_recvpwd() {
  if (recvpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvpwd_->clear();
  }
  clear_has_recvpwd();
}
inline const ::std::string& RspConfInfoToMC::recvpwd() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.recvpwd)
  return *recvpwd_;
}
inline void RspConfInfoToMC::set_recvpwd(const ::std::string& value) {
  set_has_recvpwd();
  if (recvpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvpwd_ = new ::std::string;
  }
  recvpwd_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.recvpwd)
}
inline void RspConfInfoToMC::set_recvpwd(const char* value) {
  set_has_recvpwd();
  if (recvpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvpwd_ = new ::std::string;
  }
  recvpwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.recvpwd)
}
inline void RspConfInfoToMC::set_recvpwd(const char* value, size_t size) {
  set_has_recvpwd();
  if (recvpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvpwd_ = new ::std::string;
  }
  recvpwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.recvpwd)
}
inline ::std::string* RspConfInfoToMC::mutable_recvpwd() {
  set_has_recvpwd();
  if (recvpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvpwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.recvpwd)
  return recvpwd_;
}
inline ::std::string* RspConfInfoToMC::release_recvpwd() {
  clear_has_recvpwd();
  if (recvpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recvpwd_;
    recvpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_recvpwd(::std::string* recvpwd) {
  if (recvpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvpwd_;
  }
  if (recvpwd) {
    set_has_recvpwd();
    recvpwd_ = recvpwd;
  } else {
    clear_has_recvpwd();
    recvpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.recvpwd)
}

// optional string begintime = 6;
inline bool RspConfInfoToMC::has_begintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspConfInfoToMC::set_has_begintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspConfInfoToMC::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspConfInfoToMC::clear_begintime() {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_->clear();
  }
  clear_has_begintime();
}
inline const ::std::string& RspConfInfoToMC::begintime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.begintime)
  return *begintime_;
}
inline void RspConfInfoToMC::set_begintime(const ::std::string& value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.begintime)
}
inline void RspConfInfoToMC::set_begintime(const char* value) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.begintime)
}
inline void RspConfInfoToMC::set_begintime(const char* value, size_t size) {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  begintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.begintime)
}
inline ::std::string* RspConfInfoToMC::mutable_begintime() {
  set_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.begintime)
  return begintime_;
}
inline ::std::string* RspConfInfoToMC::release_begintime() {
  clear_has_begintime();
  if (begintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime_;
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_begintime(::std::string* begintime) {
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (begintime) {
    set_has_begintime();
    begintime_ = begintime;
  } else {
    clear_has_begintime();
    begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.begintime)
}

// optional string endtime = 7;
inline bool RspConfInfoToMC::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspConfInfoToMC::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspConfInfoToMC::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspConfInfoToMC::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& RspConfInfoToMC::endtime() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.endtime)
  return *endtime_;
}
inline void RspConfInfoToMC::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.endtime)
}
inline void RspConfInfoToMC::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.endtime)
}
inline void RspConfInfoToMC::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.endtime)
}
inline ::std::string* RspConfInfoToMC::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.endtime)
  return endtime_;
}
inline ::std::string* RspConfInfoToMC::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.endtime)
}

// optional bool islimited = 8;
inline bool RspConfInfoToMC::has_islimited() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspConfInfoToMC::set_has_islimited() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspConfInfoToMC::clear_has_islimited() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspConfInfoToMC::clear_islimited() {
  islimited_ = false;
  clear_has_islimited();
}
inline bool RspConfInfoToMC::islimited() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.islimited)
  return islimited_;
}
inline void RspConfInfoToMC::set_islimited(bool value) {
  set_has_islimited();
  islimited_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.islimited)
}

// optional string subject = 9;
inline bool RspConfInfoToMC::has_subject() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspConfInfoToMC::set_has_subject() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspConfInfoToMC::clear_has_subject() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspConfInfoToMC::clear_subject() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& RspConfInfoToMC::subject() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.subject)
  return *subject_;
}
inline void RspConfInfoToMC::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.subject)
}
inline void RspConfInfoToMC::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.subject)
}
inline void RspConfInfoToMC::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.subject)
}
inline ::std::string* RspConfInfoToMC::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subject_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.subject)
  return subject_;
}
inline ::std::string* RspConfInfoToMC::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.subject)
}

// optional uint32 conftype = 10;
inline bool RspConfInfoToMC::has_conftype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspConfInfoToMC::set_has_conftype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspConfInfoToMC::clear_has_conftype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspConfInfoToMC::clear_conftype() {
  conftype_ = 0u;
  clear_has_conftype();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::conftype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.conftype)
  return conftype_;
}
inline void RspConfInfoToMC::set_conftype(::google::protobuf::uint32 value) {
  set_has_conftype();
  conftype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.conftype)
}

// optional uint32 confstartmethod = 11;
inline bool RspConfInfoToMC::has_confstartmethod() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspConfInfoToMC::set_has_confstartmethod() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspConfInfoToMC::clear_has_confstartmethod() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspConfInfoToMC::clear_confstartmethod() {
  confstartmethod_ = 0u;
  clear_has_confstartmethod();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::confstartmethod() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confstartmethod)
  return confstartmethod_;
}
inline void RspConfInfoToMC::set_confstartmethod(::google::protobuf::uint32 value) {
  set_has_confstartmethod();
  confstartmethod_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confstartmethod)
}

// optional uint32 mutetype = 12;
inline bool RspConfInfoToMC::has_mutetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspConfInfoToMC::set_has_mutetype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspConfInfoToMC::clear_has_mutetype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspConfInfoToMC::clear_mutetype() {
  mutetype_ = 0u;
  clear_has_mutetype();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::mutetype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.mutetype)
  return mutetype_;
}
inline void RspConfInfoToMC::set_mutetype(::google::protobuf::uint32 value) {
  set_has_mutetype();
  mutetype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.mutetype)
}

// optional uint32 ternums = 13;
inline bool RspConfInfoToMC::has_ternums() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspConfInfoToMC::set_has_ternums() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspConfInfoToMC::clear_has_ternums() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspConfInfoToMC::clear_ternums() {
  ternums_ = 0u;
  clear_has_ternums();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::ternums() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.ternums)
  return ternums_;
}
inline void RspConfInfoToMC::set_ternums(::google::protobuf::uint32 value) {
  set_has_ternums();
  ternums_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.ternums)
}

// optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
inline bool RspConfInfoToMC::has_confcfg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspConfInfoToMC::set_has_confcfg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspConfInfoToMC::clear_has_confcfg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspConfInfoToMC::clear_confcfg() {
  if (confcfg_ != NULL) confcfg_->::SRMsgs::RspConfInfoToMC_Confcfg::Clear();
  clear_has_confcfg();
}
inline const ::SRMsgs::RspConfInfoToMC_Confcfg& RspConfInfoToMC::confcfg() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confcfg)
  return confcfg_ != NULL ? *confcfg_ : *default_instance_->confcfg_;
}
inline ::SRMsgs::RspConfInfoToMC_Confcfg* RspConfInfoToMC::mutable_confcfg() {
  set_has_confcfg();
  if (confcfg_ == NULL) confcfg_ = new ::SRMsgs::RspConfInfoToMC_Confcfg;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.confcfg)
  return confcfg_;
}
inline ::SRMsgs::RspConfInfoToMC_Confcfg* RspConfInfoToMC::release_confcfg() {
  clear_has_confcfg();
  ::SRMsgs::RspConfInfoToMC_Confcfg* temp = confcfg_;
  confcfg_ = NULL;
  return temp;
}
inline void RspConfInfoToMC::set_allocated_confcfg(::SRMsgs::RspConfInfoToMC_Confcfg* confcfg) {
  delete confcfg_;
  confcfg_ = confcfg;
  if (confcfg) {
    set_has_confcfg();
  } else {
    clear_has_confcfg();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.confcfg)
}

// optional string failurereason = 15;
inline bool RspConfInfoToMC::has_failurereason() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RspConfInfoToMC::set_has_failurereason() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RspConfInfoToMC::clear_has_failurereason() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RspConfInfoToMC::clear_failurereason() {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_->clear();
  }
  clear_has_failurereason();
}
inline const ::std::string& RspConfInfoToMC::failurereason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.failurereason)
  return *failurereason_;
}
inline void RspConfInfoToMC::set_failurereason(const ::std::string& value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.failurereason)
}
inline void RspConfInfoToMC::set_failurereason(const char* value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.failurereason)
}
inline void RspConfInfoToMC::set_failurereason(const char* value, size_t size) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.failurereason)
}
inline ::std::string* RspConfInfoToMC::mutable_failurereason() {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.failurereason)
  return failurereason_;
}
inline ::std::string* RspConfInfoToMC::release_failurereason() {
  clear_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failurereason_;
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_failurereason(::std::string* failurereason) {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (failurereason) {
    set_has_failurereason();
    failurereason_ = failurereason;
  } else {
    clear_has_failurereason();
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.failurereason)
}

// repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
inline int RspConfInfoToMC::participants_size() const {
  return participants_.size();
}
inline void RspConfInfoToMC::clear_participants() {
  participants_.Clear();
}
inline const ::SRMsgs::RspConfInfoToMC_ParticipantInfo& RspConfInfoToMC::participants(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.participants)
  return participants_.Get(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.participants)
  return participants_.Mutable(index);
}
inline ::SRMsgs::RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC::add_participants() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfInfoToMC.participants)
  return participants_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >&
RspConfInfoToMC::participants() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfInfoToMC.participants)
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_ParticipantInfo >*
RspConfInfoToMC::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfInfoToMC.participants)
  return &participants_;
}

// optional uint32 confctrlsuid = 17;
inline bool RspConfInfoToMC::has_confctrlsuid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RspConfInfoToMC::set_has_confctrlsuid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RspConfInfoToMC::clear_has_confctrlsuid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RspConfInfoToMC::clear_confctrlsuid() {
  confctrlsuid_ = 0u;
  clear_has_confctrlsuid();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::confctrlsuid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confctrlsuid)
  return confctrlsuid_;
}
inline void RspConfInfoToMC::set_confctrlsuid(::google::protobuf::uint32 value) {
  set_has_confctrlsuid();
  confctrlsuid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confctrlsuid)
}

// optional uint32 audioenable = 18;
inline bool RspConfInfoToMC::has_audioenable() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RspConfInfoToMC::set_has_audioenable() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RspConfInfoToMC::clear_has_audioenable() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RspConfInfoToMC::clear_audioenable() {
  audioenable_ = 0u;
  clear_has_audioenable();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::audioenable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.audioenable)
  return audioenable_;
}
inline void RspConfInfoToMC::set_audioenable(::google::protobuf::uint32 value) {
  set_has_audioenable();
  audioenable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.audioenable)
}

// optional uint32 videoenable = 19;
inline bool RspConfInfoToMC::has_videoenable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RspConfInfoToMC::set_has_videoenable() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RspConfInfoToMC::clear_has_videoenable() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RspConfInfoToMC::clear_videoenable() {
  videoenable_ = 0u;
  clear_has_videoenable();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::videoenable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.videoenable)
  return videoenable_;
}
inline void RspConfInfoToMC::set_videoenable(::google::protobuf::uint32 value) {
  set_has_videoenable();
  videoenable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.videoenable)
}

// optional string confname = 20;
inline bool RspConfInfoToMC::has_confname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RspConfInfoToMC::set_has_confname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RspConfInfoToMC::clear_has_confname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RspConfInfoToMC::clear_confname() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& RspConfInfoToMC::confname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confname)
  return *confname_;
}
inline void RspConfInfoToMC::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confname)
}
inline void RspConfInfoToMC::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspConfInfoToMC.confname)
}
inline void RspConfInfoToMC::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspConfInfoToMC.confname)
}
inline ::std::string* RspConfInfoToMC::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.confname)
  return confname_;
}
inline ::std::string* RspConfInfoToMC::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspConfInfoToMC::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.confname)
}

// optional uint32 encryptalg = 21;
inline bool RspConfInfoToMC::has_encryptalg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RspConfInfoToMC::set_has_encryptalg() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RspConfInfoToMC::clear_has_encryptalg() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RspConfInfoToMC::clear_encryptalg() {
  encryptalg_ = 0u;
  clear_has_encryptalg();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::encryptalg() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.encryptalg)
  return encryptalg_;
}
inline void RspConfInfoToMC::set_encryptalg(::google::protobuf::uint32 value) {
  set_has_encryptalg();
  encryptalg_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.encryptalg)
}

// optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
inline bool RspConfInfoToMC::has_livesetinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RspConfInfoToMC::set_has_livesetinfo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RspConfInfoToMC::clear_has_livesetinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RspConfInfoToMC::clear_livesetinfo() {
  if (livesetinfo_ != NULL) livesetinfo_->::SRMsgs::RspConfInfoToMC_LiveSetting::Clear();
  clear_has_livesetinfo();
}
inline const ::SRMsgs::RspConfInfoToMC_LiveSetting& RspConfInfoToMC::livesetinfo() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.livesetinfo)
  return livesetinfo_ != NULL ? *livesetinfo_ : *default_instance_->livesetinfo_;
}
inline ::SRMsgs::RspConfInfoToMC_LiveSetting* RspConfInfoToMC::mutable_livesetinfo() {
  set_has_livesetinfo();
  if (livesetinfo_ == NULL) livesetinfo_ = new ::SRMsgs::RspConfInfoToMC_LiveSetting;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.livesetinfo)
  return livesetinfo_;
}
inline ::SRMsgs::RspConfInfoToMC_LiveSetting* RspConfInfoToMC::release_livesetinfo() {
  clear_has_livesetinfo();
  ::SRMsgs::RspConfInfoToMC_LiveSetting* temp = livesetinfo_;
  livesetinfo_ = NULL;
  return temp;
}
inline void RspConfInfoToMC::set_allocated_livesetinfo(::SRMsgs::RspConfInfoToMC_LiveSetting* livesetinfo) {
  delete livesetinfo_;
  livesetinfo_ = livesetinfo;
  if (livesetinfo) {
    set_has_livesetinfo();
  } else {
    clear_has_livesetinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspConfInfoToMC.livesetinfo)
}

// optional uint32 autorec = 23;
inline bool RspConfInfoToMC::has_autorec() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RspConfInfoToMC::set_has_autorec() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RspConfInfoToMC::clear_has_autorec() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RspConfInfoToMC::clear_autorec() {
  autorec_ = 0u;
  clear_has_autorec();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::autorec() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.autorec)
  return autorec_;
}
inline void RspConfInfoToMC::set_autorec(::google::protobuf::uint32 value) {
  set_has_autorec();
  autorec_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.autorec)
}

// optional uint64 confreportid = 24;
inline bool RspConfInfoToMC::has_confreportid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RspConfInfoToMC::set_has_confreportid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RspConfInfoToMC::clear_has_confreportid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RspConfInfoToMC::clear_confreportid() {
  confreportid_ = GOOGLE_ULONGLONG(0);
  clear_has_confreportid();
}
inline ::google::protobuf::uint64 RspConfInfoToMC::confreportid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.confreportid)
  return confreportid_;
}
inline void RspConfInfoToMC::set_confreportid(::google::protobuf::uint64 value) {
  set_has_confreportid();
  confreportid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.confreportid)
}

// optional uint32 errorcode = 25;
inline bool RspConfInfoToMC::has_errorcode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RspConfInfoToMC::set_has_errorcode() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RspConfInfoToMC::clear_has_errorcode() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RspConfInfoToMC::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.errorcode)
  return errorcode_;
}
inline void RspConfInfoToMC::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.errorcode)
}

// repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
inline int RspConfInfoToMC::rollcalllist_size() const {
  return rollcalllist_.size();
}
inline void RspConfInfoToMC::clear_rollcalllist() {
  rollcalllist_.Clear();
}
inline const ::SRMsgs::RspConfInfoToMC_RollCallInfo& RspConfInfoToMC::rollcalllist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.rollcalllist)
  return rollcalllist_.Get(index);
}
inline ::SRMsgs::RspConfInfoToMC_RollCallInfo* RspConfInfoToMC::mutable_rollcalllist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.rollcalllist)
  return rollcalllist_.Mutable(index);
}
inline ::SRMsgs::RspConfInfoToMC_RollCallInfo* RspConfInfoToMC::add_rollcalllist() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfInfoToMC.rollcalllist)
  return rollcalllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_RollCallInfo >&
RspConfInfoToMC::rollcalllist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfInfoToMC.rollcalllist)
  return rollcalllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_RollCallInfo >*
RspConfInfoToMC::mutable_rollcalllist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfInfoToMC.rollcalllist)
  return &rollcalllist_;
}

// optional uint32 permanentenable = 27;
inline bool RspConfInfoToMC::has_permanentenable() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RspConfInfoToMC::set_has_permanentenable() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RspConfInfoToMC::clear_has_permanentenable() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RspConfInfoToMC::clear_permanentenable() {
  permanentenable_ = 0u;
  clear_has_permanentenable();
}
inline ::google::protobuf::uint32 RspConfInfoToMC::permanentenable() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.permanentenable)
  return permanentenable_;
}
inline void RspConfInfoToMC::set_permanentenable(::google::protobuf::uint32 value) {
  set_has_permanentenable();
  permanentenable_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspConfInfoToMC.permanentenable)
}

// repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
inline int RspConfInfoToMC::autopolllist_size() const {
  return autopolllist_.size();
}
inline void RspConfInfoToMC::clear_autopolllist() {
  autopolllist_.Clear();
}
inline const ::SRMsgs::RspConfInfoToMC_AutoPollInfo& RspConfInfoToMC::autopolllist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspConfInfoToMC.autopolllist)
  return autopolllist_.Get(index);
}
inline ::SRMsgs::RspConfInfoToMC_AutoPollInfo* RspConfInfoToMC::mutable_autopolllist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspConfInfoToMC.autopolllist)
  return autopolllist_.Mutable(index);
}
inline ::SRMsgs::RspConfInfoToMC_AutoPollInfo* RspConfInfoToMC::add_autopolllist() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspConfInfoToMC.autopolllist)
  return autopolllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_AutoPollInfo >&
RspConfInfoToMC::autopolllist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspConfInfoToMC.autopolllist)
  return autopolllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspConfInfoToMC_AutoPollInfo >*
RspConfInfoToMC::mutable_autopolllist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspConfInfoToMC.autopolllist)
  return &autopolllist_;
}

// -------------------------------------------------------------------

// IndDevtoserHeart

// optional string token = 1;
inline bool IndDevtoserHeart::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndDevtoserHeart::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndDevtoserHeart::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndDevtoserHeart::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndDevtoserHeart::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndDevtoserHeart.token)
  return *token_;
}
inline void IndDevtoserHeart::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndDevtoserHeart.token)
}
inline void IndDevtoserHeart::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndDevtoserHeart.token)
}
inline void IndDevtoserHeart::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndDevtoserHeart.token)
}
inline ::std::string* IndDevtoserHeart::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndDevtoserHeart.token)
  return token_;
}
inline ::std::string* IndDevtoserHeart::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndDevtoserHeart::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndDevtoserHeart.token)
}

// -------------------------------------------------------------------

// IndUpSvrInfoToDevmgr_IPPORTInfo

// optional string inner = 1;
inline bool IndUpSvrInfoToDevmgr_IPPORTInfo::has_inner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_has_inner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_has_inner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_inner() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_->clear();
  }
  clear_has_inner();
}
inline const ::std::string& IndUpSvrInfoToDevmgr_IPPORTInfo::inner() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
  return *inner_;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_inner(const ::std::string& value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_inner(const char* value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_inner(const char* value, size_t size) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::mutable_inner() {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
  return inner_;
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::release_inner() {
  clear_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inner_;
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_allocated_inner(::std::string* inner) {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (inner) {
    set_has_inner();
    inner_ = inner;
  } else {
    clear_has_inner();
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.inner)
}

// optional string outer = 2;
inline bool IndUpSvrInfoToDevmgr_IPPORTInfo::has_outer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_has_outer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_has_outer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_outer() {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_->clear();
  }
  clear_has_outer();
}
inline const ::std::string& IndUpSvrInfoToDevmgr_IPPORTInfo::outer() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
  return *outer_;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_outer(const ::std::string& value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_outer(const char* value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_outer(const char* value, size_t size) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::mutable_outer() {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
  return outer_;
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::release_outer() {
  clear_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = outer_;
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_allocated_outer(::std::string* outer) {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (outer) {
    set_has_outer();
    outer_ = outer;
  } else {
    clear_has_outer();
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.outer)
}

// optional string vpn = 3;
inline bool IndUpSvrInfoToDevmgr_IPPORTInfo::has_vpn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_has_vpn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_has_vpn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::clear_vpn() {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_->clear();
  }
  clear_has_vpn();
}
inline const ::std::string& IndUpSvrInfoToDevmgr_IPPORTInfo::vpn() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
  return *vpn_;
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_vpn(const ::std::string& value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_vpn(const char* value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_vpn(const char* value, size_t size) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::mutable_vpn() {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
  return vpn_;
}
inline ::std::string* IndUpSvrInfoToDevmgr_IPPORTInfo::release_vpn() {
  clear_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vpn_;
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrInfoToDevmgr_IPPORTInfo::set_allocated_vpn(::std::string* vpn) {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (vpn) {
    set_has_vpn();
    vpn_ = vpn;
  } else {
    clear_has_vpn();
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo.vpn)
}

// -------------------------------------------------------------------

// IndUpSvrInfoToDevmgr_ServerInfo

// optional uint32 svrtype = 1;
inline bool IndUpSvrInfoToDevmgr_ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndUpSvrInfoToDevmgr_ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.svrtype)
  return svrtype_;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.svrtype)
}

// optional uint32 deviceid = 2;
inline bool IndUpSvrInfoToDevmgr_ServerInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndUpSvrInfoToDevmgr_ServerInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.deviceid)
  return deviceid_;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.deviceid)
}

// optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
inline bool IndUpSvrInfoToDevmgr_ServerInfo::has_ipport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_has_ipport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_has_ipport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::clear_ipport() {
  if (ipport_ != NULL) ipport_->::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo::Clear();
  clear_has_ipport();
}
inline const ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo& IndUpSvrInfoToDevmgr_ServerInfo::ipport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.ipport)
  return ipport_ != NULL ? *ipport_ : *default_instance_->ipport_;
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* IndUpSvrInfoToDevmgr_ServerInfo::mutable_ipport() {
  set_has_ipport();
  if (ipport_ == NULL) ipport_ = new ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.ipport)
  return ipport_;
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* IndUpSvrInfoToDevmgr_ServerInfo::release_ipport() {
  clear_has_ipport();
  ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* temp = ipport_;
  ipport_ = NULL;
  return temp;
}
inline void IndUpSvrInfoToDevmgr_ServerInfo::set_allocated_ipport(::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo* ipport) {
  delete ipport_;
  ipport_ = ipport;
  if (ipport) {
    set_has_ipport();
  } else {
    clear_has_ipport();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo.ipport)
}

// -------------------------------------------------------------------

// IndUpSvrInfoToDevmgr_DomainInfo

// optional string domainname = 1;
inline bool IndUpSvrInfoToDevmgr_DomainInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndUpSvrInfoToDevmgr_DomainInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
  return *domainname_;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
}
inline ::std::string* IndUpSvrInfoToDevmgr_DomainInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
  return domainname_;
}
inline ::std::string* IndUpSvrInfoToDevmgr_DomainInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.domainname)
}

// optional sint32 level = 2;
inline bool IndUpSvrInfoToDevmgr_DomainInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 IndUpSvrInfoToDevmgr_DomainInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.level)
  return level_;
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.level)
}

// repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
inline int IndUpSvrInfoToDevmgr_DomainInfo::svrinfos_size() const {
  return svrinfos_.size();
}
inline void IndUpSvrInfoToDevmgr_DomainInfo::clear_svrinfos() {
  svrinfos_.Clear();
}
inline const ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo& IndUpSvrInfoToDevmgr_DomainInfo::svrinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Get(index);
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo* IndUpSvrInfoToDevmgr_DomainInfo::mutable_svrinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Mutable(index);
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo* IndUpSvrInfoToDevmgr_DomainInfo::add_svrinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo >&
IndUpSvrInfoToDevmgr_DomainInfo::svrinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.svrinfos)
  return svrinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_ServerInfo >*
IndUpSvrInfoToDevmgr_DomainInfo::mutable_svrinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo.svrinfos)
  return &svrinfos_;
}

// -------------------------------------------------------------------

// IndUpSvrInfoToDevmgr

// optional uint32 deviceid = 1;
inline bool IndUpSvrInfoToDevmgr::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrInfoToDevmgr::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrInfoToDevmgr::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrInfoToDevmgr::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndUpSvrInfoToDevmgr::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.deviceid)
  return deviceid_;
}
inline void IndUpSvrInfoToDevmgr::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.deviceid)
}

// optional string token = 2;
inline bool IndUpSvrInfoToDevmgr::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrInfoToDevmgr::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrInfoToDevmgr::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrInfoToDevmgr::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndUpSvrInfoToDevmgr::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.token)
  return *token_;
}
inline void IndUpSvrInfoToDevmgr::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.token)
}
inline void IndUpSvrInfoToDevmgr::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrInfoToDevmgr.token)
}
inline void IndUpSvrInfoToDevmgr::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrInfoToDevmgr.token)
}
inline ::std::string* IndUpSvrInfoToDevmgr::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.token)
  return token_;
}
inline ::std::string* IndUpSvrInfoToDevmgr::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrInfoToDevmgr::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrInfoToDevmgr.token)
}

// optional uint32 addordel = 3;
inline bool IndUpSvrInfoToDevmgr::has_addordel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndUpSvrInfoToDevmgr::set_has_addordel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndUpSvrInfoToDevmgr::clear_has_addordel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndUpSvrInfoToDevmgr::clear_addordel() {
  addordel_ = 0u;
  clear_has_addordel();
}
inline ::google::protobuf::uint32 IndUpSvrInfoToDevmgr::addordel() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.addordel)
  return addordel_;
}
inline void IndUpSvrInfoToDevmgr::set_addordel(::google::protobuf::uint32 value) {
  set_has_addordel();
  addordel_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrInfoToDevmgr.addordel)
}

// repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
inline int IndUpSvrInfoToDevmgr::domaininfos_size() const {
  return domaininfos_.size();
}
inline void IndUpSvrInfoToDevmgr::clear_domaininfos() {
  domaininfos_.Clear();
}
inline const ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo& IndUpSvrInfoToDevmgr::domaininfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Get(index);
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo* IndUpSvrInfoToDevmgr::mutable_domaininfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Mutable(index);
}
inline ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo* IndUpSvrInfoToDevmgr::add_domaininfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndUpSvrInfoToDevmgr.domaininfos)
  return domaininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo >&
IndUpSvrInfoToDevmgr::domaininfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndUpSvrInfoToDevmgr.domaininfos)
  return domaininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrInfoToDevmgr_DomainInfo >*
IndUpSvrInfoToDevmgr::mutable_domaininfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndUpSvrInfoToDevmgr.domaininfos)
  return &domaininfos_;
}

// -------------------------------------------------------------------

// IndUpSvrHeartTodev_LoadInfo

// optional uint32 ternum = 1;
inline bool IndUpSvrHeartTodev_LoadInfo::has_ternum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_has_ternum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_has_ternum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_ternum() {
  ternum_ = 0u;
  clear_has_ternum();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_LoadInfo::ternum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.LoadInfo.ternum)
  return ternum_;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_ternum(::google::protobuf::uint32 value) {
  set_has_ternum();
  ternum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.LoadInfo.ternum)
}

// optional uint32 tx = 2;
inline bool IndUpSvrHeartTodev_LoadInfo::has_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_has_tx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_has_tx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_tx() {
  tx_ = 0u;
  clear_has_tx();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_LoadInfo::tx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.LoadInfo.tx)
  return tx_;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_tx(::google::protobuf::uint32 value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.LoadInfo.tx)
}

// optional uint32 rx = 3;
inline bool IndUpSvrHeartTodev_LoadInfo::has_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_has_rx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_has_rx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_rx() {
  rx_ = 0u;
  clear_has_rx();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_LoadInfo::rx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.LoadInfo.rx)
  return rx_;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_rx(::google::protobuf::uint32 value) {
  set_has_rx();
  rx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.LoadInfo.rx)
}

// optional uint32 cpu = 4;
inline bool IndUpSvrHeartTodev_LoadInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndUpSvrHeartTodev_LoadInfo::clear_cpu() {
  cpu_ = 0u;
  clear_has_cpu();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_LoadInfo::cpu() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.LoadInfo.cpu)
  return cpu_;
}
inline void IndUpSvrHeartTodev_LoadInfo::set_cpu(::google::protobuf::uint32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.LoadInfo.cpu)
}

// -------------------------------------------------------------------

// IndUpSvrHeartTodev_ServerInfo

// optional uint32 svrtype = 1;
inline bool IndUpSvrHeartTodev_ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.ServerInfo.svrtype)
  return svrtype_;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.ServerInfo.svrtype)
}

// optional uint32 deviceid = 2;
inline bool IndUpSvrHeartTodev_ServerInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev_ServerInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.ServerInfo.deviceid)
  return deviceid_;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.ServerInfo.deviceid)
}

// optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
inline bool IndUpSvrHeartTodev_ServerInfo::has_loadinfos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_has_loadinfos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_has_loadinfos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndUpSvrHeartTodev_ServerInfo::clear_loadinfos() {
  if (loadinfos_ != NULL) loadinfos_->::SRMsgs::IndUpSvrHeartTodev_LoadInfo::Clear();
  clear_has_loadinfos();
}
inline const ::SRMsgs::IndUpSvrHeartTodev_LoadInfo& IndUpSvrHeartTodev_ServerInfo::loadinfos() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.ServerInfo.loadinfos)
  return loadinfos_ != NULL ? *loadinfos_ : *default_instance_->loadinfos_;
}
inline ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* IndUpSvrHeartTodev_ServerInfo::mutable_loadinfos() {
  set_has_loadinfos();
  if (loadinfos_ == NULL) loadinfos_ = new ::SRMsgs::IndUpSvrHeartTodev_LoadInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrHeartTodev.ServerInfo.loadinfos)
  return loadinfos_;
}
inline ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* IndUpSvrHeartTodev_ServerInfo::release_loadinfos() {
  clear_has_loadinfos();
  ::SRMsgs::IndUpSvrHeartTodev_LoadInfo* temp = loadinfos_;
  loadinfos_ = NULL;
  return temp;
}
inline void IndUpSvrHeartTodev_ServerInfo::set_allocated_loadinfos(::SRMsgs::IndUpSvrHeartTodev_LoadInfo* loadinfos) {
  delete loadinfos_;
  loadinfos_ = loadinfos;
  if (loadinfos) {
    set_has_loadinfos();
  } else {
    clear_has_loadinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrHeartTodev.ServerInfo.loadinfos)
}

// -------------------------------------------------------------------

// IndUpSvrHeartTodev_DomainInfo

// optional string domainname = 1;
inline bool IndUpSvrHeartTodev_DomainInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrHeartTodev_DomainInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrHeartTodev_DomainInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrHeartTodev_DomainInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& IndUpSvrHeartTodev_DomainInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
  return *domainname_;
}
inline void IndUpSvrHeartTodev_DomainInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
}
inline void IndUpSvrHeartTodev_DomainInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
}
inline void IndUpSvrHeartTodev_DomainInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
}
inline ::std::string* IndUpSvrHeartTodev_DomainInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
  return domainname_;
}
inline ::std::string* IndUpSvrHeartTodev_DomainInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrHeartTodev_DomainInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrHeartTodev.DomainInfo.domainname)
}

// optional sint32 level = 2;
inline bool IndUpSvrHeartTodev_DomainInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrHeartTodev_DomainInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrHeartTodev_DomainInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrHeartTodev_DomainInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 IndUpSvrHeartTodev_DomainInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.DomainInfo.level)
  return level_;
}
inline void IndUpSvrHeartTodev_DomainInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.DomainInfo.level)
}

// repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
inline int IndUpSvrHeartTodev_DomainInfo::svrinfos_size() const {
  return svrinfos_.size();
}
inline void IndUpSvrHeartTodev_DomainInfo::clear_svrinfos() {
  svrinfos_.Clear();
}
inline const ::SRMsgs::IndUpSvrHeartTodev_ServerInfo& IndUpSvrHeartTodev_DomainInfo::svrinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Get(index);
}
inline ::SRMsgs::IndUpSvrHeartTodev_ServerInfo* IndUpSvrHeartTodev_DomainInfo::mutable_svrinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Mutable(index);
}
inline ::SRMsgs::IndUpSvrHeartTodev_ServerInfo* IndUpSvrHeartTodev_DomainInfo::add_svrinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndUpSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_ServerInfo >&
IndUpSvrHeartTodev_DomainInfo::svrinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndUpSvrHeartTodev.DomainInfo.svrinfos)
  return svrinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_ServerInfo >*
IndUpSvrHeartTodev_DomainInfo::mutable_svrinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndUpSvrHeartTodev.DomainInfo.svrinfos)
  return &svrinfos_;
}

// -------------------------------------------------------------------

// IndUpSvrHeartTodev

// optional uint32 deviceid = 1;
inline bool IndUpSvrHeartTodev::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndUpSvrHeartTodev::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndUpSvrHeartTodev::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndUpSvrHeartTodev::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 IndUpSvrHeartTodev::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.deviceid)
  return deviceid_;
}
inline void IndUpSvrHeartTodev::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.deviceid)
}

// optional string token = 2;
inline bool IndUpSvrHeartTodev::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndUpSvrHeartTodev::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndUpSvrHeartTodev::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndUpSvrHeartTodev::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& IndUpSvrHeartTodev::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.token)
  return *token_;
}
inline void IndUpSvrHeartTodev::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.IndUpSvrHeartTodev.token)
}
inline void IndUpSvrHeartTodev::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.IndUpSvrHeartTodev.token)
}
inline void IndUpSvrHeartTodev::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.IndUpSvrHeartTodev.token)
}
inline ::std::string* IndUpSvrHeartTodev::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrHeartTodev.token)
  return token_;
}
inline ::std::string* IndUpSvrHeartTodev::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndUpSvrHeartTodev::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.IndUpSvrHeartTodev.token)
}

// repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
inline int IndUpSvrHeartTodev::domaininfos_size() const {
  return domaininfos_.size();
}
inline void IndUpSvrHeartTodev::clear_domaininfos() {
  domaininfos_.Clear();
}
inline const ::SRMsgs::IndUpSvrHeartTodev_DomainInfo& IndUpSvrHeartTodev::domaininfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndUpSvrHeartTodev.domaininfos)
  return domaininfos_.Get(index);
}
inline ::SRMsgs::IndUpSvrHeartTodev_DomainInfo* IndUpSvrHeartTodev::mutable_domaininfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.IndUpSvrHeartTodev.domaininfos)
  return domaininfos_.Mutable(index);
}
inline ::SRMsgs::IndUpSvrHeartTodev_DomainInfo* IndUpSvrHeartTodev::add_domaininfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.IndUpSvrHeartTodev.domaininfos)
  return domaininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_DomainInfo >&
IndUpSvrHeartTodev::domaininfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.IndUpSvrHeartTodev.domaininfos)
  return domaininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::IndUpSvrHeartTodev_DomainInfo >*
IndUpSvrHeartTodev::mutable_domaininfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.IndUpSvrHeartTodev.domaininfos)
  return &domaininfos_;
}

// -------------------------------------------------------------------

// RspRegister_Capset

// optional string fmt = 1;
inline bool RspRegister_Capset::has_fmt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspRegister_Capset::set_has_fmt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspRegister_Capset::clear_has_fmt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspRegister_Capset::clear_fmt() {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_->clear();
  }
  clear_has_fmt();
}
inline const ::std::string& RspRegister_Capset::fmt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.Capset.fmt)
  return *fmt_;
}
inline void RspRegister_Capset::set_fmt(const ::std::string& value) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.Capset.fmt)
}
inline void RspRegister_Capset::set_fmt(const char* value) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspRegister.Capset.fmt)
}
inline void RspRegister_Capset::set_fmt(const char* value, size_t size) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspRegister.Capset.fmt)
}
inline ::std::string* RspRegister_Capset::mutable_fmt() {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.Capset.fmt)
  return fmt_;
}
inline ::std::string* RspRegister_Capset::release_fmt() {
  clear_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fmt_;
    fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspRegister_Capset::set_allocated_fmt(::std::string* fmt) {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fmt_;
  }
  if (fmt) {
    set_has_fmt();
    fmt_ = fmt;
  } else {
    clear_has_fmt();
    fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspRegister.Capset.fmt)
}

// -------------------------------------------------------------------

// RspRegister_CapInfo

// optional uint32 captype = 1;
inline bool RspRegister_CapInfo::has_captype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspRegister_CapInfo::set_has_captype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspRegister_CapInfo::clear_has_captype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspRegister_CapInfo::clear_captype() {
  captype_ = 0u;
  clear_has_captype();
}
inline ::google::protobuf::uint32 RspRegister_CapInfo::captype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.CapInfo.captype)
  return captype_;
}
inline void RspRegister_CapInfo::set_captype(::google::protobuf::uint32 value) {
  set_has_captype();
  captype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.CapInfo.captype)
}

// repeated .SRMsgs.RspRegister.Capset capsets = 2;
inline int RspRegister_CapInfo::capsets_size() const {
  return capsets_.size();
}
inline void RspRegister_CapInfo::clear_capsets() {
  capsets_.Clear();
}
inline const ::SRMsgs::RspRegister_Capset& RspRegister_CapInfo::capsets(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.CapInfo.capsets)
  return capsets_.Get(index);
}
inline ::SRMsgs::RspRegister_Capset* RspRegister_CapInfo::mutable_capsets(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.CapInfo.capsets)
  return capsets_.Mutable(index);
}
inline ::SRMsgs::RspRegister_Capset* RspRegister_CapInfo::add_capsets() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspRegister.CapInfo.capsets)
  return capsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_Capset >&
RspRegister_CapInfo::capsets() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspRegister.CapInfo.capsets)
  return capsets_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_Capset >*
RspRegister_CapInfo::mutable_capsets() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspRegister.CapInfo.capsets)
  return &capsets_;
}

// -------------------------------------------------------------------

// RspRegister

// optional bool isok = 1;
inline bool RspRegister::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspRegister::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspRegister::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspRegister::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspRegister::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.isok)
  return isok_;
}
inline void RspRegister::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.isok)
}

// optional uint32 deviceid = 2;
inline bool RspRegister::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspRegister::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspRegister::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspRegister::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 RspRegister::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.deviceid)
  return deviceid_;
}
inline void RspRegister::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.deviceid)
}

// optional string token = 3;
inline bool RspRegister::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspRegister::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspRegister::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspRegister::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspRegister::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.token)
  return *token_;
}
inline void RspRegister::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.token)
}
inline void RspRegister::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspRegister.token)
}
inline void RspRegister::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspRegister.token)
}
inline ::std::string* RspRegister::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.token)
  return token_;
}
inline ::std::string* RspRegister::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspRegister::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspRegister.token)
}

// optional string failurereason = 4;
inline bool RspRegister::has_failurereason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspRegister::set_has_failurereason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspRegister::clear_has_failurereason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspRegister::clear_failurereason() {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_->clear();
  }
  clear_has_failurereason();
}
inline const ::std::string& RspRegister::failurereason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.failurereason)
  return *failurereason_;
}
inline void RspRegister::set_failurereason(const ::std::string& value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.failurereason)
}
inline void RspRegister::set_failurereason(const char* value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspRegister.failurereason)
}
inline void RspRegister::set_failurereason(const char* value, size_t size) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspRegister.failurereason)
}
inline ::std::string* RspRegister::mutable_failurereason() {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.failurereason)
  return failurereason_;
}
inline ::std::string* RspRegister::release_failurereason() {
  clear_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failurereason_;
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspRegister::set_allocated_failurereason(::std::string* failurereason) {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (failurereason) {
    set_has_failurereason();
    failurereason_ = failurereason;
  } else {
    clear_has_failurereason();
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspRegister.failurereason)
}

// optional uint32 groupid = 5;
inline bool RspRegister::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspRegister::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspRegister::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspRegister::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 RspRegister::groupid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.groupid)
  return groupid_;
}
inline void RspRegister::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.groupid)
}

// optional string domainname = 6;
inline bool RspRegister::has_domainname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspRegister::set_has_domainname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspRegister::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspRegister::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspRegister::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.domainname)
  return *domainname_;
}
inline void RspRegister::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.domainname)
}
inline void RspRegister::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspRegister.domainname)
}
inline void RspRegister::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspRegister.domainname)
}
inline ::std::string* RspRegister::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.domainname)
  return domainname_;
}
inline ::std::string* RspRegister::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspRegister::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspRegister.domainname)
}

// optional uint32 errorcode = 7;
inline bool RspRegister::has_errorcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspRegister::set_has_errorcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspRegister::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspRegister::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspRegister::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.errorcode)
  return errorcode_;
}
inline void RspRegister::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspRegister.errorcode)
}

// repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
inline int RspRegister::capinfos_size() const {
  return capinfos_.size();
}
inline void RspRegister::clear_capinfos() {
  capinfos_.Clear();
}
inline const ::SRMsgs::RspRegister_CapInfo& RspRegister::capinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspRegister.capinfos)
  return capinfos_.Get(index);
}
inline ::SRMsgs::RspRegister_CapInfo* RspRegister::mutable_capinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspRegister.capinfos)
  return capinfos_.Mutable(index);
}
inline ::SRMsgs::RspRegister_CapInfo* RspRegister::add_capinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspRegister.capinfos)
  return capinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_CapInfo >&
RspRegister::capinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspRegister.capinfos)
  return capinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspRegister_CapInfo >*
RspRegister::mutable_capinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspRegister.capinfos)
  return &capinfos_;
}

// -------------------------------------------------------------------

// RspUnRegister

// optional bool isok = 1;
inline bool RspUnRegister::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspUnRegister::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspUnRegister::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspUnRegister::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspUnRegister::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUnRegister.isok)
  return isok_;
}
inline void RspUnRegister::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUnRegister.isok)
}

// optional string failurereason = 2;
inline bool RspUnRegister::has_failurereason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspUnRegister::set_has_failurereason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspUnRegister::clear_has_failurereason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspUnRegister::clear_failurereason() {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_->clear();
  }
  clear_has_failurereason();
}
inline const ::std::string& RspUnRegister::failurereason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUnRegister.failurereason)
  return *failurereason_;
}
inline void RspUnRegister::set_failurereason(const ::std::string& value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspUnRegister.failurereason)
}
inline void RspUnRegister::set_failurereason(const char* value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspUnRegister.failurereason)
}
inline void RspUnRegister::set_failurereason(const char* value, size_t size) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspUnRegister.failurereason)
}
inline ::std::string* RspUnRegister::mutable_failurereason() {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failurereason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspUnRegister.failurereason)
  return failurereason_;
}
inline ::std::string* RspUnRegister::release_failurereason() {
  clear_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failurereason_;
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspUnRegister::set_allocated_failurereason(::std::string* failurereason) {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (failurereason) {
    set_has_failurereason();
    failurereason_ = failurereason;
  } else {
    clear_has_failurereason();
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspUnRegister.failurereason)
}

// -------------------------------------------------------------------

// RspGetDeviceInfo_MapIPInfo

// optional string mapip = 1;
inline bool RspGetDeviceInfo_MapIPInfo::has_mapip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetDeviceInfo_MapIPInfo::set_has_mapip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetDeviceInfo_MapIPInfo::clear_has_mapip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetDeviceInfo_MapIPInfo::clear_mapip() {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_->clear();
  }
  clear_has_mapip();
}
inline const ::std::string& RspGetDeviceInfo_MapIPInfo::mapip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
  return *mapip_;
}
inline void RspGetDeviceInfo_MapIPInfo::set_mapip(const ::std::string& value) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
}
inline void RspGetDeviceInfo_MapIPInfo::set_mapip(const char* value) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
}
inline void RspGetDeviceInfo_MapIPInfo::set_mapip(const char* value, size_t size) {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  mapip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
}
inline ::std::string* RspGetDeviceInfo_MapIPInfo::mutable_mapip() {
  set_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
  return mapip_;
}
inline ::std::string* RspGetDeviceInfo_MapIPInfo::release_mapip() {
  clear_has_mapip();
  if (mapip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapip_;
    mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetDeviceInfo_MapIPInfo::set_allocated_mapip(::std::string* mapip) {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapip_;
  }
  if (mapip) {
    set_has_mapip();
    mapip_ = mapip;
  } else {
    clear_has_mapip();
    mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetDeviceInfo.MapIPInfo.mapip)
}

// -------------------------------------------------------------------

// RspGetDeviceInfo_DeviceInfo

// optional uint32 deviceid = 1;
inline bool RspGetDeviceInfo_DeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.deviceid)
  return deviceid_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.deviceid)
}

// optional uint32 svr_type = 2;
inline bool RspGetDeviceInfo_DeviceInfo::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.svr_type)
  return svr_type_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.svr_type)
}

// optional uint32 get_svr_type = 3;
inline bool RspGetDeviceInfo_DeviceInfo::has_get_svr_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_get_svr_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_get_svr_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_get_svr_type() {
  get_svr_type_ = 0u;
  clear_has_get_svr_type();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::get_svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.get_svr_type)
  return get_svr_type_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_get_svr_type(::google::protobuf::uint32 value) {
  set_has_get_svr_type();
  get_svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.get_svr_type)
}

// optional uint32 ip = 4;
inline bool RspGetDeviceInfo_DeviceInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.ip)
  return ip_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.ip)
}

// optional uint32 port = 5;
inline bool RspGetDeviceInfo_DeviceInfo::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.port)
  return port_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.port)
}

// optional uint32 load = 6;
inline bool RspGetDeviceInfo_DeviceInfo::has_load() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_load() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_load() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_load() {
  load_ = 0u;
  clear_has_load();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::load() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.load)
  return load_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_load(::google::protobuf::uint32 value) {
  set_has_load();
  load_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.load)
}

// optional uint32 load2 = 7;
inline bool RspGetDeviceInfo_DeviceInfo::has_load2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_load2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_load2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_load2() {
  load2_ = 0u;
  clear_has_load2();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::load2() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.load2)
  return load2_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_load2(::google::protobuf::uint32 value) {
  set_has_load2();
  load2_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.load2)
}

// optional uint32 groupid = 8;
inline bool RspGetDeviceInfo_DeviceInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 RspGetDeviceInfo_DeviceInfo::groupid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.groupid)
  return groupid_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.groupid)
}

// optional string domainname = 9;
inline bool RspGetDeviceInfo_DeviceInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspGetDeviceInfo_DeviceInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspGetDeviceInfo_DeviceInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspGetDeviceInfo_DeviceInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
  return *domainname_;
}
inline void RspGetDeviceInfo_DeviceInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
}
inline void RspGetDeviceInfo_DeviceInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
}
inline void RspGetDeviceInfo_DeviceInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
}
inline ::std::string* RspGetDeviceInfo_DeviceInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
  return domainname_;
}
inline ::std::string* RspGetDeviceInfo_DeviceInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetDeviceInfo_DeviceInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetDeviceInfo.DeviceInfo.domainname)
}

// repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
inline int RspGetDeviceInfo_DeviceInfo::mapinternetips_size() const {
  return mapinternetips_.size();
}
inline void RspGetDeviceInfo_DeviceInfo::clear_mapinternetips() {
  mapinternetips_.Clear();
}
inline const ::SRMsgs::RspGetDeviceInfo_MapIPInfo& RspGetDeviceInfo_DeviceInfo::mapinternetips(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.DeviceInfo.mapinternetips)
  return mapinternetips_.Get(index);
}
inline ::SRMsgs::RspGetDeviceInfo_MapIPInfo* RspGetDeviceInfo_DeviceInfo::mutable_mapinternetips(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetDeviceInfo.DeviceInfo.mapinternetips)
  return mapinternetips_.Mutable(index);
}
inline ::SRMsgs::RspGetDeviceInfo_MapIPInfo* RspGetDeviceInfo_DeviceInfo::add_mapinternetips() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspGetDeviceInfo.DeviceInfo.mapinternetips)
  return mapinternetips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_MapIPInfo >&
RspGetDeviceInfo_DeviceInfo::mapinternetips() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspGetDeviceInfo.DeviceInfo.mapinternetips)
  return mapinternetips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_MapIPInfo >*
RspGetDeviceInfo_DeviceInfo::mutable_mapinternetips() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspGetDeviceInfo.DeviceInfo.mapinternetips)
  return &mapinternetips_;
}

// -------------------------------------------------------------------

// RspGetDeviceInfo

// optional string token = 2;
inline bool RspGetDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspGetDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.token)
  return *token_;
}
inline void RspGetDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetDeviceInfo.token)
}
inline void RspGetDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetDeviceInfo.token)
}
inline void RspGetDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetDeviceInfo.token)
}
inline ::std::string* RspGetDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetDeviceInfo.token)
  return token_;
}
inline ::std::string* RspGetDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetDeviceInfo.token)
}

// repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
inline int RspGetDeviceInfo::deviceinfolist_size() const {
  return deviceinfolist_.size();
}
inline void RspGetDeviceInfo::clear_deviceinfolist() {
  deviceinfolist_.Clear();
}
inline const ::SRMsgs::RspGetDeviceInfo_DeviceInfo& RspGetDeviceInfo::deviceinfolist(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetDeviceInfo.deviceinfolist)
  return deviceinfolist_.Get(index);
}
inline ::SRMsgs::RspGetDeviceInfo_DeviceInfo* RspGetDeviceInfo::mutable_deviceinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetDeviceInfo.deviceinfolist)
  return deviceinfolist_.Mutable(index);
}
inline ::SRMsgs::RspGetDeviceInfo_DeviceInfo* RspGetDeviceInfo::add_deviceinfolist() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspGetDeviceInfo.deviceinfolist)
  return deviceinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_DeviceInfo >&
RspGetDeviceInfo::deviceinfolist() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspGetDeviceInfo.deviceinfolist)
  return deviceinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetDeviceInfo_DeviceInfo >*
RspGetDeviceInfo::mutable_deviceinfolist() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspGetDeviceInfo.deviceinfolist)
  return &deviceinfolist_;
}

// -------------------------------------------------------------------

// RspGetSysDeviceInfo_LoadInfo

// optional uint32 ternum = 1;
inline bool RspGetSysDeviceInfo_LoadInfo::has_ternum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_has_ternum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_has_ternum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_ternum() {
  ternum_ = 0u;
  clear_has_ternum();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo_LoadInfo::ternum() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.LoadInfo.ternum)
  return ternum_;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_ternum(::google::protobuf::uint32 value) {
  set_has_ternum();
  ternum_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.LoadInfo.ternum)
}

// optional uint32 tx = 2;
inline bool RspGetSysDeviceInfo_LoadInfo::has_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_has_tx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_has_tx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_tx() {
  tx_ = 0u;
  clear_has_tx();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo_LoadInfo::tx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.LoadInfo.tx)
  return tx_;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_tx(::google::protobuf::uint32 value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.LoadInfo.tx)
}

// optional uint32 rx = 3;
inline bool RspGetSysDeviceInfo_LoadInfo::has_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_has_rx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_has_rx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_rx() {
  rx_ = 0u;
  clear_has_rx();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo_LoadInfo::rx() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.LoadInfo.rx)
  return rx_;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_rx(::google::protobuf::uint32 value) {
  set_has_rx();
  rx_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.LoadInfo.rx)
}

// optional uint32 cpu = 4;
inline bool RspGetSysDeviceInfo_LoadInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspGetSysDeviceInfo_LoadInfo::clear_cpu() {
  cpu_ = 0u;
  clear_has_cpu();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo_LoadInfo::cpu() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.LoadInfo.cpu)
  return cpu_;
}
inline void RspGetSysDeviceInfo_LoadInfo::set_cpu(::google::protobuf::uint32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.LoadInfo.cpu)
}

// -------------------------------------------------------------------

// RspGetSysDeviceInfo_IPPORTInfo

// optional string inner = 1;
inline bool RspGetSysDeviceInfo_IPPORTInfo::has_inner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_has_inner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_has_inner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_inner() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_->clear();
  }
  clear_has_inner();
}
inline const ::std::string& RspGetSysDeviceInfo_IPPORTInfo::inner() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
  return *inner_;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_inner(const ::std::string& value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_inner(const char* value) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_inner(const char* value, size_t size) {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  inner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::mutable_inner() {
  set_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
  return inner_;
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::release_inner() {
  clear_has_inner();
  if (inner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inner_;
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_allocated_inner(::std::string* inner) {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (inner) {
    set_has_inner();
    inner_ = inner;
  } else {
    clear_has_inner();
    inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.inner)
}

// optional string outer = 2;
inline bool RspGetSysDeviceInfo_IPPORTInfo::has_outer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_has_outer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_has_outer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_outer() {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_->clear();
  }
  clear_has_outer();
}
inline const ::std::string& RspGetSysDeviceInfo_IPPORTInfo::outer() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
  return *outer_;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_outer(const ::std::string& value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_outer(const char* value) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_outer(const char* value, size_t size) {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  outer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::mutable_outer() {
  set_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
  return outer_;
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::release_outer() {
  clear_has_outer();
  if (outer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = outer_;
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_allocated_outer(::std::string* outer) {
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (outer) {
    set_has_outer();
    outer_ = outer;
  } else {
    clear_has_outer();
    outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.outer)
}

// optional string vpn = 3;
inline bool RspGetSysDeviceInfo_IPPORTInfo::has_vpn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_has_vpn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_has_vpn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::clear_vpn() {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_->clear();
  }
  clear_has_vpn();
}
inline const ::std::string& RspGetSysDeviceInfo_IPPORTInfo::vpn() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
  return *vpn_;
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_vpn(const ::std::string& value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_vpn(const char* value) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_vpn(const char* value, size_t size) {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  vpn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::mutable_vpn() {
  set_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vpn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
  return vpn_;
}
inline ::std::string* RspGetSysDeviceInfo_IPPORTInfo::release_vpn() {
  clear_has_vpn();
  if (vpn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vpn_;
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSysDeviceInfo_IPPORTInfo::set_allocated_vpn(::std::string* vpn) {
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (vpn) {
    set_has_vpn();
    vpn_ = vpn;
  } else {
    clear_has_vpn();
    vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo.vpn)
}

// -------------------------------------------------------------------

// RspGetSysDeviceInfo_DeviceInfo

// optional uint32 deviceid = 1;
inline bool RspGetSysDeviceInfo_DeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo_DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.deviceid)
  return deviceid_;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.deviceid)
}

// optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
inline bool RspGetSysDeviceInfo_DeviceInfo::has_ipport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_has_ipport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_has_ipport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_ipport() {
  if (ipport_ != NULL) ipport_->::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo::Clear();
  clear_has_ipport();
}
inline const ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo& RspGetSysDeviceInfo_DeviceInfo::ipport() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.ipport)
  return ipport_ != NULL ? *ipport_ : *default_instance_->ipport_;
}
inline ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* RspGetSysDeviceInfo_DeviceInfo::mutable_ipport() {
  set_has_ipport();
  if (ipport_ == NULL) ipport_ = new ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.ipport)
  return ipport_;
}
inline ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* RspGetSysDeviceInfo_DeviceInfo::release_ipport() {
  clear_has_ipport();
  ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* temp = ipport_;
  ipport_ = NULL;
  return temp;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_allocated_ipport(::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo* ipport) {
  delete ipport_;
  ipport_ = ipport;
  if (ipport) {
    set_has_ipport();
  } else {
    clear_has_ipport();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.ipport)
}

// optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
inline bool RspGetSysDeviceInfo_DeviceInfo::has_loadinfos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_has_loadinfos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_has_loadinfos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetSysDeviceInfo_DeviceInfo::clear_loadinfos() {
  if (loadinfos_ != NULL) loadinfos_->::SRMsgs::RspGetSysDeviceInfo_LoadInfo::Clear();
  clear_has_loadinfos();
}
inline const ::SRMsgs::RspGetSysDeviceInfo_LoadInfo& RspGetSysDeviceInfo_DeviceInfo::loadinfos() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.loadinfos)
  return loadinfos_ != NULL ? *loadinfos_ : *default_instance_->loadinfos_;
}
inline ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* RspGetSysDeviceInfo_DeviceInfo::mutable_loadinfos() {
  set_has_loadinfos();
  if (loadinfos_ == NULL) loadinfos_ = new ::SRMsgs::RspGetSysDeviceInfo_LoadInfo;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.loadinfos)
  return loadinfos_;
}
inline ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* RspGetSysDeviceInfo_DeviceInfo::release_loadinfos() {
  clear_has_loadinfos();
  ::SRMsgs::RspGetSysDeviceInfo_LoadInfo* temp = loadinfos_;
  loadinfos_ = NULL;
  return temp;
}
inline void RspGetSysDeviceInfo_DeviceInfo::set_allocated_loadinfos(::SRMsgs::RspGetSysDeviceInfo_LoadInfo* loadinfos) {
  delete loadinfos_;
  loadinfos_ = loadinfos;
  if (loadinfos) {
    set_has_loadinfos();
  } else {
    clear_has_loadinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.DeviceInfo.loadinfos)
}

// -------------------------------------------------------------------

// RspGetSysDeviceInfo_DomainInfo

// optional string domainname = 1;
inline bool RspGetSysDeviceInfo_DomainInfo::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSysDeviceInfo_DomainInfo::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSysDeviceInfo_DomainInfo::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSysDeviceInfo_DomainInfo::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& RspGetSysDeviceInfo_DomainInfo::domainname() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
  return *domainname_;
}
inline void RspGetSysDeviceInfo_DomainInfo::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
}
inline void RspGetSysDeviceInfo_DomainInfo::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
}
inline void RspGetSysDeviceInfo_DomainInfo::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
}
inline ::std::string* RspGetSysDeviceInfo_DomainInfo::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
  return domainname_;
}
inline ::std::string* RspGetSysDeviceInfo_DomainInfo::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSysDeviceInfo_DomainInfo::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.DomainInfo.domainname)
}

// optional sint32 level = 2;
inline bool RspGetSysDeviceInfo_DomainInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSysDeviceInfo_DomainInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSysDeviceInfo_DomainInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSysDeviceInfo_DomainInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RspGetSysDeviceInfo_DomainInfo::level() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DomainInfo.level)
  return level_;
}
inline void RspGetSysDeviceInfo_DomainInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.DomainInfo.level)
}

// repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
inline int RspGetSysDeviceInfo_DomainInfo::devices_size() const {
  return devices_.size();
}
inline void RspGetSysDeviceInfo_DomainInfo::clear_devices() {
  devices_.Clear();
}
inline const ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo& RspGetSysDeviceInfo_DomainInfo::devices(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.DomainInfo.devices)
  return devices_.Get(index);
}
inline ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo* RspGetSysDeviceInfo_DomainInfo::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.DomainInfo.devices)
  return devices_.Mutable(index);
}
inline ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo* RspGetSysDeviceInfo_DomainInfo::add_devices() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspGetSysDeviceInfo.DomainInfo.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo >&
RspGetSysDeviceInfo_DomainInfo::devices() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspGetSysDeviceInfo.DomainInfo.devices)
  return devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DeviceInfo >*
RspGetSysDeviceInfo_DomainInfo::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspGetSysDeviceInfo.DomainInfo.devices)
  return &devices_;
}

// -------------------------------------------------------------------

// RspGetSysDeviceInfo

// optional uint32 deviceid = 1;
inline bool RspGetSysDeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSysDeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSysDeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSysDeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.deviceid)
  return deviceid_;
}
inline void RspGetSysDeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.deviceid)
}

// optional string token = 2;
inline bool RspGetSysDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSysDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSysDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSysDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspGetSysDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.token)
  return *token_;
}
inline void RspGetSysDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.token)
}
inline void RspGetSysDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSysDeviceInfo.token)
}
inline void RspGetSysDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSysDeviceInfo.token)
}
inline ::std::string* RspGetSysDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.token)
  return token_;
}
inline ::std::string* RspGetSysDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSysDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSysDeviceInfo.token)
}

// optional uint32 svrtype = 3;
inline bool RspGetSysDeviceInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetSysDeviceInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetSysDeviceInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetSysDeviceInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 RspGetSysDeviceInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.svrtype)
  return svrtype_;
}
inline void RspGetSysDeviceInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSysDeviceInfo.svrtype)
}

// repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
inline int RspGetSysDeviceInfo::domaininfos_size() const {
  return domaininfos_.size();
}
inline void RspGetSysDeviceInfo::clear_domaininfos() {
  domaininfos_.Clear();
}
inline const ::SRMsgs::RspGetSysDeviceInfo_DomainInfo& RspGetSysDeviceInfo::domaininfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSysDeviceInfo.domaininfos)
  return domaininfos_.Get(index);
}
inline ::SRMsgs::RspGetSysDeviceInfo_DomainInfo* RspGetSysDeviceInfo::mutable_domaininfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSysDeviceInfo.domaininfos)
  return domaininfos_.Mutable(index);
}
inline ::SRMsgs::RspGetSysDeviceInfo_DomainInfo* RspGetSysDeviceInfo::add_domaininfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspGetSysDeviceInfo.domaininfos)
  return domaininfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DomainInfo >&
RspGetSysDeviceInfo::domaininfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspGetSysDeviceInfo.domaininfos)
  return domaininfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspGetSysDeviceInfo_DomainInfo >*
RspGetSysDeviceInfo::mutable_domaininfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspGetSysDeviceInfo.domaininfos)
  return &domaininfos_;
}

// -------------------------------------------------------------------

// RspGetSystemCurLoad

// optional string token = 1;
inline bool RspGetSystemCurLoad::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspGetSystemCurLoad::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspGetSystemCurLoad::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspGetSystemCurLoad::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspGetSystemCurLoad::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSystemCurLoad.token)
  return *token_;
}
inline void RspGetSystemCurLoad::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSystemCurLoad.token)
}
inline void RspGetSystemCurLoad::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspGetSystemCurLoad.token)
}
inline void RspGetSystemCurLoad::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspGetSystemCurLoad.token)
}
inline ::std::string* RspGetSystemCurLoad::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspGetSystemCurLoad.token)
  return token_;
}
inline ::std::string* RspGetSystemCurLoad::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspGetSystemCurLoad::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspGetSystemCurLoad.token)
}

// optional uint32 curconfcnt = 2;
inline bool RspGetSystemCurLoad::has_curconfcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspGetSystemCurLoad::set_has_curconfcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspGetSystemCurLoad::clear_has_curconfcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspGetSystemCurLoad::clear_curconfcnt() {
  curconfcnt_ = 0u;
  clear_has_curconfcnt();
}
inline ::google::protobuf::uint32 RspGetSystemCurLoad::curconfcnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSystemCurLoad.curconfcnt)
  return curconfcnt_;
}
inline void RspGetSystemCurLoad::set_curconfcnt(::google::protobuf::uint32 value) {
  set_has_curconfcnt();
  curconfcnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSystemCurLoad.curconfcnt)
}

// optional uint32 curreccnt = 3;
inline bool RspGetSystemCurLoad::has_curreccnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspGetSystemCurLoad::set_has_curreccnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspGetSystemCurLoad::clear_has_curreccnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspGetSystemCurLoad::clear_curreccnt() {
  curreccnt_ = 0u;
  clear_has_curreccnt();
}
inline ::google::protobuf::uint32 RspGetSystemCurLoad::curreccnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSystemCurLoad.curreccnt)
  return curreccnt_;
}
inline void RspGetSystemCurLoad::set_curreccnt(::google::protobuf::uint32 value) {
  set_has_curreccnt();
  curreccnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSystemCurLoad.curreccnt)
}

// optional uint32 curlivecnt = 4;
inline bool RspGetSystemCurLoad::has_curlivecnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspGetSystemCurLoad::set_has_curlivecnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspGetSystemCurLoad::clear_has_curlivecnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspGetSystemCurLoad::clear_curlivecnt() {
  curlivecnt_ = 0u;
  clear_has_curlivecnt();
}
inline ::google::protobuf::uint32 RspGetSystemCurLoad::curlivecnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSystemCurLoad.curlivecnt)
  return curlivecnt_;
}
inline void RspGetSystemCurLoad::set_curlivecnt(::google::protobuf::uint32 value) {
  set_has_curlivecnt();
  curlivecnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSystemCurLoad.curlivecnt)
}

// optional uint32 curanalycnt = 5;
inline bool RspGetSystemCurLoad::has_curanalycnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspGetSystemCurLoad::set_has_curanalycnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspGetSystemCurLoad::clear_has_curanalycnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspGetSystemCurLoad::clear_curanalycnt() {
  curanalycnt_ = 0u;
  clear_has_curanalycnt();
}
inline ::google::protobuf::uint32 RspGetSystemCurLoad::curanalycnt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspGetSystemCurLoad.curanalycnt)
  return curanalycnt_;
}
inline void RspGetSystemCurLoad::set_curanalycnt(::google::protobuf::uint32 value) {
  set_has_curanalycnt();
  curanalycnt_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspGetSystemCurLoad.curanalycnt)
}

// -------------------------------------------------------------------

// RspUpdateDeviceInfo_DeviceInfo

// optional uint32 deviceid = 1;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_deviceid() {
  deviceid_ = 0u;
  clear_has_deviceid();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.deviceid)
  return deviceid_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_deviceid(::google::protobuf::uint32 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.deviceid)
}

// optional uint32 svr_type = 2;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::svr_type() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.svr_type)
  return svr_type_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.svr_type)
}

// optional uint32 ip = 4;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.ip)
  return ip_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.ip)
}

// optional uint32 port = 5;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.port)
  return port_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.port)
}

// optional uint32 load = 6;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_load() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_load() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_load() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_load() {
  load_ = 0u;
  clear_has_load();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::load() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.load)
  return load_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_load(::google::protobuf::uint32 value) {
  set_has_load();
  load_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.load)
}

// optional uint32 load2 = 7;
inline bool RspUpdateDeviceInfo_DeviceInfo::has_load2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_has_load2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_has_load2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspUpdateDeviceInfo_DeviceInfo::clear_load2() {
  load2_ = 0u;
  clear_has_load2();
}
inline ::google::protobuf::uint32 RspUpdateDeviceInfo_DeviceInfo::load2() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.load2)
  return load2_;
}
inline void RspUpdateDeviceInfo_DeviceInfo::set_load2(::google::protobuf::uint32 value) {
  set_has_load2();
  load2_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.DeviceInfo.load2)
}

// -------------------------------------------------------------------

// RspUpdateDeviceInfo

// optional string token = 2;
inline bool RspUpdateDeviceInfo::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspUpdateDeviceInfo::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspUpdateDeviceInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspUpdateDeviceInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RspUpdateDeviceInfo::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.token)
  return *token_;
}
inline void RspUpdateDeviceInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspUpdateDeviceInfo.token)
}
inline void RspUpdateDeviceInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspUpdateDeviceInfo.token)
}
inline void RspUpdateDeviceInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspUpdateDeviceInfo.token)
}
inline ::std::string* RspUpdateDeviceInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspUpdateDeviceInfo.token)
  return token_;
}
inline ::std::string* RspUpdateDeviceInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspUpdateDeviceInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspUpdateDeviceInfo.token)
}

// repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
inline int RspUpdateDeviceInfo::update_devices_size() const {
  return update_devices_.size();
}
inline void RspUpdateDeviceInfo::clear_update_devices() {
  update_devices_.Clear();
}
inline const ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo& RspUpdateDeviceInfo::update_devices(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspUpdateDeviceInfo.update_devices)
  return update_devices_.Get(index);
}
inline ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo* RspUpdateDeviceInfo::mutable_update_devices(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspUpdateDeviceInfo.update_devices)
  return update_devices_.Mutable(index);
}
inline ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo* RspUpdateDeviceInfo::add_update_devices() {
  // @@protoc_insertion_point(field_add:SRMsgs.RspUpdateDeviceInfo.update_devices)
  return update_devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo >&
RspUpdateDeviceInfo::update_devices() const {
  // @@protoc_insertion_point(field_list:SRMsgs.RspUpdateDeviceInfo.update_devices)
  return update_devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::RspUpdateDeviceInfo_DeviceInfo >*
RspUpdateDeviceInfo::mutable_update_devices() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.RspUpdateDeviceInfo.update_devices)
  return &update_devices_;
}

// -------------------------------------------------------------------

// CmdGWOPMonitor

// optional string token = 1;
inline bool CmdGWOPMonitor::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdGWOPMonitor::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdGWOPMonitor::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdGWOPMonitor::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CmdGWOPMonitor::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.token)
  return *token_;
}
inline void CmdGWOPMonitor::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.token)
}
inline void CmdGWOPMonitor::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPMonitor.token)
}
inline void CmdGWOPMonitor::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPMonitor.token)
}
inline ::std::string* CmdGWOPMonitor::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPMonitor.token)
  return token_;
}
inline ::std::string* CmdGWOPMonitor::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPMonitor::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPMonitor.token)
}

// optional uint32 optype = 2;
inline bool CmdGWOPMonitor::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdGWOPMonitor::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdGWOPMonitor::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdGWOPMonitor::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 CmdGWOPMonitor::optype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.optype)
  return optype_;
}
inline void CmdGWOPMonitor::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.optype)
}

// optional string platformcode = 3;
inline bool CmdGWOPMonitor::has_platformcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdGWOPMonitor::set_has_platformcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdGWOPMonitor::clear_has_platformcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdGWOPMonitor::clear_platformcode() {
  if (platformcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformcode_->clear();
  }
  clear_has_platformcode();
}
inline const ::std::string& CmdGWOPMonitor::platformcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.platformcode)
  return *platformcode_;
}
inline void CmdGWOPMonitor::set_platformcode(const ::std::string& value) {
  set_has_platformcode();
  if (platformcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformcode_ = new ::std::string;
  }
  platformcode_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.platformcode)
}
inline void CmdGWOPMonitor::set_platformcode(const char* value) {
  set_has_platformcode();
  if (platformcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformcode_ = new ::std::string;
  }
  platformcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPMonitor.platformcode)
}
inline void CmdGWOPMonitor::set_platformcode(const char* value, size_t size) {
  set_has_platformcode();
  if (platformcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformcode_ = new ::std::string;
  }
  platformcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPMonitor.platformcode)
}
inline ::std::string* CmdGWOPMonitor::mutable_platformcode() {
  set_has_platformcode();
  if (platformcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPMonitor.platformcode)
  return platformcode_;
}
inline ::std::string* CmdGWOPMonitor::release_platformcode() {
  clear_has_platformcode();
  if (platformcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platformcode_;
    platformcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPMonitor::set_allocated_platformcode(::std::string* platformcode) {
  if (platformcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformcode_;
  }
  if (platformcode) {
    set_has_platformcode();
    platformcode_ = platformcode;
  } else {
    clear_has_platformcode();
    platformcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPMonitor.platformcode)
}

// optional string dsturl = 4;
inline bool CmdGWOPMonitor::has_dsturl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdGWOPMonitor::set_has_dsturl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdGWOPMonitor::clear_has_dsturl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdGWOPMonitor::clear_dsturl() {
  if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsturl_->clear();
  }
  clear_has_dsturl();
}
inline const ::std::string& CmdGWOPMonitor::dsturl() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.dsturl)
  return *dsturl_;
}
inline void CmdGWOPMonitor::set_dsturl(const ::std::string& value) {
  set_has_dsturl();
  if (dsturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsturl_ = new ::std::string;
  }
  dsturl_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.dsturl)
}
inline void CmdGWOPMonitor::set_dsturl(const char* value) {
  set_has_dsturl();
  if (dsturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsturl_ = new ::std::string;
  }
  dsturl_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPMonitor.dsturl)
}
inline void CmdGWOPMonitor::set_dsturl(const char* value, size_t size) {
  set_has_dsturl();
  if (dsturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsturl_ = new ::std::string;
  }
  dsturl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPMonitor.dsturl)
}
inline ::std::string* CmdGWOPMonitor::mutable_dsturl() {
  set_has_dsturl();
  if (dsturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dsturl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPMonitor.dsturl)
  return dsturl_;
}
inline ::std::string* CmdGWOPMonitor::release_dsturl() {
  clear_has_dsturl();
  if (dsturl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dsturl_;
    dsturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPMonitor::set_allocated_dsturl(::std::string* dsturl) {
  if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dsturl_;
  }
  if (dsturl) {
    set_has_dsturl();
    dsturl_ = dsturl;
  } else {
    clear_has_dsturl();
    dsturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPMonitor.dsturl)
}

// optional string platformnewcode = 5;
inline bool CmdGWOPMonitor::has_platformnewcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdGWOPMonitor::set_has_platformnewcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdGWOPMonitor::clear_has_platformnewcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdGWOPMonitor::clear_platformnewcode() {
  if (platformnewcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewcode_->clear();
  }
  clear_has_platformnewcode();
}
inline const ::std::string& CmdGWOPMonitor::platformnewcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.platformnewcode)
  return *platformnewcode_;
}
inline void CmdGWOPMonitor::set_platformnewcode(const ::std::string& value) {
  set_has_platformnewcode();
  if (platformnewcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewcode_ = new ::std::string;
  }
  platformnewcode_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.platformnewcode)
}
inline void CmdGWOPMonitor::set_platformnewcode(const char* value) {
  set_has_platformnewcode();
  if (platformnewcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewcode_ = new ::std::string;
  }
  platformnewcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPMonitor.platformnewcode)
}
inline void CmdGWOPMonitor::set_platformnewcode(const char* value, size_t size) {
  set_has_platformnewcode();
  if (platformnewcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewcode_ = new ::std::string;
  }
  platformnewcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPMonitor.platformnewcode)
}
inline ::std::string* CmdGWOPMonitor::mutable_platformnewcode() {
  set_has_platformnewcode();
  if (platformnewcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPMonitor.platformnewcode)
  return platformnewcode_;
}
inline ::std::string* CmdGWOPMonitor::release_platformnewcode() {
  clear_has_platformnewcode();
  if (platformnewcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platformnewcode_;
    platformnewcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPMonitor::set_allocated_platformnewcode(::std::string* platformnewcode) {
  if (platformnewcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformnewcode_;
  }
  if (platformnewcode) {
    set_has_platformnewcode();
    platformnewcode_ = platformnewcode;
  } else {
    clear_has_platformnewcode();
    platformnewcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPMonitor.platformnewcode)
}

// optional string platformnewkey = 6;
inline bool CmdGWOPMonitor::has_platformnewkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdGWOPMonitor::set_has_platformnewkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdGWOPMonitor::clear_has_platformnewkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdGWOPMonitor::clear_platformnewkey() {
  if (platformnewkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewkey_->clear();
  }
  clear_has_platformnewkey();
}
inline const ::std::string& CmdGWOPMonitor::platformnewkey() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPMonitor.platformnewkey)
  return *platformnewkey_;
}
inline void CmdGWOPMonitor::set_platformnewkey(const ::std::string& value) {
  set_has_platformnewkey();
  if (platformnewkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewkey_ = new ::std::string;
  }
  platformnewkey_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPMonitor.platformnewkey)
}
inline void CmdGWOPMonitor::set_platformnewkey(const char* value) {
  set_has_platformnewkey();
  if (platformnewkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewkey_ = new ::std::string;
  }
  platformnewkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPMonitor.platformnewkey)
}
inline void CmdGWOPMonitor::set_platformnewkey(const char* value, size_t size) {
  set_has_platformnewkey();
  if (platformnewkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewkey_ = new ::std::string;
  }
  platformnewkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPMonitor.platformnewkey)
}
inline ::std::string* CmdGWOPMonitor::mutable_platformnewkey() {
  set_has_platformnewkey();
  if (platformnewkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platformnewkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPMonitor.platformnewkey)
  return platformnewkey_;
}
inline ::std::string* CmdGWOPMonitor::release_platformnewkey() {
  clear_has_platformnewkey();
  if (platformnewkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platformnewkey_;
    platformnewkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPMonitor::set_allocated_platformnewkey(::std::string* platformnewkey) {
  if (platformnewkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformnewkey_;
  }
  if (platformnewkey) {
    set_has_platformnewkey();
    platformnewkey_ = platformnewkey;
  } else {
    clear_has_platformnewkey();
    platformnewkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPMonitor.platformnewkey)
}

// -------------------------------------------------------------------

// CmdGWOPAVConfig_Capset

// optional string fmt = 1;
inline bool CmdGWOPAVConfig_Capset::has_fmt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdGWOPAVConfig_Capset::set_has_fmt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdGWOPAVConfig_Capset::clear_has_fmt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdGWOPAVConfig_Capset::clear_fmt() {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_->clear();
  }
  clear_has_fmt();
}
inline const ::std::string& CmdGWOPAVConfig_Capset::fmt() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
  return *fmt_;
}
inline void CmdGWOPAVConfig_Capset::set_fmt(const ::std::string& value) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
}
inline void CmdGWOPAVConfig_Capset::set_fmt(const char* value) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
}
inline void CmdGWOPAVConfig_Capset::set_fmt(const char* value, size_t size) {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  fmt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
}
inline ::std::string* CmdGWOPAVConfig_Capset::mutable_fmt() {
  set_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fmt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
  return fmt_;
}
inline ::std::string* CmdGWOPAVConfig_Capset::release_fmt() {
  clear_has_fmt();
  if (fmt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fmt_;
    fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPAVConfig_Capset::set_allocated_fmt(::std::string* fmt) {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fmt_;
  }
  if (fmt) {
    set_has_fmt();
    fmt_ = fmt;
  } else {
    clear_has_fmt();
    fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPAVConfig.Capset.fmt)
}

// -------------------------------------------------------------------

// CmdGWOPAVConfig_CapInfo

// optional uint32 captype = 1;
inline bool CmdGWOPAVConfig_CapInfo::has_captype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdGWOPAVConfig_CapInfo::set_has_captype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdGWOPAVConfig_CapInfo::clear_has_captype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdGWOPAVConfig_CapInfo::clear_captype() {
  captype_ = 0u;
  clear_has_captype();
}
inline ::google::protobuf::uint32 CmdGWOPAVConfig_CapInfo::captype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.CapInfo.captype)
  return captype_;
}
inline void CmdGWOPAVConfig_CapInfo::set_captype(::google::protobuf::uint32 value) {
  set_has_captype();
  captype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPAVConfig.CapInfo.captype)
}

// repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
inline int CmdGWOPAVConfig_CapInfo::capsets_size() const {
  return capsets_.size();
}
inline void CmdGWOPAVConfig_CapInfo::clear_capsets() {
  capsets_.Clear();
}
inline const ::SRMsgs::CmdGWOPAVConfig_Capset& CmdGWOPAVConfig_CapInfo::capsets(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.CapInfo.capsets)
  return capsets_.Get(index);
}
inline ::SRMsgs::CmdGWOPAVConfig_Capset* CmdGWOPAVConfig_CapInfo::mutable_capsets(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPAVConfig.CapInfo.capsets)
  return capsets_.Mutable(index);
}
inline ::SRMsgs::CmdGWOPAVConfig_Capset* CmdGWOPAVConfig_CapInfo::add_capsets() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdGWOPAVConfig.CapInfo.capsets)
  return capsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_Capset >&
CmdGWOPAVConfig_CapInfo::capsets() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdGWOPAVConfig.CapInfo.capsets)
  return capsets_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_Capset >*
CmdGWOPAVConfig_CapInfo::mutable_capsets() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdGWOPAVConfig.CapInfo.capsets)
  return &capsets_;
}

// -------------------------------------------------------------------

// CmdGWOPAVConfig

// optional string token = 1;
inline bool CmdGWOPAVConfig::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdGWOPAVConfig::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdGWOPAVConfig::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdGWOPAVConfig::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CmdGWOPAVConfig::token() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.token)
  return *token_;
}
inline void CmdGWOPAVConfig::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPAVConfig.token)
}
inline void CmdGWOPAVConfig::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.CmdGWOPAVConfig.token)
}
inline void CmdGWOPAVConfig::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.CmdGWOPAVConfig.token)
}
inline ::std::string* CmdGWOPAVConfig::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPAVConfig.token)
  return token_;
}
inline ::std::string* CmdGWOPAVConfig::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CmdGWOPAVConfig::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.CmdGWOPAVConfig.token)
}

// optional uint32 optype = 2;
inline bool CmdGWOPAVConfig::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdGWOPAVConfig::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdGWOPAVConfig::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdGWOPAVConfig::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 CmdGWOPAVConfig::optype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.optype)
  return optype_;
}
inline void CmdGWOPAVConfig::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.CmdGWOPAVConfig.optype)
}

// repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
inline int CmdGWOPAVConfig::capinfos_size() const {
  return capinfos_.size();
}
inline void CmdGWOPAVConfig::clear_capinfos() {
  capinfos_.Clear();
}
inline const ::SRMsgs::CmdGWOPAVConfig_CapInfo& CmdGWOPAVConfig::capinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.CmdGWOPAVConfig.capinfos)
  return capinfos_.Get(index);
}
inline ::SRMsgs::CmdGWOPAVConfig_CapInfo* CmdGWOPAVConfig::mutable_capinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.CmdGWOPAVConfig.capinfos)
  return capinfos_.Mutable(index);
}
inline ::SRMsgs::CmdGWOPAVConfig_CapInfo* CmdGWOPAVConfig::add_capinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.CmdGWOPAVConfig.capinfos)
  return capinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_CapInfo >&
CmdGWOPAVConfig::capinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.CmdGWOPAVConfig.capinfos)
  return capinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::CmdGWOPAVConfig_CapInfo >*
CmdGWOPAVConfig::mutable_capinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.CmdGWOPAVConfig.capinfos)
  return &capinfos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5fser_2eproto__INCLUDED
