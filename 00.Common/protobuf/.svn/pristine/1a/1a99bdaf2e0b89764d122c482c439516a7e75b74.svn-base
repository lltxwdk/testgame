// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_netmp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_netmp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* ReqNetMPCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNetMPCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndDeleteOtherNetMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndDeleteOtherNetMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerLeft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerLeft_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPChangeTerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPChangeTerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToNetMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerSendMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerSendMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerSendMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerRecvMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerRecvMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerAssistVideoOn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerAssistVideoOn_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPTerAssistVideoOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPTerAssistVideoOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdNetMPTerVideoSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdNetMPTerVideoSelect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdNetMPTerVideoSelect_TerVideoSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdNetMPTerVideoSelect_TerVideoSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdNetMPTerSelectAssistVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdNetMPTerSelectAssistVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdNetMPConfDestroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdNetMPConfDestroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPHeartBeatOfMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPHeartBeatOfMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllNetMPs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllNetMPs_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllNetMPs_TersInNetMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllNetMPs_TersInNetMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllNetMPs_NetMPsInConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllNetMPs_NetMPsInConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAddNewNetMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAddNewNetMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToNetMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToNetMp_ScreensInMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToNetMp_MPIsInConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPIChannelidToNetMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPIChannelidToNetMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfScreenInfoInMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfScreenInfoInMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpdateMPIChannelInfoToNetMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpdateMPIChannelInfoToNetMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSChannelidToNetMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSChannelidToNetMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASChannelidToNetMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASChannelidToNetMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMCConfCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMCConfCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCHeartBeatOfNetMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatOfNetMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_AdvanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_AudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_XfeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5fnetmp_2eproto() {
  protobuf_AddDesc_mc_5fnetmp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_netmp.proto");
  GOOGLE_CHECK(file != NULL);
  ReqNetMPCreateConf_descriptor_ = file->message_type(0);
  static const int ReqNetMPCreateConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, maxterms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, netmpno_),
  };
  ReqNetMPCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqNetMPCreateConf_descriptor_,
      ReqNetMPCreateConf::default_instance_,
      ReqNetMPCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNetMPCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqNetMPCreateConf));
  IndDeleteOtherNetMP_descriptor_ = file->message_type(1);
  static const int IndDeleteOtherNetMP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, delnetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, delnetmpno_),
  };
  IndDeleteOtherNetMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndDeleteOtherNetMP_descriptor_,
      IndDeleteOtherNetMP::default_instance_,
      IndDeleteOtherNetMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDeleteOtherNetMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndDeleteOtherNetMP));
  IndNetMPTerJoined_descriptor_ = file->message_type(2);
  static const int IndNetMPTerJoined_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, gmrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, gmrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, gmrname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, producttype_),
  };
  IndNetMPTerJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerJoined_descriptor_,
      IndNetMPTerJoined::default_instance_,
      IndNetMPTerJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerJoined));
  IndNetMPTerLeft_descriptor_ = file->message_type(3);
  static const int IndNetMPTerLeft_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, gmrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, gmrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, gmrname_),
  };
  IndNetMPTerLeft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerLeft_descriptor_,
      IndNetMPTerLeft::default_instance_,
      IndNetMPTerLeft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerLeft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerLeft));
  IndNetMPChangeTerInfo_descriptor_ = file->message_type(4);
  static const int IndNetMPChangeTerInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, gmrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, gmrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, gmrname_),
  };
  IndNetMPChangeTerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPChangeTerInfo_descriptor_,
      IndNetMPChangeTerInfo::default_instance_,
      IndNetMPChangeTerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPChangeTerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPChangeTerInfo));
  IndConfAllTerMediaFormatToNetMP_descriptor_ = file->message_type(5);
  static const int IndConfAllTerMediaFormatToNetMP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, tersmediainfo_),
  };
  IndConfAllTerMediaFormatToNetMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToNetMP_descriptor_,
      IndConfAllTerMediaFormatToNetMP::default_instance_,
      IndConfAllTerMediaFormatToNetMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToNetMP));
  IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_ = IndConfAllTerMediaFormatToNetMP_descriptor_->nested_type(0);
  static const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, videobandwidth_),
  };
  IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_,
      IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance_,
      IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat));
  IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_ = IndConfAllTerMediaFormatToNetMP_descriptor_->nested_type(1);
  static const int IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt, sendmediaformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt, recvmediaformat_),
  };
  IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_,
      IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance_,
      IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt));
  IndNetMPTerMediaFormat_descriptor_ = file->message_type(6);
  static const int IndNetMPTerMediaFormat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, sendmediaformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, recvmediaformat_),
  };
  IndNetMPTerMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerMediaFormat_descriptor_,
      IndNetMPTerMediaFormat::default_instance_,
      IndNetMPTerMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerMediaFormat));
  IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_ = IndNetMPTerMediaFormat_descriptor_->nested_type(0);
  static const int IndNetMPTerMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndNetMPTerMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_,
      IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance_,
      IndNetMPTerMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerMediaFormat_MediaTypeAndFormat));
  IndNetMPTerSendMediaFormat_descriptor_ = file->message_type(7);
  static const int IndNetMPTerSendMediaFormat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, sendmediaformat_),
  };
  IndNetMPTerSendMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerSendMediaFormat_descriptor_,
      IndNetMPTerSendMediaFormat::default_instance_,
      IndNetMPTerSendMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerSendMediaFormat));
  IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_ = IndNetMPTerSendMediaFormat_descriptor_->nested_type(0);
  static const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndNetMPTerSendMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_,
      IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_,
      IndNetMPTerSendMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerSendMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerSendMediaFormat_MediaTypeAndFormat));
  IndNetMPTerRecvMediaFormat_descriptor_ = file->message_type(8);
  static const int IndNetMPTerRecvMediaFormat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, recvmediaformat_),
  };
  IndNetMPTerRecvMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerRecvMediaFormat_descriptor_,
      IndNetMPTerRecvMediaFormat::default_instance_,
      IndNetMPTerRecvMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerRecvMediaFormat));
  IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_ = IndNetMPTerRecvMediaFormat_descriptor_->nested_type(0);
  static const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_,
      IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_,
      IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat));
  IndNetMPTerAssistVideoOn_descriptor_ = file->message_type(9);
  static const int IndNetMPTerAssistVideoOn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, duovideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, avtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, sharedaudio_),
  };
  IndNetMPTerAssistVideoOn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerAssistVideoOn_descriptor_,
      IndNetMPTerAssistVideoOn::default_instance_,
      IndNetMPTerAssistVideoOn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerAssistVideoOn));
  IndNetMPTerAssistVideoOff_descriptor_ = file->message_type(10);
  static const int IndNetMPTerAssistVideoOff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, duovideoid_),
  };
  IndNetMPTerAssistVideoOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPTerAssistVideoOff_descriptor_,
      IndNetMPTerAssistVideoOff::default_instance_,
      IndNetMPTerAssistVideoOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPTerAssistVideoOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPTerAssistVideoOff));
  CmdNetMPTerVideoSelect_descriptor_ = file->message_type(11);
  static const int CmdNetMPTerVideoSelect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, tervideoneed_),
  };
  CmdNetMPTerVideoSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdNetMPTerVideoSelect_descriptor_,
      CmdNetMPTerVideoSelect::default_instance_,
      CmdNetMPTerVideoSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdNetMPTerVideoSelect));
  CmdNetMPTerVideoSelect_TerVideoSend_descriptor_ = CmdNetMPTerVideoSelect_descriptor_->nested_type(0);
  static const int CmdNetMPTerVideoSelect_TerVideoSend_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, videosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, delayopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, replaceterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, recvfps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, replacescreenid_),
  };
  CmdNetMPTerVideoSelect_TerVideoSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdNetMPTerVideoSelect_TerVideoSend_descriptor_,
      CmdNetMPTerVideoSelect_TerVideoSend::default_instance_,
      CmdNetMPTerVideoSelect_TerVideoSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerVideoSelect_TerVideoSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdNetMPTerVideoSelect_TerVideoSend));
  CmdNetMPTerSelectAssistVideo_descriptor_ = file->message_type(12);
  static const int CmdNetMPTerSelectAssistVideo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, needvideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, needvideosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, beselterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, beselchannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, beselrelatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, beselscreenid_),
  };
  CmdNetMPTerSelectAssistVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdNetMPTerSelectAssistVideo_descriptor_,
      CmdNetMPTerSelectAssistVideo::default_instance_,
      CmdNetMPTerSelectAssistVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPTerSelectAssistVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdNetMPTerSelectAssistVideo));
  CmdNetMPConfDestroy_descriptor_ = file->message_type(13);
  static const int CmdNetMPConfDestroy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, reason_),
  };
  CmdNetMPConfDestroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdNetMPConfDestroy_descriptor_,
      CmdNetMPConfDestroy::default_instance_,
      CmdNetMPConfDestroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdNetMPConfDestroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdNetMPConfDestroy));
  IndNetMPHeartBeatOfMC_descriptor_ = file->message_type(14);
  static const int IndNetMPHeartBeatOfMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPHeartBeatOfMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPHeartBeatOfMC, netmpid_),
  };
  IndNetMPHeartBeatOfMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPHeartBeatOfMC_descriptor_,
      IndNetMPHeartBeatOfMC::default_instance_,
      IndNetMPHeartBeatOfMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPHeartBeatOfMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPHeartBeatOfMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPHeartBeatOfMC));
  IndConfAllNetMPs_descriptor_ = file->message_type(15);
  static const int IndConfAllNetMPs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, netmps_),
  };
  IndConfAllNetMPs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllNetMPs_descriptor_,
      IndConfAllNetMPs::default_instance_,
      IndConfAllNetMPs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllNetMPs));
  IndConfAllNetMPs_TersInNetMP_descriptor_ = IndConfAllNetMPs_descriptor_->nested_type(0);
  static const int IndConfAllNetMPs_TersInNetMP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_TersInNetMP, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_TersInNetMP, channelid_),
  };
  IndConfAllNetMPs_TersInNetMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllNetMPs_TersInNetMP_descriptor_,
      IndConfAllNetMPs_TersInNetMP::default_instance_,
      IndConfAllNetMPs_TersInNetMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_TersInNetMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_TersInNetMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllNetMPs_TersInNetMP));
  IndConfAllNetMPs_NetMPsInConf_descriptor_ = IndConfAllNetMPs_descriptor_->nested_type(1);
  static const int IndConfAllNetMPs_NetMPsInConf_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, netmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, terids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, netmpno_),
  };
  IndConfAllNetMPs_NetMPsInConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllNetMPs_NetMPsInConf_descriptor_,
      IndConfAllNetMPs_NetMPsInConf::default_instance_,
      IndConfAllNetMPs_NetMPsInConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllNetMPs_NetMPsInConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllNetMPs_NetMPsInConf));
  IndConfAddNewNetMP_descriptor_ = file->message_type(16);
  static const int IndConfAddNewNetMP_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, newnetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, newnetmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, newnetmpno_),
  };
  IndConfAddNewNetMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAddNewNetMP_descriptor_,
      IndConfAddNewNetMP::default_instance_,
      IndConfAddNewNetMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAddNewNetMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAddNewNetMP));
  IndConfAllMPIInfoToNetMp_descriptor_ = file->message_type(17);
  static const int IndConfAllMPIInfoToNetMp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, mpis_),
  };
  IndConfAllMPIInfoToNetMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToNetMp_descriptor_,
      IndConfAllMPIInfoToNetMp::default_instance_,
      IndConfAllMPIInfoToNetMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToNetMp));
  IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_ = IndConfAllMPIInfoToNetMp_descriptor_->nested_type(0);
  static const int IndConfAllMPIInfoToNetMp_ScreensInMPI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_ScreensInMPI, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_ScreensInMPI, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_ScreensInMPI, relatedterid_),
  };
  IndConfAllMPIInfoToNetMp_ScreensInMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_,
      IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance_,
      IndConfAllMPIInfoToNetMp_ScreensInMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_ScreensInMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_ScreensInMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToNetMp_ScreensInMPI));
  IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_ = IndConfAllMPIInfoToNetMp_descriptor_->nested_type(1);
  static const int IndConfAllMPIInfoToNetMp_MPIsInConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, relatedmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, screens_),
  };
  IndConfAllMPIInfoToNetMp_MPIsInConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_,
      IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance_,
      IndConfAllMPIInfoToNetMp_MPIsInConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToNetMp_MPIsInConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToNetMp_MPIsInConf));
  IndMPIChannelidToNetMp_descriptor_ = file->message_type(18);
  static const int IndMPIChannelidToNetMp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, relatedmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, addordel_),
  };
  IndMPIChannelidToNetMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPIChannelidToNetMp_descriptor_,
      IndMPIChannelidToNetMp::default_instance_,
      IndMPIChannelidToNetMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIChannelidToNetMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPIChannelidToNetMp));
  IndConfScreenInfoInMP_descriptor_ = file->message_type(19);
  static const int IndConfScreenInfoInMP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, relatedmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, relatedmpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, relatedterid_),
  };
  IndConfScreenInfoInMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfScreenInfoInMP_descriptor_,
      IndConfScreenInfoInMP::default_instance_,
      IndConfScreenInfoInMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfScreenInfoInMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfScreenInfoInMP));
  IndUpdateMPIChannelInfoToNetMp_descriptor_ = file->message_type(20);
  static const int IndUpdateMPIChannelInfoToNetMp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, newrelatedmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, newrelatednetmpid_),
  };
  IndUpdateMPIChannelInfoToNetMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpdateMPIChannelInfoToNetMp_descriptor_,
      IndUpdateMPIChannelInfoToNetMp::default_instance_,
      IndUpdateMPIChannelInfoToNetMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpdateMPIChannelInfoToNetMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpdateMPIChannelInfoToNetMp));
  IndCRSChannelidToNetMp_descriptor_ = file->message_type(21);
  static const int IndCRSChannelidToNetMp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, addordel_),
  };
  IndCRSChannelidToNetMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSChannelidToNetMp_descriptor_,
      IndCRSChannelidToNetMp::default_instance_,
      IndCRSChannelidToNetMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelidToNetMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSChannelidToNetMp));
  IndVASChannelidToNetMp_descriptor_ = file->message_type(22);
  static const int IndVASChannelidToNetMp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, addordel_),
  };
  IndVASChannelidToNetMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASChannelidToNetMp_descriptor_,
      IndVASChannelidToNetMp::default_instance_,
      IndVASChannelidToNetMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASChannelidToNetMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASChannelidToNetMp));
  RspMCConfCreate_descriptor_ = file->message_type(23);
  static const int RspMCConfCreate_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, netmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, netmpno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, errorcode_),
  };
  RspMCConfCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspMCConfCreate_descriptor_,
      RspMCConfCreate::default_instance_,
      RspMCConfCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCConfCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspMCConfCreate));
  IndMCHeartBeatOfNetMP_descriptor_ = file->message_type(24);
  static const int IndMCHeartBeatOfNetMP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatOfNetMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatOfNetMP, netmpid_),
  };
  IndMCHeartBeatOfNetMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatOfNetMP_descriptor_,
      IndMCHeartBeatOfNetMP::default_instance_,
      IndMCHeartBeatOfNetMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatOfNetMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatOfNetMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatOfNetMP));
  IndTerStatisticsInfoFromNetmp_descriptor_ = file->message_type(25);
  static const int IndTerStatisticsInfoFromNetmp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, tsinfo_),
  };
  IndTerStatisticsInfoFromNetmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_descriptor_,
      IndTerStatisticsInfoFromNetmp::default_instance_,
      IndTerStatisticsInfoFromNetmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp));
  IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(0);
  static const int IndTerStatisticsInfoFromNetmp_FrameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_FrameInfo, fsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_FrameInfo, fsh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_FrameInfo, fps_),
  };
  IndTerStatisticsInfoFromNetmp_FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_FrameInfo));
  IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(1);
  static const int IndTerStatisticsInfoFromNetmp_AdvanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AdvanceInfo, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AdvanceInfo, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AdvanceInfo, loss_),
  };
  IndTerStatisticsInfoFromNetmp_AdvanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_AdvanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AdvanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AdvanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_AdvanceInfo));
  IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(2);
  static const int IndTerStatisticsInfoFromNetmp_BaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_BaseInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_BaseInfo, bitrate_),
  };
  IndTerStatisticsInfoFromNetmp_BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_BaseInfo));
  IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(3);
  static const int IndTerStatisticsInfoFromNetmp_AudioInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, atype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, aterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, advinfo_),
  };
  IndTerStatisticsInfoFromNetmp_AudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_AudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_AudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_AudioInfo));
  IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(4);
  static const int IndTerStatisticsInfoFromNetmp_VideoInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, vterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, advinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, frameinfo_),
  };
  IndTerStatisticsInfoFromNetmp_VideoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_VideoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_VideoInfo));
  IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(5);
  static const int IndTerStatisticsInfoFromNetmp_XfeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_XfeInfo, ainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_XfeInfo, vinfo_),
  };
  IndTerStatisticsInfoFromNetmp_XfeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_XfeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_XfeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_XfeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_XfeInfo));
  IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_ = IndTerStatisticsInfoFromNetmp_descriptor_->nested_type(6);
  static const int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, txinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, rxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, txbweresult_),
  };
  IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_,
      IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance_,
      IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5fnetmp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqNetMPCreateConf_descriptor_, &ReqNetMPCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndDeleteOtherNetMP_descriptor_, &IndDeleteOtherNetMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerJoined_descriptor_, &IndNetMPTerJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerLeft_descriptor_, &IndNetMPTerLeft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPChangeTerInfo_descriptor_, &IndNetMPChangeTerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToNetMP_descriptor_, &IndConfAllTerMediaFormatToNetMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_, &IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_, &IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerMediaFormat_descriptor_, &IndNetMPTerMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_, &IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerSendMediaFormat_descriptor_, &IndNetMPTerSendMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_, &IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerRecvMediaFormat_descriptor_, &IndNetMPTerRecvMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_, &IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerAssistVideoOn_descriptor_, &IndNetMPTerAssistVideoOn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPTerAssistVideoOff_descriptor_, &IndNetMPTerAssistVideoOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdNetMPTerVideoSelect_descriptor_, &CmdNetMPTerVideoSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdNetMPTerVideoSelect_TerVideoSend_descriptor_, &CmdNetMPTerVideoSelect_TerVideoSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdNetMPTerSelectAssistVideo_descriptor_, &CmdNetMPTerSelectAssistVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdNetMPConfDestroy_descriptor_, &CmdNetMPConfDestroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPHeartBeatOfMC_descriptor_, &IndNetMPHeartBeatOfMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllNetMPs_descriptor_, &IndConfAllNetMPs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllNetMPs_TersInNetMP_descriptor_, &IndConfAllNetMPs_TersInNetMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllNetMPs_NetMPsInConf_descriptor_, &IndConfAllNetMPs_NetMPsInConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAddNewNetMP_descriptor_, &IndConfAddNewNetMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToNetMp_descriptor_, &IndConfAllMPIInfoToNetMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_, &IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_, &IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPIChannelidToNetMp_descriptor_, &IndMPIChannelidToNetMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfScreenInfoInMP_descriptor_, &IndConfScreenInfoInMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpdateMPIChannelInfoToNetMp_descriptor_, &IndUpdateMPIChannelInfoToNetMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSChannelidToNetMp_descriptor_, &IndCRSChannelidToNetMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASChannelidToNetMp_descriptor_, &IndVASChannelidToNetMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspMCConfCreate_descriptor_, &RspMCConfCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatOfNetMP_descriptor_, &IndMCHeartBeatOfNetMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_descriptor_, &IndTerStatisticsInfoFromNetmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_, &IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5fnetmp_2eproto() {
  delete ReqNetMPCreateConf::default_instance_;
  delete ReqNetMPCreateConf_reflection_;
  delete IndDeleteOtherNetMP::default_instance_;
  delete IndDeleteOtherNetMP_reflection_;
  delete IndNetMPTerJoined::default_instance_;
  delete IndNetMPTerJoined_reflection_;
  delete IndNetMPTerLeft::default_instance_;
  delete IndNetMPTerLeft_reflection_;
  delete IndNetMPChangeTerInfo::default_instance_;
  delete IndNetMPChangeTerInfo_reflection_;
  delete IndConfAllTerMediaFormatToNetMP::default_instance_;
  delete IndConfAllTerMediaFormatToNetMP_reflection_;
  delete IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance_;
  delete IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_reflection_;
  delete IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance_;
  delete IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_reflection_;
  delete IndNetMPTerMediaFormat::default_instance_;
  delete IndNetMPTerMediaFormat_reflection_;
  delete IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndNetMPTerMediaFormat_MediaTypeAndFormat_reflection_;
  delete IndNetMPTerSendMediaFormat::default_instance_;
  delete IndNetMPTerSendMediaFormat_reflection_;
  delete IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndNetMPTerSendMediaFormat_MediaTypeAndFormat_reflection_;
  delete IndNetMPTerRecvMediaFormat::default_instance_;
  delete IndNetMPTerRecvMediaFormat_reflection_;
  delete IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_;
  delete IndNetMPTerAssistVideoOn::default_instance_;
  delete IndNetMPTerAssistVideoOn_reflection_;
  delete IndNetMPTerAssistVideoOff::default_instance_;
  delete IndNetMPTerAssistVideoOff_reflection_;
  delete CmdNetMPTerVideoSelect::default_instance_;
  delete CmdNetMPTerVideoSelect_reflection_;
  delete CmdNetMPTerVideoSelect_TerVideoSend::default_instance_;
  delete CmdNetMPTerVideoSelect_TerVideoSend_reflection_;
  delete CmdNetMPTerSelectAssistVideo::default_instance_;
  delete CmdNetMPTerSelectAssistVideo_reflection_;
  delete CmdNetMPConfDestroy::default_instance_;
  delete CmdNetMPConfDestroy_reflection_;
  delete IndNetMPHeartBeatOfMC::default_instance_;
  delete IndNetMPHeartBeatOfMC_reflection_;
  delete IndConfAllNetMPs::default_instance_;
  delete IndConfAllNetMPs_reflection_;
  delete IndConfAllNetMPs_TersInNetMP::default_instance_;
  delete IndConfAllNetMPs_TersInNetMP_reflection_;
  delete IndConfAllNetMPs_NetMPsInConf::default_instance_;
  delete IndConfAllNetMPs_NetMPsInConf_reflection_;
  delete IndConfAddNewNetMP::default_instance_;
  delete IndConfAddNewNetMP_reflection_;
  delete IndConfAllMPIInfoToNetMp::default_instance_;
  delete IndConfAllMPIInfoToNetMp_reflection_;
  delete IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance_;
  delete IndConfAllMPIInfoToNetMp_ScreensInMPI_reflection_;
  delete IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance_;
  delete IndConfAllMPIInfoToNetMp_MPIsInConf_reflection_;
  delete IndMPIChannelidToNetMp::default_instance_;
  delete IndMPIChannelidToNetMp_reflection_;
  delete IndConfScreenInfoInMP::default_instance_;
  delete IndConfScreenInfoInMP_reflection_;
  delete IndUpdateMPIChannelInfoToNetMp::default_instance_;
  delete IndUpdateMPIChannelInfoToNetMp_reflection_;
  delete IndCRSChannelidToNetMp::default_instance_;
  delete IndCRSChannelidToNetMp_reflection_;
  delete IndVASChannelidToNetMp::default_instance_;
  delete IndVASChannelidToNetMp_reflection_;
  delete RspMCConfCreate::default_instance_;
  delete RspMCConfCreate_reflection_;
  delete IndMCHeartBeatOfNetMP::default_instance_;
  delete IndMCHeartBeatOfNetMP_reflection_;
  delete IndTerStatisticsInfoFromNetmp::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_reflection_;
  delete IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_FrameInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_AdvanceInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_BaseInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_AudioInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_VideoInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_XfeInfo_reflection_;
  delete IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance_;
  delete IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_reflection_;
}

void protobuf_AddDesc_mc_5fnetmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016mc_netmp.proto\022\006SRMsgs\"f\n\022ReqNetMPCrea"
    "teConf\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007"
    "netmpid\030\003 \001(\r\022\020\n\010maxterms\030\004 \001(\r\022\017\n\007netmp"
    "no\030\005 \001(\r\"l\n\023IndDeleteOtherNetMP\022\016\n\006confi"
    "d\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\022"
    "\n\ndelnetmpid\030\004 \001(\r\022\022\n\ndelnetmpno\030\005 \001(\r\"\346"
    "\001\n\021IndNetMPTerJoined\022\016\n\006confid\030\001 \001(\004\022\014\n\004"
    "mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005terid\030\004 \001"
    "(\r\022\026\n\016relatednetmpid\030\005 \001(\r\022\021\n\tchannelid\030"
    "\006 \001(\r\022\020\n\010termtype\030\007 \001(\r\022\020\n\010fromtype\030\010 \001("
    "\r\022\017\n\007gmrtype\030\t \001(\r\022\r\n\005gmrid\030\n \001(\r\022\017\n\007gmr"
    "name\030\013 \001(\t\022\023\n\013producttype\030\014 \001(\r\"\253\001\n\017IndN"
    "etMPTerLeft\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001("
    "\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\026\n\016rel"
    "atednetmpid\030\005 \001(\r\022\021\n\tchannelid\030\006 \001(\r\022\017\n\007"
    "gmrtype\030\007 \001(\r\022\r\n\005gmrid\030\010 \001(\r\022\017\n\007gmrname\030"
    "\t \001(\t\"\352\001\n\025IndNetMPChangeTerInfo\022\016\n\006confi"
    "d\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r"
    "\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\026\n\016rela"
    "tednetmpid\030\006 \001(\r\022\020\n\010termtype\030\007 \001(\r\022\020\n\010fr"
    "omtype\030\010 \001(\r\022\023\n\013producttype\030\t \001(\r\022\017\n\007gmr"
    "type\030\n \001(\r\022\r\n\005gmrid\030\013 \001(\r\022\017\n\007gmrname\030\014 \001"
    "(\t\"\317\004\n\037IndConfAllTerMediaFormatToNetMP\022\016"
    "\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030"
    "\003 \001(\r\022L\n\rtersmediainfo\030\004 \003(\01325.SRMsgs.In"
    "dConfAllTerMediaFormatToNetMP.TermsMedia"
    "Fmt\032\343\001\n\022MediaTypeAndFormat\022\020\n\010audiofmt\030\001"
    " \001(\r\022\026\n\016audiofrequency\030\002 \001(\r\022\027\n\017audiocha"
    "nnelnum\030\003 \001(\r\022\025\n\raudioframelen\030\004 \001(\r\022\017\n\007"
    "audiopt\030\005 \001(\r\022\020\n\010videofmt\030\006 \001(\r\022\017\n\007video"
    "pt\030\007 \001(\r\022\023\n\013duovideofmt\030\010 \001(\r\022\022\n\nduovide"
    "opt\030\t \001(\r\022\026\n\016videobandwidth\030\n \001(\r\032\310\001\n\rTe"
    "rmsMediaFmt\022\r\n\005terid\030\001 \001(\r\022S\n\017sendmediaf"
    "ormat\030\002 \001(\0132:.SRMsgs.IndConfAllTerMediaF"
    "ormatToNetMP.MediaTypeAndFormat\022S\n\017recvm"
    "ediaformat\030\003 \001(\0132:.SRMsgs.IndConfAllTerM"
    "ediaFormatToNetMP.MediaTypeAndFormat\"\347\003\n"
    "\026IndNetMPTerMediaFormat\022\016\n\006confid\030\001 \001(\004\022"
    "\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005terid\030"
    "\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022J\n\017sendmediafor"
    "mat\030\006 \001(\01321.SRMsgs.IndNetMPTerMediaForma"
    "t.MediaTypeAndFormat\022J\n\017recvmediaformat\030"
    "\007 \001(\01321.SRMsgs.IndNetMPTerMediaFormat.Me"
    "diaTypeAndFormat\032\343\001\n\022MediaTypeAndFormat\022"
    "\020\n\010audiofmt\030\001 \001(\r\022\026\n\016audiofrequency\030\002 \001("
    "\r\022\027\n\017audiochannelnum\030\003 \001(\r\022\025\n\raudioframe"
    "len\030\004 \001(\r\022\017\n\007audiopt\030\005 \001(\r\022\020\n\010videofmt\030\006"
    " \001(\r\022\017\n\007videopt\030\007 \001(\r\022\023\n\013duovideofmt\030\010 \001"
    "(\r\022\022\n\nduovideopt\030\t \001(\r\022\026\n\016videobandwidth"
    "\030\n \001(\r\"\243\003\n\032IndNetMPTerSendMediaFormat\022\016\n"
    "\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003"
    " \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022N"
    "\n\017sendmediaformat\030\006 \001(\01325.SRMsgs.IndNetM"
    "PTerSendMediaFormat.MediaTypeAndFormat\032\343"
    "\001\n\022MediaTypeAndFormat\022\020\n\010audiofmt\030\001 \001(\r\022"
    "\026\n\016audiofrequency\030\002 \001(\r\022\027\n\017audiochanneln"
    "um\030\003 \001(\r\022\025\n\raudioframelen\030\004 \001(\r\022\017\n\007audio"
    "pt\030\005 \001(\r\022\020\n\010videofmt\030\006 \001(\r\022\017\n\007videopt\030\007 "
    "\001(\r\022\023\n\013duovideofmt\030\010 \001(\r\022\022\n\nduovideopt\030\t"
    " \001(\r\022\026\n\016videobandwidth\030\n \001(\r\"\243\003\n\032IndNetM"
    "PTerRecvMediaFormat\022\016\n\006confid\030\001 \001(\004\022\014\n\004m"
    "cid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005terid\030\004 \001("
    "\r\022\021\n\tchannelid\030\005 \001(\r\022N\n\017recvmediaformat\030"
    "\006 \001(\01325.SRMsgs.IndNetMPTerRecvMediaForma"
    "t.MediaTypeAndFormat\032\343\001\n\022MediaTypeAndFor"
    "mat\022\020\n\010audiofmt\030\001 \001(\r\022\026\n\016audiofrequency\030"
    "\002 \001(\r\022\027\n\017audiochannelnum\030\003 \001(\r\022\025\n\raudiof"
    "ramelen\030\004 \001(\r\022\017\n\007audiopt\030\005 \001(\r\022\020\n\010videof"
    "mt\030\006 \001(\r\022\017\n\007videopt\030\007 \001(\r\022\023\n\013duovideofmt"
    "\030\010 \001(\r\022\022\n\nduovideopt\030\t \001(\r\022\026\n\016videobandw"
    "idth\030\n \001(\r\"\202\001\n\030IndNetMPTerAssistVideoOn\022"
    "\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid"
    "\030\003 \001(\r\022\022\n\nduoVideoid\030\004 \001(\r\022\016\n\006avtype\030\005 \001"
    "(\r\022\023\n\013sharedaudio\030\006 \001(\r\"^\n\031IndNetMPTerAs"
    "sistVideoOff\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001"
    "(\r\022\017\n\007netmpid\030\003 \001(\r\022\022\n\nduoVideoid\030\004 \001(\r\""
    "\377\002\n\026CmdNetMPTerVideoSelect\022\016\n\006confid\030\001 \001"
    "(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005ter"
    "id\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\026\n\016relatedne"
    "tmpid\030\006 \001(\r\022A\n\014tervideoneed\030\007 \003(\0132+.SRMs"
    "gs.CmdNetMPTerVideoSelect.TerVideoSend\032\270"
    "\001\n\014TerVideoSend\022\r\n\005terid\030\001 \001(\r\022\021\n\tchanne"
    "lid\030\002 \001(\r\022\021\n\tvideosize\030\003 \001(\r\022\017\n\007netmpid\030"
    "\004 \001(\r\022\020\n\010screenid\030\005 \001(\r\022\020\n\010delayopt\030\006 \001("
    "\r\022\024\n\014replaceterid\030\007 \001(\r\022\017\n\007recvfps\030\010 \001(\r"
    "\022\027\n\017replacescreenid\030\t \001(\r\"\224\002\n\034CmdNetMPTe"
    "rSelectAssistVideo\022\016\n\006confid\030\001 \001(\004\022\014\n\004mc"
    "id\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r"
    "\022\021\n\tchannelid\030\005 \001(\r\022\026\n\016relatednetmpid\030\006 "
    "\001(\r\022\024\n\014needvideofmt\030\007 \001(\r\022\025\n\rneedvideosi"
    "ze\030\010 \001(\r\022\022\n\nbeselterid\030\t \001(\r\022\026\n\016beselcha"
    "nnelid\030\n \001(\r\022\033\n\023beselrelatednetmpid\030\013 \001("
    "\r\022\025\n\rbeselscreenid\030\014 \001(\r\"T\n\023CmdNetMPConf"
    "Destroy\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n"
    "\007netmpid\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\"6\n\025IndNet"
    "MPHeartBeatOfMC\022\014\n\004mcid\030\001 \001(\r\022\017\n\007netmpid"
    "\030\002 \001(\r\"\271\004\n\020IndConfAllNetMPs\022\014\n\004mcid\030\001 \001("
    "\r\022\017\n\007netmpid\030\002 \001(\r\022\016\n\006confid\030\003 \001(\004\0225\n\006ne"
    "tmps\030\004 \003(\0132%.SRMsgs.IndConfAllNetMPs.Net"
    "MPsInConf\032/\n\013TersInNetMP\022\r\n\005terid\030\001 \001(\r\022"
    "\021\n\tchannelid\030\002 \001(\r\032\215\003\n\014NetMPsInConf\022\017\n\007n"
    "etmpid\030\001 \001(\r\022\017\n\007netmpip\030\002 \001(\t\0224\n\006terids\030"
    "\003 \003(\0132$.SRMsgs.IndConfAllNetMPs.TersInNe"
    "tMP\022\031\n\021audiodatarecvport\030\004 \001(\r\022\031\n\021audioc"
    "trlrecvport\030\005 \001(\r\022\031\n\021videodatarecvport\030\006"
    " \001(\r\022\031\n\021videoctrlrecvport\030\007 \001(\r\022\032\n\022video"
    "2datarecvport\030\010 \001(\r\022\032\n\022video2ctrlrecvpor"
    "t\030\t \001(\r\022\032\n\022video3datarecvport\030\n \001(\r\022\032\n\022v"
    "ideo3ctrlrecvport\030\013 \001(\r\022\033\n\023desktopdatare"
    "cvport\030\014 \001(\r\022\033\n\023desktopctrlrecvport\030\r \001("
    "\r\022\017\n\007netmpno\030\016 \001(\r\"\225\003\n\022IndConfAddNewNetM"
    "P\022\014\n\004mcid\030\001 \001(\r\022\017\n\007netmpid\030\002 \001(\r\022\016\n\006conf"
    "id\030\003 \001(\004\022\022\n\nnewnetmpid\030\004 \001(\r\022\022\n\nnewnetmp"
    "ip\030\005 \001(\t\022\031\n\021audiodatarecvport\030\006 \001(\r\022\031\n\021a"
    "udioctrlrecvport\030\007 \001(\r\022\031\n\021videodatarecvp"
    "ort\030\010 \001(\r\022\031\n\021videoctrlrecvport\030\t \001(\r\022\032\n\022"
    "video2datarecvport\030\n \001(\r\022\032\n\022video2ctrlre"
    "cvport\030\013 \001(\r\022\032\n\022video3datarecvport\030\014 \001(\r"
    "\022\032\n\022video3ctrlrecvport\030\r \001(\r\022\033\n\023desktopd"
    "atarecvport\030\016 \001(\r\022\033\n\023desktopctrlrecvport"
    "\030\017 \001(\r\022\022\n\nnewnetmpno\030\020 \001(\r\"\342\002\n\030IndConfAl"
    "lMPIInfoToNetMp\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030"
    "\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\0229\n\004mpis\030\004 \003(\0132+.S"
    "RMsgs.IndConfAllMPIInfoToNetMp.MPIsInCon"
    "f\032J\n\014ScreensInMPI\022\020\n\010screenid\030\001 \001(\r\022\022\n\ns"
    "creentype\030\002 \001(\r\022\024\n\014relatedterid\030\003 \001(\r\032\217\001"
    "\n\nMPIsInConf\022\024\n\014mpichannelid\030\001 \001(\r\022\023\n\013re"
    "latedmpid\030\002 \001(\r\022\026\n\016relatednetmpid\030\003 \001(\r\022"
    ">\n\007screens\030\004 \003(\0132-.SRMsgs.IndConfAllMPII"
    "nfoToNetMp.ScreensInMPI\"\234\001\n\026IndMPIChanne"
    "lidToNetMp\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r"
    "\022\017\n\007netmpid\030\003 \001(\r\022\026\n\016relatednetmpid\030\004 \001("
    "\r\022\023\n\013relatedmpid\030\005 \001(\r\022\024\n\014mpichannelid\030\006"
    " \001(\r\022\020\n\010addordel\030\007 \001(\r\"\336\001\n\025IndConfScreen"
    "InfoInMP\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017"
    "\n\007netmpid\030\003 \001(\r\022\026\n\016relatednetmpid\030\004 \001(\r\022"
    "\023\n\013relatedmpid\030\005 \001(\r\022\033\n\023relatedmpichanne"
    "lid\030\006 \001(\r\022\020\n\010screenid\030\007 \001(\r\022\022\n\nscreentyp"
    "e\030\010 \001(\r\022\020\n\010addordel\030\t \001(\r\022\024\n\014relatedteri"
    "d\030\n \001(\r\"\230\001\n\036IndUpdateMPIChannelInfoToNet"
    "Mp\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netm"
    "pid\030\003 \001(\r\022\024\n\014mpichannelid\030\004 \001(\r\022\026\n\016newre"
    "latedmpid\030\005 \001(\r\022\031\n\021newrelatednetmpid\030\006 \001"
    "(\r\"\226\001\n\026IndCRSChannelidToNetMp\022\016\n\006confid\030"
    "\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\026\n\016"
    "relatednetmpid\030\004 \001(\r\022\r\n\005crsid\030\005 \001(\r\022\024\n\014c"
    "rschannelid\030\006 \001(\r\022\020\n\010addordel\030\007 \001(\r\"\226\001\n\026"
    "IndVASChannelidToNetMp\022\016\n\006confid\030\001 \001(\004\022\014"
    "\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022\026\n\016related"
    "netmpid\030\004 \001(\r\022\r\n\005vasid\030\005 \001(\r\022\024\n\014vaschann"
    "elid\030\006 \001(\r\022\020\n\010addordel\030\007 \001(\r\"\255\003\n\017RspMCCo"
    "nfCreate\022\014\n\004isok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014"
    "\n\004mcid\030\003 \001(\r\022\017\n\007netmpid\030\004 \001(\r\022\017\n\007netmpip"
    "\030\005 \001(\t\022\031\n\021audiodatarecvport\030\006 \001(\r\022\031\n\021aud"
    "ioctrlrecvport\030\007 \001(\r\022\031\n\021videodatarecvpor"
    "t\030\010 \001(\r\022\031\n\021videoctrlrecvport\030\t \001(\r\022\032\n\022vi"
    "deo2datarecvport\030\n \001(\r\022\032\n\022video2ctrlrecv"
    "port\030\013 \001(\r\022\032\n\022video3datarecvport\030\014 \001(\r\022\032"
    "\n\022video3ctrlrecvport\030\r \001(\r\022\033\n\023desktopdat"
    "arecvport\030\016 \001(\r\022\033\n\023desktopctrlrecvport\030\017"
    " \001(\r\022\022\n\nfailreason\030\020 \001(\t\022\017\n\007netmpno\030\021 \001("
    "\r\022\021\n\terrorcode\030\022 \001(\r\"6\n\025IndMCHeartBeatOf"
    "NetMP\022\014\n\004mcid\030\001 \001(\r\022\017\n\007netmpid\030\002 \001(\r\"\242\010\n"
    "\035IndTerStatisticsInfoFromNetmp\022\016\n\006confid"
    "\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\017\n\007netmpid\030\003 \001(\r\022G\n"
    "\006tsinfo\030\004 \003(\01327.SRMsgs.IndTerStatisticsI"
    "nfoFromNetmp.TerStatisticsInfo\0322\n\tFrameI"
    "nfo\022\013\n\003fsw\030\001 \001(\r\022\013\n\003fsh\030\002 \001(\r\022\013\n\003fps\030\003 \001"
    "(\r\032:\n\013AdvanceInfo\022\r\n\005delay\030\001 \001(\r\022\016\n\006jitt"
    "er\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\032+\n\010BaseInfo\022\016\n\006fo"
    "rmat\030\001 \001(\r\022\017\n\007bitrate\030\002 \001(\r\032\260\001\n\tAudioInf"
    "o\022\r\n\005atype\030\001 \001(\r\022\016\n\006aterid\030\002 \001(\r\022@\n\010base"
    "info\030\003 \001(\0132..SRMsgs.IndTerStatisticsInfo"
    "FromNetmp.BaseInfo\022B\n\007advinfo\030\004 \001(\01321.SR"
    "Msgs.IndTerStatisticsInfoFromNetmp.Advan"
    "ceInfo\032\364\001\n\tVideoInfo\022\r\n\005vtype\030\001 \001(\r\022\016\n\006v"
    "terid\030\002 \001(\r\022@\n\010baseinfo\030\003 \001(\0132..SRMsgs.I"
    "ndTerStatisticsInfoFromNetmp.BaseInfo\022B\n"
    "\007advinfo\030\004 \001(\01321.SRMsgs.IndTerStatistics"
    "InfoFromNetmp.AdvanceInfo\022B\n\tframeinfo\030\005"
    " \003(\0132/.SRMsgs.IndTerStatisticsInfoFromNe"
    "tmp.FrameInfo\032\211\001\n\007XfeInfo\022>\n\005ainfo\030\001 \003(\013"
    "2/.SRMsgs.IndTerStatisticsInfoFromNetmp."
    "AudioInfo\022>\n\005vinfo\030\002 \003(\0132/.SRMsgs.IndTer"
    "StatisticsInfoFromNetmp.VideoInfo\032\265\001\n\021Te"
    "rStatisticsInfo\022\r\n\005terid\030\001 \001(\r\022=\n\006txinfo"
    "\030\002 \003(\0132-.SRMsgs.IndTerStatisticsInfoFrom"
    "Netmp.XfeInfo\022=\n\006rxinfo\030\003 \003(\0132-.SRMsgs.I"
    "ndTerStatisticsInfoFromNetmp.XfeInfo\022\023\n\013"
    "txbweresult\030\004 \001(\r", 7577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_netmp.proto", &protobuf_RegisterTypes);
  ReqNetMPCreateConf::default_instance_ = new ReqNetMPCreateConf();
  IndDeleteOtherNetMP::default_instance_ = new IndDeleteOtherNetMP();
  IndNetMPTerJoined::default_instance_ = new IndNetMPTerJoined();
  IndNetMPTerLeft::default_instance_ = new IndNetMPTerLeft();
  IndNetMPChangeTerInfo::default_instance_ = new IndNetMPChangeTerInfo();
  IndConfAllTerMediaFormatToNetMP::default_instance_ = new IndConfAllTerMediaFormatToNetMP();
  IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance_ = new IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat();
  IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance_ = new IndConfAllTerMediaFormatToNetMP_TermsMediaFmt();
  IndNetMPTerMediaFormat::default_instance_ = new IndNetMPTerMediaFormat();
  IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance_ = new IndNetMPTerMediaFormat_MediaTypeAndFormat();
  IndNetMPTerSendMediaFormat::default_instance_ = new IndNetMPTerSendMediaFormat();
  IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_ = new IndNetMPTerSendMediaFormat_MediaTypeAndFormat();
  IndNetMPTerRecvMediaFormat::default_instance_ = new IndNetMPTerRecvMediaFormat();
  IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_ = new IndNetMPTerRecvMediaFormat_MediaTypeAndFormat();
  IndNetMPTerAssistVideoOn::default_instance_ = new IndNetMPTerAssistVideoOn();
  IndNetMPTerAssistVideoOff::default_instance_ = new IndNetMPTerAssistVideoOff();
  CmdNetMPTerVideoSelect::default_instance_ = new CmdNetMPTerVideoSelect();
  CmdNetMPTerVideoSelect_TerVideoSend::default_instance_ = new CmdNetMPTerVideoSelect_TerVideoSend();
  CmdNetMPTerSelectAssistVideo::default_instance_ = new CmdNetMPTerSelectAssistVideo();
  CmdNetMPConfDestroy::default_instance_ = new CmdNetMPConfDestroy();
  IndNetMPHeartBeatOfMC::default_instance_ = new IndNetMPHeartBeatOfMC();
  IndConfAllNetMPs::default_instance_ = new IndConfAllNetMPs();
  IndConfAllNetMPs_TersInNetMP::default_instance_ = new IndConfAllNetMPs_TersInNetMP();
  IndConfAllNetMPs_NetMPsInConf::default_instance_ = new IndConfAllNetMPs_NetMPsInConf();
  IndConfAddNewNetMP::default_instance_ = new IndConfAddNewNetMP();
  IndConfAllMPIInfoToNetMp::default_instance_ = new IndConfAllMPIInfoToNetMp();
  IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance_ = new IndConfAllMPIInfoToNetMp_ScreensInMPI();
  IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance_ = new IndConfAllMPIInfoToNetMp_MPIsInConf();
  IndMPIChannelidToNetMp::default_instance_ = new IndMPIChannelidToNetMp();
  IndConfScreenInfoInMP::default_instance_ = new IndConfScreenInfoInMP();
  IndUpdateMPIChannelInfoToNetMp::default_instance_ = new IndUpdateMPIChannelInfoToNetMp();
  IndCRSChannelidToNetMp::default_instance_ = new IndCRSChannelidToNetMp();
  IndVASChannelidToNetMp::default_instance_ = new IndVASChannelidToNetMp();
  RspMCConfCreate::default_instance_ = new RspMCConfCreate();
  IndMCHeartBeatOfNetMP::default_instance_ = new IndMCHeartBeatOfNetMP();
  IndTerStatisticsInfoFromNetmp::default_instance_ = new IndTerStatisticsInfoFromNetmp();
  IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_FrameInfo();
  IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_AdvanceInfo();
  IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_BaseInfo();
  IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_AudioInfo();
  IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_VideoInfo();
  IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_XfeInfo();
  IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance_ = new IndTerStatisticsInfoFromNetmp_TerStatisticsInfo();
  ReqNetMPCreateConf::default_instance_->InitAsDefaultInstance();
  IndDeleteOtherNetMP::default_instance_->InitAsDefaultInstance();
  IndNetMPTerJoined::default_instance_->InitAsDefaultInstance();
  IndNetMPTerLeft::default_instance_->InitAsDefaultInstance();
  IndNetMPChangeTerInfo::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToNetMP::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance_->InitAsDefaultInstance();
  IndNetMPTerMediaFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerSendMediaFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerRecvMediaFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndNetMPTerAssistVideoOn::default_instance_->InitAsDefaultInstance();
  IndNetMPTerAssistVideoOff::default_instance_->InitAsDefaultInstance();
  CmdNetMPTerVideoSelect::default_instance_->InitAsDefaultInstance();
  CmdNetMPTerVideoSelect_TerVideoSend::default_instance_->InitAsDefaultInstance();
  CmdNetMPTerSelectAssistVideo::default_instance_->InitAsDefaultInstance();
  CmdNetMPConfDestroy::default_instance_->InitAsDefaultInstance();
  IndNetMPHeartBeatOfMC::default_instance_->InitAsDefaultInstance();
  IndConfAllNetMPs::default_instance_->InitAsDefaultInstance();
  IndConfAllNetMPs_TersInNetMP::default_instance_->InitAsDefaultInstance();
  IndConfAllNetMPs_NetMPsInConf::default_instance_->InitAsDefaultInstance();
  IndConfAddNewNetMP::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToNetMp::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance_->InitAsDefaultInstance();
  IndMPIChannelidToNetMp::default_instance_->InitAsDefaultInstance();
  IndConfScreenInfoInMP::default_instance_->InitAsDefaultInstance();
  IndUpdateMPIChannelInfoToNetMp::default_instance_->InitAsDefaultInstance();
  IndCRSChannelidToNetMp::default_instance_->InitAsDefaultInstance();
  IndVASChannelidToNetMp::default_instance_->InitAsDefaultInstance();
  RspMCConfCreate::default_instance_->InitAsDefaultInstance();
  IndMCHeartBeatOfNetMP::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5fnetmp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5fnetmp_2eproto {
  StaticDescriptorInitializer_mc_5fnetmp_2eproto() {
    protobuf_AddDesc_mc_5fnetmp_2eproto();
  }
} static_descriptor_initializer_mc_5fnetmp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqNetMPCreateConf::kConfidFieldNumber;
const int ReqNetMPCreateConf::kMcidFieldNumber;
const int ReqNetMPCreateConf::kNetmpidFieldNumber;
const int ReqNetMPCreateConf::kMaxtermsFieldNumber;
const int ReqNetMPCreateConf::kNetmpnoFieldNumber;
#endif  // !_MSC_VER

ReqNetMPCreateConf::ReqNetMPCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqNetMPCreateConf)
}

void ReqNetMPCreateConf::InitAsDefaultInstance() {
}

ReqNetMPCreateConf::ReqNetMPCreateConf(const ReqNetMPCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqNetMPCreateConf)
}

void ReqNetMPCreateConf::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  maxterms_ = 0u;
  netmpno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqNetMPCreateConf::~ReqNetMPCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqNetMPCreateConf)
  SharedDtor();
}

void ReqNetMPCreateConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqNetMPCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNetMPCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNetMPCreateConf_descriptor_;
}

const ReqNetMPCreateConf& ReqNetMPCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

ReqNetMPCreateConf* ReqNetMPCreateConf::default_instance_ = NULL;

ReqNetMPCreateConf* ReqNetMPCreateConf::New() const {
  return new ReqNetMPCreateConf;
}

void ReqNetMPCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqNetMPCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, netmpno_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqNetMPCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqNetMPCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxterms;
        break;
      }

      // optional uint32 maxterms = 4;
      case 4: {
        if (tag == 32) {
         parse_maxterms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxterms_)));
          set_has_maxterms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_netmpno;
        break;
      }

      // optional uint32 netmpno = 5;
      case 5: {
        if (tag == 40) {
         parse_netmpno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpno_)));
          set_has_netmpno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqNetMPCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqNetMPCreateConf)
  return false;
#undef DO_
}

void ReqNetMPCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqNetMPCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 maxterms = 4;
  if (has_maxterms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxterms(), output);
  }

  // optional uint32 netmpno = 5;
  if (has_netmpno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->netmpno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqNetMPCreateConf)
}

::google::protobuf::uint8* ReqNetMPCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqNetMPCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 maxterms = 4;
  if (has_maxterms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxterms(), target);
  }

  // optional uint32 netmpno = 5;
  if (has_netmpno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->netmpno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqNetMPCreateConf)
  return target;
}

int ReqNetMPCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 maxterms = 4;
    if (has_maxterms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxterms());
    }

    // optional uint32 netmpno = 5;
    if (has_netmpno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNetMPCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqNetMPCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqNetMPCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqNetMPCreateConf::MergeFrom(const ReqNetMPCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_maxterms()) {
      set_maxterms(from.maxterms());
    }
    if (from.has_netmpno()) {
      set_netmpno(from.netmpno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqNetMPCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNetMPCreateConf::CopyFrom(const ReqNetMPCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNetMPCreateConf::IsInitialized() const {

  return true;
}

void ReqNetMPCreateConf::Swap(ReqNetMPCreateConf* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(maxterms_, other->maxterms_);
    std::swap(netmpno_, other->netmpno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqNetMPCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNetMPCreateConf_descriptor_;
  metadata.reflection = ReqNetMPCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndDeleteOtherNetMP::kConfidFieldNumber;
const int IndDeleteOtherNetMP::kMcidFieldNumber;
const int IndDeleteOtherNetMP::kNetmpidFieldNumber;
const int IndDeleteOtherNetMP::kDelnetmpidFieldNumber;
const int IndDeleteOtherNetMP::kDelnetmpnoFieldNumber;
#endif  // !_MSC_VER

IndDeleteOtherNetMP::IndDeleteOtherNetMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndDeleteOtherNetMP)
}

void IndDeleteOtherNetMP::InitAsDefaultInstance() {
}

IndDeleteOtherNetMP::IndDeleteOtherNetMP(const IndDeleteOtherNetMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndDeleteOtherNetMP)
}

void IndDeleteOtherNetMP::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  delnetmpid_ = 0u;
  delnetmpno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndDeleteOtherNetMP::~IndDeleteOtherNetMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndDeleteOtherNetMP)
  SharedDtor();
}

void IndDeleteOtherNetMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndDeleteOtherNetMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndDeleteOtherNetMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndDeleteOtherNetMP_descriptor_;
}

const IndDeleteOtherNetMP& IndDeleteOtherNetMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndDeleteOtherNetMP* IndDeleteOtherNetMP::default_instance_ = NULL;

IndDeleteOtherNetMP* IndDeleteOtherNetMP::New() const {
  return new IndDeleteOtherNetMP;
}

void IndDeleteOtherNetMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndDeleteOtherNetMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, delnetmpno_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndDeleteOtherNetMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndDeleteOtherNetMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_delnetmpid;
        break;
      }

      // optional uint32 delnetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_delnetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delnetmpid_)));
          set_has_delnetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delnetmpno;
        break;
      }

      // optional uint32 delnetmpno = 5;
      case 5: {
        if (tag == 40) {
         parse_delnetmpno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delnetmpno_)));
          set_has_delnetmpno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndDeleteOtherNetMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndDeleteOtherNetMP)
  return false;
#undef DO_
}

void IndDeleteOtherNetMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndDeleteOtherNetMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 delnetmpid = 4;
  if (has_delnetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delnetmpid(), output);
  }

  // optional uint32 delnetmpno = 5;
  if (has_delnetmpno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delnetmpno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndDeleteOtherNetMP)
}

::google::protobuf::uint8* IndDeleteOtherNetMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndDeleteOtherNetMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 delnetmpid = 4;
  if (has_delnetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delnetmpid(), target);
  }

  // optional uint32 delnetmpno = 5;
  if (has_delnetmpno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delnetmpno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndDeleteOtherNetMP)
  return target;
}

int IndDeleteOtherNetMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 delnetmpid = 4;
    if (has_delnetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delnetmpid());
    }

    // optional uint32 delnetmpno = 5;
    if (has_delnetmpno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delnetmpno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndDeleteOtherNetMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndDeleteOtherNetMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndDeleteOtherNetMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndDeleteOtherNetMP::MergeFrom(const IndDeleteOtherNetMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_delnetmpid()) {
      set_delnetmpid(from.delnetmpid());
    }
    if (from.has_delnetmpno()) {
      set_delnetmpno(from.delnetmpno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndDeleteOtherNetMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndDeleteOtherNetMP::CopyFrom(const IndDeleteOtherNetMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndDeleteOtherNetMP::IsInitialized() const {

  return true;
}

void IndDeleteOtherNetMP::Swap(IndDeleteOtherNetMP* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(delnetmpid_, other->delnetmpid_);
    std::swap(delnetmpno_, other->delnetmpno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndDeleteOtherNetMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndDeleteOtherNetMP_descriptor_;
  metadata.reflection = IndDeleteOtherNetMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerJoined::kConfidFieldNumber;
const int IndNetMPTerJoined::kMcidFieldNumber;
const int IndNetMPTerJoined::kNetmpidFieldNumber;
const int IndNetMPTerJoined::kTeridFieldNumber;
const int IndNetMPTerJoined::kRelatednetmpidFieldNumber;
const int IndNetMPTerJoined::kChannelidFieldNumber;
const int IndNetMPTerJoined::kTermtypeFieldNumber;
const int IndNetMPTerJoined::kFromtypeFieldNumber;
const int IndNetMPTerJoined::kGmrtypeFieldNumber;
const int IndNetMPTerJoined::kGmridFieldNumber;
const int IndNetMPTerJoined::kGmrnameFieldNumber;
const int IndNetMPTerJoined::kProducttypeFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerJoined::IndNetMPTerJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerJoined)
}

void IndNetMPTerJoined::InitAsDefaultInstance() {
}

IndNetMPTerJoined::IndNetMPTerJoined(const IndNetMPTerJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerJoined)
}

void IndNetMPTerJoined::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  relatednetmpid_ = 0u;
  channelid_ = 0u;
  termtype_ = 0u;
  fromtype_ = 0u;
  gmrtype_ = 0u;
  gmrid_ = 0u;
  gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerJoined::~IndNetMPTerJoined() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerJoined)
  SharedDtor();
}

void IndNetMPTerJoined::SharedDtor() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (this != default_instance_) {
  }
}

void IndNetMPTerJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerJoined_descriptor_;
}

const IndNetMPTerJoined& IndNetMPTerJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerJoined* IndNetMPTerJoined::default_instance_ = NULL;

IndNetMPTerJoined* IndNetMPTerJoined::New() const {
  return new IndNetMPTerJoined;
}

void IndNetMPTerJoined::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerJoined*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, fromtype_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(gmrid_, producttype_);
    gmrtype_ = 0u;
    if (has_gmrname()) {
      if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmrname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 7;
      case 7: {
        if (tag == 56) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 8;
      case 8: {
        if (tag == 64) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gmrtype;
        break;
      }

      // optional uint32 gmrtype = 9;
      case 9: {
        if (tag == 72) {
         parse_gmrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrtype_)));
          set_has_gmrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gmrid;
        break;
      }

      // optional uint32 gmrid = 10;
      case 10: {
        if (tag == 80) {
         parse_gmrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrid_)));
          set_has_gmrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gmrname;
        break;
      }

      // optional string gmrname = 11;
      case 11: {
        if (tag == 90) {
         parse_gmrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmrname().data(), this->gmrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 12;
      case 12: {
        if (tag == 96) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerJoined)
  return false;
#undef DO_
}

void IndNetMPTerJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relatednetmpid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 termtype = 7;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->termtype(), output);
  }

  // optional uint32 fromtype = 8;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fromtype(), output);
  }

  // optional uint32 gmrtype = 9;
  if (has_gmrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gmrtype(), output);
  }

  // optional uint32 gmrid = 10;
  if (has_gmrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gmrid(), output);
  }

  // optional string gmrname = 11;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gmrname(), output);
  }

  // optional uint32 producttype = 12;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->producttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerJoined)
}

::google::protobuf::uint8* IndNetMPTerJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relatednetmpid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 termtype = 7;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->termtype(), target);
  }

  // optional uint32 fromtype = 8;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fromtype(), target);
  }

  // optional uint32 gmrtype = 9;
  if (has_gmrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gmrtype(), target);
  }

  // optional uint32 gmrid = 10;
  if (has_gmrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gmrid(), target);
  }

  // optional string gmrname = 11;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gmrname(), target);
  }

  // optional uint32 producttype = 12;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->producttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerJoined)
  return target;
}

int IndNetMPTerJoined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 relatednetmpid = 5;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 termtype = 7;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 fromtype = 8;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gmrtype = 9;
    if (has_gmrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrtype());
    }

    // optional uint32 gmrid = 10;
    if (has_gmrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrid());
    }

    // optional string gmrname = 11;
    if (has_gmrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmrname());
    }

    // optional uint32 producttype = 12;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerJoined::MergeFrom(const IndNetMPTerJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gmrtype()) {
      set_gmrtype(from.gmrtype());
    }
    if (from.has_gmrid()) {
      set_gmrid(from.gmrid());
    }
    if (from.has_gmrname()) {
      set_gmrname(from.gmrname());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerJoined::CopyFrom(const IndNetMPTerJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerJoined::IsInitialized() const {

  return true;
}

void IndNetMPTerJoined::Swap(IndNetMPTerJoined* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(termtype_, other->termtype_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(gmrtype_, other->gmrtype_);
    std::swap(gmrid_, other->gmrid_);
    std::swap(gmrname_, other->gmrname_);
    std::swap(producttype_, other->producttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerJoined_descriptor_;
  metadata.reflection = IndNetMPTerJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerLeft::kConfidFieldNumber;
const int IndNetMPTerLeft::kMcidFieldNumber;
const int IndNetMPTerLeft::kNetmpidFieldNumber;
const int IndNetMPTerLeft::kTeridFieldNumber;
const int IndNetMPTerLeft::kRelatednetmpidFieldNumber;
const int IndNetMPTerLeft::kChannelidFieldNumber;
const int IndNetMPTerLeft::kGmrtypeFieldNumber;
const int IndNetMPTerLeft::kGmridFieldNumber;
const int IndNetMPTerLeft::kGmrnameFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerLeft::IndNetMPTerLeft()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerLeft)
}

void IndNetMPTerLeft::InitAsDefaultInstance() {
}

IndNetMPTerLeft::IndNetMPTerLeft(const IndNetMPTerLeft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerLeft)
}

void IndNetMPTerLeft::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  relatednetmpid_ = 0u;
  channelid_ = 0u;
  gmrtype_ = 0u;
  gmrid_ = 0u;
  gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerLeft::~IndNetMPTerLeft() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerLeft)
  SharedDtor();
}

void IndNetMPTerLeft::SharedDtor() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (this != default_instance_) {
  }
}

void IndNetMPTerLeft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerLeft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerLeft_descriptor_;
}

const IndNetMPTerLeft& IndNetMPTerLeft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerLeft* IndNetMPTerLeft::default_instance_ = NULL;

IndNetMPTerLeft* IndNetMPTerLeft::New() const {
  return new IndNetMPTerLeft;
}

void IndNetMPTerLeft::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerLeft*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, gmrtype_);
    gmrid_ = 0u;
  }
  if (has_gmrname()) {
    if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gmrname_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerLeft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerLeft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmrtype;
        break;
      }

      // optional uint32 gmrtype = 7;
      case 7: {
        if (tag == 56) {
         parse_gmrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrtype_)));
          set_has_gmrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gmrid;
        break;
      }

      // optional uint32 gmrid = 8;
      case 8: {
        if (tag == 64) {
         parse_gmrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrid_)));
          set_has_gmrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gmrname;
        break;
      }

      // optional string gmrname = 9;
      case 9: {
        if (tag == 74) {
         parse_gmrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmrname().data(), this->gmrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerLeft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerLeft)
  return false;
#undef DO_
}

void IndNetMPTerLeft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relatednetmpid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 gmrtype = 7;
  if (has_gmrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmrtype(), output);
  }

  // optional uint32 gmrid = 8;
  if (has_gmrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gmrid(), output);
  }

  // optional string gmrname = 9;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gmrname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerLeft)
}

::google::protobuf::uint8* IndNetMPTerLeft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relatednetmpid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 gmrtype = 7;
  if (has_gmrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmrtype(), target);
  }

  // optional uint32 gmrid = 8;
  if (has_gmrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gmrid(), target);
  }

  // optional string gmrname = 9;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gmrname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerLeft)
  return target;
}

int IndNetMPTerLeft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 relatednetmpid = 5;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 gmrtype = 7;
    if (has_gmrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrtype());
    }

    // optional uint32 gmrid = 8;
    if (has_gmrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string gmrname = 9;
    if (has_gmrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmrname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerLeft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerLeft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerLeft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerLeft::MergeFrom(const IndNetMPTerLeft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gmrtype()) {
      set_gmrtype(from.gmrtype());
    }
    if (from.has_gmrid()) {
      set_gmrid(from.gmrid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gmrname()) {
      set_gmrname(from.gmrname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerLeft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerLeft::CopyFrom(const IndNetMPTerLeft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerLeft::IsInitialized() const {

  return true;
}

void IndNetMPTerLeft::Swap(IndNetMPTerLeft* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gmrtype_, other->gmrtype_);
    std::swap(gmrid_, other->gmrid_);
    std::swap(gmrname_, other->gmrname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerLeft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerLeft_descriptor_;
  metadata.reflection = IndNetMPTerLeft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPChangeTerInfo::kConfidFieldNumber;
const int IndNetMPChangeTerInfo::kMcidFieldNumber;
const int IndNetMPChangeTerInfo::kNetmpidFieldNumber;
const int IndNetMPChangeTerInfo::kTeridFieldNumber;
const int IndNetMPChangeTerInfo::kChannelidFieldNumber;
const int IndNetMPChangeTerInfo::kRelatednetmpidFieldNumber;
const int IndNetMPChangeTerInfo::kTermtypeFieldNumber;
const int IndNetMPChangeTerInfo::kFromtypeFieldNumber;
const int IndNetMPChangeTerInfo::kProducttypeFieldNumber;
const int IndNetMPChangeTerInfo::kGmrtypeFieldNumber;
const int IndNetMPChangeTerInfo::kGmridFieldNumber;
const int IndNetMPChangeTerInfo::kGmrnameFieldNumber;
#endif  // !_MSC_VER

IndNetMPChangeTerInfo::IndNetMPChangeTerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPChangeTerInfo)
}

void IndNetMPChangeTerInfo::InitAsDefaultInstance() {
}

IndNetMPChangeTerInfo::IndNetMPChangeTerInfo(const IndNetMPChangeTerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPChangeTerInfo)
}

void IndNetMPChangeTerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  relatednetmpid_ = 0u;
  termtype_ = 0u;
  fromtype_ = 0u;
  producttype_ = 0u;
  gmrtype_ = 0u;
  gmrid_ = 0u;
  gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPChangeTerInfo::~IndNetMPChangeTerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPChangeTerInfo)
  SharedDtor();
}

void IndNetMPChangeTerInfo::SharedDtor() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (this != default_instance_) {
  }
}

void IndNetMPChangeTerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPChangeTerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPChangeTerInfo_descriptor_;
}

const IndNetMPChangeTerInfo& IndNetMPChangeTerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPChangeTerInfo* IndNetMPChangeTerInfo::default_instance_ = NULL;

IndNetMPChangeTerInfo* IndNetMPChangeTerInfo::New() const {
  return new IndNetMPChangeTerInfo;
}

void IndNetMPChangeTerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPChangeTerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, fromtype_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(producttype_, gmrid_);
    if (has_gmrname()) {
      if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmrname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPChangeTerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPChangeTerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 7;
      case 7: {
        if (tag == 56) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 8;
      case 8: {
        if (tag == 64) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 9;
      case 9: {
        if (tag == 72) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gmrtype;
        break;
      }

      // optional uint32 gmrtype = 10;
      case 10: {
        if (tag == 80) {
         parse_gmrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrtype_)));
          set_has_gmrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gmrid;
        break;
      }

      // optional uint32 gmrid = 11;
      case 11: {
        if (tag == 88) {
         parse_gmrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrid_)));
          set_has_gmrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gmrname;
        break;
      }

      // optional string gmrname = 12;
      case 12: {
        if (tag == 98) {
         parse_gmrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmrname().data(), this->gmrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPChangeTerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPChangeTerInfo)
  return false;
#undef DO_
}

void IndNetMPChangeTerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPChangeTerInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional uint32 termtype = 7;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->termtype(), output);
  }

  // optional uint32 fromtype = 8;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fromtype(), output);
  }

  // optional uint32 producttype = 9;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->producttype(), output);
  }

  // optional uint32 gmrtype = 10;
  if (has_gmrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gmrtype(), output);
  }

  // optional uint32 gmrid = 11;
  if (has_gmrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gmrid(), output);
  }

  // optional string gmrname = 12;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->gmrname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPChangeTerInfo)
}

::google::protobuf::uint8* IndNetMPChangeTerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPChangeTerInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional uint32 termtype = 7;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->termtype(), target);
  }

  // optional uint32 fromtype = 8;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fromtype(), target);
  }

  // optional uint32 producttype = 9;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->producttype(), target);
  }

  // optional uint32 gmrtype = 10;
  if (has_gmrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gmrtype(), target);
  }

  // optional uint32 gmrid = 11;
  if (has_gmrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gmrid(), target);
  }

  // optional string gmrname = 12;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gmrname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPChangeTerInfo)
  return target;
}

int IndNetMPChangeTerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 termtype = 7;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 fromtype = 8;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 producttype = 9;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

    // optional uint32 gmrtype = 10;
    if (has_gmrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrtype());
    }

    // optional uint32 gmrid = 11;
    if (has_gmrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrid());
    }

    // optional string gmrname = 12;
    if (has_gmrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmrname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPChangeTerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPChangeTerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPChangeTerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPChangeTerInfo::MergeFrom(const IndNetMPChangeTerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_gmrtype()) {
      set_gmrtype(from.gmrtype());
    }
    if (from.has_gmrid()) {
      set_gmrid(from.gmrid());
    }
    if (from.has_gmrname()) {
      set_gmrname(from.gmrname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPChangeTerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPChangeTerInfo::CopyFrom(const IndNetMPChangeTerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPChangeTerInfo::IsInitialized() const {

  return true;
}

void IndNetMPChangeTerInfo::Swap(IndNetMPChangeTerInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(termtype_, other->termtype_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(producttype_, other->producttype_);
    std::swap(gmrtype_, other->gmrtype_);
    std::swap(gmrid_, other->gmrid_);
    std::swap(gmrname_, other->gmrname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPChangeTerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPChangeTerInfo_descriptor_;
  metadata.reflection = IndNetMPChangeTerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat(const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::~IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  SharedDtor();
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_;
}

const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat& IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat* IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance_ = NULL;

IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat* IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::New() const {
  return new IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat;
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat)
  return target;
}

int IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::MergeFrom(const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::CopyFrom(const IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::Swap(IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::kTeridFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::kSendmediaformatFieldNumber;
const int IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::IndConfAllTerMediaFormatToNetMP_TermsMediaFmt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat*>(&::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance());
  recvmediaformat_ = const_cast< ::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat*>(&::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::default_instance());
}

IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::IndConfAllTerMediaFormatToNetMP_TermsMediaFmt(const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  sendmediaformat_ = NULL;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::~IndConfAllTerMediaFormatToNetMP_TermsMediaFmt() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  SharedDtor();
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
    delete recvmediaformat_;
  }
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_;
}

const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt& IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToNetMP_TermsMediaFmt* IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::default_instance_ = NULL;

IndConfAllTerMediaFormatToNetMP_TermsMediaFmt* IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::New() const {
  return new IndConfAllTerMediaFormatToNetMP_TermsMediaFmt;
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    terid_ = 0u;
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::Clear();
    }
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat sendmediaformat = 2;
      case 2: {
        if (tag == 18) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat recvmediaformat = 3;
      case 3: {
        if (tag == 26) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat sendmediaformat = 2;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sendmediaformat(), output);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat recvmediaformat = 3;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat sendmediaformat = 2;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sendmediaformat(), target);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat recvmediaformat = 3;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt)
  return target;
}

int IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat sendmediaformat = 2;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

    // optional .SRMsgs.IndConfAllTerMediaFormatToNetMP.MediaTypeAndFormat recvmediaformat = 3;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::MergeFrom(const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndConfAllTerMediaFormatToNetMP_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::CopyFrom(const IndConfAllTerMediaFormatToNetMP_TermsMediaFmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::Swap(IndConfAllTerMediaFormatToNetMP_TermsMediaFmt* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToNetMP_TermsMediaFmt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToNetMP_TermsMediaFmt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToNetMP::kConfidFieldNumber;
const int IndConfAllTerMediaFormatToNetMP::kMcidFieldNumber;
const int IndConfAllTerMediaFormatToNetMP::kNetmpidFieldNumber;
const int IndConfAllTerMediaFormatToNetMP::kTersmediainfoFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToNetMP::IndConfAllTerMediaFormatToNetMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP)
}

void IndConfAllTerMediaFormatToNetMP::InitAsDefaultInstance() {
}

IndConfAllTerMediaFormatToNetMP::IndConfAllTerMediaFormatToNetMP(const IndConfAllTerMediaFormatToNetMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToNetMP)
}

void IndConfAllTerMediaFormatToNetMP::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToNetMP::~IndConfAllTerMediaFormatToNetMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  SharedDtor();
}

void IndConfAllTerMediaFormatToNetMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllTerMediaFormatToNetMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToNetMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToNetMP_descriptor_;
}

const IndConfAllTerMediaFormatToNetMP& IndConfAllTerMediaFormatToNetMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToNetMP* IndConfAllTerMediaFormatToNetMP::default_instance_ = NULL;

IndConfAllTerMediaFormatToNetMP* IndConfAllTerMediaFormatToNetMP::New() const {
  return new IndConfAllTerMediaFormatToNetMP;
}

void IndConfAllTerMediaFormatToNetMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllTerMediaFormatToNetMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, netmpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tersmediainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToNetMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tersmediainfo;
        break;
      }

      // repeated .SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt tersmediainfo = 4;
      case 4: {
        if (tag == 34) {
         parse_tersmediainfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tersmediainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tersmediainfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToNetMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // repeated .SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt tersmediainfo = 4;
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tersmediainfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToNetMP)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToNetMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // repeated .SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt tersmediainfo = 4;
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tersmediainfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToNetMP)
  return target;
}

int IndConfAllTerMediaFormatToNetMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

  }
  // repeated .SRMsgs.IndConfAllTerMediaFormatToNetMP.TermsMediaFmt tersmediainfo = 4;
  total_size += 1 * this->tersmediainfo_size();
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tersmediainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToNetMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToNetMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToNetMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToNetMP::MergeFrom(const IndConfAllTerMediaFormatToNetMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  tersmediainfo_.MergeFrom(from.tersmediainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToNetMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToNetMP::CopyFrom(const IndConfAllTerMediaFormatToNetMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToNetMP::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToNetMP::Swap(IndConfAllTerMediaFormatToNetMP* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    tersmediainfo_.Swap(&other->tersmediainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToNetMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToNetMP_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToNetMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndNetMPTerMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerMediaFormat_MediaTypeAndFormat::IndNetMPTerMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndNetMPTerMediaFormat_MediaTypeAndFormat::IndNetMPTerMediaFormat_MediaTypeAndFormat(const IndNetMPTerMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerMediaFormat_MediaTypeAndFormat::~IndNetMPTerMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndNetMPTerMediaFormat_MediaTypeAndFormat& IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerMediaFormat_MediaTypeAndFormat* IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndNetMPTerMediaFormat_MediaTypeAndFormat* IndNetMPTerMediaFormat_MediaTypeAndFormat::New() const {
  return new IndNetMPTerMediaFormat_MediaTypeAndFormat;
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndNetMPTerMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndNetMPTerMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(const IndNetMPTerMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::CopyFrom(const IndNetMPTerMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerMediaFormat_MediaTypeAndFormat::Swap(IndNetMPTerMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndNetMPTerMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndNetMPTerMediaFormat::kConfidFieldNumber;
const int IndNetMPTerMediaFormat::kMcidFieldNumber;
const int IndNetMPTerMediaFormat::kNetmpidFieldNumber;
const int IndNetMPTerMediaFormat::kTeridFieldNumber;
const int IndNetMPTerMediaFormat::kChannelidFieldNumber;
const int IndNetMPTerMediaFormat::kSendmediaformatFieldNumber;
const int IndNetMPTerMediaFormat::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerMediaFormat::IndNetMPTerMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerMediaFormat)
}

void IndNetMPTerMediaFormat::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance());
  recvmediaformat_ = const_cast< ::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::default_instance());
}

IndNetMPTerMediaFormat::IndNetMPTerMediaFormat(const IndNetMPTerMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerMediaFormat)
}

void IndNetMPTerMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  sendmediaformat_ = NULL;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerMediaFormat::~IndNetMPTerMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerMediaFormat)
  SharedDtor();
}

void IndNetMPTerMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
    delete recvmediaformat_;
  }
}

void IndNetMPTerMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerMediaFormat_descriptor_;
}

const IndNetMPTerMediaFormat& IndNetMPTerMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerMediaFormat* IndNetMPTerMediaFormat::default_instance_ = NULL;

IndNetMPTerMediaFormat* IndNetMPTerMediaFormat::New() const {
  return new IndNetMPTerMediaFormat;
}

void IndNetMPTerMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, channelid_);
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::Clear();
    }
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
      case 7: {
        if (tag == 58) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerMediaFormat)
  return false;
#undef DO_
}

void IndNetMPTerMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendmediaformat(), output);
  }

  // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerMediaFormat)
}

::google::protobuf::uint8* IndNetMPTerMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendmediaformat(), target);
  }

  // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerMediaFormat)
  return target;
}

int IndNetMPTerMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

    // optional .SRMsgs.IndNetMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerMediaFormat::MergeFrom(const IndNetMPTerMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndNetMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerMediaFormat::CopyFrom(const IndNetMPTerMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerMediaFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerMediaFormat::Swap(IndNetMPTerMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerMediaFormat_descriptor_;
  metadata.reflection = IndNetMPTerMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerSendMediaFormat_MediaTypeAndFormat::IndNetMPTerSendMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndNetMPTerSendMediaFormat_MediaTypeAndFormat::IndNetMPTerSendMediaFormat_MediaTypeAndFormat(const IndNetMPTerSendMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerSendMediaFormat_MediaTypeAndFormat::~IndNetMPTerSendMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerSendMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndNetMPTerSendMediaFormat_MediaTypeAndFormat& IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerSendMediaFormat_MediaTypeAndFormat* IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndNetMPTerSendMediaFormat_MediaTypeAndFormat* IndNetMPTerSendMediaFormat_MediaTypeAndFormat::New() const {
  return new IndNetMPTerSendMediaFormat_MediaTypeAndFormat;
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerSendMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerSendMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndNetMPTerSendMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndNetMPTerSendMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerSendMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerSendMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(const IndNetMPTerSendMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::CopyFrom(const IndNetMPTerSendMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerSendMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerSendMediaFormat_MediaTypeAndFormat::Swap(IndNetMPTerSendMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerSendMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndNetMPTerSendMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndNetMPTerSendMediaFormat::kConfidFieldNumber;
const int IndNetMPTerSendMediaFormat::kMcidFieldNumber;
const int IndNetMPTerSendMediaFormat::kNetmpidFieldNumber;
const int IndNetMPTerSendMediaFormat::kTeridFieldNumber;
const int IndNetMPTerSendMediaFormat::kChannelidFieldNumber;
const int IndNetMPTerSendMediaFormat::kSendmediaformatFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerSendMediaFormat::IndNetMPTerSendMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerSendMediaFormat)
}

void IndNetMPTerSendMediaFormat::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndNetMPTerSendMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndNetMPTerSendMediaFormat_MediaTypeAndFormat::default_instance());
}

IndNetMPTerSendMediaFormat::IndNetMPTerSendMediaFormat(const IndNetMPTerSendMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerSendMediaFormat)
}

void IndNetMPTerSendMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  sendmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerSendMediaFormat::~IndNetMPTerSendMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerSendMediaFormat)
  SharedDtor();
}

void IndNetMPTerSendMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
  }
}

void IndNetMPTerSendMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerSendMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerSendMediaFormat_descriptor_;
}

const IndNetMPTerSendMediaFormat& IndNetMPTerSendMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerSendMediaFormat* IndNetMPTerSendMediaFormat::default_instance_ = NULL;

IndNetMPTerSendMediaFormat* IndNetMPTerSendMediaFormat::New() const {
  return new IndNetMPTerSendMediaFormat;
}

void IndNetMPTerSendMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerSendMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndNetMPTerSendMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerSendMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerSendMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerSendMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerSendMediaFormat)
  return false;
#undef DO_
}

void IndNetMPTerSendMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerSendMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerSendMediaFormat)
}

::google::protobuf::uint8* IndNetMPTerSendMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerSendMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerSendMediaFormat)
  return target;
}

int IndNetMPTerSendMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndNetMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerSendMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerSendMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerSendMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerSendMediaFormat::MergeFrom(const IndNetMPTerSendMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndNetMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerSendMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerSendMediaFormat::CopyFrom(const IndNetMPTerSendMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerSendMediaFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerSendMediaFormat::Swap(IndNetMPTerSendMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerSendMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerSendMediaFormat_descriptor_;
  metadata.reflection = IndNetMPTerSendMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat(const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::~IndNetMPTerRecvMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat& IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerRecvMediaFormat_MediaTypeAndFormat* IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndNetMPTerRecvMediaFormat_MediaTypeAndFormat* IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::New() const {
  return new IndNetMPTerRecvMediaFormat_MediaTypeAndFormat;
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerRecvMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::CopyFrom(const IndNetMPTerRecvMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::Swap(IndNetMPTerRecvMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndNetMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndNetMPTerRecvMediaFormat::kConfidFieldNumber;
const int IndNetMPTerRecvMediaFormat::kMcidFieldNumber;
const int IndNetMPTerRecvMediaFormat::kNetmpidFieldNumber;
const int IndNetMPTerRecvMediaFormat::kTeridFieldNumber;
const int IndNetMPTerRecvMediaFormat::kChannelidFieldNumber;
const int IndNetMPTerRecvMediaFormat::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerRecvMediaFormat::IndNetMPTerRecvMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerRecvMediaFormat)
}

void IndNetMPTerRecvMediaFormat::InitAsDefaultInstance() {
  recvmediaformat_ = const_cast< ::SRMsgs::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance());
}

IndNetMPTerRecvMediaFormat::IndNetMPTerRecvMediaFormat(const IndNetMPTerRecvMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerRecvMediaFormat)
}

void IndNetMPTerRecvMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerRecvMediaFormat::~IndNetMPTerRecvMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerRecvMediaFormat)
  SharedDtor();
}

void IndNetMPTerRecvMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete recvmediaformat_;
  }
}

void IndNetMPTerRecvMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerRecvMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerRecvMediaFormat_descriptor_;
}

const IndNetMPTerRecvMediaFormat& IndNetMPTerRecvMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerRecvMediaFormat* IndNetMPTerRecvMediaFormat::default_instance_ = NULL;

IndNetMPTerRecvMediaFormat* IndNetMPTerRecvMediaFormat::New() const {
  return new IndNetMPTerRecvMediaFormat;
}

void IndNetMPTerRecvMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerRecvMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerRecvMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerRecvMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerRecvMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerRecvMediaFormat)
  return false;
#undef DO_
}

void IndNetMPTerRecvMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerRecvMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerRecvMediaFormat)
}

::google::protobuf::uint8* IndNetMPTerRecvMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerRecvMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerRecvMediaFormat)
  return target;
}

int IndNetMPTerRecvMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndNetMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerRecvMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerRecvMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerRecvMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerRecvMediaFormat::MergeFrom(const IndNetMPTerRecvMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndNetMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerRecvMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerRecvMediaFormat::CopyFrom(const IndNetMPTerRecvMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerRecvMediaFormat::IsInitialized() const {

  return true;
}

void IndNetMPTerRecvMediaFormat::Swap(IndNetMPTerRecvMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerRecvMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerRecvMediaFormat_descriptor_;
  metadata.reflection = IndNetMPTerRecvMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerAssistVideoOn::kConfidFieldNumber;
const int IndNetMPTerAssistVideoOn::kMcidFieldNumber;
const int IndNetMPTerAssistVideoOn::kNetmpidFieldNumber;
const int IndNetMPTerAssistVideoOn::kDuoVideoidFieldNumber;
const int IndNetMPTerAssistVideoOn::kAvtypeFieldNumber;
const int IndNetMPTerAssistVideoOn::kSharedaudioFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerAssistVideoOn::IndNetMPTerAssistVideoOn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerAssistVideoOn)
}

void IndNetMPTerAssistVideoOn::InitAsDefaultInstance() {
}

IndNetMPTerAssistVideoOn::IndNetMPTerAssistVideoOn(const IndNetMPTerAssistVideoOn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerAssistVideoOn)
}

void IndNetMPTerAssistVideoOn::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  duovideoid_ = 0u;
  avtype_ = 0u;
  sharedaudio_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerAssistVideoOn::~IndNetMPTerAssistVideoOn() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerAssistVideoOn)
  SharedDtor();
}

void IndNetMPTerAssistVideoOn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPTerAssistVideoOn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerAssistVideoOn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerAssistVideoOn_descriptor_;
}

const IndNetMPTerAssistVideoOn& IndNetMPTerAssistVideoOn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerAssistVideoOn* IndNetMPTerAssistVideoOn::default_instance_ = NULL;

IndNetMPTerAssistVideoOn* IndNetMPTerAssistVideoOn::New() const {
  return new IndNetMPTerAssistVideoOn;
}

void IndNetMPTerAssistVideoOn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerAssistVideoOn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, sharedaudio_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerAssistVideoOn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerAssistVideoOn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duoVideoid;
        break;
      }

      // optional uint32 duoVideoid = 4;
      case 4: {
        if (tag == 32) {
         parse_duoVideoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideoid_)));
          set_has_duovideoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avtype;
        break;
      }

      // optional uint32 avtype = 5;
      case 5: {
        if (tag == 40) {
         parse_avtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avtype_)));
          set_has_avtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sharedaudio;
        break;
      }

      // optional uint32 sharedaudio = 6;
      case 6: {
        if (tag == 48) {
         parse_sharedaudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharedaudio_)));
          set_has_sharedaudio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerAssistVideoOn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerAssistVideoOn)
  return false;
#undef DO_
}

void IndNetMPTerAssistVideoOn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerAssistVideoOn)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 duoVideoid = 4;
  if (has_duovideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duovideoid(), output);
  }

  // optional uint32 avtype = 5;
  if (has_avtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avtype(), output);
  }

  // optional uint32 sharedaudio = 6;
  if (has_sharedaudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sharedaudio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerAssistVideoOn)
}

::google::protobuf::uint8* IndNetMPTerAssistVideoOn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerAssistVideoOn)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 duoVideoid = 4;
  if (has_duovideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duovideoid(), target);
  }

  // optional uint32 avtype = 5;
  if (has_avtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avtype(), target);
  }

  // optional uint32 sharedaudio = 6;
  if (has_sharedaudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sharedaudio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerAssistVideoOn)
  return target;
}

int IndNetMPTerAssistVideoOn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 duoVideoid = 4;
    if (has_duovideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideoid());
    }

    // optional uint32 avtype = 5;
    if (has_avtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avtype());
    }

    // optional uint32 sharedaudio = 6;
    if (has_sharedaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharedaudio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerAssistVideoOn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerAssistVideoOn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerAssistVideoOn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerAssistVideoOn::MergeFrom(const IndNetMPTerAssistVideoOn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_duovideoid()) {
      set_duovideoid(from.duovideoid());
    }
    if (from.has_avtype()) {
      set_avtype(from.avtype());
    }
    if (from.has_sharedaudio()) {
      set_sharedaudio(from.sharedaudio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerAssistVideoOn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerAssistVideoOn::CopyFrom(const IndNetMPTerAssistVideoOn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerAssistVideoOn::IsInitialized() const {

  return true;
}

void IndNetMPTerAssistVideoOn::Swap(IndNetMPTerAssistVideoOn* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(duovideoid_, other->duovideoid_);
    std::swap(avtype_, other->avtype_);
    std::swap(sharedaudio_, other->sharedaudio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerAssistVideoOn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerAssistVideoOn_descriptor_;
  metadata.reflection = IndNetMPTerAssistVideoOn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPTerAssistVideoOff::kConfidFieldNumber;
const int IndNetMPTerAssistVideoOff::kMcidFieldNumber;
const int IndNetMPTerAssistVideoOff::kNetmpidFieldNumber;
const int IndNetMPTerAssistVideoOff::kDuoVideoidFieldNumber;
#endif  // !_MSC_VER

IndNetMPTerAssistVideoOff::IndNetMPTerAssistVideoOff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPTerAssistVideoOff)
}

void IndNetMPTerAssistVideoOff::InitAsDefaultInstance() {
}

IndNetMPTerAssistVideoOff::IndNetMPTerAssistVideoOff(const IndNetMPTerAssistVideoOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPTerAssistVideoOff)
}

void IndNetMPTerAssistVideoOff::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  duovideoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPTerAssistVideoOff::~IndNetMPTerAssistVideoOff() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPTerAssistVideoOff)
  SharedDtor();
}

void IndNetMPTerAssistVideoOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPTerAssistVideoOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPTerAssistVideoOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPTerAssistVideoOff_descriptor_;
}

const IndNetMPTerAssistVideoOff& IndNetMPTerAssistVideoOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPTerAssistVideoOff* IndNetMPTerAssistVideoOff::default_instance_ = NULL;

IndNetMPTerAssistVideoOff* IndNetMPTerAssistVideoOff::New() const {
  return new IndNetMPTerAssistVideoOff;
}

void IndNetMPTerAssistVideoOff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPTerAssistVideoOff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, duovideoid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPTerAssistVideoOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPTerAssistVideoOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duoVideoid;
        break;
      }

      // optional uint32 duoVideoid = 4;
      case 4: {
        if (tag == 32) {
         parse_duoVideoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideoid_)));
          set_has_duovideoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPTerAssistVideoOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPTerAssistVideoOff)
  return false;
#undef DO_
}

void IndNetMPTerAssistVideoOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPTerAssistVideoOff)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 duoVideoid = 4;
  if (has_duovideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duovideoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPTerAssistVideoOff)
}

::google::protobuf::uint8* IndNetMPTerAssistVideoOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPTerAssistVideoOff)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 duoVideoid = 4;
  if (has_duovideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duovideoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPTerAssistVideoOff)
  return target;
}

int IndNetMPTerAssistVideoOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 duoVideoid = 4;
    if (has_duovideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPTerAssistVideoOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPTerAssistVideoOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPTerAssistVideoOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPTerAssistVideoOff::MergeFrom(const IndNetMPTerAssistVideoOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_duovideoid()) {
      set_duovideoid(from.duovideoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPTerAssistVideoOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPTerAssistVideoOff::CopyFrom(const IndNetMPTerAssistVideoOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPTerAssistVideoOff::IsInitialized() const {

  return true;
}

void IndNetMPTerAssistVideoOff::Swap(IndNetMPTerAssistVideoOff* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(duovideoid_, other->duovideoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPTerAssistVideoOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPTerAssistVideoOff_descriptor_;
  metadata.reflection = IndNetMPTerAssistVideoOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdNetMPTerVideoSelect_TerVideoSend::kTeridFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kChannelidFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kVideosizeFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kNetmpidFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kScreenidFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kDelayoptFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kReplaceteridFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kRecvfpsFieldNumber;
const int CmdNetMPTerVideoSelect_TerVideoSend::kReplacescreenidFieldNumber;
#endif  // !_MSC_VER

CmdNetMPTerVideoSelect_TerVideoSend::CmdNetMPTerVideoSelect_TerVideoSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
}

void CmdNetMPTerVideoSelect_TerVideoSend::InitAsDefaultInstance() {
}

CmdNetMPTerVideoSelect_TerVideoSend::CmdNetMPTerVideoSelect_TerVideoSend(const CmdNetMPTerVideoSelect_TerVideoSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
}

void CmdNetMPTerVideoSelect_TerVideoSend::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  channelid_ = 0u;
  videosize_ = 0u;
  netmpid_ = 0u;
  screenid_ = 0u;
  delayopt_ = 0u;
  replaceterid_ = 0u;
  recvfps_ = 0u;
  replacescreenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdNetMPTerVideoSelect_TerVideoSend::~CmdNetMPTerVideoSelect_TerVideoSend() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  SharedDtor();
}

void CmdNetMPTerVideoSelect_TerVideoSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdNetMPTerVideoSelect_TerVideoSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdNetMPTerVideoSelect_TerVideoSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdNetMPTerVideoSelect_TerVideoSend_descriptor_;
}

const CmdNetMPTerVideoSelect_TerVideoSend& CmdNetMPTerVideoSelect_TerVideoSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

CmdNetMPTerVideoSelect_TerVideoSend* CmdNetMPTerVideoSelect_TerVideoSend::default_instance_ = NULL;

CmdNetMPTerVideoSelect_TerVideoSend* CmdNetMPTerVideoSelect_TerVideoSend::New() const {
  return new CmdNetMPTerVideoSelect_TerVideoSend;
}

void CmdNetMPTerVideoSelect_TerVideoSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdNetMPTerVideoSelect_TerVideoSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(terid_, recvfps_);
  }
  replacescreenid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdNetMPTerVideoSelect_TerVideoSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 2;
      case 2: {
        if (tag == 16) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 3;
      case 3: {
        if (tag == 24) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 5;
      case 5: {
        if (tag == 40) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delayopt;
        break;
      }

      // optional uint32 delayopt = 6;
      case 6: {
        if (tag == 48) {
         parse_delayopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delayopt_)));
          set_has_delayopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_replaceterid;
        break;
      }

      // optional uint32 replaceterid = 7;
      case 7: {
        if (tag == 56) {
         parse_replaceterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replaceterid_)));
          set_has_replaceterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recvfps;
        break;
      }

      // optional uint32 recvfps = 8;
      case 8: {
        if (tag == 64) {
         parse_recvfps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvfps_)));
          set_has_recvfps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_replacescreenid;
        break;
      }

      // optional uint32 replacescreenid = 9;
      case 9: {
        if (tag == 72) {
         parse_replacescreenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replacescreenid_)));
          set_has_replacescreenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  return false;
#undef DO_
}

void CmdNetMPTerVideoSelect_TerVideoSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->videosize(), output);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netmpid(), output);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screenid(), output);
  }

  // optional uint32 delayopt = 6;
  if (has_delayopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delayopt(), output);
  }

  // optional uint32 replaceterid = 7;
  if (has_replaceterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->replaceterid(), output);
  }

  // optional uint32 recvfps = 8;
  if (has_recvfps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recvfps(), output);
  }

  // optional uint32 replacescreenid = 9;
  if (has_replacescreenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->replacescreenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
}

::google::protobuf::uint8* CmdNetMPTerVideoSelect_TerVideoSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->videosize(), target);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netmpid(), target);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screenid(), target);
  }

  // optional uint32 delayopt = 6;
  if (has_delayopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delayopt(), target);
  }

  // optional uint32 replaceterid = 7;
  if (has_replaceterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->replaceterid(), target);
  }

  // optional uint32 recvfps = 8;
  if (has_recvfps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recvfps(), target);
  }

  // optional uint32 replacescreenid = 9;
  if (has_replacescreenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->replacescreenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend)
  return target;
}

int CmdNetMPTerVideoSelect_TerVideoSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 videosize = 3;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

    // optional uint32 netmpid = 4;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 screenid = 5;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 delayopt = 6;
    if (has_delayopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delayopt());
    }

    // optional uint32 replaceterid = 7;
    if (has_replaceterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replaceterid());
    }

    // optional uint32 recvfps = 8;
    if (has_recvfps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvfps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 replacescreenid = 9;
    if (has_replacescreenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replacescreenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdNetMPTerVideoSelect_TerVideoSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdNetMPTerVideoSelect_TerVideoSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdNetMPTerVideoSelect_TerVideoSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdNetMPTerVideoSelect_TerVideoSend::MergeFrom(const CmdNetMPTerVideoSelect_TerVideoSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_delayopt()) {
      set_delayopt(from.delayopt());
    }
    if (from.has_replaceterid()) {
      set_replaceterid(from.replaceterid());
    }
    if (from.has_recvfps()) {
      set_recvfps(from.recvfps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_replacescreenid()) {
      set_replacescreenid(from.replacescreenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdNetMPTerVideoSelect_TerVideoSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdNetMPTerVideoSelect_TerVideoSend::CopyFrom(const CmdNetMPTerVideoSelect_TerVideoSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdNetMPTerVideoSelect_TerVideoSend::IsInitialized() const {

  return true;
}

void CmdNetMPTerVideoSelect_TerVideoSend::Swap(CmdNetMPTerVideoSelect_TerVideoSend* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(videosize_, other->videosize_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(screenid_, other->screenid_);
    std::swap(delayopt_, other->delayopt_);
    std::swap(replaceterid_, other->replaceterid_);
    std::swap(recvfps_, other->recvfps_);
    std::swap(replacescreenid_, other->replacescreenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdNetMPTerVideoSelect_TerVideoSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdNetMPTerVideoSelect_TerVideoSend_descriptor_;
  metadata.reflection = CmdNetMPTerVideoSelect_TerVideoSend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdNetMPTerVideoSelect::kConfidFieldNumber;
const int CmdNetMPTerVideoSelect::kMcidFieldNumber;
const int CmdNetMPTerVideoSelect::kNetmpidFieldNumber;
const int CmdNetMPTerVideoSelect::kTeridFieldNumber;
const int CmdNetMPTerVideoSelect::kChannelidFieldNumber;
const int CmdNetMPTerVideoSelect::kRelatednetmpidFieldNumber;
const int CmdNetMPTerVideoSelect::kTervideoneedFieldNumber;
#endif  // !_MSC_VER

CmdNetMPTerVideoSelect::CmdNetMPTerVideoSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdNetMPTerVideoSelect)
}

void CmdNetMPTerVideoSelect::InitAsDefaultInstance() {
}

CmdNetMPTerVideoSelect::CmdNetMPTerVideoSelect(const CmdNetMPTerVideoSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdNetMPTerVideoSelect)
}

void CmdNetMPTerVideoSelect::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  relatednetmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdNetMPTerVideoSelect::~CmdNetMPTerVideoSelect() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdNetMPTerVideoSelect)
  SharedDtor();
}

void CmdNetMPTerVideoSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdNetMPTerVideoSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdNetMPTerVideoSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdNetMPTerVideoSelect_descriptor_;
}

const CmdNetMPTerVideoSelect& CmdNetMPTerVideoSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

CmdNetMPTerVideoSelect* CmdNetMPTerVideoSelect::default_instance_ = NULL;

CmdNetMPTerVideoSelect* CmdNetMPTerVideoSelect::New() const {
  return new CmdNetMPTerVideoSelect;
}

void CmdNetMPTerVideoSelect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdNetMPTerVideoSelect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    relatednetmpid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tervideoneed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdNetMPTerVideoSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdNetMPTerVideoSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tervideoneed;
        break;
      }

      // repeated .SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend tervideoneed = 7;
      case 7: {
        if (tag == 58) {
         parse_tervideoneed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tervideoneed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tervideoneed;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdNetMPTerVideoSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdNetMPTerVideoSelect)
  return false;
#undef DO_
}

void CmdNetMPTerVideoSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdNetMPTerVideoSelect)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // repeated .SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend tervideoneed = 7;
  for (int i = 0; i < this->tervideoneed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tervideoneed(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdNetMPTerVideoSelect)
}

::google::protobuf::uint8* CmdNetMPTerVideoSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdNetMPTerVideoSelect)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // repeated .SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend tervideoneed = 7;
  for (int i = 0; i < this->tervideoneed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tervideoneed(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdNetMPTerVideoSelect)
  return target;
}

int CmdNetMPTerVideoSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

  }
  // repeated .SRMsgs.CmdNetMPTerVideoSelect.TerVideoSend tervideoneed = 7;
  total_size += 1 * this->tervideoneed_size();
  for (int i = 0; i < this->tervideoneed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tervideoneed(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdNetMPTerVideoSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdNetMPTerVideoSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdNetMPTerVideoSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdNetMPTerVideoSelect::MergeFrom(const CmdNetMPTerVideoSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  tervideoneed_.MergeFrom(from.tervideoneed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdNetMPTerVideoSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdNetMPTerVideoSelect::CopyFrom(const CmdNetMPTerVideoSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdNetMPTerVideoSelect::IsInitialized() const {

  return true;
}

void CmdNetMPTerVideoSelect::Swap(CmdNetMPTerVideoSelect* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    tervideoneed_.Swap(&other->tervideoneed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdNetMPTerVideoSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdNetMPTerVideoSelect_descriptor_;
  metadata.reflection = CmdNetMPTerVideoSelect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdNetMPTerSelectAssistVideo::kConfidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kMcidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kNetmpidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kTeridFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kChannelidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kRelatednetmpidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kNeedvideofmtFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kNeedvideosizeFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kBeselteridFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kBeselchannelidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kBeselrelatednetmpidFieldNumber;
const int CmdNetMPTerSelectAssistVideo::kBeselscreenidFieldNumber;
#endif  // !_MSC_VER

CmdNetMPTerSelectAssistVideo::CmdNetMPTerSelectAssistVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdNetMPTerSelectAssistVideo)
}

void CmdNetMPTerSelectAssistVideo::InitAsDefaultInstance() {
}

CmdNetMPTerSelectAssistVideo::CmdNetMPTerSelectAssistVideo(const CmdNetMPTerSelectAssistVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdNetMPTerSelectAssistVideo)
}

void CmdNetMPTerSelectAssistVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  relatednetmpid_ = 0u;
  needvideofmt_ = 0u;
  needvideosize_ = 0u;
  beselterid_ = 0u;
  beselchannelid_ = 0u;
  beselrelatednetmpid_ = 0u;
  beselscreenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdNetMPTerSelectAssistVideo::~CmdNetMPTerSelectAssistVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdNetMPTerSelectAssistVideo)
  SharedDtor();
}

void CmdNetMPTerSelectAssistVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdNetMPTerSelectAssistVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdNetMPTerSelectAssistVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdNetMPTerSelectAssistVideo_descriptor_;
}

const CmdNetMPTerSelectAssistVideo& CmdNetMPTerSelectAssistVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

CmdNetMPTerSelectAssistVideo* CmdNetMPTerSelectAssistVideo::default_instance_ = NULL;

CmdNetMPTerSelectAssistVideo* CmdNetMPTerSelectAssistVideo::New() const {
  return new CmdNetMPTerSelectAssistVideo;
}

void CmdNetMPTerSelectAssistVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdNetMPTerSelectAssistVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, needvideosize_);
  }
  ZR_(beselterid_, beselscreenid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdNetMPTerSelectAssistVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdNetMPTerSelectAssistVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_needvideofmt;
        break;
      }

      // optional uint32 needvideofmt = 7;
      case 7: {
        if (tag == 56) {
         parse_needvideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needvideofmt_)));
          set_has_needvideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_needvideosize;
        break;
      }

      // optional uint32 needvideosize = 8;
      case 8: {
        if (tag == 64) {
         parse_needvideosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needvideosize_)));
          set_has_needvideosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_beselterid;
        break;
      }

      // optional uint32 beselterid = 9;
      case 9: {
        if (tag == 72) {
         parse_beselterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beselterid_)));
          set_has_beselterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_beselchannelid;
        break;
      }

      // optional uint32 beselchannelid = 10;
      case 10: {
        if (tag == 80) {
         parse_beselchannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beselchannelid_)));
          set_has_beselchannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_beselrelatednetmpid;
        break;
      }

      // optional uint32 beselrelatednetmpid = 11;
      case 11: {
        if (tag == 88) {
         parse_beselrelatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beselrelatednetmpid_)));
          set_has_beselrelatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_beselscreenid;
        break;
      }

      // optional uint32 beselscreenid = 12;
      case 12: {
        if (tag == 96) {
         parse_beselscreenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beselscreenid_)));
          set_has_beselscreenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdNetMPTerSelectAssistVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdNetMPTerSelectAssistVideo)
  return false;
#undef DO_
}

void CmdNetMPTerSelectAssistVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdNetMPTerSelectAssistVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional uint32 needvideofmt = 7;
  if (has_needvideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->needvideofmt(), output);
  }

  // optional uint32 needvideosize = 8;
  if (has_needvideosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->needvideosize(), output);
  }

  // optional uint32 beselterid = 9;
  if (has_beselterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->beselterid(), output);
  }

  // optional uint32 beselchannelid = 10;
  if (has_beselchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->beselchannelid(), output);
  }

  // optional uint32 beselrelatednetmpid = 11;
  if (has_beselrelatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->beselrelatednetmpid(), output);
  }

  // optional uint32 beselscreenid = 12;
  if (has_beselscreenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->beselscreenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdNetMPTerSelectAssistVideo)
}

::google::protobuf::uint8* CmdNetMPTerSelectAssistVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdNetMPTerSelectAssistVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional uint32 needvideofmt = 7;
  if (has_needvideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->needvideofmt(), target);
  }

  // optional uint32 needvideosize = 8;
  if (has_needvideosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->needvideosize(), target);
  }

  // optional uint32 beselterid = 9;
  if (has_beselterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->beselterid(), target);
  }

  // optional uint32 beselchannelid = 10;
  if (has_beselchannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->beselchannelid(), target);
  }

  // optional uint32 beselrelatednetmpid = 11;
  if (has_beselrelatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->beselrelatednetmpid(), target);
  }

  // optional uint32 beselscreenid = 12;
  if (has_beselscreenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->beselscreenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdNetMPTerSelectAssistVideo)
  return target;
}

int CmdNetMPTerSelectAssistVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 needvideofmt = 7;
    if (has_needvideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needvideofmt());
    }

    // optional uint32 needvideosize = 8;
    if (has_needvideosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needvideosize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 beselterid = 9;
    if (has_beselterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beselterid());
    }

    // optional uint32 beselchannelid = 10;
    if (has_beselchannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beselchannelid());
    }

    // optional uint32 beselrelatednetmpid = 11;
    if (has_beselrelatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beselrelatednetmpid());
    }

    // optional uint32 beselscreenid = 12;
    if (has_beselscreenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beselscreenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdNetMPTerSelectAssistVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdNetMPTerSelectAssistVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdNetMPTerSelectAssistVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdNetMPTerSelectAssistVideo::MergeFrom(const CmdNetMPTerSelectAssistVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_needvideofmt()) {
      set_needvideofmt(from.needvideofmt());
    }
    if (from.has_needvideosize()) {
      set_needvideosize(from.needvideosize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beselterid()) {
      set_beselterid(from.beselterid());
    }
    if (from.has_beselchannelid()) {
      set_beselchannelid(from.beselchannelid());
    }
    if (from.has_beselrelatednetmpid()) {
      set_beselrelatednetmpid(from.beselrelatednetmpid());
    }
    if (from.has_beselscreenid()) {
      set_beselscreenid(from.beselscreenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdNetMPTerSelectAssistVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdNetMPTerSelectAssistVideo::CopyFrom(const CmdNetMPTerSelectAssistVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdNetMPTerSelectAssistVideo::IsInitialized() const {

  return true;
}

void CmdNetMPTerSelectAssistVideo::Swap(CmdNetMPTerSelectAssistVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(needvideofmt_, other->needvideofmt_);
    std::swap(needvideosize_, other->needvideosize_);
    std::swap(beselterid_, other->beselterid_);
    std::swap(beselchannelid_, other->beselchannelid_);
    std::swap(beselrelatednetmpid_, other->beselrelatednetmpid_);
    std::swap(beselscreenid_, other->beselscreenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdNetMPTerSelectAssistVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdNetMPTerSelectAssistVideo_descriptor_;
  metadata.reflection = CmdNetMPTerSelectAssistVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdNetMPConfDestroy::kConfidFieldNumber;
const int CmdNetMPConfDestroy::kMcidFieldNumber;
const int CmdNetMPConfDestroy::kNetmpidFieldNumber;
const int CmdNetMPConfDestroy::kReasonFieldNumber;
#endif  // !_MSC_VER

CmdNetMPConfDestroy::CmdNetMPConfDestroy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdNetMPConfDestroy)
}

void CmdNetMPConfDestroy::InitAsDefaultInstance() {
}

CmdNetMPConfDestroy::CmdNetMPConfDestroy(const CmdNetMPConfDestroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdNetMPConfDestroy)
}

void CmdNetMPConfDestroy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdNetMPConfDestroy::~CmdNetMPConfDestroy() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdNetMPConfDestroy)
  SharedDtor();
}

void CmdNetMPConfDestroy::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CmdNetMPConfDestroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdNetMPConfDestroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdNetMPConfDestroy_descriptor_;
}

const CmdNetMPConfDestroy& CmdNetMPConfDestroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

CmdNetMPConfDestroy* CmdNetMPConfDestroy::default_instance_ = NULL;

CmdNetMPConfDestroy* CmdNetMPConfDestroy::New() const {
  return new CmdNetMPConfDestroy;
}

void CmdNetMPConfDestroy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdNetMPConfDestroy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, netmpid_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdNetMPConfDestroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdNetMPConfDestroy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdNetMPConfDestroy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdNetMPConfDestroy)
  return false;
#undef DO_
}

void CmdNetMPConfDestroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdNetMPConfDestroy)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdNetMPConfDestroy)
}

::google::protobuf::uint8* CmdNetMPConfDestroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdNetMPConfDestroy)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdNetMPConfDestroy)
  return target;
}

int CmdNetMPConfDestroy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdNetMPConfDestroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdNetMPConfDestroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdNetMPConfDestroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdNetMPConfDestroy::MergeFrom(const CmdNetMPConfDestroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdNetMPConfDestroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdNetMPConfDestroy::CopyFrom(const CmdNetMPConfDestroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdNetMPConfDestroy::IsInitialized() const {

  return true;
}

void CmdNetMPConfDestroy::Swap(CmdNetMPConfDestroy* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdNetMPConfDestroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdNetMPConfDestroy_descriptor_;
  metadata.reflection = CmdNetMPConfDestroy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPHeartBeatOfMC::kMcidFieldNumber;
const int IndNetMPHeartBeatOfMC::kNetmpidFieldNumber;
#endif  // !_MSC_VER

IndNetMPHeartBeatOfMC::IndNetMPHeartBeatOfMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPHeartBeatOfMC)
}

void IndNetMPHeartBeatOfMC::InitAsDefaultInstance() {
}

IndNetMPHeartBeatOfMC::IndNetMPHeartBeatOfMC(const IndNetMPHeartBeatOfMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPHeartBeatOfMC)
}

void IndNetMPHeartBeatOfMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  netmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPHeartBeatOfMC::~IndNetMPHeartBeatOfMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPHeartBeatOfMC)
  SharedDtor();
}

void IndNetMPHeartBeatOfMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndNetMPHeartBeatOfMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPHeartBeatOfMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPHeartBeatOfMC_descriptor_;
}

const IndNetMPHeartBeatOfMC& IndNetMPHeartBeatOfMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndNetMPHeartBeatOfMC* IndNetMPHeartBeatOfMC::default_instance_ = NULL;

IndNetMPHeartBeatOfMC* IndNetMPHeartBeatOfMC::New() const {
  return new IndNetMPHeartBeatOfMC;
}

void IndNetMPHeartBeatOfMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPHeartBeatOfMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, netmpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPHeartBeatOfMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPHeartBeatOfMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPHeartBeatOfMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPHeartBeatOfMC)
  return false;
#undef DO_
}

void IndNetMPHeartBeatOfMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPHeartBeatOfMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->netmpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPHeartBeatOfMC)
}

::google::protobuf::uint8* IndNetMPHeartBeatOfMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPHeartBeatOfMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->netmpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPHeartBeatOfMC)
  return target;
}

int IndNetMPHeartBeatOfMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 2;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPHeartBeatOfMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPHeartBeatOfMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPHeartBeatOfMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPHeartBeatOfMC::MergeFrom(const IndNetMPHeartBeatOfMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPHeartBeatOfMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPHeartBeatOfMC::CopyFrom(const IndNetMPHeartBeatOfMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPHeartBeatOfMC::IsInitialized() const {

  return true;
}

void IndNetMPHeartBeatOfMC::Swap(IndNetMPHeartBeatOfMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPHeartBeatOfMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPHeartBeatOfMC_descriptor_;
  metadata.reflection = IndNetMPHeartBeatOfMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllNetMPs_TersInNetMP::kTeridFieldNumber;
const int IndConfAllNetMPs_TersInNetMP::kChannelidFieldNumber;
#endif  // !_MSC_VER

IndConfAllNetMPs_TersInNetMP::IndConfAllNetMPs_TersInNetMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllNetMPs.TersInNetMP)
}

void IndConfAllNetMPs_TersInNetMP::InitAsDefaultInstance() {
}

IndConfAllNetMPs_TersInNetMP::IndConfAllNetMPs_TersInNetMP(const IndConfAllNetMPs_TersInNetMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllNetMPs.TersInNetMP)
}

void IndConfAllNetMPs_TersInNetMP::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllNetMPs_TersInNetMP::~IndConfAllNetMPs_TersInNetMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  SharedDtor();
}

void IndConfAllNetMPs_TersInNetMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllNetMPs_TersInNetMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllNetMPs_TersInNetMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllNetMPs_TersInNetMP_descriptor_;
}

const IndConfAllNetMPs_TersInNetMP& IndConfAllNetMPs_TersInNetMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllNetMPs_TersInNetMP* IndConfAllNetMPs_TersInNetMP::default_instance_ = NULL;

IndConfAllNetMPs_TersInNetMP* IndConfAllNetMPs_TersInNetMP::New() const {
  return new IndConfAllNetMPs_TersInNetMP;
}

void IndConfAllNetMPs_TersInNetMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllNetMPs_TersInNetMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, channelid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllNetMPs_TersInNetMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 2;
      case 2: {
        if (tag == 16) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  return false;
#undef DO_
}

void IndConfAllNetMPs_TersInNetMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllNetMPs.TersInNetMP)
}

::google::protobuf::uint8* IndConfAllNetMPs_TersInNetMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllNetMPs.TersInNetMP)
  return target;
}

int IndConfAllNetMPs_TersInNetMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllNetMPs_TersInNetMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllNetMPs_TersInNetMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllNetMPs_TersInNetMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllNetMPs_TersInNetMP::MergeFrom(const IndConfAllNetMPs_TersInNetMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllNetMPs_TersInNetMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllNetMPs_TersInNetMP::CopyFrom(const IndConfAllNetMPs_TersInNetMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllNetMPs_TersInNetMP::IsInitialized() const {

  return true;
}

void IndConfAllNetMPs_TersInNetMP::Swap(IndConfAllNetMPs_TersInNetMP* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllNetMPs_TersInNetMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllNetMPs_TersInNetMP_descriptor_;
  metadata.reflection = IndConfAllNetMPs_TersInNetMP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllNetMPs_NetMPsInConf::kNetmpidFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kNetmpipFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kTeridsFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kAudiodatarecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kAudioctrlrecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideodatarecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideoctrlrecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideo2DatarecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideo2CtrlrecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideo3DatarecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kVideo3CtrlrecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kDesktopdatarecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kDesktopctrlrecvportFieldNumber;
const int IndConfAllNetMPs_NetMPsInConf::kNetmpnoFieldNumber;
#endif  // !_MSC_VER

IndConfAllNetMPs_NetMPsInConf::IndConfAllNetMPs_NetMPsInConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
}

void IndConfAllNetMPs_NetMPsInConf::InitAsDefaultInstance() {
}

IndConfAllNetMPs_NetMPsInConf::IndConfAllNetMPs_NetMPsInConf(const IndConfAllNetMPs_NetMPsInConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
}

void IndConfAllNetMPs_NetMPsInConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpid_ = 0u;
  netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  netmpno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllNetMPs_NetMPsInConf::~IndConfAllNetMPs_NetMPsInConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  SharedDtor();
}

void IndConfAllNetMPs_NetMPsInConf::SharedDtor() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (this != default_instance_) {
  }
}

void IndConfAllNetMPs_NetMPsInConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllNetMPs_NetMPsInConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllNetMPs_NetMPsInConf_descriptor_;
}

const IndConfAllNetMPs_NetMPsInConf& IndConfAllNetMPs_NetMPsInConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllNetMPs_NetMPsInConf* IndConfAllNetMPs_NetMPsInConf::default_instance_ = NULL;

IndConfAllNetMPs_NetMPsInConf* IndConfAllNetMPs_NetMPsInConf::New() const {
  return new IndConfAllNetMPs_NetMPsInConf;
}

void IndConfAllNetMPs_NetMPsInConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllNetMPs_NetMPsInConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(netmpid_, audiodatarecvport_);
    ZR_(audioctrlrecvport_, video2datarecvport_);
    if (has_netmpip()) {
      if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(video2ctrlrecvport_, netmpno_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  terids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllNetMPs_NetMPsInConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 netmpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_netmpip;
        break;
      }

      // optional string netmpip = 2;
      case 2: {
        if (tag == 18) {
         parse_netmpip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpip().data(), this->netmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terids;
        break;
      }

      // repeated .SRMsgs.IndConfAllNetMPs.TersInNetMP terids = 3;
      case 3: {
        if (tag == 26) {
         parse_terids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_terids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terids;
        if (input->ExpectTag(32)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 13;
      case 13: {
        if (tag == 104) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_netmpno;
        break;
      }

      // optional uint32 netmpno = 14;
      case 14: {
        if (tag == 112) {
         parse_netmpno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpno_)));
          set_has_netmpno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  return false;
#undef DO_
}

void IndConfAllNetMPs_NetMPsInConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->netmpid(), output);
  }

  // optional string netmpip = 2;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->netmpip(), output);
  }

  // repeated .SRMsgs.IndConfAllNetMPs.TersInNetMP terids = 3;
  for (int i = 0; i < this->terids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->terids(i), output);
  }

  // optional uint32 audiodatarecvport = 4;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 5;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 6;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 7;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 8;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 9;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 10;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 11;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 12;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 13;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->desktopctrlrecvport(), output);
  }

  // optional uint32 netmpno = 14;
  if (has_netmpno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->netmpno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
}

::google::protobuf::uint8* IndConfAllNetMPs_NetMPsInConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->netmpid(), target);
  }

  // optional string netmpip = 2;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->netmpip(), target);
  }

  // repeated .SRMsgs.IndConfAllNetMPs.TersInNetMP terids = 3;
  for (int i = 0; i < this->terids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->terids(i), target);
  }

  // optional uint32 audiodatarecvport = 4;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 5;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 6;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 7;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 8;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 9;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 10;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 11;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 12;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 13;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->desktopctrlrecvport(), target);
  }

  // optional uint32 netmpno = 14;
  if (has_netmpno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->netmpno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllNetMPs.NetMPsInConf)
  return target;
}

int IndConfAllNetMPs_NetMPsInConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 netmpid = 1;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string netmpip = 2;
    if (has_netmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpip());
    }

    // optional uint32 audiodatarecvport = 4;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 5;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 6;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 7;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 8;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video2ctrlrecvport = 9;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 10;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 11;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 12;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 13;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional uint32 netmpno = 14;
    if (has_netmpno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpno());
    }

  }
  // repeated .SRMsgs.IndConfAllNetMPs.TersInNetMP terids = 3;
  total_size += 1 * this->terids_size();
  for (int i = 0; i < this->terids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllNetMPs_NetMPsInConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllNetMPs_NetMPsInConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllNetMPs_NetMPsInConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllNetMPs_NetMPsInConf::MergeFrom(const IndConfAllNetMPs_NetMPsInConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  terids_.MergeFrom(from.terids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_netmpip()) {
      set_netmpip(from.netmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_netmpno()) {
      set_netmpno(from.netmpno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllNetMPs_NetMPsInConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllNetMPs_NetMPsInConf::CopyFrom(const IndConfAllNetMPs_NetMPsInConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllNetMPs_NetMPsInConf::IsInitialized() const {

  return true;
}

void IndConfAllNetMPs_NetMPsInConf::Swap(IndConfAllNetMPs_NetMPsInConf* other) {
  if (other != this) {
    std::swap(netmpid_, other->netmpid_);
    std::swap(netmpip_, other->netmpip_);
    terids_.Swap(&other->terids_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(netmpno_, other->netmpno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllNetMPs_NetMPsInConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllNetMPs_NetMPsInConf_descriptor_;
  metadata.reflection = IndConfAllNetMPs_NetMPsInConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllNetMPs::kMcidFieldNumber;
const int IndConfAllNetMPs::kNetmpidFieldNumber;
const int IndConfAllNetMPs::kConfidFieldNumber;
const int IndConfAllNetMPs::kNetmpsFieldNumber;
#endif  // !_MSC_VER

IndConfAllNetMPs::IndConfAllNetMPs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllNetMPs)
}

void IndConfAllNetMPs::InitAsDefaultInstance() {
}

IndConfAllNetMPs::IndConfAllNetMPs(const IndConfAllNetMPs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllNetMPs)
}

void IndConfAllNetMPs::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  netmpid_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllNetMPs::~IndConfAllNetMPs() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllNetMPs)
  SharedDtor();
}

void IndConfAllNetMPs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllNetMPs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllNetMPs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllNetMPs_descriptor_;
}

const IndConfAllNetMPs& IndConfAllNetMPs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllNetMPs* IndConfAllNetMPs::default_instance_ = NULL;

IndConfAllNetMPs* IndConfAllNetMPs::New() const {
  return new IndConfAllNetMPs;
}

void IndConfAllNetMPs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllNetMPs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, confid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  netmps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllNetMPs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllNetMPs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_netmps;
        break;
      }

      // repeated .SRMsgs.IndConfAllNetMPs.NetMPsInConf netmps = 4;
      case 4: {
        if (tag == 34) {
         parse_netmps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_netmps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_netmps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllNetMPs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllNetMPs)
  return false;
#undef DO_
}

void IndConfAllNetMPs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllNetMPs)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->netmpid(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // repeated .SRMsgs.IndConfAllNetMPs.NetMPsInConf netmps = 4;
  for (int i = 0; i < this->netmps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->netmps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllNetMPs)
}

::google::protobuf::uint8* IndConfAllNetMPs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllNetMPs)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->netmpid(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // repeated .SRMsgs.IndConfAllNetMPs.NetMPsInConf netmps = 4;
  for (int i = 0; i < this->netmps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->netmps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllNetMPs)
  return target;
}

int IndConfAllNetMPs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 2;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

  }
  // repeated .SRMsgs.IndConfAllNetMPs.NetMPsInConf netmps = 4;
  total_size += 1 * this->netmps_size();
  for (int i = 0; i < this->netmps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->netmps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllNetMPs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllNetMPs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllNetMPs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllNetMPs::MergeFrom(const IndConfAllNetMPs& from) {
  GOOGLE_CHECK_NE(&from, this);
  netmps_.MergeFrom(from.netmps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllNetMPs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllNetMPs::CopyFrom(const IndConfAllNetMPs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllNetMPs::IsInitialized() const {

  return true;
}

void IndConfAllNetMPs::Swap(IndConfAllNetMPs* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(confid_, other->confid_);
    netmps_.Swap(&other->netmps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllNetMPs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllNetMPs_descriptor_;
  metadata.reflection = IndConfAllNetMPs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAddNewNetMP::kMcidFieldNumber;
const int IndConfAddNewNetMP::kNetmpidFieldNumber;
const int IndConfAddNewNetMP::kConfidFieldNumber;
const int IndConfAddNewNetMP::kNewnetmpidFieldNumber;
const int IndConfAddNewNetMP::kNewnetmpipFieldNumber;
const int IndConfAddNewNetMP::kAudiodatarecvportFieldNumber;
const int IndConfAddNewNetMP::kAudioctrlrecvportFieldNumber;
const int IndConfAddNewNetMP::kVideodatarecvportFieldNumber;
const int IndConfAddNewNetMP::kVideoctrlrecvportFieldNumber;
const int IndConfAddNewNetMP::kVideo2DatarecvportFieldNumber;
const int IndConfAddNewNetMP::kVideo2CtrlrecvportFieldNumber;
const int IndConfAddNewNetMP::kVideo3DatarecvportFieldNumber;
const int IndConfAddNewNetMP::kVideo3CtrlrecvportFieldNumber;
const int IndConfAddNewNetMP::kDesktopdatarecvportFieldNumber;
const int IndConfAddNewNetMP::kDesktopctrlrecvportFieldNumber;
const int IndConfAddNewNetMP::kNewnetmpnoFieldNumber;
#endif  // !_MSC_VER

IndConfAddNewNetMP::IndConfAddNewNetMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAddNewNetMP)
}

void IndConfAddNewNetMP::InitAsDefaultInstance() {
}

IndConfAddNewNetMP::IndConfAddNewNetMP(const IndConfAddNewNetMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAddNewNetMP)
}

void IndConfAddNewNetMP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mcid_ = 0u;
  netmpid_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  newnetmpid_ = 0u;
  newnetmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  newnetmpno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAddNewNetMP::~IndConfAddNewNetMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAddNewNetMP)
  SharedDtor();
}

void IndConfAddNewNetMP::SharedDtor() {
  if (newnetmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnetmpip_;
  }
  if (this != default_instance_) {
  }
}

void IndConfAddNewNetMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAddNewNetMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAddNewNetMP_descriptor_;
}

const IndConfAddNewNetMP& IndConfAddNewNetMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAddNewNetMP* IndConfAddNewNetMP::default_instance_ = NULL;

IndConfAddNewNetMP* IndConfAddNewNetMP::New() const {
  return new IndConfAddNewNetMP;
}

void IndConfAddNewNetMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAddNewNetMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mcid_, confid_);
    ZR_(newnetmpid_, videodatarecvport_);
    if (has_newnetmpip()) {
      if (newnetmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newnetmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(videoctrlrecvport_, newnetmpno_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAddNewNetMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAddNewNetMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_newnetmpid;
        break;
      }

      // optional uint32 newnetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_newnetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newnetmpid_)));
          set_has_newnetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newnetmpip;
        break;
      }

      // optional string newnetmpip = 5;
      case 5: {
        if (tag == 42) {
         parse_newnetmpip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newnetmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newnetmpip().data(), this->newnetmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newnetmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 13;
      case 13: {
        if (tag == 104) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 14;
      case 14: {
        if (tag == 112) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 15;
      case 15: {
        if (tag == 120) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_newnetmpno;
        break;
      }

      // optional uint32 newnetmpno = 16;
      case 16: {
        if (tag == 128) {
         parse_newnetmpno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newnetmpno_)));
          set_has_newnetmpno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAddNewNetMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAddNewNetMP)
  return false;
#undef DO_
}

void IndConfAddNewNetMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAddNewNetMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->netmpid(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 newnetmpid = 4;
  if (has_newnetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newnetmpid(), output);
  }

  // optional string newnetmpip = 5;
  if (has_newnetmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnetmpip().data(), this->newnetmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnetmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newnetmpip(), output);
  }

  // optional uint32 audiodatarecvport = 6;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 7;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 8;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 9;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 10;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 11;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 12;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 13;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 14;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 15;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->desktopctrlrecvport(), output);
  }

  // optional uint32 newnetmpno = 16;
  if (has_newnetmpno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->newnetmpno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAddNewNetMP)
}

::google::protobuf::uint8* IndConfAddNewNetMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAddNewNetMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->netmpid(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 newnetmpid = 4;
  if (has_newnetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newnetmpid(), target);
  }

  // optional string newnetmpip = 5;
  if (has_newnetmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnetmpip().data(), this->newnetmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnetmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newnetmpip(), target);
  }

  // optional uint32 audiodatarecvport = 6;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 7;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 8;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 9;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 10;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 11;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 12;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 13;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 14;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 15;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->desktopctrlrecvport(), target);
  }

  // optional uint32 newnetmpno = 16;
  if (has_newnetmpno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->newnetmpno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAddNewNetMP)
  return target;
}

int IndConfAddNewNetMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 2;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 newnetmpid = 4;
    if (has_newnetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newnetmpid());
    }

    // optional string newnetmpip = 5;
    if (has_newnetmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newnetmpip());
    }

    // optional uint32 audiodatarecvport = 6;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 7;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 8;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 videoctrlrecvport = 9;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 10;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 11;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 12;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 13;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 14;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 15;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional uint32 newnetmpno = 16;
    if (has_newnetmpno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newnetmpno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAddNewNetMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAddNewNetMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAddNewNetMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAddNewNetMP::MergeFrom(const IndConfAddNewNetMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_newnetmpid()) {
      set_newnetmpid(from.newnetmpid());
    }
    if (from.has_newnetmpip()) {
      set_newnetmpip(from.newnetmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_newnetmpno()) {
      set_newnetmpno(from.newnetmpno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAddNewNetMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAddNewNetMP::CopyFrom(const IndConfAddNewNetMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAddNewNetMP::IsInitialized() const {

  return true;
}

void IndConfAddNewNetMP::Swap(IndConfAddNewNetMP* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(confid_, other->confid_);
    std::swap(newnetmpid_, other->newnetmpid_);
    std::swap(newnetmpip_, other->newnetmpip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(newnetmpno_, other->newnetmpno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAddNewNetMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAddNewNetMP_descriptor_;
  metadata.reflection = IndConfAddNewNetMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllMPIInfoToNetMp_ScreensInMPI::kScreenidFieldNumber;
const int IndConfAllMPIInfoToNetMp_ScreensInMPI::kScreentypeFieldNumber;
const int IndConfAllMPIInfoToNetMp_ScreensInMPI::kRelatedteridFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToNetMp_ScreensInMPI::IndConfAllMPIInfoToNetMp_ScreensInMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToNetMp_ScreensInMPI::IndConfAllMPIInfoToNetMp_ScreensInMPI(const IndConfAllMPIInfoToNetMp_ScreensInMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::SharedCtor() {
  _cached_size_ = 0;
  screenid_ = 0u;
  screentype_ = 0u;
  relatedterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToNetMp_ScreensInMPI::~IndConfAllMPIInfoToNetMp_ScreensInMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  SharedDtor();
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp_ScreensInMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_;
}

const IndConfAllMPIInfoToNetMp_ScreensInMPI& IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToNetMp_ScreensInMPI* IndConfAllMPIInfoToNetMp_ScreensInMPI::default_instance_ = NULL;

IndConfAllMPIInfoToNetMp_ScreensInMPI* IndConfAllMPIInfoToNetMp_ScreensInMPI::New() const {
  return new IndConfAllMPIInfoToNetMp_ScreensInMPI;
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToNetMp_ScreensInMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(screenid_, relatedterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToNetMp_ScreensInMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 screenid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 2;
      case 2: {
        if (tag == 16) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_relatedterid;
        break;
      }

      // optional uint32 relatedterid = 3;
      case 3: {
        if (tag == 24) {
         parse_relatedterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedterid_)));
          set_has_relatedterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->screenid(), output);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screentype(), output);
  }

  // optional uint32 relatedterid = 3;
  if (has_relatedterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relatedterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
}

::google::protobuf::uint8* IndConfAllMPIInfoToNetMp_ScreensInMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->screenid(), target);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screentype(), target);
  }

  // optional uint32 relatedterid = 3;
  if (has_relatedterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relatedterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI)
  return target;
}

int IndConfAllMPIInfoToNetMp_ScreensInMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 screenid = 1;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 2;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 relatedterid = 3;
    if (has_relatedterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToNetMp_ScreensInMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToNetMp_ScreensInMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::MergeFrom(const IndConfAllMPIInfoToNetMp_ScreensInMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_relatedterid()) {
      set_relatedterid(from.relatedterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::CopyFrom(const IndConfAllMPIInfoToNetMp_ScreensInMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToNetMp_ScreensInMPI::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToNetMp_ScreensInMPI::Swap(IndConfAllMPIInfoToNetMp_ScreensInMPI* other) {
  if (other != this) {
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(relatedterid_, other->relatedterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToNetMp_ScreensInMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToNetMp_ScreensInMPI_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToNetMp_ScreensInMPI_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToNetMp_MPIsInConf::kMpichannelidFieldNumber;
const int IndConfAllMPIInfoToNetMp_MPIsInConf::kRelatedmpidFieldNumber;
const int IndConfAllMPIInfoToNetMp_MPIsInConf::kRelatednetmpidFieldNumber;
const int IndConfAllMPIInfoToNetMp_MPIsInConf::kScreensFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToNetMp_MPIsInConf::IndConfAllMPIInfoToNetMp_MPIsInConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToNetMp_MPIsInConf::IndConfAllMPIInfoToNetMp_MPIsInConf(const IndConfAllMPIInfoToNetMp_MPIsInConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::SharedCtor() {
  _cached_size_ = 0;
  mpichannelid_ = 0u;
  relatedmpid_ = 0u;
  relatednetmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToNetMp_MPIsInConf::~IndConfAllMPIInfoToNetMp_MPIsInConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  SharedDtor();
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp_MPIsInConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_;
}

const IndConfAllMPIInfoToNetMp_MPIsInConf& IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToNetMp_MPIsInConf* IndConfAllMPIInfoToNetMp_MPIsInConf::default_instance_ = NULL;

IndConfAllMPIInfoToNetMp_MPIsInConf* IndConfAllMPIInfoToNetMp_MPIsInConf::New() const {
  return new IndConfAllMPIInfoToNetMp_MPIsInConf;
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToNetMp_MPIsInConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mpichannelid_, relatedmpid_);
    relatednetmpid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  screens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToNetMp_MPIsInConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mpichannelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relatedmpid;
        break;
      }

      // optional uint32 relatedmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_relatedmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedmpid_)));
          set_has_relatedmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_screens;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI screens = 4;
      case 4: {
        if (tag == 34) {
         parse_screens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_screens;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mpichannelid(), output);
  }

  // optional uint32 relatedmpid = 2;
  if (has_relatedmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relatedmpid(), output);
  }

  // optional uint32 relatednetmpid = 3;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relatednetmpid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI screens = 4;
  for (int i = 0; i < this->screens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->screens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
}

::google::protobuf::uint8* IndConfAllMPIInfoToNetMp_MPIsInConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mpichannelid(), target);
  }

  // optional uint32 relatedmpid = 2;
  if (has_relatedmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relatedmpid(), target);
  }

  // optional uint32 relatednetmpid = 3;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relatednetmpid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI screens = 4;
  for (int i = 0; i < this->screens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->screens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf)
  return target;
}

int IndConfAllMPIInfoToNetMp_MPIsInConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mpichannelid = 1;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 relatedmpid = 2;
    if (has_relatedmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedmpid());
    }

    // optional uint32 relatednetmpid = 3;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.ScreensInMPI screens = 4;
  total_size += 1 * this->screens_size();
  for (int i = 0; i < this->screens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToNetMp_MPIsInConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToNetMp_MPIsInConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::MergeFrom(const IndConfAllMPIInfoToNetMp_MPIsInConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  screens_.MergeFrom(from.screens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_relatedmpid()) {
      set_relatedmpid(from.relatedmpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::CopyFrom(const IndConfAllMPIInfoToNetMp_MPIsInConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToNetMp_MPIsInConf::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToNetMp_MPIsInConf::Swap(IndConfAllMPIInfoToNetMp_MPIsInConf* other) {
  if (other != this) {
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(relatedmpid_, other->relatedmpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    screens_.Swap(&other->screens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToNetMp_MPIsInConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToNetMp_MPIsInConf_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToNetMp_MPIsInConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToNetMp::kConfidFieldNumber;
const int IndConfAllMPIInfoToNetMp::kMcidFieldNumber;
const int IndConfAllMPIInfoToNetMp::kNetmpidFieldNumber;
const int IndConfAllMPIInfoToNetMp::kMpisFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToNetMp::IndConfAllMPIInfoToNetMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToNetMp)
}

void IndConfAllMPIInfoToNetMp::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToNetMp::IndConfAllMPIInfoToNetMp(const IndConfAllMPIInfoToNetMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToNetMp)
}

void IndConfAllMPIInfoToNetMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToNetMp::~IndConfAllMPIInfoToNetMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToNetMp)
  SharedDtor();
}

void IndConfAllMPIInfoToNetMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToNetMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToNetMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToNetMp_descriptor_;
}

const IndConfAllMPIInfoToNetMp& IndConfAllMPIInfoToNetMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToNetMp* IndConfAllMPIInfoToNetMp::default_instance_ = NULL;

IndConfAllMPIInfoToNetMp* IndConfAllMPIInfoToNetMp::New() const {
  return new IndConfAllMPIInfoToNetMp;
}

void IndConfAllMPIInfoToNetMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToNetMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, netmpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mpis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToNetMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToNetMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf mpis = 4;
      case 4: {
        if (tag == 34) {
         parse_mpis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mpis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToNetMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToNetMp)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToNetMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mpis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToNetMp)
}

::google::protobuf::uint8* IndConfAllMPIInfoToNetMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mpis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToNetMp)
  return target;
}

int IndConfAllMPIInfoToNetMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToNetMp.MPIsInConf mpis = 4;
  total_size += 1 * this->mpis_size();
  for (int i = 0; i < this->mpis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mpis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToNetMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToNetMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToNetMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToNetMp::MergeFrom(const IndConfAllMPIInfoToNetMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mpis_.MergeFrom(from.mpis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToNetMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToNetMp::CopyFrom(const IndConfAllMPIInfoToNetMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToNetMp::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToNetMp::Swap(IndConfAllMPIInfoToNetMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    mpis_.Swap(&other->mpis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToNetMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToNetMp_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToNetMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPIChannelidToNetMp::kConfidFieldNumber;
const int IndMPIChannelidToNetMp::kMcidFieldNumber;
const int IndMPIChannelidToNetMp::kNetmpidFieldNumber;
const int IndMPIChannelidToNetMp::kRelatednetmpidFieldNumber;
const int IndMPIChannelidToNetMp::kRelatedmpidFieldNumber;
const int IndMPIChannelidToNetMp::kMpichannelidFieldNumber;
const int IndMPIChannelidToNetMp::kAddordelFieldNumber;
#endif  // !_MSC_VER

IndMPIChannelidToNetMp::IndMPIChannelidToNetMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPIChannelidToNetMp)
}

void IndMPIChannelidToNetMp::InitAsDefaultInstance() {
}

IndMPIChannelidToNetMp::IndMPIChannelidToNetMp(const IndMPIChannelidToNetMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPIChannelidToNetMp)
}

void IndMPIChannelidToNetMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  relatednetmpid_ = 0u;
  relatedmpid_ = 0u;
  mpichannelid_ = 0u;
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPIChannelidToNetMp::~IndMPIChannelidToNetMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPIChannelidToNetMp)
  SharedDtor();
}

void IndMPIChannelidToNetMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPIChannelidToNetMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPIChannelidToNetMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPIChannelidToNetMp_descriptor_;
}

const IndMPIChannelidToNetMp& IndMPIChannelidToNetMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndMPIChannelidToNetMp* IndMPIChannelidToNetMp::default_instance_ = NULL;

IndMPIChannelidToNetMp* IndMPIChannelidToNetMp::New() const {
  return new IndMPIChannelidToNetMp;
}

void IndMPIChannelidToNetMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPIChannelidToNetMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, addordel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPIChannelidToNetMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPIChannelidToNetMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relatedmpid;
        break;
      }

      // optional uint32 relatedmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_relatedmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedmpid_)));
          set_has_relatedmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 6;
      case 6: {
        if (tag == 48) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 7;
      case 7: {
        if (tag == 56) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPIChannelidToNetMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPIChannelidToNetMp)
  return false;
#undef DO_
}

void IndMPIChannelidToNetMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPIChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relatednetmpid(), output);
  }

  // optional uint32 relatedmpid = 5;
  if (has_relatedmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relatedmpid(), output);
  }

  // optional uint32 mpichannelid = 6;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mpichannelid(), output);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addordel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPIChannelidToNetMp)
}

::google::protobuf::uint8* IndMPIChannelidToNetMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPIChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relatednetmpid(), target);
  }

  // optional uint32 relatedmpid = 5;
  if (has_relatedmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relatedmpid(), target);
  }

  // optional uint32 mpichannelid = 6;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mpichannelid(), target);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->addordel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPIChannelidToNetMp)
  return target;
}

int IndMPIChannelidToNetMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 relatednetmpid = 4;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 relatedmpid = 5;
    if (has_relatedmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedmpid());
    }

    // optional uint32 mpichannelid = 6;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 addordel = 7;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPIChannelidToNetMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPIChannelidToNetMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPIChannelidToNetMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPIChannelidToNetMp::MergeFrom(const IndMPIChannelidToNetMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_relatedmpid()) {
      set_relatedmpid(from.relatedmpid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPIChannelidToNetMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPIChannelidToNetMp::CopyFrom(const IndMPIChannelidToNetMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPIChannelidToNetMp::IsInitialized() const {

  return true;
}

void IndMPIChannelidToNetMp::Swap(IndMPIChannelidToNetMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(relatedmpid_, other->relatedmpid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPIChannelidToNetMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPIChannelidToNetMp_descriptor_;
  metadata.reflection = IndMPIChannelidToNetMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfScreenInfoInMP::kConfidFieldNumber;
const int IndConfScreenInfoInMP::kMcidFieldNumber;
const int IndConfScreenInfoInMP::kNetmpidFieldNumber;
const int IndConfScreenInfoInMP::kRelatednetmpidFieldNumber;
const int IndConfScreenInfoInMP::kRelatedmpidFieldNumber;
const int IndConfScreenInfoInMP::kRelatedmpichannelidFieldNumber;
const int IndConfScreenInfoInMP::kScreenidFieldNumber;
const int IndConfScreenInfoInMP::kScreentypeFieldNumber;
const int IndConfScreenInfoInMP::kAddordelFieldNumber;
const int IndConfScreenInfoInMP::kRelatedteridFieldNumber;
#endif  // !_MSC_VER

IndConfScreenInfoInMP::IndConfScreenInfoInMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfScreenInfoInMP)
}

void IndConfScreenInfoInMP::InitAsDefaultInstance() {
}

IndConfScreenInfoInMP::IndConfScreenInfoInMP(const IndConfScreenInfoInMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfScreenInfoInMP)
}

void IndConfScreenInfoInMP::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  relatednetmpid_ = 0u;
  relatedmpid_ = 0u;
  relatedmpichannelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  addordel_ = 0u;
  relatedterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfScreenInfoInMP::~IndConfScreenInfoInMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfScreenInfoInMP)
  SharedDtor();
}

void IndConfScreenInfoInMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfScreenInfoInMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfScreenInfoInMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfScreenInfoInMP_descriptor_;
}

const IndConfScreenInfoInMP& IndConfScreenInfoInMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndConfScreenInfoInMP* IndConfScreenInfoInMP::default_instance_ = NULL;

IndConfScreenInfoInMP* IndConfScreenInfoInMP::New() const {
  return new IndConfScreenInfoInMP;
}

void IndConfScreenInfoInMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfScreenInfoInMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screentype_);
  }
  ZR_(addordel_, relatedterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfScreenInfoInMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfScreenInfoInMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relatedmpid;
        break;
      }

      // optional uint32 relatedmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_relatedmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedmpid_)));
          set_has_relatedmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatedmpichannelid;
        break;
      }

      // optional uint32 relatedmpichannelid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatedmpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedmpichannelid_)));
          set_has_relatedmpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 7;
      case 7: {
        if (tag == 56) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 8;
      case 8: {
        if (tag == 64) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 9;
      case 9: {
        if (tag == 72) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_relatedterid;
        break;
      }

      // optional uint32 relatedterid = 10;
      case 10: {
        if (tag == 80) {
         parse_relatedterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatedterid_)));
          set_has_relatedterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfScreenInfoInMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfScreenInfoInMP)
  return false;
#undef DO_
}

void IndConfScreenInfoInMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfScreenInfoInMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relatednetmpid(), output);
  }

  // optional uint32 relatedmpid = 5;
  if (has_relatedmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relatedmpid(), output);
  }

  // optional uint32 relatedmpichannelid = 6;
  if (has_relatedmpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatedmpichannelid(), output);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenid(), output);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screentype(), output);
  }

  // optional uint32 addordel = 9;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->addordel(), output);
  }

  // optional uint32 relatedterid = 10;
  if (has_relatedterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->relatedterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfScreenInfoInMP)
}

::google::protobuf::uint8* IndConfScreenInfoInMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfScreenInfoInMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relatednetmpid(), target);
  }

  // optional uint32 relatedmpid = 5;
  if (has_relatedmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relatedmpid(), target);
  }

  // optional uint32 relatedmpichannelid = 6;
  if (has_relatedmpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatedmpichannelid(), target);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenid(), target);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screentype(), target);
  }

  // optional uint32 addordel = 9;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->addordel(), target);
  }

  // optional uint32 relatedterid = 10;
  if (has_relatedterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->relatedterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfScreenInfoInMP)
  return target;
}

int IndConfScreenInfoInMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 relatednetmpid = 4;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 relatedmpid = 5;
    if (has_relatedmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedmpid());
    }

    // optional uint32 relatedmpichannelid = 6;
    if (has_relatedmpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedmpichannelid());
    }

    // optional uint32 screenid = 7;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 8;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 addordel = 9;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint32 relatedterid = 10;
    if (has_relatedterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatedterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfScreenInfoInMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfScreenInfoInMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfScreenInfoInMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfScreenInfoInMP::MergeFrom(const IndConfScreenInfoInMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_relatedmpid()) {
      set_relatedmpid(from.relatedmpid());
    }
    if (from.has_relatedmpichannelid()) {
      set_relatedmpichannelid(from.relatedmpichannelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_relatedterid()) {
      set_relatedterid(from.relatedterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfScreenInfoInMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfScreenInfoInMP::CopyFrom(const IndConfScreenInfoInMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfScreenInfoInMP::IsInitialized() const {

  return true;
}

void IndConfScreenInfoInMP::Swap(IndConfScreenInfoInMP* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(relatedmpid_, other->relatedmpid_);
    std::swap(relatedmpichannelid_, other->relatedmpichannelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(addordel_, other->addordel_);
    std::swap(relatedterid_, other->relatedterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfScreenInfoInMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfScreenInfoInMP_descriptor_;
  metadata.reflection = IndConfScreenInfoInMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndUpdateMPIChannelInfoToNetMp::kConfidFieldNumber;
const int IndUpdateMPIChannelInfoToNetMp::kMcidFieldNumber;
const int IndUpdateMPIChannelInfoToNetMp::kNetmpidFieldNumber;
const int IndUpdateMPIChannelInfoToNetMp::kMpichannelidFieldNumber;
const int IndUpdateMPIChannelInfoToNetMp::kNewrelatedmpidFieldNumber;
const int IndUpdateMPIChannelInfoToNetMp::kNewrelatednetmpidFieldNumber;
#endif  // !_MSC_VER

IndUpdateMPIChannelInfoToNetMp::IndUpdateMPIChannelInfoToNetMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
}

void IndUpdateMPIChannelInfoToNetMp::InitAsDefaultInstance() {
}

IndUpdateMPIChannelInfoToNetMp::IndUpdateMPIChannelInfoToNetMp(const IndUpdateMPIChannelInfoToNetMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
}

void IndUpdateMPIChannelInfoToNetMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  mpichannelid_ = 0u;
  newrelatedmpid_ = 0u;
  newrelatednetmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpdateMPIChannelInfoToNetMp::~IndUpdateMPIChannelInfoToNetMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  SharedDtor();
}

void IndUpdateMPIChannelInfoToNetMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndUpdateMPIChannelInfoToNetMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpdateMPIChannelInfoToNetMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpdateMPIChannelInfoToNetMp_descriptor_;
}

const IndUpdateMPIChannelInfoToNetMp& IndUpdateMPIChannelInfoToNetMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndUpdateMPIChannelInfoToNetMp* IndUpdateMPIChannelInfoToNetMp::default_instance_ = NULL;

IndUpdateMPIChannelInfoToNetMp* IndUpdateMPIChannelInfoToNetMp::New() const {
  return new IndUpdateMPIChannelInfoToNetMp;
}

void IndUpdateMPIChannelInfoToNetMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpdateMPIChannelInfoToNetMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, newrelatednetmpid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpdateMPIChannelInfoToNetMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_newrelatedmpid;
        break;
      }

      // optional uint32 newrelatedmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_newrelatedmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrelatedmpid_)));
          set_has_newrelatedmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_newrelatednetmpid;
        break;
      }

      // optional uint32 newrelatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_newrelatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrelatednetmpid_)));
          set_has_newrelatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  return false;
#undef DO_
}

void IndUpdateMPIChannelInfoToNetMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 mpichannelid = 4;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mpichannelid(), output);
  }

  // optional uint32 newrelatedmpid = 5;
  if (has_newrelatedmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newrelatedmpid(), output);
  }

  // optional uint32 newrelatednetmpid = 6;
  if (has_newrelatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->newrelatednetmpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
}

::google::protobuf::uint8* IndUpdateMPIChannelInfoToNetMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 mpichannelid = 4;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mpichannelid(), target);
  }

  // optional uint32 newrelatedmpid = 5;
  if (has_newrelatedmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newrelatedmpid(), target);
  }

  // optional uint32 newrelatednetmpid = 6;
  if (has_newrelatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->newrelatednetmpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpdateMPIChannelInfoToNetMp)
  return target;
}

int IndUpdateMPIChannelInfoToNetMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 mpichannelid = 4;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 newrelatedmpid = 5;
    if (has_newrelatedmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrelatedmpid());
    }

    // optional uint32 newrelatednetmpid = 6;
    if (has_newrelatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrelatednetmpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpdateMPIChannelInfoToNetMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpdateMPIChannelInfoToNetMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpdateMPIChannelInfoToNetMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpdateMPIChannelInfoToNetMp::MergeFrom(const IndUpdateMPIChannelInfoToNetMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_newrelatedmpid()) {
      set_newrelatedmpid(from.newrelatedmpid());
    }
    if (from.has_newrelatednetmpid()) {
      set_newrelatednetmpid(from.newrelatednetmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpdateMPIChannelInfoToNetMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpdateMPIChannelInfoToNetMp::CopyFrom(const IndUpdateMPIChannelInfoToNetMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpdateMPIChannelInfoToNetMp::IsInitialized() const {

  return true;
}

void IndUpdateMPIChannelInfoToNetMp::Swap(IndUpdateMPIChannelInfoToNetMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(newrelatedmpid_, other->newrelatedmpid_);
    std::swap(newrelatednetmpid_, other->newrelatednetmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpdateMPIChannelInfoToNetMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpdateMPIChannelInfoToNetMp_descriptor_;
  metadata.reflection = IndUpdateMPIChannelInfoToNetMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSChannelidToNetMp::kConfidFieldNumber;
const int IndCRSChannelidToNetMp::kMcidFieldNumber;
const int IndCRSChannelidToNetMp::kNetmpidFieldNumber;
const int IndCRSChannelidToNetMp::kRelatednetmpidFieldNumber;
const int IndCRSChannelidToNetMp::kCrsidFieldNumber;
const int IndCRSChannelidToNetMp::kCrschannelidFieldNumber;
const int IndCRSChannelidToNetMp::kAddordelFieldNumber;
#endif  // !_MSC_VER

IndCRSChannelidToNetMp::IndCRSChannelidToNetMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSChannelidToNetMp)
}

void IndCRSChannelidToNetMp::InitAsDefaultInstance() {
}

IndCRSChannelidToNetMp::IndCRSChannelidToNetMp(const IndCRSChannelidToNetMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSChannelidToNetMp)
}

void IndCRSChannelidToNetMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  relatednetmpid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSChannelidToNetMp::~IndCRSChannelidToNetMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSChannelidToNetMp)
  SharedDtor();
}

void IndCRSChannelidToNetMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSChannelidToNetMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSChannelidToNetMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSChannelidToNetMp_descriptor_;
}

const IndCRSChannelidToNetMp& IndCRSChannelidToNetMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndCRSChannelidToNetMp* IndCRSChannelidToNetMp::default_instance_ = NULL;

IndCRSChannelidToNetMp* IndCRSChannelidToNetMp::New() const {
  return new IndCRSChannelidToNetMp;
}

void IndCRSChannelidToNetMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSChannelidToNetMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, addordel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSChannelidToNetMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSChannelidToNetMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 5;
      case 5: {
        if (tag == 40) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 6;
      case 6: {
        if (tag == 48) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 7;
      case 7: {
        if (tag == 56) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSChannelidToNetMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSChannelidToNetMp)
  return false;
#undef DO_
}

void IndCRSChannelidToNetMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relatednetmpid(), output);
  }

  // optional uint32 crsid = 5;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crsid(), output);
  }

  // optional uint32 crschannelid = 6;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->crschannelid(), output);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addordel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSChannelidToNetMp)
}

::google::protobuf::uint8* IndCRSChannelidToNetMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relatednetmpid(), target);
  }

  // optional uint32 crsid = 5;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crsid(), target);
  }

  // optional uint32 crschannelid = 6;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->crschannelid(), target);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->addordel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSChannelidToNetMp)
  return target;
}

int IndCRSChannelidToNetMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 relatednetmpid = 4;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 crsid = 5;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 6;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 addordel = 7;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSChannelidToNetMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSChannelidToNetMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSChannelidToNetMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSChannelidToNetMp::MergeFrom(const IndCRSChannelidToNetMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSChannelidToNetMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSChannelidToNetMp::CopyFrom(const IndCRSChannelidToNetMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSChannelidToNetMp::IsInitialized() const {

  return true;
}

void IndCRSChannelidToNetMp::Swap(IndCRSChannelidToNetMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSChannelidToNetMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSChannelidToNetMp_descriptor_;
  metadata.reflection = IndCRSChannelidToNetMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndVASChannelidToNetMp::kConfidFieldNumber;
const int IndVASChannelidToNetMp::kMcidFieldNumber;
const int IndVASChannelidToNetMp::kNetmpidFieldNumber;
const int IndVASChannelidToNetMp::kRelatednetmpidFieldNumber;
const int IndVASChannelidToNetMp::kVasidFieldNumber;
const int IndVASChannelidToNetMp::kVaschannelidFieldNumber;
const int IndVASChannelidToNetMp::kAddordelFieldNumber;
#endif  // !_MSC_VER

IndVASChannelidToNetMp::IndVASChannelidToNetMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASChannelidToNetMp)
}

void IndVASChannelidToNetMp::InitAsDefaultInstance() {
}

IndVASChannelidToNetMp::IndVASChannelidToNetMp(const IndVASChannelidToNetMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASChannelidToNetMp)
}

void IndVASChannelidToNetMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  relatednetmpid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASChannelidToNetMp::~IndVASChannelidToNetMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASChannelidToNetMp)
  SharedDtor();
}

void IndVASChannelidToNetMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASChannelidToNetMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASChannelidToNetMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASChannelidToNetMp_descriptor_;
}

const IndVASChannelidToNetMp& IndVASChannelidToNetMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndVASChannelidToNetMp* IndVASChannelidToNetMp::default_instance_ = NULL;

IndVASChannelidToNetMp* IndVASChannelidToNetMp::New() const {
  return new IndVASChannelidToNetMp;
}

void IndVASChannelidToNetMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASChannelidToNetMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, addordel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASChannelidToNetMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASChannelidToNetMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 5;
      case 5: {
        if (tag == 40) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 6;
      case 6: {
        if (tag == 48) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 7;
      case 7: {
        if (tag == 56) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASChannelidToNetMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASChannelidToNetMp)
  return false;
#undef DO_
}

void IndVASChannelidToNetMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relatednetmpid(), output);
  }

  // optional uint32 vasid = 5;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 6;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vaschannelid(), output);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addordel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASChannelidToNetMp)
}

::google::protobuf::uint8* IndVASChannelidToNetMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASChannelidToNetMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 relatednetmpid = 4;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relatednetmpid(), target);
  }

  // optional uint32 vasid = 5;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 6;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vaschannelid(), target);
  }

  // optional uint32 addordel = 7;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->addordel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASChannelidToNetMp)
  return target;
}

int IndVASChannelidToNetMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 relatednetmpid = 4;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 vasid = 5;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 6;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 addordel = 7;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASChannelidToNetMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASChannelidToNetMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASChannelidToNetMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASChannelidToNetMp::MergeFrom(const IndVASChannelidToNetMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASChannelidToNetMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASChannelidToNetMp::CopyFrom(const IndVASChannelidToNetMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASChannelidToNetMp::IsInitialized() const {

  return true;
}

void IndVASChannelidToNetMp::Swap(IndVASChannelidToNetMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASChannelidToNetMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASChannelidToNetMp_descriptor_;
  metadata.reflection = IndVASChannelidToNetMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspMCConfCreate::kIsokFieldNumber;
const int RspMCConfCreate::kConfidFieldNumber;
const int RspMCConfCreate::kMcidFieldNumber;
const int RspMCConfCreate::kNetmpidFieldNumber;
const int RspMCConfCreate::kNetmpipFieldNumber;
const int RspMCConfCreate::kAudiodatarecvportFieldNumber;
const int RspMCConfCreate::kAudioctrlrecvportFieldNumber;
const int RspMCConfCreate::kVideodatarecvportFieldNumber;
const int RspMCConfCreate::kVideoctrlrecvportFieldNumber;
const int RspMCConfCreate::kVideo2DatarecvportFieldNumber;
const int RspMCConfCreate::kVideo2CtrlrecvportFieldNumber;
const int RspMCConfCreate::kVideo3DatarecvportFieldNumber;
const int RspMCConfCreate::kVideo3CtrlrecvportFieldNumber;
const int RspMCConfCreate::kDesktopdatarecvportFieldNumber;
const int RspMCConfCreate::kDesktopctrlrecvportFieldNumber;
const int RspMCConfCreate::kFailreasonFieldNumber;
const int RspMCConfCreate::kNetmpnoFieldNumber;
const int RspMCConfCreate::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspMCConfCreate::RspMCConfCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspMCConfCreate)
}

void RspMCConfCreate::InitAsDefaultInstance() {
}

RspMCConfCreate::RspMCConfCreate(const RspMCConfCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspMCConfCreate)
}

void RspMCConfCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpno_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspMCConfCreate::~RspMCConfCreate() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspMCConfCreate)
  SharedDtor();
}

void RspMCConfCreate::SharedDtor() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspMCConfCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMCConfCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMCConfCreate_descriptor_;
}

const RspMCConfCreate& RspMCConfCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

RspMCConfCreate* RspMCConfCreate::default_instance_ = NULL;

RspMCConfCreate* RspMCConfCreate::New() const {
  return new RspMCConfCreate;
}

void RspMCConfCreate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspMCConfCreate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, mcid_);
    ZR_(netmpid_, videodatarecvport_);
    if (has_netmpip()) {
      if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(videoctrlrecvport_, desktopdatarecvport_);
    desktopctrlrecvport_ = 0u;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }
  ZR_(netmpno_, errorcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspMCConfCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspMCConfCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_netmpip;
        break;
      }

      // optional string netmpip = 5;
      case 5: {
        if (tag == 42) {
         parse_netmpip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpip().data(), this->netmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 13;
      case 13: {
        if (tag == 104) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 14;
      case 14: {
        if (tag == 112) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 15;
      case 15: {
        if (tag == 120) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_failreason;
        break;
      }

      // optional string failreason = 16;
      case 16: {
        if (tag == 130) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_netmpno;
        break;
      }

      // optional uint32 netmpno = 17;
      case 17: {
        if (tag == 136) {
         parse_netmpno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpno_)));
          set_has_netmpno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 18;
      case 18: {
        if (tag == 144) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspMCConfCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspMCConfCreate)
  return false;
#undef DO_
}

void RspMCConfCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspMCConfCreate)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netmpid(), output);
  }

  // optional string netmpip = 5;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->netmpip(), output);
  }

  // optional uint32 audiodatarecvport = 6;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 7;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 8;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 9;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 10;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 11;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 12;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 13;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 14;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 15;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->desktopctrlrecvport(), output);
  }

  // optional string failreason = 16;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->failreason(), output);
  }

  // optional uint32 netmpno = 17;
  if (has_netmpno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->netmpno(), output);
  }

  // optional uint32 errorcode = 18;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspMCConfCreate)
}

::google::protobuf::uint8* RspMCConfCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspMCConfCreate)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netmpid(), target);
  }

  // optional string netmpip = 5;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->netmpip(), target);
  }

  // optional uint32 audiodatarecvport = 6;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 7;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 8;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 9;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 10;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 11;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 12;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 13;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 14;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 15;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->desktopctrlrecvport(), target);
  }

  // optional string failreason = 16;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->failreason(), target);
  }

  // optional uint32 netmpno = 17;
  if (has_netmpno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->netmpno(), target);
  }

  // optional uint32 errorcode = 18;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspMCConfCreate)
  return target;
}

int RspMCConfCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 4;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string netmpip = 5;
    if (has_netmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpip());
    }

    // optional uint32 audiodatarecvport = 6;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 7;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 8;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 videoctrlrecvport = 9;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 10;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 11;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 12;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 13;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 14;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 15;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional string failreason = 16;
    if (has_failreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 netmpno = 17;
    if (has_netmpno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpno());
    }

    // optional uint32 errorcode = 18;
    if (has_errorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMCConfCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspMCConfCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspMCConfCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMCConfCreate::MergeFrom(const RspMCConfCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_netmpip()) {
      set_netmpip(from.netmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_netmpno()) {
      set_netmpno(from.netmpno());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspMCConfCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMCConfCreate::CopyFrom(const RspMCConfCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMCConfCreate::IsInitialized() const {

  return true;
}

void RspMCConfCreate::Swap(RspMCConfCreate* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(netmpip_, other->netmpip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(failreason_, other->failreason_);
    std::swap(netmpno_, other->netmpno_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspMCConfCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMCConfCreate_descriptor_;
  metadata.reflection = RspMCConfCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatOfNetMP::kMcidFieldNumber;
const int IndMCHeartBeatOfNetMP::kNetmpidFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatOfNetMP::IndMCHeartBeatOfNetMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatOfNetMP)
}

void IndMCHeartBeatOfNetMP::InitAsDefaultInstance() {
}

IndMCHeartBeatOfNetMP::IndMCHeartBeatOfNetMP(const IndMCHeartBeatOfNetMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatOfNetMP)
}

void IndMCHeartBeatOfNetMP::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  netmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatOfNetMP::~IndMCHeartBeatOfNetMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatOfNetMP)
  SharedDtor();
}

void IndMCHeartBeatOfNetMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatOfNetMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatOfNetMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatOfNetMP_descriptor_;
}

const IndMCHeartBeatOfNetMP& IndMCHeartBeatOfNetMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndMCHeartBeatOfNetMP* IndMCHeartBeatOfNetMP::default_instance_ = NULL;

IndMCHeartBeatOfNetMP* IndMCHeartBeatOfNetMP::New() const {
  return new IndMCHeartBeatOfNetMP;
}

void IndMCHeartBeatOfNetMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatOfNetMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, netmpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatOfNetMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatOfNetMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatOfNetMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatOfNetMP)
  return false;
#undef DO_
}

void IndMCHeartBeatOfNetMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatOfNetMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->netmpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatOfNetMP)
}

::google::protobuf::uint8* IndMCHeartBeatOfNetMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatOfNetMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 netmpid = 2;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->netmpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatOfNetMP)
  return target;
}

int IndMCHeartBeatOfNetMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 2;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatOfNetMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatOfNetMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatOfNetMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatOfNetMP::MergeFrom(const IndMCHeartBeatOfNetMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatOfNetMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatOfNetMP::CopyFrom(const IndMCHeartBeatOfNetMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatOfNetMP::IsInitialized() const {

  return true;
}

void IndMCHeartBeatOfNetMP::Swap(IndMCHeartBeatOfNetMP* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatOfNetMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatOfNetMP_descriptor_;
  metadata.reflection = IndMCHeartBeatOfNetMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_FrameInfo::kFswFieldNumber;
const int IndTerStatisticsInfoFromNetmp_FrameInfo::kFshFieldNumber;
const int IndTerStatisticsInfoFromNetmp_FrameInfo::kFpsFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_FrameInfo::IndTerStatisticsInfoFromNetmp_FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp_FrameInfo::IndTerStatisticsInfoFromNetmp_FrameInfo(const IndTerStatisticsInfoFromNetmp_FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  fsw_ = 0u;
  fsh_ = 0u;
  fps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_FrameInfo::~IndTerStatisticsInfoFromNetmp_FrameInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_FrameInfo& IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_FrameInfo* IndTerStatisticsInfoFromNetmp_FrameInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_FrameInfo* IndTerStatisticsInfoFromNetmp_FrameInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_FrameInfo;
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_FrameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fsw_, fps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fsw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsw_)));
          set_has_fsw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fsh;
        break;
      }

      // optional uint32 fsh = 2;
      case 2: {
        if (tag == 16) {
         parse_fsh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsh_)));
          set_has_fsh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fps;
        break;
      }

      // optional uint32 fps = 3;
      case 3: {
        if (tag == 24) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
          set_has_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fsw(), output);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fsh(), output);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fsw(), target);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fsh(), target);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_FrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fsw = 1;
    if (has_fsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsw());
    }

    // optional uint32 fsh = 2;
    if (has_fsh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsh());
    }

    // optional uint32 fps = 3;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fsw()) {
      set_fsw(from.fsw());
    }
    if (from.has_fsh()) {
      set_fsh(from.fsh());
    }
    if (from.has_fps()) {
      set_fps(from.fps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_FrameInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_FrameInfo::Swap(IndTerStatisticsInfoFromNetmp_FrameInfo* other) {
  if (other != this) {
    std::swap(fsw_, other->fsw_);
    std::swap(fsh_, other->fsh_);
    std::swap(fps_, other->fps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_FrameInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_FrameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_AdvanceInfo::kDelayFieldNumber;
const int IndTerStatisticsInfoFromNetmp_AdvanceInfo::kJitterFieldNumber;
const int IndTerStatisticsInfoFromNetmp_AdvanceInfo::kLossFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_AdvanceInfo::IndTerStatisticsInfoFromNetmp_AdvanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp_AdvanceInfo::IndTerStatisticsInfoFromNetmp_AdvanceInfo(const IndTerStatisticsInfoFromNetmp_AdvanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0u;
  jitter_ = 0u;
  loss_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_AdvanceInfo::~IndTerStatisticsInfoFromNetmp_AdvanceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_AdvanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_AdvanceInfo& IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_AdvanceInfo* IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_AdvanceInfo* IndTerStatisticsInfoFromNetmp_AdvanceInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_AdvanceInfo;
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_AdvanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delay_, loss_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_AdvanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jitter;
        break;
      }

      // optional uint32 jitter = 2;
      case 2: {
        if (tag == 16) {
         parse_jitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
          set_has_jitter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loss;
        break;
      }

      // optional uint32 loss = 3;
      case 3: {
        if (tag == 24) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jitter(), output);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_AdvanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jitter(), target);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_AdvanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 jitter = 2;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

    // optional uint32 loss = 3;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_AdvanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_AdvanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_AdvanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_jitter()) {
      set_jitter(from.jitter());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_AdvanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_AdvanceInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_AdvanceInfo::Swap(IndTerStatisticsInfoFromNetmp_AdvanceInfo* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(jitter_, other->jitter_);
    std::swap(loss_, other->loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_AdvanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_AdvanceInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_AdvanceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_BaseInfo::kFormatFieldNumber;
const int IndTerStatisticsInfoFromNetmp_BaseInfo::kBitrateFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_BaseInfo::IndTerStatisticsInfoFromNetmp_BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp_BaseInfo::IndTerStatisticsInfoFromNetmp_BaseInfo(const IndTerStatisticsInfoFromNetmp_BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  format_ = 0u;
  bitrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_BaseInfo::~IndTerStatisticsInfoFromNetmp_BaseInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_BaseInfo& IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_BaseInfo* IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_BaseInfo* IndTerStatisticsInfoFromNetmp_BaseInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_BaseInfo;
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_BaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(format_, bitrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 format = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bitrate;
        break;
      }

      // optional uint32 bitrate = 2;
      case 2: {
        if (tag == 16) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format(), output);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format(), target);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bitrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional uint32 bitrate = 2;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_BaseInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_BaseInfo::Swap(IndTerStatisticsInfoFromNetmp_BaseInfo* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_BaseInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_BaseInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_AudioInfo::kAtypeFieldNumber;
const int IndTerStatisticsInfoFromNetmp_AudioInfo::kAteridFieldNumber;
const int IndTerStatisticsInfoFromNetmp_AudioInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_AudioInfo::kAdvinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_AudioInfo::IndTerStatisticsInfoFromNetmp_AudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance());
}

IndTerStatisticsInfoFromNetmp_AudioInfo::IndTerStatisticsInfoFromNetmp_AudioInfo(const IndTerStatisticsInfoFromNetmp_AudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::SharedCtor() {
  _cached_size_ = 0;
  atype_ = 0u;
  aterid_ = 0u;
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_AudioInfo::~IndTerStatisticsInfoFromNetmp_AudioInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_AudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_AudioInfo& IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_AudioInfo* IndTerStatisticsInfoFromNetmp_AudioInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_AudioInfo* IndTerStatisticsInfoFromNetmp_AudioInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_AudioInfo;
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_AudioInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(atype_, aterid_);
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_AudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atype_)));
          set_has_atype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aterid;
        break;
      }

      // optional uint32 aterid = 2;
      case 2: {
        if (tag == 16) {
         parse_aterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aterid_)));
          set_has_aterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atype(), output);
  }

  // optional uint32 aterid = 2;
  if (has_aterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aterid(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->advinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_AudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atype(), target);
  }

  // optional uint32 aterid = 2;
  if (has_aterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aterid(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->advinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_AudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atype = 1;
    if (has_atype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atype());
    }

    // optional uint32 aterid = 2;
    if (has_aterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aterid());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_AudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_AudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_AudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atype()) {
      set_atype(from.atype());
    }
    if (from.has_aterid()) {
      set_aterid(from.aterid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_AudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_AudioInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_AudioInfo::Swap(IndTerStatisticsInfoFromNetmp_AudioInfo* other) {
  if (other != this) {
    std::swap(atype_, other->atype_);
    std::swap(aterid_, other->aterid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_AudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_AudioInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_AudioInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_VideoInfo::kVtypeFieldNumber;
const int IndTerStatisticsInfoFromNetmp_VideoInfo::kVteridFieldNumber;
const int IndTerStatisticsInfoFromNetmp_VideoInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_VideoInfo::kAdvinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_VideoInfo::kFrameinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_VideoInfo::IndTerStatisticsInfoFromNetmp_VideoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::default_instance());
}

IndTerStatisticsInfoFromNetmp_VideoInfo::IndTerStatisticsInfoFromNetmp_VideoInfo(const IndTerStatisticsInfoFromNetmp_VideoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::SharedCtor() {
  _cached_size_ = 0;
  vtype_ = 0u;
  vterid_ = 0u;
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_VideoInfo::~IndTerStatisticsInfoFromNetmp_VideoInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_VideoInfo& IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_VideoInfo* IndTerStatisticsInfoFromNetmp_VideoInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_VideoInfo* IndTerStatisticsInfoFromNetmp_VideoInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_VideoInfo;
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_VideoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(vtype_, vterid_);
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frameinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vterid;
        break;
      }

      // optional uint32 vterid = 2;
      case 2: {
        if (tag == 16) {
         parse_vterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vterid_)));
          set_has_vterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frameinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo frameinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_frameinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frameinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vtype(), output);
  }

  // optional uint32 vterid = 2;
  if (has_vterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vterid(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->advinfo(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo frameinfo = 5;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frameinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_VideoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vtype(), target);
  }

  // optional uint32 vterid = 2;
  if (has_vterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vterid(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->advinfo(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo frameinfo = 5;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frameinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_VideoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vtype());
    }

    // optional uint32 vterid = 2;
    if (has_vterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vterid());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.BaseInfo baseinfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfoFromNetmp.AdvanceInfo advinfo = 4;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.FrameInfo frameinfo = 5;
  total_size += 1 * this->frameinfo_size();
  for (int i = 0; i < this->frameinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frameinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_VideoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_VideoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_VideoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  frameinfo_.MergeFrom(from.frameinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_vterid()) {
      set_vterid(from.vterid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfoFromNetmp_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfoFromNetmp_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_VideoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_VideoInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_VideoInfo::Swap(IndTerStatisticsInfoFromNetmp_VideoInfo* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(vterid_, other->vterid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    frameinfo_.Swap(&other->frameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_VideoInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_VideoInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_XfeInfo::kAinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_XfeInfo::kVinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_XfeInfo::IndTerStatisticsInfoFromNetmp_XfeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp_XfeInfo::IndTerStatisticsInfoFromNetmp_XfeInfo(const IndTerStatisticsInfoFromNetmp_XfeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_XfeInfo::~IndTerStatisticsInfoFromNetmp_XfeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_XfeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_XfeInfo& IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_XfeInfo* IndTerStatisticsInfoFromNetmp_XfeInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_XfeInfo* IndTerStatisticsInfoFromNetmp_XfeInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_XfeInfo;
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::Clear() {
  ainfo_.Clear();
  vinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_XfeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo ainfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ainfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ainfo;
        if (input->ExpectTag(18)) goto parse_vinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo vinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_vinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ainfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_XfeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ainfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_XfeInfo::ByteSize() const {
  int total_size = 0;

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.AudioInfo ainfo = 1;
  total_size += 1 * this->ainfo_size();
  for (int i = 0; i < this->ainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ainfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.VideoInfo vinfo = 2;
  total_size += 1 * this->vinfo_size();
  for (int i = 0; i < this->vinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_XfeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_XfeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_XfeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ainfo_.MergeFrom(from.ainfo_);
  vinfo_.MergeFrom(from.vinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_XfeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_XfeInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_XfeInfo::Swap(IndTerStatisticsInfoFromNetmp_XfeInfo* other) {
  if (other != this) {
    ainfo_.Swap(&other->ainfo_);
    vinfo_.Swap(&other->vinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_XfeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_XfeInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_XfeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::kTeridFieldNumber;
const int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::kTxinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::kRxinfoFieldNumber;
const int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::kTxbweresultFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::IndTerStatisticsInfoFromNetmp_TerStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::IndTerStatisticsInfoFromNetmp_TerStatisticsInfo(const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  txbweresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::~IndTerStatisticsInfoFromNetmp_TerStatisticsInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_;
}

const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo& IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp_TerStatisticsInfo* IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp_TerStatisticsInfo* IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::New() const {
  return new IndTerStatisticsInfoFromNetmp_TerStatisticsInfo;
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp_TerStatisticsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, txbweresult_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  txinfo_.Clear();
  rxinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo txinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_txinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txinfo;
        if (input->ExpectTag(26)) goto parse_rxinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo rxinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rxinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rxinfo;
        if (input->ExpectTag(32)) goto parse_txbweresult;
        break;
      }

      // optional uint32 txbweresult = 4;
      case 4: {
        if (tag == 32) {
         parse_txbweresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txbweresult_)));
          set_has_txbweresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo txinfo = 2;
  for (int i = 0; i < this->txinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->txinfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo rxinfo = 3;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rxinfo(i), output);
  }

  // optional uint32 txbweresult = 4;
  if (has_txbweresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->txbweresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo txinfo = 2;
  for (int i = 0; i < this->txinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->txinfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo rxinfo = 3;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rxinfo(i), target);
  }

  // optional uint32 txbweresult = 4;
  if (has_txbweresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->txbweresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo)
  return target;
}

int IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 txbweresult = 4;
    if (has_txbweresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txbweresult());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo txinfo = 2;
  total_size += 1 * this->txinfo_size();
  for (int i = 0; i < this->txinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txinfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.XfeInfo rxinfo = 3;
  total_size += 1 * this->rxinfo_size();
  for (int i = 0; i < this->rxinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rxinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::MergeFrom(const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  txinfo_.MergeFrom(from.txinfo_);
  rxinfo_.MergeFrom(from.rxinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_txbweresult()) {
      set_txbweresult(from.txbweresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::CopyFrom(const IndTerStatisticsInfoFromNetmp_TerStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::Swap(IndTerStatisticsInfoFromNetmp_TerStatisticsInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    txinfo_.Swap(&other->txinfo_);
    rxinfo_.Swap(&other->rxinfo_);
    std::swap(txbweresult_, other->txbweresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp_TerStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_TerStatisticsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfoFromNetmp::kConfidFieldNumber;
const int IndTerStatisticsInfoFromNetmp::kMcidFieldNumber;
const int IndTerStatisticsInfoFromNetmp::kNetmpidFieldNumber;
const int IndTerStatisticsInfoFromNetmp::kTsinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfoFromNetmp::IndTerStatisticsInfoFromNetmp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfoFromNetmp)
}

void IndTerStatisticsInfoFromNetmp::InitAsDefaultInstance() {
}

IndTerStatisticsInfoFromNetmp::IndTerStatisticsInfoFromNetmp(const IndTerStatisticsInfoFromNetmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfoFromNetmp)
}

void IndTerStatisticsInfoFromNetmp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  netmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfoFromNetmp::~IndTerStatisticsInfoFromNetmp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfoFromNetmp)
  SharedDtor();
}

void IndTerStatisticsInfoFromNetmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfoFromNetmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfoFromNetmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfoFromNetmp_descriptor_;
}

const IndTerStatisticsInfoFromNetmp& IndTerStatisticsInfoFromNetmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fnetmp_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfoFromNetmp* IndTerStatisticsInfoFromNetmp::default_instance_ = NULL;

IndTerStatisticsInfoFromNetmp* IndTerStatisticsInfoFromNetmp::New() const {
  return new IndTerStatisticsInfoFromNetmp;
}

void IndTerStatisticsInfoFromNetmp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfoFromNetmp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, netmpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfoFromNetmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfoFromNetmp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo tsinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_tsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfoFromNetmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfoFromNetmp)
  return false;
#undef DO_
}

void IndTerStatisticsInfoFromNetmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfoFromNetmp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfoFromNetmp)
}

::google::protobuf::uint8* IndTerStatisticsInfoFromNetmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfoFromNetmp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfoFromNetmp)
  return target;
}

int IndTerStatisticsInfoFromNetmp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfoFromNetmp.TerStatisticsInfo tsinfo = 4;
  total_size += 1 * this->tsinfo_size();
  for (int i = 0; i < this->tsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfoFromNetmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfoFromNetmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfoFromNetmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfoFromNetmp::MergeFrom(const IndTerStatisticsInfoFromNetmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tsinfo_.MergeFrom(from.tsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfoFromNetmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfoFromNetmp::CopyFrom(const IndTerStatisticsInfoFromNetmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfoFromNetmp::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfoFromNetmp::Swap(IndTerStatisticsInfoFromNetmp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(netmpid_, other->netmpid_);
    tsinfo_.Swap(&other->tsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfoFromNetmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfoFromNetmp_descriptor_;
  metadata.reflection = IndTerStatisticsInfoFromNetmp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
