// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_relayserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_relayserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* IndMCHeartBeatToRelayserver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatToRelayserver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTerJoinConfToRelayserver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver_IPPORT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTerJoinConfToRelayserver_IPPORT_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver_AddrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTerJoinConfToRelayserver_AddrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndRelayserverHeartBeatToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndRelayserverHeartBeatToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspTerJoinConfFromRelayserver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspTerJoinConfFromRelayserver_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspTerJoinConfFromRelayserver_IPPORT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspTerJoinConfFromRelayserver_IPPORT_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5frelayserver_2eproto() {
  protobuf_AddDesc_mc_5frelayserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_relayserver.proto");
  GOOGLE_CHECK(file != NULL);
  IndMCHeartBeatToRelayserver_descriptor_ = file->message_type(0);
  static const int IndMCHeartBeatToRelayserver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToRelayserver, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToRelayserver, relaysvrid_),
  };
  IndMCHeartBeatToRelayserver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatToRelayserver_descriptor_,
      IndMCHeartBeatToRelayserver::default_instance_,
      IndMCHeartBeatToRelayserver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToRelayserver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToRelayserver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatToRelayserver));
  ReqTerJoinConfToRelayserver_descriptor_ = file->message_type(1);
  static const int ReqTerJoinConfToRelayserver_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, relaysvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, teraddrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, svraddrs_),
  };
  ReqTerJoinConfToRelayserver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTerJoinConfToRelayserver_descriptor_,
      ReqTerJoinConfToRelayserver::default_instance_,
      ReqTerJoinConfToRelayserver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTerJoinConfToRelayserver));
  ReqTerJoinConfToRelayserver_IPPORT_descriptor_ = ReqTerJoinConfToRelayserver_descriptor_->nested_type(0);
  static const int ReqTerJoinConfToRelayserver_IPPORT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_IPPORT, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_IPPORT, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_IPPORT, port_),
  };
  ReqTerJoinConfToRelayserver_IPPORT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTerJoinConfToRelayserver_IPPORT_descriptor_,
      ReqTerJoinConfToRelayserver_IPPORT::default_instance_,
      ReqTerJoinConfToRelayserver_IPPORT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_IPPORT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_IPPORT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTerJoinConfToRelayserver_IPPORT));
  ReqTerJoinConfToRelayserver_AddrInfo_descriptor_ = ReqTerJoinConfToRelayserver_descriptor_->nested_type(1);
  static const int ReqTerJoinConfToRelayserver_AddrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_AddrInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_AddrInfo, ipportinfos_),
  };
  ReqTerJoinConfToRelayserver_AddrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTerJoinConfToRelayserver_AddrInfo_descriptor_,
      ReqTerJoinConfToRelayserver_AddrInfo::default_instance_,
      ReqTerJoinConfToRelayserver_AddrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_AddrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTerJoinConfToRelayserver_AddrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTerJoinConfToRelayserver_AddrInfo));
  IndRelayserverHeartBeatToMC_descriptor_ = file->message_type(2);
  static const int IndRelayserverHeartBeatToMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndRelayserverHeartBeatToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndRelayserverHeartBeatToMC, relaysvrid_),
  };
  IndRelayserverHeartBeatToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndRelayserverHeartBeatToMC_descriptor_,
      IndRelayserverHeartBeatToMC::default_instance_,
      IndRelayserverHeartBeatToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndRelayserverHeartBeatToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndRelayserverHeartBeatToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndRelayserverHeartBeatToMC));
  RspTerJoinConfFromRelayserver_descriptor_ = file->message_type(3);
  static const int RspTerJoinConfFromRelayserver_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, relaysvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, relaysvraddrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, errorcode_),
  };
  RspTerJoinConfFromRelayserver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspTerJoinConfFromRelayserver_descriptor_,
      RspTerJoinConfFromRelayserver::default_instance_,
      RspTerJoinConfFromRelayserver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspTerJoinConfFromRelayserver));
  RspTerJoinConfFromRelayserver_IPPORT_descriptor_ = RspTerJoinConfFromRelayserver_descriptor_->nested_type(0);
  static const int RspTerJoinConfFromRelayserver_IPPORT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver_IPPORT, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver_IPPORT, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver_IPPORT, port_),
  };
  RspTerJoinConfFromRelayserver_IPPORT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspTerJoinConfFromRelayserver_IPPORT_descriptor_,
      RspTerJoinConfFromRelayserver_IPPORT::default_instance_,
      RspTerJoinConfFromRelayserver_IPPORT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver_IPPORT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspTerJoinConfFromRelayserver_IPPORT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspTerJoinConfFromRelayserver_IPPORT));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5frelayserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatToRelayserver_descriptor_, &IndMCHeartBeatToRelayserver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTerJoinConfToRelayserver_descriptor_, &ReqTerJoinConfToRelayserver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTerJoinConfToRelayserver_IPPORT_descriptor_, &ReqTerJoinConfToRelayserver_IPPORT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTerJoinConfToRelayserver_AddrInfo_descriptor_, &ReqTerJoinConfToRelayserver_AddrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndRelayserverHeartBeatToMC_descriptor_, &IndRelayserverHeartBeatToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspTerJoinConfFromRelayserver_descriptor_, &RspTerJoinConfFromRelayserver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspTerJoinConfFromRelayserver_IPPORT_descriptor_, &RspTerJoinConfFromRelayserver_IPPORT::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5frelayserver_2eproto() {
  delete IndMCHeartBeatToRelayserver::default_instance_;
  delete IndMCHeartBeatToRelayserver_reflection_;
  delete ReqTerJoinConfToRelayserver::default_instance_;
  delete ReqTerJoinConfToRelayserver_reflection_;
  delete ReqTerJoinConfToRelayserver_IPPORT::default_instance_;
  delete ReqTerJoinConfToRelayserver_IPPORT_reflection_;
  delete ReqTerJoinConfToRelayserver_AddrInfo::default_instance_;
  delete ReqTerJoinConfToRelayserver_AddrInfo_reflection_;
  delete IndRelayserverHeartBeatToMC::default_instance_;
  delete IndRelayserverHeartBeatToMC_reflection_;
  delete RspTerJoinConfFromRelayserver::default_instance_;
  delete RspTerJoinConfFromRelayserver_reflection_;
  delete RspTerJoinConfFromRelayserver_IPPORT::default_instance_;
  delete RspTerJoinConfFromRelayserver_IPPORT_reflection_;
}

void protobuf_AddDesc_mc_5frelayserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024mc_relayserver.proto\022\006SRMsgs\"\?\n\033IndMCH"
    "eartBeatToRelayserver\022\014\n\004mcid\030\001 \001(\r\022\022\n\nr"
    "elaysvrid\030\002 \001(\r\"\356\002\n\033ReqTerJoinConfToRela"
    "yserver\022\014\n\004mcid\030\001 \001(\r\022\022\n\nrelaysvrid\030\002 \001("
    "\r\022\016\n\006confid\030\003 \001(\004\022\014\n\004suid\030\004 \001(\r\022<\n\010terad"
    "drs\030\005 \001(\0132*.SRMsgs.ReqTerJoinConfToRelay"
    "server.IPPORT\022>\n\010svraddrs\030\006 \003(\0132,.SRMsgs"
    ".ReqTerJoinConfToRelayserver.AddrInfo\0323\n"
    "\006IPPORT\022\017\n\007nettype\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\022\014\n\004"
    "port\030\003 \001(\r\032\\\n\010AddrInfo\022\017\n\007svrtype\030\001 \001(\r\022"
    "\?\n\013ipportinfos\030\002 \003(\0132*.SRMsgs.ReqTerJoin"
    "ConfToRelayserver.IPPORT\"\?\n\033IndRelayserv"
    "erHeartBeatToMC\022\014\n\004mcid\030\001 \001(\r\022\022\n\nrelaysv"
    "rid\030\002 \001(\r\"\216\002\n\035RspTerJoinConfFromRelayser"
    "ver\022\022\n\nfailreason\030\001 \001(\t\022\014\n\004isok\030\002 \001(\010\022\014\n"
    "\004mcid\030\003 \001(\r\022\022\n\nrelaysvrid\030\004 \001(\r\022\016\n\006confi"
    "d\030\005 \001(\004\022\014\n\004suid\030\006 \001(\r\022C\n\rrelaysvraddrs\030\007"
    " \001(\0132,.SRMsgs.RspTerJoinConfFromRelayser"
    "ver.IPPORT\022\021\n\terrorcode\030\010 \001(\r\0323\n\006IPPORT\022"
    "\017\n\007nettype\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001"
    "(\r", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_relayserver.proto", &protobuf_RegisterTypes);
  IndMCHeartBeatToRelayserver::default_instance_ = new IndMCHeartBeatToRelayserver();
  ReqTerJoinConfToRelayserver::default_instance_ = new ReqTerJoinConfToRelayserver();
  ReqTerJoinConfToRelayserver_IPPORT::default_instance_ = new ReqTerJoinConfToRelayserver_IPPORT();
  ReqTerJoinConfToRelayserver_AddrInfo::default_instance_ = new ReqTerJoinConfToRelayserver_AddrInfo();
  IndRelayserverHeartBeatToMC::default_instance_ = new IndRelayserverHeartBeatToMC();
  RspTerJoinConfFromRelayserver::default_instance_ = new RspTerJoinConfFromRelayserver();
  RspTerJoinConfFromRelayserver_IPPORT::default_instance_ = new RspTerJoinConfFromRelayserver_IPPORT();
  IndMCHeartBeatToRelayserver::default_instance_->InitAsDefaultInstance();
  ReqTerJoinConfToRelayserver::default_instance_->InitAsDefaultInstance();
  ReqTerJoinConfToRelayserver_IPPORT::default_instance_->InitAsDefaultInstance();
  ReqTerJoinConfToRelayserver_AddrInfo::default_instance_->InitAsDefaultInstance();
  IndRelayserverHeartBeatToMC::default_instance_->InitAsDefaultInstance();
  RspTerJoinConfFromRelayserver::default_instance_->InitAsDefaultInstance();
  RspTerJoinConfFromRelayserver_IPPORT::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5frelayserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5frelayserver_2eproto {
  StaticDescriptorInitializer_mc_5frelayserver_2eproto() {
    protobuf_AddDesc_mc_5frelayserver_2eproto();
  }
} static_descriptor_initializer_mc_5frelayserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatToRelayserver::kMcidFieldNumber;
const int IndMCHeartBeatToRelayserver::kRelaysvridFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatToRelayserver::IndMCHeartBeatToRelayserver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatToRelayserver)
}

void IndMCHeartBeatToRelayserver::InitAsDefaultInstance() {
}

IndMCHeartBeatToRelayserver::IndMCHeartBeatToRelayserver(const IndMCHeartBeatToRelayserver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatToRelayserver)
}

void IndMCHeartBeatToRelayserver::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  relaysvrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatToRelayserver::~IndMCHeartBeatToRelayserver() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatToRelayserver)
  SharedDtor();
}

void IndMCHeartBeatToRelayserver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatToRelayserver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatToRelayserver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatToRelayserver_descriptor_;
}

const IndMCHeartBeatToRelayserver& IndMCHeartBeatToRelayserver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

IndMCHeartBeatToRelayserver* IndMCHeartBeatToRelayserver::default_instance_ = NULL;

IndMCHeartBeatToRelayserver* IndMCHeartBeatToRelayserver::New() const {
  return new IndMCHeartBeatToRelayserver;
}

void IndMCHeartBeatToRelayserver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatToRelayserver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, relaysvrid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatToRelayserver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatToRelayserver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relaysvrid;
        break;
      }

      // optional uint32 relaysvrid = 2;
      case 2: {
        if (tag == 16) {
         parse_relaysvrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relaysvrid_)));
          set_has_relaysvrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatToRelayserver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatToRelayserver)
  return false;
#undef DO_
}

void IndMCHeartBeatToRelayserver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatToRelayserver)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relaysvrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatToRelayserver)
}

::google::protobuf::uint8* IndMCHeartBeatToRelayserver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatToRelayserver)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relaysvrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatToRelayserver)
  return target;
}

int IndMCHeartBeatToRelayserver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 relaysvrid = 2;
    if (has_relaysvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relaysvrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatToRelayserver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatToRelayserver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatToRelayserver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatToRelayserver::MergeFrom(const IndMCHeartBeatToRelayserver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_relaysvrid()) {
      set_relaysvrid(from.relaysvrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatToRelayserver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatToRelayserver::CopyFrom(const IndMCHeartBeatToRelayserver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatToRelayserver::IsInitialized() const {

  return true;
}

void IndMCHeartBeatToRelayserver::Swap(IndMCHeartBeatToRelayserver* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(relaysvrid_, other->relaysvrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatToRelayserver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatToRelayserver_descriptor_;
  metadata.reflection = IndMCHeartBeatToRelayserver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTerJoinConfToRelayserver_IPPORT::kNettypeFieldNumber;
const int ReqTerJoinConfToRelayserver_IPPORT::kIpFieldNumber;
const int ReqTerJoinConfToRelayserver_IPPORT::kPortFieldNumber;
#endif  // !_MSC_VER

ReqTerJoinConfToRelayserver_IPPORT::ReqTerJoinConfToRelayserver_IPPORT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
}

void ReqTerJoinConfToRelayserver_IPPORT::InitAsDefaultInstance() {
}

ReqTerJoinConfToRelayserver_IPPORT::ReqTerJoinConfToRelayserver_IPPORT(const ReqTerJoinConfToRelayserver_IPPORT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
}

void ReqTerJoinConfToRelayserver_IPPORT::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nettype_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTerJoinConfToRelayserver_IPPORT::~ReqTerJoinConfToRelayserver_IPPORT() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  SharedDtor();
}

void ReqTerJoinConfToRelayserver_IPPORT::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ReqTerJoinConfToRelayserver_IPPORT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver_IPPORT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTerJoinConfToRelayserver_IPPORT_descriptor_;
}

const ReqTerJoinConfToRelayserver_IPPORT& ReqTerJoinConfToRelayserver_IPPORT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver_IPPORT::default_instance_ = NULL;

ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver_IPPORT::New() const {
  return new ReqTerJoinConfToRelayserver_IPPORT;
}

void ReqTerJoinConfToRelayserver_IPPORT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqTerJoinConfToRelayserver_IPPORT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(nettype_, port_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTerJoinConfToRelayserver_IPPORT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nettype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  return false;
#undef DO_
}

void ReqTerJoinConfToRelayserver_IPPORT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  // optional uint32 nettype = 1;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nettype(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
}

::google::protobuf::uint8* ReqTerJoinConfToRelayserver_IPPORT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  // optional uint32 nettype = 1;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nettype(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
  return target;
}

int ReqTerJoinConfToRelayserver_IPPORT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nettype = 1;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTerJoinConfToRelayserver_IPPORT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTerJoinConfToRelayserver_IPPORT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTerJoinConfToRelayserver_IPPORT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTerJoinConfToRelayserver_IPPORT::MergeFrom(const ReqTerJoinConfToRelayserver_IPPORT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTerJoinConfToRelayserver_IPPORT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTerJoinConfToRelayserver_IPPORT::CopyFrom(const ReqTerJoinConfToRelayserver_IPPORT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTerJoinConfToRelayserver_IPPORT::IsInitialized() const {

  return true;
}

void ReqTerJoinConfToRelayserver_IPPORT::Swap(ReqTerJoinConfToRelayserver_IPPORT* other) {
  if (other != this) {
    std::swap(nettype_, other->nettype_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTerJoinConfToRelayserver_IPPORT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTerJoinConfToRelayserver_IPPORT_descriptor_;
  metadata.reflection = ReqTerJoinConfToRelayserver_IPPORT_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqTerJoinConfToRelayserver_AddrInfo::kSvrtypeFieldNumber;
const int ReqTerJoinConfToRelayserver_AddrInfo::kIpportinfosFieldNumber;
#endif  // !_MSC_VER

ReqTerJoinConfToRelayserver_AddrInfo::ReqTerJoinConfToRelayserver_AddrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
}

void ReqTerJoinConfToRelayserver_AddrInfo::InitAsDefaultInstance() {
}

ReqTerJoinConfToRelayserver_AddrInfo::ReqTerJoinConfToRelayserver_AddrInfo(const ReqTerJoinConfToRelayserver_AddrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
}

void ReqTerJoinConfToRelayserver_AddrInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTerJoinConfToRelayserver_AddrInfo::~ReqTerJoinConfToRelayserver_AddrInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  SharedDtor();
}

void ReqTerJoinConfToRelayserver_AddrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTerJoinConfToRelayserver_AddrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver_AddrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTerJoinConfToRelayserver_AddrInfo_descriptor_;
}

const ReqTerJoinConfToRelayserver_AddrInfo& ReqTerJoinConfToRelayserver_AddrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

ReqTerJoinConfToRelayserver_AddrInfo* ReqTerJoinConfToRelayserver_AddrInfo::default_instance_ = NULL;

ReqTerJoinConfToRelayserver_AddrInfo* ReqTerJoinConfToRelayserver_AddrInfo::New() const {
  return new ReqTerJoinConfToRelayserver_AddrInfo;
}

void ReqTerJoinConfToRelayserver_AddrInfo::Clear() {
  svrtype_ = 0u;
  ipportinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTerJoinConfToRelayserver_AddrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipportinfos;
        break;
      }

      // repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_ipportinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipportinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipportinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  return false;
#undef DO_
}

void ReqTerJoinConfToRelayserver_AddrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
  for (int i = 0; i < this->ipportinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ipportinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
}

::google::protobuf::uint8* ReqTerJoinConfToRelayserver_AddrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
  for (int i = 0; i < this->ipportinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ipportinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
  return target;
}

int ReqTerJoinConfToRelayserver_AddrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrtype = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

  }
  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
  total_size += 1 * this->ipportinfos_size();
  for (int i = 0; i < this->ipportinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipportinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTerJoinConfToRelayserver_AddrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTerJoinConfToRelayserver_AddrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTerJoinConfToRelayserver_AddrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTerJoinConfToRelayserver_AddrInfo::MergeFrom(const ReqTerJoinConfToRelayserver_AddrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipportinfos_.MergeFrom(from.ipportinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTerJoinConfToRelayserver_AddrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTerJoinConfToRelayserver_AddrInfo::CopyFrom(const ReqTerJoinConfToRelayserver_AddrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTerJoinConfToRelayserver_AddrInfo::IsInitialized() const {

  return true;
}

void ReqTerJoinConfToRelayserver_AddrInfo::Swap(ReqTerJoinConfToRelayserver_AddrInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    ipportinfos_.Swap(&other->ipportinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTerJoinConfToRelayserver_AddrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTerJoinConfToRelayserver_AddrInfo_descriptor_;
  metadata.reflection = ReqTerJoinConfToRelayserver_AddrInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqTerJoinConfToRelayserver::kMcidFieldNumber;
const int ReqTerJoinConfToRelayserver::kRelaysvridFieldNumber;
const int ReqTerJoinConfToRelayserver::kConfidFieldNumber;
const int ReqTerJoinConfToRelayserver::kSuidFieldNumber;
const int ReqTerJoinConfToRelayserver::kTeraddrsFieldNumber;
const int ReqTerJoinConfToRelayserver::kSvraddrsFieldNumber;
#endif  // !_MSC_VER

ReqTerJoinConfToRelayserver::ReqTerJoinConfToRelayserver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqTerJoinConfToRelayserver)
}

void ReqTerJoinConfToRelayserver::InitAsDefaultInstance() {
  teraddrs_ = const_cast< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT*>(&::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT::default_instance());
}

ReqTerJoinConfToRelayserver::ReqTerJoinConfToRelayserver(const ReqTerJoinConfToRelayserver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqTerJoinConfToRelayserver)
}

void ReqTerJoinConfToRelayserver::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  relaysvrid_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  suid_ = 0u;
  teraddrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTerJoinConfToRelayserver::~ReqTerJoinConfToRelayserver() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqTerJoinConfToRelayserver)
  SharedDtor();
}

void ReqTerJoinConfToRelayserver::SharedDtor() {
  if (this != default_instance_) {
    delete teraddrs_;
  }
}

void ReqTerJoinConfToRelayserver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTerJoinConfToRelayserver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTerJoinConfToRelayserver_descriptor_;
}

const ReqTerJoinConfToRelayserver& ReqTerJoinConfToRelayserver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

ReqTerJoinConfToRelayserver* ReqTerJoinConfToRelayserver::default_instance_ = NULL;

ReqTerJoinConfToRelayserver* ReqTerJoinConfToRelayserver::New() const {
  return new ReqTerJoinConfToRelayserver;
}

void ReqTerJoinConfToRelayserver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqTerJoinConfToRelayserver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mcid_, confid_);
    suid_ = 0u;
    if (has_teraddrs()) {
      if (teraddrs_ != NULL) teraddrs_->::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  svraddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTerJoinConfToRelayserver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqTerJoinConfToRelayserver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relaysvrid;
        break;
      }

      // optional uint32 relaysvrid = 2;
      case 2: {
        if (tag == 16) {
         parse_relaysvrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relaysvrid_)));
          set_has_relaysvrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 4;
      case 4: {
        if (tag == 32) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_teraddrs;
        break;
      }

      // optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
      case 5: {
        if (tag == 42) {
         parse_teraddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teraddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_svraddrs;
        break;
      }

      // repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
      case 6: {
        if (tag == 50) {
         parse_svraddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svraddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_svraddrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqTerJoinConfToRelayserver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqTerJoinConfToRelayserver)
  return false;
#undef DO_
}

void ReqTerJoinConfToRelayserver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqTerJoinConfToRelayserver)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relaysvrid(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->suid(), output);
  }

  // optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
  if (has_teraddrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teraddrs(), output);
  }

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
  for (int i = 0; i < this->svraddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->svraddrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqTerJoinConfToRelayserver)
}

::google::protobuf::uint8* ReqTerJoinConfToRelayserver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqTerJoinConfToRelayserver)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relaysvrid(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->suid(), target);
  }

  // optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
  if (has_teraddrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teraddrs(), target);
  }

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
  for (int i = 0; i < this->svraddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->svraddrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqTerJoinConfToRelayserver)
  return target;
}

int ReqTerJoinConfToRelayserver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 relaysvrid = 2;
    if (has_relaysvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relaysvrid());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 suid = 4;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
    if (has_teraddrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teraddrs());
    }

  }
  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
  total_size += 1 * this->svraddrs_size();
  for (int i = 0; i < this->svraddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svraddrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTerJoinConfToRelayserver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTerJoinConfToRelayserver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTerJoinConfToRelayserver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTerJoinConfToRelayserver::MergeFrom(const ReqTerJoinConfToRelayserver& from) {
  GOOGLE_CHECK_NE(&from, this);
  svraddrs_.MergeFrom(from.svraddrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_relaysvrid()) {
      set_relaysvrid(from.relaysvrid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_teraddrs()) {
      mutable_teraddrs()->::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT::MergeFrom(from.teraddrs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTerJoinConfToRelayserver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTerJoinConfToRelayserver::CopyFrom(const ReqTerJoinConfToRelayserver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTerJoinConfToRelayserver::IsInitialized() const {

  return true;
}

void ReqTerJoinConfToRelayserver::Swap(ReqTerJoinConfToRelayserver* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(relaysvrid_, other->relaysvrid_);
    std::swap(confid_, other->confid_);
    std::swap(suid_, other->suid_);
    std::swap(teraddrs_, other->teraddrs_);
    svraddrs_.Swap(&other->svraddrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTerJoinConfToRelayserver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTerJoinConfToRelayserver_descriptor_;
  metadata.reflection = ReqTerJoinConfToRelayserver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndRelayserverHeartBeatToMC::kMcidFieldNumber;
const int IndRelayserverHeartBeatToMC::kRelaysvridFieldNumber;
#endif  // !_MSC_VER

IndRelayserverHeartBeatToMC::IndRelayserverHeartBeatToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndRelayserverHeartBeatToMC)
}

void IndRelayserverHeartBeatToMC::InitAsDefaultInstance() {
}

IndRelayserverHeartBeatToMC::IndRelayserverHeartBeatToMC(const IndRelayserverHeartBeatToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndRelayserverHeartBeatToMC)
}

void IndRelayserverHeartBeatToMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  relaysvrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndRelayserverHeartBeatToMC::~IndRelayserverHeartBeatToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndRelayserverHeartBeatToMC)
  SharedDtor();
}

void IndRelayserverHeartBeatToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndRelayserverHeartBeatToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndRelayserverHeartBeatToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndRelayserverHeartBeatToMC_descriptor_;
}

const IndRelayserverHeartBeatToMC& IndRelayserverHeartBeatToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

IndRelayserverHeartBeatToMC* IndRelayserverHeartBeatToMC::default_instance_ = NULL;

IndRelayserverHeartBeatToMC* IndRelayserverHeartBeatToMC::New() const {
  return new IndRelayserverHeartBeatToMC;
}

void IndRelayserverHeartBeatToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndRelayserverHeartBeatToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, relaysvrid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndRelayserverHeartBeatToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndRelayserverHeartBeatToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relaysvrid;
        break;
      }

      // optional uint32 relaysvrid = 2;
      case 2: {
        if (tag == 16) {
         parse_relaysvrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relaysvrid_)));
          set_has_relaysvrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndRelayserverHeartBeatToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndRelayserverHeartBeatToMC)
  return false;
#undef DO_
}

void IndRelayserverHeartBeatToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndRelayserverHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relaysvrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndRelayserverHeartBeatToMC)
}

::google::protobuf::uint8* IndRelayserverHeartBeatToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndRelayserverHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 relaysvrid = 2;
  if (has_relaysvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relaysvrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndRelayserverHeartBeatToMC)
  return target;
}

int IndRelayserverHeartBeatToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 relaysvrid = 2;
    if (has_relaysvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relaysvrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndRelayserverHeartBeatToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndRelayserverHeartBeatToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndRelayserverHeartBeatToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndRelayserverHeartBeatToMC::MergeFrom(const IndRelayserverHeartBeatToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_relaysvrid()) {
      set_relaysvrid(from.relaysvrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndRelayserverHeartBeatToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndRelayserverHeartBeatToMC::CopyFrom(const IndRelayserverHeartBeatToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndRelayserverHeartBeatToMC::IsInitialized() const {

  return true;
}

void IndRelayserverHeartBeatToMC::Swap(IndRelayserverHeartBeatToMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(relaysvrid_, other->relaysvrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndRelayserverHeartBeatToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndRelayserverHeartBeatToMC_descriptor_;
  metadata.reflection = IndRelayserverHeartBeatToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspTerJoinConfFromRelayserver_IPPORT::kNettypeFieldNumber;
const int RspTerJoinConfFromRelayserver_IPPORT::kIpFieldNumber;
const int RspTerJoinConfFromRelayserver_IPPORT::kPortFieldNumber;
#endif  // !_MSC_VER

RspTerJoinConfFromRelayserver_IPPORT::RspTerJoinConfFromRelayserver_IPPORT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
}

void RspTerJoinConfFromRelayserver_IPPORT::InitAsDefaultInstance() {
}

RspTerJoinConfFromRelayserver_IPPORT::RspTerJoinConfFromRelayserver_IPPORT(const RspTerJoinConfFromRelayserver_IPPORT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
}

void RspTerJoinConfFromRelayserver_IPPORT::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nettype_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspTerJoinConfFromRelayserver_IPPORT::~RspTerJoinConfFromRelayserver_IPPORT() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  SharedDtor();
}

void RspTerJoinConfFromRelayserver_IPPORT::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RspTerJoinConfFromRelayserver_IPPORT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspTerJoinConfFromRelayserver_IPPORT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspTerJoinConfFromRelayserver_IPPORT_descriptor_;
}

const RspTerJoinConfFromRelayserver_IPPORT& RspTerJoinConfFromRelayserver_IPPORT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

RspTerJoinConfFromRelayserver_IPPORT* RspTerJoinConfFromRelayserver_IPPORT::default_instance_ = NULL;

RspTerJoinConfFromRelayserver_IPPORT* RspTerJoinConfFromRelayserver_IPPORT::New() const {
  return new RspTerJoinConfFromRelayserver_IPPORT;
}

void RspTerJoinConfFromRelayserver_IPPORT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspTerJoinConfFromRelayserver_IPPORT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(nettype_, port_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspTerJoinConfFromRelayserver_IPPORT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nettype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  return false;
#undef DO_
}

void RspTerJoinConfFromRelayserver_IPPORT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  // optional uint32 nettype = 1;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nettype(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
}

::google::protobuf::uint8* RspTerJoinConfFromRelayserver_IPPORT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  // optional uint32 nettype = 1;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nettype(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
  return target;
}

int RspTerJoinConfFromRelayserver_IPPORT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nettype = 1;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspTerJoinConfFromRelayserver_IPPORT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspTerJoinConfFromRelayserver_IPPORT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspTerJoinConfFromRelayserver_IPPORT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspTerJoinConfFromRelayserver_IPPORT::MergeFrom(const RspTerJoinConfFromRelayserver_IPPORT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspTerJoinConfFromRelayserver_IPPORT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspTerJoinConfFromRelayserver_IPPORT::CopyFrom(const RspTerJoinConfFromRelayserver_IPPORT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspTerJoinConfFromRelayserver_IPPORT::IsInitialized() const {

  return true;
}

void RspTerJoinConfFromRelayserver_IPPORT::Swap(RspTerJoinConfFromRelayserver_IPPORT* other) {
  if (other != this) {
    std::swap(nettype_, other->nettype_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspTerJoinConfFromRelayserver_IPPORT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspTerJoinConfFromRelayserver_IPPORT_descriptor_;
  metadata.reflection = RspTerJoinConfFromRelayserver_IPPORT_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspTerJoinConfFromRelayserver::kFailreasonFieldNumber;
const int RspTerJoinConfFromRelayserver::kIsokFieldNumber;
const int RspTerJoinConfFromRelayserver::kMcidFieldNumber;
const int RspTerJoinConfFromRelayserver::kRelaysvridFieldNumber;
const int RspTerJoinConfFromRelayserver::kConfidFieldNumber;
const int RspTerJoinConfFromRelayserver::kSuidFieldNumber;
const int RspTerJoinConfFromRelayserver::kRelaysvraddrsFieldNumber;
const int RspTerJoinConfFromRelayserver::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspTerJoinConfFromRelayserver::RspTerJoinConfFromRelayserver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspTerJoinConfFromRelayserver)
}

void RspTerJoinConfFromRelayserver::InitAsDefaultInstance() {
  relaysvraddrs_ = const_cast< ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT*>(&::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT::default_instance());
}

RspTerJoinConfFromRelayserver::RspTerJoinConfFromRelayserver(const RspTerJoinConfFromRelayserver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspTerJoinConfFromRelayserver)
}

void RspTerJoinConfFromRelayserver::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isok_ = false;
  mcid_ = 0u;
  relaysvrid_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  suid_ = 0u;
  relaysvraddrs_ = NULL;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspTerJoinConfFromRelayserver::~RspTerJoinConfFromRelayserver() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspTerJoinConfFromRelayserver)
  SharedDtor();
}

void RspTerJoinConfFromRelayserver::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
    delete relaysvraddrs_;
  }
}

void RspTerJoinConfFromRelayserver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspTerJoinConfFromRelayserver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspTerJoinConfFromRelayserver_descriptor_;
}

const RspTerJoinConfFromRelayserver& RspTerJoinConfFromRelayserver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5frelayserver_2eproto();
  return *default_instance_;
}

RspTerJoinConfFromRelayserver* RspTerJoinConfFromRelayserver::default_instance_ = NULL;

RspTerJoinConfFromRelayserver* RspTerJoinConfFromRelayserver::New() const {
  return new RspTerJoinConfFromRelayserver;
}

void RspTerJoinConfFromRelayserver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspTerJoinConfFromRelayserver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isok_, suid_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
    if (has_relaysvraddrs()) {
      if (relaysvraddrs_ != NULL) relaysvraddrs_->::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT::Clear();
    }
    errorcode_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspTerJoinConfFromRelayserver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspTerJoinConfFromRelayserver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string failreason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isok;
        break;
      }

      // optional bool isok = 2;
      case 2: {
        if (tag == 16) {
         parse_isok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relaysvrid;
        break;
      }

      // optional uint32 relaysvrid = 4;
      case 4: {
        if (tag == 32) {
         parse_relaysvrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relaysvrid_)));
          set_has_relaysvrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 5;
      case 5: {
        if (tag == 40) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 6;
      case 6: {
        if (tag == 48) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_relaysvraddrs;
        break;
      }

      // optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
      case 7: {
        if (tag == 58) {
         parse_relaysvraddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relaysvraddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 8;
      case 8: {
        if (tag == 64) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspTerJoinConfFromRelayserver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspTerJoinConfFromRelayserver)
  return false;
#undef DO_
}

void RspTerJoinConfFromRelayserver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspTerJoinConfFromRelayserver)
  // optional string failreason = 1;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->failreason(), output);
  }

  // optional bool isok = 2;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isok(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 relaysvrid = 4;
  if (has_relaysvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relaysvrid(), output);
  }

  // optional uint64 confid = 5;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->confid(), output);
  }

  // optional uint32 suid = 6;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suid(), output);
  }

  // optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
  if (has_relaysvraddrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->relaysvraddrs(), output);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspTerJoinConfFromRelayserver)
}

::google::protobuf::uint8* RspTerJoinConfFromRelayserver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspTerJoinConfFromRelayserver)
  // optional string failreason = 1;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->failreason(), target);
  }

  // optional bool isok = 2;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isok(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 relaysvrid = 4;
  if (has_relaysvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relaysvrid(), target);
  }

  // optional uint64 confid = 5;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->confid(), target);
  }

  // optional uint32 suid = 6;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suid(), target);
  }

  // optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
  if (has_relaysvraddrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->relaysvraddrs(), target);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspTerJoinConfFromRelayserver)
  return target;
}

int RspTerJoinConfFromRelayserver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string failreason = 1;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional bool isok = 2;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 relaysvrid = 4;
    if (has_relaysvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relaysvrid());
    }

    // optional uint64 confid = 5;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 suid = 6;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
    if (has_relaysvraddrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relaysvraddrs());
    }

    // optional uint32 errorcode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspTerJoinConfFromRelayserver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspTerJoinConfFromRelayserver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspTerJoinConfFromRelayserver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspTerJoinConfFromRelayserver::MergeFrom(const RspTerJoinConfFromRelayserver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_relaysvrid()) {
      set_relaysvrid(from.relaysvrid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_relaysvraddrs()) {
      mutable_relaysvraddrs()->::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT::MergeFrom(from.relaysvraddrs());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspTerJoinConfFromRelayserver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspTerJoinConfFromRelayserver::CopyFrom(const RspTerJoinConfFromRelayserver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspTerJoinConfFromRelayserver::IsInitialized() const {

  return true;
}

void RspTerJoinConfFromRelayserver::Swap(RspTerJoinConfFromRelayserver* other) {
  if (other != this) {
    std::swap(failreason_, other->failreason_);
    std::swap(isok_, other->isok_);
    std::swap(mcid_, other->mcid_);
    std::swap(relaysvrid_, other->relaysvrid_);
    std::swap(confid_, other->confid_);
    std::swap(suid_, other->suid_);
    std::swap(relaysvraddrs_, other->relaysvraddrs_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspTerJoinConfFromRelayserver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspTerJoinConfFromRelayserver_descriptor_;
  metadata.reflection = RspTerJoinConfFromRelayserver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
