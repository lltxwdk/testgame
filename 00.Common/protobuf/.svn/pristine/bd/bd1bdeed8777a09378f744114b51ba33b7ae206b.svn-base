// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_mp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_mp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* ReqMPCreateMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateMPI_AgcSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateMPI_AgcSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateMPI_Confcfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateMPI_Confcfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateMPI_NetMpAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateMPI_NetMpAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPDestoryMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPDestoryMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerJoined_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerJoined_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerJoined_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerJoined_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerLeft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerLeft_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSChannelInfoToMp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSChannelInfoToMp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllTerMediaFormatToMP_TermsMediaFmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerSendMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerSendMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerSendMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerRecvMediaFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerRecvMediaFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateScreen_TextATTR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateScreen_TextATTR_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMPCreateScreen_TernameATTR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMPCreateScreen_TernameATTR_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSetScreenLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_AutoPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSetScreenLayout_AutoPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_ConfPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSetScreenLayout_ConfPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSetScreenLayout_ScreenPaneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPDestoryScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPDestoryScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPAddSubtitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPAddSubtitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPStopSubtitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPStopSubtitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPDisplayTername_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPDisplayTername_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPHideTername_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPHideTername_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPStartSendVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPStartSendVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPStartSendVideo_VideoSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPStartSendVideo_VideoSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPReOpenNetMPMediaPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPReOpenNetMPMediaPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChairTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChairTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndtMPTerMuteEnable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndtMPTerMuteEnable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerMuteAllEnable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerMuteAllEnable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerCameraEnable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerCameraEnable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPTerCameraEnable_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPTerCameraEnable_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCHeartBeatToMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatToMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAssistVideoOn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAssistVideoOn_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAssistVideoOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAssistVideoOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPSpecialtypeTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPSpecialtypeTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeVideoSourceName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeVideoSourceName_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeVideoSourceName_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeVideoSourceName_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeVideoSourcePriority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeVideoSourcePriority_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeVideoSourcePriority_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeVideoSourcePriority_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPNewAudioSourceJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPNewAudioSourceJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPNewAudioSourceJoined_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPNewAudioSourceJoined_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAudioSourceLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAudioSourceLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAudioSourceLeave_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAudioSourceLeave_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPNewVideoSourceJoined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPNewVideoSourceJoined_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPNewVideoSourceJoined_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPNewVideoSourceJoined_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPVideoSourceLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPVideoSourceLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPVideoSourceLeave_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPVideoSourceLeave_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeDeviceInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeDeviceInfos_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChangeDeviceInfos_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAutoPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAutoPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAutoPollInfo_ParticipantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAutoPollInfo_ParticipantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPAutoPollInfo_AutoPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPAutoPollInfo_AutoPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChairLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChairLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChairLock_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChairLock_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChairUnLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChairUnLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPChairUnLock_SourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPChairUnLock_SourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMCCreateMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMCCreateMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMCCreateScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMCCreateScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSeleteVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSeleteVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSeleteVideo_TermInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSeleteVideo_TermInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSelectAssistVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSelectAssistVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMPSelectAssistVideo_TermInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMPSelectAssistVideo_TermInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPHeartBeatToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPHeartBeatToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPLayoutInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPLayoutInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPLayoutInfo_AutoPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPLayoutInfo_AutoPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPLayoutInfo_PaneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPLayoutInfo_PaneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPLayoutInfo_LayoutInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPLayoutInfo_LayoutInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5fmp_2eproto() {
  protobuf_AddDesc_mc_5fmp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_mp.proto");
  GOOGLE_CHECK(file != NULL);
  ReqMPCreateMPI_descriptor_ = file->message_type(0);
  static const int ReqMPCreateMPI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, confcfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, netmpaddr_),
  };
  ReqMPCreateMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateMPI_descriptor_,
      ReqMPCreateMPI::default_instance_,
      ReqMPCreateMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateMPI));
  ReqMPCreateMPI_AgcSetting_descriptor_ = ReqMPCreateMPI_descriptor_->nested_type(0);
  static const int ReqMPCreateMPI_AgcSetting_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, agc_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, target_level_dbfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, compression_gain_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, limiter_enable_),
  };
  ReqMPCreateMPI_AgcSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateMPI_AgcSetting_descriptor_,
      ReqMPCreateMPI_AgcSetting::default_instance_,
      ReqMPCreateMPI_AgcSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_AgcSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateMPI_AgcSetting));
  ReqMPCreateMPI_Confcfg_descriptor_ = ReqMPCreateMPI_descriptor_->nested_type(1);
  static const int ReqMPCreateMPI_Confcfg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, max_participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, max_audiomix_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, usevideomixer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, useaudiomixer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, mixing_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, max_encoder_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, agc_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, mediaencryptionalgorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, encryptionkey_),
  };
  ReqMPCreateMPI_Confcfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateMPI_Confcfg_descriptor_,
      ReqMPCreateMPI_Confcfg::default_instance_,
      ReqMPCreateMPI_Confcfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_Confcfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateMPI_Confcfg));
  ReqMPCreateMPI_NetMpAddr_descriptor_ = ReqMPCreateMPI_descriptor_->nested_type(2);
  static const int ReqMPCreateMPI_NetMpAddr_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, netmpmediaip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, desktopctrlrecvport_),
  };
  ReqMPCreateMPI_NetMpAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateMPI_NetMpAddr_descriptor_,
      ReqMPCreateMPI_NetMpAddr::default_instance_,
      ReqMPCreateMPI_NetMpAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateMPI_NetMpAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateMPI_NetMpAddr));
  CmdMPDestoryMPI_descriptor_ = file->message_type(1);
  static const int CmdMPDestoryMPI_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, reason_),
  };
  CmdMPDestoryMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPDestoryMPI_descriptor_,
      CmdMPDestoryMPI::default_instance_,
      CmdMPDestoryMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPDestoryMPI));
  IndMPTerJoined_descriptor_ = file->message_type(2);
  static const int IndMPTerJoined_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, tername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, gmrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, gmrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, gmrname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, devinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, producttype_),
  };
  IndMPTerJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerJoined_descriptor_,
      IndMPTerJoined::default_instance_,
      IndMPTerJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerJoined));
  IndMPTerJoined_SourceInfo_descriptor_ = IndMPTerJoined_descriptor_->nested_type(0);
  static const int IndMPTerJoined_SourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, priority_),
  };
  IndMPTerJoined_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerJoined_SourceInfo_descriptor_,
      IndMPTerJoined_SourceInfo::default_instance_,
      IndMPTerJoined_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerJoined_SourceInfo));
  IndMPTerJoined_DeviceInfo_descriptor_ = IndMPTerJoined_descriptor_->nested_type(1);
  static const int IndMPTerJoined_DeviceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_DeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_DeviceInfo, srcinfos_),
  };
  IndMPTerJoined_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerJoined_DeviceInfo_descriptor_,
      IndMPTerJoined_DeviceInfo::default_instance_,
      IndMPTerJoined_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerJoined_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerJoined_DeviceInfo));
  IndMPTerLeft_descriptor_ = file->message_type(3);
  static const int IndMPTerLeft_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, gmrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, gmrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, gmrname_),
  };
  IndMPTerLeft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerLeft_descriptor_,
      IndMPTerLeft::default_instance_,
      IndMPTerLeft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerLeft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerLeft));
  IndCRSChannelInfoToMp_descriptor_ = file->message_type(4);
  static const int IndCRSChannelInfoToMp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, crschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, addordel_),
  };
  IndCRSChannelInfoToMp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSChannelInfoToMp_descriptor_,
      IndCRSChannelInfoToMp::default_instance_,
      IndCRSChannelInfoToMp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSChannelInfoToMp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSChannelInfoToMp));
  IndConfAllTerMediaFormatToMP_descriptor_ = file->message_type(5);
  static const int IndConfAllTerMediaFormatToMP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, tersmediainfo_),
  };
  IndConfAllTerMediaFormatToMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToMP_descriptor_,
      IndConfAllTerMediaFormatToMP::default_instance_,
      IndConfAllTerMediaFormatToMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToMP));
  IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_ = IndConfAllTerMediaFormatToMP_descriptor_->nested_type(0);
  static const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, videobandwidth_),
  };
  IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_,
      IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance_,
      IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat));
  IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_ = IndConfAllTerMediaFormatToMP_descriptor_->nested_type(1);
  static const int IndConfAllTerMediaFormatToMP_TermsMediaFmt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_TermsMediaFmt, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_TermsMediaFmt, sendmediaformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_TermsMediaFmt, recvmediaformat_),
  };
  IndConfAllTerMediaFormatToMP_TermsMediaFmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_,
      IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance_,
      IndConfAllTerMediaFormatToMP_TermsMediaFmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_TermsMediaFmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllTerMediaFormatToMP_TermsMediaFmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllTerMediaFormatToMP_TermsMediaFmt));
  IndMPTerMediaFormat_descriptor_ = file->message_type(6);
  static const int IndMPTerMediaFormat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, sendmediaformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, recvmediaformat_),
  };
  IndMPTerMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerMediaFormat_descriptor_,
      IndMPTerMediaFormat::default_instance_,
      IndMPTerMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerMediaFormat));
  IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_ = IndMPTerMediaFormat_descriptor_->nested_type(0);
  static const int IndMPTerMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndMPTerMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_,
      IndMPTerMediaFormat_MediaTypeAndFormat::default_instance_,
      IndMPTerMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerMediaFormat_MediaTypeAndFormat));
  IndMPTerSendMediaFormat_descriptor_ = file->message_type(7);
  static const int IndMPTerSendMediaFormat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, sendmediaformat_),
  };
  IndMPTerSendMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerSendMediaFormat_descriptor_,
      IndMPTerSendMediaFormat::default_instance_,
      IndMPTerSendMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerSendMediaFormat));
  IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_ = IndMPTerSendMediaFormat_descriptor_->nested_type(0);
  static const int IndMPTerSendMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndMPTerSendMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_,
      IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_,
      IndMPTerSendMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerSendMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerSendMediaFormat_MediaTypeAndFormat));
  IndMPTerRecvMediaFormat_descriptor_ = file->message_type(8);
  static const int IndMPTerRecvMediaFormat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, recvmediaformat_),
  };
  IndMPTerRecvMediaFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerRecvMediaFormat_descriptor_,
      IndMPTerRecvMediaFormat::default_instance_,
      IndMPTerRecvMediaFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerRecvMediaFormat));
  IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_ = IndMPTerRecvMediaFormat_descriptor_->nested_type(0);
  static const int IndMPTerRecvMediaFormat_MediaTypeAndFormat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, audiofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, audiofrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, audiochannelnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, audioframelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, audiopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, videofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, videopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, duovideofmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, duovideopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, videobandwidth_),
  };
  IndMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_,
      IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_,
      IndMPTerRecvMediaFormat_MediaTypeAndFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerRecvMediaFormat_MediaTypeAndFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerRecvMediaFormat_MediaTypeAndFormat));
  ReqMPCreateScreen_descriptor_ = file->message_type(9);
  static const int ReqMPCreateScreen_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, voiceactiveind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, voiceactivecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, chairfecccolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, ternameattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, videosize_),
  };
  ReqMPCreateScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateScreen_descriptor_,
      ReqMPCreateScreen::default_instance_,
      ReqMPCreateScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateScreen));
  ReqMPCreateScreen_TextATTR_descriptor_ = ReqMPCreateScreen_descriptor_->nested_type(0);
  static const int ReqMPCreateScreen_TextATTR_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, textpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, textfontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, enabletextbg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, textbgcolor_),
  };
  ReqMPCreateScreen_TextATTR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateScreen_TextATTR_descriptor_,
      ReqMPCreateScreen_TextATTR::default_instance_,
      ReqMPCreateScreen_TextATTR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TextATTR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateScreen_TextATTR));
  ReqMPCreateScreen_TernameATTR_descriptor_ = ReqMPCreateScreen_descriptor_->nested_type(1);
  static const int ReqMPCreateScreen_TernameATTR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TernameATTR, enabletername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TernameATTR, ternametextattr_),
  };
  ReqMPCreateScreen_TernameATTR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMPCreateScreen_TernameATTR_descriptor_,
      ReqMPCreateScreen_TernameATTR::default_instance_,
      ReqMPCreateScreen_TernameATTR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TernameATTR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMPCreateScreen_TernameATTR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMPCreateScreen_TernameATTR));
  CmdMPSetScreenLayout_descriptor_ = file->message_type(10);
  static const int CmdMPSetScreenLayout_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, layoutmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, screenpanelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, confpolllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, chairfollow_),
  };
  CmdMPSetScreenLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSetScreenLayout_descriptor_,
      CmdMPSetScreenLayout::default_instance_,
      CmdMPSetScreenLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSetScreenLayout));
  CmdMPSetScreenLayout_AutoPollInfo_descriptor_ = CmdMPSetScreenLayout_descriptor_->nested_type(0);
  static const int CmdMPSetScreenLayout_AutoPollInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_AutoPollInfo, apid_),
  };
  CmdMPSetScreenLayout_AutoPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSetScreenLayout_AutoPollInfo_descriptor_,
      CmdMPSetScreenLayout_AutoPollInfo::default_instance_,
      CmdMPSetScreenLayout_AutoPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_AutoPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_AutoPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSetScreenLayout_AutoPollInfo));
  CmdMPSetScreenLayout_ConfPollInfo_descriptor_ = CmdMPSetScreenLayout_descriptor_->nested_type(1);
  static const int CmdMPSetScreenLayout_ConfPollInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ConfPollInfo, terid_),
  };
  CmdMPSetScreenLayout_ConfPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSetScreenLayout_ConfPollInfo_descriptor_,
      CmdMPSetScreenLayout_ConfPollInfo::default_instance_,
      CmdMPSetScreenLayout_ConfPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ConfPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ConfPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSetScreenLayout_ConfPollInfo));
  CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_ = CmdMPSetScreenLayout_descriptor_->nested_type(2);
  static const int CmdMPSetScreenLayout_ScreenPaneInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, paneindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, polltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, tername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, vsrcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, autopolllist_),
  };
  CmdMPSetScreenLayout_ScreenPaneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_,
      CmdMPSetScreenLayout_ScreenPaneInfo::default_instance_,
      CmdMPSetScreenLayout_ScreenPaneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSetScreenLayout_ScreenPaneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSetScreenLayout_ScreenPaneInfo));
  CmdMPDestoryScreen_descriptor_ = file->message_type(11);
  static const int CmdMPDestoryScreen_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, screenid_),
  };
  CmdMPDestoryScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPDestoryScreen_descriptor_,
      CmdMPDestoryScreen::default_instance_,
      CmdMPDestoryScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDestoryScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPDestoryScreen));
  CmdMPAddSubtitle_descriptor_ = file->message_type(12);
  static const int CmdMPAddSubtitle_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, msgpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, msgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, enablemsgbg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, msgbgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, displaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, enablemsgroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, rollspeed_),
  };
  CmdMPAddSubtitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPAddSubtitle_descriptor_,
      CmdMPAddSubtitle::default_instance_,
      CmdMPAddSubtitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPAddSubtitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPAddSubtitle));
  CmdMPStopSubtitle_descriptor_ = file->message_type(13);
  static const int CmdMPStopSubtitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStopSubtitle, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStopSubtitle, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStopSubtitle, mpid_),
  };
  CmdMPStopSubtitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPStopSubtitle_descriptor_,
      CmdMPStopSubtitle::default_instance_,
      CmdMPStopSubtitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStopSubtitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStopSubtitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPStopSubtitle));
  CmdMPDisplayTername_descriptor_ = file->message_type(14);
  static const int CmdMPDisplayTername_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, msgpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, msgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, enablemsgbg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, msgbgcolor_),
  };
  CmdMPDisplayTername_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPDisplayTername_descriptor_,
      CmdMPDisplayTername::default_instance_,
      CmdMPDisplayTername_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPDisplayTername, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPDisplayTername));
  CmdMPHideTername_descriptor_ = file->message_type(15);
  static const int CmdMPHideTername_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPHideTername, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPHideTername, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPHideTername, mpid_),
  };
  CmdMPHideTername_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPHideTername_descriptor_,
      CmdMPHideTername::default_instance_,
      CmdMPHideTername_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPHideTername, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPHideTername, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPHideTername));
  CmdMPStartSendVideo_descriptor_ = file->message_type(16);
  static const int CmdMPStartSendVideo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, sendvideosize_),
  };
  CmdMPStartSendVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPStartSendVideo_descriptor_,
      CmdMPStartSendVideo::default_instance_,
      CmdMPStartSendVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPStartSendVideo));
  CmdMPStartSendVideo_VideoSize_descriptor_ = CmdMPStartSendVideo_descriptor_->nested_type(0);
  static const int CmdMPStartSendVideo_VideoSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo_VideoSize, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo_VideoSize, count_),
  };
  CmdMPStartSendVideo_VideoSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPStartSendVideo_VideoSize_descriptor_,
      CmdMPStartSendVideo_VideoSize::default_instance_,
      CmdMPStartSendVideo_VideoSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo_VideoSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPStartSendVideo_VideoSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPStartSendVideo_VideoSize));
  CmdMPReOpenNetMPMediaPort_descriptor_ = file->message_type(17);
  static const int CmdMPReOpenNetMPMediaPort_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, netmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, channelid_),
  };
  CmdMPReOpenNetMPMediaPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPReOpenNetMPMediaPort_descriptor_,
      CmdMPReOpenNetMPMediaPort::default_instance_,
      CmdMPReOpenNetMPMediaPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPReOpenNetMPMediaPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPReOpenNetMPMediaPort));
  IndMPChairTransfer_descriptor_ = file->message_type(18);
  static const int IndMPChairTransfer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, nchterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, nchchannelid_),
  };
  IndMPChairTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChairTransfer_descriptor_,
      IndMPChairTransfer::default_instance_,
      IndMPChairTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChairTransfer));
  IndtMPTerMuteEnable_descriptor_ = file->message_type(19);
  static const int IndtMPTerMuteEnable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, mute_enable_),
  };
  IndtMPTerMuteEnable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndtMPTerMuteEnable_descriptor_,
      IndtMPTerMuteEnable::default_instance_,
      IndtMPTerMuteEnable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndtMPTerMuteEnable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndtMPTerMuteEnable));
  IndMPTerMuteAllEnable_descriptor_ = file->message_type(20);
  static const int IndMPTerMuteAllEnable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, mute_all_enable_),
  };
  IndMPTerMuteAllEnable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerMuteAllEnable_descriptor_,
      IndMPTerMuteAllEnable::default_instance_,
      IndMPTerMuteAllEnable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerMuteAllEnable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerMuteAllEnable));
  IndMPTerCameraEnable_descriptor_ = file->message_type(21);
  static const int IndMPTerCameraEnable_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, camera_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, srcinfos_),
  };
  IndMPTerCameraEnable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerCameraEnable_descriptor_,
      IndMPTerCameraEnable::default_instance_,
      IndMPTerCameraEnable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerCameraEnable));
  IndMPTerCameraEnable_SourceInfo_descriptor_ = IndMPTerCameraEnable_descriptor_->nested_type(0);
  static const int IndMPTerCameraEnable_SourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable_SourceInfo, name_),
  };
  IndMPTerCameraEnable_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPTerCameraEnable_SourceInfo_descriptor_,
      IndMPTerCameraEnable_SourceInfo::default_instance_,
      IndMPTerCameraEnable_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPTerCameraEnable_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPTerCameraEnable_SourceInfo));
  IndMCHeartBeatToMP_descriptor_ = file->message_type(22);
  static const int IndMCHeartBeatToMP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToMP, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToMP, mpid_),
  };
  IndMCHeartBeatToMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatToMP_descriptor_,
      IndMCHeartBeatToMP::default_instance_,
      IndMCHeartBeatToMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatToMP));
  IndMPAssistVideoOn_descriptor_ = file->message_type(23);
  static const int IndMPAssistVideoOn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, avterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, avtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, sharedaudio_),
  };
  IndMPAssistVideoOn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAssistVideoOn_descriptor_,
      IndMPAssistVideoOn::default_instance_,
      IndMPAssistVideoOn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAssistVideoOn));
  IndMPAssistVideoOff_descriptor_ = file->message_type(24);
  static const int IndMPAssistVideoOff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, avterid_),
  };
  IndMPAssistVideoOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAssistVideoOff_descriptor_,
      IndMPAssistVideoOff::default_instance_,
      IndMPAssistVideoOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAssistVideoOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAssistVideoOff));
  IndMPSpecialtypeTransfer_descriptor_ = file->message_type(25);
  static const int IndMPSpecialtypeTransfer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, nspclterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, nspcltype_),
  };
  IndMPSpecialtypeTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPSpecialtypeTransfer_descriptor_,
      IndMPSpecialtypeTransfer::default_instance_,
      IndMPSpecialtypeTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPSpecialtypeTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPSpecialtypeTransfer));
  IndMPChangeVideoSourceName_descriptor_ = file->message_type(26);
  static const int IndMPChangeVideoSourceName_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, srcinfos_),
  };
  IndMPChangeVideoSourceName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeVideoSourceName_descriptor_,
      IndMPChangeVideoSourceName::default_instance_,
      IndMPChangeVideoSourceName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeVideoSourceName));
  IndMPChangeVideoSourceName_SourceInfo_descriptor_ = IndMPChangeVideoSourceName_descriptor_->nested_type(0);
  static const int IndMPChangeVideoSourceName_SourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName_SourceInfo, name_),
  };
  IndMPChangeVideoSourceName_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeVideoSourceName_SourceInfo_descriptor_,
      IndMPChangeVideoSourceName_SourceInfo::default_instance_,
      IndMPChangeVideoSourceName_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourceName_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeVideoSourceName_SourceInfo));
  IndMPChangeVideoSourcePriority_descriptor_ = file->message_type(27);
  static const int IndMPChangeVideoSourcePriority_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, allsrcinfos_),
  };
  IndMPChangeVideoSourcePriority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeVideoSourcePriority_descriptor_,
      IndMPChangeVideoSourcePriority::default_instance_,
      IndMPChangeVideoSourcePriority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeVideoSourcePriority));
  IndMPChangeVideoSourcePriority_SourceInfo_descriptor_ = IndMPChangeVideoSourcePriority_descriptor_->nested_type(0);
  static const int IndMPChangeVideoSourcePriority_SourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority_SourceInfo, priority_),
  };
  IndMPChangeVideoSourcePriority_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeVideoSourcePriority_SourceInfo_descriptor_,
      IndMPChangeVideoSourcePriority_SourceInfo::default_instance_,
      IndMPChangeVideoSourcePriority_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeVideoSourcePriority_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeVideoSourcePriority_SourceInfo));
  IndMPNewAudioSourceJoined_descriptor_ = file->message_type(28);
  static const int IndMPNewAudioSourceJoined_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, srcinfos_),
  };
  IndMPNewAudioSourceJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPNewAudioSourceJoined_descriptor_,
      IndMPNewAudioSourceJoined::default_instance_,
      IndMPNewAudioSourceJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPNewAudioSourceJoined));
  IndMPNewAudioSourceJoined_SourceInfo_descriptor_ = IndMPNewAudioSourceJoined_descriptor_->nested_type(0);
  static const int IndMPNewAudioSourceJoined_SourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, priority_),
  };
  IndMPNewAudioSourceJoined_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPNewAudioSourceJoined_SourceInfo_descriptor_,
      IndMPNewAudioSourceJoined_SourceInfo::default_instance_,
      IndMPNewAudioSourceJoined_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewAudioSourceJoined_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPNewAudioSourceJoined_SourceInfo));
  IndMPAudioSourceLeave_descriptor_ = file->message_type(29);
  static const int IndMPAudioSourceLeave_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, srcinfos_),
  };
  IndMPAudioSourceLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAudioSourceLeave_descriptor_,
      IndMPAudioSourceLeave::default_instance_,
      IndMPAudioSourceLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAudioSourceLeave));
  IndMPAudioSourceLeave_SourceInfo_descriptor_ = IndMPAudioSourceLeave_descriptor_->nested_type(0);
  static const int IndMPAudioSourceLeave_SourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave_SourceInfo, name_),
  };
  IndMPAudioSourceLeave_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAudioSourceLeave_SourceInfo_descriptor_,
      IndMPAudioSourceLeave_SourceInfo::default_instance_,
      IndMPAudioSourceLeave_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAudioSourceLeave_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAudioSourceLeave_SourceInfo));
  IndMPNewVideoSourceJoined_descriptor_ = file->message_type(30);
  static const int IndMPNewVideoSourceJoined_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, newsrcinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, allsrcinfos_),
  };
  IndMPNewVideoSourceJoined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPNewVideoSourceJoined_descriptor_,
      IndMPNewVideoSourceJoined::default_instance_,
      IndMPNewVideoSourceJoined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPNewVideoSourceJoined));
  IndMPNewVideoSourceJoined_SourceInfo_descriptor_ = IndMPNewVideoSourceJoined_descriptor_->nested_type(0);
  static const int IndMPNewVideoSourceJoined_SourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, priority_),
  };
  IndMPNewVideoSourceJoined_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPNewVideoSourceJoined_SourceInfo_descriptor_,
      IndMPNewVideoSourceJoined_SourceInfo::default_instance_,
      IndMPNewVideoSourceJoined_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPNewVideoSourceJoined_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPNewVideoSourceJoined_SourceInfo));
  IndMPVideoSourceLeave_descriptor_ = file->message_type(31);
  static const int IndMPVideoSourceLeave_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, delsrcinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, cursrcinfos_),
  };
  IndMPVideoSourceLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPVideoSourceLeave_descriptor_,
      IndMPVideoSourceLeave::default_instance_,
      IndMPVideoSourceLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPVideoSourceLeave));
  IndMPVideoSourceLeave_SourceInfo_descriptor_ = IndMPVideoSourceLeave_descriptor_->nested_type(0);
  static const int IndMPVideoSourceLeave_SourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, priority_),
  };
  IndMPVideoSourceLeave_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPVideoSourceLeave_SourceInfo_descriptor_,
      IndMPVideoSourceLeave_SourceInfo::default_instance_,
      IndMPVideoSourceLeave_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPVideoSourceLeave_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPVideoSourceLeave_SourceInfo));
  IndMPChangeDeviceInfos_descriptor_ = file->message_type(32);
  static const int IndMPChangeDeviceInfos_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, deviceinfos_),
  };
  IndMPChangeDeviceInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeDeviceInfos_descriptor_,
      IndMPChangeDeviceInfos::default_instance_,
      IndMPChangeDeviceInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeDeviceInfos));
  IndMPChangeDeviceInfos_SourceInfo_descriptor_ = IndMPChangeDeviceInfos_descriptor_->nested_type(0);
  static const int IndMPChangeDeviceInfos_SourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, priority_),
  };
  IndMPChangeDeviceInfos_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeDeviceInfos_SourceInfo_descriptor_,
      IndMPChangeDeviceInfos_SourceInfo::default_instance_,
      IndMPChangeDeviceInfos_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeDeviceInfos_SourceInfo));
  IndMPChangeDeviceInfos_DeviceInfo_descriptor_ = IndMPChangeDeviceInfos_descriptor_->nested_type(1);
  static const int IndMPChangeDeviceInfos_DeviceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_DeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_DeviceInfo, oldsrcinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_DeviceInfo, newsrcinfos_),
  };
  IndMPChangeDeviceInfos_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChangeDeviceInfos_DeviceInfo_descriptor_,
      IndMPChangeDeviceInfos_DeviceInfo::default_instance_,
      IndMPChangeDeviceInfos_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChangeDeviceInfos_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChangeDeviceInfos_DeviceInfo));
  IndMPAutoPollInfo_descriptor_ = file->message_type(33);
  static const int IndMPAutoPollInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, autopolllist_),
  };
  IndMPAutoPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAutoPollInfo_descriptor_,
      IndMPAutoPollInfo::default_instance_,
      IndMPAutoPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAutoPollInfo));
  IndMPAutoPollInfo_ParticipantInfo_descriptor_ = IndMPAutoPollInfo_descriptor_->nested_type(0);
  static const int IndMPAutoPollInfo_ParticipantInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_ParticipantInfo, psuid_),
  };
  IndMPAutoPollInfo_ParticipantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAutoPollInfo_ParticipantInfo_descriptor_,
      IndMPAutoPollInfo_ParticipantInfo::default_instance_,
      IndMPAutoPollInfo_ParticipantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_ParticipantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_ParticipantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAutoPollInfo_ParticipantInfo));
  IndMPAutoPollInfo_AutoPollInfo_descriptor_ = IndMPAutoPollInfo_descriptor_->nested_type(1);
  static const int IndMPAutoPollInfo_AutoPollInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, apid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, apname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, parts_),
  };
  IndMPAutoPollInfo_AutoPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPAutoPollInfo_AutoPollInfo_descriptor_,
      IndMPAutoPollInfo_AutoPollInfo::default_instance_,
      IndMPAutoPollInfo_AutoPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPAutoPollInfo_AutoPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPAutoPollInfo_AutoPollInfo));
  IndMPChairLock_descriptor_ = file->message_type(34);
  static const int IndMPChairLock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, lockedterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, srcinfos_),
  };
  IndMPChairLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChairLock_descriptor_,
      IndMPChairLock::default_instance_,
      IndMPChairLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChairLock));
  IndMPChairLock_SourceInfo_descriptor_ = IndMPChairLock_descriptor_->nested_type(0);
  static const int IndMPChairLock_SourceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock_SourceInfo, srcid_),
  };
  IndMPChairLock_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChairLock_SourceInfo_descriptor_,
      IndMPChairLock_SourceInfo::default_instance_,
      IndMPChairLock_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairLock_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChairLock_SourceInfo));
  IndMPChairUnLock_descriptor_ = file->message_type(35);
  static const int IndMPChairUnLock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, unlockedterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, srcinfos_),
  };
  IndMPChairUnLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChairUnLock_descriptor_,
      IndMPChairUnLock::default_instance_,
      IndMPChairUnLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChairUnLock));
  IndMPChairUnLock_SourceInfo_descriptor_ = IndMPChairUnLock_descriptor_->nested_type(0);
  static const int IndMPChairUnLock_SourceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock_SourceInfo, srcid_),
  };
  IndMPChairUnLock_SourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPChairUnLock_SourceInfo_descriptor_,
      IndMPChairUnLock_SourceInfo::default_instance_,
      IndMPChairUnLock_SourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock_SourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPChairUnLock_SourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPChairUnLock_SourceInfo));
  RspMCCreateMPI_descriptor_ = file->message_type(36);
  static const int RspMCCreateMPI_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, errorcode_),
  };
  RspMCCreateMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspMCCreateMPI_descriptor_,
      RspMCCreateMPI::default_instance_,
      RspMCCreateMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspMCCreateMPI));
  RspMCCreateScreen_descriptor_ = file->message_type(37);
  static const int RspMCCreateScreen_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, errorcode_),
  };
  RspMCCreateScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspMCCreateScreen_descriptor_,
      RspMCCreateScreen::default_instance_,
      RspMCCreateScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMCCreateScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspMCCreateScreen));
  CmdMPSeleteVideo_descriptor_ = file->message_type(38);
  static const int CmdMPSeleteVideo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, seleteterinfo_),
  };
  CmdMPSeleteVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSeleteVideo_descriptor_,
      CmdMPSeleteVideo::default_instance_,
      CmdMPSeleteVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSeleteVideo));
  CmdMPSeleteVideo_TermInfo_descriptor_ = CmdMPSeleteVideo_descriptor_->nested_type(0);
  static const int CmdMPSeleteVideo_TermInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, videosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, srcid_),
  };
  CmdMPSeleteVideo_TermInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSeleteVideo_TermInfo_descriptor_,
      CmdMPSeleteVideo_TermInfo::default_instance_,
      CmdMPSeleteVideo_TermInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSeleteVideo_TermInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSeleteVideo_TermInfo));
  CmdMPSelectAssistVideo_descriptor_ = file->message_type(39);
  static const int CmdMPSelectAssistVideo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, selectavinfo_),
  };
  CmdMPSelectAssistVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSelectAssistVideo_descriptor_,
      CmdMPSelectAssistVideo::default_instance_,
      CmdMPSelectAssistVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSelectAssistVideo));
  CmdMPSelectAssistVideo_TermInfo_descriptor_ = CmdMPSelectAssistVideo_descriptor_->nested_type(0);
  static const int CmdMPSelectAssistVideo_TermInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, recvfmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, recvsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, recvavtype_),
  };
  CmdMPSelectAssistVideo_TermInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMPSelectAssistVideo_TermInfo_descriptor_,
      CmdMPSelectAssistVideo_TermInfo::default_instance_,
      CmdMPSelectAssistVideo_TermInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMPSelectAssistVideo_TermInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMPSelectAssistVideo_TermInfo));
  IndMPHeartBeatToMC_descriptor_ = file->message_type(40);
  static const int IndMPHeartBeatToMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPHeartBeatToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPHeartBeatToMC, mpid_),
  };
  IndMPHeartBeatToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPHeartBeatToMC_descriptor_,
      IndMPHeartBeatToMC::default_instance_,
      IndMPHeartBeatToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPHeartBeatToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPHeartBeatToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPHeartBeatToMC));
  IndMPLayoutInfo_descriptor_ = file->message_type(41);
  static const int IndMPLayoutInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, mpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, layoutinfos_),
  };
  IndMPLayoutInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPLayoutInfo_descriptor_,
      IndMPLayoutInfo::default_instance_,
      IndMPLayoutInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPLayoutInfo));
  IndMPLayoutInfo_AutoPollInfo_descriptor_ = IndMPLayoutInfo_descriptor_->nested_type(0);
  static const int IndMPLayoutInfo_AutoPollInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_AutoPollInfo, apid_),
  };
  IndMPLayoutInfo_AutoPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPLayoutInfo_AutoPollInfo_descriptor_,
      IndMPLayoutInfo_AutoPollInfo::default_instance_,
      IndMPLayoutInfo_AutoPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_AutoPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_AutoPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPLayoutInfo_AutoPollInfo));
  IndMPLayoutInfo_PaneInfo_descriptor_ = IndMPLayoutInfo_descriptor_->nested_type(1);
  static const int IndMPLayoutInfo_PaneInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, paneindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, polltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, tername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, vsrcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, autopolllist_),
  };
  IndMPLayoutInfo_PaneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPLayoutInfo_PaneInfo_descriptor_,
      IndMPLayoutInfo_PaneInfo::default_instance_,
      IndMPLayoutInfo_PaneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_PaneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPLayoutInfo_PaneInfo));
  IndMPLayoutInfo_LayoutInfo_descriptor_ = IndMPLayoutInfo_descriptor_->nested_type(2);
  static const int IndMPLayoutInfo_LayoutInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, layoutmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, panes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, chairfollow_),
  };
  IndMPLayoutInfo_LayoutInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPLayoutInfo_LayoutInfo_descriptor_,
      IndMPLayoutInfo_LayoutInfo::default_instance_,
      IndMPLayoutInfo_LayoutInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPLayoutInfo_LayoutInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPLayoutInfo_LayoutInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5fmp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateMPI_descriptor_, &ReqMPCreateMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateMPI_AgcSetting_descriptor_, &ReqMPCreateMPI_AgcSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateMPI_Confcfg_descriptor_, &ReqMPCreateMPI_Confcfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateMPI_NetMpAddr_descriptor_, &ReqMPCreateMPI_NetMpAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPDestoryMPI_descriptor_, &CmdMPDestoryMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerJoined_descriptor_, &IndMPTerJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerJoined_SourceInfo_descriptor_, &IndMPTerJoined_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerJoined_DeviceInfo_descriptor_, &IndMPTerJoined_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerLeft_descriptor_, &IndMPTerLeft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSChannelInfoToMp_descriptor_, &IndCRSChannelInfoToMp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToMP_descriptor_, &IndConfAllTerMediaFormatToMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_, &IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_, &IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerMediaFormat_descriptor_, &IndMPTerMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_, &IndMPTerMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerSendMediaFormat_descriptor_, &IndMPTerSendMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_, &IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerRecvMediaFormat_descriptor_, &IndMPTerRecvMediaFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_, &IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateScreen_descriptor_, &ReqMPCreateScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateScreen_TextATTR_descriptor_, &ReqMPCreateScreen_TextATTR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMPCreateScreen_TernameATTR_descriptor_, &ReqMPCreateScreen_TernameATTR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSetScreenLayout_descriptor_, &CmdMPSetScreenLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSetScreenLayout_AutoPollInfo_descriptor_, &CmdMPSetScreenLayout_AutoPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSetScreenLayout_ConfPollInfo_descriptor_, &CmdMPSetScreenLayout_ConfPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_, &CmdMPSetScreenLayout_ScreenPaneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPDestoryScreen_descriptor_, &CmdMPDestoryScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPAddSubtitle_descriptor_, &CmdMPAddSubtitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPStopSubtitle_descriptor_, &CmdMPStopSubtitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPDisplayTername_descriptor_, &CmdMPDisplayTername::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPHideTername_descriptor_, &CmdMPHideTername::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPStartSendVideo_descriptor_, &CmdMPStartSendVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPStartSendVideo_VideoSize_descriptor_, &CmdMPStartSendVideo_VideoSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPReOpenNetMPMediaPort_descriptor_, &CmdMPReOpenNetMPMediaPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChairTransfer_descriptor_, &IndMPChairTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndtMPTerMuteEnable_descriptor_, &IndtMPTerMuteEnable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerMuteAllEnable_descriptor_, &IndMPTerMuteAllEnable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerCameraEnable_descriptor_, &IndMPTerCameraEnable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPTerCameraEnable_SourceInfo_descriptor_, &IndMPTerCameraEnable_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatToMP_descriptor_, &IndMCHeartBeatToMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAssistVideoOn_descriptor_, &IndMPAssistVideoOn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAssistVideoOff_descriptor_, &IndMPAssistVideoOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPSpecialtypeTransfer_descriptor_, &IndMPSpecialtypeTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeVideoSourceName_descriptor_, &IndMPChangeVideoSourceName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeVideoSourceName_SourceInfo_descriptor_, &IndMPChangeVideoSourceName_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeVideoSourcePriority_descriptor_, &IndMPChangeVideoSourcePriority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeVideoSourcePriority_SourceInfo_descriptor_, &IndMPChangeVideoSourcePriority_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPNewAudioSourceJoined_descriptor_, &IndMPNewAudioSourceJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPNewAudioSourceJoined_SourceInfo_descriptor_, &IndMPNewAudioSourceJoined_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAudioSourceLeave_descriptor_, &IndMPAudioSourceLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAudioSourceLeave_SourceInfo_descriptor_, &IndMPAudioSourceLeave_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPNewVideoSourceJoined_descriptor_, &IndMPNewVideoSourceJoined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPNewVideoSourceJoined_SourceInfo_descriptor_, &IndMPNewVideoSourceJoined_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPVideoSourceLeave_descriptor_, &IndMPVideoSourceLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPVideoSourceLeave_SourceInfo_descriptor_, &IndMPVideoSourceLeave_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeDeviceInfos_descriptor_, &IndMPChangeDeviceInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeDeviceInfos_SourceInfo_descriptor_, &IndMPChangeDeviceInfos_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChangeDeviceInfos_DeviceInfo_descriptor_, &IndMPChangeDeviceInfos_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAutoPollInfo_descriptor_, &IndMPAutoPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAutoPollInfo_ParticipantInfo_descriptor_, &IndMPAutoPollInfo_ParticipantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPAutoPollInfo_AutoPollInfo_descriptor_, &IndMPAutoPollInfo_AutoPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChairLock_descriptor_, &IndMPChairLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChairLock_SourceInfo_descriptor_, &IndMPChairLock_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChairUnLock_descriptor_, &IndMPChairUnLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPChairUnLock_SourceInfo_descriptor_, &IndMPChairUnLock_SourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspMCCreateMPI_descriptor_, &RspMCCreateMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspMCCreateScreen_descriptor_, &RspMCCreateScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSeleteVideo_descriptor_, &CmdMPSeleteVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSeleteVideo_TermInfo_descriptor_, &CmdMPSeleteVideo_TermInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSelectAssistVideo_descriptor_, &CmdMPSelectAssistVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMPSelectAssistVideo_TermInfo_descriptor_, &CmdMPSelectAssistVideo_TermInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPHeartBeatToMC_descriptor_, &IndMPHeartBeatToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPLayoutInfo_descriptor_, &IndMPLayoutInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPLayoutInfo_AutoPollInfo_descriptor_, &IndMPLayoutInfo_AutoPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPLayoutInfo_PaneInfo_descriptor_, &IndMPLayoutInfo_PaneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPLayoutInfo_LayoutInfo_descriptor_, &IndMPLayoutInfo_LayoutInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5fmp_2eproto() {
  delete ReqMPCreateMPI::default_instance_;
  delete ReqMPCreateMPI_reflection_;
  delete ReqMPCreateMPI_AgcSetting::default_instance_;
  delete ReqMPCreateMPI_AgcSetting_reflection_;
  delete ReqMPCreateMPI_Confcfg::default_instance_;
  delete ReqMPCreateMPI_Confcfg_reflection_;
  delete ReqMPCreateMPI_NetMpAddr::default_instance_;
  delete ReqMPCreateMPI_NetMpAddr_reflection_;
  delete CmdMPDestoryMPI::default_instance_;
  delete CmdMPDestoryMPI_reflection_;
  delete IndMPTerJoined::default_instance_;
  delete IndMPTerJoined_reflection_;
  delete IndMPTerJoined_SourceInfo::default_instance_;
  delete IndMPTerJoined_SourceInfo_reflection_;
  delete IndMPTerJoined_DeviceInfo::default_instance_;
  delete IndMPTerJoined_DeviceInfo_reflection_;
  delete IndMPTerLeft::default_instance_;
  delete IndMPTerLeft_reflection_;
  delete IndCRSChannelInfoToMp::default_instance_;
  delete IndCRSChannelInfoToMp_reflection_;
  delete IndConfAllTerMediaFormatToMP::default_instance_;
  delete IndConfAllTerMediaFormatToMP_reflection_;
  delete IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance_;
  delete IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_reflection_;
  delete IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance_;
  delete IndConfAllTerMediaFormatToMP_TermsMediaFmt_reflection_;
  delete IndMPTerMediaFormat::default_instance_;
  delete IndMPTerMediaFormat_reflection_;
  delete IndMPTerMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndMPTerMediaFormat_MediaTypeAndFormat_reflection_;
  delete IndMPTerSendMediaFormat::default_instance_;
  delete IndMPTerSendMediaFormat_reflection_;
  delete IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndMPTerSendMediaFormat_MediaTypeAndFormat_reflection_;
  delete IndMPTerRecvMediaFormat::default_instance_;
  delete IndMPTerRecvMediaFormat_reflection_;
  delete IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_;
  delete IndMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_;
  delete ReqMPCreateScreen::default_instance_;
  delete ReqMPCreateScreen_reflection_;
  delete ReqMPCreateScreen_TextATTR::default_instance_;
  delete ReqMPCreateScreen_TextATTR_reflection_;
  delete ReqMPCreateScreen_TernameATTR::default_instance_;
  delete ReqMPCreateScreen_TernameATTR_reflection_;
  delete CmdMPSetScreenLayout::default_instance_;
  delete CmdMPSetScreenLayout_reflection_;
  delete CmdMPSetScreenLayout_AutoPollInfo::default_instance_;
  delete CmdMPSetScreenLayout_AutoPollInfo_reflection_;
  delete CmdMPSetScreenLayout_ConfPollInfo::default_instance_;
  delete CmdMPSetScreenLayout_ConfPollInfo_reflection_;
  delete CmdMPSetScreenLayout_ScreenPaneInfo::default_instance_;
  delete CmdMPSetScreenLayout_ScreenPaneInfo_reflection_;
  delete CmdMPDestoryScreen::default_instance_;
  delete CmdMPDestoryScreen_reflection_;
  delete CmdMPAddSubtitle::default_instance_;
  delete CmdMPAddSubtitle_reflection_;
  delete CmdMPStopSubtitle::default_instance_;
  delete CmdMPStopSubtitle_reflection_;
  delete CmdMPDisplayTername::default_instance_;
  delete CmdMPDisplayTername_reflection_;
  delete CmdMPHideTername::default_instance_;
  delete CmdMPHideTername_reflection_;
  delete CmdMPStartSendVideo::default_instance_;
  delete CmdMPStartSendVideo_reflection_;
  delete CmdMPStartSendVideo_VideoSize::default_instance_;
  delete CmdMPStartSendVideo_VideoSize_reflection_;
  delete CmdMPReOpenNetMPMediaPort::default_instance_;
  delete CmdMPReOpenNetMPMediaPort_reflection_;
  delete IndMPChairTransfer::default_instance_;
  delete IndMPChairTransfer_reflection_;
  delete IndtMPTerMuteEnable::default_instance_;
  delete IndtMPTerMuteEnable_reflection_;
  delete IndMPTerMuteAllEnable::default_instance_;
  delete IndMPTerMuteAllEnable_reflection_;
  delete IndMPTerCameraEnable::default_instance_;
  delete IndMPTerCameraEnable_reflection_;
  delete IndMPTerCameraEnable_SourceInfo::default_instance_;
  delete IndMPTerCameraEnable_SourceInfo_reflection_;
  delete IndMCHeartBeatToMP::default_instance_;
  delete IndMCHeartBeatToMP_reflection_;
  delete IndMPAssistVideoOn::default_instance_;
  delete IndMPAssistVideoOn_reflection_;
  delete IndMPAssistVideoOff::default_instance_;
  delete IndMPAssistVideoOff_reflection_;
  delete IndMPSpecialtypeTransfer::default_instance_;
  delete IndMPSpecialtypeTransfer_reflection_;
  delete IndMPChangeVideoSourceName::default_instance_;
  delete IndMPChangeVideoSourceName_reflection_;
  delete IndMPChangeVideoSourceName_SourceInfo::default_instance_;
  delete IndMPChangeVideoSourceName_SourceInfo_reflection_;
  delete IndMPChangeVideoSourcePriority::default_instance_;
  delete IndMPChangeVideoSourcePriority_reflection_;
  delete IndMPChangeVideoSourcePriority_SourceInfo::default_instance_;
  delete IndMPChangeVideoSourcePriority_SourceInfo_reflection_;
  delete IndMPNewAudioSourceJoined::default_instance_;
  delete IndMPNewAudioSourceJoined_reflection_;
  delete IndMPNewAudioSourceJoined_SourceInfo::default_instance_;
  delete IndMPNewAudioSourceJoined_SourceInfo_reflection_;
  delete IndMPAudioSourceLeave::default_instance_;
  delete IndMPAudioSourceLeave_reflection_;
  delete IndMPAudioSourceLeave_SourceInfo::default_instance_;
  delete IndMPAudioSourceLeave_SourceInfo_reflection_;
  delete IndMPNewVideoSourceJoined::default_instance_;
  delete IndMPNewVideoSourceJoined_reflection_;
  delete IndMPNewVideoSourceJoined_SourceInfo::default_instance_;
  delete IndMPNewVideoSourceJoined_SourceInfo_reflection_;
  delete IndMPVideoSourceLeave::default_instance_;
  delete IndMPVideoSourceLeave_reflection_;
  delete IndMPVideoSourceLeave_SourceInfo::default_instance_;
  delete IndMPVideoSourceLeave_SourceInfo_reflection_;
  delete IndMPChangeDeviceInfos::default_instance_;
  delete IndMPChangeDeviceInfos_reflection_;
  delete IndMPChangeDeviceInfos_SourceInfo::default_instance_;
  delete IndMPChangeDeviceInfos_SourceInfo_reflection_;
  delete IndMPChangeDeviceInfos_DeviceInfo::default_instance_;
  delete IndMPChangeDeviceInfos_DeviceInfo_reflection_;
  delete IndMPAutoPollInfo::default_instance_;
  delete IndMPAutoPollInfo_reflection_;
  delete IndMPAutoPollInfo_ParticipantInfo::default_instance_;
  delete IndMPAutoPollInfo_ParticipantInfo_reflection_;
  delete IndMPAutoPollInfo_AutoPollInfo::default_instance_;
  delete IndMPAutoPollInfo_AutoPollInfo_reflection_;
  delete IndMPChairLock::default_instance_;
  delete IndMPChairLock_reflection_;
  delete IndMPChairLock_SourceInfo::default_instance_;
  delete IndMPChairLock_SourceInfo_reflection_;
  delete IndMPChairUnLock::default_instance_;
  delete IndMPChairUnLock_reflection_;
  delete IndMPChairUnLock_SourceInfo::default_instance_;
  delete IndMPChairUnLock_SourceInfo_reflection_;
  delete RspMCCreateMPI::default_instance_;
  delete RspMCCreateMPI_reflection_;
  delete RspMCCreateScreen::default_instance_;
  delete RspMCCreateScreen_reflection_;
  delete CmdMPSeleteVideo::default_instance_;
  delete CmdMPSeleteVideo_reflection_;
  delete CmdMPSeleteVideo_TermInfo::default_instance_;
  delete CmdMPSeleteVideo_TermInfo_reflection_;
  delete CmdMPSelectAssistVideo::default_instance_;
  delete CmdMPSelectAssistVideo_reflection_;
  delete CmdMPSelectAssistVideo_TermInfo::default_instance_;
  delete CmdMPSelectAssistVideo_TermInfo_reflection_;
  delete IndMPHeartBeatToMC::default_instance_;
  delete IndMPHeartBeatToMC_reflection_;
  delete IndMPLayoutInfo::default_instance_;
  delete IndMPLayoutInfo_reflection_;
  delete IndMPLayoutInfo_AutoPollInfo::default_instance_;
  delete IndMPLayoutInfo_AutoPollInfo_reflection_;
  delete IndMPLayoutInfo_PaneInfo::default_instance_;
  delete IndMPLayoutInfo_PaneInfo_reflection_;
  delete IndMPLayoutInfo_LayoutInfo::default_instance_;
  delete IndMPLayoutInfo_LayoutInfo_reflection_;
}

void protobuf_AddDesc_mc_5fmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mc_mp.proto\022\006SRMsgs\"\204\007\n\016ReqMPCreateMPI"
    "\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003"
    " \001(\r\022\021\n\tchannelid\030\004 \001(\r\022/\n\007confcfg\030\005 \001(\013"
    "2\036.SRMsgs.ReqMPCreateMPI.Confcfg\0223\n\tnetm"
    "paddr\030\006 \001(\0132 .SRMsgs.ReqMPCreateMPI.NetM"
    "pAddr\032p\n\nAgcSetting\022\022\n\nagc_enable\030\001 \001(\010\022"
    "\031\n\021target_level_dbfs\030\002 \001(\005\022\033\n\023compressio"
    "n_gain_db\030\003 \001(\005\022\026\n\016limiter_enable\030\004 \001(\010\032"
    "\217\002\n\007Confcfg\022\030\n\020max_participants\030\001 \001(\r\022\030\n"
    "\020max_audiomix_num\030\002 \001(\r\022\025\n\ruseVideoMixer"
    "\030\003 \001(\r\022\025\n\ruseAudioMixer\030\004 \001(\r\022\030\n\020mixing_"
    "frequency\030\005 \001(\r\022\027\n\017max_encoder_num\030\006 \001(\r"
    "\0226\n\013agc_setting\030\007 \001(\0132!.SRMsgs.ReqMPCrea"
    "teMPI.AgcSetting\022 \n\030mediaencryptionalgor"
    "ithm\030\010 \001(\r\022\025\n\rencryptionkey\030\t \001(\014\032\310\002\n\tNe"
    "tMpAddr\022\017\n\007netmpid\030\001 \001(\r\022\024\n\014netmpmediaip"
    "\030\002 \001(\t\022\031\n\021audiodatarecvport\030\003 \001(\r\022\031\n\021aud"
    "ioctrlrecvport\030\004 \001(\r\022\031\n\021videodatarecvpor"
    "t\030\005 \001(\r\022\031\n\021videoctrlrecvport\030\006 \001(\r\022\032\n\022vi"
    "deo2datarecvport\030\007 \001(\r\022\032\n\022video2ctrlrecv"
    "port\030\010 \001(\r\022\032\n\022video3datarecvport\030\t \001(\r\022\032"
    "\n\022video3ctrlrecvport\030\n \001(\r\022\033\n\023desktopdat"
    "arecvport\030\013 \001(\r\022\033\n\023desktopctrlrecvport\030\014"
    " \001(\r\"`\n\017CmdMPDestoryMPI\022\016\n\006confid\030\001 \001(\004\022"
    "\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid"
    "\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\"\315\003\n\016IndMPTerJoine"
    "d\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030"
    "\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022"
    "\020\n\010termtype\030\006 \001(\r\022\020\n\010fromtype\030\007 \001(\r\022\017\n\007t"
    "ername\030\010 \001(\t\022\023\n\013specialtype\030\t \001(\r\022\017\n\007gmr"
    "type\030\n \001(\r\022\r\n\005gmrid\030\013 \001(\r\022\017\n\007gmrname\030\014 \001"
    "(\t\0223\n\010devinfos\030\r \003(\0132!.SRMsgs.IndMPTerJo"
    "ined.DeviceInfo\022\014\n\004suid\030\016 \001(\r\022\023\n\013product"
    "type\030\017 \001(\r\032I\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022"
    "\014\n\004name\030\002 \001(\t\022\014\n\004isOn\030\003 \001(\010\022\020\n\010priority\030"
    "\004 \001(\r\032O\n\nDeviceInfo\022\014\n\004type\030\001 \001(\r\0223\n\010src"
    "infos\030\002 \003(\0132!.SRMsgs.IndMPTerJoined.Sour"
    "ceInfo\"\215\001\n\014IndMPTerLeft\022\016\n\006confid\030\001 \001(\004\022"
    "\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid\030\004 \001"
    "(\r\022\021\n\tchannelid\030\005 \001(\r\022\017\n\007gmrtype\030\006 \001(\r\022\r"
    "\n\005gmrid\030\007 \001(\r\022\017\n\007gmrname\030\010 \001(\t\"z\n\025IndCRS"
    "ChannelInfoToMp\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030"
    "\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005crsid\030\004 \001(\r\022\024\n\014cr"
    "schannelid\030\005 \001(\r\022\020\n\010addordel\030\006 \001(\r\"\300\004\n\034I"
    "ndConfAllTerMediaFormatToMP\022\016\n\006confid\030\001 "
    "\001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022I\n\rtersm"
    "ediainfo\030\004 \003(\01322.SRMsgs.IndConfAllTerMed"
    "iaFormatToMP.TermsMediaFmt\032\343\001\n\022MediaType"
    "AndFormat\022\020\n\010audiofmt\030\001 \001(\r\022\026\n\016audiofreq"
    "uency\030\002 \001(\r\022\027\n\017audiochannelnum\030\003 \001(\r\022\025\n\r"
    "audioframelen\030\004 \001(\r\022\017\n\007audiopt\030\005 \001(\r\022\020\n\010"
    "videofmt\030\006 \001(\r\022\017\n\007videopt\030\007 \001(\r\022\023\n\013duovi"
    "deofmt\030\010 \001(\r\022\022\n\nduovideopt\030\t \001(\r\022\026\n\016vide"
    "obandwidth\030\n \001(\r\032\302\001\n\rTermsMediaFmt\022\r\n\005te"
    "rid\030\001 \001(\r\022P\n\017sendmediaformat\030\002 \001(\01327.SRM"
    "sgs.IndConfAllTerMediaFormatToMP.MediaTy"
    "peAndFormat\022P\n\017recvmediaformat\030\003 \001(\01327.S"
    "RMsgs.IndConfAllTerMediaFormatToMP.Media"
    "TypeAndFormat\"\333\003\n\023IndMPTerMediaFormat\022\016\n"
    "\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001("
    "\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022G\n\017s"
    "endmediaformat\030\006 \001(\0132..SRMsgs.IndMPTerMe"
    "diaFormat.MediaTypeAndFormat\022G\n\017recvmedi"
    "aformat\030\007 \001(\0132..SRMsgs.IndMPTerMediaForm"
    "at.MediaTypeAndFormat\032\343\001\n\022MediaTypeAndFo"
    "rmat\022\020\n\010audiofmt\030\001 \001(\r\022\026\n\016audiofrequency"
    "\030\002 \001(\r\022\027\n\017audiochannelnum\030\003 \001(\r\022\025\n\raudio"
    "framelen\030\004 \001(\r\022\017\n\007audiopt\030\005 \001(\r\022\020\n\010video"
    "fmt\030\006 \001(\r\022\017\n\007videopt\030\007 \001(\r\022\023\n\013duovideofm"
    "t\030\010 \001(\r\022\022\n\nduovideopt\030\t \001(\r\022\026\n\016videoband"
    "width\030\n \001(\r\"\232\003\n\027IndMPTerSendMediaFormat\022"
    "\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 "
    "\001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022K\n"
    "\017sendmediaformat\030\006 \001(\01322.SRMsgs.IndMPTer"
    "SendMediaFormat.MediaTypeAndFormat\032\343\001\n\022M"
    "ediaTypeAndFormat\022\020\n\010audiofmt\030\001 \001(\r\022\026\n\016a"
    "udiofrequency\030\002 \001(\r\022\027\n\017audiochannelnum\030\003"
    " \001(\r\022\025\n\raudioframelen\030\004 \001(\r\022\017\n\007audiopt\030\005"
    " \001(\r\022\020\n\010videofmt\030\006 \001(\r\022\017\n\007videopt\030\007 \001(\r\022"
    "\023\n\013duovideofmt\030\010 \001(\r\022\022\n\nduovideopt\030\t \001(\r"
    "\022\026\n\016videobandwidth\030\n \001(\r\"\232\003\n\027IndMPTerRec"
    "vMediaFormat\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001"
    "(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchann"
    "elid\030\005 \001(\r\022K\n\017recvmediaformat\030\006 \001(\01322.SR"
    "Msgs.IndMPTerRecvMediaFormat.MediaTypeAn"
    "dFormat\032\343\001\n\022MediaTypeAndFormat\022\020\n\010audiof"
    "mt\030\001 \001(\r\022\026\n\016audiofrequency\030\002 \001(\r\022\027\n\017audi"
    "ochannelnum\030\003 \001(\r\022\025\n\raudioframelen\030\004 \001(\r"
    "\022\017\n\007audiopt\030\005 \001(\r\022\020\n\010videofmt\030\006 \001(\r\022\017\n\007v"
    "ideopt\030\007 \001(\r\022\023\n\013duovideofmt\030\010 \001(\r\022\022\n\nduo"
    "videopt\030\t \001(\r\022\026\n\016videobandwidth\030\n \001(\r\"\215\004"
    "\n\021ReqMPCreateScreen\022\016\n\006confid\030\001 \001(\004\022\014\n\004m"
    "cid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid\030\004 \001"
    "(\r\022\022\n\nscreentype\030\005 \001(\r\022\026\n\016relatednetmpid"
    "\030\006 \001(\r\022\026\n\016voiceActiveInd\030\007 \001(\010\022\030\n\020voiceA"
    "ctiveColor\030\010 \001(\t\022\026\n\016chairFeccColor\030\t \001(\t"
    "\022:\n\013ternameattr\030\n \001(\0132%.SRMsgs.ReqMPCrea"
    "teScreen.TernameATTR\022\016\n\006seqnum\030\013 \001(\r\022\020\n\010"
    "screenid\030\014 \001(\r\022\021\n\tvideosize\030\r \001(\r\032o\n\010Tex"
    "tATTR\022\017\n\007textpos\030\001 \001(\r\022\021\n\ttextcolor\030\002 \001("
    "\t\022\024\n\014textFontsize\030\003 \001(\r\022\024\n\014enableTextBg\030"
    "\004 \001(\010\022\023\n\013textBgColor\030\005 \001(\t\032a\n\013TernameATT"
    "R\022\025\n\renableTername\030\001 \001(\010\022;\n\017ternametexta"
    "ttr\030\002 \001(\0132\".SRMsgs.ReqMPCreateScreen.Tex"
    "tATTR\"\310\004\n\024CmdMPSetScreenLayout\022\016\n\006confid"
    "\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tch"
    "annelid\030\004 \001(\r\022\020\n\010screenid\030\005 \001(\r\022\022\n\nscree"
    "ntype\030\006 \001(\r\022\022\n\nlayoutmode\030\007 \001(\r\022C\n\016scree"
    "npanelist\030\010 \003(\0132+.SRMsgs.CmdMPSetScreenL"
    "ayout.ScreenPaneInfo\022\?\n\014confpolllist\030\t \003"
    "(\0132).SRMsgs.CmdMPSetScreenLayout.ConfPol"
    "lInfo\022\023\n\013chairfollow\030\n \001(\r\032\034\n\014AutoPollIn"
    "fo\022\014\n\004apid\030\001 \001(\004\032\035\n\014ConfPollInfo\022\r\n\005teri"
    "d\030\001 \001(\r\032\336\001\n\016ScreenPaneInfo\022\021\n\tpaneindex\030"
    "\001 \001(\r\022\023\n\013contenttype\030\002 \001(\r\022\016\n\006optype\030\003 \001"
    "(\r\022\020\n\010polltime\030\004 \001(\r\022\r\n\005terid\030\005 \001(\r\022\021\n\tc"
    "hannelid\030\006 \001(\r\022\017\n\007tername\030\007 \001(\t\022\016\n\006vsrci"
    "d\030\010 \001(\021\022\?\n\014autopolllist\030\t \003(\0132).SRMsgs.C"
    "mdMPSetScreenLayout.AutoPollInfo\"e\n\022CmdM"
    "PDestoryScreen\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002"
    " \001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid\030\004 \001(\r\022\020\n"
    "\010screenid\030\005 \001(\r\"\353\001\n\020CmdMPAddSubtitle\022\016\n\006"
    "confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r"
    "\022\017\n\007message\030\004 \001(\t\022\016\n\006msgpos\030\005 \001(\r\022\020\n\010msg"
    "color\030\006 \001(\t\022\020\n\010fontsize\030\007 \001(\r\022\023\n\013enablem"
    "sgbg\030\010 \001(\010\022\022\n\nmsgbgcolor\030\t \001(\t\022\023\n\013displa"
    "ytime\030\n \001(\r\022\025\n\renablemsgroll\030\013 \001(\010\022\021\n\tro"
    "llspeed\030\014 \001(\r\"\?\n\021CmdMPStopSubtitle\022\016\n\006co"
    "nfid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\"\236"
    "\001\n\023CmdMPDisplayTername\022\016\n\006confid\030\001 \001(\004\022\014"
    "\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\016\n\006msgpos\030\004 \001"
    "(\r\022\020\n\010msgcolor\030\005 \001(\t\022\020\n\010fontsize\030\006 \001(\r\022\023"
    "\n\013enableMsgBg\030\007 \001(\010\022\022\n\nmsgbgcolor\030\010 \001(\t\""
    ">\n\020CmdMPHideTername\022\016\n\006confid\030\001 \001(\004\022\014\n\004m"
    "cid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\"\263\001\n\023CmdMPStartSe"
    "ndVideo\022\016\n\006confid\030\001 \001(\004\022\021\n\tchannelid\030\002 \001"
    "(\r\022\020\n\010screenid\030\003 \001(\r\022<\n\rsendvideosize\030\004 "
    "\003(\0132%.SRMsgs.CmdMPStartSendVideo.VideoSi"
    "ze\032)\n\tVideoSize\022\r\n\005level\030\001 \001(\r\022\r\n\005count\030"
    "\002 \001(\r\"\201\003\n\031CmdMPReOpenNetMPMediaPort\022\017\n\007n"
    "etmpip\030\001 \001(\t\022\031\n\021audiodatarecvport\030\002 \001(\r\022"
    "\031\n\021audioctrlrecvport\030\003 \001(\r\022\031\n\021videodatar"
    "ecvport\030\004 \001(\r\022\031\n\021videoctrlrecvport\030\005 \001(\r"
    "\022\032\n\022video2datarecvport\030\006 \001(\r\022\032\n\022video2ct"
    "rlrecvport\030\007 \001(\r\022\032\n\022video3datarecvport\030\010"
    " \001(\r\022\032\n\022video3ctrlrecvport\030\t \001(\r\022\033\n\023desk"
    "topdatarecvport\030\n \001(\r\022\033\n\023desktopctrlrecv"
    "port\030\013 \001(\r\022\016\n\006confid\030\014 \001(\004\022\014\n\004mcid\030\r \001(\r"
    "\022\014\n\004mpid\030\016 \001(\r\022\021\n\tchannelid\030\017 \001(\r\"h\n\022Ind"
    "MPChairTransfer\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030"
    "\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\020\n\010nchterid\030\004 \001(\r\022\024\n"
    "\014nchchannelid\030\005 \001(\r\"x\n\023IndtMPTerMuteEnab"
    "le\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid"
    "\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r"
    "\022\023\n\013mute_enable\030\006 \001(\010\"\\\n\025IndMPTerMuteAll"
    "Enable\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004"
    "mpid\030\003 \001(\r\022\027\n\017mute_all_enable\030\004 \001(\010\"\341\001\n\024"
    "IndMPTerCameraEnable\022\016\n\006confid\030\001 \001(\004\022\014\n\004"
    "mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022"
    "\021\n\tchannelid\030\005 \001(\r\022\025\n\rcamera_enable\030\006 \001("
    "\010\0229\n\010srcinfos\030\007 \003(\0132\'.SRMsgs.IndMPTerCam"
    "eraEnable.SourceInfo\032)\n\nSourceInfo\022\r\n\005sr"
    "cid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"0\n\022IndMCHeartBea"
    "tToMP\022\014\n\004mcid\030\001 \001(\r\022\014\n\004mpid\030\002 \001(\r\"v\n\022Ind"
    "MPAssistVideoOn\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030"
    "\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\017\n\007avterid\030\004 \001(\r\022\016\n\006"
    "avtype\030\005 \001(\r\022\023\n\013sharedaudio\030\006 \001(\r\"R\n\023Ind"
    "MPAssistVideoOff\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid"
    "\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\017\n\007avterid\030\004 \001(\r\"m\n"
    "\030IndMPSpecialtypeTransfer\022\016\n\006confid\030\001 \001("
    "\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\022\n\nnspclte"
    "rid\030\004 \001(\r\022\021\n\tnspcltype\030\005 \001(\r\"\326\001\n\032IndMPCh"
    "angeVideoSourceName\022\016\n\006confid\030\001 \001(\004\022\014\n\004m"
    "cid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021"
    "\n\tchannelid\030\005 \001(\r\022\?\n\010srcinfos\030\006 \003(\0132-.SR"
    "Msgs.IndMPChangeVideoSourceName.SourceIn"
    "fo\032)\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\t\"\345\001\n\036IndMPChangeVideoSourcePriority"
    "\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003"
    " \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022F"
    "\n\013allsrcinfos\030\006 \003(\01321.SRMsgs.IndMPChange"
    "VideoSourcePriority.SourceInfo\032-\n\nSource"
    "Info\022\r\n\005srcid\030\001 \001(\r\022\020\n\010priority\030\002 \001(\r\"\364\001"
    "\n\031IndMPNewAudioSourceJoined\022\016\n\006confid\030\001 "
    "\001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid"
    "\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022>\n\010srcinfos\030\006 "
    "\003(\0132,.SRMsgs.IndMPNewAudioSourceJoined.S"
    "ourceInfo\032I\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\t\022\014\n\004isOn\030\003 \001(\010\022\020\n\010priority\030\004"
    " \001(\r\"\314\001\n\025IndMPAudioSourceLeave\022\016\n\006confid"
    "\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005te"
    "rid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022:\n\010srcinfos"
    "\030\006 \003(\0132(.SRMsgs.IndMPAudioSourceLeave.So"
    "urceInfo\032)\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022\014\n"
    "\004name\030\002 \001(\t\"\272\002\n\031IndMPNewVideoSourceJoine"
    "d\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030"
    "\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022"
    "A\n\013newsrcinfos\030\006 \003(\0132,.SRMsgs.IndMPNewVi"
    "deoSourceJoined.SourceInfo\022A\n\013allsrcinfo"
    "s\030\007 \003(\0132,.SRMsgs.IndMPNewVideoSourceJoin"
    "ed.SourceInfo\032I\n\nSourceInfo\022\r\n\005srcid\030\001 \001"
    "(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004isOn\030\003 \001(\010\022\020\n\010priori"
    "ty\030\004 \001(\r\"\256\002\n\025IndMPVideoSourceLeave\022\016\n\006co"
    "nfid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r"
    "\n\005terid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022=\n\013dels"
    "rcinfos\030\006 \003(\0132(.SRMsgs.IndMPVideoSourceL"
    "eave.SourceInfo\022=\n\013cursrcinfos\030\007 \003(\0132(.S"
    "RMsgs.IndMPVideoSourceLeave.SourceInfo\032I"
    "\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022\014\n\004name\030\002 \001("
    "\t\022\014\n\004isOn\030\003 \001(\010\022\020\n\010priority\030\004 \001(\r\"\216\003\n\026In"
    "dMPChangeDeviceInfos\022\016\n\006confid\030\001 \001(\004\022\014\n\004"
    "mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\r\n\005terid\030\004 \001(\r\022"
    "\021\n\tchannelid\030\005 \001(\r\022>\n\013deviceinfos\030\006 \003(\0132"
    ").SRMsgs.IndMPChangeDeviceInfos.DeviceIn"
    "fo\032I\n\nSourceInfo\022\r\n\005srcid\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\t\022\014\n\004isOn\030\003 \001(\010\022\020\n\010priority\030\004 \001(\r\032\232\001"
    "\n\nDeviceInfo\022\014\n\004type\030\001 \001(\r\022>\n\013oldsrcinfo"
    "s\030\002 \003(\0132).SRMsgs.IndMPChangeDeviceInfos."
    "SourceInfo\022>\n\013newsrcinfos\030\003 \003(\0132).SRMsgs"
    ".IndMPChangeDeviceInfos.SourceInfo\"\231\002\n\021I"
    "ndMPAutoPollInfo\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid"
    "\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022<\n\014autopolllist\030\004 \003"
    "(\0132&.SRMsgs.IndMPAutoPollInfo.AutoPollIn"
    "fo\032 \n\017ParticipantInfo\022\r\n\005psuid\030\001 \001(\r\032x\n\014"
    "AutoPollInfo\022\014\n\004apid\030\001 \001(\004\022\016\n\006apname\030\002 \001"
    "(\t\022\020\n\010addordel\030\003 \001(\r\0228\n\005parts\030\004 \003(\0132).SR"
    "Msgs.IndMPAutoPollInfo.ParticipantInfo\"\243"
    "\001\n\016IndMPChairLock\022\016\n\006confid\030\001 \001(\004\022\014\n\004mci"
    "d\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\023\n\013lockedterid\030\004 \001"
    "(\r\0223\n\010srcinfos\030\005 \003(\0132!.SRMsgs.IndMPChair"
    "Lock.SourceInfo\032\033\n\nSourceInfo\022\r\n\005srcid\030\001"
    " \001(\r\"\251\001\n\020IndMPChairUnLock\022\016\n\006confid\030\001 \001("
    "\004\022\014\n\004mcid\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\025\n\runlocke"
    "dterid\030\004 \001(\r\0225\n\010srcinfos\030\005 \003(\0132#.SRMsgs."
    "IndMPChairUnLock.SourceInfo\032\033\n\nSourceInf"
    "o\022\r\n\005srcid\030\001 \001(\r\"\234\001\n\016RspMCCreateMPI\022\014\n\004i"
    "sok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014\n\004mcid\030\003 \001(\r\022"
    "\014\n\004mpid\030\004 \001(\r\022\021\n\tchannelid\030\005 \001(\r\022\026\n\016rela"
    "tednetmpid\030\006 \001(\r\022\022\n\nfailreason\030\007 \001(\t\022\021\n\t"
    "errorcode\030\010 \001(\r\"\325\001\n\021RspMCCreateScreen\022\014\n"
    "\004isok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014\n\004mcid\030\003 \001("
    "\r\022\014\n\004mpid\030\004 \001(\r\022\026\n\016relatednetmpid\030\005 \001(\r\022"
    "\021\n\tchannelid\030\006 \001(\r\022\020\n\010screenid\030\007 \001(\r\022\022\n\n"
    "screentype\030\010 \001(\r\022\022\n\nfailreason\030\t \001(\t\022\016\n\006"
    "seqnum\030\n \001(\r\022\021\n\terrorcode\030\013 \001(\r\"\355\001\n\020CmdM"
    "PSeleteVideo\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001"
    "(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid\030\004 \001(\r\022\020\n\010s"
    "creenid\030\005 \001(\r\0228\n\rseleteterinfo\030\006 \003(\0132!.S"
    "RMsgs.CmdMPSeleteVideo.TermInfo\032N\n\010TermI"
    "nfo\022\r\n\005terid\030\001 \001(\r\022\021\n\tchannelid\030\002 \001(\r\022\021\n"
    "\tvideosize\030\003 \001(\r\022\r\n\005srcid\030\004 \001(\r\"\215\002\n\026CmdM"
    "PSelectAssistVideo\022\016\n\006confid\030\001 \001(\004\022\014\n\004mc"
    "id\030\002 \001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid\030\004 \001("
    "\r\022\020\n\010screenid\030\005 \001(\r\022=\n\014selectavinfo\030\006 \003("
    "\0132\'.SRMsgs.CmdMPSelectAssistVideo.TermIn"
    "fo\032c\n\010TermInfo\022\r\n\005terid\030\001 \001(\r\022\021\n\tchannel"
    "id\030\002 \001(\r\022\017\n\007recvfmt\030\003 \001(\r\022\020\n\010recvsize\030\004 "
    "\001(\r\022\022\n\nrecvavtype\030\005 \001(\r\"0\n\022IndMPHeartBea"
    "tToMC\022\014\n\004mcid\030\001 \001(\r\022\014\n\004mpid\030\002 \001(\r\"\214\004\n\017In"
    "dMPLayoutInfo\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 "
    "\001(\r\022\014\n\004mpid\030\003 \001(\r\022\021\n\tchannelid\030\004 \001(\r\0227\n\013"
    "layoutinfos\030\005 \003(\0132\".SRMsgs.IndMPLayoutIn"
    "fo.LayoutInfo\032\034\n\014AutoPollInfo\022\014\n\004apid\030\001 "
    "\001(\004\032\323\001\n\010PaneInfo\022\021\n\tpaneindex\030\001 \001(\r\022\023\n\013c"
    "ontenttype\030\002 \001(\r\022\016\n\006optype\030\003 \001(\r\022\020\n\010poll"
    "time\030\004 \001(\r\022\r\n\005terid\030\005 \001(\r\022\021\n\tchannelid\030\006"
    " \001(\r\022\017\n\007tername\030\007 \001(\t\022\016\n\006vsrcid\030\010 \001(\021\022:\n"
    "\014autopolllist\030\t \003(\0132$.SRMsgs.IndMPLayout"
    "Info.AutoPollInfo\032\214\001\n\nLayoutInfo\022\020\n\010scre"
    "enid\030\001 \001(\r\022\022\n\nscreentype\030\002 \001(\r\022\022\n\nlayout"
    "mode\030\003 \001(\r\022/\n\005panes\030\004 \003(\0132 .SRMsgs.IndMP"
    "LayoutInfo.PaneInfo\022\023\n\013chairfollow\030\005 \001(\r", 10880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_mp.proto", &protobuf_RegisterTypes);
  ReqMPCreateMPI::default_instance_ = new ReqMPCreateMPI();
  ReqMPCreateMPI_AgcSetting::default_instance_ = new ReqMPCreateMPI_AgcSetting();
  ReqMPCreateMPI_Confcfg::default_instance_ = new ReqMPCreateMPI_Confcfg();
  ReqMPCreateMPI_NetMpAddr::default_instance_ = new ReqMPCreateMPI_NetMpAddr();
  CmdMPDestoryMPI::default_instance_ = new CmdMPDestoryMPI();
  IndMPTerJoined::default_instance_ = new IndMPTerJoined();
  IndMPTerJoined_SourceInfo::default_instance_ = new IndMPTerJoined_SourceInfo();
  IndMPTerJoined_DeviceInfo::default_instance_ = new IndMPTerJoined_DeviceInfo();
  IndMPTerLeft::default_instance_ = new IndMPTerLeft();
  IndCRSChannelInfoToMp::default_instance_ = new IndCRSChannelInfoToMp();
  IndConfAllTerMediaFormatToMP::default_instance_ = new IndConfAllTerMediaFormatToMP();
  IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance_ = new IndConfAllTerMediaFormatToMP_MediaTypeAndFormat();
  IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance_ = new IndConfAllTerMediaFormatToMP_TermsMediaFmt();
  IndMPTerMediaFormat::default_instance_ = new IndMPTerMediaFormat();
  IndMPTerMediaFormat_MediaTypeAndFormat::default_instance_ = new IndMPTerMediaFormat_MediaTypeAndFormat();
  IndMPTerSendMediaFormat::default_instance_ = new IndMPTerSendMediaFormat();
  IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_ = new IndMPTerSendMediaFormat_MediaTypeAndFormat();
  IndMPTerRecvMediaFormat::default_instance_ = new IndMPTerRecvMediaFormat();
  IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_ = new IndMPTerRecvMediaFormat_MediaTypeAndFormat();
  ReqMPCreateScreen::default_instance_ = new ReqMPCreateScreen();
  ReqMPCreateScreen_TextATTR::default_instance_ = new ReqMPCreateScreen_TextATTR();
  ReqMPCreateScreen_TernameATTR::default_instance_ = new ReqMPCreateScreen_TernameATTR();
  CmdMPSetScreenLayout::default_instance_ = new CmdMPSetScreenLayout();
  CmdMPSetScreenLayout_AutoPollInfo::default_instance_ = new CmdMPSetScreenLayout_AutoPollInfo();
  CmdMPSetScreenLayout_ConfPollInfo::default_instance_ = new CmdMPSetScreenLayout_ConfPollInfo();
  CmdMPSetScreenLayout_ScreenPaneInfo::default_instance_ = new CmdMPSetScreenLayout_ScreenPaneInfo();
  CmdMPDestoryScreen::default_instance_ = new CmdMPDestoryScreen();
  CmdMPAddSubtitle::default_instance_ = new CmdMPAddSubtitle();
  CmdMPStopSubtitle::default_instance_ = new CmdMPStopSubtitle();
  CmdMPDisplayTername::default_instance_ = new CmdMPDisplayTername();
  CmdMPHideTername::default_instance_ = new CmdMPHideTername();
  CmdMPStartSendVideo::default_instance_ = new CmdMPStartSendVideo();
  CmdMPStartSendVideo_VideoSize::default_instance_ = new CmdMPStartSendVideo_VideoSize();
  CmdMPReOpenNetMPMediaPort::default_instance_ = new CmdMPReOpenNetMPMediaPort();
  IndMPChairTransfer::default_instance_ = new IndMPChairTransfer();
  IndtMPTerMuteEnable::default_instance_ = new IndtMPTerMuteEnable();
  IndMPTerMuteAllEnable::default_instance_ = new IndMPTerMuteAllEnable();
  IndMPTerCameraEnable::default_instance_ = new IndMPTerCameraEnable();
  IndMPTerCameraEnable_SourceInfo::default_instance_ = new IndMPTerCameraEnable_SourceInfo();
  IndMCHeartBeatToMP::default_instance_ = new IndMCHeartBeatToMP();
  IndMPAssistVideoOn::default_instance_ = new IndMPAssistVideoOn();
  IndMPAssistVideoOff::default_instance_ = new IndMPAssistVideoOff();
  IndMPSpecialtypeTransfer::default_instance_ = new IndMPSpecialtypeTransfer();
  IndMPChangeVideoSourceName::default_instance_ = new IndMPChangeVideoSourceName();
  IndMPChangeVideoSourceName_SourceInfo::default_instance_ = new IndMPChangeVideoSourceName_SourceInfo();
  IndMPChangeVideoSourcePriority::default_instance_ = new IndMPChangeVideoSourcePriority();
  IndMPChangeVideoSourcePriority_SourceInfo::default_instance_ = new IndMPChangeVideoSourcePriority_SourceInfo();
  IndMPNewAudioSourceJoined::default_instance_ = new IndMPNewAudioSourceJoined();
  IndMPNewAudioSourceJoined_SourceInfo::default_instance_ = new IndMPNewAudioSourceJoined_SourceInfo();
  IndMPAudioSourceLeave::default_instance_ = new IndMPAudioSourceLeave();
  IndMPAudioSourceLeave_SourceInfo::default_instance_ = new IndMPAudioSourceLeave_SourceInfo();
  IndMPNewVideoSourceJoined::default_instance_ = new IndMPNewVideoSourceJoined();
  IndMPNewVideoSourceJoined_SourceInfo::default_instance_ = new IndMPNewVideoSourceJoined_SourceInfo();
  IndMPVideoSourceLeave::default_instance_ = new IndMPVideoSourceLeave();
  IndMPVideoSourceLeave_SourceInfo::default_instance_ = new IndMPVideoSourceLeave_SourceInfo();
  IndMPChangeDeviceInfos::default_instance_ = new IndMPChangeDeviceInfos();
  IndMPChangeDeviceInfos_SourceInfo::default_instance_ = new IndMPChangeDeviceInfos_SourceInfo();
  IndMPChangeDeviceInfos_DeviceInfo::default_instance_ = new IndMPChangeDeviceInfos_DeviceInfo();
  IndMPAutoPollInfo::default_instance_ = new IndMPAutoPollInfo();
  IndMPAutoPollInfo_ParticipantInfo::default_instance_ = new IndMPAutoPollInfo_ParticipantInfo();
  IndMPAutoPollInfo_AutoPollInfo::default_instance_ = new IndMPAutoPollInfo_AutoPollInfo();
  IndMPChairLock::default_instance_ = new IndMPChairLock();
  IndMPChairLock_SourceInfo::default_instance_ = new IndMPChairLock_SourceInfo();
  IndMPChairUnLock::default_instance_ = new IndMPChairUnLock();
  IndMPChairUnLock_SourceInfo::default_instance_ = new IndMPChairUnLock_SourceInfo();
  RspMCCreateMPI::default_instance_ = new RspMCCreateMPI();
  RspMCCreateScreen::default_instance_ = new RspMCCreateScreen();
  CmdMPSeleteVideo::default_instance_ = new CmdMPSeleteVideo();
  CmdMPSeleteVideo_TermInfo::default_instance_ = new CmdMPSeleteVideo_TermInfo();
  CmdMPSelectAssistVideo::default_instance_ = new CmdMPSelectAssistVideo();
  CmdMPSelectAssistVideo_TermInfo::default_instance_ = new CmdMPSelectAssistVideo_TermInfo();
  IndMPHeartBeatToMC::default_instance_ = new IndMPHeartBeatToMC();
  IndMPLayoutInfo::default_instance_ = new IndMPLayoutInfo();
  IndMPLayoutInfo_AutoPollInfo::default_instance_ = new IndMPLayoutInfo_AutoPollInfo();
  IndMPLayoutInfo_PaneInfo::default_instance_ = new IndMPLayoutInfo_PaneInfo();
  IndMPLayoutInfo_LayoutInfo::default_instance_ = new IndMPLayoutInfo_LayoutInfo();
  ReqMPCreateMPI::default_instance_->InitAsDefaultInstance();
  ReqMPCreateMPI_AgcSetting::default_instance_->InitAsDefaultInstance();
  ReqMPCreateMPI_Confcfg::default_instance_->InitAsDefaultInstance();
  ReqMPCreateMPI_NetMpAddr::default_instance_->InitAsDefaultInstance();
  CmdMPDestoryMPI::default_instance_->InitAsDefaultInstance();
  IndMPTerJoined::default_instance_->InitAsDefaultInstance();
  IndMPTerJoined_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPTerJoined_DeviceInfo::default_instance_->InitAsDefaultInstance();
  IndMPTerLeft::default_instance_->InitAsDefaultInstance();
  IndCRSChannelInfoToMp::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToMP::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance_->InitAsDefaultInstance();
  IndMPTerMediaFormat::default_instance_->InitAsDefaultInstance();
  IndMPTerMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndMPTerSendMediaFormat::default_instance_->InitAsDefaultInstance();
  IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  IndMPTerRecvMediaFormat::default_instance_->InitAsDefaultInstance();
  IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_->InitAsDefaultInstance();
  ReqMPCreateScreen::default_instance_->InitAsDefaultInstance();
  ReqMPCreateScreen_TextATTR::default_instance_->InitAsDefaultInstance();
  ReqMPCreateScreen_TernameATTR::default_instance_->InitAsDefaultInstance();
  CmdMPSetScreenLayout::default_instance_->InitAsDefaultInstance();
  CmdMPSetScreenLayout_AutoPollInfo::default_instance_->InitAsDefaultInstance();
  CmdMPSetScreenLayout_ConfPollInfo::default_instance_->InitAsDefaultInstance();
  CmdMPSetScreenLayout_ScreenPaneInfo::default_instance_->InitAsDefaultInstance();
  CmdMPDestoryScreen::default_instance_->InitAsDefaultInstance();
  CmdMPAddSubtitle::default_instance_->InitAsDefaultInstance();
  CmdMPStopSubtitle::default_instance_->InitAsDefaultInstance();
  CmdMPDisplayTername::default_instance_->InitAsDefaultInstance();
  CmdMPHideTername::default_instance_->InitAsDefaultInstance();
  CmdMPStartSendVideo::default_instance_->InitAsDefaultInstance();
  CmdMPStartSendVideo_VideoSize::default_instance_->InitAsDefaultInstance();
  CmdMPReOpenNetMPMediaPort::default_instance_->InitAsDefaultInstance();
  IndMPChairTransfer::default_instance_->InitAsDefaultInstance();
  IndtMPTerMuteEnable::default_instance_->InitAsDefaultInstance();
  IndMPTerMuteAllEnable::default_instance_->InitAsDefaultInstance();
  IndMPTerCameraEnable::default_instance_->InitAsDefaultInstance();
  IndMPTerCameraEnable_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMCHeartBeatToMP::default_instance_->InitAsDefaultInstance();
  IndMPAssistVideoOn::default_instance_->InitAsDefaultInstance();
  IndMPAssistVideoOff::default_instance_->InitAsDefaultInstance();
  IndMPSpecialtypeTransfer::default_instance_->InitAsDefaultInstance();
  IndMPChangeVideoSourceName::default_instance_->InitAsDefaultInstance();
  IndMPChangeVideoSourceName_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPChangeVideoSourcePriority::default_instance_->InitAsDefaultInstance();
  IndMPChangeVideoSourcePriority_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPNewAudioSourceJoined::default_instance_->InitAsDefaultInstance();
  IndMPNewAudioSourceJoined_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPAudioSourceLeave::default_instance_->InitAsDefaultInstance();
  IndMPAudioSourceLeave_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPNewVideoSourceJoined::default_instance_->InitAsDefaultInstance();
  IndMPNewVideoSourceJoined_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPVideoSourceLeave::default_instance_->InitAsDefaultInstance();
  IndMPVideoSourceLeave_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPChangeDeviceInfos::default_instance_->InitAsDefaultInstance();
  IndMPChangeDeviceInfos_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPChangeDeviceInfos_DeviceInfo::default_instance_->InitAsDefaultInstance();
  IndMPAutoPollInfo::default_instance_->InitAsDefaultInstance();
  IndMPAutoPollInfo_ParticipantInfo::default_instance_->InitAsDefaultInstance();
  IndMPAutoPollInfo_AutoPollInfo::default_instance_->InitAsDefaultInstance();
  IndMPChairLock::default_instance_->InitAsDefaultInstance();
  IndMPChairLock_SourceInfo::default_instance_->InitAsDefaultInstance();
  IndMPChairUnLock::default_instance_->InitAsDefaultInstance();
  IndMPChairUnLock_SourceInfo::default_instance_->InitAsDefaultInstance();
  RspMCCreateMPI::default_instance_->InitAsDefaultInstance();
  RspMCCreateScreen::default_instance_->InitAsDefaultInstance();
  CmdMPSeleteVideo::default_instance_->InitAsDefaultInstance();
  CmdMPSeleteVideo_TermInfo::default_instance_->InitAsDefaultInstance();
  CmdMPSelectAssistVideo::default_instance_->InitAsDefaultInstance();
  CmdMPSelectAssistVideo_TermInfo::default_instance_->InitAsDefaultInstance();
  IndMPHeartBeatToMC::default_instance_->InitAsDefaultInstance();
  IndMPLayoutInfo::default_instance_->InitAsDefaultInstance();
  IndMPLayoutInfo_AutoPollInfo::default_instance_->InitAsDefaultInstance();
  IndMPLayoutInfo_PaneInfo::default_instance_->InitAsDefaultInstance();
  IndMPLayoutInfo_LayoutInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5fmp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5fmp_2eproto {
  StaticDescriptorInitializer_mc_5fmp_2eproto() {
    protobuf_AddDesc_mc_5fmp_2eproto();
  }
} static_descriptor_initializer_mc_5fmp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqMPCreateMPI_AgcSetting::kAgcEnableFieldNumber;
const int ReqMPCreateMPI_AgcSetting::kTargetLevelDbfsFieldNumber;
const int ReqMPCreateMPI_AgcSetting::kCompressionGainDbFieldNumber;
const int ReqMPCreateMPI_AgcSetting::kLimiterEnableFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateMPI_AgcSetting::ReqMPCreateMPI_AgcSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateMPI.AgcSetting)
}

void ReqMPCreateMPI_AgcSetting::InitAsDefaultInstance() {
}

ReqMPCreateMPI_AgcSetting::ReqMPCreateMPI_AgcSetting(const ReqMPCreateMPI_AgcSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateMPI.AgcSetting)
}

void ReqMPCreateMPI_AgcSetting::SharedCtor() {
  _cached_size_ = 0;
  agc_enable_ = false;
  target_level_dbfs_ = 0;
  compression_gain_db_ = 0;
  limiter_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateMPI_AgcSetting::~ReqMPCreateMPI_AgcSetting() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateMPI.AgcSetting)
  SharedDtor();
}

void ReqMPCreateMPI_AgcSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMPCreateMPI_AgcSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateMPI_AgcSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateMPI_AgcSetting_descriptor_;
}

const ReqMPCreateMPI_AgcSetting& ReqMPCreateMPI_AgcSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateMPI_AgcSetting* ReqMPCreateMPI_AgcSetting::default_instance_ = NULL;

ReqMPCreateMPI_AgcSetting* ReqMPCreateMPI_AgcSetting::New() const {
  return new ReqMPCreateMPI_AgcSetting;
}

void ReqMPCreateMPI_AgcSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateMPI_AgcSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_level_dbfs_, compression_gain_db_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateMPI_AgcSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateMPI.AgcSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agc_enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agc_enable_)));
          set_has_agc_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_level_dbfs;
        break;
      }

      // optional int32 target_level_dbfs = 2;
      case 2: {
        if (tag == 16) {
         parse_target_level_dbfs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_level_dbfs_)));
          set_has_target_level_dbfs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compression_gain_db;
        break;
      }

      // optional int32 compression_gain_db = 3;
      case 3: {
        if (tag == 24) {
         parse_compression_gain_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_gain_db_)));
          set_has_compression_gain_db();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limiter_enable;
        break;
      }

      // optional bool limiter_enable = 4;
      case 4: {
        if (tag == 32) {
         parse_limiter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limiter_enable_)));
          set_has_limiter_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateMPI.AgcSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateMPI.AgcSetting)
  return false;
#undef DO_
}

void ReqMPCreateMPI_AgcSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateMPI.AgcSetting)
  // optional bool agc_enable = 1;
  if (has_agc_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agc_enable(), output);
  }

  // optional int32 target_level_dbfs = 2;
  if (has_target_level_dbfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_level_dbfs(), output);
  }

  // optional int32 compression_gain_db = 3;
  if (has_compression_gain_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compression_gain_db(), output);
  }

  // optional bool limiter_enable = 4;
  if (has_limiter_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->limiter_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateMPI.AgcSetting)
}

::google::protobuf::uint8* ReqMPCreateMPI_AgcSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateMPI.AgcSetting)
  // optional bool agc_enable = 1;
  if (has_agc_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agc_enable(), target);
  }

  // optional int32 target_level_dbfs = 2;
  if (has_target_level_dbfs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_level_dbfs(), target);
  }

  // optional int32 compression_gain_db = 3;
  if (has_compression_gain_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compression_gain_db(), target);
  }

  // optional bool limiter_enable = 4;
  if (has_limiter_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->limiter_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateMPI.AgcSetting)
  return target;
}

int ReqMPCreateMPI_AgcSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agc_enable = 1;
    if (has_agc_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 target_level_dbfs = 2;
    if (has_target_level_dbfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_level_dbfs());
    }

    // optional int32 compression_gain_db = 3;
    if (has_compression_gain_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression_gain_db());
    }

    // optional bool limiter_enable = 4;
    if (has_limiter_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateMPI_AgcSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateMPI_AgcSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateMPI_AgcSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateMPI_AgcSetting::MergeFrom(const ReqMPCreateMPI_AgcSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agc_enable()) {
      set_agc_enable(from.agc_enable());
    }
    if (from.has_target_level_dbfs()) {
      set_target_level_dbfs(from.target_level_dbfs());
    }
    if (from.has_compression_gain_db()) {
      set_compression_gain_db(from.compression_gain_db());
    }
    if (from.has_limiter_enable()) {
      set_limiter_enable(from.limiter_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateMPI_AgcSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateMPI_AgcSetting::CopyFrom(const ReqMPCreateMPI_AgcSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateMPI_AgcSetting::IsInitialized() const {

  return true;
}

void ReqMPCreateMPI_AgcSetting::Swap(ReqMPCreateMPI_AgcSetting* other) {
  if (other != this) {
    std::swap(agc_enable_, other->agc_enable_);
    std::swap(target_level_dbfs_, other->target_level_dbfs_);
    std::swap(compression_gain_db_, other->compression_gain_db_);
    std::swap(limiter_enable_, other->limiter_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateMPI_AgcSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateMPI_AgcSetting_descriptor_;
  metadata.reflection = ReqMPCreateMPI_AgcSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqMPCreateMPI_Confcfg::kMaxParticipantsFieldNumber;
const int ReqMPCreateMPI_Confcfg::kMaxAudiomixNumFieldNumber;
const int ReqMPCreateMPI_Confcfg::kUseVideoMixerFieldNumber;
const int ReqMPCreateMPI_Confcfg::kUseAudioMixerFieldNumber;
const int ReqMPCreateMPI_Confcfg::kMixingFrequencyFieldNumber;
const int ReqMPCreateMPI_Confcfg::kMaxEncoderNumFieldNumber;
const int ReqMPCreateMPI_Confcfg::kAgcSettingFieldNumber;
const int ReqMPCreateMPI_Confcfg::kMediaencryptionalgorithmFieldNumber;
const int ReqMPCreateMPI_Confcfg::kEncryptionkeyFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateMPI_Confcfg::ReqMPCreateMPI_Confcfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateMPI.Confcfg)
}

void ReqMPCreateMPI_Confcfg::InitAsDefaultInstance() {
  agc_setting_ = const_cast< ::SRMsgs::ReqMPCreateMPI_AgcSetting*>(&::SRMsgs::ReqMPCreateMPI_AgcSetting::default_instance());
}

ReqMPCreateMPI_Confcfg::ReqMPCreateMPI_Confcfg(const ReqMPCreateMPI_Confcfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateMPI.Confcfg)
}

void ReqMPCreateMPI_Confcfg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_participants_ = 0u;
  max_audiomix_num_ = 0u;
  usevideomixer_ = 0u;
  useaudiomixer_ = 0u;
  mixing_frequency_ = 0u;
  max_encoder_num_ = 0u;
  agc_setting_ = NULL;
  mediaencryptionalgorithm_ = 0u;
  encryptionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateMPI_Confcfg::~ReqMPCreateMPI_Confcfg() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateMPI.Confcfg)
  SharedDtor();
}

void ReqMPCreateMPI_Confcfg::SharedDtor() {
  if (encryptionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptionkey_;
  }
  if (this != default_instance_) {
    delete agc_setting_;
  }
}

void ReqMPCreateMPI_Confcfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateMPI_Confcfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateMPI_Confcfg_descriptor_;
}

const ReqMPCreateMPI_Confcfg& ReqMPCreateMPI_Confcfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateMPI_Confcfg* ReqMPCreateMPI_Confcfg::default_instance_ = NULL;

ReqMPCreateMPI_Confcfg* ReqMPCreateMPI_Confcfg::New() const {
  return new ReqMPCreateMPI_Confcfg;
}

void ReqMPCreateMPI_Confcfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateMPI_Confcfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_participants_, max_encoder_num_);
    if (has_agc_setting()) {
      if (agc_setting_ != NULL) agc_setting_->::SRMsgs::ReqMPCreateMPI_AgcSetting::Clear();
    }
    mediaencryptionalgorithm_ = 0u;
  }
  if (has_encryptionkey()) {
    if (encryptionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      encryptionkey_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateMPI_Confcfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateMPI.Confcfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_participants = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_participants_)));
          set_has_max_participants();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_audiomix_num;
        break;
      }

      // optional uint32 max_audiomix_num = 2;
      case 2: {
        if (tag == 16) {
         parse_max_audiomix_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_audiomix_num_)));
          set_has_max_audiomix_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_useVideoMixer;
        break;
      }

      // optional uint32 useVideoMixer = 3;
      case 3: {
        if (tag == 24) {
         parse_useVideoMixer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usevideomixer_)));
          set_has_usevideomixer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_useAudioMixer;
        break;
      }

      // optional uint32 useAudioMixer = 4;
      case 4: {
        if (tag == 32) {
         parse_useAudioMixer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useaudiomixer_)));
          set_has_useaudiomixer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mixing_frequency;
        break;
      }

      // optional uint32 mixing_frequency = 5;
      case 5: {
        if (tag == 40) {
         parse_mixing_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixing_frequency_)));
          set_has_mixing_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_encoder_num;
        break;
      }

      // optional uint32 max_encoder_num = 6;
      case 6: {
        if (tag == 48) {
         parse_max_encoder_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_encoder_num_)));
          set_has_max_encoder_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_agc_setting;
        break;
      }

      // optional .SRMsgs.ReqMPCreateMPI.AgcSetting agc_setting = 7;
      case 7: {
        if (tag == 58) {
         parse_agc_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agc_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mediaencryptionalgorithm;
        break;
      }

      // optional uint32 mediaencryptionalgorithm = 8;
      case 8: {
        if (tag == 64) {
         parse_mediaencryptionalgorithm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mediaencryptionalgorithm_)));
          set_has_mediaencryptionalgorithm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_encryptionkey;
        break;
      }

      // optional bytes encryptionkey = 9;
      case 9: {
        if (tag == 74) {
         parse_encryptionkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptionkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateMPI.Confcfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateMPI.Confcfg)
  return false;
#undef DO_
}

void ReqMPCreateMPI_Confcfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateMPI.Confcfg)
  // optional uint32 max_participants = 1;
  if (has_max_participants()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_participants(), output);
  }

  // optional uint32 max_audiomix_num = 2;
  if (has_max_audiomix_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_audiomix_num(), output);
  }

  // optional uint32 useVideoMixer = 3;
  if (has_usevideomixer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usevideomixer(), output);
  }

  // optional uint32 useAudioMixer = 4;
  if (has_useaudiomixer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->useaudiomixer(), output);
  }

  // optional uint32 mixing_frequency = 5;
  if (has_mixing_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mixing_frequency(), output);
  }

  // optional uint32 max_encoder_num = 6;
  if (has_max_encoder_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_encoder_num(), output);
  }

  // optional .SRMsgs.ReqMPCreateMPI.AgcSetting agc_setting = 7;
  if (has_agc_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->agc_setting(), output);
  }

  // optional uint32 mediaencryptionalgorithm = 8;
  if (has_mediaencryptionalgorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mediaencryptionalgorithm(), output);
  }

  // optional bytes encryptionkey = 9;
  if (has_encryptionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->encryptionkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateMPI.Confcfg)
}

::google::protobuf::uint8* ReqMPCreateMPI_Confcfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateMPI.Confcfg)
  // optional uint32 max_participants = 1;
  if (has_max_participants()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_participants(), target);
  }

  // optional uint32 max_audiomix_num = 2;
  if (has_max_audiomix_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_audiomix_num(), target);
  }

  // optional uint32 useVideoMixer = 3;
  if (has_usevideomixer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usevideomixer(), target);
  }

  // optional uint32 useAudioMixer = 4;
  if (has_useaudiomixer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->useaudiomixer(), target);
  }

  // optional uint32 mixing_frequency = 5;
  if (has_mixing_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mixing_frequency(), target);
  }

  // optional uint32 max_encoder_num = 6;
  if (has_max_encoder_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_encoder_num(), target);
  }

  // optional .SRMsgs.ReqMPCreateMPI.AgcSetting agc_setting = 7;
  if (has_agc_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->agc_setting(), target);
  }

  // optional uint32 mediaencryptionalgorithm = 8;
  if (has_mediaencryptionalgorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mediaencryptionalgorithm(), target);
  }

  // optional bytes encryptionkey = 9;
  if (has_encryptionkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->encryptionkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateMPI.Confcfg)
  return target;
}

int ReqMPCreateMPI_Confcfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_participants = 1;
    if (has_max_participants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_participants());
    }

    // optional uint32 max_audiomix_num = 2;
    if (has_max_audiomix_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_audiomix_num());
    }

    // optional uint32 useVideoMixer = 3;
    if (has_usevideomixer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usevideomixer());
    }

    // optional uint32 useAudioMixer = 4;
    if (has_useaudiomixer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useaudiomixer());
    }

    // optional uint32 mixing_frequency = 5;
    if (has_mixing_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mixing_frequency());
    }

    // optional uint32 max_encoder_num = 6;
    if (has_max_encoder_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_encoder_num());
    }

    // optional .SRMsgs.ReqMPCreateMPI.AgcSetting agc_setting = 7;
    if (has_agc_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agc_setting());
    }

    // optional uint32 mediaencryptionalgorithm = 8;
    if (has_mediaencryptionalgorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mediaencryptionalgorithm());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes encryptionkey = 9;
    if (has_encryptionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptionkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateMPI_Confcfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateMPI_Confcfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateMPI_Confcfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateMPI_Confcfg::MergeFrom(const ReqMPCreateMPI_Confcfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_participants()) {
      set_max_participants(from.max_participants());
    }
    if (from.has_max_audiomix_num()) {
      set_max_audiomix_num(from.max_audiomix_num());
    }
    if (from.has_usevideomixer()) {
      set_usevideomixer(from.usevideomixer());
    }
    if (from.has_useaudiomixer()) {
      set_useaudiomixer(from.useaudiomixer());
    }
    if (from.has_mixing_frequency()) {
      set_mixing_frequency(from.mixing_frequency());
    }
    if (from.has_max_encoder_num()) {
      set_max_encoder_num(from.max_encoder_num());
    }
    if (from.has_agc_setting()) {
      mutable_agc_setting()->::SRMsgs::ReqMPCreateMPI_AgcSetting::MergeFrom(from.agc_setting());
    }
    if (from.has_mediaencryptionalgorithm()) {
      set_mediaencryptionalgorithm(from.mediaencryptionalgorithm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encryptionkey()) {
      set_encryptionkey(from.encryptionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateMPI_Confcfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateMPI_Confcfg::CopyFrom(const ReqMPCreateMPI_Confcfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateMPI_Confcfg::IsInitialized() const {

  return true;
}

void ReqMPCreateMPI_Confcfg::Swap(ReqMPCreateMPI_Confcfg* other) {
  if (other != this) {
    std::swap(max_participants_, other->max_participants_);
    std::swap(max_audiomix_num_, other->max_audiomix_num_);
    std::swap(usevideomixer_, other->usevideomixer_);
    std::swap(useaudiomixer_, other->useaudiomixer_);
    std::swap(mixing_frequency_, other->mixing_frequency_);
    std::swap(max_encoder_num_, other->max_encoder_num_);
    std::swap(agc_setting_, other->agc_setting_);
    std::swap(mediaencryptionalgorithm_, other->mediaencryptionalgorithm_);
    std::swap(encryptionkey_, other->encryptionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateMPI_Confcfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateMPI_Confcfg_descriptor_;
  metadata.reflection = ReqMPCreateMPI_Confcfg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqMPCreateMPI_NetMpAddr::kNetmpidFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kNetmpmediaipFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kAudiodatarecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kAudioctrlrecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideodatarecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideoctrlrecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideo2DatarecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideo2CtrlrecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideo3DatarecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kVideo3CtrlrecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kDesktopdatarecvportFieldNumber;
const int ReqMPCreateMPI_NetMpAddr::kDesktopctrlrecvportFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateMPI_NetMpAddr::ReqMPCreateMPI_NetMpAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateMPI.NetMpAddr)
}

void ReqMPCreateMPI_NetMpAddr::InitAsDefaultInstance() {
}

ReqMPCreateMPI_NetMpAddr::ReqMPCreateMPI_NetMpAddr(const ReqMPCreateMPI_NetMpAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateMPI.NetMpAddr)
}

void ReqMPCreateMPI_NetMpAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpid_ = 0u;
  netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateMPI_NetMpAddr::~ReqMPCreateMPI_NetMpAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  SharedDtor();
}

void ReqMPCreateMPI_NetMpAddr::SharedDtor() {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpmediaip_;
  }
  if (this != default_instance_) {
  }
}

void ReqMPCreateMPI_NetMpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateMPI_NetMpAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateMPI_NetMpAddr_descriptor_;
}

const ReqMPCreateMPI_NetMpAddr& ReqMPCreateMPI_NetMpAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateMPI_NetMpAddr* ReqMPCreateMPI_NetMpAddr::default_instance_ = NULL;

ReqMPCreateMPI_NetMpAddr* ReqMPCreateMPI_NetMpAddr::New() const {
  return new ReqMPCreateMPI_NetMpAddr;
}

void ReqMPCreateMPI_NetMpAddr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateMPI_NetMpAddr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(netmpid_, video2ctrlrecvport_);
    if (has_netmpmediaip()) {
      if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpmediaip_->clear();
      }
    }
  }
  ZR_(video3datarecvport_, desktopctrlrecvport_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateMPI_NetMpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 netmpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_netmpmediaip;
        break;
      }

      // optional string netmpmediaip = 2;
      case 2: {
        if (tag == 18) {
         parse_netmpmediaip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpmediaip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpmediaip().data(), this->netmpmediaip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpmediaip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  return false;
#undef DO_
}

void ReqMPCreateMPI_NetMpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->netmpid(), output);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->netmpmediaip(), output);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->desktopctrlrecvport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateMPI.NetMpAddr)
}

::google::protobuf::uint8* ReqMPCreateMPI_NetMpAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->netmpid(), target);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->netmpmediaip(), target);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->desktopctrlrecvport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateMPI.NetMpAddr)
  return target;
}

int ReqMPCreateMPI_NetMpAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 netmpid = 1;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string netmpmediaip = 2;
    if (has_netmpmediaip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpmediaip());
    }

    // optional uint32 audiodatarecvport = 3;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 4;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 5;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 6;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 7;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 8;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3datarecvport = 9;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 10;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 11;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 12;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateMPI_NetMpAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateMPI_NetMpAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateMPI_NetMpAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateMPI_NetMpAddr::MergeFrom(const ReqMPCreateMPI_NetMpAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_netmpmediaip()) {
      set_netmpmediaip(from.netmpmediaip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateMPI_NetMpAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateMPI_NetMpAddr::CopyFrom(const ReqMPCreateMPI_NetMpAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateMPI_NetMpAddr::IsInitialized() const {

  return true;
}

void ReqMPCreateMPI_NetMpAddr::Swap(ReqMPCreateMPI_NetMpAddr* other) {
  if (other != this) {
    std::swap(netmpid_, other->netmpid_);
    std::swap(netmpmediaip_, other->netmpmediaip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateMPI_NetMpAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateMPI_NetMpAddr_descriptor_;
  metadata.reflection = ReqMPCreateMPI_NetMpAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqMPCreateMPI::kConfidFieldNumber;
const int ReqMPCreateMPI::kMcidFieldNumber;
const int ReqMPCreateMPI::kMpidFieldNumber;
const int ReqMPCreateMPI::kChannelidFieldNumber;
const int ReqMPCreateMPI::kConfcfgFieldNumber;
const int ReqMPCreateMPI::kNetmpaddrFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateMPI::ReqMPCreateMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateMPI)
}

void ReqMPCreateMPI::InitAsDefaultInstance() {
  confcfg_ = const_cast< ::SRMsgs::ReqMPCreateMPI_Confcfg*>(&::SRMsgs::ReqMPCreateMPI_Confcfg::default_instance());
  netmpaddr_ = const_cast< ::SRMsgs::ReqMPCreateMPI_NetMpAddr*>(&::SRMsgs::ReqMPCreateMPI_NetMpAddr::default_instance());
}

ReqMPCreateMPI::ReqMPCreateMPI(const ReqMPCreateMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateMPI)
}

void ReqMPCreateMPI::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  confcfg_ = NULL;
  netmpaddr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateMPI::~ReqMPCreateMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateMPI)
  SharedDtor();
}

void ReqMPCreateMPI::SharedDtor() {
  if (this != default_instance_) {
    delete confcfg_;
    delete netmpaddr_;
  }
}

void ReqMPCreateMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateMPI_descriptor_;
}

const ReqMPCreateMPI& ReqMPCreateMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateMPI* ReqMPCreateMPI::default_instance_ = NULL;

ReqMPCreateMPI* ReqMPCreateMPI::New() const {
  return new ReqMPCreateMPI;
}

void ReqMPCreateMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, mpid_);
    channelid_ = 0u;
    if (has_confcfg()) {
      if (confcfg_ != NULL) confcfg_->::SRMsgs::ReqMPCreateMPI_Confcfg::Clear();
    }
    if (has_netmpaddr()) {
      if (netmpaddr_ != NULL) netmpaddr_->::SRMsgs::ReqMPCreateMPI_NetMpAddr::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_confcfg;
        break;
      }

      // optional .SRMsgs.ReqMPCreateMPI.Confcfg confcfg = 5;
      case 5: {
        if (tag == 42) {
         parse_confcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confcfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_netmpaddr;
        break;
      }

      // optional .SRMsgs.ReqMPCreateMPI.NetMpAddr netmpaddr = 6;
      case 6: {
        if (tag == 50) {
         parse_netmpaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netmpaddr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateMPI)
  return false;
#undef DO_
}

void ReqMPCreateMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateMPI)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional .SRMsgs.ReqMPCreateMPI.Confcfg confcfg = 5;
  if (has_confcfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confcfg(), output);
  }

  // optional .SRMsgs.ReqMPCreateMPI.NetMpAddr netmpaddr = 6;
  if (has_netmpaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->netmpaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateMPI)
}

::google::protobuf::uint8* ReqMPCreateMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateMPI)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional .SRMsgs.ReqMPCreateMPI.Confcfg confcfg = 5;
  if (has_confcfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confcfg(), target);
  }

  // optional .SRMsgs.ReqMPCreateMPI.NetMpAddr netmpaddr = 6;
  if (has_netmpaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->netmpaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateMPI)
  return target;
}

int ReqMPCreateMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.ReqMPCreateMPI.Confcfg confcfg = 5;
    if (has_confcfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confcfg());
    }

    // optional .SRMsgs.ReqMPCreateMPI.NetMpAddr netmpaddr = 6;
    if (has_netmpaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netmpaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateMPI::MergeFrom(const ReqMPCreateMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_confcfg()) {
      mutable_confcfg()->::SRMsgs::ReqMPCreateMPI_Confcfg::MergeFrom(from.confcfg());
    }
    if (from.has_netmpaddr()) {
      mutable_netmpaddr()->::SRMsgs::ReqMPCreateMPI_NetMpAddr::MergeFrom(from.netmpaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateMPI::CopyFrom(const ReqMPCreateMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateMPI::IsInitialized() const {

  return true;
}

void ReqMPCreateMPI::Swap(ReqMPCreateMPI* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(confcfg_, other->confcfg_);
    std::swap(netmpaddr_, other->netmpaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateMPI_descriptor_;
  metadata.reflection = ReqMPCreateMPI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPDestoryMPI::kConfidFieldNumber;
const int CmdMPDestoryMPI::kMcidFieldNumber;
const int CmdMPDestoryMPI::kMpidFieldNumber;
const int CmdMPDestoryMPI::kChannelidFieldNumber;
const int CmdMPDestoryMPI::kReasonFieldNumber;
#endif  // !_MSC_VER

CmdMPDestoryMPI::CmdMPDestoryMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPDestoryMPI)
}

void CmdMPDestoryMPI::InitAsDefaultInstance() {
}

CmdMPDestoryMPI::CmdMPDestoryMPI(const CmdMPDestoryMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPDestoryMPI)
}

void CmdMPDestoryMPI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPDestoryMPI::~CmdMPDestoryMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPDestoryMPI)
  SharedDtor();
}

void CmdMPDestoryMPI::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CmdMPDestoryMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPDestoryMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPDestoryMPI_descriptor_;
}

const CmdMPDestoryMPI& CmdMPDestoryMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPDestoryMPI* CmdMPDestoryMPI::default_instance_ = NULL;

CmdMPDestoryMPI* CmdMPDestoryMPI::New() const {
  return new CmdMPDestoryMPI;
}

void CmdMPDestoryMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPDestoryMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, mpid_);
    channelid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPDestoryMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPDestoryMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPDestoryMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPDestoryMPI)
  return false;
#undef DO_
}

void CmdMPDestoryMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPDestoryMPI)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPDestoryMPI)
}

::google::protobuf::uint8* CmdMPDestoryMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPDestoryMPI)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPDestoryMPI)
  return target;
}

int CmdMPDestoryMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPDestoryMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPDestoryMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPDestoryMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPDestoryMPI::MergeFrom(const CmdMPDestoryMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPDestoryMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPDestoryMPI::CopyFrom(const CmdMPDestoryMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPDestoryMPI::IsInitialized() const {

  return true;
}

void CmdMPDestoryMPI::Swap(CmdMPDestoryMPI* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPDestoryMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPDestoryMPI_descriptor_;
  metadata.reflection = CmdMPDestoryMPI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerJoined_SourceInfo::kSrcidFieldNumber;
const int IndMPTerJoined_SourceInfo::kNameFieldNumber;
const int IndMPTerJoined_SourceInfo::kIsOnFieldNumber;
const int IndMPTerJoined_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPTerJoined_SourceInfo::IndMPTerJoined_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerJoined.SourceInfo)
}

void IndMPTerJoined_SourceInfo::InitAsDefaultInstance() {
}

IndMPTerJoined_SourceInfo::IndMPTerJoined_SourceInfo(const IndMPTerJoined_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerJoined.SourceInfo)
}

void IndMPTerJoined_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ison_ = false;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerJoined_SourceInfo::~IndMPTerJoined_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerJoined.SourceInfo)
  SharedDtor();
}

void IndMPTerJoined_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPTerJoined_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerJoined_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerJoined_SourceInfo_descriptor_;
}

const IndMPTerJoined_SourceInfo& IndMPTerJoined_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerJoined_SourceInfo* IndMPTerJoined_SourceInfo::default_instance_ = NULL;

IndMPTerJoined_SourceInfo* IndMPTerJoined_SourceInfo::New() const {
  return new IndMPTerJoined_SourceInfo;
}

void IndMPTerJoined_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerJoined_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcid_, priority_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerJoined_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerJoined.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerJoined.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerJoined.SourceInfo)
  return false;
#undef DO_
}

void IndMPTerJoined_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerJoined.SourceInfo)
}

::google::protobuf::uint8* IndMPTerJoined_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerJoined.SourceInfo)
  return target;
}

int IndMPTerJoined_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerJoined_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerJoined_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerJoined_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerJoined_SourceInfo::MergeFrom(const IndMPTerJoined_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerJoined_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerJoined_SourceInfo::CopyFrom(const IndMPTerJoined_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerJoined_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPTerJoined_SourceInfo::Swap(IndMPTerJoined_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(ison_, other->ison_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerJoined_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerJoined_SourceInfo_descriptor_;
  metadata.reflection = IndMPTerJoined_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerJoined_DeviceInfo::kTypeFieldNumber;
const int IndMPTerJoined_DeviceInfo::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPTerJoined_DeviceInfo::IndMPTerJoined_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerJoined.DeviceInfo)
}

void IndMPTerJoined_DeviceInfo::InitAsDefaultInstance() {
}

IndMPTerJoined_DeviceInfo::IndMPTerJoined_DeviceInfo(const IndMPTerJoined_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerJoined.DeviceInfo)
}

void IndMPTerJoined_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerJoined_DeviceInfo::~IndMPTerJoined_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerJoined.DeviceInfo)
  SharedDtor();
}

void IndMPTerJoined_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerJoined_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerJoined_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerJoined_DeviceInfo_descriptor_;
}

const IndMPTerJoined_DeviceInfo& IndMPTerJoined_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerJoined_DeviceInfo* IndMPTerJoined_DeviceInfo::default_instance_ = NULL;

IndMPTerJoined_DeviceInfo* IndMPTerJoined_DeviceInfo::New() const {
  return new IndMPTerJoined_DeviceInfo;
}

void IndMPTerJoined_DeviceInfo::Clear() {
  type_ = 0u;
  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerJoined_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerJoined.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPTerJoined.SourceInfo srcinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerJoined.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerJoined.DeviceInfo)
  return false;
#undef DO_
}

void IndMPTerJoined_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerJoined.DeviceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .SRMsgs.IndMPTerJoined.SourceInfo srcinfos = 2;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerJoined.DeviceInfo)
}

::google::protobuf::uint8* IndMPTerJoined_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerJoined.DeviceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .SRMsgs.IndMPTerJoined.SourceInfo srcinfos = 2;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerJoined.DeviceInfo)
  return target;
}

int IndMPTerJoined_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .SRMsgs.IndMPTerJoined.SourceInfo srcinfos = 2;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerJoined_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerJoined_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerJoined_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerJoined_DeviceInfo::MergeFrom(const IndMPTerJoined_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerJoined_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerJoined_DeviceInfo::CopyFrom(const IndMPTerJoined_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerJoined_DeviceInfo::IsInitialized() const {

  return true;
}

void IndMPTerJoined_DeviceInfo::Swap(IndMPTerJoined_DeviceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerJoined_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerJoined_DeviceInfo_descriptor_;
  metadata.reflection = IndMPTerJoined_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerJoined::kConfidFieldNumber;
const int IndMPTerJoined::kMcidFieldNumber;
const int IndMPTerJoined::kMpidFieldNumber;
const int IndMPTerJoined::kTeridFieldNumber;
const int IndMPTerJoined::kChannelidFieldNumber;
const int IndMPTerJoined::kTermtypeFieldNumber;
const int IndMPTerJoined::kFromtypeFieldNumber;
const int IndMPTerJoined::kTernameFieldNumber;
const int IndMPTerJoined::kSpecialtypeFieldNumber;
const int IndMPTerJoined::kGmrtypeFieldNumber;
const int IndMPTerJoined::kGmridFieldNumber;
const int IndMPTerJoined::kGmrnameFieldNumber;
const int IndMPTerJoined::kDevinfosFieldNumber;
const int IndMPTerJoined::kSuidFieldNumber;
const int IndMPTerJoined::kProducttypeFieldNumber;
#endif  // !_MSC_VER

IndMPTerJoined::IndMPTerJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerJoined)
}

void IndMPTerJoined::InitAsDefaultInstance() {
}

IndMPTerJoined::IndMPTerJoined(const IndMPTerJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerJoined)
}

void IndMPTerJoined::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  termtype_ = 0u;
  fromtype_ = 0u;
  tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specialtype_ = 0u;
  gmrtype_ = 0u;
  gmrid_ = 0u;
  gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suid_ = 0u;
  producttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerJoined::~IndMPTerJoined() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerJoined)
  SharedDtor();
}

void IndMPTerJoined::SharedDtor() {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tername_;
  }
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (this != default_instance_) {
  }
}

void IndMPTerJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerJoined_descriptor_;
}

const IndMPTerJoined& IndMPTerJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerJoined* IndMPTerJoined::default_instance_ = NULL;

IndMPTerJoined* IndMPTerJoined::New() const {
  return new IndMPTerJoined;
}

void IndMPTerJoined::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerJoined*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, fromtype_);
    if (has_tername()) {
      if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 28416) {
    ZR_(specialtype_, gmrtype_);
    ZR_(gmrid_, suid_);
    if (has_gmrname()) {
      if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmrname_->clear();
      }
    }
    producttype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  devinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 6;
      case 6: {
        if (tag == 48) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 7;
      case 7: {
        if (tag == 56) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tername;
        break;
      }

      // optional string tername = 8;
      case 8: {
        if (tag == 66) {
         parse_tername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tername().data(), this->tername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_specialtype;
        break;
      }

      // optional uint32 specialtype = 9;
      case 9: {
        if (tag == 72) {
         parse_specialtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specialtype_)));
          set_has_specialtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gmrtype;
        break;
      }

      // optional uint32 gmrtype = 10;
      case 10: {
        if (tag == 80) {
         parse_gmrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrtype_)));
          set_has_gmrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gmrid;
        break;
      }

      // optional uint32 gmrid = 11;
      case 11: {
        if (tag == 88) {
         parse_gmrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrid_)));
          set_has_gmrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gmrname;
        break;
      }

      // optional string gmrname = 12;
      case 12: {
        if (tag == 98) {
         parse_gmrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmrname().data(), this->gmrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_devinfos;
        break;
      }

      // repeated .SRMsgs.IndMPTerJoined.DeviceInfo devinfos = 13;
      case 13: {
        if (tag == 106) {
         parse_devinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_devinfos;
        if (input->ExpectTag(112)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 14;
      case 14: {
        if (tag == 112) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 15;
      case 15: {
        if (tag == 120) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerJoined)
  return false;
#undef DO_
}

void IndMPTerJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->termtype(), output);
  }

  // optional uint32 fromtype = 7;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fromtype(), output);
  }

  // optional string tername = 8;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tername(), output);
  }

  // optional uint32 specialtype = 9;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->specialtype(), output);
  }

  // optional uint32 gmrtype = 10;
  if (has_gmrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gmrtype(), output);
  }

  // optional uint32 gmrid = 11;
  if (has_gmrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gmrid(), output);
  }

  // optional string gmrname = 12;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->gmrname(), output);
  }

  // repeated .SRMsgs.IndMPTerJoined.DeviceInfo devinfos = 13;
  for (int i = 0; i < this->devinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->devinfos(i), output);
  }

  // optional uint32 suid = 14;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->suid(), output);
  }

  // optional uint32 producttype = 15;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->producttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerJoined)
}

::google::protobuf::uint8* IndMPTerJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->termtype(), target);
  }

  // optional uint32 fromtype = 7;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fromtype(), target);
  }

  // optional string tername = 8;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tername(), target);
  }

  // optional uint32 specialtype = 9;
  if (has_specialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->specialtype(), target);
  }

  // optional uint32 gmrtype = 10;
  if (has_gmrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gmrtype(), target);
  }

  // optional uint32 gmrid = 11;
  if (has_gmrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gmrid(), target);
  }

  // optional string gmrname = 12;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gmrname(), target);
  }

  // repeated .SRMsgs.IndMPTerJoined.DeviceInfo devinfos = 13;
  for (int i = 0; i < this->devinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->devinfos(i), target);
  }

  // optional uint32 suid = 14;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->suid(), target);
  }

  // optional uint32 producttype = 15;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->producttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerJoined)
  return target;
}

int IndMPTerJoined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 termtype = 6;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 fromtype = 7;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional string tername = 8;
    if (has_tername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 specialtype = 9;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specialtype());
    }

    // optional uint32 gmrtype = 10;
    if (has_gmrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrtype());
    }

    // optional uint32 gmrid = 11;
    if (has_gmrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrid());
    }

    // optional string gmrname = 12;
    if (has_gmrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmrname());
    }

    // optional uint32 suid = 14;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional uint32 producttype = 15;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

  }
  // repeated .SRMsgs.IndMPTerJoined.DeviceInfo devinfos = 13;
  total_size += 1 * this->devinfos_size();
  for (int i = 0; i < this->devinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerJoined::MergeFrom(const IndMPTerJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  devinfos_.MergeFrom(from.devinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_tername()) {
      set_tername(from.tername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_gmrtype()) {
      set_gmrtype(from.gmrtype());
    }
    if (from.has_gmrid()) {
      set_gmrid(from.gmrid());
    }
    if (from.has_gmrname()) {
      set_gmrname(from.gmrname());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerJoined::CopyFrom(const IndMPTerJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerJoined::IsInitialized() const {

  return true;
}

void IndMPTerJoined::Swap(IndMPTerJoined* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(termtype_, other->termtype_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(tername_, other->tername_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(gmrtype_, other->gmrtype_);
    std::swap(gmrid_, other->gmrid_);
    std::swap(gmrname_, other->gmrname_);
    devinfos_.Swap(&other->devinfos_);
    std::swap(suid_, other->suid_);
    std::swap(producttype_, other->producttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerJoined_descriptor_;
  metadata.reflection = IndMPTerJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerLeft::kConfidFieldNumber;
const int IndMPTerLeft::kMcidFieldNumber;
const int IndMPTerLeft::kMpidFieldNumber;
const int IndMPTerLeft::kTeridFieldNumber;
const int IndMPTerLeft::kChannelidFieldNumber;
const int IndMPTerLeft::kGmrtypeFieldNumber;
const int IndMPTerLeft::kGmridFieldNumber;
const int IndMPTerLeft::kGmrnameFieldNumber;
#endif  // !_MSC_VER

IndMPTerLeft::IndMPTerLeft()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerLeft)
}

void IndMPTerLeft::InitAsDefaultInstance() {
}

IndMPTerLeft::IndMPTerLeft(const IndMPTerLeft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerLeft)
}

void IndMPTerLeft::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  gmrtype_ = 0u;
  gmrid_ = 0u;
  gmrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerLeft::~IndMPTerLeft() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerLeft)
  SharedDtor();
}

void IndMPTerLeft::SharedDtor() {
  if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmrname_;
  }
  if (this != default_instance_) {
  }
}

void IndMPTerLeft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerLeft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerLeft_descriptor_;
}

const IndMPTerLeft& IndMPTerLeft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerLeft* IndMPTerLeft::default_instance_ = NULL;

IndMPTerLeft* IndMPTerLeft::New() const {
  return new IndMPTerLeft;
}

void IndMPTerLeft::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerLeft*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, gmrid_);
    if (has_gmrname()) {
      if (gmrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmrname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerLeft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerLeft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gmrtype;
        break;
      }

      // optional uint32 gmrtype = 6;
      case 6: {
        if (tag == 48) {
         parse_gmrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrtype_)));
          set_has_gmrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmrid;
        break;
      }

      // optional uint32 gmrid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmrid_)));
          set_has_gmrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gmrname;
        break;
      }

      // optional string gmrname = 8;
      case 8: {
        if (tag == 66) {
         parse_gmrname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmrname().data(), this->gmrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmrname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerLeft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerLeft)
  return false;
#undef DO_
}

void IndMPTerLeft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 gmrtype = 6;
  if (has_gmrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gmrtype(), output);
  }

  // optional uint32 gmrid = 7;
  if (has_gmrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmrid(), output);
  }

  // optional string gmrname = 8;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gmrname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerLeft)
}

::google::protobuf::uint8* IndMPTerLeft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerLeft)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 gmrtype = 6;
  if (has_gmrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gmrtype(), target);
  }

  // optional uint32 gmrid = 7;
  if (has_gmrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmrid(), target);
  }

  // optional string gmrname = 8;
  if (has_gmrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmrname().data(), this->gmrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmrname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gmrname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerLeft)
  return target;
}

int IndMPTerLeft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 gmrtype = 6;
    if (has_gmrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrtype());
    }

    // optional uint32 gmrid = 7;
    if (has_gmrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmrid());
    }

    // optional string gmrname = 8;
    if (has_gmrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmrname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerLeft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerLeft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerLeft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerLeft::MergeFrom(const IndMPTerLeft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_gmrtype()) {
      set_gmrtype(from.gmrtype());
    }
    if (from.has_gmrid()) {
      set_gmrid(from.gmrid());
    }
    if (from.has_gmrname()) {
      set_gmrname(from.gmrname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerLeft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerLeft::CopyFrom(const IndMPTerLeft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerLeft::IsInitialized() const {

  return true;
}

void IndMPTerLeft::Swap(IndMPTerLeft* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(gmrtype_, other->gmrtype_);
    std::swap(gmrid_, other->gmrid_);
    std::swap(gmrname_, other->gmrname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerLeft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerLeft_descriptor_;
  metadata.reflection = IndMPTerLeft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSChannelInfoToMp::kConfidFieldNumber;
const int IndCRSChannelInfoToMp::kMcidFieldNumber;
const int IndCRSChannelInfoToMp::kMpidFieldNumber;
const int IndCRSChannelInfoToMp::kCrsidFieldNumber;
const int IndCRSChannelInfoToMp::kCrschannelidFieldNumber;
const int IndCRSChannelInfoToMp::kAddordelFieldNumber;
#endif  // !_MSC_VER

IndCRSChannelInfoToMp::IndCRSChannelInfoToMp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSChannelInfoToMp)
}

void IndCRSChannelInfoToMp::InitAsDefaultInstance() {
}

IndCRSChannelInfoToMp::IndCRSChannelInfoToMp(const IndCRSChannelInfoToMp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSChannelInfoToMp)
}

void IndCRSChannelInfoToMp::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  crsid_ = 0u;
  crschannelid_ = 0u;
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSChannelInfoToMp::~IndCRSChannelInfoToMp() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSChannelInfoToMp)
  SharedDtor();
}

void IndCRSChannelInfoToMp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCRSChannelInfoToMp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSChannelInfoToMp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSChannelInfoToMp_descriptor_;
}

const IndCRSChannelInfoToMp& IndCRSChannelInfoToMp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndCRSChannelInfoToMp* IndCRSChannelInfoToMp::default_instance_ = NULL;

IndCRSChannelInfoToMp* IndCRSChannelInfoToMp::New() const {
  return new IndCRSChannelInfoToMp;
}

void IndCRSChannelInfoToMp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSChannelInfoToMp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, addordel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSChannelInfoToMp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSChannelInfoToMp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crschannelid;
        break;
      }

      // optional uint32 crschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_crschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crschannelid_)));
          set_has_crschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 6;
      case 6: {
        if (tag == 48) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSChannelInfoToMp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSChannelInfoToMp)
  return false;
#undef DO_
}

void IndCRSChannelInfoToMp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSChannelInfoToMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crschannelid(), output);
  }

  // optional uint32 addordel = 6;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addordel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSChannelInfoToMp)
}

::google::protobuf::uint8* IndCRSChannelInfoToMp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSChannelInfoToMp)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional uint32 crschannelid = 5;
  if (has_crschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crschannelid(), target);
  }

  // optional uint32 addordel = 6;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addordel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSChannelInfoToMp)
  return target;
}

int IndCRSChannelInfoToMp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional uint32 crschannelid = 5;
    if (has_crschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crschannelid());
    }

    // optional uint32 addordel = 6;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSChannelInfoToMp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSChannelInfoToMp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSChannelInfoToMp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSChannelInfoToMp::MergeFrom(const IndCRSChannelInfoToMp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_crschannelid()) {
      set_crschannelid(from.crschannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSChannelInfoToMp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSChannelInfoToMp::CopyFrom(const IndCRSChannelInfoToMp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSChannelInfoToMp::IsInitialized() const {

  return true;
}

void IndCRSChannelInfoToMp::Swap(IndCRSChannelInfoToMp* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(crsid_, other->crsid_);
    std::swap(crschannelid_, other->crschannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSChannelInfoToMp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSChannelInfoToMp_descriptor_;
  metadata.reflection = IndCRSChannelInfoToMp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat(const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::~IndConfAllTerMediaFormatToMP_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  SharedDtor();
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_;
}

const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat& IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToMP_MediaTypeAndFormat* IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance_ = NULL;

IndConfAllTerMediaFormatToMP_MediaTypeAndFormat* IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::New() const {
  return new IndConfAllTerMediaFormatToMP_MediaTypeAndFormat;
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllTerMediaFormatToMP_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat)
  return target;
}

int IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::MergeFrom(const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::CopyFrom(const IndConfAllTerMediaFormatToMP_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::Swap(IndConfAllTerMediaFormatToMP_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToMP_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToMP_TermsMediaFmt::kTeridFieldNumber;
const int IndConfAllTerMediaFormatToMP_TermsMediaFmt::kSendmediaformatFieldNumber;
const int IndConfAllTerMediaFormatToMP_TermsMediaFmt::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToMP_TermsMediaFmt::IndConfAllTerMediaFormatToMP_TermsMediaFmt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat*>(&::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance());
  recvmediaformat_ = const_cast< ::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat*>(&::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::default_instance());
}

IndConfAllTerMediaFormatToMP_TermsMediaFmt::IndConfAllTerMediaFormatToMP_TermsMediaFmt(const IndConfAllTerMediaFormatToMP_TermsMediaFmt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  sendmediaformat_ = NULL;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToMP_TermsMediaFmt::~IndConfAllTerMediaFormatToMP_TermsMediaFmt() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  SharedDtor();
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
    delete recvmediaformat_;
  }
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP_TermsMediaFmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_;
}

const IndConfAllTerMediaFormatToMP_TermsMediaFmt& IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToMP_TermsMediaFmt* IndConfAllTerMediaFormatToMP_TermsMediaFmt::default_instance_ = NULL;

IndConfAllTerMediaFormatToMP_TermsMediaFmt* IndConfAllTerMediaFormatToMP_TermsMediaFmt::New() const {
  return new IndConfAllTerMediaFormatToMP_TermsMediaFmt;
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    terid_ = 0u;
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::Clear();
    }
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToMP_TermsMediaFmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat sendmediaformat = 2;
      case 2: {
        if (tag == 18) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat recvmediaformat = 3;
      case 3: {
        if (tag == 26) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat sendmediaformat = 2;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sendmediaformat(), output);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat recvmediaformat = 3;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToMP_TermsMediaFmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat sendmediaformat = 2;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sendmediaformat(), target);
  }

  // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat recvmediaformat = 3;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt)
  return target;
}

int IndConfAllTerMediaFormatToMP_TermsMediaFmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat sendmediaformat = 2;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

    // optional .SRMsgs.IndConfAllTerMediaFormatToMP.MediaTypeAndFormat recvmediaformat = 3;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToMP_TermsMediaFmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToMP_TermsMediaFmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::MergeFrom(const IndConfAllTerMediaFormatToMP_TermsMediaFmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndConfAllTerMediaFormatToMP_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::CopyFrom(const IndConfAllTerMediaFormatToMP_TermsMediaFmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToMP_TermsMediaFmt::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToMP_TermsMediaFmt::Swap(IndConfAllTerMediaFormatToMP_TermsMediaFmt* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToMP_TermsMediaFmt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToMP_TermsMediaFmt_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToMP_TermsMediaFmt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllTerMediaFormatToMP::kConfidFieldNumber;
const int IndConfAllTerMediaFormatToMP::kMcidFieldNumber;
const int IndConfAllTerMediaFormatToMP::kMpidFieldNumber;
const int IndConfAllTerMediaFormatToMP::kTersmediainfoFieldNumber;
#endif  // !_MSC_VER

IndConfAllTerMediaFormatToMP::IndConfAllTerMediaFormatToMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllTerMediaFormatToMP)
}

void IndConfAllTerMediaFormatToMP::InitAsDefaultInstance() {
}

IndConfAllTerMediaFormatToMP::IndConfAllTerMediaFormatToMP(const IndConfAllTerMediaFormatToMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllTerMediaFormatToMP)
}

void IndConfAllTerMediaFormatToMP::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllTerMediaFormatToMP::~IndConfAllTerMediaFormatToMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllTerMediaFormatToMP)
  SharedDtor();
}

void IndConfAllTerMediaFormatToMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllTerMediaFormatToMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllTerMediaFormatToMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllTerMediaFormatToMP_descriptor_;
}

const IndConfAllTerMediaFormatToMP& IndConfAllTerMediaFormatToMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndConfAllTerMediaFormatToMP* IndConfAllTerMediaFormatToMP::default_instance_ = NULL;

IndConfAllTerMediaFormatToMP* IndConfAllTerMediaFormatToMP::New() const {
  return new IndConfAllTerMediaFormatToMP;
}

void IndConfAllTerMediaFormatToMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllTerMediaFormatToMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tersmediainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllTerMediaFormatToMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllTerMediaFormatToMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tersmediainfo;
        break;
      }

      // repeated .SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt tersmediainfo = 4;
      case 4: {
        if (tag == 34) {
         parse_tersmediainfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tersmediainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tersmediainfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllTerMediaFormatToMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllTerMediaFormatToMP)
  return false;
#undef DO_
}

void IndConfAllTerMediaFormatToMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllTerMediaFormatToMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // repeated .SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt tersmediainfo = 4;
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tersmediainfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllTerMediaFormatToMP)
}

::google::protobuf::uint8* IndConfAllTerMediaFormatToMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllTerMediaFormatToMP)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // repeated .SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt tersmediainfo = 4;
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tersmediainfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllTerMediaFormatToMP)
  return target;
}

int IndConfAllTerMediaFormatToMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  // repeated .SRMsgs.IndConfAllTerMediaFormatToMP.TermsMediaFmt tersmediainfo = 4;
  total_size += 1 * this->tersmediainfo_size();
  for (int i = 0; i < this->tersmediainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tersmediainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllTerMediaFormatToMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllTerMediaFormatToMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllTerMediaFormatToMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllTerMediaFormatToMP::MergeFrom(const IndConfAllTerMediaFormatToMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  tersmediainfo_.MergeFrom(from.tersmediainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllTerMediaFormatToMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllTerMediaFormatToMP::CopyFrom(const IndConfAllTerMediaFormatToMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllTerMediaFormatToMP::IsInitialized() const {

  return true;
}

void IndConfAllTerMediaFormatToMP::Swap(IndConfAllTerMediaFormatToMP* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    tersmediainfo_.Swap(&other->tersmediainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllTerMediaFormatToMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllTerMediaFormatToMP_descriptor_;
  metadata.reflection = IndConfAllTerMediaFormatToMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndMPTerMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndMPTerMediaFormat_MediaTypeAndFormat::IndMPTerMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
}

void IndMPTerMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndMPTerMediaFormat_MediaTypeAndFormat::IndMPTerMediaFormat_MediaTypeAndFormat(const IndMPTerMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
}

void IndMPTerMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerMediaFormat_MediaTypeAndFormat::~IndMPTerMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndMPTerMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndMPTerMediaFormat_MediaTypeAndFormat& IndMPTerMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerMediaFormat_MediaTypeAndFormat* IndMPTerMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndMPTerMediaFormat_MediaTypeAndFormat* IndMPTerMediaFormat_MediaTypeAndFormat::New() const {
  return new IndMPTerMediaFormat_MediaTypeAndFormat;
}

void IndMPTerMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndMPTerMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndMPTerMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndMPTerMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(const IndMPTerMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerMediaFormat_MediaTypeAndFormat::CopyFrom(const IndMPTerMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndMPTerMediaFormat_MediaTypeAndFormat::Swap(IndMPTerMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndMPTerMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerMediaFormat::kConfidFieldNumber;
const int IndMPTerMediaFormat::kMcidFieldNumber;
const int IndMPTerMediaFormat::kMpidFieldNumber;
const int IndMPTerMediaFormat::kTeridFieldNumber;
const int IndMPTerMediaFormat::kChannelidFieldNumber;
const int IndMPTerMediaFormat::kSendmediaformatFieldNumber;
const int IndMPTerMediaFormat::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndMPTerMediaFormat::IndMPTerMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerMediaFormat)
}

void IndMPTerMediaFormat::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::default_instance());
  recvmediaformat_ = const_cast< ::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::default_instance());
}

IndMPTerMediaFormat::IndMPTerMediaFormat(const IndMPTerMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerMediaFormat)
}

void IndMPTerMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  sendmediaformat_ = NULL;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerMediaFormat::~IndMPTerMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerMediaFormat)
  SharedDtor();
}

void IndMPTerMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
    delete recvmediaformat_;
  }
}

void IndMPTerMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerMediaFormat_descriptor_;
}

const IndMPTerMediaFormat& IndMPTerMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerMediaFormat* IndMPTerMediaFormat::default_instance_ = NULL;

IndMPTerMediaFormat* IndMPTerMediaFormat::New() const {
  return new IndMPTerMediaFormat;
}

void IndMPTerMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, channelid_);
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::Clear();
    }
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
      case 7: {
        if (tag == 58) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerMediaFormat)
  return false;
#undef DO_
}

void IndMPTerMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendmediaformat(), output);
  }

  // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerMediaFormat)
}

::google::protobuf::uint8* IndMPTerMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendmediaformat(), target);
  }

  // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerMediaFormat)
  return target;
}

int IndMPTerMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

    // optional .SRMsgs.IndMPTerMediaFormat.MediaTypeAndFormat recvmediaformat = 7;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerMediaFormat::MergeFrom(const IndMPTerMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndMPTerMediaFormat_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerMediaFormat::CopyFrom(const IndMPTerMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerMediaFormat::IsInitialized() const {

  return true;
}

void IndMPTerMediaFormat::Swap(IndMPTerMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerMediaFormat_descriptor_;
  metadata.reflection = IndMPTerMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndMPTerSendMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndMPTerSendMediaFormat_MediaTypeAndFormat::IndMPTerSendMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndMPTerSendMediaFormat_MediaTypeAndFormat::IndMPTerSendMediaFormat_MediaTypeAndFormat(const IndMPTerSendMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerSendMediaFormat_MediaTypeAndFormat::~IndMPTerSendMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerSendMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndMPTerSendMediaFormat_MediaTypeAndFormat& IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerSendMediaFormat_MediaTypeAndFormat* IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndMPTerSendMediaFormat_MediaTypeAndFormat* IndMPTerSendMediaFormat_MediaTypeAndFormat::New() const {
  return new IndMPTerSendMediaFormat_MediaTypeAndFormat;
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerSendMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerSendMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndMPTerSendMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndMPTerSendMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerSendMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerSendMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(const IndMPTerSendMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::CopyFrom(const IndMPTerSendMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerSendMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndMPTerSendMediaFormat_MediaTypeAndFormat::Swap(IndMPTerSendMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerSendMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerSendMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndMPTerSendMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerSendMediaFormat::kConfidFieldNumber;
const int IndMPTerSendMediaFormat::kMcidFieldNumber;
const int IndMPTerSendMediaFormat::kMpidFieldNumber;
const int IndMPTerSendMediaFormat::kTeridFieldNumber;
const int IndMPTerSendMediaFormat::kChannelidFieldNumber;
const int IndMPTerSendMediaFormat::kSendmediaformatFieldNumber;
#endif  // !_MSC_VER

IndMPTerSendMediaFormat::IndMPTerSendMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerSendMediaFormat)
}

void IndMPTerSendMediaFormat::InitAsDefaultInstance() {
  sendmediaformat_ = const_cast< ::SRMsgs::IndMPTerSendMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndMPTerSendMediaFormat_MediaTypeAndFormat::default_instance());
}

IndMPTerSendMediaFormat::IndMPTerSendMediaFormat(const IndMPTerSendMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerSendMediaFormat)
}

void IndMPTerSendMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  sendmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerSendMediaFormat::~IndMPTerSendMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerSendMediaFormat)
  SharedDtor();
}

void IndMPTerSendMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete sendmediaformat_;
  }
}

void IndMPTerSendMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerSendMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerSendMediaFormat_descriptor_;
}

const IndMPTerSendMediaFormat& IndMPTerSendMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerSendMediaFormat* IndMPTerSendMediaFormat::default_instance_ = NULL;

IndMPTerSendMediaFormat* IndMPTerSendMediaFormat::New() const {
  return new IndMPTerSendMediaFormat;
}

void IndMPTerSendMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerSendMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    if (has_sendmediaformat()) {
      if (sendmediaformat_ != NULL) sendmediaformat_->::SRMsgs::IndMPTerSendMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerSendMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerSendMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sendmediaformat;
        break;
      }

      // optional .SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_sendmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerSendMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerSendMediaFormat)
  return false;
#undef DO_
}

void IndMPTerSendMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerSendMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerSendMediaFormat)
}

::google::protobuf::uint8* IndMPTerSendMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerSendMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
  if (has_sendmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerSendMediaFormat)
  return target;
}

int IndMPTerSendMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndMPTerSendMediaFormat.MediaTypeAndFormat sendmediaformat = 6;
    if (has_sendmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerSendMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerSendMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerSendMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerSendMediaFormat::MergeFrom(const IndMPTerSendMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_sendmediaformat()) {
      mutable_sendmediaformat()->::SRMsgs::IndMPTerSendMediaFormat_MediaTypeAndFormat::MergeFrom(from.sendmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerSendMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerSendMediaFormat::CopyFrom(const IndMPTerSendMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerSendMediaFormat::IsInitialized() const {

  return true;
}

void IndMPTerSendMediaFormat::Swap(IndMPTerSendMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(sendmediaformat_, other->sendmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerSendMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerSendMediaFormat_descriptor_;
  metadata.reflection = IndMPTerSendMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiofmtFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiofrequencyFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kAudiochannelnumFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kAudioframelenFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kAudioptFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kVideofmtFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kVideoptFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kDuovideofmtFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kDuovideoptFieldNumber;
const int IndMPTerRecvMediaFormat_MediaTypeAndFormat::kVideobandwidthFieldNumber;
#endif  // !_MSC_VER

IndMPTerRecvMediaFormat_MediaTypeAndFormat::IndMPTerRecvMediaFormat_MediaTypeAndFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::InitAsDefaultInstance() {
}

IndMPTerRecvMediaFormat_MediaTypeAndFormat::IndMPTerRecvMediaFormat_MediaTypeAndFormat(const IndMPTerRecvMediaFormat_MediaTypeAndFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::SharedCtor() {
  _cached_size_ = 0;
  audiofmt_ = 0u;
  audiofrequency_ = 0u;
  audiochannelnum_ = 0u;
  audioframelen_ = 0u;
  audiopt_ = 0u;
  videofmt_ = 0u;
  videopt_ = 0u;
  duovideofmt_ = 0u;
  duovideopt_ = 0u;
  videobandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerRecvMediaFormat_MediaTypeAndFormat::~IndMPTerRecvMediaFormat_MediaTypeAndFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  SharedDtor();
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerRecvMediaFormat_MediaTypeAndFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_;
}

const IndMPTerRecvMediaFormat_MediaTypeAndFormat& IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerRecvMediaFormat_MediaTypeAndFormat* IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance_ = NULL;

IndMPTerRecvMediaFormat_MediaTypeAndFormat* IndMPTerRecvMediaFormat_MediaTypeAndFormat::New() const {
  return new IndMPTerRecvMediaFormat_MediaTypeAndFormat;
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerRecvMediaFormat_MediaTypeAndFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiofmt_, duovideofmt_);
  }
  ZR_(duovideopt_, videobandwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerRecvMediaFormat_MediaTypeAndFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audiofmt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofmt_)));
          set_has_audiofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiofrequency;
        break;
      }

      // optional uint32 audiofrequency = 2;
      case 2: {
        if (tag == 16) {
         parse_audiofrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiofrequency_)));
          set_has_audiofrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiochannelnum;
        break;
      }

      // optional uint32 audiochannelnum = 3;
      case 3: {
        if (tag == 24) {
         parse_audiochannelnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiochannelnum_)));
          set_has_audiochannelnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioframelen;
        break;
      }

      // optional uint32 audioframelen = 4;
      case 4: {
        if (tag == 32) {
         parse_audioframelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioframelen_)));
          set_has_audioframelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_audiopt;
        break;
      }

      // optional uint32 audiopt = 5;
      case 5: {
        if (tag == 40) {
         parse_audiopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiopt_)));
          set_has_audiopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videofmt;
        break;
      }

      // optional uint32 videofmt = 6;
      case 6: {
        if (tag == 48) {
         parse_videofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videofmt_)));
          set_has_videofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videopt;
        break;
      }

      // optional uint32 videopt = 7;
      case 7: {
        if (tag == 56) {
         parse_videopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videopt_)));
          set_has_videopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_duovideofmt;
        break;
      }

      // optional uint32 duovideofmt = 8;
      case 8: {
        if (tag == 64) {
         parse_duovideofmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideofmt_)));
          set_has_duovideofmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_duovideopt;
        break;
      }

      // optional uint32 duovideopt = 9;
      case 9: {
        if (tag == 72) {
         parse_duovideopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duovideopt_)));
          set_has_duovideopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_videobandwidth;
        break;
      }

      // optional uint32 videobandwidth = 10;
      case 10: {
        if (tag == 80) {
         parse_videobandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videobandwidth_)));
          set_has_videobandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  return false;
#undef DO_
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audiofmt(), output);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiofrequency(), output);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiochannelnum(), output);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioframelen(), output);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->audiopt(), output);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videofmt(), output);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videopt(), output);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duovideofmt(), output);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->duovideopt(), output);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->videobandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
}

::google::protobuf::uint8* IndMPTerRecvMediaFormat_MediaTypeAndFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  // optional uint32 audiofmt = 1;
  if (has_audiofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->audiofmt(), target);
  }

  // optional uint32 audiofrequency = 2;
  if (has_audiofrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiofrequency(), target);
  }

  // optional uint32 audiochannelnum = 3;
  if (has_audiochannelnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiochannelnum(), target);
  }

  // optional uint32 audioframelen = 4;
  if (has_audioframelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioframelen(), target);
  }

  // optional uint32 audiopt = 5;
  if (has_audiopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->audiopt(), target);
  }

  // optional uint32 videofmt = 6;
  if (has_videofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videofmt(), target);
  }

  // optional uint32 videopt = 7;
  if (has_videopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videopt(), target);
  }

  // optional uint32 duovideofmt = 8;
  if (has_duovideofmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duovideofmt(), target);
  }

  // optional uint32 duovideopt = 9;
  if (has_duovideopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->duovideopt(), target);
  }

  // optional uint32 videobandwidth = 10;
  if (has_videobandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->videobandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat)
  return target;
}

int IndMPTerRecvMediaFormat_MediaTypeAndFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audiofmt = 1;
    if (has_audiofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofmt());
    }

    // optional uint32 audiofrequency = 2;
    if (has_audiofrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiofrequency());
    }

    // optional uint32 audiochannelnum = 3;
    if (has_audiochannelnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiochannelnum());
    }

    // optional uint32 audioframelen = 4;
    if (has_audioframelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioframelen());
    }

    // optional uint32 audiopt = 5;
    if (has_audiopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiopt());
    }

    // optional uint32 videofmt = 6;
    if (has_videofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videofmt());
    }

    // optional uint32 videopt = 7;
    if (has_videopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videopt());
    }

    // optional uint32 duovideofmt = 8;
    if (has_duovideofmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideofmt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 duovideopt = 9;
    if (has_duovideopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duovideopt());
    }

    // optional uint32 videobandwidth = 10;
    if (has_videobandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videobandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerRecvMediaFormat_MediaTypeAndFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerRecvMediaFormat_MediaTypeAndFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(const IndMPTerRecvMediaFormat_MediaTypeAndFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiofmt()) {
      set_audiofmt(from.audiofmt());
    }
    if (from.has_audiofrequency()) {
      set_audiofrequency(from.audiofrequency());
    }
    if (from.has_audiochannelnum()) {
      set_audiochannelnum(from.audiochannelnum());
    }
    if (from.has_audioframelen()) {
      set_audioframelen(from.audioframelen());
    }
    if (from.has_audiopt()) {
      set_audiopt(from.audiopt());
    }
    if (from.has_videofmt()) {
      set_videofmt(from.videofmt());
    }
    if (from.has_videopt()) {
      set_videopt(from.videopt());
    }
    if (from.has_duovideofmt()) {
      set_duovideofmt(from.duovideofmt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duovideopt()) {
      set_duovideopt(from.duovideopt());
    }
    if (from.has_videobandwidth()) {
      set_videobandwidth(from.videobandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::CopyFrom(const IndMPTerRecvMediaFormat_MediaTypeAndFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerRecvMediaFormat_MediaTypeAndFormat::IsInitialized() const {

  return true;
}

void IndMPTerRecvMediaFormat_MediaTypeAndFormat::Swap(IndMPTerRecvMediaFormat_MediaTypeAndFormat* other) {
  if (other != this) {
    std::swap(audiofmt_, other->audiofmt_);
    std::swap(audiofrequency_, other->audiofrequency_);
    std::swap(audiochannelnum_, other->audiochannelnum_);
    std::swap(audioframelen_, other->audioframelen_);
    std::swap(audiopt_, other->audiopt_);
    std::swap(videofmt_, other->videofmt_);
    std::swap(videopt_, other->videopt_);
    std::swap(duovideofmt_, other->duovideofmt_);
    std::swap(duovideopt_, other->duovideopt_);
    std::swap(videobandwidth_, other->videobandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerRecvMediaFormat_MediaTypeAndFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerRecvMediaFormat_MediaTypeAndFormat_descriptor_;
  metadata.reflection = IndMPTerRecvMediaFormat_MediaTypeAndFormat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerRecvMediaFormat::kConfidFieldNumber;
const int IndMPTerRecvMediaFormat::kMcidFieldNumber;
const int IndMPTerRecvMediaFormat::kMpidFieldNumber;
const int IndMPTerRecvMediaFormat::kTeridFieldNumber;
const int IndMPTerRecvMediaFormat::kChannelidFieldNumber;
const int IndMPTerRecvMediaFormat::kRecvmediaformatFieldNumber;
#endif  // !_MSC_VER

IndMPTerRecvMediaFormat::IndMPTerRecvMediaFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerRecvMediaFormat)
}

void IndMPTerRecvMediaFormat::InitAsDefaultInstance() {
  recvmediaformat_ = const_cast< ::SRMsgs::IndMPTerRecvMediaFormat_MediaTypeAndFormat*>(&::SRMsgs::IndMPTerRecvMediaFormat_MediaTypeAndFormat::default_instance());
}

IndMPTerRecvMediaFormat::IndMPTerRecvMediaFormat(const IndMPTerRecvMediaFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerRecvMediaFormat)
}

void IndMPTerRecvMediaFormat::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  recvmediaformat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerRecvMediaFormat::~IndMPTerRecvMediaFormat() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerRecvMediaFormat)
  SharedDtor();
}

void IndMPTerRecvMediaFormat::SharedDtor() {
  if (this != default_instance_) {
    delete recvmediaformat_;
  }
}

void IndMPTerRecvMediaFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerRecvMediaFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerRecvMediaFormat_descriptor_;
}

const IndMPTerRecvMediaFormat& IndMPTerRecvMediaFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerRecvMediaFormat* IndMPTerRecvMediaFormat::default_instance_ = NULL;

IndMPTerRecvMediaFormat* IndMPTerRecvMediaFormat::New() const {
  return new IndMPTerRecvMediaFormat;
}

void IndMPTerRecvMediaFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerRecvMediaFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    if (has_recvmediaformat()) {
      if (recvmediaformat_ != NULL) recvmediaformat_->::SRMsgs::IndMPTerRecvMediaFormat_MediaTypeAndFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerRecvMediaFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerRecvMediaFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recvmediaformat;
        break;
      }

      // optional .SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
      case 6: {
        if (tag == 50) {
         parse_recvmediaformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmediaformat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerRecvMediaFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerRecvMediaFormat)
  return false;
#undef DO_
}

void IndMPTerRecvMediaFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerRecvMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional .SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
  if (has_recvmediaformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recvmediaformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerRecvMediaFormat)
}

::google::protobuf::uint8* IndMPTerRecvMediaFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerRecvMediaFormat)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional .SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
  if (has_recvmediaformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recvmediaformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerRecvMediaFormat)
  return target;
}

int IndMPTerRecvMediaFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional .SRMsgs.IndMPTerRecvMediaFormat.MediaTypeAndFormat recvmediaformat = 6;
    if (has_recvmediaformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmediaformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerRecvMediaFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerRecvMediaFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerRecvMediaFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerRecvMediaFormat::MergeFrom(const IndMPTerRecvMediaFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_recvmediaformat()) {
      mutable_recvmediaformat()->::SRMsgs::IndMPTerRecvMediaFormat_MediaTypeAndFormat::MergeFrom(from.recvmediaformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerRecvMediaFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerRecvMediaFormat::CopyFrom(const IndMPTerRecvMediaFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerRecvMediaFormat::IsInitialized() const {

  return true;
}

void IndMPTerRecvMediaFormat::Swap(IndMPTerRecvMediaFormat* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(recvmediaformat_, other->recvmediaformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerRecvMediaFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerRecvMediaFormat_descriptor_;
  metadata.reflection = IndMPTerRecvMediaFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMPCreateScreen_TextATTR::kTextposFieldNumber;
const int ReqMPCreateScreen_TextATTR::kTextcolorFieldNumber;
const int ReqMPCreateScreen_TextATTR::kTextFontsizeFieldNumber;
const int ReqMPCreateScreen_TextATTR::kEnableTextBgFieldNumber;
const int ReqMPCreateScreen_TextATTR::kTextBgColorFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateScreen_TextATTR::ReqMPCreateScreen_TextATTR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateScreen.TextATTR)
}

void ReqMPCreateScreen_TextATTR::InitAsDefaultInstance() {
}

ReqMPCreateScreen_TextATTR::ReqMPCreateScreen_TextATTR(const ReqMPCreateScreen_TextATTR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateScreen.TextATTR)
}

void ReqMPCreateScreen_TextATTR::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  textpos_ = 0u;
  textcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  textfontsize_ = 0u;
  enabletextbg_ = false;
  textbgcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateScreen_TextATTR::~ReqMPCreateScreen_TextATTR() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateScreen.TextATTR)
  SharedDtor();
}

void ReqMPCreateScreen_TextATTR::SharedDtor() {
  if (textcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete textcolor_;
  }
  if (textbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete textbgcolor_;
  }
  if (this != default_instance_) {
  }
}

void ReqMPCreateScreen_TextATTR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateScreen_TextATTR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateScreen_TextATTR_descriptor_;
}

const ReqMPCreateScreen_TextATTR& ReqMPCreateScreen_TextATTR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateScreen_TextATTR* ReqMPCreateScreen_TextATTR::default_instance_ = NULL;

ReqMPCreateScreen_TextATTR* ReqMPCreateScreen_TextATTR::New() const {
  return new ReqMPCreateScreen_TextATTR;
}

void ReqMPCreateScreen_TextATTR::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateScreen_TextATTR*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(textpos_, textfontsize_);
    if (has_textcolor()) {
      if (textcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        textcolor_->clear();
      }
    }
    enabletextbg_ = false;
    if (has_textbgcolor()) {
      if (textbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        textbgcolor_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateScreen_TextATTR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateScreen.TextATTR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 textpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textpos_)));
          set_has_textpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_textcolor;
        break;
      }

      // optional string textcolor = 2;
      case 2: {
        if (tag == 18) {
         parse_textcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->textcolor().data(), this->textcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "textcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_textFontsize;
        break;
      }

      // optional uint32 textFontsize = 3;
      case 3: {
        if (tag == 24) {
         parse_textFontsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textfontsize_)));
          set_has_textfontsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enableTextBg;
        break;
      }

      // optional bool enableTextBg = 4;
      case 4: {
        if (tag == 32) {
         parse_enableTextBg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabletextbg_)));
          set_has_enabletextbg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_textBgColor;
        break;
      }

      // optional string textBgColor = 5;
      case 5: {
        if (tag == 42) {
         parse_textBgColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textbgcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->textbgcolor().data(), this->textbgcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "textbgcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateScreen.TextATTR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateScreen.TextATTR)
  return false;
#undef DO_
}

void ReqMPCreateScreen_TextATTR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateScreen.TextATTR)
  // optional uint32 textpos = 1;
  if (has_textpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->textpos(), output);
  }

  // optional string textcolor = 2;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textcolor().data(), this->textcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "textcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->textcolor(), output);
  }

  // optional uint32 textFontsize = 3;
  if (has_textfontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->textfontsize(), output);
  }

  // optional bool enableTextBg = 4;
  if (has_enabletextbg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabletextbg(), output);
  }

  // optional string textBgColor = 5;
  if (has_textbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textbgcolor().data(), this->textbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "textbgcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->textbgcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateScreen.TextATTR)
}

::google::protobuf::uint8* ReqMPCreateScreen_TextATTR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateScreen.TextATTR)
  // optional uint32 textpos = 1;
  if (has_textpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->textpos(), target);
  }

  // optional string textcolor = 2;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textcolor().data(), this->textcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "textcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->textcolor(), target);
  }

  // optional uint32 textFontsize = 3;
  if (has_textfontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->textfontsize(), target);
  }

  // optional bool enableTextBg = 4;
  if (has_enabletextbg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabletextbg(), target);
  }

  // optional string textBgColor = 5;
  if (has_textbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textbgcolor().data(), this->textbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "textbgcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->textbgcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateScreen.TextATTR)
  return target;
}

int ReqMPCreateScreen_TextATTR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 textpos = 1;
    if (has_textpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textpos());
    }

    // optional string textcolor = 2;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textcolor());
    }

    // optional uint32 textFontsize = 3;
    if (has_textfontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textfontsize());
    }

    // optional bool enableTextBg = 4;
    if (has_enabletextbg()) {
      total_size += 1 + 1;
    }

    // optional string textBgColor = 5;
    if (has_textbgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textbgcolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateScreen_TextATTR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateScreen_TextATTR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateScreen_TextATTR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateScreen_TextATTR::MergeFrom(const ReqMPCreateScreen_TextATTR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_textpos()) {
      set_textpos(from.textpos());
    }
    if (from.has_textcolor()) {
      set_textcolor(from.textcolor());
    }
    if (from.has_textfontsize()) {
      set_textfontsize(from.textfontsize());
    }
    if (from.has_enabletextbg()) {
      set_enabletextbg(from.enabletextbg());
    }
    if (from.has_textbgcolor()) {
      set_textbgcolor(from.textbgcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateScreen_TextATTR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateScreen_TextATTR::CopyFrom(const ReqMPCreateScreen_TextATTR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateScreen_TextATTR::IsInitialized() const {

  return true;
}

void ReqMPCreateScreen_TextATTR::Swap(ReqMPCreateScreen_TextATTR* other) {
  if (other != this) {
    std::swap(textpos_, other->textpos_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(textfontsize_, other->textfontsize_);
    std::swap(enabletextbg_, other->enabletextbg_);
    std::swap(textbgcolor_, other->textbgcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateScreen_TextATTR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateScreen_TextATTR_descriptor_;
  metadata.reflection = ReqMPCreateScreen_TextATTR_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqMPCreateScreen_TernameATTR::kEnableTernameFieldNumber;
const int ReqMPCreateScreen_TernameATTR::kTernametextattrFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateScreen_TernameATTR::ReqMPCreateScreen_TernameATTR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateScreen.TernameATTR)
}

void ReqMPCreateScreen_TernameATTR::InitAsDefaultInstance() {
  ternametextattr_ = const_cast< ::SRMsgs::ReqMPCreateScreen_TextATTR*>(&::SRMsgs::ReqMPCreateScreen_TextATTR::default_instance());
}

ReqMPCreateScreen_TernameATTR::ReqMPCreateScreen_TernameATTR(const ReqMPCreateScreen_TernameATTR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateScreen.TernameATTR)
}

void ReqMPCreateScreen_TernameATTR::SharedCtor() {
  _cached_size_ = 0;
  enabletername_ = false;
  ternametextattr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateScreen_TernameATTR::~ReqMPCreateScreen_TernameATTR() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateScreen.TernameATTR)
  SharedDtor();
}

void ReqMPCreateScreen_TernameATTR::SharedDtor() {
  if (this != default_instance_) {
    delete ternametextattr_;
  }
}

void ReqMPCreateScreen_TernameATTR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateScreen_TernameATTR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateScreen_TernameATTR_descriptor_;
}

const ReqMPCreateScreen_TernameATTR& ReqMPCreateScreen_TernameATTR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateScreen_TernameATTR* ReqMPCreateScreen_TernameATTR::default_instance_ = NULL;

ReqMPCreateScreen_TernameATTR* ReqMPCreateScreen_TernameATTR::New() const {
  return new ReqMPCreateScreen_TernameATTR;
}

void ReqMPCreateScreen_TernameATTR::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    enabletername_ = false;
    if (has_ternametextattr()) {
      if (ternametextattr_ != NULL) ternametextattr_->::SRMsgs::ReqMPCreateScreen_TextATTR::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateScreen_TernameATTR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateScreen.TernameATTR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enableTername = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabletername_)));
          set_has_enabletername();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ternametextattr;
        break;
      }

      // optional .SRMsgs.ReqMPCreateScreen.TextATTR ternametextattr = 2;
      case 2: {
        if (tag == 18) {
         parse_ternametextattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ternametextattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateScreen.TernameATTR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateScreen.TernameATTR)
  return false;
#undef DO_
}

void ReqMPCreateScreen_TernameATTR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateScreen.TernameATTR)
  // optional bool enableTername = 1;
  if (has_enabletername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabletername(), output);
  }

  // optional .SRMsgs.ReqMPCreateScreen.TextATTR ternametextattr = 2;
  if (has_ternametextattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ternametextattr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateScreen.TernameATTR)
}

::google::protobuf::uint8* ReqMPCreateScreen_TernameATTR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateScreen.TernameATTR)
  // optional bool enableTername = 1;
  if (has_enabletername()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabletername(), target);
  }

  // optional .SRMsgs.ReqMPCreateScreen.TextATTR ternametextattr = 2;
  if (has_ternametextattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ternametextattr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateScreen.TernameATTR)
  return target;
}

int ReqMPCreateScreen_TernameATTR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enableTername = 1;
    if (has_enabletername()) {
      total_size += 1 + 1;
    }

    // optional .SRMsgs.ReqMPCreateScreen.TextATTR ternametextattr = 2;
    if (has_ternametextattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ternametextattr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateScreen_TernameATTR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateScreen_TernameATTR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateScreen_TernameATTR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateScreen_TernameATTR::MergeFrom(const ReqMPCreateScreen_TernameATTR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabletername()) {
      set_enabletername(from.enabletername());
    }
    if (from.has_ternametextattr()) {
      mutable_ternametextattr()->::SRMsgs::ReqMPCreateScreen_TextATTR::MergeFrom(from.ternametextattr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateScreen_TernameATTR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateScreen_TernameATTR::CopyFrom(const ReqMPCreateScreen_TernameATTR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateScreen_TernameATTR::IsInitialized() const {

  return true;
}

void ReqMPCreateScreen_TernameATTR::Swap(ReqMPCreateScreen_TernameATTR* other) {
  if (other != this) {
    std::swap(enabletername_, other->enabletername_);
    std::swap(ternametextattr_, other->ternametextattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateScreen_TernameATTR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateScreen_TernameATTR_descriptor_;
  metadata.reflection = ReqMPCreateScreen_TernameATTR_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqMPCreateScreen::kConfidFieldNumber;
const int ReqMPCreateScreen::kMcidFieldNumber;
const int ReqMPCreateScreen::kMpidFieldNumber;
const int ReqMPCreateScreen::kChannelidFieldNumber;
const int ReqMPCreateScreen::kScreentypeFieldNumber;
const int ReqMPCreateScreen::kRelatednetmpidFieldNumber;
const int ReqMPCreateScreen::kVoiceActiveIndFieldNumber;
const int ReqMPCreateScreen::kVoiceActiveColorFieldNumber;
const int ReqMPCreateScreen::kChairFeccColorFieldNumber;
const int ReqMPCreateScreen::kTernameattrFieldNumber;
const int ReqMPCreateScreen::kSeqnumFieldNumber;
const int ReqMPCreateScreen::kScreenidFieldNumber;
const int ReqMPCreateScreen::kVideosizeFieldNumber;
#endif  // !_MSC_VER

ReqMPCreateScreen::ReqMPCreateScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqMPCreateScreen)
}

void ReqMPCreateScreen::InitAsDefaultInstance() {
  ternameattr_ = const_cast< ::SRMsgs::ReqMPCreateScreen_TernameATTR*>(&::SRMsgs::ReqMPCreateScreen_TernameATTR::default_instance());
}

ReqMPCreateScreen::ReqMPCreateScreen(const ReqMPCreateScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqMPCreateScreen)
}

void ReqMPCreateScreen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  screentype_ = 0u;
  relatednetmpid_ = 0u;
  voiceactiveind_ = false;
  voiceactivecolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chairfecccolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ternameattr_ = NULL;
  seqnum_ = 0u;
  screenid_ = 0u;
  videosize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMPCreateScreen::~ReqMPCreateScreen() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqMPCreateScreen)
  SharedDtor();
}

void ReqMPCreateScreen::SharedDtor() {
  if (voiceactivecolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voiceactivecolor_;
  }
  if (chairfecccolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairfecccolor_;
  }
  if (this != default_instance_) {
    delete ternameattr_;
  }
}

void ReqMPCreateScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMPCreateScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMPCreateScreen_descriptor_;
}

const ReqMPCreateScreen& ReqMPCreateScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

ReqMPCreateScreen* ReqMPCreateScreen::default_instance_ = NULL;

ReqMPCreateScreen* ReqMPCreateScreen::New() const {
  return new ReqMPCreateScreen;
}

void ReqMPCreateScreen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqMPCreateScreen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, voiceactiveind_);
    if (has_voiceactivecolor()) {
      if (voiceactivecolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voiceactivecolor_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(seqnum_, videosize_);
    if (has_chairfecccolor()) {
      if (chairfecccolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chairfecccolor_->clear();
      }
    }
    if (has_ternameattr()) {
      if (ternameattr_ != NULL) ternameattr_->::SRMsgs::ReqMPCreateScreen_TernameATTR::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMPCreateScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqMPCreateScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 5;
      case 5: {
        if (tag == 40) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voiceActiveInd;
        break;
      }

      // optional bool voiceActiveInd = 7;
      case 7: {
        if (tag == 56) {
         parse_voiceActiveInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voiceactiveind_)));
          set_has_voiceactiveind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_voiceActiveColor;
        break;
      }

      // optional string voiceActiveColor = 8;
      case 8: {
        if (tag == 66) {
         parse_voiceActiveColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiceactivecolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voiceactivecolor().data(), this->voiceactivecolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voiceactivecolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_chairFeccColor;
        break;
      }

      // optional string chairFeccColor = 9;
      case 9: {
        if (tag == 74) {
         parse_chairFeccColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairfecccolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chairfecccolor().data(), this->chairfecccolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chairfecccolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ternameattr;
        break;
      }

      // optional .SRMsgs.ReqMPCreateScreen.TernameATTR ternameattr = 10;
      case 10: {
        if (tag == 82) {
         parse_ternameattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ternameattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 11;
      case 11: {
        if (tag == 88) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 12;
      case 12: {
        if (tag == 96) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 13;
      case 13: {
        if (tag == 104) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqMPCreateScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqMPCreateScreen)
  return false;
#undef DO_
}

void ReqMPCreateScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqMPCreateScreen)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional uint32 screentype = 5;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screentype(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional bool voiceActiveInd = 7;
  if (has_voiceactiveind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->voiceactiveind(), output);
  }

  // optional string voiceActiveColor = 8;
  if (has_voiceactivecolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voiceactivecolor().data(), this->voiceactivecolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voiceactivecolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->voiceactivecolor(), output);
  }

  // optional string chairFeccColor = 9;
  if (has_chairfecccolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairfecccolor().data(), this->chairfecccolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairfecccolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->chairfecccolor(), output);
  }

  // optional .SRMsgs.ReqMPCreateScreen.TernameATTR ternameattr = 10;
  if (has_ternameattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ternameattr(), output);
  }

  // optional uint32 seqnum = 11;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seqnum(), output);
  }

  // optional uint32 screenid = 12;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->screenid(), output);
  }

  // optional uint32 videosize = 13;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->videosize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqMPCreateScreen)
}

::google::protobuf::uint8* ReqMPCreateScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqMPCreateScreen)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional uint32 screentype = 5;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screentype(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional bool voiceActiveInd = 7;
  if (has_voiceactiveind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->voiceactiveind(), target);
  }

  // optional string voiceActiveColor = 8;
  if (has_voiceactivecolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voiceactivecolor().data(), this->voiceactivecolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voiceactivecolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->voiceactivecolor(), target);
  }

  // optional string chairFeccColor = 9;
  if (has_chairfecccolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairfecccolor().data(), this->chairfecccolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairfecccolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->chairfecccolor(), target);
  }

  // optional .SRMsgs.ReqMPCreateScreen.TernameATTR ternameattr = 10;
  if (has_ternameattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ternameattr(), target);
  }

  // optional uint32 seqnum = 11;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seqnum(), target);
  }

  // optional uint32 screenid = 12;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->screenid(), target);
  }

  // optional uint32 videosize = 13;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->videosize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqMPCreateScreen)
  return target;
}

int ReqMPCreateScreen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screentype = 5;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional bool voiceActiveInd = 7;
    if (has_voiceactiveind()) {
      total_size += 1 + 1;
    }

    // optional string voiceActiveColor = 8;
    if (has_voiceactivecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiceactivecolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string chairFeccColor = 9;
    if (has_chairfecccolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairfecccolor());
    }

    // optional .SRMsgs.ReqMPCreateScreen.TernameATTR ternameattr = 10;
    if (has_ternameattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ternameattr());
    }

    // optional uint32 seqnum = 11;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

    // optional uint32 screenid = 12;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 videosize = 13;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMPCreateScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMPCreateScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMPCreateScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMPCreateScreen::MergeFrom(const ReqMPCreateScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_voiceactiveind()) {
      set_voiceactiveind(from.voiceactiveind());
    }
    if (from.has_voiceactivecolor()) {
      set_voiceactivecolor(from.voiceactivecolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chairfecccolor()) {
      set_chairfecccolor(from.chairfecccolor());
    }
    if (from.has_ternameattr()) {
      mutable_ternameattr()->::SRMsgs::ReqMPCreateScreen_TernameATTR::MergeFrom(from.ternameattr());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMPCreateScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMPCreateScreen::CopyFrom(const ReqMPCreateScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMPCreateScreen::IsInitialized() const {

  return true;
}

void ReqMPCreateScreen::Swap(ReqMPCreateScreen* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screentype_, other->screentype_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(voiceactiveind_, other->voiceactiveind_);
    std::swap(voiceactivecolor_, other->voiceactivecolor_);
    std::swap(chairfecccolor_, other->chairfecccolor_);
    std::swap(ternameattr_, other->ternameattr_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(screenid_, other->screenid_);
    std::swap(videosize_, other->videosize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMPCreateScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMPCreateScreen_descriptor_;
  metadata.reflection = ReqMPCreateScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPSetScreenLayout_AutoPollInfo::kApidFieldNumber;
#endif  // !_MSC_VER

CmdMPSetScreenLayout_AutoPollInfo::CmdMPSetScreenLayout_AutoPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
}

void CmdMPSetScreenLayout_AutoPollInfo::InitAsDefaultInstance() {
}

CmdMPSetScreenLayout_AutoPollInfo::CmdMPSetScreenLayout_AutoPollInfo(const CmdMPSetScreenLayout_AutoPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
}

void CmdMPSetScreenLayout_AutoPollInfo::SharedCtor() {
  _cached_size_ = 0;
  apid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSetScreenLayout_AutoPollInfo::~CmdMPSetScreenLayout_AutoPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  SharedDtor();
}

void CmdMPSetScreenLayout_AutoPollInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSetScreenLayout_AutoPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_AutoPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSetScreenLayout_AutoPollInfo_descriptor_;
}

const CmdMPSetScreenLayout_AutoPollInfo& CmdMPSetScreenLayout_AutoPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSetScreenLayout_AutoPollInfo* CmdMPSetScreenLayout_AutoPollInfo::default_instance_ = NULL;

CmdMPSetScreenLayout_AutoPollInfo* CmdMPSetScreenLayout_AutoPollInfo::New() const {
  return new CmdMPSetScreenLayout_AutoPollInfo;
}

void CmdMPSetScreenLayout_AutoPollInfo::Clear() {
  apid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSetScreenLayout_AutoPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apid_)));
          set_has_apid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  return false;
#undef DO_
}

void CmdMPSetScreenLayout_AutoPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
}

::google::protobuf::uint8* CmdMPSetScreenLayout_AutoPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSetScreenLayout.AutoPollInfo)
  return target;
}

int CmdMPSetScreenLayout_AutoPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apid = 1;
    if (has_apid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSetScreenLayout_AutoPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSetScreenLayout_AutoPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSetScreenLayout_AutoPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSetScreenLayout_AutoPollInfo::MergeFrom(const CmdMPSetScreenLayout_AutoPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apid()) {
      set_apid(from.apid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSetScreenLayout_AutoPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSetScreenLayout_AutoPollInfo::CopyFrom(const CmdMPSetScreenLayout_AutoPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSetScreenLayout_AutoPollInfo::IsInitialized() const {

  return true;
}

void CmdMPSetScreenLayout_AutoPollInfo::Swap(CmdMPSetScreenLayout_AutoPollInfo* other) {
  if (other != this) {
    std::swap(apid_, other->apid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSetScreenLayout_AutoPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSetScreenLayout_AutoPollInfo_descriptor_;
  metadata.reflection = CmdMPSetScreenLayout_AutoPollInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPSetScreenLayout_ConfPollInfo::kTeridFieldNumber;
#endif  // !_MSC_VER

CmdMPSetScreenLayout_ConfPollInfo::CmdMPSetScreenLayout_ConfPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
}

void CmdMPSetScreenLayout_ConfPollInfo::InitAsDefaultInstance() {
}

CmdMPSetScreenLayout_ConfPollInfo::CmdMPSetScreenLayout_ConfPollInfo(const CmdMPSetScreenLayout_ConfPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
}

void CmdMPSetScreenLayout_ConfPollInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSetScreenLayout_ConfPollInfo::~CmdMPSetScreenLayout_ConfPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  SharedDtor();
}

void CmdMPSetScreenLayout_ConfPollInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSetScreenLayout_ConfPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_ConfPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSetScreenLayout_ConfPollInfo_descriptor_;
}

const CmdMPSetScreenLayout_ConfPollInfo& CmdMPSetScreenLayout_ConfPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSetScreenLayout_ConfPollInfo* CmdMPSetScreenLayout_ConfPollInfo::default_instance_ = NULL;

CmdMPSetScreenLayout_ConfPollInfo* CmdMPSetScreenLayout_ConfPollInfo::New() const {
  return new CmdMPSetScreenLayout_ConfPollInfo;
}

void CmdMPSetScreenLayout_ConfPollInfo::Clear() {
  terid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSetScreenLayout_ConfPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  return false;
#undef DO_
}

void CmdMPSetScreenLayout_ConfPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
}

::google::protobuf::uint8* CmdMPSetScreenLayout_ConfPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSetScreenLayout.ConfPollInfo)
  return target;
}

int CmdMPSetScreenLayout_ConfPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSetScreenLayout_ConfPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSetScreenLayout_ConfPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSetScreenLayout_ConfPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSetScreenLayout_ConfPollInfo::MergeFrom(const CmdMPSetScreenLayout_ConfPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSetScreenLayout_ConfPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSetScreenLayout_ConfPollInfo::CopyFrom(const CmdMPSetScreenLayout_ConfPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSetScreenLayout_ConfPollInfo::IsInitialized() const {

  return true;
}

void CmdMPSetScreenLayout_ConfPollInfo::Swap(CmdMPSetScreenLayout_ConfPollInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSetScreenLayout_ConfPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSetScreenLayout_ConfPollInfo_descriptor_;
  metadata.reflection = CmdMPSetScreenLayout_ConfPollInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPSetScreenLayout_ScreenPaneInfo::kPaneindexFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kContenttypeFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kOptypeFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kPolltimeFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kTeridFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kChannelidFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kTernameFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kVsrcidFieldNumber;
const int CmdMPSetScreenLayout_ScreenPaneInfo::kAutopolllistFieldNumber;
#endif  // !_MSC_VER

CmdMPSetScreenLayout_ScreenPaneInfo::CmdMPSetScreenLayout_ScreenPaneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
}

void CmdMPSetScreenLayout_ScreenPaneInfo::InitAsDefaultInstance() {
}

CmdMPSetScreenLayout_ScreenPaneInfo::CmdMPSetScreenLayout_ScreenPaneInfo(const CmdMPSetScreenLayout_ScreenPaneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
}

void CmdMPSetScreenLayout_ScreenPaneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  paneindex_ = 0u;
  contenttype_ = 0u;
  optype_ = 0u;
  polltime_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vsrcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSetScreenLayout_ScreenPaneInfo::~CmdMPSetScreenLayout_ScreenPaneInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  SharedDtor();
}

void CmdMPSetScreenLayout_ScreenPaneInfo::SharedDtor() {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tername_;
  }
  if (this != default_instance_) {
  }
}

void CmdMPSetScreenLayout_ScreenPaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout_ScreenPaneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_;
}

const CmdMPSetScreenLayout_ScreenPaneInfo& CmdMPSetScreenLayout_ScreenPaneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSetScreenLayout_ScreenPaneInfo* CmdMPSetScreenLayout_ScreenPaneInfo::default_instance_ = NULL;

CmdMPSetScreenLayout_ScreenPaneInfo* CmdMPSetScreenLayout_ScreenPaneInfo::New() const {
  return new CmdMPSetScreenLayout_ScreenPaneInfo;
}

void CmdMPSetScreenLayout_ScreenPaneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSetScreenLayout_ScreenPaneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(paneindex_, channelid_);
    if (has_tername()) {
      if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tername_->clear();
      }
    }
    vsrcid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  autopolllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSetScreenLayout_ScreenPaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 paneindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paneindex_)));
          set_has_paneindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contenttype;
        break;
      }

      // optional uint32 contenttype = 2;
      case 2: {
        if (tag == 16) {
         parse_contenttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 3;
      case 3: {
        if (tag == 24) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_polltime;
        break;
      }

      // optional uint32 polltime = 4;
      case 4: {
        if (tag == 32) {
         parse_polltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &polltime_)));
          set_has_polltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 5;
      case 5: {
        if (tag == 40) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tername;
        break;
      }

      // optional string tername = 7;
      case 7: {
        if (tag == 58) {
         parse_tername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tername().data(), this->tername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vsrcid;
        break;
      }

      // optional sint32 vsrcid = 8;
      case 8: {
        if (tag == 64) {
         parse_vsrcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &vsrcid_)));
          set_has_vsrcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_autopolllist;
        break;
      }

      // repeated .SRMsgs.CmdMPSetScreenLayout.AutoPollInfo autopolllist = 9;
      case 9: {
        if (tag == 74) {
         parse_autopolllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autopolllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_autopolllist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  return false;
#undef DO_
}

void CmdMPSetScreenLayout_ScreenPaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  // optional uint32 paneindex = 1;
  if (has_paneindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paneindex(), output);
  }

  // optional uint32 contenttype = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contenttype(), output);
  }

  // optional uint32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optype(), output);
  }

  // optional uint32 polltime = 4;
  if (has_polltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->polltime(), output);
  }

  // optional uint32 terid = 5;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->terid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional string tername = 7;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tername(), output);
  }

  // optional sint32 vsrcid = 8;
  if (has_vsrcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->vsrcid(), output);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.AutoPollInfo autopolllist = 9;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->autopolllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
}

::google::protobuf::uint8* CmdMPSetScreenLayout_ScreenPaneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  // optional uint32 paneindex = 1;
  if (has_paneindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paneindex(), target);
  }

  // optional uint32 contenttype = 2;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contenttype(), target);
  }

  // optional uint32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optype(), target);
  }

  // optional uint32 polltime = 4;
  if (has_polltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->polltime(), target);
  }

  // optional uint32 terid = 5;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->terid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional string tername = 7;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tername(), target);
  }

  // optional sint32 vsrcid = 8;
  if (has_vsrcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->vsrcid(), target);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.AutoPollInfo autopolllist = 9;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->autopolllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo)
  return target;
}

int CmdMPSetScreenLayout_ScreenPaneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 paneindex = 1;
    if (has_paneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paneindex());
    }

    // optional uint32 contenttype = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contenttype());
    }

    // optional uint32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint32 polltime = 4;
    if (has_polltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->polltime());
    }

    // optional uint32 terid = 5;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional string tername = 7;
    if (has_tername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tername());
    }

    // optional sint32 vsrcid = 8;
    if (has_vsrcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->vsrcid());
    }

  }
  // repeated .SRMsgs.CmdMPSetScreenLayout.AutoPollInfo autopolllist = 9;
  total_size += 1 * this->autopolllist_size();
  for (int i = 0; i < this->autopolllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autopolllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSetScreenLayout_ScreenPaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSetScreenLayout_ScreenPaneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSetScreenLayout_ScreenPaneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSetScreenLayout_ScreenPaneInfo::MergeFrom(const CmdMPSetScreenLayout_ScreenPaneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  autopolllist_.MergeFrom(from.autopolllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paneindex()) {
      set_paneindex(from.paneindex());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_polltime()) {
      set_polltime(from.polltime());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_tername()) {
      set_tername(from.tername());
    }
    if (from.has_vsrcid()) {
      set_vsrcid(from.vsrcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSetScreenLayout_ScreenPaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSetScreenLayout_ScreenPaneInfo::CopyFrom(const CmdMPSetScreenLayout_ScreenPaneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSetScreenLayout_ScreenPaneInfo::IsInitialized() const {

  return true;
}

void CmdMPSetScreenLayout_ScreenPaneInfo::Swap(CmdMPSetScreenLayout_ScreenPaneInfo* other) {
  if (other != this) {
    std::swap(paneindex_, other->paneindex_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(optype_, other->optype_);
    std::swap(polltime_, other->polltime_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(tername_, other->tername_);
    std::swap(vsrcid_, other->vsrcid_);
    autopolllist_.Swap(&other->autopolllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSetScreenLayout_ScreenPaneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSetScreenLayout_ScreenPaneInfo_descriptor_;
  metadata.reflection = CmdMPSetScreenLayout_ScreenPaneInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPSetScreenLayout::kConfidFieldNumber;
const int CmdMPSetScreenLayout::kMcidFieldNumber;
const int CmdMPSetScreenLayout::kMpidFieldNumber;
const int CmdMPSetScreenLayout::kChannelidFieldNumber;
const int CmdMPSetScreenLayout::kScreenidFieldNumber;
const int CmdMPSetScreenLayout::kScreentypeFieldNumber;
const int CmdMPSetScreenLayout::kLayoutmodeFieldNumber;
const int CmdMPSetScreenLayout::kScreenpanelistFieldNumber;
const int CmdMPSetScreenLayout::kConfpolllistFieldNumber;
const int CmdMPSetScreenLayout::kChairfollowFieldNumber;
#endif  // !_MSC_VER

CmdMPSetScreenLayout::CmdMPSetScreenLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSetScreenLayout)
}

void CmdMPSetScreenLayout::InitAsDefaultInstance() {
}

CmdMPSetScreenLayout::CmdMPSetScreenLayout(const CmdMPSetScreenLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSetScreenLayout)
}

void CmdMPSetScreenLayout::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  layoutmode_ = 0u;
  chairfollow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSetScreenLayout::~CmdMPSetScreenLayout() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSetScreenLayout)
  SharedDtor();
}

void CmdMPSetScreenLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSetScreenLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSetScreenLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSetScreenLayout_descriptor_;
}

const CmdMPSetScreenLayout& CmdMPSetScreenLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSetScreenLayout* CmdMPSetScreenLayout::default_instance_ = NULL;

CmdMPSetScreenLayout* CmdMPSetScreenLayout::New() const {
  return new CmdMPSetScreenLayout;
}

void CmdMPSetScreenLayout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSetScreenLayout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, layoutmode_);
  }
  chairfollow_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  screenpanelist_.Clear();
  confpolllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSetScreenLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSetScreenLayout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 5;
      case 5: {
        if (tag == 40) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 6;
      case 6: {
        if (tag == 48) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_layoutmode;
        break;
      }

      // optional uint32 layoutmode = 7;
      case 7: {
        if (tag == 56) {
         parse_layoutmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layoutmode_)));
          set_has_layoutmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_screenpanelist;
        break;
      }

      // repeated .SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo screenpanelist = 8;
      case 8: {
        if (tag == 66) {
         parse_screenpanelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screenpanelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_screenpanelist;
        if (input->ExpectTag(74)) goto parse_confpolllist;
        break;
      }

      // repeated .SRMsgs.CmdMPSetScreenLayout.ConfPollInfo confpolllist = 9;
      case 9: {
        if (tag == 74) {
         parse_confpolllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_confpolllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_confpolllist;
        if (input->ExpectTag(80)) goto parse_chairfollow;
        break;
      }

      // optional uint32 chairfollow = 10;
      case 10: {
        if (tag == 80) {
         parse_chairfollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairfollow_)));
          set_has_chairfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSetScreenLayout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSetScreenLayout)
  return false;
#undef DO_
}

void CmdMPSetScreenLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSetScreenLayout)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screenid(), output);
  }

  // optional uint32 screentype = 6;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screentype(), output);
  }

  // optional uint32 layoutmode = 7;
  if (has_layoutmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->layoutmode(), output);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo screenpanelist = 8;
  for (int i = 0; i < this->screenpanelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->screenpanelist(i), output);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.ConfPollInfo confpolllist = 9;
  for (int i = 0; i < this->confpolllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->confpolllist(i), output);
  }

  // optional uint32 chairfollow = 10;
  if (has_chairfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->chairfollow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSetScreenLayout)
}

::google::protobuf::uint8* CmdMPSetScreenLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSetScreenLayout)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screenid(), target);
  }

  // optional uint32 screentype = 6;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screentype(), target);
  }

  // optional uint32 layoutmode = 7;
  if (has_layoutmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->layoutmode(), target);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo screenpanelist = 8;
  for (int i = 0; i < this->screenpanelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->screenpanelist(i), target);
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.ConfPollInfo confpolllist = 9;
  for (int i = 0; i < this->confpolllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->confpolllist(i), target);
  }

  // optional uint32 chairfollow = 10;
  if (has_chairfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->chairfollow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSetScreenLayout)
  return target;
}

int CmdMPSetScreenLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 5;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 6;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 layoutmode = 7;
    if (has_layoutmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layoutmode());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 chairfollow = 10;
    if (has_chairfollow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairfollow());
    }

  }
  // repeated .SRMsgs.CmdMPSetScreenLayout.ScreenPaneInfo screenpanelist = 8;
  total_size += 1 * this->screenpanelist_size();
  for (int i = 0; i < this->screenpanelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screenpanelist(i));
  }

  // repeated .SRMsgs.CmdMPSetScreenLayout.ConfPollInfo confpolllist = 9;
  total_size += 1 * this->confpolllist_size();
  for (int i = 0; i < this->confpolllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->confpolllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSetScreenLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSetScreenLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSetScreenLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSetScreenLayout::MergeFrom(const CmdMPSetScreenLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  screenpanelist_.MergeFrom(from.screenpanelist_);
  confpolllist_.MergeFrom(from.confpolllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_layoutmode()) {
      set_layoutmode(from.layoutmode());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_chairfollow()) {
      set_chairfollow(from.chairfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSetScreenLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSetScreenLayout::CopyFrom(const CmdMPSetScreenLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSetScreenLayout::IsInitialized() const {

  return true;
}

void CmdMPSetScreenLayout::Swap(CmdMPSetScreenLayout* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(layoutmode_, other->layoutmode_);
    screenpanelist_.Swap(&other->screenpanelist_);
    confpolllist_.Swap(&other->confpolllist_);
    std::swap(chairfollow_, other->chairfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSetScreenLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSetScreenLayout_descriptor_;
  metadata.reflection = CmdMPSetScreenLayout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPDestoryScreen::kConfidFieldNumber;
const int CmdMPDestoryScreen::kMcidFieldNumber;
const int CmdMPDestoryScreen::kMpidFieldNumber;
const int CmdMPDestoryScreen::kChannelidFieldNumber;
const int CmdMPDestoryScreen::kScreenidFieldNumber;
#endif  // !_MSC_VER

CmdMPDestoryScreen::CmdMPDestoryScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPDestoryScreen)
}

void CmdMPDestoryScreen::InitAsDefaultInstance() {
}

CmdMPDestoryScreen::CmdMPDestoryScreen(const CmdMPDestoryScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPDestoryScreen)
}

void CmdMPDestoryScreen::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPDestoryScreen::~CmdMPDestoryScreen() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPDestoryScreen)
  SharedDtor();
}

void CmdMPDestoryScreen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPDestoryScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPDestoryScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPDestoryScreen_descriptor_;
}

const CmdMPDestoryScreen& CmdMPDestoryScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPDestoryScreen* CmdMPDestoryScreen::default_instance_ = NULL;

CmdMPDestoryScreen* CmdMPDestoryScreen::New() const {
  return new CmdMPDestoryScreen;
}

void CmdMPDestoryScreen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPDestoryScreen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, screenid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPDestoryScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPDestoryScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 5;
      case 5: {
        if (tag == 40) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPDestoryScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPDestoryScreen)
  return false;
#undef DO_
}

void CmdMPDestoryScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPDestoryScreen)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPDestoryScreen)
}

::google::protobuf::uint8* CmdMPDestoryScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPDestoryScreen)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPDestoryScreen)
  return target;
}

int CmdMPDestoryScreen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 5;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPDestoryScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPDestoryScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPDestoryScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPDestoryScreen::MergeFrom(const CmdMPDestoryScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPDestoryScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPDestoryScreen::CopyFrom(const CmdMPDestoryScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPDestoryScreen::IsInitialized() const {

  return true;
}

void CmdMPDestoryScreen::Swap(CmdMPDestoryScreen* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPDestoryScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPDestoryScreen_descriptor_;
  metadata.reflection = CmdMPDestoryScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPAddSubtitle::kConfidFieldNumber;
const int CmdMPAddSubtitle::kMcidFieldNumber;
const int CmdMPAddSubtitle::kMpidFieldNumber;
const int CmdMPAddSubtitle::kMessageFieldNumber;
const int CmdMPAddSubtitle::kMsgposFieldNumber;
const int CmdMPAddSubtitle::kMsgcolorFieldNumber;
const int CmdMPAddSubtitle::kFontsizeFieldNumber;
const int CmdMPAddSubtitle::kEnablemsgbgFieldNumber;
const int CmdMPAddSubtitle::kMsgbgcolorFieldNumber;
const int CmdMPAddSubtitle::kDisplaytimeFieldNumber;
const int CmdMPAddSubtitle::kEnablemsgrollFieldNumber;
const int CmdMPAddSubtitle::kRollspeedFieldNumber;
#endif  // !_MSC_VER

CmdMPAddSubtitle::CmdMPAddSubtitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPAddSubtitle)
}

void CmdMPAddSubtitle::InitAsDefaultInstance() {
}

CmdMPAddSubtitle::CmdMPAddSubtitle(const CmdMPAddSubtitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPAddSubtitle)
}

void CmdMPAddSubtitle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgpos_ = 0u;
  msgcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontsize_ = 0u;
  enablemsgbg_ = false;
  msgbgcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaytime_ = 0u;
  enablemsgroll_ = false;
  rollspeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPAddSubtitle::~CmdMPAddSubtitle() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPAddSubtitle)
  SharedDtor();
}

void CmdMPAddSubtitle::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (msgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcolor_;
  }
  if (msgbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgbgcolor_;
  }
  if (this != default_instance_) {
  }
}

void CmdMPAddSubtitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPAddSubtitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPAddSubtitle_descriptor_;
}

const CmdMPAddSubtitle& CmdMPAddSubtitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPAddSubtitle* CmdMPAddSubtitle::default_instance_ = NULL;

CmdMPAddSubtitle* CmdMPAddSubtitle::New() const {
  return new CmdMPAddSubtitle;
}

void CmdMPAddSubtitle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPAddSubtitle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, mpid_);
    ZR_(msgpos_, fontsize_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_msgcolor()) {
      if (msgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgcolor_->clear();
      }
    }
    enablemsgbg_ = false;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(enablemsgroll_, rollspeed_);
    if (has_msgbgcolor()) {
      if (msgbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgbgcolor_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPAddSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPAddSubtitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgpos;
        break;
      }

      // optional uint32 msgpos = 5;
      case 5: {
        if (tag == 40) {
         parse_msgpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgpos_)));
          set_has_msgpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msgcolor;
        break;
      }

      // optional string msgcolor = 6;
      case 6: {
        if (tag == 50) {
         parse_msgcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgcolor().data(), this->msgcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fontsize;
        break;
      }

      // optional uint32 fontsize = 7;
      case 7: {
        if (tag == 56) {
         parse_fontsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_enablemsgbg;
        break;
      }

      // optional bool enablemsgbg = 8;
      case 8: {
        if (tag == 64) {
         parse_enablemsgbg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablemsgbg_)));
          set_has_enablemsgbg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_msgbgcolor;
        break;
      }

      // optional string msgbgcolor = 9;
      case 9: {
        if (tag == 74) {
         parse_msgbgcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgbgcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgbgcolor().data(), this->msgbgcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgbgcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_displaytime;
        break;
      }

      // optional uint32 displaytime = 10;
      case 10: {
        if (tag == 80) {
         parse_displaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displaytime_)));
          set_has_displaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enablemsgroll;
        break;
      }

      // optional bool enablemsgroll = 11;
      case 11: {
        if (tag == 88) {
         parse_enablemsgroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablemsgroll_)));
          set_has_enablemsgroll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_rollspeed;
        break;
      }

      // optional uint32 rollspeed = 12;
      case 12: {
        if (tag == 96) {
         parse_rollspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rollspeed_)));
          set_has_rollspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPAddSubtitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPAddSubtitle)
  return false;
#undef DO_
}

void CmdMPAddSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPAddSubtitle)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint32 msgpos = 5;
  if (has_msgpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgpos(), output);
  }

  // optional string msgcolor = 6;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcolor().data(), this->msgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msgcolor(), output);
  }

  // optional uint32 fontsize = 7;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fontsize(), output);
  }

  // optional bool enablemsgbg = 8;
  if (has_enablemsgbg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enablemsgbg(), output);
  }

  // optional string msgbgcolor = 9;
  if (has_msgbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgbgcolor().data(), this->msgbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgbgcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->msgbgcolor(), output);
  }

  // optional uint32 displaytime = 10;
  if (has_displaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->displaytime(), output);
  }

  // optional bool enablemsgroll = 11;
  if (has_enablemsgroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enablemsgroll(), output);
  }

  // optional uint32 rollspeed = 12;
  if (has_rollspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rollspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPAddSubtitle)
}

::google::protobuf::uint8* CmdMPAddSubtitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPAddSubtitle)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint32 msgpos = 5;
  if (has_msgpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgpos(), target);
  }

  // optional string msgcolor = 6;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcolor().data(), this->msgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msgcolor(), target);
  }

  // optional uint32 fontsize = 7;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fontsize(), target);
  }

  // optional bool enablemsgbg = 8;
  if (has_enablemsgbg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enablemsgbg(), target);
  }

  // optional string msgbgcolor = 9;
  if (has_msgbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgbgcolor().data(), this->msgbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgbgcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->msgbgcolor(), target);
  }

  // optional uint32 displaytime = 10;
  if (has_displaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->displaytime(), target);
  }

  // optional bool enablemsgroll = 11;
  if (has_enablemsgroll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enablemsgroll(), target);
  }

  // optional uint32 rollspeed = 12;
  if (has_rollspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rollspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPAddSubtitle)
  return target;
}

int CmdMPAddSubtitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 msgpos = 5;
    if (has_msgpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgpos());
    }

    // optional string msgcolor = 6;
    if (has_msgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcolor());
    }

    // optional uint32 fontsize = 7;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

    // optional bool enablemsgbg = 8;
    if (has_enablemsgbg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string msgbgcolor = 9;
    if (has_msgbgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgbgcolor());
    }

    // optional uint32 displaytime = 10;
    if (has_displaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displaytime());
    }

    // optional bool enablemsgroll = 11;
    if (has_enablemsgroll()) {
      total_size += 1 + 1;
    }

    // optional uint32 rollspeed = 12;
    if (has_rollspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rollspeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPAddSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPAddSubtitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPAddSubtitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPAddSubtitle::MergeFrom(const CmdMPAddSubtitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_msgpos()) {
      set_msgpos(from.msgpos());
    }
    if (from.has_msgcolor()) {
      set_msgcolor(from.msgcolor());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_enablemsgbg()) {
      set_enablemsgbg(from.enablemsgbg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msgbgcolor()) {
      set_msgbgcolor(from.msgbgcolor());
    }
    if (from.has_displaytime()) {
      set_displaytime(from.displaytime());
    }
    if (from.has_enablemsgroll()) {
      set_enablemsgroll(from.enablemsgroll());
    }
    if (from.has_rollspeed()) {
      set_rollspeed(from.rollspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPAddSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPAddSubtitle::CopyFrom(const CmdMPAddSubtitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPAddSubtitle::IsInitialized() const {

  return true;
}

void CmdMPAddSubtitle::Swap(CmdMPAddSubtitle* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(message_, other->message_);
    std::swap(msgpos_, other->msgpos_);
    std::swap(msgcolor_, other->msgcolor_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(enablemsgbg_, other->enablemsgbg_);
    std::swap(msgbgcolor_, other->msgbgcolor_);
    std::swap(displaytime_, other->displaytime_);
    std::swap(enablemsgroll_, other->enablemsgroll_);
    std::swap(rollspeed_, other->rollspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPAddSubtitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPAddSubtitle_descriptor_;
  metadata.reflection = CmdMPAddSubtitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPStopSubtitle::kConfidFieldNumber;
const int CmdMPStopSubtitle::kMcidFieldNumber;
const int CmdMPStopSubtitle::kMpidFieldNumber;
#endif  // !_MSC_VER

CmdMPStopSubtitle::CmdMPStopSubtitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPStopSubtitle)
}

void CmdMPStopSubtitle::InitAsDefaultInstance() {
}

CmdMPStopSubtitle::CmdMPStopSubtitle(const CmdMPStopSubtitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPStopSubtitle)
}

void CmdMPStopSubtitle::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPStopSubtitle::~CmdMPStopSubtitle() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPStopSubtitle)
  SharedDtor();
}

void CmdMPStopSubtitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPStopSubtitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPStopSubtitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPStopSubtitle_descriptor_;
}

const CmdMPStopSubtitle& CmdMPStopSubtitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPStopSubtitle* CmdMPStopSubtitle::default_instance_ = NULL;

CmdMPStopSubtitle* CmdMPStopSubtitle::New() const {
  return new CmdMPStopSubtitle;
}

void CmdMPStopSubtitle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPStopSubtitle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPStopSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPStopSubtitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPStopSubtitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPStopSubtitle)
  return false;
#undef DO_
}

void CmdMPStopSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPStopSubtitle)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPStopSubtitle)
}

::google::protobuf::uint8* CmdMPStopSubtitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPStopSubtitle)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPStopSubtitle)
  return target;
}

int CmdMPStopSubtitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPStopSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPStopSubtitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPStopSubtitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPStopSubtitle::MergeFrom(const CmdMPStopSubtitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPStopSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPStopSubtitle::CopyFrom(const CmdMPStopSubtitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPStopSubtitle::IsInitialized() const {

  return true;
}

void CmdMPStopSubtitle::Swap(CmdMPStopSubtitle* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPStopSubtitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPStopSubtitle_descriptor_;
  metadata.reflection = CmdMPStopSubtitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPDisplayTername::kConfidFieldNumber;
const int CmdMPDisplayTername::kMcidFieldNumber;
const int CmdMPDisplayTername::kMpidFieldNumber;
const int CmdMPDisplayTername::kMsgposFieldNumber;
const int CmdMPDisplayTername::kMsgcolorFieldNumber;
const int CmdMPDisplayTername::kFontsizeFieldNumber;
const int CmdMPDisplayTername::kEnableMsgBgFieldNumber;
const int CmdMPDisplayTername::kMsgbgcolorFieldNumber;
#endif  // !_MSC_VER

CmdMPDisplayTername::CmdMPDisplayTername()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPDisplayTername)
}

void CmdMPDisplayTername::InitAsDefaultInstance() {
}

CmdMPDisplayTername::CmdMPDisplayTername(const CmdMPDisplayTername& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPDisplayTername)
}

void CmdMPDisplayTername::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  msgpos_ = 0u;
  msgcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontsize_ = 0u;
  enablemsgbg_ = false;
  msgbgcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPDisplayTername::~CmdMPDisplayTername() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPDisplayTername)
  SharedDtor();
}

void CmdMPDisplayTername::SharedDtor() {
  if (msgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgcolor_;
  }
  if (msgbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgbgcolor_;
  }
  if (this != default_instance_) {
  }
}

void CmdMPDisplayTername::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPDisplayTername::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPDisplayTername_descriptor_;
}

const CmdMPDisplayTername& CmdMPDisplayTername::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPDisplayTername* CmdMPDisplayTername::default_instance_ = NULL;

CmdMPDisplayTername* CmdMPDisplayTername::New() const {
  return new CmdMPDisplayTername;
}

void CmdMPDisplayTername::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPDisplayTername*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, mpid_);
    ZR_(msgpos_, fontsize_);
    if (has_msgcolor()) {
      if (msgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgcolor_->clear();
      }
    }
    enablemsgbg_ = false;
    if (has_msgbgcolor()) {
      if (msgbgcolor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgbgcolor_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPDisplayTername::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPDisplayTername)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgpos;
        break;
      }

      // optional uint32 msgpos = 4;
      case 4: {
        if (tag == 32) {
         parse_msgpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgpos_)));
          set_has_msgpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgcolor;
        break;
      }

      // optional string msgcolor = 5;
      case 5: {
        if (tag == 42) {
         parse_msgcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgcolor().data(), this->msgcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fontsize;
        break;
      }

      // optional uint32 fontsize = 6;
      case 6: {
        if (tag == 48) {
         parse_fontsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enableMsgBg;
        break;
      }

      // optional bool enableMsgBg = 7;
      case 7: {
        if (tag == 56) {
         parse_enableMsgBg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablemsgbg_)));
          set_has_enablemsgbg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msgbgcolor;
        break;
      }

      // optional string msgbgcolor = 8;
      case 8: {
        if (tag == 66) {
         parse_msgbgcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgbgcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgbgcolor().data(), this->msgbgcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgbgcolor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPDisplayTername)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPDisplayTername)
  return false;
#undef DO_
}

void CmdMPDisplayTername::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPDisplayTername)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 msgpos = 4;
  if (has_msgpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgpos(), output);
  }

  // optional string msgcolor = 5;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcolor().data(), this->msgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msgcolor(), output);
  }

  // optional uint32 fontsize = 6;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fontsize(), output);
  }

  // optional bool enableMsgBg = 7;
  if (has_enablemsgbg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enablemsgbg(), output);
  }

  // optional string msgbgcolor = 8;
  if (has_msgbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgbgcolor().data(), this->msgbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgbgcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msgbgcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPDisplayTername)
}

::google::protobuf::uint8* CmdMPDisplayTername::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPDisplayTername)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 msgpos = 4;
  if (has_msgpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgpos(), target);
  }

  // optional string msgcolor = 5;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgcolor().data(), this->msgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msgcolor(), target);
  }

  // optional uint32 fontsize = 6;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fontsize(), target);
  }

  // optional bool enableMsgBg = 7;
  if (has_enablemsgbg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enablemsgbg(), target);
  }

  // optional string msgbgcolor = 8;
  if (has_msgbgcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgbgcolor().data(), this->msgbgcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgbgcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msgbgcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPDisplayTername)
  return target;
}

int CmdMPDisplayTername::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 msgpos = 4;
    if (has_msgpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgpos());
    }

    // optional string msgcolor = 5;
    if (has_msgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcolor());
    }

    // optional uint32 fontsize = 6;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

    // optional bool enableMsgBg = 7;
    if (has_enablemsgbg()) {
      total_size += 1 + 1;
    }

    // optional string msgbgcolor = 8;
    if (has_msgbgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgbgcolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPDisplayTername::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPDisplayTername* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPDisplayTername*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPDisplayTername::MergeFrom(const CmdMPDisplayTername& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_msgpos()) {
      set_msgpos(from.msgpos());
    }
    if (from.has_msgcolor()) {
      set_msgcolor(from.msgcolor());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_enablemsgbg()) {
      set_enablemsgbg(from.enablemsgbg());
    }
    if (from.has_msgbgcolor()) {
      set_msgbgcolor(from.msgbgcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPDisplayTername::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPDisplayTername::CopyFrom(const CmdMPDisplayTername& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPDisplayTername::IsInitialized() const {

  return true;
}

void CmdMPDisplayTername::Swap(CmdMPDisplayTername* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(msgpos_, other->msgpos_);
    std::swap(msgcolor_, other->msgcolor_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(enablemsgbg_, other->enablemsgbg_);
    std::swap(msgbgcolor_, other->msgbgcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPDisplayTername::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPDisplayTername_descriptor_;
  metadata.reflection = CmdMPDisplayTername_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPHideTername::kConfidFieldNumber;
const int CmdMPHideTername::kMcidFieldNumber;
const int CmdMPHideTername::kMpidFieldNumber;
#endif  // !_MSC_VER

CmdMPHideTername::CmdMPHideTername()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPHideTername)
}

void CmdMPHideTername::InitAsDefaultInstance() {
}

CmdMPHideTername::CmdMPHideTername(const CmdMPHideTername& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPHideTername)
}

void CmdMPHideTername::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPHideTername::~CmdMPHideTername() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPHideTername)
  SharedDtor();
}

void CmdMPHideTername::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPHideTername::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPHideTername::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPHideTername_descriptor_;
}

const CmdMPHideTername& CmdMPHideTername::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPHideTername* CmdMPHideTername::default_instance_ = NULL;

CmdMPHideTername* CmdMPHideTername::New() const {
  return new CmdMPHideTername;
}

void CmdMPHideTername::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPHideTername*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPHideTername::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPHideTername)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPHideTername)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPHideTername)
  return false;
#undef DO_
}

void CmdMPHideTername::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPHideTername)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPHideTername)
}

::google::protobuf::uint8* CmdMPHideTername::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPHideTername)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPHideTername)
  return target;
}

int CmdMPHideTername::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPHideTername::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPHideTername* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPHideTername*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPHideTername::MergeFrom(const CmdMPHideTername& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPHideTername::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPHideTername::CopyFrom(const CmdMPHideTername& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPHideTername::IsInitialized() const {

  return true;
}

void CmdMPHideTername::Swap(CmdMPHideTername* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPHideTername::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPHideTername_descriptor_;
  metadata.reflection = CmdMPHideTername_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPStartSendVideo_VideoSize::kLevelFieldNumber;
const int CmdMPStartSendVideo_VideoSize::kCountFieldNumber;
#endif  // !_MSC_VER

CmdMPStartSendVideo_VideoSize::CmdMPStartSendVideo_VideoSize()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPStartSendVideo.VideoSize)
}

void CmdMPStartSendVideo_VideoSize::InitAsDefaultInstance() {
}

CmdMPStartSendVideo_VideoSize::CmdMPStartSendVideo_VideoSize(const CmdMPStartSendVideo_VideoSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPStartSendVideo.VideoSize)
}

void CmdMPStartSendVideo_VideoSize::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPStartSendVideo_VideoSize::~CmdMPStartSendVideo_VideoSize() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPStartSendVideo.VideoSize)
  SharedDtor();
}

void CmdMPStartSendVideo_VideoSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPStartSendVideo_VideoSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPStartSendVideo_VideoSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPStartSendVideo_VideoSize_descriptor_;
}

const CmdMPStartSendVideo_VideoSize& CmdMPStartSendVideo_VideoSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPStartSendVideo_VideoSize* CmdMPStartSendVideo_VideoSize::default_instance_ = NULL;

CmdMPStartSendVideo_VideoSize* CmdMPStartSendVideo_VideoSize::New() const {
  return new CmdMPStartSendVideo_VideoSize;
}

void CmdMPStartSendVideo_VideoSize::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPStartSendVideo_VideoSize*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPStartSendVideo_VideoSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPStartSendVideo.VideoSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPStartSendVideo.VideoSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPStartSendVideo.VideoSize)
  return false;
#undef DO_
}

void CmdMPStartSendVideo_VideoSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPStartSendVideo.VideoSize)
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPStartSendVideo.VideoSize)
}

::google::protobuf::uint8* CmdMPStartSendVideo_VideoSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPStartSendVideo.VideoSize)
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPStartSendVideo.VideoSize)
  return target;
}

int CmdMPStartSendVideo_VideoSize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPStartSendVideo_VideoSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPStartSendVideo_VideoSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPStartSendVideo_VideoSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPStartSendVideo_VideoSize::MergeFrom(const CmdMPStartSendVideo_VideoSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPStartSendVideo_VideoSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPStartSendVideo_VideoSize::CopyFrom(const CmdMPStartSendVideo_VideoSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPStartSendVideo_VideoSize::IsInitialized() const {

  return true;
}

void CmdMPStartSendVideo_VideoSize::Swap(CmdMPStartSendVideo_VideoSize* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPStartSendVideo_VideoSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPStartSendVideo_VideoSize_descriptor_;
  metadata.reflection = CmdMPStartSendVideo_VideoSize_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPStartSendVideo::kConfidFieldNumber;
const int CmdMPStartSendVideo::kChannelidFieldNumber;
const int CmdMPStartSendVideo::kScreenidFieldNumber;
const int CmdMPStartSendVideo::kSendvideosizeFieldNumber;
#endif  // !_MSC_VER

CmdMPStartSendVideo::CmdMPStartSendVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPStartSendVideo)
}

void CmdMPStartSendVideo::InitAsDefaultInstance() {
}

CmdMPStartSendVideo::CmdMPStartSendVideo(const CmdMPStartSendVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPStartSendVideo)
}

void CmdMPStartSendVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  channelid_ = 0u;
  screenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPStartSendVideo::~CmdMPStartSendVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPStartSendVideo)
  SharedDtor();
}

void CmdMPStartSendVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPStartSendVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPStartSendVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPStartSendVideo_descriptor_;
}

const CmdMPStartSendVideo& CmdMPStartSendVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPStartSendVideo* CmdMPStartSendVideo::default_instance_ = NULL;

CmdMPStartSendVideo* CmdMPStartSendVideo::New() const {
  return new CmdMPStartSendVideo;
}

void CmdMPStartSendVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPStartSendVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, screenid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sendvideosize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPStartSendVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPStartSendVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 2;
      case 2: {
        if (tag == 16) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 3;
      case 3: {
        if (tag == 24) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sendvideosize;
        break;
      }

      // repeated .SRMsgs.CmdMPStartSendVideo.VideoSize sendvideosize = 4;
      case 4: {
        if (tag == 34) {
         parse_sendvideosize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sendvideosize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sendvideosize;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPStartSendVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPStartSendVideo)
  return false;
#undef DO_
}

void CmdMPStartSendVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPStartSendVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screenid(), output);
  }

  // repeated .SRMsgs.CmdMPStartSendVideo.VideoSize sendvideosize = 4;
  for (int i = 0; i < this->sendvideosize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sendvideosize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPStartSendVideo)
}

::google::protobuf::uint8* CmdMPStartSendVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPStartSendVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screenid(), target);
  }

  // repeated .SRMsgs.CmdMPStartSendVideo.VideoSize sendvideosize = 4;
  for (int i = 0; i < this->sendvideosize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sendvideosize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPStartSendVideo)
  return target;
}

int CmdMPStartSendVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 channelid = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 3;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

  }
  // repeated .SRMsgs.CmdMPStartSendVideo.VideoSize sendvideosize = 4;
  total_size += 1 * this->sendvideosize_size();
  for (int i = 0; i < this->sendvideosize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sendvideosize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPStartSendVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPStartSendVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPStartSendVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPStartSendVideo::MergeFrom(const CmdMPStartSendVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sendvideosize_.MergeFrom(from.sendvideosize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPStartSendVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPStartSendVideo::CopyFrom(const CmdMPStartSendVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPStartSendVideo::IsInitialized() const {

  return true;
}

void CmdMPStartSendVideo::Swap(CmdMPStartSendVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    sendvideosize_.Swap(&other->sendvideosize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPStartSendVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPStartSendVideo_descriptor_;
  metadata.reflection = CmdMPStartSendVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPReOpenNetMPMediaPort::kNetmpipFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kAudiodatarecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kAudioctrlrecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideodatarecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideoctrlrecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideo2DatarecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideo2CtrlrecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideo3DatarecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kVideo3CtrlrecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kDesktopdatarecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kDesktopctrlrecvportFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kConfidFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kMcidFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kMpidFieldNumber;
const int CmdMPReOpenNetMPMediaPort::kChannelidFieldNumber;
#endif  // !_MSC_VER

CmdMPReOpenNetMPMediaPort::CmdMPReOpenNetMPMediaPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPReOpenNetMPMediaPort)
}

void CmdMPReOpenNetMPMediaPort::InitAsDefaultInstance() {
}

CmdMPReOpenNetMPMediaPort::CmdMPReOpenNetMPMediaPort(const CmdMPReOpenNetMPMediaPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPReOpenNetMPMediaPort)
}

void CmdMPReOpenNetMPMediaPort::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPReOpenNetMPMediaPort::~CmdMPReOpenNetMPMediaPort() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPReOpenNetMPMediaPort)
  SharedDtor();
}

void CmdMPReOpenNetMPMediaPort::SharedDtor() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (this != default_instance_) {
  }
}

void CmdMPReOpenNetMPMediaPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPReOpenNetMPMediaPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPReOpenNetMPMediaPort_descriptor_;
}

const CmdMPReOpenNetMPMediaPort& CmdMPReOpenNetMPMediaPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPReOpenNetMPMediaPort* CmdMPReOpenNetMPMediaPort::default_instance_ = NULL;

CmdMPReOpenNetMPMediaPort* CmdMPReOpenNetMPMediaPort::New() const {
  return new CmdMPReOpenNetMPMediaPort;
}

void CmdMPReOpenNetMPMediaPort::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPReOpenNetMPMediaPort*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiodatarecvport_, video3datarecvport_);
    if (has_netmpip()) {
      if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(video3ctrlrecvport_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPReOpenNetMPMediaPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPReOpenNetMPMediaPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string netmpip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpip().data(), this->netmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 2;
      case 2: {
        if (tag == 16) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 12;
      case 12: {
        if (tag == 96) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 13;
      case 13: {
        if (tag == 104) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 14;
      case 14: {
        if (tag == 112) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 15;
      case 15: {
        if (tag == 120) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPReOpenNetMPMediaPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPReOpenNetMPMediaPort)
  return false;
#undef DO_
}

void CmdMPReOpenNetMPMediaPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->netmpip(), output);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopctrlrecvport(), output);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->confid(), output);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mcid(), output);
  }

  // optional uint32 mpid = 14;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mpid(), output);
  }

  // optional uint32 channelid = 15;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPReOpenNetMPMediaPort)
}

::google::protobuf::uint8* CmdMPReOpenNetMPMediaPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->netmpip(), target);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopctrlrecvport(), target);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->confid(), target);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mcid(), target);
  }

  // optional uint32 mpid = 14;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mpid(), target);
  }

  // optional uint32 channelid = 15;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPReOpenNetMPMediaPort)
  return target;
}

int CmdMPReOpenNetMPMediaPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string netmpip = 1;
    if (has_netmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpip());
    }

    // optional uint32 audiodatarecvport = 2;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 3;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 4;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 5;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 6;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 7;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 8;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3ctrlrecvport = 9;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 10;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 11;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional uint64 confid = 12;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 13;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 14;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 15;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPReOpenNetMPMediaPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPReOpenNetMPMediaPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPReOpenNetMPMediaPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPReOpenNetMPMediaPort::MergeFrom(const CmdMPReOpenNetMPMediaPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpip()) {
      set_netmpip(from.netmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPReOpenNetMPMediaPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPReOpenNetMPMediaPort::CopyFrom(const CmdMPReOpenNetMPMediaPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPReOpenNetMPMediaPort::IsInitialized() const {

  return true;
}

void CmdMPReOpenNetMPMediaPort::Swap(CmdMPReOpenNetMPMediaPort* other) {
  if (other != this) {
    std::swap(netmpip_, other->netmpip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPReOpenNetMPMediaPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPReOpenNetMPMediaPort_descriptor_;
  metadata.reflection = CmdMPReOpenNetMPMediaPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChairTransfer::kConfidFieldNumber;
const int IndMPChairTransfer::kMcidFieldNumber;
const int IndMPChairTransfer::kMpidFieldNumber;
const int IndMPChairTransfer::kNchteridFieldNumber;
const int IndMPChairTransfer::kNchchannelidFieldNumber;
#endif  // !_MSC_VER

IndMPChairTransfer::IndMPChairTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChairTransfer)
}

void IndMPChairTransfer::InitAsDefaultInstance() {
}

IndMPChairTransfer::IndMPChairTransfer(const IndMPChairTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChairTransfer)
}

void IndMPChairTransfer::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  nchterid_ = 0u;
  nchchannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChairTransfer::~IndMPChairTransfer() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChairTransfer)
  SharedDtor();
}

void IndMPChairTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChairTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChairTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChairTransfer_descriptor_;
}

const IndMPChairTransfer& IndMPChairTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChairTransfer* IndMPChairTransfer::default_instance_ = NULL;

IndMPChairTransfer* IndMPChairTransfer::New() const {
  return new IndMPChairTransfer;
}

void IndMPChairTransfer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChairTransfer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, nchchannelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChairTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChairTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nchterid;
        break;
      }

      // optional uint32 nchterid = 4;
      case 4: {
        if (tag == 32) {
         parse_nchterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nchterid_)));
          set_has_nchterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nchchannelid;
        break;
      }

      // optional uint32 nchchannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_nchchannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nchchannelid_)));
          set_has_nchchannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChairTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChairTransfer)
  return false;
#undef DO_
}

void IndMPChairTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChairTransfer)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 nchterid = 4;
  if (has_nchterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nchterid(), output);
  }

  // optional uint32 nchchannelid = 5;
  if (has_nchchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nchchannelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChairTransfer)
}

::google::protobuf::uint8* IndMPChairTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChairTransfer)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 nchterid = 4;
  if (has_nchterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nchterid(), target);
  }

  // optional uint32 nchchannelid = 5;
  if (has_nchchannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nchchannelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChairTransfer)
  return target;
}

int IndMPChairTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 nchterid = 4;
    if (has_nchterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nchterid());
    }

    // optional uint32 nchchannelid = 5;
    if (has_nchchannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nchchannelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChairTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChairTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChairTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChairTransfer::MergeFrom(const IndMPChairTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_nchterid()) {
      set_nchterid(from.nchterid());
    }
    if (from.has_nchchannelid()) {
      set_nchchannelid(from.nchchannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChairTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChairTransfer::CopyFrom(const IndMPChairTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChairTransfer::IsInitialized() const {

  return true;
}

void IndMPChairTransfer::Swap(IndMPChairTransfer* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(nchterid_, other->nchterid_);
    std::swap(nchchannelid_, other->nchchannelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChairTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChairTransfer_descriptor_;
  metadata.reflection = IndMPChairTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndtMPTerMuteEnable::kConfidFieldNumber;
const int IndtMPTerMuteEnable::kMcidFieldNumber;
const int IndtMPTerMuteEnable::kMpidFieldNumber;
const int IndtMPTerMuteEnable::kTeridFieldNumber;
const int IndtMPTerMuteEnable::kChannelidFieldNumber;
const int IndtMPTerMuteEnable::kMuteEnableFieldNumber;
#endif  // !_MSC_VER

IndtMPTerMuteEnable::IndtMPTerMuteEnable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndtMPTerMuteEnable)
}

void IndtMPTerMuteEnable::InitAsDefaultInstance() {
}

IndtMPTerMuteEnable::IndtMPTerMuteEnable(const IndtMPTerMuteEnable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndtMPTerMuteEnable)
}

void IndtMPTerMuteEnable::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  mute_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndtMPTerMuteEnable::~IndtMPTerMuteEnable() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndtMPTerMuteEnable)
  SharedDtor();
}

void IndtMPTerMuteEnable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndtMPTerMuteEnable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndtMPTerMuteEnable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndtMPTerMuteEnable_descriptor_;
}

const IndtMPTerMuteEnable& IndtMPTerMuteEnable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndtMPTerMuteEnable* IndtMPTerMuteEnable::default_instance_ = NULL;

IndtMPTerMuteEnable* IndtMPTerMuteEnable::New() const {
  return new IndtMPTerMuteEnable;
}

void IndtMPTerMuteEnable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndtMPTerMuteEnable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, mute_enable_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndtMPTerMuteEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndtMPTerMuteEnable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mute_enable;
        break;
      }

      // optional bool mute_enable = 6;
      case 6: {
        if (tag == 48) {
         parse_mute_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_enable_)));
          set_has_mute_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndtMPTerMuteEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndtMPTerMuteEnable)
  return false;
#undef DO_
}

void IndtMPTerMuteEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndtMPTerMuteEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional bool mute_enable = 6;
  if (has_mute_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mute_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndtMPTerMuteEnable)
}

::google::protobuf::uint8* IndtMPTerMuteEnable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndtMPTerMuteEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional bool mute_enable = 6;
  if (has_mute_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mute_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndtMPTerMuteEnable)
  return target;
}

int IndtMPTerMuteEnable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional bool mute_enable = 6;
    if (has_mute_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndtMPTerMuteEnable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndtMPTerMuteEnable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndtMPTerMuteEnable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndtMPTerMuteEnable::MergeFrom(const IndtMPTerMuteEnable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_mute_enable()) {
      set_mute_enable(from.mute_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndtMPTerMuteEnable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndtMPTerMuteEnable::CopyFrom(const IndtMPTerMuteEnable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndtMPTerMuteEnable::IsInitialized() const {

  return true;
}

void IndtMPTerMuteEnable::Swap(IndtMPTerMuteEnable* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(mute_enable_, other->mute_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndtMPTerMuteEnable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndtMPTerMuteEnable_descriptor_;
  metadata.reflection = IndtMPTerMuteEnable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerMuteAllEnable::kConfidFieldNumber;
const int IndMPTerMuteAllEnable::kMcidFieldNumber;
const int IndMPTerMuteAllEnable::kMpidFieldNumber;
const int IndMPTerMuteAllEnable::kMuteAllEnableFieldNumber;
#endif  // !_MSC_VER

IndMPTerMuteAllEnable::IndMPTerMuteAllEnable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerMuteAllEnable)
}

void IndMPTerMuteAllEnable::InitAsDefaultInstance() {
}

IndMPTerMuteAllEnable::IndMPTerMuteAllEnable(const IndMPTerMuteAllEnable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerMuteAllEnable)
}

void IndMPTerMuteAllEnable::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  mute_all_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerMuteAllEnable::~IndMPTerMuteAllEnable() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerMuteAllEnable)
  SharedDtor();
}

void IndMPTerMuteAllEnable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerMuteAllEnable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerMuteAllEnable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerMuteAllEnable_descriptor_;
}

const IndMPTerMuteAllEnable& IndMPTerMuteAllEnable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerMuteAllEnable* IndMPTerMuteAllEnable::default_instance_ = NULL;

IndMPTerMuteAllEnable* IndMPTerMuteAllEnable::New() const {
  return new IndMPTerMuteAllEnable;
}

void IndMPTerMuteAllEnable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerMuteAllEnable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, mute_all_enable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerMuteAllEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerMuteAllEnable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mute_all_enable;
        break;
      }

      // optional bool mute_all_enable = 4;
      case 4: {
        if (tag == 32) {
         parse_mute_all_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_all_enable_)));
          set_has_mute_all_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerMuteAllEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerMuteAllEnable)
  return false;
#undef DO_
}

void IndMPTerMuteAllEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerMuteAllEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional bool mute_all_enable = 4;
  if (has_mute_all_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->mute_all_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerMuteAllEnable)
}

::google::protobuf::uint8* IndMPTerMuteAllEnable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerMuteAllEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional bool mute_all_enable = 4;
  if (has_mute_all_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->mute_all_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerMuteAllEnable)
  return target;
}

int IndMPTerMuteAllEnable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional bool mute_all_enable = 4;
    if (has_mute_all_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerMuteAllEnable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerMuteAllEnable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerMuteAllEnable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerMuteAllEnable::MergeFrom(const IndMPTerMuteAllEnable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_mute_all_enable()) {
      set_mute_all_enable(from.mute_all_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerMuteAllEnable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerMuteAllEnable::CopyFrom(const IndMPTerMuteAllEnable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerMuteAllEnable::IsInitialized() const {

  return true;
}

void IndMPTerMuteAllEnable::Swap(IndMPTerMuteAllEnable* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(mute_all_enable_, other->mute_all_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerMuteAllEnable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerMuteAllEnable_descriptor_;
  metadata.reflection = IndMPTerMuteAllEnable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPTerCameraEnable_SourceInfo::kSrcidFieldNumber;
const int IndMPTerCameraEnable_SourceInfo::kNameFieldNumber;
#endif  // !_MSC_VER

IndMPTerCameraEnable_SourceInfo::IndMPTerCameraEnable_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerCameraEnable.SourceInfo)
}

void IndMPTerCameraEnable_SourceInfo::InitAsDefaultInstance() {
}

IndMPTerCameraEnable_SourceInfo::IndMPTerCameraEnable_SourceInfo(const IndMPTerCameraEnable_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerCameraEnable.SourceInfo)
}

void IndMPTerCameraEnable_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerCameraEnable_SourceInfo::~IndMPTerCameraEnable_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  SharedDtor();
}

void IndMPTerCameraEnable_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPTerCameraEnable_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerCameraEnable_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerCameraEnable_SourceInfo_descriptor_;
}

const IndMPTerCameraEnable_SourceInfo& IndMPTerCameraEnable_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerCameraEnable_SourceInfo* IndMPTerCameraEnable_SourceInfo::default_instance_ = NULL;

IndMPTerCameraEnable_SourceInfo* IndMPTerCameraEnable_SourceInfo::New() const {
  return new IndMPTerCameraEnable_SourceInfo;
}

void IndMPTerCameraEnable_SourceInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    srcid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerCameraEnable_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  return false;
#undef DO_
}

void IndMPTerCameraEnable_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerCameraEnable.SourceInfo)
}

::google::protobuf::uint8* IndMPTerCameraEnable_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerCameraEnable.SourceInfo)
  return target;
}

int IndMPTerCameraEnable_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerCameraEnable_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerCameraEnable_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerCameraEnable_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerCameraEnable_SourceInfo::MergeFrom(const IndMPTerCameraEnable_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerCameraEnable_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerCameraEnable_SourceInfo::CopyFrom(const IndMPTerCameraEnable_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerCameraEnable_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPTerCameraEnable_SourceInfo::Swap(IndMPTerCameraEnable_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerCameraEnable_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerCameraEnable_SourceInfo_descriptor_;
  metadata.reflection = IndMPTerCameraEnable_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPTerCameraEnable::kConfidFieldNumber;
const int IndMPTerCameraEnable::kMcidFieldNumber;
const int IndMPTerCameraEnable::kMpidFieldNumber;
const int IndMPTerCameraEnable::kTeridFieldNumber;
const int IndMPTerCameraEnable::kChannelidFieldNumber;
const int IndMPTerCameraEnable::kCameraEnableFieldNumber;
const int IndMPTerCameraEnable::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPTerCameraEnable::IndMPTerCameraEnable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPTerCameraEnable)
}

void IndMPTerCameraEnable::InitAsDefaultInstance() {
}

IndMPTerCameraEnable::IndMPTerCameraEnable(const IndMPTerCameraEnable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPTerCameraEnable)
}

void IndMPTerCameraEnable::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  camera_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPTerCameraEnable::~IndMPTerCameraEnable() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPTerCameraEnable)
  SharedDtor();
}

void IndMPTerCameraEnable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPTerCameraEnable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPTerCameraEnable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPTerCameraEnable_descriptor_;
}

const IndMPTerCameraEnable& IndMPTerCameraEnable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPTerCameraEnable* IndMPTerCameraEnable::default_instance_ = NULL;

IndMPTerCameraEnable* IndMPTerCameraEnable::New() const {
  return new IndMPTerCameraEnable;
}

void IndMPTerCameraEnable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPTerCameraEnable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, channelid_);
    camera_enable_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPTerCameraEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPTerCameraEnable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_camera_enable;
        break;
      }

      // optional bool camera_enable = 6;
      case 6: {
        if (tag == 48) {
         parse_camera_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &camera_enable_)));
          set_has_camera_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPTerCameraEnable.SourceInfo srcinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPTerCameraEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPTerCameraEnable)
  return false;
#undef DO_
}

void IndMPTerCameraEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPTerCameraEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional bool camera_enable = 6;
  if (has_camera_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->camera_enable(), output);
  }

  // repeated .SRMsgs.IndMPTerCameraEnable.SourceInfo srcinfos = 7;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPTerCameraEnable)
}

::google::protobuf::uint8* IndMPTerCameraEnable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPTerCameraEnable)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional bool camera_enable = 6;
  if (has_camera_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->camera_enable(), target);
  }

  // repeated .SRMsgs.IndMPTerCameraEnable.SourceInfo srcinfos = 7;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPTerCameraEnable)
  return target;
}

int IndMPTerCameraEnable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional bool camera_enable = 6;
    if (has_camera_enable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SRMsgs.IndMPTerCameraEnable.SourceInfo srcinfos = 7;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPTerCameraEnable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPTerCameraEnable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPTerCameraEnable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPTerCameraEnable::MergeFrom(const IndMPTerCameraEnable& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_camera_enable()) {
      set_camera_enable(from.camera_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPTerCameraEnable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPTerCameraEnable::CopyFrom(const IndMPTerCameraEnable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPTerCameraEnable::IsInitialized() const {

  return true;
}

void IndMPTerCameraEnable::Swap(IndMPTerCameraEnable* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(camera_enable_, other->camera_enable_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPTerCameraEnable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPTerCameraEnable_descriptor_;
  metadata.reflection = IndMPTerCameraEnable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatToMP::kMcidFieldNumber;
const int IndMCHeartBeatToMP::kMpidFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatToMP::IndMCHeartBeatToMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatToMP)
}

void IndMCHeartBeatToMP::InitAsDefaultInstance() {
}

IndMCHeartBeatToMP::IndMCHeartBeatToMP(const IndMCHeartBeatToMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatToMP)
}

void IndMCHeartBeatToMP::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatToMP::~IndMCHeartBeatToMP() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatToMP)
  SharedDtor();
}

void IndMCHeartBeatToMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatToMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatToMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatToMP_descriptor_;
}

const IndMCHeartBeatToMP& IndMCHeartBeatToMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMCHeartBeatToMP* IndMCHeartBeatToMP::default_instance_ = NULL;

IndMCHeartBeatToMP* IndMCHeartBeatToMP::New() const {
  return new IndMCHeartBeatToMP;
}

void IndMCHeartBeatToMP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatToMP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatToMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatToMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatToMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatToMP)
  return false;
#undef DO_
}

void IndMCHeartBeatToMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatToMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 mpid = 2;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatToMP)
}

::google::protobuf::uint8* IndMCHeartBeatToMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatToMP)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 mpid = 2;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatToMP)
  return target;
}

int IndMCHeartBeatToMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 2;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatToMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatToMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatToMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatToMP::MergeFrom(const IndMCHeartBeatToMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatToMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatToMP::CopyFrom(const IndMCHeartBeatToMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatToMP::IsInitialized() const {

  return true;
}

void IndMCHeartBeatToMP::Swap(IndMCHeartBeatToMP* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatToMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatToMP_descriptor_;
  metadata.reflection = IndMCHeartBeatToMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPAssistVideoOn::kConfidFieldNumber;
const int IndMPAssistVideoOn::kMcidFieldNumber;
const int IndMPAssistVideoOn::kMpidFieldNumber;
const int IndMPAssistVideoOn::kAvteridFieldNumber;
const int IndMPAssistVideoOn::kAvtypeFieldNumber;
const int IndMPAssistVideoOn::kSharedaudioFieldNumber;
#endif  // !_MSC_VER

IndMPAssistVideoOn::IndMPAssistVideoOn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAssistVideoOn)
}

void IndMPAssistVideoOn::InitAsDefaultInstance() {
}

IndMPAssistVideoOn::IndMPAssistVideoOn(const IndMPAssistVideoOn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAssistVideoOn)
}

void IndMPAssistVideoOn::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  avterid_ = 0u;
  avtype_ = 0u;
  sharedaudio_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAssistVideoOn::~IndMPAssistVideoOn() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAssistVideoOn)
  SharedDtor();
}

void IndMPAssistVideoOn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPAssistVideoOn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAssistVideoOn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAssistVideoOn_descriptor_;
}

const IndMPAssistVideoOn& IndMPAssistVideoOn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAssistVideoOn* IndMPAssistVideoOn::default_instance_ = NULL;

IndMPAssistVideoOn* IndMPAssistVideoOn::New() const {
  return new IndMPAssistVideoOn;
}

void IndMPAssistVideoOn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPAssistVideoOn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, sharedaudio_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAssistVideoOn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAssistVideoOn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avterid;
        break;
      }

      // optional uint32 avterid = 4;
      case 4: {
        if (tag == 32) {
         parse_avterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avterid_)));
          set_has_avterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avtype;
        break;
      }

      // optional uint32 avtype = 5;
      case 5: {
        if (tag == 40) {
         parse_avtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avtype_)));
          set_has_avtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sharedaudio;
        break;
      }

      // optional uint32 sharedaudio = 6;
      case 6: {
        if (tag == 48) {
         parse_sharedaudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharedaudio_)));
          set_has_sharedaudio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAssistVideoOn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAssistVideoOn)
  return false;
#undef DO_
}

void IndMPAssistVideoOn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAssistVideoOn)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 avterid = 4;
  if (has_avterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avterid(), output);
  }

  // optional uint32 avtype = 5;
  if (has_avtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avtype(), output);
  }

  // optional uint32 sharedaudio = 6;
  if (has_sharedaudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sharedaudio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAssistVideoOn)
}

::google::protobuf::uint8* IndMPAssistVideoOn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAssistVideoOn)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 avterid = 4;
  if (has_avterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avterid(), target);
  }

  // optional uint32 avtype = 5;
  if (has_avtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avtype(), target);
  }

  // optional uint32 sharedaudio = 6;
  if (has_sharedaudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sharedaudio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAssistVideoOn)
  return target;
}

int IndMPAssistVideoOn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 avterid = 4;
    if (has_avterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avterid());
    }

    // optional uint32 avtype = 5;
    if (has_avtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avtype());
    }

    // optional uint32 sharedaudio = 6;
    if (has_sharedaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharedaudio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAssistVideoOn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAssistVideoOn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAssistVideoOn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAssistVideoOn::MergeFrom(const IndMPAssistVideoOn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_avterid()) {
      set_avterid(from.avterid());
    }
    if (from.has_avtype()) {
      set_avtype(from.avtype());
    }
    if (from.has_sharedaudio()) {
      set_sharedaudio(from.sharedaudio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAssistVideoOn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAssistVideoOn::CopyFrom(const IndMPAssistVideoOn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAssistVideoOn::IsInitialized() const {

  return true;
}

void IndMPAssistVideoOn::Swap(IndMPAssistVideoOn* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(avterid_, other->avterid_);
    std::swap(avtype_, other->avtype_);
    std::swap(sharedaudio_, other->sharedaudio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAssistVideoOn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAssistVideoOn_descriptor_;
  metadata.reflection = IndMPAssistVideoOn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPAssistVideoOff::kConfidFieldNumber;
const int IndMPAssistVideoOff::kMcidFieldNumber;
const int IndMPAssistVideoOff::kMpidFieldNumber;
const int IndMPAssistVideoOff::kAvteridFieldNumber;
#endif  // !_MSC_VER

IndMPAssistVideoOff::IndMPAssistVideoOff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAssistVideoOff)
}

void IndMPAssistVideoOff::InitAsDefaultInstance() {
}

IndMPAssistVideoOff::IndMPAssistVideoOff(const IndMPAssistVideoOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAssistVideoOff)
}

void IndMPAssistVideoOff::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  avterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAssistVideoOff::~IndMPAssistVideoOff() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAssistVideoOff)
  SharedDtor();
}

void IndMPAssistVideoOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPAssistVideoOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAssistVideoOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAssistVideoOff_descriptor_;
}

const IndMPAssistVideoOff& IndMPAssistVideoOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAssistVideoOff* IndMPAssistVideoOff::default_instance_ = NULL;

IndMPAssistVideoOff* IndMPAssistVideoOff::New() const {
  return new IndMPAssistVideoOff;
}

void IndMPAssistVideoOff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPAssistVideoOff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, avterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAssistVideoOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAssistVideoOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avterid;
        break;
      }

      // optional uint32 avterid = 4;
      case 4: {
        if (tag == 32) {
         parse_avterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avterid_)));
          set_has_avterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAssistVideoOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAssistVideoOff)
  return false;
#undef DO_
}

void IndMPAssistVideoOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAssistVideoOff)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 avterid = 4;
  if (has_avterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAssistVideoOff)
}

::google::protobuf::uint8* IndMPAssistVideoOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAssistVideoOff)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 avterid = 4;
  if (has_avterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAssistVideoOff)
  return target;
}

int IndMPAssistVideoOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 avterid = 4;
    if (has_avterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAssistVideoOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAssistVideoOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAssistVideoOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAssistVideoOff::MergeFrom(const IndMPAssistVideoOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_avterid()) {
      set_avterid(from.avterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAssistVideoOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAssistVideoOff::CopyFrom(const IndMPAssistVideoOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAssistVideoOff::IsInitialized() const {

  return true;
}

void IndMPAssistVideoOff::Swap(IndMPAssistVideoOff* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(avterid_, other->avterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAssistVideoOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAssistVideoOff_descriptor_;
  metadata.reflection = IndMPAssistVideoOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPSpecialtypeTransfer::kConfidFieldNumber;
const int IndMPSpecialtypeTransfer::kMcidFieldNumber;
const int IndMPSpecialtypeTransfer::kMpidFieldNumber;
const int IndMPSpecialtypeTransfer::kNspclteridFieldNumber;
const int IndMPSpecialtypeTransfer::kNspcltypeFieldNumber;
#endif  // !_MSC_VER

IndMPSpecialtypeTransfer::IndMPSpecialtypeTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPSpecialtypeTransfer)
}

void IndMPSpecialtypeTransfer::InitAsDefaultInstance() {
}

IndMPSpecialtypeTransfer::IndMPSpecialtypeTransfer(const IndMPSpecialtypeTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPSpecialtypeTransfer)
}

void IndMPSpecialtypeTransfer::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  nspclterid_ = 0u;
  nspcltype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPSpecialtypeTransfer::~IndMPSpecialtypeTransfer() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPSpecialtypeTransfer)
  SharedDtor();
}

void IndMPSpecialtypeTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPSpecialtypeTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPSpecialtypeTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPSpecialtypeTransfer_descriptor_;
}

const IndMPSpecialtypeTransfer& IndMPSpecialtypeTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPSpecialtypeTransfer* IndMPSpecialtypeTransfer::default_instance_ = NULL;

IndMPSpecialtypeTransfer* IndMPSpecialtypeTransfer::New() const {
  return new IndMPSpecialtypeTransfer;
}

void IndMPSpecialtypeTransfer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPSpecialtypeTransfer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, nspcltype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPSpecialtypeTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPSpecialtypeTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nspclterid;
        break;
      }

      // optional uint32 nspclterid = 4;
      case 4: {
        if (tag == 32) {
         parse_nspclterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nspclterid_)));
          set_has_nspclterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nspcltype;
        break;
      }

      // optional uint32 nspcltype = 5;
      case 5: {
        if (tag == 40) {
         parse_nspcltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nspcltype_)));
          set_has_nspcltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPSpecialtypeTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPSpecialtypeTransfer)
  return false;
#undef DO_
}

void IndMPSpecialtypeTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPSpecialtypeTransfer)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 nspclterid = 4;
  if (has_nspclterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nspclterid(), output);
  }

  // optional uint32 nspcltype = 5;
  if (has_nspcltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nspcltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPSpecialtypeTransfer)
}

::google::protobuf::uint8* IndMPSpecialtypeTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPSpecialtypeTransfer)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 nspclterid = 4;
  if (has_nspclterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nspclterid(), target);
  }

  // optional uint32 nspcltype = 5;
  if (has_nspcltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nspcltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPSpecialtypeTransfer)
  return target;
}

int IndMPSpecialtypeTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 nspclterid = 4;
    if (has_nspclterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nspclterid());
    }

    // optional uint32 nspcltype = 5;
    if (has_nspcltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nspcltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPSpecialtypeTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPSpecialtypeTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPSpecialtypeTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPSpecialtypeTransfer::MergeFrom(const IndMPSpecialtypeTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_nspclterid()) {
      set_nspclterid(from.nspclterid());
    }
    if (from.has_nspcltype()) {
      set_nspcltype(from.nspcltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPSpecialtypeTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPSpecialtypeTransfer::CopyFrom(const IndMPSpecialtypeTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPSpecialtypeTransfer::IsInitialized() const {

  return true;
}

void IndMPSpecialtypeTransfer::Swap(IndMPSpecialtypeTransfer* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(nspclterid_, other->nspclterid_);
    std::swap(nspcltype_, other->nspcltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPSpecialtypeTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPSpecialtypeTransfer_descriptor_;
  metadata.reflection = IndMPSpecialtypeTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChangeVideoSourceName_SourceInfo::kSrcidFieldNumber;
const int IndMPChangeVideoSourceName_SourceInfo::kNameFieldNumber;
#endif  // !_MSC_VER

IndMPChangeVideoSourceName_SourceInfo::IndMPChangeVideoSourceName_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
}

void IndMPChangeVideoSourceName_SourceInfo::InitAsDefaultInstance() {
}

IndMPChangeVideoSourceName_SourceInfo::IndMPChangeVideoSourceName_SourceInfo(const IndMPChangeVideoSourceName_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
}

void IndMPChangeVideoSourceName_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeVideoSourceName_SourceInfo::~IndMPChangeVideoSourceName_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  SharedDtor();
}

void IndMPChangeVideoSourceName_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPChangeVideoSourceName_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeVideoSourceName_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeVideoSourceName_SourceInfo_descriptor_;
}

const IndMPChangeVideoSourceName_SourceInfo& IndMPChangeVideoSourceName_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeVideoSourceName_SourceInfo* IndMPChangeVideoSourceName_SourceInfo::default_instance_ = NULL;

IndMPChangeVideoSourceName_SourceInfo* IndMPChangeVideoSourceName_SourceInfo::New() const {
  return new IndMPChangeVideoSourceName_SourceInfo;
}

void IndMPChangeVideoSourceName_SourceInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    srcid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeVideoSourceName_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  return false;
#undef DO_
}

void IndMPChangeVideoSourceName_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
}

::google::protobuf::uint8* IndMPChangeVideoSourceName_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeVideoSourceName.SourceInfo)
  return target;
}

int IndMPChangeVideoSourceName_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeVideoSourceName_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeVideoSourceName_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeVideoSourceName_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeVideoSourceName_SourceInfo::MergeFrom(const IndMPChangeVideoSourceName_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeVideoSourceName_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeVideoSourceName_SourceInfo::CopyFrom(const IndMPChangeVideoSourceName_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeVideoSourceName_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPChangeVideoSourceName_SourceInfo::Swap(IndMPChangeVideoSourceName_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeVideoSourceName_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeVideoSourceName_SourceInfo_descriptor_;
  metadata.reflection = IndMPChangeVideoSourceName_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChangeVideoSourceName::kConfidFieldNumber;
const int IndMPChangeVideoSourceName::kMcidFieldNumber;
const int IndMPChangeVideoSourceName::kMpidFieldNumber;
const int IndMPChangeVideoSourceName::kTeridFieldNumber;
const int IndMPChangeVideoSourceName::kChannelidFieldNumber;
const int IndMPChangeVideoSourceName::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChangeVideoSourceName::IndMPChangeVideoSourceName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeVideoSourceName)
}

void IndMPChangeVideoSourceName::InitAsDefaultInstance() {
}

IndMPChangeVideoSourceName::IndMPChangeVideoSourceName(const IndMPChangeVideoSourceName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeVideoSourceName)
}

void IndMPChangeVideoSourceName::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeVideoSourceName::~IndMPChangeVideoSourceName() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeVideoSourceName)
  SharedDtor();
}

void IndMPChangeVideoSourceName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChangeVideoSourceName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeVideoSourceName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeVideoSourceName_descriptor_;
}

const IndMPChangeVideoSourceName& IndMPChangeVideoSourceName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeVideoSourceName* IndMPChangeVideoSourceName::default_instance_ = NULL;

IndMPChangeVideoSourceName* IndMPChangeVideoSourceName::New() const {
  return new IndMPChangeVideoSourceName;
}

void IndMPChangeVideoSourceName::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChangeVideoSourceName*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeVideoSourceName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeVideoSourceName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChangeVideoSourceName.SourceInfo srcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeVideoSourceName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeVideoSourceName)
  return false;
#undef DO_
}

void IndMPChangeVideoSourceName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeVideoSourceName)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPChangeVideoSourceName.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeVideoSourceName)
}

::google::protobuf::uint8* IndMPChangeVideoSourceName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeVideoSourceName)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPChangeVideoSourceName.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeVideoSourceName)
  return target;
}

int IndMPChangeVideoSourceName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPChangeVideoSourceName.SourceInfo srcinfos = 6;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeVideoSourceName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeVideoSourceName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeVideoSourceName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeVideoSourceName::MergeFrom(const IndMPChangeVideoSourceName& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeVideoSourceName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeVideoSourceName::CopyFrom(const IndMPChangeVideoSourceName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeVideoSourceName::IsInitialized() const {

  return true;
}

void IndMPChangeVideoSourceName::Swap(IndMPChangeVideoSourceName* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeVideoSourceName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeVideoSourceName_descriptor_;
  metadata.reflection = IndMPChangeVideoSourceName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChangeVideoSourcePriority_SourceInfo::kSrcidFieldNumber;
const int IndMPChangeVideoSourcePriority_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPChangeVideoSourcePriority_SourceInfo::IndMPChangeVideoSourcePriority_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
}

void IndMPChangeVideoSourcePriority_SourceInfo::InitAsDefaultInstance() {
}

IndMPChangeVideoSourcePriority_SourceInfo::IndMPChangeVideoSourcePriority_SourceInfo(const IndMPChangeVideoSourcePriority_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
}

void IndMPChangeVideoSourcePriority_SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = 0u;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeVideoSourcePriority_SourceInfo::~IndMPChangeVideoSourcePriority_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  SharedDtor();
}

void IndMPChangeVideoSourcePriority_SourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChangeVideoSourcePriority_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeVideoSourcePriority_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeVideoSourcePriority_SourceInfo_descriptor_;
}

const IndMPChangeVideoSourcePriority_SourceInfo& IndMPChangeVideoSourcePriority_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeVideoSourcePriority_SourceInfo* IndMPChangeVideoSourcePriority_SourceInfo::default_instance_ = NULL;

IndMPChangeVideoSourcePriority_SourceInfo* IndMPChangeVideoSourcePriority_SourceInfo::New() const {
  return new IndMPChangeVideoSourcePriority_SourceInfo;
}

void IndMPChangeVideoSourcePriority_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChangeVideoSourcePriority_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(srcid_, priority_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeVideoSourcePriority_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 2;
      case 2: {
        if (tag == 16) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  return false;
#undef DO_
}

void IndMPChangeVideoSourcePriority_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional uint32 priority = 2;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
}

::google::protobuf::uint8* IndMPChangeVideoSourcePriority_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional uint32 priority = 2;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo)
  return target;
}

int IndMPChangeVideoSourcePriority_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional uint32 priority = 2;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeVideoSourcePriority_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeVideoSourcePriority_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeVideoSourcePriority_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeVideoSourcePriority_SourceInfo::MergeFrom(const IndMPChangeVideoSourcePriority_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeVideoSourcePriority_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeVideoSourcePriority_SourceInfo::CopyFrom(const IndMPChangeVideoSourcePriority_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeVideoSourcePriority_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPChangeVideoSourcePriority_SourceInfo::Swap(IndMPChangeVideoSourcePriority_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeVideoSourcePriority_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeVideoSourcePriority_SourceInfo_descriptor_;
  metadata.reflection = IndMPChangeVideoSourcePriority_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChangeVideoSourcePriority::kConfidFieldNumber;
const int IndMPChangeVideoSourcePriority::kMcidFieldNumber;
const int IndMPChangeVideoSourcePriority::kMpidFieldNumber;
const int IndMPChangeVideoSourcePriority::kTeridFieldNumber;
const int IndMPChangeVideoSourcePriority::kChannelidFieldNumber;
const int IndMPChangeVideoSourcePriority::kAllsrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChangeVideoSourcePriority::IndMPChangeVideoSourcePriority()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeVideoSourcePriority)
}

void IndMPChangeVideoSourcePriority::InitAsDefaultInstance() {
}

IndMPChangeVideoSourcePriority::IndMPChangeVideoSourcePriority(const IndMPChangeVideoSourcePriority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeVideoSourcePriority)
}

void IndMPChangeVideoSourcePriority::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeVideoSourcePriority::~IndMPChangeVideoSourcePriority() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeVideoSourcePriority)
  SharedDtor();
}

void IndMPChangeVideoSourcePriority::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChangeVideoSourcePriority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeVideoSourcePriority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeVideoSourcePriority_descriptor_;
}

const IndMPChangeVideoSourcePriority& IndMPChangeVideoSourcePriority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeVideoSourcePriority* IndMPChangeVideoSourcePriority::default_instance_ = NULL;

IndMPChangeVideoSourcePriority* IndMPChangeVideoSourcePriority::New() const {
  return new IndMPChangeVideoSourcePriority;
}

void IndMPChangeVideoSourcePriority::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChangeVideoSourcePriority*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  allsrcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeVideoSourcePriority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeVideoSourcePriority)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_allsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo allsrcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_allsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_allsrcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeVideoSourcePriority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeVideoSourcePriority)
  return false;
#undef DO_
}

void IndMPChangeVideoSourcePriority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeVideoSourcePriority)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo allsrcinfos = 6;
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->allsrcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeVideoSourcePriority)
}

::google::protobuf::uint8* IndMPChangeVideoSourcePriority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeVideoSourcePriority)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo allsrcinfos = 6;
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->allsrcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeVideoSourcePriority)
  return target;
}

int IndMPChangeVideoSourcePriority::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPChangeVideoSourcePriority.SourceInfo allsrcinfos = 6;
  total_size += 1 * this->allsrcinfos_size();
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allsrcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeVideoSourcePriority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeVideoSourcePriority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeVideoSourcePriority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeVideoSourcePriority::MergeFrom(const IndMPChangeVideoSourcePriority& from) {
  GOOGLE_CHECK_NE(&from, this);
  allsrcinfos_.MergeFrom(from.allsrcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeVideoSourcePriority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeVideoSourcePriority::CopyFrom(const IndMPChangeVideoSourcePriority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeVideoSourcePriority::IsInitialized() const {

  return true;
}

void IndMPChangeVideoSourcePriority::Swap(IndMPChangeVideoSourcePriority* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    allsrcinfos_.Swap(&other->allsrcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeVideoSourcePriority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeVideoSourcePriority_descriptor_;
  metadata.reflection = IndMPChangeVideoSourcePriority_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPNewAudioSourceJoined_SourceInfo::kSrcidFieldNumber;
const int IndMPNewAudioSourceJoined_SourceInfo::kNameFieldNumber;
const int IndMPNewAudioSourceJoined_SourceInfo::kIsOnFieldNumber;
const int IndMPNewAudioSourceJoined_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPNewAudioSourceJoined_SourceInfo::IndMPNewAudioSourceJoined_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
}

void IndMPNewAudioSourceJoined_SourceInfo::InitAsDefaultInstance() {
}

IndMPNewAudioSourceJoined_SourceInfo::IndMPNewAudioSourceJoined_SourceInfo(const IndMPNewAudioSourceJoined_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
}

void IndMPNewAudioSourceJoined_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ison_ = false;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPNewAudioSourceJoined_SourceInfo::~IndMPNewAudioSourceJoined_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  SharedDtor();
}

void IndMPNewAudioSourceJoined_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPNewAudioSourceJoined_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPNewAudioSourceJoined_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPNewAudioSourceJoined_SourceInfo_descriptor_;
}

const IndMPNewAudioSourceJoined_SourceInfo& IndMPNewAudioSourceJoined_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPNewAudioSourceJoined_SourceInfo* IndMPNewAudioSourceJoined_SourceInfo::default_instance_ = NULL;

IndMPNewAudioSourceJoined_SourceInfo* IndMPNewAudioSourceJoined_SourceInfo::New() const {
  return new IndMPNewAudioSourceJoined_SourceInfo;
}

void IndMPNewAudioSourceJoined_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPNewAudioSourceJoined_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcid_, priority_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPNewAudioSourceJoined_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  return false;
#undef DO_
}

void IndMPNewAudioSourceJoined_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
}

::google::protobuf::uint8* IndMPNewAudioSourceJoined_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPNewAudioSourceJoined.SourceInfo)
  return target;
}

int IndMPNewAudioSourceJoined_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPNewAudioSourceJoined_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPNewAudioSourceJoined_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPNewAudioSourceJoined_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPNewAudioSourceJoined_SourceInfo::MergeFrom(const IndMPNewAudioSourceJoined_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPNewAudioSourceJoined_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPNewAudioSourceJoined_SourceInfo::CopyFrom(const IndMPNewAudioSourceJoined_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPNewAudioSourceJoined_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPNewAudioSourceJoined_SourceInfo::Swap(IndMPNewAudioSourceJoined_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(ison_, other->ison_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPNewAudioSourceJoined_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPNewAudioSourceJoined_SourceInfo_descriptor_;
  metadata.reflection = IndMPNewAudioSourceJoined_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPNewAudioSourceJoined::kConfidFieldNumber;
const int IndMPNewAudioSourceJoined::kMcidFieldNumber;
const int IndMPNewAudioSourceJoined::kMpidFieldNumber;
const int IndMPNewAudioSourceJoined::kTeridFieldNumber;
const int IndMPNewAudioSourceJoined::kChannelidFieldNumber;
const int IndMPNewAudioSourceJoined::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPNewAudioSourceJoined::IndMPNewAudioSourceJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPNewAudioSourceJoined)
}

void IndMPNewAudioSourceJoined::InitAsDefaultInstance() {
}

IndMPNewAudioSourceJoined::IndMPNewAudioSourceJoined(const IndMPNewAudioSourceJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPNewAudioSourceJoined)
}

void IndMPNewAudioSourceJoined::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPNewAudioSourceJoined::~IndMPNewAudioSourceJoined() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPNewAudioSourceJoined)
  SharedDtor();
}

void IndMPNewAudioSourceJoined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPNewAudioSourceJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPNewAudioSourceJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPNewAudioSourceJoined_descriptor_;
}

const IndMPNewAudioSourceJoined& IndMPNewAudioSourceJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPNewAudioSourceJoined* IndMPNewAudioSourceJoined::default_instance_ = NULL;

IndMPNewAudioSourceJoined* IndMPNewAudioSourceJoined::New() const {
  return new IndMPNewAudioSourceJoined;
}

void IndMPNewAudioSourceJoined::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPNewAudioSourceJoined*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPNewAudioSourceJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPNewAudioSourceJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPNewAudioSourceJoined.SourceInfo srcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPNewAudioSourceJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPNewAudioSourceJoined)
  return false;
#undef DO_
}

void IndMPNewAudioSourceJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPNewAudioSourceJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPNewAudioSourceJoined.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPNewAudioSourceJoined)
}

::google::protobuf::uint8* IndMPNewAudioSourceJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPNewAudioSourceJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPNewAudioSourceJoined.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPNewAudioSourceJoined)
  return target;
}

int IndMPNewAudioSourceJoined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPNewAudioSourceJoined.SourceInfo srcinfos = 6;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPNewAudioSourceJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPNewAudioSourceJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPNewAudioSourceJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPNewAudioSourceJoined::MergeFrom(const IndMPNewAudioSourceJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPNewAudioSourceJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPNewAudioSourceJoined::CopyFrom(const IndMPNewAudioSourceJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPNewAudioSourceJoined::IsInitialized() const {

  return true;
}

void IndMPNewAudioSourceJoined::Swap(IndMPNewAudioSourceJoined* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPNewAudioSourceJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPNewAudioSourceJoined_descriptor_;
  metadata.reflection = IndMPNewAudioSourceJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPAudioSourceLeave_SourceInfo::kSrcidFieldNumber;
const int IndMPAudioSourceLeave_SourceInfo::kNameFieldNumber;
#endif  // !_MSC_VER

IndMPAudioSourceLeave_SourceInfo::IndMPAudioSourceLeave_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
}

void IndMPAudioSourceLeave_SourceInfo::InitAsDefaultInstance() {
}

IndMPAudioSourceLeave_SourceInfo::IndMPAudioSourceLeave_SourceInfo(const IndMPAudioSourceLeave_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
}

void IndMPAudioSourceLeave_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAudioSourceLeave_SourceInfo::~IndMPAudioSourceLeave_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  SharedDtor();
}

void IndMPAudioSourceLeave_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPAudioSourceLeave_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAudioSourceLeave_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAudioSourceLeave_SourceInfo_descriptor_;
}

const IndMPAudioSourceLeave_SourceInfo& IndMPAudioSourceLeave_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAudioSourceLeave_SourceInfo* IndMPAudioSourceLeave_SourceInfo::default_instance_ = NULL;

IndMPAudioSourceLeave_SourceInfo* IndMPAudioSourceLeave_SourceInfo::New() const {
  return new IndMPAudioSourceLeave_SourceInfo;
}

void IndMPAudioSourceLeave_SourceInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    srcid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAudioSourceLeave_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  return false;
#undef DO_
}

void IndMPAudioSourceLeave_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
}

::google::protobuf::uint8* IndMPAudioSourceLeave_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAudioSourceLeave.SourceInfo)
  return target;
}

int IndMPAudioSourceLeave_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAudioSourceLeave_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAudioSourceLeave_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAudioSourceLeave_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAudioSourceLeave_SourceInfo::MergeFrom(const IndMPAudioSourceLeave_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAudioSourceLeave_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAudioSourceLeave_SourceInfo::CopyFrom(const IndMPAudioSourceLeave_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAudioSourceLeave_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPAudioSourceLeave_SourceInfo::Swap(IndMPAudioSourceLeave_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAudioSourceLeave_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAudioSourceLeave_SourceInfo_descriptor_;
  metadata.reflection = IndMPAudioSourceLeave_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPAudioSourceLeave::kConfidFieldNumber;
const int IndMPAudioSourceLeave::kMcidFieldNumber;
const int IndMPAudioSourceLeave::kMpidFieldNumber;
const int IndMPAudioSourceLeave::kTeridFieldNumber;
const int IndMPAudioSourceLeave::kChannelidFieldNumber;
const int IndMPAudioSourceLeave::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPAudioSourceLeave::IndMPAudioSourceLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAudioSourceLeave)
}

void IndMPAudioSourceLeave::InitAsDefaultInstance() {
}

IndMPAudioSourceLeave::IndMPAudioSourceLeave(const IndMPAudioSourceLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAudioSourceLeave)
}

void IndMPAudioSourceLeave::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAudioSourceLeave::~IndMPAudioSourceLeave() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAudioSourceLeave)
  SharedDtor();
}

void IndMPAudioSourceLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPAudioSourceLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAudioSourceLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAudioSourceLeave_descriptor_;
}

const IndMPAudioSourceLeave& IndMPAudioSourceLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAudioSourceLeave* IndMPAudioSourceLeave::default_instance_ = NULL;

IndMPAudioSourceLeave* IndMPAudioSourceLeave::New() const {
  return new IndMPAudioSourceLeave;
}

void IndMPAudioSourceLeave::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPAudioSourceLeave*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAudioSourceLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAudioSourceLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPAudioSourceLeave.SourceInfo srcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAudioSourceLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAudioSourceLeave)
  return false;
#undef DO_
}

void IndMPAudioSourceLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAudioSourceLeave)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPAudioSourceLeave.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAudioSourceLeave)
}

::google::protobuf::uint8* IndMPAudioSourceLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAudioSourceLeave)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPAudioSourceLeave.SourceInfo srcinfos = 6;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAudioSourceLeave)
  return target;
}

int IndMPAudioSourceLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPAudioSourceLeave.SourceInfo srcinfos = 6;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAudioSourceLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAudioSourceLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAudioSourceLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAudioSourceLeave::MergeFrom(const IndMPAudioSourceLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAudioSourceLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAudioSourceLeave::CopyFrom(const IndMPAudioSourceLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAudioSourceLeave::IsInitialized() const {

  return true;
}

void IndMPAudioSourceLeave::Swap(IndMPAudioSourceLeave* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAudioSourceLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAudioSourceLeave_descriptor_;
  metadata.reflection = IndMPAudioSourceLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPNewVideoSourceJoined_SourceInfo::kSrcidFieldNumber;
const int IndMPNewVideoSourceJoined_SourceInfo::kNameFieldNumber;
const int IndMPNewVideoSourceJoined_SourceInfo::kIsOnFieldNumber;
const int IndMPNewVideoSourceJoined_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPNewVideoSourceJoined_SourceInfo::IndMPNewVideoSourceJoined_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
}

void IndMPNewVideoSourceJoined_SourceInfo::InitAsDefaultInstance() {
}

IndMPNewVideoSourceJoined_SourceInfo::IndMPNewVideoSourceJoined_SourceInfo(const IndMPNewVideoSourceJoined_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
}

void IndMPNewVideoSourceJoined_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ison_ = false;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPNewVideoSourceJoined_SourceInfo::~IndMPNewVideoSourceJoined_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  SharedDtor();
}

void IndMPNewVideoSourceJoined_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPNewVideoSourceJoined_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPNewVideoSourceJoined_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPNewVideoSourceJoined_SourceInfo_descriptor_;
}

const IndMPNewVideoSourceJoined_SourceInfo& IndMPNewVideoSourceJoined_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPNewVideoSourceJoined_SourceInfo* IndMPNewVideoSourceJoined_SourceInfo::default_instance_ = NULL;

IndMPNewVideoSourceJoined_SourceInfo* IndMPNewVideoSourceJoined_SourceInfo::New() const {
  return new IndMPNewVideoSourceJoined_SourceInfo;
}

void IndMPNewVideoSourceJoined_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPNewVideoSourceJoined_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcid_, priority_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPNewVideoSourceJoined_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  return false;
#undef DO_
}

void IndMPNewVideoSourceJoined_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
}

::google::protobuf::uint8* IndMPNewVideoSourceJoined_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPNewVideoSourceJoined.SourceInfo)
  return target;
}

int IndMPNewVideoSourceJoined_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPNewVideoSourceJoined_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPNewVideoSourceJoined_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPNewVideoSourceJoined_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPNewVideoSourceJoined_SourceInfo::MergeFrom(const IndMPNewVideoSourceJoined_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPNewVideoSourceJoined_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPNewVideoSourceJoined_SourceInfo::CopyFrom(const IndMPNewVideoSourceJoined_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPNewVideoSourceJoined_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPNewVideoSourceJoined_SourceInfo::Swap(IndMPNewVideoSourceJoined_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(ison_, other->ison_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPNewVideoSourceJoined_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPNewVideoSourceJoined_SourceInfo_descriptor_;
  metadata.reflection = IndMPNewVideoSourceJoined_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPNewVideoSourceJoined::kConfidFieldNumber;
const int IndMPNewVideoSourceJoined::kMcidFieldNumber;
const int IndMPNewVideoSourceJoined::kMpidFieldNumber;
const int IndMPNewVideoSourceJoined::kTeridFieldNumber;
const int IndMPNewVideoSourceJoined::kChannelidFieldNumber;
const int IndMPNewVideoSourceJoined::kNewsrcinfosFieldNumber;
const int IndMPNewVideoSourceJoined::kAllsrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPNewVideoSourceJoined::IndMPNewVideoSourceJoined()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPNewVideoSourceJoined)
}

void IndMPNewVideoSourceJoined::InitAsDefaultInstance() {
}

IndMPNewVideoSourceJoined::IndMPNewVideoSourceJoined(const IndMPNewVideoSourceJoined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPNewVideoSourceJoined)
}

void IndMPNewVideoSourceJoined::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPNewVideoSourceJoined::~IndMPNewVideoSourceJoined() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPNewVideoSourceJoined)
  SharedDtor();
}

void IndMPNewVideoSourceJoined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPNewVideoSourceJoined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPNewVideoSourceJoined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPNewVideoSourceJoined_descriptor_;
}

const IndMPNewVideoSourceJoined& IndMPNewVideoSourceJoined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPNewVideoSourceJoined* IndMPNewVideoSourceJoined::default_instance_ = NULL;

IndMPNewVideoSourceJoined* IndMPNewVideoSourceJoined::New() const {
  return new IndMPNewVideoSourceJoined;
}

void IndMPNewVideoSourceJoined::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPNewVideoSourceJoined*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  newsrcinfos_.Clear();
  allsrcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPNewVideoSourceJoined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPNewVideoSourceJoined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_newsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_newsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_newsrcinfos;
        if (input->ExpectTag(58)) goto parse_allsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_allsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_allsrcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPNewVideoSourceJoined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPNewVideoSourceJoined)
  return false;
#undef DO_
}

void IndMPNewVideoSourceJoined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPNewVideoSourceJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->newsrcinfos(i), output);
  }

  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->allsrcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPNewVideoSourceJoined)
}

::google::protobuf::uint8* IndMPNewVideoSourceJoined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPNewVideoSourceJoined)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->newsrcinfos(i), target);
  }

  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->allsrcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPNewVideoSourceJoined)
  return target;
}

int IndMPNewVideoSourceJoined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo newsrcinfos = 6;
  total_size += 1 * this->newsrcinfos_size();
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newsrcinfos(i));
  }

  // repeated .SRMsgs.IndMPNewVideoSourceJoined.SourceInfo allsrcinfos = 7;
  total_size += 1 * this->allsrcinfos_size();
  for (int i = 0; i < this->allsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allsrcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPNewVideoSourceJoined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPNewVideoSourceJoined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPNewVideoSourceJoined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPNewVideoSourceJoined::MergeFrom(const IndMPNewVideoSourceJoined& from) {
  GOOGLE_CHECK_NE(&from, this);
  newsrcinfos_.MergeFrom(from.newsrcinfos_);
  allsrcinfos_.MergeFrom(from.allsrcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPNewVideoSourceJoined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPNewVideoSourceJoined::CopyFrom(const IndMPNewVideoSourceJoined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPNewVideoSourceJoined::IsInitialized() const {

  return true;
}

void IndMPNewVideoSourceJoined::Swap(IndMPNewVideoSourceJoined* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    newsrcinfos_.Swap(&other->newsrcinfos_);
    allsrcinfos_.Swap(&other->allsrcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPNewVideoSourceJoined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPNewVideoSourceJoined_descriptor_;
  metadata.reflection = IndMPNewVideoSourceJoined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPVideoSourceLeave_SourceInfo::kSrcidFieldNumber;
const int IndMPVideoSourceLeave_SourceInfo::kNameFieldNumber;
const int IndMPVideoSourceLeave_SourceInfo::kIsOnFieldNumber;
const int IndMPVideoSourceLeave_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPVideoSourceLeave_SourceInfo::IndMPVideoSourceLeave_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
}

void IndMPVideoSourceLeave_SourceInfo::InitAsDefaultInstance() {
}

IndMPVideoSourceLeave_SourceInfo::IndMPVideoSourceLeave_SourceInfo(const IndMPVideoSourceLeave_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
}

void IndMPVideoSourceLeave_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ison_ = false;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPVideoSourceLeave_SourceInfo::~IndMPVideoSourceLeave_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  SharedDtor();
}

void IndMPVideoSourceLeave_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPVideoSourceLeave_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPVideoSourceLeave_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPVideoSourceLeave_SourceInfo_descriptor_;
}

const IndMPVideoSourceLeave_SourceInfo& IndMPVideoSourceLeave_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPVideoSourceLeave_SourceInfo* IndMPVideoSourceLeave_SourceInfo::default_instance_ = NULL;

IndMPVideoSourceLeave_SourceInfo* IndMPVideoSourceLeave_SourceInfo::New() const {
  return new IndMPVideoSourceLeave_SourceInfo;
}

void IndMPVideoSourceLeave_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPVideoSourceLeave_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcid_, priority_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPVideoSourceLeave_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  return false;
#undef DO_
}

void IndMPVideoSourceLeave_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
}

::google::protobuf::uint8* IndMPVideoSourceLeave_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPVideoSourceLeave.SourceInfo)
  return target;
}

int IndMPVideoSourceLeave_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPVideoSourceLeave_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPVideoSourceLeave_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPVideoSourceLeave_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPVideoSourceLeave_SourceInfo::MergeFrom(const IndMPVideoSourceLeave_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPVideoSourceLeave_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPVideoSourceLeave_SourceInfo::CopyFrom(const IndMPVideoSourceLeave_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPVideoSourceLeave_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPVideoSourceLeave_SourceInfo::Swap(IndMPVideoSourceLeave_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(ison_, other->ison_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPVideoSourceLeave_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPVideoSourceLeave_SourceInfo_descriptor_;
  metadata.reflection = IndMPVideoSourceLeave_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPVideoSourceLeave::kConfidFieldNumber;
const int IndMPVideoSourceLeave::kMcidFieldNumber;
const int IndMPVideoSourceLeave::kMpidFieldNumber;
const int IndMPVideoSourceLeave::kTeridFieldNumber;
const int IndMPVideoSourceLeave::kChannelidFieldNumber;
const int IndMPVideoSourceLeave::kDelsrcinfosFieldNumber;
const int IndMPVideoSourceLeave::kCursrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPVideoSourceLeave::IndMPVideoSourceLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPVideoSourceLeave)
}

void IndMPVideoSourceLeave::InitAsDefaultInstance() {
}

IndMPVideoSourceLeave::IndMPVideoSourceLeave(const IndMPVideoSourceLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPVideoSourceLeave)
}

void IndMPVideoSourceLeave::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPVideoSourceLeave::~IndMPVideoSourceLeave() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPVideoSourceLeave)
  SharedDtor();
}

void IndMPVideoSourceLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPVideoSourceLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPVideoSourceLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPVideoSourceLeave_descriptor_;
}

const IndMPVideoSourceLeave& IndMPVideoSourceLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPVideoSourceLeave* IndMPVideoSourceLeave::default_instance_ = NULL;

IndMPVideoSourceLeave* IndMPVideoSourceLeave::New() const {
  return new IndMPVideoSourceLeave;
}

void IndMPVideoSourceLeave::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPVideoSourceLeave*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  delsrcinfos_.Clear();
  cursrcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPVideoSourceLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPVideoSourceLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo delsrcinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_delsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delsrcinfos;
        if (input->ExpectTag(58)) goto parse_cursrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo cursrcinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_cursrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cursrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cursrcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPVideoSourceLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPVideoSourceLeave)
  return false;
#undef DO_
}

void IndMPVideoSourceLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPVideoSourceLeave)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo delsrcinfos = 6;
  for (int i = 0; i < this->delsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->delsrcinfos(i), output);
  }

  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo cursrcinfos = 7;
  for (int i = 0; i < this->cursrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cursrcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPVideoSourceLeave)
}

::google::protobuf::uint8* IndMPVideoSourceLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPVideoSourceLeave)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo delsrcinfos = 6;
  for (int i = 0; i < this->delsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->delsrcinfos(i), target);
  }

  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo cursrcinfos = 7;
  for (int i = 0; i < this->cursrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cursrcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPVideoSourceLeave)
  return target;
}

int IndMPVideoSourceLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo delsrcinfos = 6;
  total_size += 1 * this->delsrcinfos_size();
  for (int i = 0; i < this->delsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delsrcinfos(i));
  }

  // repeated .SRMsgs.IndMPVideoSourceLeave.SourceInfo cursrcinfos = 7;
  total_size += 1 * this->cursrcinfos_size();
  for (int i = 0; i < this->cursrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cursrcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPVideoSourceLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPVideoSourceLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPVideoSourceLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPVideoSourceLeave::MergeFrom(const IndMPVideoSourceLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  delsrcinfos_.MergeFrom(from.delsrcinfos_);
  cursrcinfos_.MergeFrom(from.cursrcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPVideoSourceLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPVideoSourceLeave::CopyFrom(const IndMPVideoSourceLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPVideoSourceLeave::IsInitialized() const {

  return true;
}

void IndMPVideoSourceLeave::Swap(IndMPVideoSourceLeave* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    delsrcinfos_.Swap(&other->delsrcinfos_);
    cursrcinfos_.Swap(&other->cursrcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPVideoSourceLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPVideoSourceLeave_descriptor_;
  metadata.reflection = IndMPVideoSourceLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChangeDeviceInfos_SourceInfo::kSrcidFieldNumber;
const int IndMPChangeDeviceInfos_SourceInfo::kNameFieldNumber;
const int IndMPChangeDeviceInfos_SourceInfo::kIsOnFieldNumber;
const int IndMPChangeDeviceInfos_SourceInfo::kPriorityFieldNumber;
#endif  // !_MSC_VER

IndMPChangeDeviceInfos_SourceInfo::IndMPChangeDeviceInfos_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
}

void IndMPChangeDeviceInfos_SourceInfo::InitAsDefaultInstance() {
}

IndMPChangeDeviceInfos_SourceInfo::IndMPChangeDeviceInfos_SourceInfo(const IndMPChangeDeviceInfos_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
}

void IndMPChangeDeviceInfos_SourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srcid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ison_ = false;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeDeviceInfos_SourceInfo::~IndMPChangeDeviceInfos_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  SharedDtor();
}

void IndMPChangeDeviceInfos_SourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndMPChangeDeviceInfos_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeDeviceInfos_SourceInfo_descriptor_;
}

const IndMPChangeDeviceInfos_SourceInfo& IndMPChangeDeviceInfos_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeDeviceInfos_SourceInfo* IndMPChangeDeviceInfos_SourceInfo::default_instance_ = NULL;

IndMPChangeDeviceInfos_SourceInfo* IndMPChangeDeviceInfos_SourceInfo::New() const {
  return new IndMPChangeDeviceInfos_SourceInfo;
}

void IndMPChangeDeviceInfos_SourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChangeDeviceInfos_SourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcid_, priority_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeDeviceInfos_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (tag == 24) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  return false;
#undef DO_
}

void IndMPChangeDeviceInfos_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
}

::google::protobuf::uint8* IndMPChangeDeviceInfos_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeDeviceInfos.SourceInfo)
  return target;
}

int IndMPChangeDeviceInfos_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeDeviceInfos_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeDeviceInfos_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeDeviceInfos_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeDeviceInfos_SourceInfo::MergeFrom(const IndMPChangeDeviceInfos_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeDeviceInfos_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeDeviceInfos_SourceInfo::CopyFrom(const IndMPChangeDeviceInfos_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeDeviceInfos_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPChangeDeviceInfos_SourceInfo::Swap(IndMPChangeDeviceInfos_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(name_, other->name_);
    std::swap(ison_, other->ison_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeDeviceInfos_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeDeviceInfos_SourceInfo_descriptor_;
  metadata.reflection = IndMPChangeDeviceInfos_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChangeDeviceInfos_DeviceInfo::kTypeFieldNumber;
const int IndMPChangeDeviceInfos_DeviceInfo::kOldsrcinfosFieldNumber;
const int IndMPChangeDeviceInfos_DeviceInfo::kNewsrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChangeDeviceInfos_DeviceInfo::IndMPChangeDeviceInfos_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
}

void IndMPChangeDeviceInfos_DeviceInfo::InitAsDefaultInstance() {
}

IndMPChangeDeviceInfos_DeviceInfo::IndMPChangeDeviceInfos_DeviceInfo(const IndMPChangeDeviceInfos_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
}

void IndMPChangeDeviceInfos_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeDeviceInfos_DeviceInfo::~IndMPChangeDeviceInfos_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  SharedDtor();
}

void IndMPChangeDeviceInfos_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChangeDeviceInfos_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeDeviceInfos_DeviceInfo_descriptor_;
}

const IndMPChangeDeviceInfos_DeviceInfo& IndMPChangeDeviceInfos_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeDeviceInfos_DeviceInfo* IndMPChangeDeviceInfos_DeviceInfo::default_instance_ = NULL;

IndMPChangeDeviceInfos_DeviceInfo* IndMPChangeDeviceInfos_DeviceInfo::New() const {
  return new IndMPChangeDeviceInfos_DeviceInfo;
}

void IndMPChangeDeviceInfos_DeviceInfo::Clear() {
  type_ = 0u;
  oldsrcinfos_.Clear();
  newsrcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeDeviceInfos_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_oldsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_oldsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oldsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_oldsrcinfos;
        if (input->ExpectTag(26)) goto parse_newsrcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo newsrcinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_newsrcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newsrcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newsrcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  return false;
#undef DO_
}

void IndMPChangeDeviceInfos_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
  for (int i = 0; i < this->oldsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oldsrcinfos(i), output);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo newsrcinfos = 3;
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newsrcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
}

::google::protobuf::uint8* IndMPChangeDeviceInfos_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
  for (int i = 0; i < this->oldsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->oldsrcinfos(i), target);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo newsrcinfos = 3;
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newsrcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeDeviceInfos.DeviceInfo)
  return target;
}

int IndMPChangeDeviceInfos_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo oldsrcinfos = 2;
  total_size += 1 * this->oldsrcinfos_size();
  for (int i = 0; i < this->oldsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oldsrcinfos(i));
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.SourceInfo newsrcinfos = 3;
  total_size += 1 * this->newsrcinfos_size();
  for (int i = 0; i < this->newsrcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newsrcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeDeviceInfos_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeDeviceInfos_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeDeviceInfos_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeDeviceInfos_DeviceInfo::MergeFrom(const IndMPChangeDeviceInfos_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  oldsrcinfos_.MergeFrom(from.oldsrcinfos_);
  newsrcinfos_.MergeFrom(from.newsrcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeDeviceInfos_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeDeviceInfos_DeviceInfo::CopyFrom(const IndMPChangeDeviceInfos_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeDeviceInfos_DeviceInfo::IsInitialized() const {

  return true;
}

void IndMPChangeDeviceInfos_DeviceInfo::Swap(IndMPChangeDeviceInfos_DeviceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    oldsrcinfos_.Swap(&other->oldsrcinfos_);
    newsrcinfos_.Swap(&other->newsrcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeDeviceInfos_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeDeviceInfos_DeviceInfo_descriptor_;
  metadata.reflection = IndMPChangeDeviceInfos_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChangeDeviceInfos::kConfidFieldNumber;
const int IndMPChangeDeviceInfos::kMcidFieldNumber;
const int IndMPChangeDeviceInfos::kMpidFieldNumber;
const int IndMPChangeDeviceInfos::kTeridFieldNumber;
const int IndMPChangeDeviceInfos::kChannelidFieldNumber;
const int IndMPChangeDeviceInfos::kDeviceinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChangeDeviceInfos::IndMPChangeDeviceInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChangeDeviceInfos)
}

void IndMPChangeDeviceInfos::InitAsDefaultInstance() {
}

IndMPChangeDeviceInfos::IndMPChangeDeviceInfos(const IndMPChangeDeviceInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChangeDeviceInfos)
}

void IndMPChangeDeviceInfos::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChangeDeviceInfos::~IndMPChangeDeviceInfos() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChangeDeviceInfos)
  SharedDtor();
}

void IndMPChangeDeviceInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChangeDeviceInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChangeDeviceInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChangeDeviceInfos_descriptor_;
}

const IndMPChangeDeviceInfos& IndMPChangeDeviceInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChangeDeviceInfos* IndMPChangeDeviceInfos::default_instance_ = NULL;

IndMPChangeDeviceInfos* IndMPChangeDeviceInfos::New() const {
  return new IndMPChangeDeviceInfos;
}

void IndMPChangeDeviceInfos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChangeDeviceInfos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, channelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  deviceinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChangeDeviceInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChangeDeviceInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 4;
      case 4: {
        if (tag == 32) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChangeDeviceInfos.DeviceInfo deviceinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChangeDeviceInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChangeDeviceInfos)
  return false;
#undef DO_
}

void IndMPChangeDeviceInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChangeDeviceInfos)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->terid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.DeviceInfo deviceinfos = 6;
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deviceinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChangeDeviceInfos)
}

::google::protobuf::uint8* IndMPChangeDeviceInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChangeDeviceInfos)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 terid = 4;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->terid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPChangeDeviceInfos.DeviceInfo deviceinfos = 6;
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deviceinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChangeDeviceInfos)
  return target;
}

int IndMPChangeDeviceInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 terid = 4;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPChangeDeviceInfos.DeviceInfo deviceinfos = 6;
  total_size += 1 * this->deviceinfos_size();
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChangeDeviceInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChangeDeviceInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChangeDeviceInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChangeDeviceInfos::MergeFrom(const IndMPChangeDeviceInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfos_.MergeFrom(from.deviceinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChangeDeviceInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChangeDeviceInfos::CopyFrom(const IndMPChangeDeviceInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChangeDeviceInfos::IsInitialized() const {

  return true;
}

void IndMPChangeDeviceInfos::Swap(IndMPChangeDeviceInfos* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    deviceinfos_.Swap(&other->deviceinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChangeDeviceInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChangeDeviceInfos_descriptor_;
  metadata.reflection = IndMPChangeDeviceInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPAutoPollInfo_ParticipantInfo::kPsuidFieldNumber;
#endif  // !_MSC_VER

IndMPAutoPollInfo_ParticipantInfo::IndMPAutoPollInfo_ParticipantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
}

void IndMPAutoPollInfo_ParticipantInfo::InitAsDefaultInstance() {
}

IndMPAutoPollInfo_ParticipantInfo::IndMPAutoPollInfo_ParticipantInfo(const IndMPAutoPollInfo_ParticipantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
}

void IndMPAutoPollInfo_ParticipantInfo::SharedCtor() {
  _cached_size_ = 0;
  psuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAutoPollInfo_ParticipantInfo::~IndMPAutoPollInfo_ParticipantInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  SharedDtor();
}

void IndMPAutoPollInfo_ParticipantInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPAutoPollInfo_ParticipantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAutoPollInfo_ParticipantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAutoPollInfo_ParticipantInfo_descriptor_;
}

const IndMPAutoPollInfo_ParticipantInfo& IndMPAutoPollInfo_ParticipantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAutoPollInfo_ParticipantInfo* IndMPAutoPollInfo_ParticipantInfo::default_instance_ = NULL;

IndMPAutoPollInfo_ParticipantInfo* IndMPAutoPollInfo_ParticipantInfo::New() const {
  return new IndMPAutoPollInfo_ParticipantInfo;
}

void IndMPAutoPollInfo_ParticipantInfo::Clear() {
  psuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAutoPollInfo_ParticipantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 psuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &psuid_)));
          set_has_psuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  return false;
#undef DO_
}

void IndMPAutoPollInfo_ParticipantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->psuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
}

::google::protobuf::uint8* IndMPAutoPollInfo_ParticipantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->psuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAutoPollInfo.ParticipantInfo)
  return target;
}

int IndMPAutoPollInfo_ParticipantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 psuid = 1;
    if (has_psuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->psuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAutoPollInfo_ParticipantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAutoPollInfo_ParticipantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAutoPollInfo_ParticipantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAutoPollInfo_ParticipantInfo::MergeFrom(const IndMPAutoPollInfo_ParticipantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psuid()) {
      set_psuid(from.psuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAutoPollInfo_ParticipantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAutoPollInfo_ParticipantInfo::CopyFrom(const IndMPAutoPollInfo_ParticipantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAutoPollInfo_ParticipantInfo::IsInitialized() const {

  return true;
}

void IndMPAutoPollInfo_ParticipantInfo::Swap(IndMPAutoPollInfo_ParticipantInfo* other) {
  if (other != this) {
    std::swap(psuid_, other->psuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAutoPollInfo_ParticipantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAutoPollInfo_ParticipantInfo_descriptor_;
  metadata.reflection = IndMPAutoPollInfo_ParticipantInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPAutoPollInfo_AutoPollInfo::kApidFieldNumber;
const int IndMPAutoPollInfo_AutoPollInfo::kApnameFieldNumber;
const int IndMPAutoPollInfo_AutoPollInfo::kAddordelFieldNumber;
const int IndMPAutoPollInfo_AutoPollInfo::kPartsFieldNumber;
#endif  // !_MSC_VER

IndMPAutoPollInfo_AutoPollInfo::IndMPAutoPollInfo_AutoPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
}

void IndMPAutoPollInfo_AutoPollInfo::InitAsDefaultInstance() {
}

IndMPAutoPollInfo_AutoPollInfo::IndMPAutoPollInfo_AutoPollInfo(const IndMPAutoPollInfo_AutoPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
}

void IndMPAutoPollInfo_AutoPollInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  apid_ = GOOGLE_ULONGLONG(0);
  apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAutoPollInfo_AutoPollInfo::~IndMPAutoPollInfo_AutoPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  SharedDtor();
}

void IndMPAutoPollInfo_AutoPollInfo::SharedDtor() {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apname_;
  }
  if (this != default_instance_) {
  }
}

void IndMPAutoPollInfo_AutoPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAutoPollInfo_AutoPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAutoPollInfo_AutoPollInfo_descriptor_;
}

const IndMPAutoPollInfo_AutoPollInfo& IndMPAutoPollInfo_AutoPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAutoPollInfo_AutoPollInfo* IndMPAutoPollInfo_AutoPollInfo::default_instance_ = NULL;

IndMPAutoPollInfo_AutoPollInfo* IndMPAutoPollInfo_AutoPollInfo::New() const {
  return new IndMPAutoPollInfo_AutoPollInfo;
}

void IndMPAutoPollInfo_AutoPollInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    apid_ = GOOGLE_ULONGLONG(0);
    if (has_apname()) {
      if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apname_->clear();
      }
    }
    addordel_ = 0u;
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAutoPollInfo_AutoPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apid_)));
          set_has_apid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apname;
        break;
      }

      // optional string apname = 2;
      case 2: {
        if (tag == 18) {
         parse_apname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apname().data(), this->apname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 3;
      case 3: {
        if (tag == 24) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parts;
        break;
      }

      // repeated .SRMsgs.IndMPAutoPollInfo.ParticipantInfo parts = 4;
      case 4: {
        if (tag == 34) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  return false;
#undef DO_
}

void IndMPAutoPollInfo_AutoPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apid(), output);
  }

  // optional string apname = 2;
  if (has_apname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apname().data(), this->apname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->apname(), output);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addordel(), output);
  }

  // repeated .SRMsgs.IndMPAutoPollInfo.ParticipantInfo parts = 4;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
}

::google::protobuf::uint8* IndMPAutoPollInfo_AutoPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apid(), target);
  }

  // optional string apname = 2;
  if (has_apname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apname().data(), this->apname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apname(), target);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addordel(), target);
  }

  // repeated .SRMsgs.IndMPAutoPollInfo.ParticipantInfo parts = 4;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAutoPollInfo.AutoPollInfo)
  return target;
}

int IndMPAutoPollInfo_AutoPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apid = 1;
    if (has_apid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apid());
    }

    // optional string apname = 2;
    if (has_apname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apname());
    }

    // optional uint32 addordel = 3;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  // repeated .SRMsgs.IndMPAutoPollInfo.ParticipantInfo parts = 4;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAutoPollInfo_AutoPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAutoPollInfo_AutoPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAutoPollInfo_AutoPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAutoPollInfo_AutoPollInfo::MergeFrom(const IndMPAutoPollInfo_AutoPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apid()) {
      set_apid(from.apid());
    }
    if (from.has_apname()) {
      set_apname(from.apname());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAutoPollInfo_AutoPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAutoPollInfo_AutoPollInfo::CopyFrom(const IndMPAutoPollInfo_AutoPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAutoPollInfo_AutoPollInfo::IsInitialized() const {

  return true;
}

void IndMPAutoPollInfo_AutoPollInfo::Swap(IndMPAutoPollInfo_AutoPollInfo* other) {
  if (other != this) {
    std::swap(apid_, other->apid_);
    std::swap(apname_, other->apname_);
    std::swap(addordel_, other->addordel_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAutoPollInfo_AutoPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAutoPollInfo_AutoPollInfo_descriptor_;
  metadata.reflection = IndMPAutoPollInfo_AutoPollInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPAutoPollInfo::kConfidFieldNumber;
const int IndMPAutoPollInfo::kMcidFieldNumber;
const int IndMPAutoPollInfo::kMpidFieldNumber;
const int IndMPAutoPollInfo::kAutopolllistFieldNumber;
#endif  // !_MSC_VER

IndMPAutoPollInfo::IndMPAutoPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPAutoPollInfo)
}

void IndMPAutoPollInfo::InitAsDefaultInstance() {
}

IndMPAutoPollInfo::IndMPAutoPollInfo(const IndMPAutoPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPAutoPollInfo)
}

void IndMPAutoPollInfo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPAutoPollInfo::~IndMPAutoPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPAutoPollInfo)
  SharedDtor();
}

void IndMPAutoPollInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPAutoPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPAutoPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPAutoPollInfo_descriptor_;
}

const IndMPAutoPollInfo& IndMPAutoPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPAutoPollInfo* IndMPAutoPollInfo::default_instance_ = NULL;

IndMPAutoPollInfo* IndMPAutoPollInfo::New() const {
  return new IndMPAutoPollInfo;
}

void IndMPAutoPollInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPAutoPollInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  autopolllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPAutoPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPAutoPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_autopolllist;
        break;
      }

      // repeated .SRMsgs.IndMPAutoPollInfo.AutoPollInfo autopolllist = 4;
      case 4: {
        if (tag == 34) {
         parse_autopolllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autopolllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_autopolllist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPAutoPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPAutoPollInfo)
  return false;
#undef DO_
}

void IndMPAutoPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPAutoPollInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // repeated .SRMsgs.IndMPAutoPollInfo.AutoPollInfo autopolllist = 4;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->autopolllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPAutoPollInfo)
}

::google::protobuf::uint8* IndMPAutoPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPAutoPollInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // repeated .SRMsgs.IndMPAutoPollInfo.AutoPollInfo autopolllist = 4;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->autopolllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPAutoPollInfo)
  return target;
}

int IndMPAutoPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  // repeated .SRMsgs.IndMPAutoPollInfo.AutoPollInfo autopolllist = 4;
  total_size += 1 * this->autopolllist_size();
  for (int i = 0; i < this->autopolllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autopolllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPAutoPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPAutoPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPAutoPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPAutoPollInfo::MergeFrom(const IndMPAutoPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  autopolllist_.MergeFrom(from.autopolllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPAutoPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPAutoPollInfo::CopyFrom(const IndMPAutoPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPAutoPollInfo::IsInitialized() const {

  return true;
}

void IndMPAutoPollInfo::Swap(IndMPAutoPollInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    autopolllist_.Swap(&other->autopolllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPAutoPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPAutoPollInfo_descriptor_;
  metadata.reflection = IndMPAutoPollInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChairLock_SourceInfo::kSrcidFieldNumber;
#endif  // !_MSC_VER

IndMPChairLock_SourceInfo::IndMPChairLock_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChairLock.SourceInfo)
}

void IndMPChairLock_SourceInfo::InitAsDefaultInstance() {
}

IndMPChairLock_SourceInfo::IndMPChairLock_SourceInfo(const IndMPChairLock_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChairLock.SourceInfo)
}

void IndMPChairLock_SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChairLock_SourceInfo::~IndMPChairLock_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChairLock.SourceInfo)
  SharedDtor();
}

void IndMPChairLock_SourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChairLock_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChairLock_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChairLock_SourceInfo_descriptor_;
}

const IndMPChairLock_SourceInfo& IndMPChairLock_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChairLock_SourceInfo* IndMPChairLock_SourceInfo::default_instance_ = NULL;

IndMPChairLock_SourceInfo* IndMPChairLock_SourceInfo::New() const {
  return new IndMPChairLock_SourceInfo;
}

void IndMPChairLock_SourceInfo::Clear() {
  srcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChairLock_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChairLock.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChairLock.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChairLock.SourceInfo)
  return false;
#undef DO_
}

void IndMPChairLock_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChairLock.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChairLock.SourceInfo)
}

::google::protobuf::uint8* IndMPChairLock_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChairLock.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChairLock.SourceInfo)
  return target;
}

int IndMPChairLock_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChairLock_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChairLock_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChairLock_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChairLock_SourceInfo::MergeFrom(const IndMPChairLock_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChairLock_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChairLock_SourceInfo::CopyFrom(const IndMPChairLock_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChairLock_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPChairLock_SourceInfo::Swap(IndMPChairLock_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChairLock_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChairLock_SourceInfo_descriptor_;
  metadata.reflection = IndMPChairLock_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChairLock::kConfidFieldNumber;
const int IndMPChairLock::kMcidFieldNumber;
const int IndMPChairLock::kMpidFieldNumber;
const int IndMPChairLock::kLockedteridFieldNumber;
const int IndMPChairLock::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChairLock::IndMPChairLock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChairLock)
}

void IndMPChairLock::InitAsDefaultInstance() {
}

IndMPChairLock::IndMPChairLock(const IndMPChairLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChairLock)
}

void IndMPChairLock::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  lockedterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChairLock::~IndMPChairLock() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChairLock)
  SharedDtor();
}

void IndMPChairLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChairLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChairLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChairLock_descriptor_;
}

const IndMPChairLock& IndMPChairLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChairLock* IndMPChairLock::default_instance_ = NULL;

IndMPChairLock* IndMPChairLock::New() const {
  return new IndMPChairLock;
}

void IndMPChairLock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChairLock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, mpid_);
    lockedterid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChairLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChairLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lockedterid;
        break;
      }

      // optional uint32 lockedterid = 4;
      case 4: {
        if (tag == 32) {
         parse_lockedterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockedterid_)));
          set_has_lockedterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChairLock.SourceInfo srcinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChairLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChairLock)
  return false;
#undef DO_
}

void IndMPChairLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChairLock)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 lockedterid = 4;
  if (has_lockedterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lockedterid(), output);
  }

  // repeated .SRMsgs.IndMPChairLock.SourceInfo srcinfos = 5;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChairLock)
}

::google::protobuf::uint8* IndMPChairLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChairLock)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 lockedterid = 4;
  if (has_lockedterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lockedterid(), target);
  }

  // repeated .SRMsgs.IndMPChairLock.SourceInfo srcinfos = 5;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChairLock)
  return target;
}

int IndMPChairLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 lockedterid = 4;
    if (has_lockedterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockedterid());
    }

  }
  // repeated .SRMsgs.IndMPChairLock.SourceInfo srcinfos = 5;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChairLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChairLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChairLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChairLock::MergeFrom(const IndMPChairLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_lockedterid()) {
      set_lockedterid(from.lockedterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChairLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChairLock::CopyFrom(const IndMPChairLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChairLock::IsInitialized() const {

  return true;
}

void IndMPChairLock::Swap(IndMPChairLock* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(lockedterid_, other->lockedterid_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChairLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChairLock_descriptor_;
  metadata.reflection = IndMPChairLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPChairUnLock_SourceInfo::kSrcidFieldNumber;
#endif  // !_MSC_VER

IndMPChairUnLock_SourceInfo::IndMPChairUnLock_SourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChairUnLock.SourceInfo)
}

void IndMPChairUnLock_SourceInfo::InitAsDefaultInstance() {
}

IndMPChairUnLock_SourceInfo::IndMPChairUnLock_SourceInfo(const IndMPChairUnLock_SourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChairUnLock.SourceInfo)
}

void IndMPChairUnLock_SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChairUnLock_SourceInfo::~IndMPChairUnLock_SourceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChairUnLock.SourceInfo)
  SharedDtor();
}

void IndMPChairUnLock_SourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChairUnLock_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChairUnLock_SourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChairUnLock_SourceInfo_descriptor_;
}

const IndMPChairUnLock_SourceInfo& IndMPChairUnLock_SourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChairUnLock_SourceInfo* IndMPChairUnLock_SourceInfo::default_instance_ = NULL;

IndMPChairUnLock_SourceInfo* IndMPChairUnLock_SourceInfo::New() const {
  return new IndMPChairUnLock_SourceInfo;
}

void IndMPChairUnLock_SourceInfo::Clear() {
  srcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChairUnLock_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChairUnLock.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChairUnLock.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChairUnLock.SourceInfo)
  return false;
#undef DO_
}

void IndMPChairUnLock_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChairUnLock.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChairUnLock.SourceInfo)
}

::google::protobuf::uint8* IndMPChairUnLock_SourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChairUnLock.SourceInfo)
  // optional uint32 srcid = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChairUnLock.SourceInfo)
  return target;
}

int IndMPChairUnLock_SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcid = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChairUnLock_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChairUnLock_SourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChairUnLock_SourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChairUnLock_SourceInfo::MergeFrom(const IndMPChairUnLock_SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChairUnLock_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChairUnLock_SourceInfo::CopyFrom(const IndMPChairUnLock_SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChairUnLock_SourceInfo::IsInitialized() const {

  return true;
}

void IndMPChairUnLock_SourceInfo::Swap(IndMPChairUnLock_SourceInfo* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChairUnLock_SourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChairUnLock_SourceInfo_descriptor_;
  metadata.reflection = IndMPChairUnLock_SourceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPChairUnLock::kConfidFieldNumber;
const int IndMPChairUnLock::kMcidFieldNumber;
const int IndMPChairUnLock::kMpidFieldNumber;
const int IndMPChairUnLock::kUnlockedteridFieldNumber;
const int IndMPChairUnLock::kSrcinfosFieldNumber;
#endif  // !_MSC_VER

IndMPChairUnLock::IndMPChairUnLock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPChairUnLock)
}

void IndMPChairUnLock::InitAsDefaultInstance() {
}

IndMPChairUnLock::IndMPChairUnLock(const IndMPChairUnLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPChairUnLock)
}

void IndMPChairUnLock::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  unlockedterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPChairUnLock::~IndMPChairUnLock() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPChairUnLock)
  SharedDtor();
}

void IndMPChairUnLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPChairUnLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPChairUnLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPChairUnLock_descriptor_;
}

const IndMPChairUnLock& IndMPChairUnLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPChairUnLock* IndMPChairUnLock::default_instance_ = NULL;

IndMPChairUnLock* IndMPChairUnLock::New() const {
  return new IndMPChairUnLock;
}

void IndMPChairUnLock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPChairUnLock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, mpid_);
    unlockedterid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  srcinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPChairUnLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPChairUnLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockedterid;
        break;
      }

      // optional uint32 unlockedterid = 4;
      case 4: {
        if (tag == 32) {
         parse_unlockedterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlockedterid_)));
          set_has_unlockedterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_srcinfos;
        break;
      }

      // repeated .SRMsgs.IndMPChairUnLock.SourceInfo srcinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_srcinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srcinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_srcinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPChairUnLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPChairUnLock)
  return false;
#undef DO_
}

void IndMPChairUnLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPChairUnLock)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 unlockedterid = 4;
  if (has_unlockedterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unlockedterid(), output);
  }

  // repeated .SRMsgs.IndMPChairUnLock.SourceInfo srcinfos = 5;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->srcinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPChairUnLock)
}

::google::protobuf::uint8* IndMPChairUnLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPChairUnLock)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 unlockedterid = 4;
  if (has_unlockedterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unlockedterid(), target);
  }

  // repeated .SRMsgs.IndMPChairUnLock.SourceInfo srcinfos = 5;
  for (int i = 0; i < this->srcinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->srcinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPChairUnLock)
  return target;
}

int IndMPChairUnLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 unlockedterid = 4;
    if (has_unlockedterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlockedterid());
    }

  }
  // repeated .SRMsgs.IndMPChairUnLock.SourceInfo srcinfos = 5;
  total_size += 1 * this->srcinfos_size();
  for (int i = 0; i < this->srcinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPChairUnLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPChairUnLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPChairUnLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPChairUnLock::MergeFrom(const IndMPChairUnLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcinfos_.MergeFrom(from.srcinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_unlockedterid()) {
      set_unlockedterid(from.unlockedterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPChairUnLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPChairUnLock::CopyFrom(const IndMPChairUnLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPChairUnLock::IsInitialized() const {

  return true;
}

void IndMPChairUnLock::Swap(IndMPChairUnLock* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(unlockedterid_, other->unlockedterid_);
    srcinfos_.Swap(&other->srcinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPChairUnLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPChairUnLock_descriptor_;
  metadata.reflection = IndMPChairUnLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspMCCreateMPI::kIsokFieldNumber;
const int RspMCCreateMPI::kConfidFieldNumber;
const int RspMCCreateMPI::kMcidFieldNumber;
const int RspMCCreateMPI::kMpidFieldNumber;
const int RspMCCreateMPI::kChannelidFieldNumber;
const int RspMCCreateMPI::kRelatednetmpidFieldNumber;
const int RspMCCreateMPI::kFailreasonFieldNumber;
const int RspMCCreateMPI::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspMCCreateMPI::RspMCCreateMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspMCCreateMPI)
}

void RspMCCreateMPI::InitAsDefaultInstance() {
}

RspMCCreateMPI::RspMCCreateMPI(const RspMCCreateMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspMCCreateMPI)
}

void RspMCCreateMPI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  relatednetmpid_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspMCCreateMPI::~RspMCCreateMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspMCCreateMPI)
  SharedDtor();
}

void RspMCCreateMPI::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspMCCreateMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMCCreateMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMCCreateMPI_descriptor_;
}

const RspMCCreateMPI& RspMCCreateMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

RspMCCreateMPI* RspMCCreateMPI::default_instance_ = NULL;

RspMCCreateMPI* RspMCCreateMPI::New() const {
  return new RspMCCreateMPI;
}

void RspMCCreateMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspMCCreateMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, channelid_);
    ZR_(relatednetmpid_, errorcode_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspMCCreateMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspMCCreateMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 4;
      case 4: {
        if (tag == 32) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 5;
      case 5: {
        if (tag == 40) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_failreason;
        break;
      }

      // optional string failreason = 7;
      case 7: {
        if (tag == 58) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 8;
      case 8: {
        if (tag == 64) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspMCCreateMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspMCCreateMPI)
  return false;
#undef DO_
}

void RspMCCreateMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspMCCreateMPI)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 mpid = 4;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mpid(), output);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->failreason(), output);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspMCCreateMPI)
}

::google::protobuf::uint8* RspMCCreateMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspMCCreateMPI)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 mpid = 4;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mpid(), target);
  }

  // optional uint32 channelid = 5;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->failreason(), target);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspMCCreateMPI)
  return target;
}

int RspMCCreateMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 4;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional string failreason = 7;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint32 errorcode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMCCreateMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspMCCreateMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspMCCreateMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMCCreateMPI::MergeFrom(const RspMCCreateMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspMCCreateMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMCCreateMPI::CopyFrom(const RspMCCreateMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMCCreateMPI::IsInitialized() const {

  return true;
}

void RspMCCreateMPI::Swap(RspMCCreateMPI* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(failreason_, other->failreason_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspMCCreateMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMCCreateMPI_descriptor_;
  metadata.reflection = RspMCCreateMPI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspMCCreateScreen::kIsokFieldNumber;
const int RspMCCreateScreen::kConfidFieldNumber;
const int RspMCCreateScreen::kMcidFieldNumber;
const int RspMCCreateScreen::kMpidFieldNumber;
const int RspMCCreateScreen::kRelatednetmpidFieldNumber;
const int RspMCCreateScreen::kChannelidFieldNumber;
const int RspMCCreateScreen::kScreenidFieldNumber;
const int RspMCCreateScreen::kScreentypeFieldNumber;
const int RspMCCreateScreen::kFailreasonFieldNumber;
const int RspMCCreateScreen::kSeqnumFieldNumber;
const int RspMCCreateScreen::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

RspMCCreateScreen::RspMCCreateScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspMCCreateScreen)
}

void RspMCCreateScreen::InitAsDefaultInstance() {
}

RspMCCreateScreen::RspMCCreateScreen(const RspMCCreateScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspMCCreateScreen)
}

void RspMCCreateScreen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  relatednetmpid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqnum_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspMCCreateScreen::~RspMCCreateScreen() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspMCCreateScreen)
  SharedDtor();
}

void RspMCCreateScreen::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspMCCreateScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMCCreateScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMCCreateScreen_descriptor_;
}

const RspMCCreateScreen& RspMCCreateScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

RspMCCreateScreen* RspMCCreateScreen::default_instance_ = NULL;

RspMCCreateScreen* RspMCCreateScreen::New() const {
  return new RspMCCreateScreen;
}

void RspMCCreateScreen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspMCCreateScreen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, screenid_);
    screentype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(seqnum_, errorcode_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspMCCreateScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspMCCreateScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 4;
      case 4: {
        if (tag == 32) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 7;
      case 7: {
        if (tag == 56) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 8;
      case 8: {
        if (tag == 64) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_failreason;
        break;
      }

      // optional string failreason = 9;
      case 9: {
        if (tag == 74) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 10;
      case 10: {
        if (tag == 80) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 11;
      case 11: {
        if (tag == 88) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspMCCreateScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspMCCreateScreen)
  return false;
#undef DO_
}

void RspMCCreateScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspMCCreateScreen)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 mpid = 4;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mpid(), output);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->relatednetmpid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screenid(), output);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->screentype(), output);
  }

  // optional string failreason = 9;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->failreason(), output);
  }

  // optional uint32 seqnum = 10;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seqnum(), output);
  }

  // optional uint32 errorcode = 11;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspMCCreateScreen)
}

::google::protobuf::uint8* RspMCCreateScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspMCCreateScreen)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 mpid = 4;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mpid(), target);
  }

  // optional uint32 relatednetmpid = 5;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->relatednetmpid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional uint32 screenid = 7;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screenid(), target);
  }

  // optional uint32 screentype = 8;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->screentype(), target);
  }

  // optional string failreason = 9;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->failreason(), target);
  }

  // optional uint32 seqnum = 10;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seqnum(), target);
  }

  // optional uint32 errorcode = 11;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspMCCreateScreen)
  return target;
}

int RspMCCreateScreen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 4;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 relatednetmpid = 5;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 7;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 8;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string failreason = 9;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint32 seqnum = 10;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

    // optional uint32 errorcode = 11;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMCCreateScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspMCCreateScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspMCCreateScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMCCreateScreen::MergeFrom(const RspMCCreateScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspMCCreateScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMCCreateScreen::CopyFrom(const RspMCCreateScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMCCreateScreen::IsInitialized() const {

  return true;
}

void RspMCCreateScreen::Swap(RspMCCreateScreen* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(failreason_, other->failreason_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspMCCreateScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMCCreateScreen_descriptor_;
  metadata.reflection = RspMCCreateScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPSeleteVideo_TermInfo::kTeridFieldNumber;
const int CmdMPSeleteVideo_TermInfo::kChannelidFieldNumber;
const int CmdMPSeleteVideo_TermInfo::kVideosizeFieldNumber;
const int CmdMPSeleteVideo_TermInfo::kSrcidFieldNumber;
#endif  // !_MSC_VER

CmdMPSeleteVideo_TermInfo::CmdMPSeleteVideo_TermInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSeleteVideo.TermInfo)
}

void CmdMPSeleteVideo_TermInfo::InitAsDefaultInstance() {
}

CmdMPSeleteVideo_TermInfo::CmdMPSeleteVideo_TermInfo(const CmdMPSeleteVideo_TermInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSeleteVideo.TermInfo)
}

void CmdMPSeleteVideo_TermInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  channelid_ = 0u;
  videosize_ = 0u;
  srcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSeleteVideo_TermInfo::~CmdMPSeleteVideo_TermInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSeleteVideo.TermInfo)
  SharedDtor();
}

void CmdMPSeleteVideo_TermInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSeleteVideo_TermInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSeleteVideo_TermInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSeleteVideo_TermInfo_descriptor_;
}

const CmdMPSeleteVideo_TermInfo& CmdMPSeleteVideo_TermInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSeleteVideo_TermInfo* CmdMPSeleteVideo_TermInfo::default_instance_ = NULL;

CmdMPSeleteVideo_TermInfo* CmdMPSeleteVideo_TermInfo::New() const {
  return new CmdMPSeleteVideo_TermInfo;
}

void CmdMPSeleteVideo_TermInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSeleteVideo_TermInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, srcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSeleteVideo_TermInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSeleteVideo.TermInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 2;
      case 2: {
        if (tag == 16) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 3;
      case 3: {
        if (tag == 24) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcid;
        break;
      }

      // optional uint32 srcid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSeleteVideo.TermInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSeleteVideo.TermInfo)
  return false;
#undef DO_
}

void CmdMPSeleteVideo_TermInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->videosize(), output);
  }

  // optional uint32 srcid = 4;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSeleteVideo.TermInfo)
}

::google::protobuf::uint8* CmdMPSeleteVideo_TermInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->videosize(), target);
  }

  // optional uint32 srcid = 4;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSeleteVideo.TermInfo)
  return target;
}

int CmdMPSeleteVideo_TermInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 videosize = 3;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

    // optional uint32 srcid = 4;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSeleteVideo_TermInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSeleteVideo_TermInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSeleteVideo_TermInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSeleteVideo_TermInfo::MergeFrom(const CmdMPSeleteVideo_TermInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSeleteVideo_TermInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSeleteVideo_TermInfo::CopyFrom(const CmdMPSeleteVideo_TermInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSeleteVideo_TermInfo::IsInitialized() const {

  return true;
}

void CmdMPSeleteVideo_TermInfo::Swap(CmdMPSeleteVideo_TermInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(videosize_, other->videosize_);
    std::swap(srcid_, other->srcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSeleteVideo_TermInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSeleteVideo_TermInfo_descriptor_;
  metadata.reflection = CmdMPSeleteVideo_TermInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPSeleteVideo::kConfidFieldNumber;
const int CmdMPSeleteVideo::kMcidFieldNumber;
const int CmdMPSeleteVideo::kMpidFieldNumber;
const int CmdMPSeleteVideo::kChannelidFieldNumber;
const int CmdMPSeleteVideo::kScreenidFieldNumber;
const int CmdMPSeleteVideo::kSeleteterinfoFieldNumber;
#endif  // !_MSC_VER

CmdMPSeleteVideo::CmdMPSeleteVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSeleteVideo)
}

void CmdMPSeleteVideo::InitAsDefaultInstance() {
}

CmdMPSeleteVideo::CmdMPSeleteVideo(const CmdMPSeleteVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSeleteVideo)
}

void CmdMPSeleteVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSeleteVideo::~CmdMPSeleteVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSeleteVideo)
  SharedDtor();
}

void CmdMPSeleteVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSeleteVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSeleteVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSeleteVideo_descriptor_;
}

const CmdMPSeleteVideo& CmdMPSeleteVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSeleteVideo* CmdMPSeleteVideo::default_instance_ = NULL;

CmdMPSeleteVideo* CmdMPSeleteVideo::New() const {
  return new CmdMPSeleteVideo;
}

void CmdMPSeleteVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSeleteVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, screenid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seleteterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSeleteVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSeleteVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 5;
      case 5: {
        if (tag == 40) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seleteterinfo;
        break;
      }

      // repeated .SRMsgs.CmdMPSeleteVideo.TermInfo seleteterinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_seleteterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seleteterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seleteterinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSeleteVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSeleteVideo)
  return false;
#undef DO_
}

void CmdMPSeleteVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screenid(), output);
  }

  // repeated .SRMsgs.CmdMPSeleteVideo.TermInfo seleteterinfo = 6;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->seleteterinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSeleteVideo)
}

::google::protobuf::uint8* CmdMPSeleteVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screenid(), target);
  }

  // repeated .SRMsgs.CmdMPSeleteVideo.TermInfo seleteterinfo = 6;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->seleteterinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSeleteVideo)
  return target;
}

int CmdMPSeleteVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 5;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

  }
  // repeated .SRMsgs.CmdMPSeleteVideo.TermInfo seleteterinfo = 6;
  total_size += 1 * this->seleteterinfo_size();
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seleteterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSeleteVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSeleteVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSeleteVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSeleteVideo::MergeFrom(const CmdMPSeleteVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  seleteterinfo_.MergeFrom(from.seleteterinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSeleteVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSeleteVideo::CopyFrom(const CmdMPSeleteVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSeleteVideo::IsInitialized() const {

  return true;
}

void CmdMPSeleteVideo::Swap(CmdMPSeleteVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    seleteterinfo_.Swap(&other->seleteterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSeleteVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSeleteVideo_descriptor_;
  metadata.reflection = CmdMPSeleteVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMPSelectAssistVideo_TermInfo::kTeridFieldNumber;
const int CmdMPSelectAssistVideo_TermInfo::kChannelidFieldNumber;
const int CmdMPSelectAssistVideo_TermInfo::kRecvfmtFieldNumber;
const int CmdMPSelectAssistVideo_TermInfo::kRecvsizeFieldNumber;
const int CmdMPSelectAssistVideo_TermInfo::kRecvavtypeFieldNumber;
#endif  // !_MSC_VER

CmdMPSelectAssistVideo_TermInfo::CmdMPSelectAssistVideo_TermInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
}

void CmdMPSelectAssistVideo_TermInfo::InitAsDefaultInstance() {
}

CmdMPSelectAssistVideo_TermInfo::CmdMPSelectAssistVideo_TermInfo(const CmdMPSelectAssistVideo_TermInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
}

void CmdMPSelectAssistVideo_TermInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  channelid_ = 0u;
  recvfmt_ = 0u;
  recvsize_ = 0u;
  recvavtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSelectAssistVideo_TermInfo::~CmdMPSelectAssistVideo_TermInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  SharedDtor();
}

void CmdMPSelectAssistVideo_TermInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSelectAssistVideo_TermInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSelectAssistVideo_TermInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSelectAssistVideo_TermInfo_descriptor_;
}

const CmdMPSelectAssistVideo_TermInfo& CmdMPSelectAssistVideo_TermInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSelectAssistVideo_TermInfo* CmdMPSelectAssistVideo_TermInfo::default_instance_ = NULL;

CmdMPSelectAssistVideo_TermInfo* CmdMPSelectAssistVideo_TermInfo::New() const {
  return new CmdMPSelectAssistVideo_TermInfo;
}

void CmdMPSelectAssistVideo_TermInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSelectAssistVideo_TermInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(terid_, recvavtype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSelectAssistVideo_TermInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 2;
      case 2: {
        if (tag == 16) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recvfmt;
        break;
      }

      // optional uint32 recvfmt = 3;
      case 3: {
        if (tag == 24) {
         parse_recvfmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvfmt_)));
          set_has_recvfmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvsize;
        break;
      }

      // optional uint32 recvsize = 4;
      case 4: {
        if (tag == 32) {
         parse_recvsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvsize_)));
          set_has_recvsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_recvavtype;
        break;
      }

      // optional uint32 recvavtype = 5;
      case 5: {
        if (tag == 40) {
         parse_recvavtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvavtype_)));
          set_has_recvavtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  return false;
#undef DO_
}

void CmdMPSelectAssistVideo_TermInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 recvfmt = 3;
  if (has_recvfmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recvfmt(), output);
  }

  // optional uint32 recvsize = 4;
  if (has_recvsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recvsize(), output);
  }

  // optional uint32 recvavtype = 5;
  if (has_recvavtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recvavtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
}

::google::protobuf::uint8* CmdMPSelectAssistVideo_TermInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 channelid = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 recvfmt = 3;
  if (has_recvfmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recvfmt(), target);
  }

  // optional uint32 recvsize = 4;
  if (has_recvsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recvsize(), target);
  }

  // optional uint32 recvavtype = 5;
  if (has_recvavtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recvavtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSelectAssistVideo.TermInfo)
  return target;
}

int CmdMPSelectAssistVideo_TermInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 recvfmt = 3;
    if (has_recvfmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvfmt());
    }

    // optional uint32 recvsize = 4;
    if (has_recvsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvsize());
    }

    // optional uint32 recvavtype = 5;
    if (has_recvavtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvavtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSelectAssistVideo_TermInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSelectAssistVideo_TermInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSelectAssistVideo_TermInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSelectAssistVideo_TermInfo::MergeFrom(const CmdMPSelectAssistVideo_TermInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_recvfmt()) {
      set_recvfmt(from.recvfmt());
    }
    if (from.has_recvsize()) {
      set_recvsize(from.recvsize());
    }
    if (from.has_recvavtype()) {
      set_recvavtype(from.recvavtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSelectAssistVideo_TermInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSelectAssistVideo_TermInfo::CopyFrom(const CmdMPSelectAssistVideo_TermInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSelectAssistVideo_TermInfo::IsInitialized() const {

  return true;
}

void CmdMPSelectAssistVideo_TermInfo::Swap(CmdMPSelectAssistVideo_TermInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(recvfmt_, other->recvfmt_);
    std::swap(recvsize_, other->recvsize_);
    std::swap(recvavtype_, other->recvavtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSelectAssistVideo_TermInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSelectAssistVideo_TermInfo_descriptor_;
  metadata.reflection = CmdMPSelectAssistVideo_TermInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMPSelectAssistVideo::kConfidFieldNumber;
const int CmdMPSelectAssistVideo::kMcidFieldNumber;
const int CmdMPSelectAssistVideo::kMpidFieldNumber;
const int CmdMPSelectAssistVideo::kChannelidFieldNumber;
const int CmdMPSelectAssistVideo::kScreenidFieldNumber;
const int CmdMPSelectAssistVideo::kSelectavinfoFieldNumber;
#endif  // !_MSC_VER

CmdMPSelectAssistVideo::CmdMPSelectAssistVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMPSelectAssistVideo)
}

void CmdMPSelectAssistVideo::InitAsDefaultInstance() {
}

CmdMPSelectAssistVideo::CmdMPSelectAssistVideo(const CmdMPSelectAssistVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMPSelectAssistVideo)
}

void CmdMPSelectAssistVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  screenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMPSelectAssistVideo::~CmdMPSelectAssistVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMPSelectAssistVideo)
  SharedDtor();
}

void CmdMPSelectAssistVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMPSelectAssistVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMPSelectAssistVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMPSelectAssistVideo_descriptor_;
}

const CmdMPSelectAssistVideo& CmdMPSelectAssistVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

CmdMPSelectAssistVideo* CmdMPSelectAssistVideo::default_instance_ = NULL;

CmdMPSelectAssistVideo* CmdMPSelectAssistVideo::New() const {
  return new CmdMPSelectAssistVideo;
}

void CmdMPSelectAssistVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMPSelectAssistVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, screenid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  selectavinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMPSelectAssistVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMPSelectAssistVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 5;
      case 5: {
        if (tag == 40) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_selectavinfo;
        break;
      }

      // repeated .SRMsgs.CmdMPSelectAssistVideo.TermInfo selectavinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_selectavinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectavinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_selectavinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMPSelectAssistVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMPSelectAssistVideo)
  return false;
#undef DO_
}

void CmdMPSelectAssistVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMPSelectAssistVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->screenid(), output);
  }

  // repeated .SRMsgs.CmdMPSelectAssistVideo.TermInfo selectavinfo = 6;
  for (int i = 0; i < this->selectavinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->selectavinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMPSelectAssistVideo)
}

::google::protobuf::uint8* CmdMPSelectAssistVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMPSelectAssistVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // optional uint32 screenid = 5;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->screenid(), target);
  }

  // repeated .SRMsgs.CmdMPSelectAssistVideo.TermInfo selectavinfo = 6;
  for (int i = 0; i < this->selectavinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->selectavinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMPSelectAssistVideo)
  return target;
}

int CmdMPSelectAssistVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 5;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

  }
  // repeated .SRMsgs.CmdMPSelectAssistVideo.TermInfo selectavinfo = 6;
  total_size += 1 * this->selectavinfo_size();
  for (int i = 0; i < this->selectavinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectavinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMPSelectAssistVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMPSelectAssistVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMPSelectAssistVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMPSelectAssistVideo::MergeFrom(const CmdMPSelectAssistVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectavinfo_.MergeFrom(from.selectavinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMPSelectAssistVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMPSelectAssistVideo::CopyFrom(const CmdMPSelectAssistVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMPSelectAssistVideo::IsInitialized() const {

  return true;
}

void CmdMPSelectAssistVideo::Swap(CmdMPSelectAssistVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    selectavinfo_.Swap(&other->selectavinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMPSelectAssistVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMPSelectAssistVideo_descriptor_;
  metadata.reflection = CmdMPSelectAssistVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPHeartBeatToMC::kMcidFieldNumber;
const int IndMPHeartBeatToMC::kMpidFieldNumber;
#endif  // !_MSC_VER

IndMPHeartBeatToMC::IndMPHeartBeatToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPHeartBeatToMC)
}

void IndMPHeartBeatToMC::InitAsDefaultInstance() {
}

IndMPHeartBeatToMC::IndMPHeartBeatToMC(const IndMPHeartBeatToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPHeartBeatToMC)
}

void IndMPHeartBeatToMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  mpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPHeartBeatToMC::~IndMPHeartBeatToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPHeartBeatToMC)
  SharedDtor();
}

void IndMPHeartBeatToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPHeartBeatToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPHeartBeatToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPHeartBeatToMC_descriptor_;
}

const IndMPHeartBeatToMC& IndMPHeartBeatToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPHeartBeatToMC* IndMPHeartBeatToMC::default_instance_ = NULL;

IndMPHeartBeatToMC* IndMPHeartBeatToMC::New() const {
  return new IndMPHeartBeatToMC;
}

void IndMPHeartBeatToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPHeartBeatToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, mpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPHeartBeatToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPHeartBeatToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPHeartBeatToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPHeartBeatToMC)
  return false;
#undef DO_
}

void IndMPHeartBeatToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 mpid = 2;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPHeartBeatToMC)
}

::google::protobuf::uint8* IndMPHeartBeatToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 mpid = 2;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPHeartBeatToMC)
  return target;
}

int IndMPHeartBeatToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 2;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPHeartBeatToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPHeartBeatToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPHeartBeatToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPHeartBeatToMC::MergeFrom(const IndMPHeartBeatToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPHeartBeatToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPHeartBeatToMC::CopyFrom(const IndMPHeartBeatToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPHeartBeatToMC::IsInitialized() const {

  return true;
}

void IndMPHeartBeatToMC::Swap(IndMPHeartBeatToMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPHeartBeatToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPHeartBeatToMC_descriptor_;
  metadata.reflection = IndMPHeartBeatToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPLayoutInfo_AutoPollInfo::kApidFieldNumber;
#endif  // !_MSC_VER

IndMPLayoutInfo_AutoPollInfo::IndMPLayoutInfo_AutoPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
}

void IndMPLayoutInfo_AutoPollInfo::InitAsDefaultInstance() {
}

IndMPLayoutInfo_AutoPollInfo::IndMPLayoutInfo_AutoPollInfo(const IndMPLayoutInfo_AutoPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
}

void IndMPLayoutInfo_AutoPollInfo::SharedCtor() {
  _cached_size_ = 0;
  apid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPLayoutInfo_AutoPollInfo::~IndMPLayoutInfo_AutoPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  SharedDtor();
}

void IndMPLayoutInfo_AutoPollInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPLayoutInfo_AutoPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPLayoutInfo_AutoPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPLayoutInfo_AutoPollInfo_descriptor_;
}

const IndMPLayoutInfo_AutoPollInfo& IndMPLayoutInfo_AutoPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPLayoutInfo_AutoPollInfo* IndMPLayoutInfo_AutoPollInfo::default_instance_ = NULL;

IndMPLayoutInfo_AutoPollInfo* IndMPLayoutInfo_AutoPollInfo::New() const {
  return new IndMPLayoutInfo_AutoPollInfo;
}

void IndMPLayoutInfo_AutoPollInfo::Clear() {
  apid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPLayoutInfo_AutoPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apid_)));
          set_has_apid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  return false;
#undef DO_
}

void IndMPLayoutInfo_AutoPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
}

::google::protobuf::uint8* IndMPLayoutInfo_AutoPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPLayoutInfo.AutoPollInfo)
  return target;
}

int IndMPLayoutInfo_AutoPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apid = 1;
    if (has_apid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPLayoutInfo_AutoPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPLayoutInfo_AutoPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPLayoutInfo_AutoPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPLayoutInfo_AutoPollInfo::MergeFrom(const IndMPLayoutInfo_AutoPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apid()) {
      set_apid(from.apid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPLayoutInfo_AutoPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPLayoutInfo_AutoPollInfo::CopyFrom(const IndMPLayoutInfo_AutoPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPLayoutInfo_AutoPollInfo::IsInitialized() const {

  return true;
}

void IndMPLayoutInfo_AutoPollInfo::Swap(IndMPLayoutInfo_AutoPollInfo* other) {
  if (other != this) {
    std::swap(apid_, other->apid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPLayoutInfo_AutoPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPLayoutInfo_AutoPollInfo_descriptor_;
  metadata.reflection = IndMPLayoutInfo_AutoPollInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPLayoutInfo_PaneInfo::kPaneindexFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kContenttypeFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kOptypeFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kPolltimeFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kTeridFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kChannelidFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kTernameFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kVsrcidFieldNumber;
const int IndMPLayoutInfo_PaneInfo::kAutopolllistFieldNumber;
#endif  // !_MSC_VER

IndMPLayoutInfo_PaneInfo::IndMPLayoutInfo_PaneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPLayoutInfo.PaneInfo)
}

void IndMPLayoutInfo_PaneInfo::InitAsDefaultInstance() {
}

IndMPLayoutInfo_PaneInfo::IndMPLayoutInfo_PaneInfo(const IndMPLayoutInfo_PaneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPLayoutInfo.PaneInfo)
}

void IndMPLayoutInfo_PaneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  paneindex_ = 0u;
  contenttype_ = 0u;
  optype_ = 0u;
  polltime_ = 0u;
  terid_ = 0u;
  channelid_ = 0u;
  tername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vsrcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPLayoutInfo_PaneInfo::~IndMPLayoutInfo_PaneInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPLayoutInfo.PaneInfo)
  SharedDtor();
}

void IndMPLayoutInfo_PaneInfo::SharedDtor() {
  if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tername_;
  }
  if (this != default_instance_) {
  }
}

void IndMPLayoutInfo_PaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPLayoutInfo_PaneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPLayoutInfo_PaneInfo_descriptor_;
}

const IndMPLayoutInfo_PaneInfo& IndMPLayoutInfo_PaneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPLayoutInfo_PaneInfo* IndMPLayoutInfo_PaneInfo::default_instance_ = NULL;

IndMPLayoutInfo_PaneInfo* IndMPLayoutInfo_PaneInfo::New() const {
  return new IndMPLayoutInfo_PaneInfo;
}

void IndMPLayoutInfo_PaneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPLayoutInfo_PaneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(paneindex_, channelid_);
    if (has_tername()) {
      if (tername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tername_->clear();
      }
    }
    vsrcid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  autopolllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPLayoutInfo_PaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPLayoutInfo.PaneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 paneindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paneindex_)));
          set_has_paneindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contenttype;
        break;
      }

      // optional uint32 contenttype = 2;
      case 2: {
        if (tag == 16) {
         parse_contenttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 3;
      case 3: {
        if (tag == 24) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_polltime;
        break;
      }

      // optional uint32 polltime = 4;
      case 4: {
        if (tag == 32) {
         parse_polltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &polltime_)));
          set_has_polltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_terid;
        break;
      }

      // optional uint32 terid = 5;
      case 5: {
        if (tag == 40) {
         parse_terid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 6;
      case 6: {
        if (tag == 48) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tername;
        break;
      }

      // optional string tername = 7;
      case 7: {
        if (tag == 58) {
         parse_tername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tername().data(), this->tername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vsrcid;
        break;
      }

      // optional sint32 vsrcid = 8;
      case 8: {
        if (tag == 64) {
         parse_vsrcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &vsrcid_)));
          set_has_vsrcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_autopolllist;
        break;
      }

      // repeated .SRMsgs.IndMPLayoutInfo.AutoPollInfo autopolllist = 9;
      case 9: {
        if (tag == 74) {
         parse_autopolllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autopolllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_autopolllist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPLayoutInfo.PaneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPLayoutInfo.PaneInfo)
  return false;
#undef DO_
}

void IndMPLayoutInfo_PaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPLayoutInfo.PaneInfo)
  // optional uint32 paneindex = 1;
  if (has_paneindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paneindex(), output);
  }

  // optional uint32 contenttype = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contenttype(), output);
  }

  // optional uint32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optype(), output);
  }

  // optional uint32 polltime = 4;
  if (has_polltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->polltime(), output);
  }

  // optional uint32 terid = 5;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->terid(), output);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channelid(), output);
  }

  // optional string tername = 7;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tername(), output);
  }

  // optional sint32 vsrcid = 8;
  if (has_vsrcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->vsrcid(), output);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.AutoPollInfo autopolllist = 9;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->autopolllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPLayoutInfo.PaneInfo)
}

::google::protobuf::uint8* IndMPLayoutInfo_PaneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPLayoutInfo.PaneInfo)
  // optional uint32 paneindex = 1;
  if (has_paneindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paneindex(), target);
  }

  // optional uint32 contenttype = 2;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contenttype(), target);
  }

  // optional uint32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optype(), target);
  }

  // optional uint32 polltime = 4;
  if (has_polltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->polltime(), target);
  }

  // optional uint32 terid = 5;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->terid(), target);
  }

  // optional uint32 channelid = 6;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelid(), target);
  }

  // optional string tername = 7;
  if (has_tername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tername().data(), this->tername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tername(), target);
  }

  // optional sint32 vsrcid = 8;
  if (has_vsrcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->vsrcid(), target);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.AutoPollInfo autopolllist = 9;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->autopolllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPLayoutInfo.PaneInfo)
  return target;
}

int IndMPLayoutInfo_PaneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 paneindex = 1;
    if (has_paneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paneindex());
    }

    // optional uint32 contenttype = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contenttype());
    }

    // optional uint32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint32 polltime = 4;
    if (has_polltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->polltime());
    }

    // optional uint32 terid = 5;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 channelid = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional string tername = 7;
    if (has_tername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tername());
    }

    // optional sint32 vsrcid = 8;
    if (has_vsrcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->vsrcid());
    }

  }
  // repeated .SRMsgs.IndMPLayoutInfo.AutoPollInfo autopolllist = 9;
  total_size += 1 * this->autopolllist_size();
  for (int i = 0; i < this->autopolllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autopolllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPLayoutInfo_PaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPLayoutInfo_PaneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPLayoutInfo_PaneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPLayoutInfo_PaneInfo::MergeFrom(const IndMPLayoutInfo_PaneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  autopolllist_.MergeFrom(from.autopolllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paneindex()) {
      set_paneindex(from.paneindex());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_polltime()) {
      set_polltime(from.polltime());
    }
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_tername()) {
      set_tername(from.tername());
    }
    if (from.has_vsrcid()) {
      set_vsrcid(from.vsrcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPLayoutInfo_PaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPLayoutInfo_PaneInfo::CopyFrom(const IndMPLayoutInfo_PaneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPLayoutInfo_PaneInfo::IsInitialized() const {

  return true;
}

void IndMPLayoutInfo_PaneInfo::Swap(IndMPLayoutInfo_PaneInfo* other) {
  if (other != this) {
    std::swap(paneindex_, other->paneindex_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(optype_, other->optype_);
    std::swap(polltime_, other->polltime_);
    std::swap(terid_, other->terid_);
    std::swap(channelid_, other->channelid_);
    std::swap(tername_, other->tername_);
    std::swap(vsrcid_, other->vsrcid_);
    autopolllist_.Swap(&other->autopolllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPLayoutInfo_PaneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPLayoutInfo_PaneInfo_descriptor_;
  metadata.reflection = IndMPLayoutInfo_PaneInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPLayoutInfo_LayoutInfo::kScreenidFieldNumber;
const int IndMPLayoutInfo_LayoutInfo::kScreentypeFieldNumber;
const int IndMPLayoutInfo_LayoutInfo::kLayoutmodeFieldNumber;
const int IndMPLayoutInfo_LayoutInfo::kPanesFieldNumber;
const int IndMPLayoutInfo_LayoutInfo::kChairfollowFieldNumber;
#endif  // !_MSC_VER

IndMPLayoutInfo_LayoutInfo::IndMPLayoutInfo_LayoutInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPLayoutInfo.LayoutInfo)
}

void IndMPLayoutInfo_LayoutInfo::InitAsDefaultInstance() {
}

IndMPLayoutInfo_LayoutInfo::IndMPLayoutInfo_LayoutInfo(const IndMPLayoutInfo_LayoutInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPLayoutInfo.LayoutInfo)
}

void IndMPLayoutInfo_LayoutInfo::SharedCtor() {
  _cached_size_ = 0;
  screenid_ = 0u;
  screentype_ = 0u;
  layoutmode_ = 0u;
  chairfollow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPLayoutInfo_LayoutInfo::~IndMPLayoutInfo_LayoutInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  SharedDtor();
}

void IndMPLayoutInfo_LayoutInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPLayoutInfo_LayoutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPLayoutInfo_LayoutInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPLayoutInfo_LayoutInfo_descriptor_;
}

const IndMPLayoutInfo_LayoutInfo& IndMPLayoutInfo_LayoutInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPLayoutInfo_LayoutInfo* IndMPLayoutInfo_LayoutInfo::default_instance_ = NULL;

IndMPLayoutInfo_LayoutInfo* IndMPLayoutInfo_LayoutInfo::New() const {
  return new IndMPLayoutInfo_LayoutInfo;
}

void IndMPLayoutInfo_LayoutInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPLayoutInfo_LayoutInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(screenid_, screentype_);
  ZR_(layoutmode_, chairfollow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  panes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPLayoutInfo_LayoutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 screenid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 2;
      case 2: {
        if (tag == 16) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_layoutmode;
        break;
      }

      // optional uint32 layoutmode = 3;
      case 3: {
        if (tag == 24) {
         parse_layoutmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layoutmode_)));
          set_has_layoutmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_panes;
        break;
      }

      // repeated .SRMsgs.IndMPLayoutInfo.PaneInfo panes = 4;
      case 4: {
        if (tag == 34) {
         parse_panes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_panes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_panes;
        if (input->ExpectTag(40)) goto parse_chairfollow;
        break;
      }

      // optional uint32 chairfollow = 5;
      case 5: {
        if (tag == 40) {
         parse_chairfollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairfollow_)));
          set_has_chairfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  return false;
#undef DO_
}

void IndMPLayoutInfo_LayoutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->screenid(), output);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screentype(), output);
  }

  // optional uint32 layoutmode = 3;
  if (has_layoutmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layoutmode(), output);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.PaneInfo panes = 4;
  for (int i = 0; i < this->panes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->panes(i), output);
  }

  // optional uint32 chairfollow = 5;
  if (has_chairfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chairfollow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPLayoutInfo.LayoutInfo)
}

::google::protobuf::uint8* IndMPLayoutInfo_LayoutInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->screenid(), target);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screentype(), target);
  }

  // optional uint32 layoutmode = 3;
  if (has_layoutmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->layoutmode(), target);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.PaneInfo panes = 4;
  for (int i = 0; i < this->panes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->panes(i), target);
  }

  // optional uint32 chairfollow = 5;
  if (has_chairfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chairfollow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPLayoutInfo.LayoutInfo)
  return target;
}

int IndMPLayoutInfo_LayoutInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 screenid = 1;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 2;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 layoutmode = 3;
    if (has_layoutmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layoutmode());
    }

    // optional uint32 chairfollow = 5;
    if (has_chairfollow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairfollow());
    }

  }
  // repeated .SRMsgs.IndMPLayoutInfo.PaneInfo panes = 4;
  total_size += 1 * this->panes_size();
  for (int i = 0; i < this->panes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->panes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPLayoutInfo_LayoutInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPLayoutInfo_LayoutInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPLayoutInfo_LayoutInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPLayoutInfo_LayoutInfo::MergeFrom(const IndMPLayoutInfo_LayoutInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  panes_.MergeFrom(from.panes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_layoutmode()) {
      set_layoutmode(from.layoutmode());
    }
    if (from.has_chairfollow()) {
      set_chairfollow(from.chairfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPLayoutInfo_LayoutInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPLayoutInfo_LayoutInfo::CopyFrom(const IndMPLayoutInfo_LayoutInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPLayoutInfo_LayoutInfo::IsInitialized() const {

  return true;
}

void IndMPLayoutInfo_LayoutInfo::Swap(IndMPLayoutInfo_LayoutInfo* other) {
  if (other != this) {
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(layoutmode_, other->layoutmode_);
    panes_.Swap(&other->panes_);
    std::swap(chairfollow_, other->chairfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPLayoutInfo_LayoutInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPLayoutInfo_LayoutInfo_descriptor_;
  metadata.reflection = IndMPLayoutInfo_LayoutInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndMPLayoutInfo::kConfidFieldNumber;
const int IndMPLayoutInfo::kMcidFieldNumber;
const int IndMPLayoutInfo::kMpidFieldNumber;
const int IndMPLayoutInfo::kChannelidFieldNumber;
const int IndMPLayoutInfo::kLayoutinfosFieldNumber;
#endif  // !_MSC_VER

IndMPLayoutInfo::IndMPLayoutInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPLayoutInfo)
}

void IndMPLayoutInfo::InitAsDefaultInstance() {
}

IndMPLayoutInfo::IndMPLayoutInfo(const IndMPLayoutInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPLayoutInfo)
}

void IndMPLayoutInfo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  mpid_ = 0u;
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPLayoutInfo::~IndMPLayoutInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPLayoutInfo)
  SharedDtor();
}

void IndMPLayoutInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPLayoutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPLayoutInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPLayoutInfo_descriptor_;
}

const IndMPLayoutInfo& IndMPLayoutInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fmp_2eproto();
  return *default_instance_;
}

IndMPLayoutInfo* IndMPLayoutInfo::default_instance_ = NULL;

IndMPLayoutInfo* IndMPLayoutInfo::New() const {
  return new IndMPLayoutInfo;
}

void IndMPLayoutInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPLayoutInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, mpid_);
    channelid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  layoutinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPLayoutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPLayoutInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mpid;
        break;
      }

      // optional uint32 mpid = 3;
      case 3: {
        if (tag == 24) {
         parse_mpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpid_)));
          set_has_mpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelid;
        break;
      }

      // optional uint32 channelid = 4;
      case 4: {
        if (tag == 32) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_layoutinfos;
        break;
      }

      // repeated .SRMsgs.IndMPLayoutInfo.LayoutInfo layoutinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_layoutinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layoutinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_layoutinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPLayoutInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPLayoutInfo)
  return false;
#undef DO_
}

void IndMPLayoutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPLayoutInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mpid(), output);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.LayoutInfo layoutinfos = 5;
  for (int i = 0; i < this->layoutinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->layoutinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPLayoutInfo)
}

::google::protobuf::uint8* IndMPLayoutInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPLayoutInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 mpid = 3;
  if (has_mpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mpid(), target);
  }

  // optional uint32 channelid = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // repeated .SRMsgs.IndMPLayoutInfo.LayoutInfo layoutinfos = 5;
  for (int i = 0; i < this->layoutinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->layoutinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPLayoutInfo)
  return target;
}

int IndMPLayoutInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 mpid = 3;
    if (has_mpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpid());
    }

    // optional uint32 channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  // repeated .SRMsgs.IndMPLayoutInfo.LayoutInfo layoutinfos = 5;
  total_size += 1 * this->layoutinfos_size();
  for (int i = 0; i < this->layoutinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layoutinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPLayoutInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPLayoutInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPLayoutInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPLayoutInfo::MergeFrom(const IndMPLayoutInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  layoutinfos_.MergeFrom(from.layoutinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_mpid()) {
      set_mpid(from.mpid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPLayoutInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPLayoutInfo::CopyFrom(const IndMPLayoutInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPLayoutInfo::IsInitialized() const {

  return true;
}

void IndMPLayoutInfo::Swap(IndMPLayoutInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(mpid_, other->mpid_);
    std::swap(channelid_, other->channelid_);
    layoutinfos_.Swap(&other->layoutinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPLayoutInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPLayoutInfo_descriptor_;
  metadata.reflection = IndMPLayoutInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
