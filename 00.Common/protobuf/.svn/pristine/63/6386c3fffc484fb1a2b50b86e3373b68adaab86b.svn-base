// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_vas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mc_vas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* ReqVASCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVASCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqVASCreateConf_NetMpAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqVASCreateConf_NetMpAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASDestroyConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASDestroyConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASStartAnaly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASStartAnaly_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASStartAnaly_AnalyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASStartAnaly_AnalyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASStopAnaly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASStopAnaly_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASStopAnaly_AnalyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASStopAnaly_AnalyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASUpdateAnaly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASUpdateAnaly_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASUpdateAnaly_AnalyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASUpdateAnaly_AnalyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdVASReOpenNetMPMediaPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdVASReOpenNetMPMediaPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCHeartBeatToVAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCHeartBeatToVAS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToVAS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToVAS_ScreensInMPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndConfAllMPIInfoToVAS_MPIsInConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMPIInfoToVAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMPIInfoToVAS_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndScreenInfoToVAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndScreenInfoToVAS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspVASCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspVASCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASHeartBeatToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASHeartBeatToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASMatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASMatchResult_videoMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASMatchResult_videoMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASMatchResult_MatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASMatchResult_MatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMCVASSeleteVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMCVASSeleteVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdMCVASSeleteVideo_TermInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdMCVASSeleteVideo_TermInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mc_5fvas_2eproto() {
  protobuf_AddDesc_mc_5fvas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mc_vas.proto");
  GOOGLE_CHECK(file != NULL);
  ReqVASCreateConf_descriptor_ = file->message_type(0);
  static const int ReqVASCreateConf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, netmpaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, vaschantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, videosize_),
  };
  ReqVASCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqVASCreateConf_descriptor_,
      ReqVASCreateConf::default_instance_,
      ReqVASCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqVASCreateConf));
  ReqVASCreateConf_NetMpAddr_descriptor_ = ReqVASCreateConf_descriptor_->nested_type(0);
  static const int ReqVASCreateConf_NetMpAddr_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, netmpmediaip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, desktopctrlrecvport_),
  };
  ReqVASCreateConf_NetMpAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqVASCreateConf_NetMpAddr_descriptor_,
      ReqVASCreateConf_NetMpAddr::default_instance_,
      ReqVASCreateConf_NetMpAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqVASCreateConf_NetMpAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqVASCreateConf_NetMpAddr));
  CmdVASDestroyConf_descriptor_ = file->message_type(1);
  static const int CmdVASDestroyConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, reason_),
  };
  CmdVASDestroyConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASDestroyConf_descriptor_,
      CmdVASDestroyConf::default_instance_,
      CmdVASDestroyConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASDestroyConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASDestroyConf));
  CmdVASStartAnaly_descriptor_ = file->message_type(2);
  static const int CmdVASStartAnaly_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, analyinfos_),
  };
  CmdVASStartAnaly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASStartAnaly_descriptor_,
      CmdVASStartAnaly::default_instance_,
      CmdVASStartAnaly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASStartAnaly));
  CmdVASStartAnaly_AnalyInfo_descriptor_ = CmdVASStartAnaly_descriptor_->nested_type(0);
  static const int CmdVASStartAnaly_AnalyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, srcmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, userids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, isdispmnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, isdispmname_),
  };
  CmdVASStartAnaly_AnalyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASStartAnaly_AnalyInfo_descriptor_,
      CmdVASStartAnaly_AnalyInfo::default_instance_,
      CmdVASStartAnaly_AnalyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStartAnaly_AnalyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASStartAnaly_AnalyInfo));
  CmdVASStopAnaly_descriptor_ = file->message_type(3);
  static const int CmdVASStopAnaly_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, analyinfos_),
  };
  CmdVASStopAnaly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASStopAnaly_descriptor_,
      CmdVASStopAnaly::default_instance_,
      CmdVASStopAnaly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASStopAnaly));
  CmdVASStopAnaly_AnalyInfo_descriptor_ = CmdVASStopAnaly_descriptor_->nested_type(0);
  static const int CmdVASStopAnaly_AnalyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, srcmapid_),
  };
  CmdVASStopAnaly_AnalyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASStopAnaly_AnalyInfo_descriptor_,
      CmdVASStopAnaly_AnalyInfo::default_instance_,
      CmdVASStopAnaly_AnalyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASStopAnaly_AnalyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASStopAnaly_AnalyInfo));
  CmdVASUpdateAnaly_descriptor_ = file->message_type(4);
  static const int CmdVASUpdateAnaly_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, analyinfos_),
  };
  CmdVASUpdateAnaly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASUpdateAnaly_descriptor_,
      CmdVASUpdateAnaly::default_instance_,
      CmdVASUpdateAnaly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASUpdateAnaly));
  CmdVASUpdateAnaly_AnalyInfo_descriptor_ = CmdVASUpdateAnaly_descriptor_->nested_type(0);
  static const int CmdVASUpdateAnaly_AnalyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, srcmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, newuserids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, isdispmnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, isdispmname_),
  };
  CmdVASUpdateAnaly_AnalyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASUpdateAnaly_AnalyInfo_descriptor_,
      CmdVASUpdateAnaly_AnalyInfo::default_instance_,
      CmdVASUpdateAnaly_AnalyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASUpdateAnaly_AnalyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASUpdateAnaly_AnalyInfo));
  CmdVASReOpenNetMPMediaPort_descriptor_ = file->message_type(5);
  static const int CmdVASReOpenNetMPMediaPort_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, netmpip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, audiodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, audioctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, videodatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, videoctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, video2datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, video2ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, video3datarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, video3ctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, desktopdatarecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, desktopctrlrecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, vaschannelid_),
  };
  CmdVASReOpenNetMPMediaPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdVASReOpenNetMPMediaPort_descriptor_,
      CmdVASReOpenNetMPMediaPort::default_instance_,
      CmdVASReOpenNetMPMediaPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdVASReOpenNetMPMediaPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdVASReOpenNetMPMediaPort));
  IndMCHeartBeatToVAS_descriptor_ = file->message_type(6);
  static const int IndMCHeartBeatToVAS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToVAS, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToVAS, vasid_),
  };
  IndMCHeartBeatToVAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCHeartBeatToVAS_descriptor_,
      IndMCHeartBeatToVAS::default_instance_,
      IndMCHeartBeatToVAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToVAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCHeartBeatToVAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCHeartBeatToVAS));
  IndConfAllMPIInfoToVAS_descriptor_ = file->message_type(7);
  static const int IndConfAllMPIInfoToVAS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, mpis_),
  };
  IndConfAllMPIInfoToVAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToVAS_descriptor_,
      IndConfAllMPIInfoToVAS::default_instance_,
      IndConfAllMPIInfoToVAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToVAS));
  IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_ = IndConfAllMPIInfoToVAS_descriptor_->nested_type(0);
  static const int IndConfAllMPIInfoToVAS_ScreensInMPI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_ScreensInMPI, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_ScreensInMPI, screentype_),
  };
  IndConfAllMPIInfoToVAS_ScreensInMPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_,
      IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance_,
      IndConfAllMPIInfoToVAS_ScreensInMPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_ScreensInMPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_ScreensInMPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToVAS_ScreensInMPI));
  IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_ = IndConfAllMPIInfoToVAS_descriptor_->nested_type(1);
  static const int IndConfAllMPIInfoToVAS_MPIsInConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_MPIsInConf, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_MPIsInConf, screens_),
  };
  IndConfAllMPIInfoToVAS_MPIsInConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_,
      IndConfAllMPIInfoToVAS_MPIsInConf::default_instance_,
      IndConfAllMPIInfoToVAS_MPIsInConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_MPIsInConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndConfAllMPIInfoToVAS_MPIsInConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndConfAllMPIInfoToVAS_MPIsInConf));
  IndMPIInfoToVAS_descriptor_ = file->message_type(8);
  static const int IndMPIInfoToVAS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, vasid_),
  };
  IndMPIInfoToVAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMPIInfoToVAS_descriptor_,
      IndMPIInfoToVAS::default_instance_,
      IndMPIInfoToVAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMPIInfoToVAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMPIInfoToVAS));
  IndScreenInfoToVAS_descriptor_ = file->message_type(9);
  static const int IndScreenInfoToVAS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, mpichannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, screentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, vasid_),
  };
  IndScreenInfoToVAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndScreenInfoToVAS_descriptor_,
      IndScreenInfoToVAS::default_instance_,
      IndScreenInfoToVAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndScreenInfoToVAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndScreenInfoToVAS));
  RspVASCreateConf_descriptor_ = file->message_type(10);
  static const int RspVASCreateConf_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, relatednetmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, vaschantype_),
  };
  RspVASCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspVASCreateConf_descriptor_,
      RspVASCreateConf::default_instance_,
      RspVASCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspVASCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspVASCreateConf));
  IndVASHeartBeatToMC_descriptor_ = file->message_type(11);
  static const int IndVASHeartBeatToMC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASHeartBeatToMC, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASHeartBeatToMC, vasid_),
  };
  IndVASHeartBeatToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASHeartBeatToMC_descriptor_,
      IndVASHeartBeatToMC::default_instance_,
      IndVASHeartBeatToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASHeartBeatToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASHeartBeatToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASHeartBeatToMC));
  IndVASMatchResult_descriptor_ = file->message_type(12);
  static const int IndVASMatchResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, matchresults_),
  };
  IndVASMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASMatchResult_descriptor_,
      IndVASMatchResult::default_instance_,
      IndVASMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASMatchResult));
  IndVASMatchResult_videoMatch_descriptor_ = IndVASMatchResult_descriptor_->nested_type(0);
  static const int IndVASMatchResult_videoMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_videoMatch, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_videoMatch, rate_),
  };
  IndVASMatchResult_videoMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASMatchResult_videoMatch_descriptor_,
      IndVASMatchResult_videoMatch::default_instance_,
      IndVASMatchResult_videoMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_videoMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_videoMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASMatchResult_videoMatch));
  IndVASMatchResult_MatchResult_descriptor_ = IndVASMatchResult_descriptor_->nested_type(1);
  static const int IndVASMatchResult_MatchResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, srcmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, videomatchs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, hasmismatch_),
  };
  IndVASMatchResult_MatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASMatchResult_MatchResult_descriptor_,
      IndVASMatchResult_MatchResult::default_instance_,
      IndVASMatchResult_MatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASMatchResult_MatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASMatchResult_MatchResult));
  CmdMCVASSeleteVideo_descriptor_ = file->message_type(13);
  static const int CmdMCVASSeleteVideo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, vasid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, vaschannelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, seleteterinfo_),
  };
  CmdMCVASSeleteVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMCVASSeleteVideo_descriptor_,
      CmdMCVASSeleteVideo::default_instance_,
      CmdMCVASSeleteVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMCVASSeleteVideo));
  CmdMCVASSeleteVideo_TermInfo_descriptor_ = CmdMCVASSeleteVideo_descriptor_->nested_type(0);
  static const int CmdMCVASSeleteVideo_TermInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, terid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, videosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, recvfps_),
  };
  CmdMCVASSeleteVideo_TermInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdMCVASSeleteVideo_TermInfo_descriptor_,
      CmdMCVASSeleteVideo_TermInfo::default_instance_,
      CmdMCVASSeleteVideo_TermInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdMCVASSeleteVideo_TermInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdMCVASSeleteVideo_TermInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mc_5fvas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqVASCreateConf_descriptor_, &ReqVASCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqVASCreateConf_NetMpAddr_descriptor_, &ReqVASCreateConf_NetMpAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASDestroyConf_descriptor_, &CmdVASDestroyConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASStartAnaly_descriptor_, &CmdVASStartAnaly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASStartAnaly_AnalyInfo_descriptor_, &CmdVASStartAnaly_AnalyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASStopAnaly_descriptor_, &CmdVASStopAnaly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASStopAnaly_AnalyInfo_descriptor_, &CmdVASStopAnaly_AnalyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASUpdateAnaly_descriptor_, &CmdVASUpdateAnaly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASUpdateAnaly_AnalyInfo_descriptor_, &CmdVASUpdateAnaly_AnalyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdVASReOpenNetMPMediaPort_descriptor_, &CmdVASReOpenNetMPMediaPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCHeartBeatToVAS_descriptor_, &IndMCHeartBeatToVAS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToVAS_descriptor_, &IndConfAllMPIInfoToVAS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_, &IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_, &IndConfAllMPIInfoToVAS_MPIsInConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMPIInfoToVAS_descriptor_, &IndMPIInfoToVAS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndScreenInfoToVAS_descriptor_, &IndScreenInfoToVAS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspVASCreateConf_descriptor_, &RspVASCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASHeartBeatToMC_descriptor_, &IndVASHeartBeatToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASMatchResult_descriptor_, &IndVASMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASMatchResult_videoMatch_descriptor_, &IndVASMatchResult_videoMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASMatchResult_MatchResult_descriptor_, &IndVASMatchResult_MatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMCVASSeleteVideo_descriptor_, &CmdMCVASSeleteVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdMCVASSeleteVideo_TermInfo_descriptor_, &CmdMCVASSeleteVideo_TermInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mc_5fvas_2eproto() {
  delete ReqVASCreateConf::default_instance_;
  delete ReqVASCreateConf_reflection_;
  delete ReqVASCreateConf_NetMpAddr::default_instance_;
  delete ReqVASCreateConf_NetMpAddr_reflection_;
  delete CmdVASDestroyConf::default_instance_;
  delete CmdVASDestroyConf_reflection_;
  delete CmdVASStartAnaly::default_instance_;
  delete CmdVASStartAnaly_reflection_;
  delete CmdVASStartAnaly_AnalyInfo::default_instance_;
  delete CmdVASStartAnaly_AnalyInfo_reflection_;
  delete CmdVASStopAnaly::default_instance_;
  delete CmdVASStopAnaly_reflection_;
  delete CmdVASStopAnaly_AnalyInfo::default_instance_;
  delete CmdVASStopAnaly_AnalyInfo_reflection_;
  delete CmdVASUpdateAnaly::default_instance_;
  delete CmdVASUpdateAnaly_reflection_;
  delete CmdVASUpdateAnaly_AnalyInfo::default_instance_;
  delete CmdVASUpdateAnaly_AnalyInfo_reflection_;
  delete CmdVASReOpenNetMPMediaPort::default_instance_;
  delete CmdVASReOpenNetMPMediaPort_reflection_;
  delete IndMCHeartBeatToVAS::default_instance_;
  delete IndMCHeartBeatToVAS_reflection_;
  delete IndConfAllMPIInfoToVAS::default_instance_;
  delete IndConfAllMPIInfoToVAS_reflection_;
  delete IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance_;
  delete IndConfAllMPIInfoToVAS_ScreensInMPI_reflection_;
  delete IndConfAllMPIInfoToVAS_MPIsInConf::default_instance_;
  delete IndConfAllMPIInfoToVAS_MPIsInConf_reflection_;
  delete IndMPIInfoToVAS::default_instance_;
  delete IndMPIInfoToVAS_reflection_;
  delete IndScreenInfoToVAS::default_instance_;
  delete IndScreenInfoToVAS_reflection_;
  delete RspVASCreateConf::default_instance_;
  delete RspVASCreateConf_reflection_;
  delete IndVASHeartBeatToMC::default_instance_;
  delete IndVASHeartBeatToMC_reflection_;
  delete IndVASMatchResult::default_instance_;
  delete IndVASMatchResult_reflection_;
  delete IndVASMatchResult_videoMatch::default_instance_;
  delete IndVASMatchResult_videoMatch_reflection_;
  delete IndVASMatchResult_MatchResult::default_instance_;
  delete IndVASMatchResult_MatchResult_reflection_;
  delete CmdMCVASSeleteVideo::default_instance_;
  delete CmdMCVASSeleteVideo_reflection_;
  delete CmdMCVASSeleteVideo_TermInfo::default_instance_;
  delete CmdMCVASSeleteVideo_TermInfo_reflection_;
}

void protobuf_AddDesc_mc_5fvas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mc_vas.proto\022\006SRMsgs\"\377\003\n\020ReqVASCreateC"
    "onf\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005vas"
    "id\030\003 \001(\r\022\024\n\014vaschannelid\030\004 \001(\r\0225\n\tnetmpa"
    "ddr\030\005 \001(\0132\".SRMsgs.ReqVASCreateConf.NetM"
    "pAddr\022\023\n\013vaschantype\030\006 \001(\r\022\021\n\tvideosize\030"
    "\007 \001(\r\032\310\002\n\tNetMpAddr\022\017\n\007netmpid\030\001 \001(\r\022\024\n\014"
    "netmpmediaip\030\002 \001(\t\022\031\n\021audiodatarecvport\030"
    "\003 \001(\r\022\031\n\021audioctrlrecvport\030\004 \001(\r\022\031\n\021vide"
    "odatarecvport\030\005 \001(\r\022\031\n\021videoctrlrecvport"
    "\030\006 \001(\r\022\032\n\022video2datarecvport\030\007 \001(\r\022\032\n\022vi"
    "deo2ctrlrecvport\030\010 \001(\r\022\032\n\022video3datarecv"
    "port\030\t \001(\r\022\032\n\022video3ctrlrecvport\030\n \001(\r\022\033"
    "\n\023desktopdatarecvport\030\013 \001(\r\022\033\n\023desktopct"
    "rlrecvport\030\014 \001(\r\"f\n\021CmdVASDestroyConf\022\016\n"
    "\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005vasid\030\003 \001"
    "(\r\022\024\n\014vaschannelid\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t"
    "\"\214\002\n\020CmdVASStartAnaly\022\016\n\006confid\030\001 \001(\004\022\014\n"
    "\004mcid\030\002 \001(\r\022\r\n\005vasid\030\003 \001(\r\0226\n\nanalyinfos"
    "\030\004 \003(\0132\".SRMsgs.CmdVASStartAnaly.AnalyIn"
    "fo\032\222\001\n\tAnalyInfo\022\021\n\tchannelid\030\001 \001(\r\022\020\n\010s"
    "creenid\030\002 \001(\r\022\024\n\014vaschannelid\030\003 \001(\r\022\020\n\010s"
    "rcmapid\030\004 \001(\r\022\017\n\007userids\030\005 \003(\r\022\022\n\nisdisp"
    "mnum\030\006 \001(\010\022\023\n\013isdispmname\030\007 \001(\010\"\317\001\n\017CmdV"
    "ASStopAnaly\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001("
    "\r\022\r\n\005vasid\030\003 \001(\r\0225\n\nanalyinfos\030\004 \003(\0132!.S"
    "RMsgs.CmdVASStopAnaly.AnalyInfo\032X\n\tAnaly"
    "Info\022\021\n\tchannelid\030\001 \001(\r\022\020\n\010screenid\030\002 \001("
    "\r\022\024\n\014vaschannelid\030\003 \001(\r\022\020\n\010srcmapid\030\004 \001("
    "\r\"\221\002\n\021CmdVASUpdateAnaly\022\016\n\006confid\030\001 \001(\004\022"
    "\014\n\004mcid\030\002 \001(\r\022\r\n\005vasid\030\003 \001(\r\0227\n\nanalyinf"
    "os\030\004 \003(\0132#.SRMsgs.CmdVASUpdateAnaly.Anal"
    "yInfo\032\225\001\n\tAnalyInfo\022\021\n\tchannelid\030\001 \001(\r\022\020"
    "\n\010screenid\030\002 \001(\r\022\024\n\014vaschannelid\030\003 \001(\r\022\020"
    "\n\010srcmapid\030\004 \001(\r\022\022\n\nnewuserids\030\005 \003(\r\022\022\n\n"
    "isdispmnum\030\006 \001(\010\022\023\n\013isdispmname\030\007 \001(\010\"\206\003"
    "\n\032CmdVASReOpenNetMPMediaPort\022\017\n\007netmpip\030"
    "\001 \001(\t\022\031\n\021audiodatarecvport\030\002 \001(\r\022\031\n\021audi"
    "octrlrecvport\030\003 \001(\r\022\031\n\021videodatarecvport"
    "\030\004 \001(\r\022\031\n\021videoctrlrecvport\030\005 \001(\r\022\032\n\022vid"
    "eo2datarecvport\030\006 \001(\r\022\032\n\022video2ctrlrecvp"
    "ort\030\007 \001(\r\022\032\n\022video3datarecvport\030\010 \001(\r\022\032\n"
    "\022video3ctrlrecvport\030\t \001(\r\022\033\n\023desktopdata"
    "recvport\030\n \001(\r\022\033\n\023desktopctrlrecvport\030\013 "
    "\001(\r\022\016\n\006confid\030\014 \001(\004\022\014\n\004mcid\030\r \001(\r\022\r\n\005vas"
    "id\030\016 \001(\r\022\024\n\014vaschannelid\030\017 \001(\r\"2\n\023IndMCH"
    "eartBeatToVAS\022\014\n\004mcid\030\001 \001(\r\022\r\n\005vasid\030\002 \001"
    "(\r\"\226\002\n\026IndConfAllMPIInfoToVAS\022\016\n\006confid\030"
    "\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005vasid\030\003 \001(\r\0227\n\004mp"
    "is\030\004 \003(\0132).SRMsgs.IndConfAllMPIInfoToVAS"
    ".MPIsInConf\0324\n\014ScreensInMPI\022\020\n\010screenid\030"
    "\001 \001(\r\022\022\n\nscreentype\030\002 \001(\r\032`\n\nMPIsInConf\022"
    "\024\n\014mpichannelid\030\001 \001(\r\022<\n\007screens\030\002 \003(\0132+"
    ".SRMsgs.IndConfAllMPIInfoToVAS.ScreensIn"
    "MPI\"X\n\017IndMPIInfoToVAS\022\016\n\006confid\030\001 \001(\004\022\024"
    "\n\014mpichannelid\030\002 \001(\r\022\020\n\010addordel\030\003 \001(\r\022\r"
    "\n\005vasid\030\004 \001(\r\"\201\001\n\022IndScreenInfoToVAS\022\016\n\006"
    "confid\030\001 \001(\004\022\024\n\014mpichannelid\030\002 \001(\r\022\020\n\010sc"
    "reenid\030\003 \001(\r\022\022\n\nscreentype\030\004 \001(\r\022\020\n\010addo"
    "rdel\030\005 \001(\r\022\r\n\005vasid\030\006 \001(\r\"\267\001\n\020RspVASCrea"
    "teConf\022\014\n\004isok\030\001 \001(\010\022\016\n\006confid\030\002 \001(\004\022\014\n\004"
    "mcid\030\003 \001(\r\022\r\n\005vasid\030\004 \001(\r\022\024\n\014vaschanneli"
    "d\030\005 \001(\r\022\026\n\016relatednetmpid\030\006 \001(\r\022\022\n\nfailr"
    "eason\030\007 \001(\t\022\021\n\terrorcode\030\010 \001(\r\022\023\n\013vascha"
    "ntype\030\t \001(\r\"2\n\023IndVASHeartBeatToMC\022\014\n\004mc"
    "id\030\001 \001(\r\022\r\n\005vasid\030\002 \001(\r\"\326\002\n\021IndVASMatchR"
    "esult\022\016\n\006confid\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005v"
    "asid\030\003 \001(\r\022;\n\014matchresults\030\004 \003(\0132%.SRMsg"
    "s.IndVASMatchResult.MatchResult\032*\n\nvideo"
    "Match\022\016\n\006userid\030\001 \001(\r\022\014\n\004rate\030\002 \001(\r\032\252\001\n\013"
    "MatchResult\022\021\n\tchannelid\030\001 \001(\r\022\020\n\010screen"
    "id\030\002 \001(\r\022\024\n\014vaschannelid\030\003 \001(\r\022\020\n\010srcmap"
    "id\030\004 \001(\r\0229\n\013videoMatchs\030\005 \003(\0132$.SRMsgs.I"
    "ndVASMatchResult.videoMatch\022\023\n\013hasmismat"
    "ch\030\006 \001(\010\"\346\001\n\023CmdMCVASSeleteVideo\022\016\n\006conf"
    "id\030\001 \001(\004\022\014\n\004mcid\030\002 \001(\r\022\r\n\005vasid\030\003 \001(\r\022\024\n"
    "\014vaschannelid\030\004 \001(\r\022;\n\rseleteterinfo\030\005 \003"
    "(\0132$.SRMsgs.CmdMCVASSeleteVideo.TermInfo"
    "\032O\n\010TermInfo\022\r\n\005terid\030\001 \001(\r\022\020\n\010screenid\030"
    "\002 \001(\r\022\021\n\tvideosize\030\003 \001(\r\022\017\n\007recvfps\030\004 \001("
    "\r", 3161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mc_vas.proto", &protobuf_RegisterTypes);
  ReqVASCreateConf::default_instance_ = new ReqVASCreateConf();
  ReqVASCreateConf_NetMpAddr::default_instance_ = new ReqVASCreateConf_NetMpAddr();
  CmdVASDestroyConf::default_instance_ = new CmdVASDestroyConf();
  CmdVASStartAnaly::default_instance_ = new CmdVASStartAnaly();
  CmdVASStartAnaly_AnalyInfo::default_instance_ = new CmdVASStartAnaly_AnalyInfo();
  CmdVASStopAnaly::default_instance_ = new CmdVASStopAnaly();
  CmdVASStopAnaly_AnalyInfo::default_instance_ = new CmdVASStopAnaly_AnalyInfo();
  CmdVASUpdateAnaly::default_instance_ = new CmdVASUpdateAnaly();
  CmdVASUpdateAnaly_AnalyInfo::default_instance_ = new CmdVASUpdateAnaly_AnalyInfo();
  CmdVASReOpenNetMPMediaPort::default_instance_ = new CmdVASReOpenNetMPMediaPort();
  IndMCHeartBeatToVAS::default_instance_ = new IndMCHeartBeatToVAS();
  IndConfAllMPIInfoToVAS::default_instance_ = new IndConfAllMPIInfoToVAS();
  IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance_ = new IndConfAllMPIInfoToVAS_ScreensInMPI();
  IndConfAllMPIInfoToVAS_MPIsInConf::default_instance_ = new IndConfAllMPIInfoToVAS_MPIsInConf();
  IndMPIInfoToVAS::default_instance_ = new IndMPIInfoToVAS();
  IndScreenInfoToVAS::default_instance_ = new IndScreenInfoToVAS();
  RspVASCreateConf::default_instance_ = new RspVASCreateConf();
  IndVASHeartBeatToMC::default_instance_ = new IndVASHeartBeatToMC();
  IndVASMatchResult::default_instance_ = new IndVASMatchResult();
  IndVASMatchResult_videoMatch::default_instance_ = new IndVASMatchResult_videoMatch();
  IndVASMatchResult_MatchResult::default_instance_ = new IndVASMatchResult_MatchResult();
  CmdMCVASSeleteVideo::default_instance_ = new CmdMCVASSeleteVideo();
  CmdMCVASSeleteVideo_TermInfo::default_instance_ = new CmdMCVASSeleteVideo_TermInfo();
  ReqVASCreateConf::default_instance_->InitAsDefaultInstance();
  ReqVASCreateConf_NetMpAddr::default_instance_->InitAsDefaultInstance();
  CmdVASDestroyConf::default_instance_->InitAsDefaultInstance();
  CmdVASStartAnaly::default_instance_->InitAsDefaultInstance();
  CmdVASStartAnaly_AnalyInfo::default_instance_->InitAsDefaultInstance();
  CmdVASStopAnaly::default_instance_->InitAsDefaultInstance();
  CmdVASStopAnaly_AnalyInfo::default_instance_->InitAsDefaultInstance();
  CmdVASUpdateAnaly::default_instance_->InitAsDefaultInstance();
  CmdVASUpdateAnaly_AnalyInfo::default_instance_->InitAsDefaultInstance();
  CmdVASReOpenNetMPMediaPort::default_instance_->InitAsDefaultInstance();
  IndMCHeartBeatToVAS::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToVAS::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance_->InitAsDefaultInstance();
  IndConfAllMPIInfoToVAS_MPIsInConf::default_instance_->InitAsDefaultInstance();
  IndMPIInfoToVAS::default_instance_->InitAsDefaultInstance();
  IndScreenInfoToVAS::default_instance_->InitAsDefaultInstance();
  RspVASCreateConf::default_instance_->InitAsDefaultInstance();
  IndVASHeartBeatToMC::default_instance_->InitAsDefaultInstance();
  IndVASMatchResult::default_instance_->InitAsDefaultInstance();
  IndVASMatchResult_videoMatch::default_instance_->InitAsDefaultInstance();
  IndVASMatchResult_MatchResult::default_instance_->InitAsDefaultInstance();
  CmdMCVASSeleteVideo::default_instance_->InitAsDefaultInstance();
  CmdMCVASSeleteVideo_TermInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mc_5fvas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mc_5fvas_2eproto {
  StaticDescriptorInitializer_mc_5fvas_2eproto() {
    protobuf_AddDesc_mc_5fvas_2eproto();
  }
} static_descriptor_initializer_mc_5fvas_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqVASCreateConf_NetMpAddr::kNetmpidFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kNetmpmediaipFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kAudiodatarecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kAudioctrlrecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideodatarecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideoctrlrecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideo2DatarecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideo2CtrlrecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideo3DatarecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kVideo3CtrlrecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kDesktopdatarecvportFieldNumber;
const int ReqVASCreateConf_NetMpAddr::kDesktopctrlrecvportFieldNumber;
#endif  // !_MSC_VER

ReqVASCreateConf_NetMpAddr::ReqVASCreateConf_NetMpAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqVASCreateConf.NetMpAddr)
}

void ReqVASCreateConf_NetMpAddr::InitAsDefaultInstance() {
}

ReqVASCreateConf_NetMpAddr::ReqVASCreateConf_NetMpAddr(const ReqVASCreateConf_NetMpAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqVASCreateConf.NetMpAddr)
}

void ReqVASCreateConf_NetMpAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpid_ = 0u;
  netmpmediaip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqVASCreateConf_NetMpAddr::~ReqVASCreateConf_NetMpAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqVASCreateConf.NetMpAddr)
  SharedDtor();
}

void ReqVASCreateConf_NetMpAddr::SharedDtor() {
  if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpmediaip_;
  }
  if (this != default_instance_) {
  }
}

void ReqVASCreateConf_NetMpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVASCreateConf_NetMpAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVASCreateConf_NetMpAddr_descriptor_;
}

const ReqVASCreateConf_NetMpAddr& ReqVASCreateConf_NetMpAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

ReqVASCreateConf_NetMpAddr* ReqVASCreateConf_NetMpAddr::default_instance_ = NULL;

ReqVASCreateConf_NetMpAddr* ReqVASCreateConf_NetMpAddr::New() const {
  return new ReqVASCreateConf_NetMpAddr;
}

void ReqVASCreateConf_NetMpAddr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqVASCreateConf_NetMpAddr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(netmpid_, video2ctrlrecvport_);
    if (has_netmpmediaip()) {
      if (netmpmediaip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpmediaip_->clear();
      }
    }
  }
  ZR_(video3datarecvport_, desktopctrlrecvport_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqVASCreateConf_NetMpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqVASCreateConf.NetMpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 netmpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_netmpmediaip;
        break;
      }

      // optional string netmpmediaip = 2;
      case 2: {
        if (tag == 18) {
         parse_netmpmediaip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpmediaip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpmediaip().data(), this->netmpmediaip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpmediaip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 12;
      case 12: {
        if (tag == 96) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqVASCreateConf.NetMpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqVASCreateConf.NetMpAddr)
  return false;
#undef DO_
}

void ReqVASCreateConf_NetMpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqVASCreateConf.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->netmpid(), output);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->netmpmediaip(), output);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->desktopctrlrecvport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqVASCreateConf.NetMpAddr)
}

::google::protobuf::uint8* ReqVASCreateConf_NetMpAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqVASCreateConf.NetMpAddr)
  // optional uint32 netmpid = 1;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->netmpid(), target);
  }

  // optional string netmpmediaip = 2;
  if (has_netmpmediaip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpmediaip().data(), this->netmpmediaip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpmediaip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->netmpmediaip(), target);
  }

  // optional uint32 audiodatarecvport = 3;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 4;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 5;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 6;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 7;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 8;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 9;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 10;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 11;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 12;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->desktopctrlrecvport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqVASCreateConf.NetMpAddr)
  return target;
}

int ReqVASCreateConf_NetMpAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 netmpid = 1;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional string netmpmediaip = 2;
    if (has_netmpmediaip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpmediaip());
    }

    // optional uint32 audiodatarecvport = 3;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 4;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 5;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 6;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 7;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 8;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3datarecvport = 9;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

    // optional uint32 video3ctrlrecvport = 10;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 11;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 12;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVASCreateConf_NetMpAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqVASCreateConf_NetMpAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqVASCreateConf_NetMpAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqVASCreateConf_NetMpAddr::MergeFrom(const ReqVASCreateConf_NetMpAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_netmpmediaip()) {
      set_netmpmediaip(from.netmpmediaip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqVASCreateConf_NetMpAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVASCreateConf_NetMpAddr::CopyFrom(const ReqVASCreateConf_NetMpAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqVASCreateConf_NetMpAddr::IsInitialized() const {

  return true;
}

void ReqVASCreateConf_NetMpAddr::Swap(ReqVASCreateConf_NetMpAddr* other) {
  if (other != this) {
    std::swap(netmpid_, other->netmpid_);
    std::swap(netmpmediaip_, other->netmpmediaip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqVASCreateConf_NetMpAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVASCreateConf_NetMpAddr_descriptor_;
  metadata.reflection = ReqVASCreateConf_NetMpAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqVASCreateConf::kConfidFieldNumber;
const int ReqVASCreateConf::kMcidFieldNumber;
const int ReqVASCreateConf::kVasidFieldNumber;
const int ReqVASCreateConf::kVaschannelidFieldNumber;
const int ReqVASCreateConf::kNetmpaddrFieldNumber;
const int ReqVASCreateConf::kVaschantypeFieldNumber;
const int ReqVASCreateConf::kVideosizeFieldNumber;
#endif  // !_MSC_VER

ReqVASCreateConf::ReqVASCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqVASCreateConf)
}

void ReqVASCreateConf::InitAsDefaultInstance() {
  netmpaddr_ = const_cast< ::SRMsgs::ReqVASCreateConf_NetMpAddr*>(&::SRMsgs::ReqVASCreateConf_NetMpAddr::default_instance());
}

ReqVASCreateConf::ReqVASCreateConf(const ReqVASCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqVASCreateConf)
}

void ReqVASCreateConf::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  netmpaddr_ = NULL;
  vaschantype_ = 0u;
  videosize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqVASCreateConf::~ReqVASCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqVASCreateConf)
  SharedDtor();
}

void ReqVASCreateConf::SharedDtor() {
  if (this != default_instance_) {
    delete netmpaddr_;
  }
}

void ReqVASCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqVASCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqVASCreateConf_descriptor_;
}

const ReqVASCreateConf& ReqVASCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

ReqVASCreateConf* ReqVASCreateConf::default_instance_ = NULL;

ReqVASCreateConf* ReqVASCreateConf::New() const {
  return new ReqVASCreateConf;
}

void ReqVASCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqVASCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, vasid_);
    ZR_(vaschannelid_, videosize_);
    if (has_netmpaddr()) {
      if (netmpaddr_ != NULL) netmpaddr_->::SRMsgs::ReqVASCreateConf_NetMpAddr::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqVASCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqVASCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_netmpaddr;
        break;
      }

      // optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
      case 5: {
        if (tag == 42) {
         parse_netmpaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netmpaddr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vaschantype;
        break;
      }

      // optional uint32 vaschantype = 6;
      case 6: {
        if (tag == 48) {
         parse_vaschantype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschantype_)));
          set_has_vaschantype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 7;
      case 7: {
        if (tag == 56) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqVASCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqVASCreateConf)
  return false;
#undef DO_
}

void ReqVASCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqVASCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vaschannelid(), output);
  }

  // optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
  if (has_netmpaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->netmpaddr(), output);
  }

  // optional uint32 vaschantype = 6;
  if (has_vaschantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vaschantype(), output);
  }

  // optional uint32 videosize = 7;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videosize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqVASCreateConf)
}

::google::protobuf::uint8* ReqVASCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqVASCreateConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vaschannelid(), target);
  }

  // optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
  if (has_netmpaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->netmpaddr(), target);
  }

  // optional uint32 vaschantype = 6;
  if (has_vaschantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vaschantype(), target);
  }

  // optional uint32 videosize = 7;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videosize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqVASCreateConf)
  return target;
}

int ReqVASCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 4;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional .SRMsgs.ReqVASCreateConf.NetMpAddr netmpaddr = 5;
    if (has_netmpaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netmpaddr());
    }

    // optional uint32 vaschantype = 6;
    if (has_vaschantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschantype());
    }

    // optional uint32 videosize = 7;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqVASCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqVASCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqVASCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqVASCreateConf::MergeFrom(const ReqVASCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_netmpaddr()) {
      mutable_netmpaddr()->::SRMsgs::ReqVASCreateConf_NetMpAddr::MergeFrom(from.netmpaddr());
    }
    if (from.has_vaschantype()) {
      set_vaschantype(from.vaschantype());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqVASCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVASCreateConf::CopyFrom(const ReqVASCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqVASCreateConf::IsInitialized() const {

  return true;
}

void ReqVASCreateConf::Swap(ReqVASCreateConf* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(netmpaddr_, other->netmpaddr_);
    std::swap(vaschantype_, other->vaschantype_);
    std::swap(videosize_, other->videosize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqVASCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqVASCreateConf_descriptor_;
  metadata.reflection = ReqVASCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdVASDestroyConf::kConfidFieldNumber;
const int CmdVASDestroyConf::kMcidFieldNumber;
const int CmdVASDestroyConf::kVasidFieldNumber;
const int CmdVASDestroyConf::kVaschannelidFieldNumber;
const int CmdVASDestroyConf::kReasonFieldNumber;
#endif  // !_MSC_VER

CmdVASDestroyConf::CmdVASDestroyConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASDestroyConf)
}

void CmdVASDestroyConf::InitAsDefaultInstance() {
}

CmdVASDestroyConf::CmdVASDestroyConf(const CmdVASDestroyConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASDestroyConf)
}

void CmdVASDestroyConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASDestroyConf::~CmdVASDestroyConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASDestroyConf)
  SharedDtor();
}

void CmdVASDestroyConf::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CmdVASDestroyConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASDestroyConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASDestroyConf_descriptor_;
}

const CmdVASDestroyConf& CmdVASDestroyConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASDestroyConf* CmdVASDestroyConf::default_instance_ = NULL;

CmdVASDestroyConf* CmdVASDestroyConf::New() const {
  return new CmdVASDestroyConf;
}

void CmdVASDestroyConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASDestroyConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(confid_, vasid_);
    vaschannelid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASDestroyConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASDestroyConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASDestroyConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASDestroyConf)
  return false;
#undef DO_
}

void CmdVASDestroyConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASDestroyConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vaschannelid(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASDestroyConf)
}

::google::protobuf::uint8* CmdVASDestroyConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASDestroyConf)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vaschannelid(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASDestroyConf)
  return target;
}

int CmdVASDestroyConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 4;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASDestroyConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASDestroyConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASDestroyConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASDestroyConf::MergeFrom(const CmdVASDestroyConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASDestroyConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASDestroyConf::CopyFrom(const CmdVASDestroyConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASDestroyConf::IsInitialized() const {

  return true;
}

void CmdVASDestroyConf::Swap(CmdVASDestroyConf* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASDestroyConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASDestroyConf_descriptor_;
  metadata.reflection = CmdVASDestroyConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdVASStartAnaly_AnalyInfo::kChannelidFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kScreenidFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kVaschannelidFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kSrcmapidFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kUseridsFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kIsdispmnumFieldNumber;
const int CmdVASStartAnaly_AnalyInfo::kIsdispmnameFieldNumber;
#endif  // !_MSC_VER

CmdVASStartAnaly_AnalyInfo::CmdVASStartAnaly_AnalyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASStartAnaly.AnalyInfo)
}

void CmdVASStartAnaly_AnalyInfo::InitAsDefaultInstance() {
}

CmdVASStartAnaly_AnalyInfo::CmdVASStartAnaly_AnalyInfo(const CmdVASStartAnaly_AnalyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASStartAnaly.AnalyInfo)
}

void CmdVASStartAnaly_AnalyInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = 0u;
  screenid_ = 0u;
  vaschannelid_ = 0u;
  srcmapid_ = 0u;
  isdispmnum_ = false;
  isdispmname_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASStartAnaly_AnalyInfo::~CmdVASStartAnaly_AnalyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  SharedDtor();
}

void CmdVASStartAnaly_AnalyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASStartAnaly_AnalyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASStartAnaly_AnalyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASStartAnaly_AnalyInfo_descriptor_;
}

const CmdVASStartAnaly_AnalyInfo& CmdVASStartAnaly_AnalyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASStartAnaly_AnalyInfo* CmdVASStartAnaly_AnalyInfo::default_instance_ = NULL;

CmdVASStartAnaly_AnalyInfo* CmdVASStartAnaly_AnalyInfo::New() const {
  return new CmdVASStartAnaly_AnalyInfo;
}

void CmdVASStartAnaly_AnalyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASStartAnaly_AnalyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(channelid_, srcmapid_);
    ZR_(isdispmnum_, isdispmname_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  userids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASStartAnaly_AnalyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 3;
      case 3: {
        if (tag == 24) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcmapid;
        break;
      }

      // optional uint32 srcmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcmapid_)));
          set_has_srcmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userids;
        break;
      }

      // repeated uint32 userids = 5;
      case 5: {
        if (tag == 40) {
         parse_userids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_userids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_userids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userids;
        if (input->ExpectTag(48)) goto parse_isdispmnum;
        break;
      }

      // optional bool isdispmnum = 6;
      case 6: {
        if (tag == 48) {
         parse_isdispmnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdispmnum_)));
          set_has_isdispmnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isdispmname;
        break;
      }

      // optional bool isdispmname = 7;
      case 7: {
        if (tag == 56) {
         parse_isdispmname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdispmname_)));
          set_has_isdispmname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  return false;
#undef DO_
}

void CmdVASStartAnaly_AnalyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaschannelid(), output);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcmapid(), output);
  }

  // repeated uint32 userids = 5;
  for (int i = 0; i < this->userids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->userids(i), output);
  }

  // optional bool isdispmnum = 6;
  if (has_isdispmnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdispmnum(), output);
  }

  // optional bool isdispmname = 7;
  if (has_isdispmname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdispmname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASStartAnaly.AnalyInfo)
}

::google::protobuf::uint8* CmdVASStartAnaly_AnalyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaschannelid(), target);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcmapid(), target);
  }

  // repeated uint32 userids = 5;
  for (int i = 0; i < this->userids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->userids(i), target);
  }

  // optional bool isdispmnum = 6;
  if (has_isdispmnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdispmnum(), target);
  }

  // optional bool isdispmname = 7;
  if (has_isdispmname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isdispmname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASStartAnaly.AnalyInfo)
  return target;
}

int CmdVASStartAnaly_AnalyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelid = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 vaschannelid = 3;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 srcmapid = 4;
    if (has_srcmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcmapid());
    }

    // optional bool isdispmnum = 6;
    if (has_isdispmnum()) {
      total_size += 1 + 1;
    }

    // optional bool isdispmname = 7;
    if (has_isdispmname()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 userids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->userids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->userids(i));
    }
    total_size += 1 * this->userids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASStartAnaly_AnalyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASStartAnaly_AnalyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASStartAnaly_AnalyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASStartAnaly_AnalyInfo::MergeFrom(const CmdVASStartAnaly_AnalyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userids_.MergeFrom(from.userids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_srcmapid()) {
      set_srcmapid(from.srcmapid());
    }
    if (from.has_isdispmnum()) {
      set_isdispmnum(from.isdispmnum());
    }
    if (from.has_isdispmname()) {
      set_isdispmname(from.isdispmname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASStartAnaly_AnalyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASStartAnaly_AnalyInfo::CopyFrom(const CmdVASStartAnaly_AnalyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASStartAnaly_AnalyInfo::IsInitialized() const {

  return true;
}

void CmdVASStartAnaly_AnalyInfo::Swap(CmdVASStartAnaly_AnalyInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(srcmapid_, other->srcmapid_);
    userids_.Swap(&other->userids_);
    std::swap(isdispmnum_, other->isdispmnum_);
    std::swap(isdispmname_, other->isdispmname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASStartAnaly_AnalyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASStartAnaly_AnalyInfo_descriptor_;
  metadata.reflection = CmdVASStartAnaly_AnalyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdVASStartAnaly::kConfidFieldNumber;
const int CmdVASStartAnaly::kMcidFieldNumber;
const int CmdVASStartAnaly::kVasidFieldNumber;
const int CmdVASStartAnaly::kAnalyinfosFieldNumber;
#endif  // !_MSC_VER

CmdVASStartAnaly::CmdVASStartAnaly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASStartAnaly)
}

void CmdVASStartAnaly::InitAsDefaultInstance() {
}

CmdVASStartAnaly::CmdVASStartAnaly(const CmdVASStartAnaly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASStartAnaly)
}

void CmdVASStartAnaly::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASStartAnaly::~CmdVASStartAnaly() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASStartAnaly)
  SharedDtor();
}

void CmdVASStartAnaly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASStartAnaly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASStartAnaly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASStartAnaly_descriptor_;
}

const CmdVASStartAnaly& CmdVASStartAnaly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASStartAnaly* CmdVASStartAnaly::default_instance_ = NULL;

CmdVASStartAnaly* CmdVASStartAnaly::New() const {
  return new CmdVASStartAnaly;
}

void CmdVASStartAnaly::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASStartAnaly*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  analyinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASStartAnaly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASStartAnaly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        break;
      }

      // repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_analyinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_analyinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASStartAnaly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASStartAnaly)
  return false;
#undef DO_
}

void CmdVASStartAnaly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASStartAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->analyinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASStartAnaly)
}

::google::protobuf::uint8* CmdVASStartAnaly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASStartAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->analyinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASStartAnaly)
  return target;
}

int CmdVASStartAnaly::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  // repeated .SRMsgs.CmdVASStartAnaly.AnalyInfo analyinfos = 4;
  total_size += 1 * this->analyinfos_size();
  for (int i = 0; i < this->analyinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->analyinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASStartAnaly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASStartAnaly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASStartAnaly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASStartAnaly::MergeFrom(const CmdVASStartAnaly& from) {
  GOOGLE_CHECK_NE(&from, this);
  analyinfos_.MergeFrom(from.analyinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASStartAnaly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASStartAnaly::CopyFrom(const CmdVASStartAnaly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASStartAnaly::IsInitialized() const {

  return true;
}

void CmdVASStartAnaly::Swap(CmdVASStartAnaly* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    analyinfos_.Swap(&other->analyinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASStartAnaly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASStartAnaly_descriptor_;
  metadata.reflection = CmdVASStartAnaly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdVASStopAnaly_AnalyInfo::kChannelidFieldNumber;
const int CmdVASStopAnaly_AnalyInfo::kScreenidFieldNumber;
const int CmdVASStopAnaly_AnalyInfo::kVaschannelidFieldNumber;
const int CmdVASStopAnaly_AnalyInfo::kSrcmapidFieldNumber;
#endif  // !_MSC_VER

CmdVASStopAnaly_AnalyInfo::CmdVASStopAnaly_AnalyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASStopAnaly.AnalyInfo)
}

void CmdVASStopAnaly_AnalyInfo::InitAsDefaultInstance() {
}

CmdVASStopAnaly_AnalyInfo::CmdVASStopAnaly_AnalyInfo(const CmdVASStopAnaly_AnalyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASStopAnaly.AnalyInfo)
}

void CmdVASStopAnaly_AnalyInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = 0u;
  screenid_ = 0u;
  vaschannelid_ = 0u;
  srcmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASStopAnaly_AnalyInfo::~CmdVASStopAnaly_AnalyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  SharedDtor();
}

void CmdVASStopAnaly_AnalyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASStopAnaly_AnalyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASStopAnaly_AnalyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASStopAnaly_AnalyInfo_descriptor_;
}

const CmdVASStopAnaly_AnalyInfo& CmdVASStopAnaly_AnalyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASStopAnaly_AnalyInfo* CmdVASStopAnaly_AnalyInfo::default_instance_ = NULL;

CmdVASStopAnaly_AnalyInfo* CmdVASStopAnaly_AnalyInfo::New() const {
  return new CmdVASStopAnaly_AnalyInfo;
}

void CmdVASStopAnaly_AnalyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASStopAnaly_AnalyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channelid_, srcmapid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASStopAnaly_AnalyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 3;
      case 3: {
        if (tag == 24) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcmapid;
        break;
      }

      // optional uint32 srcmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcmapid_)));
          set_has_srcmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  return false;
#undef DO_
}

void CmdVASStopAnaly_AnalyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaschannelid(), output);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASStopAnaly.AnalyInfo)
}

::google::protobuf::uint8* CmdVASStopAnaly_AnalyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaschannelid(), target);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASStopAnaly.AnalyInfo)
  return target;
}

int CmdVASStopAnaly_AnalyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelid = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 vaschannelid = 3;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 srcmapid = 4;
    if (has_srcmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcmapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASStopAnaly_AnalyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASStopAnaly_AnalyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASStopAnaly_AnalyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASStopAnaly_AnalyInfo::MergeFrom(const CmdVASStopAnaly_AnalyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_srcmapid()) {
      set_srcmapid(from.srcmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASStopAnaly_AnalyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASStopAnaly_AnalyInfo::CopyFrom(const CmdVASStopAnaly_AnalyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASStopAnaly_AnalyInfo::IsInitialized() const {

  return true;
}

void CmdVASStopAnaly_AnalyInfo::Swap(CmdVASStopAnaly_AnalyInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(srcmapid_, other->srcmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASStopAnaly_AnalyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASStopAnaly_AnalyInfo_descriptor_;
  metadata.reflection = CmdVASStopAnaly_AnalyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdVASStopAnaly::kConfidFieldNumber;
const int CmdVASStopAnaly::kMcidFieldNumber;
const int CmdVASStopAnaly::kVasidFieldNumber;
const int CmdVASStopAnaly::kAnalyinfosFieldNumber;
#endif  // !_MSC_VER

CmdVASStopAnaly::CmdVASStopAnaly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASStopAnaly)
}

void CmdVASStopAnaly::InitAsDefaultInstance() {
}

CmdVASStopAnaly::CmdVASStopAnaly(const CmdVASStopAnaly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASStopAnaly)
}

void CmdVASStopAnaly::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASStopAnaly::~CmdVASStopAnaly() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASStopAnaly)
  SharedDtor();
}

void CmdVASStopAnaly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASStopAnaly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASStopAnaly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASStopAnaly_descriptor_;
}

const CmdVASStopAnaly& CmdVASStopAnaly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASStopAnaly* CmdVASStopAnaly::default_instance_ = NULL;

CmdVASStopAnaly* CmdVASStopAnaly::New() const {
  return new CmdVASStopAnaly;
}

void CmdVASStopAnaly::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASStopAnaly*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  analyinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASStopAnaly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASStopAnaly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        break;
      }

      // repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_analyinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_analyinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASStopAnaly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASStopAnaly)
  return false;
#undef DO_
}

void CmdVASStopAnaly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASStopAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->analyinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASStopAnaly)
}

::google::protobuf::uint8* CmdVASStopAnaly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASStopAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->analyinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASStopAnaly)
  return target;
}

int CmdVASStopAnaly::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  // repeated .SRMsgs.CmdVASStopAnaly.AnalyInfo analyinfos = 4;
  total_size += 1 * this->analyinfos_size();
  for (int i = 0; i < this->analyinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->analyinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASStopAnaly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASStopAnaly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASStopAnaly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASStopAnaly::MergeFrom(const CmdVASStopAnaly& from) {
  GOOGLE_CHECK_NE(&from, this);
  analyinfos_.MergeFrom(from.analyinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASStopAnaly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASStopAnaly::CopyFrom(const CmdVASStopAnaly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASStopAnaly::IsInitialized() const {

  return true;
}

void CmdVASStopAnaly::Swap(CmdVASStopAnaly* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    analyinfos_.Swap(&other->analyinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASStopAnaly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASStopAnaly_descriptor_;
  metadata.reflection = CmdVASStopAnaly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdVASUpdateAnaly_AnalyInfo::kChannelidFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kScreenidFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kVaschannelidFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kSrcmapidFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kNewuseridsFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kIsdispmnumFieldNumber;
const int CmdVASUpdateAnaly_AnalyInfo::kIsdispmnameFieldNumber;
#endif  // !_MSC_VER

CmdVASUpdateAnaly_AnalyInfo::CmdVASUpdateAnaly_AnalyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
}

void CmdVASUpdateAnaly_AnalyInfo::InitAsDefaultInstance() {
}

CmdVASUpdateAnaly_AnalyInfo::CmdVASUpdateAnaly_AnalyInfo(const CmdVASUpdateAnaly_AnalyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
}

void CmdVASUpdateAnaly_AnalyInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = 0u;
  screenid_ = 0u;
  vaschannelid_ = 0u;
  srcmapid_ = 0u;
  isdispmnum_ = false;
  isdispmname_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASUpdateAnaly_AnalyInfo::~CmdVASUpdateAnaly_AnalyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  SharedDtor();
}

void CmdVASUpdateAnaly_AnalyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASUpdateAnaly_AnalyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASUpdateAnaly_AnalyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASUpdateAnaly_AnalyInfo_descriptor_;
}

const CmdVASUpdateAnaly_AnalyInfo& CmdVASUpdateAnaly_AnalyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASUpdateAnaly_AnalyInfo* CmdVASUpdateAnaly_AnalyInfo::default_instance_ = NULL;

CmdVASUpdateAnaly_AnalyInfo* CmdVASUpdateAnaly_AnalyInfo::New() const {
  return new CmdVASUpdateAnaly_AnalyInfo;
}

void CmdVASUpdateAnaly_AnalyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASUpdateAnaly_AnalyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(channelid_, srcmapid_);
    ZR_(isdispmnum_, isdispmname_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  newuserids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASUpdateAnaly_AnalyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 3;
      case 3: {
        if (tag == 24) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcmapid;
        break;
      }

      // optional uint32 srcmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcmapid_)));
          set_has_srcmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_newuserids;
        break;
      }

      // repeated uint32 newuserids = 5;
      case 5: {
        if (tag == 40) {
         parse_newuserids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_newuserids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_newuserids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_newuserids;
        if (input->ExpectTag(48)) goto parse_isdispmnum;
        break;
      }

      // optional bool isdispmnum = 6;
      case 6: {
        if (tag == 48) {
         parse_isdispmnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdispmnum_)));
          set_has_isdispmnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isdispmname;
        break;
      }

      // optional bool isdispmname = 7;
      case 7: {
        if (tag == 56) {
         parse_isdispmname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdispmname_)));
          set_has_isdispmname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  return false;
#undef DO_
}

void CmdVASUpdateAnaly_AnalyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaschannelid(), output);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcmapid(), output);
  }

  // repeated uint32 newuserids = 5;
  for (int i = 0; i < this->newuserids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->newuserids(i), output);
  }

  // optional bool isdispmnum = 6;
  if (has_isdispmnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdispmnum(), output);
  }

  // optional bool isdispmname = 7;
  if (has_isdispmname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdispmname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
}

::google::protobuf::uint8* CmdVASUpdateAnaly_AnalyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaschannelid(), target);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcmapid(), target);
  }

  // repeated uint32 newuserids = 5;
  for (int i = 0; i < this->newuserids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->newuserids(i), target);
  }

  // optional bool isdispmnum = 6;
  if (has_isdispmnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdispmnum(), target);
  }

  // optional bool isdispmname = 7;
  if (has_isdispmname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isdispmname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASUpdateAnaly.AnalyInfo)
  return target;
}

int CmdVASUpdateAnaly_AnalyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelid = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 vaschannelid = 3;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 srcmapid = 4;
    if (has_srcmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcmapid());
    }

    // optional bool isdispmnum = 6;
    if (has_isdispmnum()) {
      total_size += 1 + 1;
    }

    // optional bool isdispmname = 7;
    if (has_isdispmname()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 newuserids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->newuserids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->newuserids(i));
    }
    total_size += 1 * this->newuserids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASUpdateAnaly_AnalyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASUpdateAnaly_AnalyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASUpdateAnaly_AnalyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASUpdateAnaly_AnalyInfo::MergeFrom(const CmdVASUpdateAnaly_AnalyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newuserids_.MergeFrom(from.newuserids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_srcmapid()) {
      set_srcmapid(from.srcmapid());
    }
    if (from.has_isdispmnum()) {
      set_isdispmnum(from.isdispmnum());
    }
    if (from.has_isdispmname()) {
      set_isdispmname(from.isdispmname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASUpdateAnaly_AnalyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASUpdateAnaly_AnalyInfo::CopyFrom(const CmdVASUpdateAnaly_AnalyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASUpdateAnaly_AnalyInfo::IsInitialized() const {

  return true;
}

void CmdVASUpdateAnaly_AnalyInfo::Swap(CmdVASUpdateAnaly_AnalyInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(srcmapid_, other->srcmapid_);
    newuserids_.Swap(&other->newuserids_);
    std::swap(isdispmnum_, other->isdispmnum_);
    std::swap(isdispmname_, other->isdispmname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASUpdateAnaly_AnalyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASUpdateAnaly_AnalyInfo_descriptor_;
  metadata.reflection = CmdVASUpdateAnaly_AnalyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdVASUpdateAnaly::kConfidFieldNumber;
const int CmdVASUpdateAnaly::kMcidFieldNumber;
const int CmdVASUpdateAnaly::kVasidFieldNumber;
const int CmdVASUpdateAnaly::kAnalyinfosFieldNumber;
#endif  // !_MSC_VER

CmdVASUpdateAnaly::CmdVASUpdateAnaly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASUpdateAnaly)
}

void CmdVASUpdateAnaly::InitAsDefaultInstance() {
}

CmdVASUpdateAnaly::CmdVASUpdateAnaly(const CmdVASUpdateAnaly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASUpdateAnaly)
}

void CmdVASUpdateAnaly::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASUpdateAnaly::~CmdVASUpdateAnaly() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASUpdateAnaly)
  SharedDtor();
}

void CmdVASUpdateAnaly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdVASUpdateAnaly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASUpdateAnaly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASUpdateAnaly_descriptor_;
}

const CmdVASUpdateAnaly& CmdVASUpdateAnaly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASUpdateAnaly* CmdVASUpdateAnaly::default_instance_ = NULL;

CmdVASUpdateAnaly* CmdVASUpdateAnaly::New() const {
  return new CmdVASUpdateAnaly;
}

void CmdVASUpdateAnaly::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASUpdateAnaly*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  analyinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASUpdateAnaly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASUpdateAnaly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        break;
      }

      // repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_analyinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_analyinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_analyinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASUpdateAnaly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASUpdateAnaly)
  return false;
#undef DO_
}

void CmdVASUpdateAnaly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASUpdateAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->analyinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASUpdateAnaly)
}

::google::protobuf::uint8* CmdVASUpdateAnaly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASUpdateAnaly)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
  for (int i = 0; i < this->analyinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->analyinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASUpdateAnaly)
  return target;
}

int CmdVASUpdateAnaly::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  // repeated .SRMsgs.CmdVASUpdateAnaly.AnalyInfo analyinfos = 4;
  total_size += 1 * this->analyinfos_size();
  for (int i = 0; i < this->analyinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->analyinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASUpdateAnaly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASUpdateAnaly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASUpdateAnaly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASUpdateAnaly::MergeFrom(const CmdVASUpdateAnaly& from) {
  GOOGLE_CHECK_NE(&from, this);
  analyinfos_.MergeFrom(from.analyinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASUpdateAnaly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASUpdateAnaly::CopyFrom(const CmdVASUpdateAnaly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASUpdateAnaly::IsInitialized() const {

  return true;
}

void CmdVASUpdateAnaly::Swap(CmdVASUpdateAnaly* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    analyinfos_.Swap(&other->analyinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASUpdateAnaly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASUpdateAnaly_descriptor_;
  metadata.reflection = CmdVASUpdateAnaly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdVASReOpenNetMPMediaPort::kNetmpipFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kAudiodatarecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kAudioctrlrecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideodatarecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideoctrlrecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideo2DatarecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideo2CtrlrecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideo3DatarecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVideo3CtrlrecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kDesktopdatarecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kDesktopctrlrecvportFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kConfidFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kMcidFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVasidFieldNumber;
const int CmdVASReOpenNetMPMediaPort::kVaschannelidFieldNumber;
#endif  // !_MSC_VER

CmdVASReOpenNetMPMediaPort::CmdVASReOpenNetMPMediaPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdVASReOpenNetMPMediaPort)
}

void CmdVASReOpenNetMPMediaPort::InitAsDefaultInstance() {
}

CmdVASReOpenNetMPMediaPort::CmdVASReOpenNetMPMediaPort(const CmdVASReOpenNetMPMediaPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdVASReOpenNetMPMediaPort)
}

void CmdVASReOpenNetMPMediaPort::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  netmpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiodatarecvport_ = 0u;
  audioctrlrecvport_ = 0u;
  videodatarecvport_ = 0u;
  videoctrlrecvport_ = 0u;
  video2datarecvport_ = 0u;
  video2ctrlrecvport_ = 0u;
  video3datarecvport_ = 0u;
  video3ctrlrecvport_ = 0u;
  desktopdatarecvport_ = 0u;
  desktopctrlrecvport_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdVASReOpenNetMPMediaPort::~CmdVASReOpenNetMPMediaPort() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdVASReOpenNetMPMediaPort)
  SharedDtor();
}

void CmdVASReOpenNetMPMediaPort::SharedDtor() {
  if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmpip_;
  }
  if (this != default_instance_) {
  }
}

void CmdVASReOpenNetMPMediaPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdVASReOpenNetMPMediaPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdVASReOpenNetMPMediaPort_descriptor_;
}

const CmdVASReOpenNetMPMediaPort& CmdVASReOpenNetMPMediaPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdVASReOpenNetMPMediaPort* CmdVASReOpenNetMPMediaPort::default_instance_ = NULL;

CmdVASReOpenNetMPMediaPort* CmdVASReOpenNetMPMediaPort::New() const {
  return new CmdVASReOpenNetMPMediaPort;
}

void CmdVASReOpenNetMPMediaPort::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdVASReOpenNetMPMediaPort*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(audiodatarecvport_, video3datarecvport_);
    if (has_netmpip()) {
      if (netmpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmpip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(video3ctrlrecvport_, vaschannelid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdVASReOpenNetMPMediaPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdVASReOpenNetMPMediaPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string netmpip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmpip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmpip().data(), this->netmpip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmpip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_audiodatarecvport;
        break;
      }

      // optional uint32 audiodatarecvport = 2;
      case 2: {
        if (tag == 16) {
         parse_audiodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audiodatarecvport_)));
          set_has_audiodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audioctrlrecvport;
        break;
      }

      // optional uint32 audioctrlrecvport = 3;
      case 3: {
        if (tag == 24) {
         parse_audioctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioctrlrecvport_)));
          set_has_audioctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_videodatarecvport;
        break;
      }

      // optional uint32 videodatarecvport = 4;
      case 4: {
        if (tag == 32) {
         parse_videodatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videodatarecvport_)));
          set_has_videodatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_videoctrlrecvport;
        break;
      }

      // optional uint32 videoctrlrecvport = 5;
      case 5: {
        if (tag == 40) {
         parse_videoctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoctrlrecvport_)));
          set_has_videoctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_video2datarecvport;
        break;
      }

      // optional uint32 video2datarecvport = 6;
      case 6: {
        if (tag == 48) {
         parse_video2datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2datarecvport_)));
          set_has_video2datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video2ctrlrecvport;
        break;
      }

      // optional uint32 video2ctrlrecvport = 7;
      case 7: {
        if (tag == 56) {
         parse_video2ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video2ctrlrecvport_)));
          set_has_video2ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video3datarecvport;
        break;
      }

      // optional uint32 video3datarecvport = 8;
      case 8: {
        if (tag == 64) {
         parse_video3datarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3datarecvport_)));
          set_has_video3datarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video3ctrlrecvport;
        break;
      }

      // optional uint32 video3ctrlrecvport = 9;
      case 9: {
        if (tag == 72) {
         parse_video3ctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video3ctrlrecvport_)));
          set_has_video3ctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_desktopdatarecvport;
        break;
      }

      // optional uint32 desktopdatarecvport = 10;
      case 10: {
        if (tag == 80) {
         parse_desktopdatarecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopdatarecvport_)));
          set_has_desktopdatarecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_desktopctrlrecvport;
        break;
      }

      // optional uint32 desktopctrlrecvport = 11;
      case 11: {
        if (tag == 88) {
         parse_desktopctrlrecvport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desktopctrlrecvport_)));
          set_has_desktopctrlrecvport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 12;
      case 12: {
        if (tag == 96) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 13;
      case 13: {
        if (tag == 104) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 14;
      case 14: {
        if (tag == 112) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 15;
      case 15: {
        if (tag == 120) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdVASReOpenNetMPMediaPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdVASReOpenNetMPMediaPort)
  return false;
#undef DO_
}

void CmdVASReOpenNetMPMediaPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdVASReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->netmpip(), output);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audiodatarecvport(), output);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audioctrlrecvport(), output);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->videodatarecvport(), output);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->videoctrlrecvport(), output);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->video2datarecvport(), output);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video2ctrlrecvport(), output);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->video3datarecvport(), output);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->video3ctrlrecvport(), output);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->desktopdatarecvport(), output);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->desktopctrlrecvport(), output);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->confid(), output);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mcid(), output);
  }

  // optional uint32 vasid = 14;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 15;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->vaschannelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdVASReOpenNetMPMediaPort)
}

::google::protobuf::uint8* CmdVASReOpenNetMPMediaPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdVASReOpenNetMPMediaPort)
  // optional string netmpip = 1;
  if (has_netmpip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmpip().data(), this->netmpip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmpip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->netmpip(), target);
  }

  // optional uint32 audiodatarecvport = 2;
  if (has_audiodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->audiodatarecvport(), target);
  }

  // optional uint32 audioctrlrecvport = 3;
  if (has_audioctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->audioctrlrecvport(), target);
  }

  // optional uint32 videodatarecvport = 4;
  if (has_videodatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->videodatarecvport(), target);
  }

  // optional uint32 videoctrlrecvport = 5;
  if (has_videoctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->videoctrlrecvport(), target);
  }

  // optional uint32 video2datarecvport = 6;
  if (has_video2datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->video2datarecvport(), target);
  }

  // optional uint32 video2ctrlrecvport = 7;
  if (has_video2ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video2ctrlrecvport(), target);
  }

  // optional uint32 video3datarecvport = 8;
  if (has_video3datarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->video3datarecvport(), target);
  }

  // optional uint32 video3ctrlrecvport = 9;
  if (has_video3ctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->video3ctrlrecvport(), target);
  }

  // optional uint32 desktopdatarecvport = 10;
  if (has_desktopdatarecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->desktopdatarecvport(), target);
  }

  // optional uint32 desktopctrlrecvport = 11;
  if (has_desktopctrlrecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->desktopctrlrecvport(), target);
  }

  // optional uint64 confid = 12;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->confid(), target);
  }

  // optional uint32 mcid = 13;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mcid(), target);
  }

  // optional uint32 vasid = 14;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 15;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->vaschannelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdVASReOpenNetMPMediaPort)
  return target;
}

int CmdVASReOpenNetMPMediaPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string netmpip = 1;
    if (has_netmpip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmpip());
    }

    // optional uint32 audiodatarecvport = 2;
    if (has_audiodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audiodatarecvport());
    }

    // optional uint32 audioctrlrecvport = 3;
    if (has_audioctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioctrlrecvport());
    }

    // optional uint32 videodatarecvport = 4;
    if (has_videodatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videodatarecvport());
    }

    // optional uint32 videoctrlrecvport = 5;
    if (has_videoctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoctrlrecvport());
    }

    // optional uint32 video2datarecvport = 6;
    if (has_video2datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2datarecvport());
    }

    // optional uint32 video2ctrlrecvport = 7;
    if (has_video2ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video2ctrlrecvport());
    }

    // optional uint32 video3datarecvport = 8;
    if (has_video3datarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3datarecvport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 video3ctrlrecvport = 9;
    if (has_video3ctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video3ctrlrecvport());
    }

    // optional uint32 desktopdatarecvport = 10;
    if (has_desktopdatarecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopdatarecvport());
    }

    // optional uint32 desktopctrlrecvport = 11;
    if (has_desktopctrlrecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desktopctrlrecvport());
    }

    // optional uint64 confid = 12;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 13;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 14;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 15;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdVASReOpenNetMPMediaPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdVASReOpenNetMPMediaPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdVASReOpenNetMPMediaPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdVASReOpenNetMPMediaPort::MergeFrom(const CmdVASReOpenNetMPMediaPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_netmpip()) {
      set_netmpip(from.netmpip());
    }
    if (from.has_audiodatarecvport()) {
      set_audiodatarecvport(from.audiodatarecvport());
    }
    if (from.has_audioctrlrecvport()) {
      set_audioctrlrecvport(from.audioctrlrecvport());
    }
    if (from.has_videodatarecvport()) {
      set_videodatarecvport(from.videodatarecvport());
    }
    if (from.has_videoctrlrecvport()) {
      set_videoctrlrecvport(from.videoctrlrecvport());
    }
    if (from.has_video2datarecvport()) {
      set_video2datarecvport(from.video2datarecvport());
    }
    if (from.has_video2ctrlrecvport()) {
      set_video2ctrlrecvport(from.video2ctrlrecvport());
    }
    if (from.has_video3datarecvport()) {
      set_video3datarecvport(from.video3datarecvport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video3ctrlrecvport()) {
      set_video3ctrlrecvport(from.video3ctrlrecvport());
    }
    if (from.has_desktopdatarecvport()) {
      set_desktopdatarecvport(from.desktopdatarecvport());
    }
    if (from.has_desktopctrlrecvport()) {
      set_desktopctrlrecvport(from.desktopctrlrecvport());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdVASReOpenNetMPMediaPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVASReOpenNetMPMediaPort::CopyFrom(const CmdVASReOpenNetMPMediaPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVASReOpenNetMPMediaPort::IsInitialized() const {

  return true;
}

void CmdVASReOpenNetMPMediaPort::Swap(CmdVASReOpenNetMPMediaPort* other) {
  if (other != this) {
    std::swap(netmpip_, other->netmpip_);
    std::swap(audiodatarecvport_, other->audiodatarecvport_);
    std::swap(audioctrlrecvport_, other->audioctrlrecvport_);
    std::swap(videodatarecvport_, other->videodatarecvport_);
    std::swap(videoctrlrecvport_, other->videoctrlrecvport_);
    std::swap(video2datarecvport_, other->video2datarecvport_);
    std::swap(video2ctrlrecvport_, other->video2ctrlrecvport_);
    std::swap(video3datarecvport_, other->video3datarecvport_);
    std::swap(video3ctrlrecvport_, other->video3ctrlrecvport_);
    std::swap(desktopdatarecvport_, other->desktopdatarecvport_);
    std::swap(desktopctrlrecvport_, other->desktopctrlrecvport_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdVASReOpenNetMPMediaPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdVASReOpenNetMPMediaPort_descriptor_;
  metadata.reflection = CmdVASReOpenNetMPMediaPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCHeartBeatToVAS::kMcidFieldNumber;
const int IndMCHeartBeatToVAS::kVasidFieldNumber;
#endif  // !_MSC_VER

IndMCHeartBeatToVAS::IndMCHeartBeatToVAS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCHeartBeatToVAS)
}

void IndMCHeartBeatToVAS::InitAsDefaultInstance() {
}

IndMCHeartBeatToVAS::IndMCHeartBeatToVAS(const IndMCHeartBeatToVAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCHeartBeatToVAS)
}

void IndMCHeartBeatToVAS::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCHeartBeatToVAS::~IndMCHeartBeatToVAS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCHeartBeatToVAS)
  SharedDtor();
}

void IndMCHeartBeatToVAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMCHeartBeatToVAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCHeartBeatToVAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCHeartBeatToVAS_descriptor_;
}

const IndMCHeartBeatToVAS& IndMCHeartBeatToVAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndMCHeartBeatToVAS* IndMCHeartBeatToVAS::default_instance_ = NULL;

IndMCHeartBeatToVAS* IndMCHeartBeatToVAS::New() const {
  return new IndMCHeartBeatToVAS;
}

void IndMCHeartBeatToVAS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCHeartBeatToVAS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCHeartBeatToVAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCHeartBeatToVAS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 2;
      case 2: {
        if (tag == 16) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCHeartBeatToVAS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCHeartBeatToVAS)
  return false;
#undef DO_
}

void IndMCHeartBeatToVAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCHeartBeatToVAS)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 vasid = 2;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vasid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCHeartBeatToVAS)
}

::google::protobuf::uint8* IndMCHeartBeatToVAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCHeartBeatToVAS)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 vasid = 2;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vasid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCHeartBeatToVAS)
  return target;
}

int IndMCHeartBeatToVAS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 2;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCHeartBeatToVAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCHeartBeatToVAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCHeartBeatToVAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCHeartBeatToVAS::MergeFrom(const IndMCHeartBeatToVAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCHeartBeatToVAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCHeartBeatToVAS::CopyFrom(const IndMCHeartBeatToVAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCHeartBeatToVAS::IsInitialized() const {

  return true;
}

void IndMCHeartBeatToVAS::Swap(IndMCHeartBeatToVAS* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCHeartBeatToVAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCHeartBeatToVAS_descriptor_;
  metadata.reflection = IndMCHeartBeatToVAS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndConfAllMPIInfoToVAS_ScreensInMPI::kScreenidFieldNumber;
const int IndConfAllMPIInfoToVAS_ScreensInMPI::kScreentypeFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToVAS_ScreensInMPI::IndConfAllMPIInfoToVAS_ScreensInMPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToVAS_ScreensInMPI::IndConfAllMPIInfoToVAS_ScreensInMPI(const IndConfAllMPIInfoToVAS_ScreensInMPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::SharedCtor() {
  _cached_size_ = 0;
  screenid_ = 0u;
  screentype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToVAS_ScreensInMPI::~IndConfAllMPIInfoToVAS_ScreensInMPI() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  SharedDtor();
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS_ScreensInMPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_;
}

const IndConfAllMPIInfoToVAS_ScreensInMPI& IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToVAS_ScreensInMPI* IndConfAllMPIInfoToVAS_ScreensInMPI::default_instance_ = NULL;

IndConfAllMPIInfoToVAS_ScreensInMPI* IndConfAllMPIInfoToVAS_ScreensInMPI::New() const {
  return new IndConfAllMPIInfoToVAS_ScreensInMPI;
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToVAS_ScreensInMPI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(screenid_, screentype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToVAS_ScreensInMPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 screenid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 2;
      case 2: {
        if (tag == 16) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->screenid(), output);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
}

::google::protobuf::uint8* IndConfAllMPIInfoToVAS_ScreensInMPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  // optional uint32 screenid = 1;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->screenid(), target);
  }

  // optional uint32 screentype = 2;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI)
  return target;
}

int IndConfAllMPIInfoToVAS_ScreensInMPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 screenid = 1;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 2;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToVAS_ScreensInMPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToVAS_ScreensInMPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::MergeFrom(const IndConfAllMPIInfoToVAS_ScreensInMPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::CopyFrom(const IndConfAllMPIInfoToVAS_ScreensInMPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToVAS_ScreensInMPI::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToVAS_ScreensInMPI::Swap(IndConfAllMPIInfoToVAS_ScreensInMPI* other) {
  if (other != this) {
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToVAS_ScreensInMPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToVAS_ScreensInMPI_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToVAS_ScreensInMPI_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToVAS_MPIsInConf::kMpichannelidFieldNumber;
const int IndConfAllMPIInfoToVAS_MPIsInConf::kScreensFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToVAS_MPIsInConf::IndConfAllMPIInfoToVAS_MPIsInConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
}

void IndConfAllMPIInfoToVAS_MPIsInConf::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToVAS_MPIsInConf::IndConfAllMPIInfoToVAS_MPIsInConf(const IndConfAllMPIInfoToVAS_MPIsInConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
}

void IndConfAllMPIInfoToVAS_MPIsInConf::SharedCtor() {
  _cached_size_ = 0;
  mpichannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToVAS_MPIsInConf::~IndConfAllMPIInfoToVAS_MPIsInConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  SharedDtor();
}

void IndConfAllMPIInfoToVAS_MPIsInConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToVAS_MPIsInConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS_MPIsInConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_;
}

const IndConfAllMPIInfoToVAS_MPIsInConf& IndConfAllMPIInfoToVAS_MPIsInConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToVAS_MPIsInConf* IndConfAllMPIInfoToVAS_MPIsInConf::default_instance_ = NULL;

IndConfAllMPIInfoToVAS_MPIsInConf* IndConfAllMPIInfoToVAS_MPIsInConf::New() const {
  return new IndConfAllMPIInfoToVAS_MPIsInConf;
}

void IndConfAllMPIInfoToVAS_MPIsInConf::Clear() {
  mpichannelid_ = 0u;
  screens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToVAS_MPIsInConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mpichannelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_screens;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
      case 2: {
        if (tag == 18) {
         parse_screens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_screens;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToVAS_MPIsInConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mpichannelid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
  for (int i = 0; i < this->screens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->screens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
}

::google::protobuf::uint8* IndConfAllMPIInfoToVAS_MPIsInConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  // optional uint32 mpichannelid = 1;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mpichannelid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
  for (int i = 0; i < this->screens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->screens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf)
  return target;
}

int IndConfAllMPIInfoToVAS_MPIsInConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mpichannelid = 1;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.ScreensInMPI screens = 2;
  total_size += 1 * this->screens_size();
  for (int i = 0; i < this->screens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToVAS_MPIsInConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToVAS_MPIsInConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToVAS_MPIsInConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToVAS_MPIsInConf::MergeFrom(const IndConfAllMPIInfoToVAS_MPIsInConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  screens_.MergeFrom(from.screens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToVAS_MPIsInConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToVAS_MPIsInConf::CopyFrom(const IndConfAllMPIInfoToVAS_MPIsInConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToVAS_MPIsInConf::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToVAS_MPIsInConf::Swap(IndConfAllMPIInfoToVAS_MPIsInConf* other) {
  if (other != this) {
    std::swap(mpichannelid_, other->mpichannelid_);
    screens_.Swap(&other->screens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToVAS_MPIsInConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToVAS_MPIsInConf_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToVAS_MPIsInConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndConfAllMPIInfoToVAS::kConfidFieldNumber;
const int IndConfAllMPIInfoToVAS::kMcidFieldNumber;
const int IndConfAllMPIInfoToVAS::kVasidFieldNumber;
const int IndConfAllMPIInfoToVAS::kMpisFieldNumber;
#endif  // !_MSC_VER

IndConfAllMPIInfoToVAS::IndConfAllMPIInfoToVAS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndConfAllMPIInfoToVAS)
}

void IndConfAllMPIInfoToVAS::InitAsDefaultInstance() {
}

IndConfAllMPIInfoToVAS::IndConfAllMPIInfoToVAS(const IndConfAllMPIInfoToVAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndConfAllMPIInfoToVAS)
}

void IndConfAllMPIInfoToVAS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndConfAllMPIInfoToVAS::~IndConfAllMPIInfoToVAS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndConfAllMPIInfoToVAS)
  SharedDtor();
}

void IndConfAllMPIInfoToVAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndConfAllMPIInfoToVAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndConfAllMPIInfoToVAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndConfAllMPIInfoToVAS_descriptor_;
}

const IndConfAllMPIInfoToVAS& IndConfAllMPIInfoToVAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndConfAllMPIInfoToVAS* IndConfAllMPIInfoToVAS::default_instance_ = NULL;

IndConfAllMPIInfoToVAS* IndConfAllMPIInfoToVAS::New() const {
  return new IndConfAllMPIInfoToVAS;
}

void IndConfAllMPIInfoToVAS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndConfAllMPIInfoToVAS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mpis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndConfAllMPIInfoToVAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndConfAllMPIInfoToVAS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        break;
      }

      // repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
      case 4: {
        if (tag == 34) {
         parse_mpis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mpis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mpis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndConfAllMPIInfoToVAS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndConfAllMPIInfoToVAS)
  return false;
#undef DO_
}

void IndConfAllMPIInfoToVAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndConfAllMPIInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mpis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndConfAllMPIInfoToVAS)
}

::google::protobuf::uint8* IndConfAllMPIInfoToVAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndConfAllMPIInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
  for (int i = 0; i < this->mpis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mpis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndConfAllMPIInfoToVAS)
  return target;
}

int IndConfAllMPIInfoToVAS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  // repeated .SRMsgs.IndConfAllMPIInfoToVAS.MPIsInConf mpis = 4;
  total_size += 1 * this->mpis_size();
  for (int i = 0; i < this->mpis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mpis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndConfAllMPIInfoToVAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndConfAllMPIInfoToVAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndConfAllMPIInfoToVAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndConfAllMPIInfoToVAS::MergeFrom(const IndConfAllMPIInfoToVAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  mpis_.MergeFrom(from.mpis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndConfAllMPIInfoToVAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndConfAllMPIInfoToVAS::CopyFrom(const IndConfAllMPIInfoToVAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndConfAllMPIInfoToVAS::IsInitialized() const {

  return true;
}

void IndConfAllMPIInfoToVAS::Swap(IndConfAllMPIInfoToVAS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    mpis_.Swap(&other->mpis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndConfAllMPIInfoToVAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndConfAllMPIInfoToVAS_descriptor_;
  metadata.reflection = IndConfAllMPIInfoToVAS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMPIInfoToVAS::kConfidFieldNumber;
const int IndMPIInfoToVAS::kMpichannelidFieldNumber;
const int IndMPIInfoToVAS::kAddordelFieldNumber;
const int IndMPIInfoToVAS::kVasidFieldNumber;
#endif  // !_MSC_VER

IndMPIInfoToVAS::IndMPIInfoToVAS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMPIInfoToVAS)
}

void IndMPIInfoToVAS::InitAsDefaultInstance() {
}

IndMPIInfoToVAS::IndMPIInfoToVAS(const IndMPIInfoToVAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMPIInfoToVAS)
}

void IndMPIInfoToVAS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mpichannelid_ = 0u;
  addordel_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMPIInfoToVAS::~IndMPIInfoToVAS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMPIInfoToVAS)
  SharedDtor();
}

void IndMPIInfoToVAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndMPIInfoToVAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMPIInfoToVAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMPIInfoToVAS_descriptor_;
}

const IndMPIInfoToVAS& IndMPIInfoToVAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndMPIInfoToVAS* IndMPIInfoToVAS::default_instance_ = NULL;

IndMPIInfoToVAS* IndMPIInfoToVAS::New() const {
  return new IndMPIInfoToVAS;
}

void IndMPIInfoToVAS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMPIInfoToVAS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMPIInfoToVAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMPIInfoToVAS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 3;
      case 3: {
        if (tag == 24) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 4;
      case 4: {
        if (tag == 32) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMPIInfoToVAS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMPIInfoToVAS)
  return false;
#undef DO_
}

void IndMPIInfoToVAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMPIInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpichannelid(), output);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addordel(), output);
  }

  // optional uint32 vasid = 4;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vasid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMPIInfoToVAS)
}

::google::protobuf::uint8* IndMPIInfoToVAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMPIInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpichannelid(), target);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addordel(), target);
  }

  // optional uint32 vasid = 4;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vasid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMPIInfoToVAS)
  return target;
}

int IndMPIInfoToVAS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mpichannelid = 2;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 addordel = 3;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint32 vasid = 4;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMPIInfoToVAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMPIInfoToVAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMPIInfoToVAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMPIInfoToVAS::MergeFrom(const IndMPIInfoToVAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMPIInfoToVAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMPIInfoToVAS::CopyFrom(const IndMPIInfoToVAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMPIInfoToVAS::IsInitialized() const {

  return true;
}

void IndMPIInfoToVAS::Swap(IndMPIInfoToVAS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(addordel_, other->addordel_);
    std::swap(vasid_, other->vasid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMPIInfoToVAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMPIInfoToVAS_descriptor_;
  metadata.reflection = IndMPIInfoToVAS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndScreenInfoToVAS::kConfidFieldNumber;
const int IndScreenInfoToVAS::kMpichannelidFieldNumber;
const int IndScreenInfoToVAS::kScreenidFieldNumber;
const int IndScreenInfoToVAS::kScreentypeFieldNumber;
const int IndScreenInfoToVAS::kAddordelFieldNumber;
const int IndScreenInfoToVAS::kVasidFieldNumber;
#endif  // !_MSC_VER

IndScreenInfoToVAS::IndScreenInfoToVAS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndScreenInfoToVAS)
}

void IndScreenInfoToVAS::InitAsDefaultInstance() {
}

IndScreenInfoToVAS::IndScreenInfoToVAS(const IndScreenInfoToVAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndScreenInfoToVAS)
}

void IndScreenInfoToVAS::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mpichannelid_ = 0u;
  screenid_ = 0u;
  screentype_ = 0u;
  addordel_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndScreenInfoToVAS::~IndScreenInfoToVAS() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndScreenInfoToVAS)
  SharedDtor();
}

void IndScreenInfoToVAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndScreenInfoToVAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndScreenInfoToVAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndScreenInfoToVAS_descriptor_;
}

const IndScreenInfoToVAS& IndScreenInfoToVAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndScreenInfoToVAS* IndScreenInfoToVAS::default_instance_ = NULL;

IndScreenInfoToVAS* IndScreenInfoToVAS::New() const {
  return new IndScreenInfoToVAS;
}

void IndScreenInfoToVAS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndScreenInfoToVAS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, vasid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndScreenInfoToVAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndScreenInfoToVAS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mpichannelid;
        break;
      }

      // optional uint32 mpichannelid = 2;
      case 2: {
        if (tag == 16) {
         parse_mpichannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpichannelid_)));
          set_has_mpichannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 3;
      case 3: {
        if (tag == 24) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_screentype;
        break;
      }

      // optional uint32 screentype = 4;
      case 4: {
        if (tag == 32) {
         parse_screentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screentype_)));
          set_has_screentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 5;
      case 5: {
        if (tag == 40) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 6;
      case 6: {
        if (tag == 48) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndScreenInfoToVAS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndScreenInfoToVAS)
  return false;
#undef DO_
}

void IndScreenInfoToVAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndScreenInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpichannelid(), output);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screenid(), output);
  }

  // optional uint32 screentype = 4;
  if (has_screentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->screentype(), output);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addordel(), output);
  }

  // optional uint32 vasid = 6;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vasid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndScreenInfoToVAS)
}

::google::protobuf::uint8* IndScreenInfoToVAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndScreenInfoToVAS)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mpichannelid = 2;
  if (has_mpichannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpichannelid(), target);
  }

  // optional uint32 screenid = 3;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screenid(), target);
  }

  // optional uint32 screentype = 4;
  if (has_screentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->screentype(), target);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addordel(), target);
  }

  // optional uint32 vasid = 6;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vasid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndScreenInfoToVAS)
  return target;
}

int IndScreenInfoToVAS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mpichannelid = 2;
    if (has_mpichannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpichannelid());
    }

    // optional uint32 screenid = 3;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 screentype = 4;
    if (has_screentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screentype());
    }

    // optional uint32 addordel = 5;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint32 vasid = 6;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndScreenInfoToVAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndScreenInfoToVAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndScreenInfoToVAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndScreenInfoToVAS::MergeFrom(const IndScreenInfoToVAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mpichannelid()) {
      set_mpichannelid(from.mpichannelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_screentype()) {
      set_screentype(from.screentype());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndScreenInfoToVAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndScreenInfoToVAS::CopyFrom(const IndScreenInfoToVAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndScreenInfoToVAS::IsInitialized() const {

  return true;
}

void IndScreenInfoToVAS::Swap(IndScreenInfoToVAS* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mpichannelid_, other->mpichannelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(screentype_, other->screentype_);
    std::swap(addordel_, other->addordel_);
    std::swap(vasid_, other->vasid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndScreenInfoToVAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndScreenInfoToVAS_descriptor_;
  metadata.reflection = IndScreenInfoToVAS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspVASCreateConf::kIsokFieldNumber;
const int RspVASCreateConf::kConfidFieldNumber;
const int RspVASCreateConf::kMcidFieldNumber;
const int RspVASCreateConf::kVasidFieldNumber;
const int RspVASCreateConf::kVaschannelidFieldNumber;
const int RspVASCreateConf::kRelatednetmpidFieldNumber;
const int RspVASCreateConf::kFailreasonFieldNumber;
const int RspVASCreateConf::kErrorcodeFieldNumber;
const int RspVASCreateConf::kVaschantypeFieldNumber;
#endif  // !_MSC_VER

RspVASCreateConf::RspVASCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspVASCreateConf)
}

void RspVASCreateConf::InitAsDefaultInstance() {
}

RspVASCreateConf::RspVASCreateConf(const RspVASCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspVASCreateConf)
}

void RspVASCreateConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  relatednetmpid_ = 0u;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  vaschantype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspVASCreateConf::~RspVASCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspVASCreateConf)
  SharedDtor();
}

void RspVASCreateConf::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void RspVASCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspVASCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspVASCreateConf_descriptor_;
}

const RspVASCreateConf& RspVASCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

RspVASCreateConf* RspVASCreateConf::default_instance_ = NULL;

RspVASCreateConf* RspVASCreateConf::New() const {
  return new RspVASCreateConf;
}

void RspVASCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspVASCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, vaschannelid_);
    ZR_(relatednetmpid_, errorcode_);
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }
  vaschantype_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspVASCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspVASCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 3;
      case 3: {
        if (tag == 24) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 4;
      case 4: {
        if (tag == 32) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 5;
      case 5: {
        if (tag == 40) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relatednetmpid;
        break;
      }

      // optional uint32 relatednetmpid = 6;
      case 6: {
        if (tag == 48) {
         parse_relatednetmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relatednetmpid_)));
          set_has_relatednetmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_failreason;
        break;
      }

      // optional string failreason = 7;
      case 7: {
        if (tag == 58) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 8;
      case 8: {
        if (tag == 64) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vaschantype;
        break;
      }

      // optional uint32 vaschantype = 9;
      case 9: {
        if (tag == 72) {
         parse_vaschantype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschantype_)));
          set_has_vaschantype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspVASCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspVASCreateConf)
  return false;
#undef DO_
}

void RspVASCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspVASCreateConf)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confid(), output);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcid(), output);
  }

  // optional uint32 vasid = 4;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 5;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vaschannelid(), output);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relatednetmpid(), output);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->failreason(), output);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->errorcode(), output);
  }

  // optional uint32 vaschantype = 9;
  if (has_vaschantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vaschantype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspVASCreateConf)
}

::google::protobuf::uint8* RspVASCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspVASCreateConf)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint64 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confid(), target);
  }

  // optional uint32 mcid = 3;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcid(), target);
  }

  // optional uint32 vasid = 4;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 5;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vaschannelid(), target);
  }

  // optional uint32 relatednetmpid = 6;
  if (has_relatednetmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relatednetmpid(), target);
  }

  // optional string failreason = 7;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->failreason(), target);
  }

  // optional uint32 errorcode = 8;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->errorcode(), target);
  }

  // optional uint32 vaschantype = 9;
  if (has_vaschantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vaschantype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspVASCreateConf)
  return target;
}

int RspVASCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 3;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 4;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 5;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 relatednetmpid = 6;
    if (has_relatednetmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relatednetmpid());
    }

    // optional string failreason = 7;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint32 errorcode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vaschantype = 9;
    if (has_vaschantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschantype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspVASCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspVASCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspVASCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspVASCreateConf::MergeFrom(const RspVASCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_relatednetmpid()) {
      set_relatednetmpid(from.relatednetmpid());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vaschantype()) {
      set_vaschantype(from.vaschantype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspVASCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspVASCreateConf::CopyFrom(const RspVASCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspVASCreateConf::IsInitialized() const {

  return true;
}

void RspVASCreateConf::Swap(RspVASCreateConf* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(relatednetmpid_, other->relatednetmpid_);
    std::swap(failreason_, other->failreason_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(vaschantype_, other->vaschantype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspVASCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspVASCreateConf_descriptor_;
  metadata.reflection = RspVASCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndVASHeartBeatToMC::kMcidFieldNumber;
const int IndVASHeartBeatToMC::kVasidFieldNumber;
#endif  // !_MSC_VER

IndVASHeartBeatToMC::IndVASHeartBeatToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASHeartBeatToMC)
}

void IndVASHeartBeatToMC::InitAsDefaultInstance() {
}

IndVASHeartBeatToMC::IndVASHeartBeatToMC(const IndVASHeartBeatToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASHeartBeatToMC)
}

void IndVASHeartBeatToMC::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASHeartBeatToMC::~IndVASHeartBeatToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASHeartBeatToMC)
  SharedDtor();
}

void IndVASHeartBeatToMC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASHeartBeatToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASHeartBeatToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASHeartBeatToMC_descriptor_;
}

const IndVASHeartBeatToMC& IndVASHeartBeatToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndVASHeartBeatToMC* IndVASHeartBeatToMC::default_instance_ = NULL;

IndVASHeartBeatToMC* IndVASHeartBeatToMC::New() const {
  return new IndVASHeartBeatToMC;
}

void IndVASHeartBeatToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASHeartBeatToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASHeartBeatToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASHeartBeatToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 2;
      case 2: {
        if (tag == 16) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASHeartBeatToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASHeartBeatToMC)
  return false;
#undef DO_
}

void IndVASHeartBeatToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcid(), output);
  }

  // optional uint32 vasid = 2;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vasid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASHeartBeatToMC)
}

::google::protobuf::uint8* IndVASHeartBeatToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASHeartBeatToMC)
  // optional uint32 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcid(), target);
  }

  // optional uint32 vasid = 2;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vasid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASHeartBeatToMC)
  return target;
}

int IndVASHeartBeatToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 2;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASHeartBeatToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASHeartBeatToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASHeartBeatToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASHeartBeatToMC::MergeFrom(const IndVASHeartBeatToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASHeartBeatToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASHeartBeatToMC::CopyFrom(const IndVASHeartBeatToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASHeartBeatToMC::IsInitialized() const {

  return true;
}

void IndVASHeartBeatToMC::Swap(IndVASHeartBeatToMC* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASHeartBeatToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASHeartBeatToMC_descriptor_;
  metadata.reflection = IndVASHeartBeatToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndVASMatchResult_videoMatch::kUseridFieldNumber;
const int IndVASMatchResult_videoMatch::kRateFieldNumber;
#endif  // !_MSC_VER

IndVASMatchResult_videoMatch::IndVASMatchResult_videoMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASMatchResult.videoMatch)
}

void IndVASMatchResult_videoMatch::InitAsDefaultInstance() {
}

IndVASMatchResult_videoMatch::IndVASMatchResult_videoMatch(const IndVASMatchResult_videoMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASMatchResult.videoMatch)
}

void IndVASMatchResult_videoMatch::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASMatchResult_videoMatch::~IndVASMatchResult_videoMatch() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASMatchResult.videoMatch)
  SharedDtor();
}

void IndVASMatchResult_videoMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASMatchResult_videoMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASMatchResult_videoMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASMatchResult_videoMatch_descriptor_;
}

const IndVASMatchResult_videoMatch& IndVASMatchResult_videoMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndVASMatchResult_videoMatch* IndVASMatchResult_videoMatch::default_instance_ = NULL;

IndVASMatchResult_videoMatch* IndVASMatchResult_videoMatch::New() const {
  return new IndVASMatchResult_videoMatch;
}

void IndVASMatchResult_videoMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASMatchResult_videoMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASMatchResult_videoMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASMatchResult.videoMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASMatchResult.videoMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASMatchResult.videoMatch)
  return false;
#undef DO_
}

void IndVASMatchResult_videoMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASMatchResult.videoMatch)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASMatchResult.videoMatch)
}

::google::protobuf::uint8* IndVASMatchResult_videoMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASMatchResult.videoMatch)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASMatchResult.videoMatch)
  return target;
}

int IndVASMatchResult_videoMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASMatchResult_videoMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASMatchResult_videoMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASMatchResult_videoMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASMatchResult_videoMatch::MergeFrom(const IndVASMatchResult_videoMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASMatchResult_videoMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASMatchResult_videoMatch::CopyFrom(const IndVASMatchResult_videoMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASMatchResult_videoMatch::IsInitialized() const {

  return true;
}

void IndVASMatchResult_videoMatch::Swap(IndVASMatchResult_videoMatch* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASMatchResult_videoMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASMatchResult_videoMatch_descriptor_;
  metadata.reflection = IndVASMatchResult_videoMatch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndVASMatchResult_MatchResult::kChannelidFieldNumber;
const int IndVASMatchResult_MatchResult::kScreenidFieldNumber;
const int IndVASMatchResult_MatchResult::kVaschannelidFieldNumber;
const int IndVASMatchResult_MatchResult::kSrcmapidFieldNumber;
const int IndVASMatchResult_MatchResult::kVideoMatchsFieldNumber;
const int IndVASMatchResult_MatchResult::kHasmismatchFieldNumber;
#endif  // !_MSC_VER

IndVASMatchResult_MatchResult::IndVASMatchResult_MatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASMatchResult.MatchResult)
}

void IndVASMatchResult_MatchResult::InitAsDefaultInstance() {
}

IndVASMatchResult_MatchResult::IndVASMatchResult_MatchResult(const IndVASMatchResult_MatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASMatchResult.MatchResult)
}

void IndVASMatchResult_MatchResult::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = 0u;
  screenid_ = 0u;
  vaschannelid_ = 0u;
  srcmapid_ = 0u;
  hasmismatch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASMatchResult_MatchResult::~IndVASMatchResult_MatchResult() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASMatchResult.MatchResult)
  SharedDtor();
}

void IndVASMatchResult_MatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASMatchResult_MatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASMatchResult_MatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASMatchResult_MatchResult_descriptor_;
}

const IndVASMatchResult_MatchResult& IndVASMatchResult_MatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndVASMatchResult_MatchResult* IndVASMatchResult_MatchResult::default_instance_ = NULL;

IndVASMatchResult_MatchResult* IndVASMatchResult_MatchResult::New() const {
  return new IndVASMatchResult_MatchResult;
}

void IndVASMatchResult_MatchResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASMatchResult_MatchResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(channelid_, srcmapid_);
    hasmismatch_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  videomatchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASMatchResult_MatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASMatchResult.MatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 3;
      case 3: {
        if (tag == 24) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcmapid;
        break;
      }

      // optional uint32 srcmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcmapid_)));
          set_has_srcmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_videoMatchs;
        break;
      }

      // repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
      case 5: {
        if (tag == 42) {
         parse_videoMatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videomatchs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_videoMatchs;
        if (input->ExpectTag(48)) goto parse_hasmismatch;
        break;
      }

      // optional bool hasmismatch = 6;
      case 6: {
        if (tag == 48) {
         parse_hasmismatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmismatch_)));
          set_has_hasmismatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASMatchResult.MatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASMatchResult.MatchResult)
  return false;
#undef DO_
}

void IndVASMatchResult_MatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASMatchResult.MatchResult)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaschannelid(), output);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcmapid(), output);
  }

  // repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
  for (int i = 0; i < this->videomatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->videomatchs(i), output);
  }

  // optional bool hasmismatch = 6;
  if (has_hasmismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasmismatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASMatchResult.MatchResult)
}

::google::protobuf::uint8* IndVASMatchResult_MatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASMatchResult.MatchResult)
  // optional uint32 channelid = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 vaschannelid = 3;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaschannelid(), target);
  }

  // optional uint32 srcmapid = 4;
  if (has_srcmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcmapid(), target);
  }

  // repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
  for (int i = 0; i < this->videomatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->videomatchs(i), target);
  }

  // optional bool hasmismatch = 6;
  if (has_hasmismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasmismatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASMatchResult.MatchResult)
  return target;
}

int IndVASMatchResult_MatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelid = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 vaschannelid = 3;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

    // optional uint32 srcmapid = 4;
    if (has_srcmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcmapid());
    }

    // optional bool hasmismatch = 6;
    if (has_hasmismatch()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SRMsgs.IndVASMatchResult.videoMatch videoMatchs = 5;
  total_size += 1 * this->videomatchs_size();
  for (int i = 0; i < this->videomatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videomatchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASMatchResult_MatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASMatchResult_MatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASMatchResult_MatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASMatchResult_MatchResult::MergeFrom(const IndVASMatchResult_MatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  videomatchs_.MergeFrom(from.videomatchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
    if (from.has_srcmapid()) {
      set_srcmapid(from.srcmapid());
    }
    if (from.has_hasmismatch()) {
      set_hasmismatch(from.hasmismatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASMatchResult_MatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASMatchResult_MatchResult::CopyFrom(const IndVASMatchResult_MatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASMatchResult_MatchResult::IsInitialized() const {

  return true;
}

void IndVASMatchResult_MatchResult::Swap(IndVASMatchResult_MatchResult* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(screenid_, other->screenid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    std::swap(srcmapid_, other->srcmapid_);
    videomatchs_.Swap(&other->videomatchs_);
    std::swap(hasmismatch_, other->hasmismatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASMatchResult_MatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASMatchResult_MatchResult_descriptor_;
  metadata.reflection = IndVASMatchResult_MatchResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndVASMatchResult::kConfidFieldNumber;
const int IndVASMatchResult::kMcidFieldNumber;
const int IndVASMatchResult::kVasidFieldNumber;
const int IndVASMatchResult::kMatchresultsFieldNumber;
#endif  // !_MSC_VER

IndVASMatchResult::IndVASMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASMatchResult)
}

void IndVASMatchResult::InitAsDefaultInstance() {
}

IndVASMatchResult::IndVASMatchResult(const IndVASMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASMatchResult)
}

void IndVASMatchResult::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASMatchResult::~IndVASMatchResult() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASMatchResult)
  SharedDtor();
}

void IndVASMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASMatchResult_descriptor_;
}

const IndVASMatchResult& IndVASMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

IndVASMatchResult* IndVASMatchResult::default_instance_ = NULL;

IndVASMatchResult* IndVASMatchResult::New() const {
  return new IndVASMatchResult;
}

void IndVASMatchResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASMatchResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(confid_, vasid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  matchresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASMatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matchresults;
        break;
      }

      // repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
      case 4: {
        if (tag == 34) {
         parse_matchresults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_matchresults;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASMatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASMatchResult)
  return false;
#undef DO_
}

void IndVASMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASMatchResult)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
  for (int i = 0; i < this->matchresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->matchresults(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASMatchResult)
}

::google::protobuf::uint8* IndVASMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASMatchResult)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
  for (int i = 0; i < this->matchresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->matchresults(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASMatchResult)
  return target;
}

int IndVASMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

  }
  // repeated .SRMsgs.IndVASMatchResult.MatchResult matchresults = 4;
  total_size += 1 * this->matchresults_size();
  for (int i = 0; i < this->matchresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchresults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASMatchResult::MergeFrom(const IndVASMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchresults_.MergeFrom(from.matchresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASMatchResult::CopyFrom(const IndVASMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASMatchResult::IsInitialized() const {

  return true;
}

void IndVASMatchResult::Swap(IndVASMatchResult* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    matchresults_.Swap(&other->matchresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASMatchResult_descriptor_;
  metadata.reflection = IndVASMatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdMCVASSeleteVideo_TermInfo::kTeridFieldNumber;
const int CmdMCVASSeleteVideo_TermInfo::kScreenidFieldNumber;
const int CmdMCVASSeleteVideo_TermInfo::kVideosizeFieldNumber;
const int CmdMCVASSeleteVideo_TermInfo::kRecvfpsFieldNumber;
#endif  // !_MSC_VER

CmdMCVASSeleteVideo_TermInfo::CmdMCVASSeleteVideo_TermInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
}

void CmdMCVASSeleteVideo_TermInfo::InitAsDefaultInstance() {
}

CmdMCVASSeleteVideo_TermInfo::CmdMCVASSeleteVideo_TermInfo(const CmdMCVASSeleteVideo_TermInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
}

void CmdMCVASSeleteVideo_TermInfo::SharedCtor() {
  _cached_size_ = 0;
  terid_ = 0u;
  screenid_ = 0u;
  videosize_ = 0u;
  recvfps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMCVASSeleteVideo_TermInfo::~CmdMCVASSeleteVideo_TermInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  SharedDtor();
}

void CmdMCVASSeleteVideo_TermInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMCVASSeleteVideo_TermInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMCVASSeleteVideo_TermInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMCVASSeleteVideo_TermInfo_descriptor_;
}

const CmdMCVASSeleteVideo_TermInfo& CmdMCVASSeleteVideo_TermInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdMCVASSeleteVideo_TermInfo* CmdMCVASSeleteVideo_TermInfo::default_instance_ = NULL;

CmdMCVASSeleteVideo_TermInfo* CmdMCVASSeleteVideo_TermInfo::New() const {
  return new CmdMCVASSeleteVideo_TermInfo;
}

void CmdMCVASSeleteVideo_TermInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMCVASSeleteVideo_TermInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(terid_, recvfps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMCVASSeleteVideo_TermInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 terid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terid_)));
          set_has_terid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screenid;
        break;
      }

      // optional uint32 screenid = 2;
      case 2: {
        if (tag == 16) {
         parse_screenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 3;
      case 3: {
        if (tag == 24) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvfps;
        break;
      }

      // optional uint32 recvfps = 4;
      case 4: {
        if (tag == 32) {
         parse_recvfps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvfps_)));
          set_has_recvfps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  return false;
#undef DO_
}

void CmdMCVASSeleteVideo_TermInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->terid(), output);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screenid(), output);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->videosize(), output);
  }

  // optional uint32 recvfps = 4;
  if (has_recvfps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recvfps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
}

::google::protobuf::uint8* CmdMCVASSeleteVideo_TermInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  // optional uint32 terid = 1;
  if (has_terid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->terid(), target);
  }

  // optional uint32 screenid = 2;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screenid(), target);
  }

  // optional uint32 videosize = 3;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->videosize(), target);
  }

  // optional uint32 recvfps = 4;
  if (has_recvfps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recvfps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMCVASSeleteVideo.TermInfo)
  return target;
}

int CmdMCVASSeleteVideo_TermInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 terid = 1;
    if (has_terid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terid());
    }

    // optional uint32 screenid = 2;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenid());
    }

    // optional uint32 videosize = 3;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

    // optional uint32 recvfps = 4;
    if (has_recvfps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvfps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMCVASSeleteVideo_TermInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMCVASSeleteVideo_TermInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMCVASSeleteVideo_TermInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMCVASSeleteVideo_TermInfo::MergeFrom(const CmdMCVASSeleteVideo_TermInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terid()) {
      set_terid(from.terid());
    }
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
    if (from.has_recvfps()) {
      set_recvfps(from.recvfps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMCVASSeleteVideo_TermInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMCVASSeleteVideo_TermInfo::CopyFrom(const CmdMCVASSeleteVideo_TermInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMCVASSeleteVideo_TermInfo::IsInitialized() const {

  return true;
}

void CmdMCVASSeleteVideo_TermInfo::Swap(CmdMCVASSeleteVideo_TermInfo* other) {
  if (other != this) {
    std::swap(terid_, other->terid_);
    std::swap(screenid_, other->screenid_);
    std::swap(videosize_, other->videosize_);
    std::swap(recvfps_, other->recvfps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMCVASSeleteVideo_TermInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMCVASSeleteVideo_TermInfo_descriptor_;
  metadata.reflection = CmdMCVASSeleteVideo_TermInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdMCVASSeleteVideo::kConfidFieldNumber;
const int CmdMCVASSeleteVideo::kMcidFieldNumber;
const int CmdMCVASSeleteVideo::kVasidFieldNumber;
const int CmdMCVASSeleteVideo::kVaschannelidFieldNumber;
const int CmdMCVASSeleteVideo::kSeleteterinfoFieldNumber;
#endif  // !_MSC_VER

CmdMCVASSeleteVideo::CmdMCVASSeleteVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdMCVASSeleteVideo)
}

void CmdMCVASSeleteVideo::InitAsDefaultInstance() {
}

CmdMCVASSeleteVideo::CmdMCVASSeleteVideo(const CmdMCVASSeleteVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdMCVASSeleteVideo)
}

void CmdMCVASSeleteVideo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  mcid_ = 0u;
  vasid_ = 0u;
  vaschannelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdMCVASSeleteVideo::~CmdMCVASSeleteVideo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdMCVASSeleteVideo)
  SharedDtor();
}

void CmdMCVASSeleteVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdMCVASSeleteVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdMCVASSeleteVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdMCVASSeleteVideo_descriptor_;
}

const CmdMCVASSeleteVideo& CmdMCVASSeleteVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mc_5fvas_2eproto();
  return *default_instance_;
}

CmdMCVASSeleteVideo* CmdMCVASSeleteVideo::default_instance_ = NULL;

CmdMCVASSeleteVideo* CmdMCVASSeleteVideo::New() const {
  return new CmdMCVASSeleteVideo;
}

void CmdMCVASSeleteVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdMCVASSeleteVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, vasid_);
    vaschannelid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seleteterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdMCVASSeleteVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdMCVASSeleteVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint32 mcid = 2;
      case 2: {
        if (tag == 16) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vasid;
        break;
      }

      // optional uint32 vasid = 3;
      case 3: {
        if (tag == 24) {
         parse_vasid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vasid_)));
          set_has_vasid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vaschannelid;
        break;
      }

      // optional uint32 vaschannelid = 4;
      case 4: {
        if (tag == 32) {
         parse_vaschannelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaschannelid_)));
          set_has_vaschannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seleteterinfo;
        break;
      }

      // repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_seleteterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seleteterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seleteterinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdMCVASSeleteVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdMCVASSeleteVideo)
  return false;
#undef DO_
}

void CmdMCVASSeleteVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdMCVASSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcid(), output);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vasid(), output);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vaschannelid(), output);
  }

  // repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seleteterinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdMCVASSeleteVideo)
}

::google::protobuf::uint8* CmdMCVASSeleteVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdMCVASSeleteVideo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint32 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcid(), target);
  }

  // optional uint32 vasid = 3;
  if (has_vasid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vasid(), target);
  }

  // optional uint32 vaschannelid = 4;
  if (has_vaschannelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vaschannelid(), target);
  }

  // repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->seleteterinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdMCVASSeleteVideo)
  return target;
}

int CmdMCVASSeleteVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcid());
    }

    // optional uint32 vasid = 3;
    if (has_vasid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vasid());
    }

    // optional uint32 vaschannelid = 4;
    if (has_vaschannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vaschannelid());
    }

  }
  // repeated .SRMsgs.CmdMCVASSeleteVideo.TermInfo seleteterinfo = 5;
  total_size += 1 * this->seleteterinfo_size();
  for (int i = 0; i < this->seleteterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seleteterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdMCVASSeleteVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdMCVASSeleteVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdMCVASSeleteVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdMCVASSeleteVideo::MergeFrom(const CmdMCVASSeleteVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  seleteterinfo_.MergeFrom(from.seleteterinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_vasid()) {
      set_vasid(from.vasid());
    }
    if (from.has_vaschannelid()) {
      set_vaschannelid(from.vaschannelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdMCVASSeleteVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMCVASSeleteVideo::CopyFrom(const CmdMCVASSeleteVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMCVASSeleteVideo::IsInitialized() const {

  return true;
}

void CmdMCVASSeleteVideo::Swap(CmdMCVASSeleteVideo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(mcid_, other->mcid_);
    std::swap(vasid_, other->vasid_);
    std::swap(vaschannelid_, other->vaschannelid_);
    seleteterinfo_.Swap(&other->seleteterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdMCVASSeleteVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdMCVASSeleteVideo_descriptor_;
  metadata.reflection = CmdMCVASSeleteVideo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
