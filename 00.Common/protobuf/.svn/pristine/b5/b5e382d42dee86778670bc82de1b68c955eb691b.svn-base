// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc_relayserver.proto

#ifndef PROTOBUF_mc_5frelayserver_2eproto__INCLUDED
#define PROTOBUF_mc_5frelayserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mc_5frelayserver_2eproto();
void protobuf_AssignDesc_mc_5frelayserver_2eproto();
void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

class IndMCHeartBeatToRelayserver;
class ReqTerJoinConfToRelayserver;
class ReqTerJoinConfToRelayserver_IPPORT;
class ReqTerJoinConfToRelayserver_AddrInfo;
class IndRelayserverHeartBeatToMC;
class RspTerJoinConfFromRelayserver;
class RspTerJoinConfFromRelayserver_IPPORT;

// ===================================================================

class IndMCHeartBeatToRelayserver : public ::google::protobuf::Message {
 public:
  IndMCHeartBeatToRelayserver();
  virtual ~IndMCHeartBeatToRelayserver();

  IndMCHeartBeatToRelayserver(const IndMCHeartBeatToRelayserver& from);

  inline IndMCHeartBeatToRelayserver& operator=(const IndMCHeartBeatToRelayserver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndMCHeartBeatToRelayserver& default_instance();

  void Swap(IndMCHeartBeatToRelayserver* other);

  // implements Message ----------------------------------------------

  IndMCHeartBeatToRelayserver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndMCHeartBeatToRelayserver& from);
  void MergeFrom(const IndMCHeartBeatToRelayserver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 relaysvrid = 2;
  inline bool has_relaysvrid() const;
  inline void clear_relaysvrid();
  static const int kRelaysvridFieldNumber = 2;
  inline ::google::protobuf::uint32 relaysvrid() const;
  inline void set_relaysvrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndMCHeartBeatToRelayserver)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_relaysvrid();
  inline void clear_has_relaysvrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 relaysvrid_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static IndMCHeartBeatToRelayserver* default_instance_;
};
// -------------------------------------------------------------------

class ReqTerJoinConfToRelayserver_IPPORT : public ::google::protobuf::Message {
 public:
  ReqTerJoinConfToRelayserver_IPPORT();
  virtual ~ReqTerJoinConfToRelayserver_IPPORT();

  ReqTerJoinConfToRelayserver_IPPORT(const ReqTerJoinConfToRelayserver_IPPORT& from);

  inline ReqTerJoinConfToRelayserver_IPPORT& operator=(const ReqTerJoinConfToRelayserver_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTerJoinConfToRelayserver_IPPORT& default_instance();

  void Swap(ReqTerJoinConfToRelayserver_IPPORT* other);

  // implements Message ----------------------------------------------

  ReqTerJoinConfToRelayserver_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTerJoinConfToRelayserver_IPPORT& from);
  void MergeFrom(const ReqTerJoinConfToRelayserver_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static ReqTerJoinConfToRelayserver_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class ReqTerJoinConfToRelayserver_AddrInfo : public ::google::protobuf::Message {
 public:
  ReqTerJoinConfToRelayserver_AddrInfo();
  virtual ~ReqTerJoinConfToRelayserver_AddrInfo();

  ReqTerJoinConfToRelayserver_AddrInfo(const ReqTerJoinConfToRelayserver_AddrInfo& from);

  inline ReqTerJoinConfToRelayserver_AddrInfo& operator=(const ReqTerJoinConfToRelayserver_AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTerJoinConfToRelayserver_AddrInfo& default_instance();

  void Swap(ReqTerJoinConfToRelayserver_AddrInfo* other);

  // implements Message ----------------------------------------------

  ReqTerJoinConfToRelayserver_AddrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTerJoinConfToRelayserver_AddrInfo& from);
  void MergeFrom(const ReqTerJoinConfToRelayserver_AddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrtype = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
  inline int ipportinfos_size() const;
  inline void clear_ipportinfos();
  static const int kIpportinfosFieldNumber = 2;
  inline const ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT& ipportinfos(int index) const;
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* mutable_ipportinfos(int index);
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* add_ipportinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT >&
      ipportinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT >*
      mutable_ipportinfos();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT > ipportinfos_;
  ::google::protobuf::uint32 svrtype_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static ReqTerJoinConfToRelayserver_AddrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqTerJoinConfToRelayserver : public ::google::protobuf::Message {
 public:
  ReqTerJoinConfToRelayserver();
  virtual ~ReqTerJoinConfToRelayserver();

  ReqTerJoinConfToRelayserver(const ReqTerJoinConfToRelayserver& from);

  inline ReqTerJoinConfToRelayserver& operator=(const ReqTerJoinConfToRelayserver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTerJoinConfToRelayserver& default_instance();

  void Swap(ReqTerJoinConfToRelayserver* other);

  // implements Message ----------------------------------------------

  ReqTerJoinConfToRelayserver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTerJoinConfToRelayserver& from);
  void MergeFrom(const ReqTerJoinConfToRelayserver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqTerJoinConfToRelayserver_IPPORT IPPORT;
  typedef ReqTerJoinConfToRelayserver_AddrInfo AddrInfo;

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 relaysvrid = 2;
  inline bool has_relaysvrid() const;
  inline void clear_relaysvrid();
  static const int kRelaysvridFieldNumber = 2;
  inline ::google::protobuf::uint32 relaysvrid() const;
  inline void set_relaysvrid(::google::protobuf::uint32 value);

  // optional uint64 confid = 3;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 3;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 suid = 4;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 4;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
  inline bool has_teraddrs() const;
  inline void clear_teraddrs();
  static const int kTeraddrsFieldNumber = 5;
  inline const ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT& teraddrs() const;
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* mutable_teraddrs();
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* release_teraddrs();
  inline void set_allocated_teraddrs(::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* teraddrs);

  // repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
  inline int svraddrs_size() const;
  inline void clear_svraddrs();
  static const int kSvraddrsFieldNumber = 6;
  inline const ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo& svraddrs(int index) const;
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo* mutable_svraddrs(int index);
  inline ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo* add_svraddrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo >&
      svraddrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo >*
      mutable_svraddrs();

  // @@protoc_insertion_point(class_scope:SRMsgs.ReqTerJoinConfToRelayserver)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_relaysvrid();
  inline void clear_has_relaysvrid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_teraddrs();
  inline void clear_has_teraddrs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 relaysvrid_;
  ::google::protobuf::uint64 confid_;
  ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* teraddrs_;
  ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo > svraddrs_;
  ::google::protobuf::uint32 suid_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static ReqTerJoinConfToRelayserver* default_instance_;
};
// -------------------------------------------------------------------

class IndRelayserverHeartBeatToMC : public ::google::protobuf::Message {
 public:
  IndRelayserverHeartBeatToMC();
  virtual ~IndRelayserverHeartBeatToMC();

  IndRelayserverHeartBeatToMC(const IndRelayserverHeartBeatToMC& from);

  inline IndRelayserverHeartBeatToMC& operator=(const IndRelayserverHeartBeatToMC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndRelayserverHeartBeatToMC& default_instance();

  void Swap(IndRelayserverHeartBeatToMC* other);

  // implements Message ----------------------------------------------

  IndRelayserverHeartBeatToMC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndRelayserverHeartBeatToMC& from);
  void MergeFrom(const IndRelayserverHeartBeatToMC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mcid = 1;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 1;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 relaysvrid = 2;
  inline bool has_relaysvrid() const;
  inline void clear_relaysvrid();
  static const int kRelaysvridFieldNumber = 2;
  inline ::google::protobuf::uint32 relaysvrid() const;
  inline void set_relaysvrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.IndRelayserverHeartBeatToMC)
 private:
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_relaysvrid();
  inline void clear_has_relaysvrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint32 relaysvrid_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static IndRelayserverHeartBeatToMC* default_instance_;
};
// -------------------------------------------------------------------

class RspTerJoinConfFromRelayserver_IPPORT : public ::google::protobuf::Message {
 public:
  RspTerJoinConfFromRelayserver_IPPORT();
  virtual ~RspTerJoinConfFromRelayserver_IPPORT();

  RspTerJoinConfFromRelayserver_IPPORT(const RspTerJoinConfFromRelayserver_IPPORT& from);

  inline RspTerJoinConfFromRelayserver_IPPORT& operator=(const RspTerJoinConfFromRelayserver_IPPORT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspTerJoinConfFromRelayserver_IPPORT& default_instance();

  void Swap(RspTerJoinConfFromRelayserver_IPPORT* other);

  // implements Message ----------------------------------------------

  RspTerJoinConfFromRelayserver_IPPORT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspTerJoinConfFromRelayserver_IPPORT& from);
  void MergeFrom(const RspTerJoinConfFromRelayserver_IPPORT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nettype = 1;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 1;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT)
 private:
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static RspTerJoinConfFromRelayserver_IPPORT* default_instance_;
};
// -------------------------------------------------------------------

class RspTerJoinConfFromRelayserver : public ::google::protobuf::Message {
 public:
  RspTerJoinConfFromRelayserver();
  virtual ~RspTerJoinConfFromRelayserver();

  RspTerJoinConfFromRelayserver(const RspTerJoinConfFromRelayserver& from);

  inline RspTerJoinConfFromRelayserver& operator=(const RspTerJoinConfFromRelayserver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspTerJoinConfFromRelayserver& default_instance();

  void Swap(RspTerJoinConfFromRelayserver* other);

  // implements Message ----------------------------------------------

  RspTerJoinConfFromRelayserver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspTerJoinConfFromRelayserver& from);
  void MergeFrom(const RspTerJoinConfFromRelayserver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RspTerJoinConfFromRelayserver_IPPORT IPPORT;

  // accessors -------------------------------------------------------

  // optional string failreason = 1;
  inline bool has_failreason() const;
  inline void clear_failreason();
  static const int kFailreasonFieldNumber = 1;
  inline const ::std::string& failreason() const;
  inline void set_failreason(const ::std::string& value);
  inline void set_failreason(const char* value);
  inline void set_failreason(const char* value, size_t size);
  inline ::std::string* mutable_failreason();
  inline ::std::string* release_failreason();
  inline void set_allocated_failreason(::std::string* failreason);

  // optional bool isok = 2;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsokFieldNumber = 2;
  inline bool isok() const;
  inline void set_isok(bool value);

  // optional uint32 mcid = 3;
  inline bool has_mcid() const;
  inline void clear_mcid();
  static const int kMcidFieldNumber = 3;
  inline ::google::protobuf::uint32 mcid() const;
  inline void set_mcid(::google::protobuf::uint32 value);

  // optional uint32 relaysvrid = 4;
  inline bool has_relaysvrid() const;
  inline void clear_relaysvrid();
  static const int kRelaysvridFieldNumber = 4;
  inline ::google::protobuf::uint32 relaysvrid() const;
  inline void set_relaysvrid(::google::protobuf::uint32 value);

  // optional uint64 confid = 5;
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfidFieldNumber = 5;
  inline ::google::protobuf::uint64 confid() const;
  inline void set_confid(::google::protobuf::uint64 value);

  // optional uint32 suid = 6;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 6;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
  inline bool has_relaysvraddrs() const;
  inline void clear_relaysvraddrs();
  static const int kRelaysvraddrsFieldNumber = 7;
  inline const ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT& relaysvraddrs() const;
  inline ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* mutable_relaysvraddrs();
  inline ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* release_relaysvraddrs();
  inline void set_allocated_relaysvraddrs(::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* relaysvraddrs);

  // optional uint32 errorcode = 8;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 8;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SRMsgs.RspTerJoinConfFromRelayserver)
 private:
  inline void set_has_failreason();
  inline void clear_has_failreason();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_mcid();
  inline void clear_has_mcid();
  inline void set_has_relaysvrid();
  inline void clear_has_relaysvrid();
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_relaysvraddrs();
  inline void clear_has_relaysvraddrs();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* failreason_;
  bool isok_;
  ::google::protobuf::uint32 mcid_;
  ::google::protobuf::uint64 confid_;
  ::google::protobuf::uint32 relaysvrid_;
  ::google::protobuf::uint32 suid_;
  ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* relaysvraddrs_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_mc_5frelayserver_2eproto();
  friend void protobuf_AssignDesc_mc_5frelayserver_2eproto();
  friend void protobuf_ShutdownFile_mc_5frelayserver_2eproto();

  void InitAsDefaultInstance();
  static RspTerJoinConfFromRelayserver* default_instance_;
};
// ===================================================================


// ===================================================================

// IndMCHeartBeatToRelayserver

// optional uint32 mcid = 1;
inline bool IndMCHeartBeatToRelayserver::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndMCHeartBeatToRelayserver::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndMCHeartBeatToRelayserver::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndMCHeartBeatToRelayserver::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToRelayserver::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToRelayserver.mcid)
  return mcid_;
}
inline void IndMCHeartBeatToRelayserver::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToRelayserver.mcid)
}

// optional uint32 relaysvrid = 2;
inline bool IndMCHeartBeatToRelayserver::has_relaysvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndMCHeartBeatToRelayserver::set_has_relaysvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndMCHeartBeatToRelayserver::clear_has_relaysvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndMCHeartBeatToRelayserver::clear_relaysvrid() {
  relaysvrid_ = 0u;
  clear_has_relaysvrid();
}
inline ::google::protobuf::uint32 IndMCHeartBeatToRelayserver::relaysvrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndMCHeartBeatToRelayserver.relaysvrid)
  return relaysvrid_;
}
inline void IndMCHeartBeatToRelayserver::set_relaysvrid(::google::protobuf::uint32 value) {
  set_has_relaysvrid();
  relaysvrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndMCHeartBeatToRelayserver.relaysvrid)
}

// -------------------------------------------------------------------

// ReqTerJoinConfToRelayserver_IPPORT

// optional uint32 nettype = 1;
inline bool ReqTerJoinConfToRelayserver_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.nettype)
  return nettype_;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.nettype)
}

// optional string ip = 2;
inline bool ReqTerJoinConfToRelayserver_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqTerJoinConfToRelayserver_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
  return *ip_;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
}
inline ::std::string* ReqTerJoinConfToRelayserver_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
  return ip_;
}
inline ::std::string* ReqTerJoinConfToRelayserver_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool ReqTerJoinConfToRelayserver_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.port)
  return port_;
}
inline void ReqTerJoinConfToRelayserver_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.IPPORT.port)
}

// -------------------------------------------------------------------

// ReqTerJoinConfToRelayserver_AddrInfo

// optional uint32 svrtype = 1;
inline bool ReqTerJoinConfToRelayserver_AddrInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTerJoinConfToRelayserver_AddrInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTerJoinConfToRelayserver_AddrInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTerJoinConfToRelayserver_AddrInfo::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver_AddrInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.svrtype)
  return svrtype_;
}
inline void ReqTerJoinConfToRelayserver_AddrInfo::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.svrtype)
}

// repeated .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT ipportinfos = 2;
inline int ReqTerJoinConfToRelayserver_AddrInfo::ipportinfos_size() const {
  return ipportinfos_.size();
}
inline void ReqTerJoinConfToRelayserver_AddrInfo::clear_ipportinfos() {
  ipportinfos_.Clear();
}
inline const ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT& ReqTerJoinConfToRelayserver_AddrInfo::ipportinfos(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.ipportinfos)
  return ipportinfos_.Get(index);
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver_AddrInfo::mutable_ipportinfos(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.ipportinfos)
  return ipportinfos_.Mutable(index);
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver_AddrInfo::add_ipportinfos() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.ipportinfos)
  return ipportinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT >&
ReqTerJoinConfToRelayserver_AddrInfo::ipportinfos() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.ipportinfos)
  return ipportinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT >*
ReqTerJoinConfToRelayserver_AddrInfo::mutable_ipportinfos() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo.ipportinfos)
  return &ipportinfos_;
}

// -------------------------------------------------------------------

// ReqTerJoinConfToRelayserver

// optional uint32 mcid = 1;
inline bool ReqTerJoinConfToRelayserver::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTerJoinConfToRelayserver::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTerJoinConfToRelayserver::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTerJoinConfToRelayserver::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.mcid)
  return mcid_;
}
inline void ReqTerJoinConfToRelayserver::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.mcid)
}

// optional uint32 relaysvrid = 2;
inline bool ReqTerJoinConfToRelayserver::has_relaysvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqTerJoinConfToRelayserver::set_has_relaysvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqTerJoinConfToRelayserver::clear_has_relaysvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqTerJoinConfToRelayserver::clear_relaysvrid() {
  relaysvrid_ = 0u;
  clear_has_relaysvrid();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver::relaysvrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.relaysvrid)
  return relaysvrid_;
}
inline void ReqTerJoinConfToRelayserver::set_relaysvrid(::google::protobuf::uint32 value) {
  set_has_relaysvrid();
  relaysvrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.relaysvrid)
}

// optional uint64 confid = 3;
inline bool ReqTerJoinConfToRelayserver::has_confid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqTerJoinConfToRelayserver::set_has_confid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqTerJoinConfToRelayserver::clear_has_confid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqTerJoinConfToRelayserver::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 ReqTerJoinConfToRelayserver::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.confid)
  return confid_;
}
inline void ReqTerJoinConfToRelayserver::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.confid)
}

// optional uint32 suid = 4;
inline bool ReqTerJoinConfToRelayserver::has_suid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqTerJoinConfToRelayserver::set_has_suid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqTerJoinConfToRelayserver::clear_has_suid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqTerJoinConfToRelayserver::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 ReqTerJoinConfToRelayserver::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.suid)
  return suid_;
}
inline void ReqTerJoinConfToRelayserver::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.ReqTerJoinConfToRelayserver.suid)
}

// optional .SRMsgs.ReqTerJoinConfToRelayserver.IPPORT teraddrs = 5;
inline bool ReqTerJoinConfToRelayserver::has_teraddrs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqTerJoinConfToRelayserver::set_has_teraddrs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqTerJoinConfToRelayserver::clear_has_teraddrs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqTerJoinConfToRelayserver::clear_teraddrs() {
  if (teraddrs_ != NULL) teraddrs_->::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT::Clear();
  clear_has_teraddrs();
}
inline const ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT& ReqTerJoinConfToRelayserver::teraddrs() const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.teraddrs)
  return teraddrs_ != NULL ? *teraddrs_ : *default_instance_->teraddrs_;
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver::mutable_teraddrs() {
  set_has_teraddrs();
  if (teraddrs_ == NULL) teraddrs_ = new ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT;
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqTerJoinConfToRelayserver.teraddrs)
  return teraddrs_;
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* ReqTerJoinConfToRelayserver::release_teraddrs() {
  clear_has_teraddrs();
  ::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* temp = teraddrs_;
  teraddrs_ = NULL;
  return temp;
}
inline void ReqTerJoinConfToRelayserver::set_allocated_teraddrs(::SRMsgs::ReqTerJoinConfToRelayserver_IPPORT* teraddrs) {
  delete teraddrs_;
  teraddrs_ = teraddrs;
  if (teraddrs) {
    set_has_teraddrs();
  } else {
    clear_has_teraddrs();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.ReqTerJoinConfToRelayserver.teraddrs)
}

// repeated .SRMsgs.ReqTerJoinConfToRelayserver.AddrInfo svraddrs = 6;
inline int ReqTerJoinConfToRelayserver::svraddrs_size() const {
  return svraddrs_.size();
}
inline void ReqTerJoinConfToRelayserver::clear_svraddrs() {
  svraddrs_.Clear();
}
inline const ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo& ReqTerJoinConfToRelayserver::svraddrs(int index) const {
  // @@protoc_insertion_point(field_get:SRMsgs.ReqTerJoinConfToRelayserver.svraddrs)
  return svraddrs_.Get(index);
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo* ReqTerJoinConfToRelayserver::mutable_svraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:SRMsgs.ReqTerJoinConfToRelayserver.svraddrs)
  return svraddrs_.Mutable(index);
}
inline ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo* ReqTerJoinConfToRelayserver::add_svraddrs() {
  // @@protoc_insertion_point(field_add:SRMsgs.ReqTerJoinConfToRelayserver.svraddrs)
  return svraddrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo >&
ReqTerJoinConfToRelayserver::svraddrs() const {
  // @@protoc_insertion_point(field_list:SRMsgs.ReqTerJoinConfToRelayserver.svraddrs)
  return svraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SRMsgs::ReqTerJoinConfToRelayserver_AddrInfo >*
ReqTerJoinConfToRelayserver::mutable_svraddrs() {
  // @@protoc_insertion_point(field_mutable_list:SRMsgs.ReqTerJoinConfToRelayserver.svraddrs)
  return &svraddrs_;
}

// -------------------------------------------------------------------

// IndRelayserverHeartBeatToMC

// optional uint32 mcid = 1;
inline bool IndRelayserverHeartBeatToMC::has_mcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndRelayserverHeartBeatToMC::set_has_mcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndRelayserverHeartBeatToMC::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndRelayserverHeartBeatToMC::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 IndRelayserverHeartBeatToMC::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRelayserverHeartBeatToMC.mcid)
  return mcid_;
}
inline void IndRelayserverHeartBeatToMC::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRelayserverHeartBeatToMC.mcid)
}

// optional uint32 relaysvrid = 2;
inline bool IndRelayserverHeartBeatToMC::has_relaysvrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndRelayserverHeartBeatToMC::set_has_relaysvrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndRelayserverHeartBeatToMC::clear_has_relaysvrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndRelayserverHeartBeatToMC::clear_relaysvrid() {
  relaysvrid_ = 0u;
  clear_has_relaysvrid();
}
inline ::google::protobuf::uint32 IndRelayserverHeartBeatToMC::relaysvrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.IndRelayserverHeartBeatToMC.relaysvrid)
  return relaysvrid_;
}
inline void IndRelayserverHeartBeatToMC::set_relaysvrid(::google::protobuf::uint32 value) {
  set_has_relaysvrid();
  relaysvrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.IndRelayserverHeartBeatToMC.relaysvrid)
}

// -------------------------------------------------------------------

// RspTerJoinConfFromRelayserver_IPPORT

// optional uint32 nettype = 1;
inline bool RspTerJoinConfFromRelayserver_IPPORT::has_nettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_has_nettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver_IPPORT::nettype() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.nettype)
  return nettype_;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.nettype)
}

// optional string ip = 2;
inline bool RspTerJoinConfFromRelayserver_IPPORT::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RspTerJoinConfFromRelayserver_IPPORT::ip() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
  return *ip_;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
}
inline ::std::string* RspTerJoinConfFromRelayserver_IPPORT::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
  return ip_;
}
inline ::std::string* RspTerJoinConfFromRelayserver_IPPORT::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.ip)
}

// optional uint32 port = 3;
inline bool RspTerJoinConfFromRelayserver_IPPORT::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver_IPPORT::port() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.port)
  return port_;
}
inline void RspTerJoinConfFromRelayserver_IPPORT::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.IPPORT.port)
}

// -------------------------------------------------------------------

// RspTerJoinConfFromRelayserver

// optional string failreason = 1;
inline bool RspTerJoinConfFromRelayserver::has_failreason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_failreason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_failreason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspTerJoinConfFromRelayserver::clear_failreason() {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_->clear();
  }
  clear_has_failreason();
}
inline const ::std::string& RspTerJoinConfFromRelayserver::failreason() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
  return *failreason_;
}
inline void RspTerJoinConfFromRelayserver::set_failreason(const ::std::string& value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
}
inline void RspTerJoinConfFromRelayserver::set_failreason(const char* value) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
}
inline void RspTerJoinConfFromRelayserver::set_failreason(const char* value, size_t size) {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  failreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
}
inline ::std::string* RspTerJoinConfFromRelayserver::mutable_failreason() {
  set_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
  return failreason_;
}
inline ::std::string* RspTerJoinConfFromRelayserver::release_failreason() {
  clear_has_failreason();
  if (failreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failreason_;
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspTerJoinConfFromRelayserver::set_allocated_failreason(::std::string* failreason) {
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (failreason) {
    set_has_failreason();
    failreason_ = failreason;
  } else {
    clear_has_failreason();
    failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspTerJoinConfFromRelayserver.failreason)
}

// optional bool isok = 2;
inline bool RspTerJoinConfFromRelayserver::has_isok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_isok() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_isok() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspTerJoinConfFromRelayserver::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RspTerJoinConfFromRelayserver::isok() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.isok)
  return isok_;
}
inline void RspTerJoinConfFromRelayserver::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.isok)
}

// optional uint32 mcid = 3;
inline bool RspTerJoinConfFromRelayserver::has_mcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_mcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_mcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspTerJoinConfFromRelayserver::clear_mcid() {
  mcid_ = 0u;
  clear_has_mcid();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver::mcid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.mcid)
  return mcid_;
}
inline void RspTerJoinConfFromRelayserver::set_mcid(::google::protobuf::uint32 value) {
  set_has_mcid();
  mcid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.mcid)
}

// optional uint32 relaysvrid = 4;
inline bool RspTerJoinConfFromRelayserver::has_relaysvrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_relaysvrid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_relaysvrid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspTerJoinConfFromRelayserver::clear_relaysvrid() {
  relaysvrid_ = 0u;
  clear_has_relaysvrid();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver::relaysvrid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.relaysvrid)
  return relaysvrid_;
}
inline void RspTerJoinConfFromRelayserver::set_relaysvrid(::google::protobuf::uint32 value) {
  set_has_relaysvrid();
  relaysvrid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.relaysvrid)
}

// optional uint64 confid = 5;
inline bool RspTerJoinConfFromRelayserver::has_confid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_confid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_confid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspTerJoinConfFromRelayserver::clear_confid() {
  confid_ = GOOGLE_ULONGLONG(0);
  clear_has_confid();
}
inline ::google::protobuf::uint64 RspTerJoinConfFromRelayserver::confid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.confid)
  return confid_;
}
inline void RspTerJoinConfFromRelayserver::set_confid(::google::protobuf::uint64 value) {
  set_has_confid();
  confid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.confid)
}

// optional uint32 suid = 6;
inline bool RspTerJoinConfFromRelayserver::has_suid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_suid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_suid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspTerJoinConfFromRelayserver::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver::suid() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.suid)
  return suid_;
}
inline void RspTerJoinConfFromRelayserver::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.suid)
}

// optional .SRMsgs.RspTerJoinConfFromRelayserver.IPPORT relaysvraddrs = 7;
inline bool RspTerJoinConfFromRelayserver::has_relaysvraddrs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_relaysvraddrs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_relaysvraddrs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspTerJoinConfFromRelayserver::clear_relaysvraddrs() {
  if (relaysvraddrs_ != NULL) relaysvraddrs_->::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT::Clear();
  clear_has_relaysvraddrs();
}
inline const ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT& RspTerJoinConfFromRelayserver::relaysvraddrs() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.relaysvraddrs)
  return relaysvraddrs_ != NULL ? *relaysvraddrs_ : *default_instance_->relaysvraddrs_;
}
inline ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* RspTerJoinConfFromRelayserver::mutable_relaysvraddrs() {
  set_has_relaysvraddrs();
  if (relaysvraddrs_ == NULL) relaysvraddrs_ = new ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT;
  // @@protoc_insertion_point(field_mutable:SRMsgs.RspTerJoinConfFromRelayserver.relaysvraddrs)
  return relaysvraddrs_;
}
inline ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* RspTerJoinConfFromRelayserver::release_relaysvraddrs() {
  clear_has_relaysvraddrs();
  ::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* temp = relaysvraddrs_;
  relaysvraddrs_ = NULL;
  return temp;
}
inline void RspTerJoinConfFromRelayserver::set_allocated_relaysvraddrs(::SRMsgs::RspTerJoinConfFromRelayserver_IPPORT* relaysvraddrs) {
  delete relaysvraddrs_;
  relaysvraddrs_ = relaysvraddrs;
  if (relaysvraddrs) {
    set_has_relaysvraddrs();
  } else {
    clear_has_relaysvraddrs();
  }
  // @@protoc_insertion_point(field_set_allocated:SRMsgs.RspTerJoinConfFromRelayserver.relaysvraddrs)
}

// optional uint32 errorcode = 8;
inline bool RspTerJoinConfFromRelayserver::has_errorcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspTerJoinConfFromRelayserver::set_has_errorcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspTerJoinConfFromRelayserver::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspTerJoinConfFromRelayserver::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 RspTerJoinConfFromRelayserver::errorcode() const {
  // @@protoc_insertion_point(field_get:SRMsgs.RspTerJoinConfFromRelayserver.errorcode)
  return errorcode_;
}
inline void RspTerJoinConfFromRelayserver::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:SRMsgs.RspTerJoinConfFromRelayserver.errorcode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mc_5frelayserver_2eproto__INCLUDED
