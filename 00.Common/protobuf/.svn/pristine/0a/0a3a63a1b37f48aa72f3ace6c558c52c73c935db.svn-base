// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_ser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_ser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SRMsgs {

namespace {

const ::google::protobuf::Descriptor* ReqRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegister_TerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_TerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegister_ConfInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_ConfInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegister_MapIPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_MapIPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUnRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUnRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqConfInfoFromDevMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqConfInfoFromDevMgr_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqConfInfoFromDevMgr_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLicenseFromDevMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLicenseFromDevMgr_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLicenseFromDevMgr_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompanyUseLicenceACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompanyUseLicenceACK_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompanyUseLicenceACK_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetSysDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetSysDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetSystemCurLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetSystemCurLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpdateDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpdateDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpdateDeviceInfo_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpdateDeviceInfo_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_DevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_DevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_RecInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_RecInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_LiveAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_LiveSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_LiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSyncConfInfo_ConfInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSyncConfInfo_ConfInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNewTermJoinConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNewTermJoinConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTermLeaveConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTermLeaveConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCCreateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCCreateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_LoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_LoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_DevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_DevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_RecInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_RecInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_LiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_LiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_VAnalyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_VAnalyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndsertodevHeart_ConfInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndsertodevHeart_ConfInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndMCEndConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndMCEndConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPConfInfoInMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPConfInfoInMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndNetMPConnStatusInMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndNetMPConnStatusInMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStartRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStartRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStopRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStopRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSFileStoragePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSFileStoragePath_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASAnalyVideoState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASAnalyVideoState_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStartLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStartLive_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStartLive_LiveAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStartLive_LiveAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStartLive_LiveSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStartLive_LiveSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCRSStopLive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCRSStopLive_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndModifyConfCallList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndModifyConfCallList_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndModifyConfCallList_ParticipantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndModifyConfCallList_ParticipantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndModifyConfCallList_RollCallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndModifyConfCallList_RollCallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_AdvanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_AdvanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_AudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_AudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_XfeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_XfeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_TerStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndTerStatisticsInfo_TerStatisticsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrInfoToDevmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrInfoToDevmgr_IPPORTInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrInfoToDevmgr_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_DomainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrInfoToDevmgr_DomainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubCompCapInfoToDevmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubCompCapInfoToDevmgr_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubCompCapInfoToDevmgr_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrHeartTodev_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_LoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrHeartTodev_LoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrHeartTodev_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_DomainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndSubSvrHeartTodev_DomainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASAnalyVideoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult_videoMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASAnalyVideoResult_videoMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult_MatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndVASAnalyVideoResult_MatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_AgcSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_AgcSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_Confcfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_Confcfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_ParticipantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_ParticipantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_LiveSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_LiveSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_RollCallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_RollCallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_AutoPollInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_AutoPollInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspConfInfoToMC_WhiteListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspConfInfoToMC_WhiteListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndDevtoserHeart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndDevtoserHeart_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrInfoToDevmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrInfoToDevmgr_IPPORTInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrInfoToDevmgr_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_DomainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrInfoToDevmgr_DomainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpCompCapInfoToDevmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpCompCapInfoToDevmgr_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpCompCapInfoToDevmgr_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrHeartTodev_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_LoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrHeartTodev_LoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrHeartTodev_ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_DomainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndUpSvrHeartTodev_DomainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRegister_Capset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRegister_Capset_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRegister_CapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRegister_CapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRegister_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRegister_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspRegister_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspRegister_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUnRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUnRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetDeviceInfo_MapIPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetDeviceInfo_MapIPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetDeviceInfo_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetDeviceInfo_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSysDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_LoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSysDeviceInfo_LoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_IPPORTInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSysDeviceInfo_IPPORTInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSysDeviceInfo_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_DomainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSysDeviceInfo_DomainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSystemCurLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSystemCurLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSystemCurLoad_LoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSystemCurLoad_LoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSystemCurLoad_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSystemCurLoad_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfo_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfo_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfo_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfo_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfoToDevmgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfoToDevmgr_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndCompLicenseInfoToDevmgr_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLicenseToMC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLicenseToMC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLicenseToMC_LicenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLicenseToMC_LicenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLicenseToMC_CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLicenseToMC_CompanyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUpdateDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUpdateDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUpdateDeviceInfo_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUpdateDeviceInfo_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWOPMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWOPMonitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWOPAVConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWOPAVConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWOPAVConfig_Capset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWOPAVConfig_Capset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGWOPAVConfig_CapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGWOPAVConfig_CapInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_device_5fser_2eproto() {
  protobuf_AddDesc_device_5fser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "device_ser.proto");
  GOOGLE_CHECK(file != NULL);
  ReqRegister_descriptor_ = file->message_type(0);
  static const int ReqRegister_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, auth_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, cpunums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, max_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, conflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, systemlicence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, httpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, mapinternetips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, max_terms_),
  };
  ReqRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRegister_descriptor_,
      ReqRegister::default_instance_,
      ReqRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRegister));
  ReqRegister_TerInfo_descriptor_ = ReqRegister_descriptor_->nested_type(0);
  static const int ReqRegister_TerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, producttype_),
  };
  ReqRegister_TerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRegister_TerInfo_descriptor_,
      ReqRegister_TerInfo::default_instance_,
      ReqRegister_TerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_TerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRegister_TerInfo));
  ReqRegister_ConfInfo_descriptor_ = ReqRegister_descriptor_->nested_type(1);
  static const int ReqRegister_ConfInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_ConfInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_ConfInfo, terlist_),
  };
  ReqRegister_ConfInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRegister_ConfInfo_descriptor_,
      ReqRegister_ConfInfo::default_instance_,
      ReqRegister_ConfInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_ConfInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_ConfInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRegister_ConfInfo));
  ReqRegister_MapIPInfo_descriptor_ = ReqRegister_descriptor_->nested_type(2);
  static const int ReqRegister_MapIPInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_MapIPInfo, mapip_),
  };
  ReqRegister_MapIPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRegister_MapIPInfo_descriptor_,
      ReqRegister_MapIPInfo::default_instance_,
      ReqRegister_MapIPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_MapIPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister_MapIPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRegister_MapIPInfo));
  ReqUnRegister_descriptor_ = file->message_type(1);
  static const int ReqUnRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnRegister, token_),
  };
  ReqUnRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUnRegister_descriptor_,
      ReqUnRegister::default_instance_,
      ReqUnRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUnRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUnRegister));
  ReqConfInfoFromDevMgr_descriptor_ = file->message_type(2);
  static const int ReqConfInfoFromDevMgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, complicinfos_),
  };
  ReqConfInfoFromDevMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqConfInfoFromDevMgr_descriptor_,
      ReqConfInfoFromDevMgr::default_instance_,
      ReqConfInfoFromDevMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqConfInfoFromDevMgr));
  ReqConfInfoFromDevMgr_LicenceInfo_descriptor_ = ReqConfInfoFromDevMgr_descriptor_->nested_type(0);
  static const int ReqConfInfoFromDevMgr_LicenceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_LicenceInfo, licencenum_),
  };
  ReqConfInfoFromDevMgr_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqConfInfoFromDevMgr_LicenceInfo_descriptor_,
      ReqConfInfoFromDevMgr_LicenceInfo::default_instance_,
      ReqConfInfoFromDevMgr_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqConfInfoFromDevMgr_LicenceInfo));
  ReqConfInfoFromDevMgr_CompanyInfo_descriptor_ = ReqConfInfoFromDevMgr_descriptor_->nested_type(1);
  static const int ReqConfInfoFromDevMgr_CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_CompanyInfo, getlicinfos_),
  };
  ReqConfInfoFromDevMgr_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqConfInfoFromDevMgr_CompanyInfo_descriptor_,
      ReqConfInfoFromDevMgr_CompanyInfo::default_instance_,
      ReqConfInfoFromDevMgr_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConfInfoFromDevMgr_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqConfInfoFromDevMgr_CompanyInfo));
  ReqLicenseFromDevMgr_descriptor_ = file->message_type(3);
  static const int ReqLicenseFromDevMgr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, complicinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, seqnum_),
  };
  ReqLicenseFromDevMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLicenseFromDevMgr_descriptor_,
      ReqLicenseFromDevMgr::default_instance_,
      ReqLicenseFromDevMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLicenseFromDevMgr));
  ReqLicenseFromDevMgr_LicenceInfo_descriptor_ = ReqLicenseFromDevMgr_descriptor_->nested_type(0);
  static const int ReqLicenseFromDevMgr_LicenceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_LicenceInfo, licencenum_),
  };
  ReqLicenseFromDevMgr_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLicenseFromDevMgr_LicenceInfo_descriptor_,
      ReqLicenseFromDevMgr_LicenceInfo::default_instance_,
      ReqLicenseFromDevMgr_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLicenseFromDevMgr_LicenceInfo));
  ReqLicenseFromDevMgr_CompanyInfo_descriptor_ = ReqLicenseFromDevMgr_descriptor_->nested_type(1);
  static const int ReqLicenseFromDevMgr_CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_CompanyInfo, getlicinfos_),
  };
  ReqLicenseFromDevMgr_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLicenseFromDevMgr_CompanyInfo_descriptor_,
      ReqLicenseFromDevMgr_CompanyInfo::default_instance_,
      ReqLicenseFromDevMgr_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLicenseFromDevMgr_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLicenseFromDevMgr_CompanyInfo));
  IndCompanyUseLicenceACK_descriptor_ = file->message_type(4);
  static const int IndCompanyUseLicenceACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, complicinfos_),
  };
  IndCompanyUseLicenceACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompanyUseLicenceACK_descriptor_,
      IndCompanyUseLicenceACK::default_instance_,
      IndCompanyUseLicenceACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompanyUseLicenceACK));
  IndCompanyUseLicenceACK_LicenceInfo_descriptor_ = IndCompanyUseLicenceACK_descriptor_->nested_type(0);
  static const int IndCompanyUseLicenceACK_LicenceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_LicenceInfo, licencenum_),
  };
  IndCompanyUseLicenceACK_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompanyUseLicenceACK_LicenceInfo_descriptor_,
      IndCompanyUseLicenceACK_LicenceInfo::default_instance_,
      IndCompanyUseLicenceACK_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompanyUseLicenceACK_LicenceInfo));
  IndCompanyUseLicenceACK_CompanyInfo_descriptor_ = IndCompanyUseLicenceACK_descriptor_->nested_type(1);
  static const int IndCompanyUseLicenceACK_CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_CompanyInfo, surplicinfos_),
  };
  IndCompanyUseLicenceACK_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompanyUseLicenceACK_CompanyInfo_descriptor_,
      IndCompanyUseLicenceACK_CompanyInfo::default_instance_,
      IndCompanyUseLicenceACK_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompanyUseLicenceACK_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompanyUseLicenceACK_CompanyInfo));
  ReqGetDeviceInfo_descriptor_ = file->message_type(5);
  static const int ReqGetDeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, get_svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, devnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, domainname_),
  };
  ReqGetDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetDeviceInfo_descriptor_,
      ReqGetDeviceInfo::default_instance_,
      ReqGetDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetDeviceInfo));
  ReqGetSysDeviceInfo_descriptor_ = file->message_type(6);
  static const int ReqGetSysDeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, get_svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, get_domainnames_),
  };
  ReqGetSysDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetSysDeviceInfo_descriptor_,
      ReqGetSysDeviceInfo::default_instance_,
      ReqGetSysDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSysDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetSysDeviceInfo));
  ReqGetSystemCurLoad_descriptor_ = file->message_type(7);
  static const int ReqGetSystemCurLoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSystemCurLoad, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSystemCurLoad, token_),
  };
  ReqGetSystemCurLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetSystemCurLoad_descriptor_,
      ReqGetSystemCurLoad::default_instance_,
      ReqGetSystemCurLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSystemCurLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSystemCurLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetSystemCurLoad));
  ReqUpdateDeviceInfo_descriptor_ = file->message_type(8);
  static const int ReqUpdateDeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, update_devices_),
  };
  ReqUpdateDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpdateDeviceInfo_descriptor_,
      ReqUpdateDeviceInfo::default_instance_,
      ReqUpdateDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpdateDeviceInfo));
  ReqUpdateDeviceInfo_DeviceInfo_descriptor_ = ReqUpdateDeviceInfo_descriptor_->nested_type(0);
  static const int ReqUpdateDeviceInfo_DeviceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo_DeviceInfo, update_svr_type_),
  };
  ReqUpdateDeviceInfo_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpdateDeviceInfo_DeviceInfo_descriptor_,
      ReqUpdateDeviceInfo_DeviceInfo::default_instance_,
      ReqUpdateDeviceInfo_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateDeviceInfo_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpdateDeviceInfo_DeviceInfo));
  IndSyncConfInfo_descriptor_ = file->message_type(9);
  static const int IndSyncConfInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo, confinfos_),
  };
  IndSyncConfInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_descriptor_,
      IndSyncConfInfo::default_instance_,
      IndSyncConfInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo));
  IndSyncConfInfo_UserInfo_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(0);
  static const int IndSyncConfInfo_UserInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, userdtlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, userrelcompid_),
  };
  IndSyncConfInfo_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_UserInfo_descriptor_,
      IndSyncConfInfo_UserInfo::default_instance_,
      IndSyncConfInfo_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_UserInfo));
  IndSyncConfInfo_DevInfo_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(1);
  static const int IndSyncConfInfo_DevInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_DevInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_DevInfo, devdtlid_),
  };
  IndSyncConfInfo_DevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_DevInfo_descriptor_,
      IndSyncConfInfo_DevInfo::default_instance_,
      IndSyncConfInfo_DevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_DevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_DevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_DevInfo));
  IndSyncConfInfo_RecInfo_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(2);
  static const int IndSyncConfInfo_RecInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_RecInfo, recordid_),
  };
  IndSyncConfInfo_RecInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_RecInfo_descriptor_,
      IndSyncConfInfo_RecInfo::default_instance_,
      IndSyncConfInfo_RecInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_RecInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_RecInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_RecInfo));
  IndSyncConfInfo_LiveAddr_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(3);
  static const int IndSyncConfInfo_LiveAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveAddr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveAddr, url_),
  };
  IndSyncConfInfo_LiveAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_LiveAddr_descriptor_,
      IndSyncConfInfo_LiveAddr::default_instance_,
      IndSyncConfInfo_LiveAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_LiveAddr));
  IndSyncConfInfo_LiveSetting_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(4);
  static const int IndSyncConfInfo_LiveSetting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, chairman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, abstract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, livepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, isuserec_),
  };
  IndSyncConfInfo_LiveSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_LiveSetting_descriptor_,
      IndSyncConfInfo_LiveSetting::default_instance_,
      IndSyncConfInfo_LiveSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_LiveSetting));
  IndSyncConfInfo_LiveInfo_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(5);
  static const int IndSyncConfInfo_LiveInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, liveinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, livesvrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, livepushurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, livepullurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, liveplayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, livesetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, liveaddrs_),
  };
  IndSyncConfInfo_LiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_LiveInfo_descriptor_,
      IndSyncConfInfo_LiveInfo::default_instance_,
      IndSyncConfInfo_LiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_LiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_LiveInfo));
  IndSyncConfInfo_ConfInfo_descriptor_ = IndSyncConfInfo_descriptor_->nested_type(6);
  static const int IndSyncConfInfo_ConfInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, devinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, userinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, recinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, liveinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, confrelcompid_),
  };
  IndSyncConfInfo_ConfInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSyncConfInfo_ConfInfo_descriptor_,
      IndSyncConfInfo_ConfInfo::default_instance_,
      IndSyncConfInfo_ConfInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSyncConfInfo_ConfInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSyncConfInfo_ConfInfo));
  IndNewTermJoinConf_descriptor_ = file->message_type(10);
  static const int IndNewTermJoinConf_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, userrptdetailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, userrelcompid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, confrelcompid_),
  };
  IndNewTermJoinConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNewTermJoinConf_descriptor_,
      IndNewTermJoinConf::default_instance_,
      IndNewTermJoinConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNewTermJoinConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNewTermJoinConf));
  IndTermLeaveConf_descriptor_ = file->message_type(11);
  static const int IndTermLeaveConf_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, userrptdetailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, userrelcompid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, confrelcompid_),
  };
  IndTermLeaveConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTermLeaveConf_descriptor_,
      IndTermLeaveConf::default_instance_,
      IndTermLeaveConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTermLeaveConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTermLeaveConf));
  IndMCCreateConf_descriptor_ = file->message_type(12);
  static const int IndMCCreateConf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, mcconfdetailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, confrelcompid_),
  };
  IndMCCreateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCCreateConf_descriptor_,
      IndMCCreateConf::default_instance_,
      IndMCCreateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCCreateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCCreateConf));
  IndsertodevHeart_descriptor_ = file->message_type(13);
  static const int IndsertodevHeart_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, load1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, load2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, loadinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, confinfos_),
  };
  IndsertodevHeart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_descriptor_,
      IndsertodevHeart::default_instance_,
      IndsertodevHeart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart));
  IndsertodevHeart_LoadInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(0);
  static const int IndsertodevHeart_LoadInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, ternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, srcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, stdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, reccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, confcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, livecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, analycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, monitorcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, voicecnt_),
  };
  IndsertodevHeart_LoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_LoadInfo_descriptor_,
      IndsertodevHeart_LoadInfo::default_instance_,
      IndsertodevHeart_LoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_LoadInfo));
  IndsertodevHeart_DevInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(1);
  static const int IndsertodevHeart_DevInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_DevInfo, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_DevInfo, devdtlid_),
  };
  IndsertodevHeart_DevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_DevInfo_descriptor_,
      IndsertodevHeart_DevInfo::default_instance_,
      IndsertodevHeart_DevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_DevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_DevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_DevInfo));
  IndsertodevHeart_UserInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(2);
  static const int IndsertodevHeart_UserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, userdtlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, userrelcompid_),
  };
  IndsertodevHeart_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_UserInfo_descriptor_,
      IndsertodevHeart_UserInfo::default_instance_,
      IndsertodevHeart_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_UserInfo));
  IndsertodevHeart_RecInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(3);
  static const int IndsertodevHeart_RecInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_RecInfo, recordid_),
  };
  IndsertodevHeart_RecInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_RecInfo_descriptor_,
      IndsertodevHeart_RecInfo::default_instance_,
      IndsertodevHeart_RecInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_RecInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_RecInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_RecInfo));
  IndsertodevHeart_LiveInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(4);
  static const int IndsertodevHeart_LiveInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LiveInfo, liveinfoid_),
  };
  IndsertodevHeart_LiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_LiveInfo_descriptor_,
      IndsertodevHeart_LiveInfo::default_instance_,
      IndsertodevHeart_LiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_LiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_LiveInfo));
  IndsertodevHeart_VAnalyInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(5);
  static const int IndsertodevHeart_VAnalyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_VAnalyInfo, vanalyinfoid_),
  };
  IndsertodevHeart_VAnalyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_VAnalyInfo_descriptor_,
      IndsertodevHeart_VAnalyInfo::default_instance_,
      IndsertodevHeart_VAnalyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_VAnalyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_VAnalyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_VAnalyInfo));
  IndsertodevHeart_ConfInfo_descriptor_ = IndsertodevHeart_descriptor_->nested_type(6);
  static const int IndsertodevHeart_ConfInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, devinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, userinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, recinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, liveinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, vanalyinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, confrelcompid_),
  };
  IndsertodevHeart_ConfInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndsertodevHeart_ConfInfo_descriptor_,
      IndsertodevHeart_ConfInfo::default_instance_,
      IndsertodevHeart_ConfInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndsertodevHeart_ConfInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndsertodevHeart_ConfInfo));
  IndMCEndConf_descriptor_ = file->message_type(14);
  static const int IndMCEndConf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, permanentenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, mcconfdetailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, confrelcompid_),
  };
  IndMCEndConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndMCEndConf_descriptor_,
      IndMCEndConf::default_instance_,
      IndMCEndConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndMCEndConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndMCEndConf));
  IndNetMPConfInfoInMC_descriptor_ = file->message_type(15);
  static const int IndNetMPConfInfoInMC_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, netmpconfdetailid_),
  };
  IndNetMPConfInfoInMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPConfInfoInMC_descriptor_,
      IndNetMPConfInfoInMC::default_instance_,
      IndNetMPConfInfoInMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConfInfoInMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPConfInfoInMC));
  IndNetMPConnStatusInMC_descriptor_ = file->message_type(16);
  static const int IndNetMPConnStatusInMC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, netmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, connstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, groupid_),
  };
  IndNetMPConnStatusInMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndNetMPConnStatusInMC_descriptor_,
      IndNetMPConnStatusInMC::default_instance_,
      IndNetMPConnStatusInMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndNetMPConnStatusInMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndNetMPConnStatusInMC));
  IndCRSStartRec_descriptor_ = file->message_type(17);
  static const int IndCRSStartRec_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, confrecordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, confrelcompid_),
  };
  IndCRSStartRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStartRec_descriptor_,
      IndCRSStartRec::default_instance_,
      IndCRSStartRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStartRec));
  IndCRSStopRec_descriptor_ = file->message_type(18);
  static const int IndCRSStopRec_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, stopreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, confrecordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, recordfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, confrelcompid_),
  };
  IndCRSStopRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStopRec_descriptor_,
      IndCRSStopRec::default_instance_,
      IndCRSStopRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStopRec));
  IndCRSFileStoragePath_descriptor_ = file->message_type(19);
  static const int IndCRSFileStoragePath_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, filestorsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, filestorpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, sdefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, recordstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, confrecordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, recordfileid_),
  };
  IndCRSFileStoragePath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSFileStoragePath_descriptor_,
      IndCRSFileStoragePath::default_instance_,
      IndCRSFileStoragePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSFileStoragePath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSFileStoragePath));
  IndVASAnalyVideoState_descriptor_ = file->message_type(20);
  static const int IndVASAnalyVideoState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, analystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, confrelcompid_),
  };
  IndVASAnalyVideoState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASAnalyVideoState_descriptor_,
      IndVASAnalyVideoState::default_instance_,
      IndVASAnalyVideoState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASAnalyVideoState));
  IndCRSStartLive_descriptor_ = file->message_type(21);
  static const int IndCRSStartLive_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, livepushurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, livepullurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, liveplayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, livesetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, livesvrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, liveaddrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, liveinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, confrelcompid_),
  };
  IndCRSStartLive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStartLive_descriptor_,
      IndCRSStartLive::default_instance_,
      IndCRSStartLive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStartLive));
  IndCRSStartLive_LiveAddr_descriptor_ = IndCRSStartLive_descriptor_->nested_type(0);
  static const int IndCRSStartLive_LiveAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveAddr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveAddr, url_),
  };
  IndCRSStartLive_LiveAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStartLive_LiveAddr_descriptor_,
      IndCRSStartLive_LiveAddr::default_instance_,
      IndCRSStartLive_LiveAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStartLive_LiveAddr));
  IndCRSStartLive_LiveSetting_descriptor_ = IndCRSStartLive_descriptor_->nested_type(1);
  static const int IndCRSStartLive_LiveSetting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, chairman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, abstract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, livepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, isuserec_),
  };
  IndCRSStartLive_LiveSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStartLive_LiveSetting_descriptor_,
      IndCRSStartLive_LiveSetting::default_instance_,
      IndCRSStartLive_LiveSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStartLive_LiveSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStartLive_LiveSetting));
  IndCRSStopLive_descriptor_ = file->message_type(22);
  static const int IndCRSStopLive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, crsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, liveurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, liveinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, confrelcompid_),
  };
  IndCRSStopLive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCRSStopLive_descriptor_,
      IndCRSStopLive::default_instance_,
      IndCRSStopLive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCRSStopLive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCRSStopLive));
  IndModifyConfCallList_descriptor_ = file->message_type(23);
  static const int IndModifyConfCallList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, rollcalllist_),
  };
  IndModifyConfCallList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndModifyConfCallList_descriptor_,
      IndModifyConfCallList::default_instance_,
      IndModifyConfCallList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndModifyConfCallList));
  IndModifyConfCallList_ParticipantInfo_descriptor_ = IndModifyConfCallList_descriptor_->nested_type(0);
  static const int IndModifyConfCallList_ParticipantInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_ParticipantInfo, psuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_ParticipantInfo, nickname_),
  };
  IndModifyConfCallList_ParticipantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndModifyConfCallList_ParticipantInfo_descriptor_,
      IndModifyConfCallList_ParticipantInfo::default_instance_,
      IndModifyConfCallList_ParticipantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_ParticipantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_ParticipantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndModifyConfCallList_ParticipantInfo));
  IndModifyConfCallList_RollCallInfo_descriptor_ = IndModifyConfCallList_descriptor_->nested_type(1);
  static const int IndModifyConfCallList_RollCallInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_RollCallInfo, rcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_RollCallInfo, rcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_RollCallInfo, parts_),
  };
  IndModifyConfCallList_RollCallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndModifyConfCallList_RollCallInfo_descriptor_,
      IndModifyConfCallList_RollCallInfo::default_instance_,
      IndModifyConfCallList_RollCallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_RollCallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndModifyConfCallList_RollCallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndModifyConfCallList_RollCallInfo));
  IndTerStatisticsInfo_descriptor_ = file->message_type(24);
  static const int IndTerStatisticsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, tsinfo_),
  };
  IndTerStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_descriptor_,
      IndTerStatisticsInfo::default_instance_,
      IndTerStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo));
  IndTerStatisticsInfo_FrameInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(0);
  static const int IndTerStatisticsInfo_FrameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_FrameInfo, fsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_FrameInfo, fsh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_FrameInfo, fps_),
  };
  IndTerStatisticsInfo_FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_FrameInfo_descriptor_,
      IndTerStatisticsInfo_FrameInfo::default_instance_,
      IndTerStatisticsInfo_FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_FrameInfo));
  IndTerStatisticsInfo_AdvanceInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(1);
  static const int IndTerStatisticsInfo_AdvanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AdvanceInfo, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AdvanceInfo, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AdvanceInfo, loss_),
  };
  IndTerStatisticsInfo_AdvanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_AdvanceInfo_descriptor_,
      IndTerStatisticsInfo_AdvanceInfo::default_instance_,
      IndTerStatisticsInfo_AdvanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AdvanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AdvanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_AdvanceInfo));
  IndTerStatisticsInfo_BaseInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(2);
  static const int IndTerStatisticsInfo_BaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_BaseInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_BaseInfo, bitrate_),
  };
  IndTerStatisticsInfo_BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_BaseInfo_descriptor_,
      IndTerStatisticsInfo_BaseInfo::default_instance_,
      IndTerStatisticsInfo_BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_BaseInfo));
  IndTerStatisticsInfo_AudioInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(3);
  static const int IndTerStatisticsInfo_AudioInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, atype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, atersuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, ateralias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, advinfo_),
  };
  IndTerStatisticsInfo_AudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_AudioInfo_descriptor_,
      IndTerStatisticsInfo_AudioInfo::default_instance_,
      IndTerStatisticsInfo_AudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_AudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_AudioInfo));
  IndTerStatisticsInfo_VideoInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(4);
  static const int IndTerStatisticsInfo_VideoInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, vtersuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, vteralias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, advinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, frameinfo_),
  };
  IndTerStatisticsInfo_VideoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_VideoInfo_descriptor_,
      IndTerStatisticsInfo_VideoInfo::default_instance_,
      IndTerStatisticsInfo_VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_VideoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_VideoInfo));
  IndTerStatisticsInfo_XfeInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(5);
  static const int IndTerStatisticsInfo_XfeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_XfeInfo, ainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_XfeInfo, vinfo_),
  };
  IndTerStatisticsInfo_XfeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_XfeInfo_descriptor_,
      IndTerStatisticsInfo_XfeInfo::default_instance_,
      IndTerStatisticsInfo_XfeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_XfeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_XfeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_XfeInfo));
  IndTerStatisticsInfo_TerStatisticsInfo_descriptor_ = IndTerStatisticsInfo_descriptor_->nested_type(6);
  static const int IndTerStatisticsInfo_TerStatisticsInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, txinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, rxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, txbweresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, producttype_),
  };
  IndTerStatisticsInfo_TerStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndTerStatisticsInfo_TerStatisticsInfo_descriptor_,
      IndTerStatisticsInfo_TerStatisticsInfo::default_instance_,
      IndTerStatisticsInfo_TerStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndTerStatisticsInfo_TerStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndTerStatisticsInfo_TerStatisticsInfo));
  IndSubSvrInfoToDevmgr_descriptor_ = file->message_type(25);
  static const int IndSubSvrInfoToDevmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, domaininfos_),
  };
  IndSubSvrInfoToDevmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrInfoToDevmgr_descriptor_,
      IndSubSvrInfoToDevmgr::default_instance_,
      IndSubSvrInfoToDevmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrInfoToDevmgr));
  IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_ = IndSubSvrInfoToDevmgr_descriptor_->nested_type(0);
  static const int IndSubSvrInfoToDevmgr_IPPORTInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_IPPORTInfo, inner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_IPPORTInfo, outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_IPPORTInfo, vpn_),
  };
  IndSubSvrInfoToDevmgr_IPPORTInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_,
      IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance_,
      IndSubSvrInfoToDevmgr_IPPORTInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_IPPORTInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_IPPORTInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrInfoToDevmgr_IPPORTInfo));
  IndSubSvrInfoToDevmgr_ServerInfo_descriptor_ = IndSubSvrInfoToDevmgr_descriptor_->nested_type(1);
  static const int IndSubSvrInfoToDevmgr_ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_ServerInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_ServerInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_ServerInfo, ipport_),
  };
  IndSubSvrInfoToDevmgr_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrInfoToDevmgr_ServerInfo_descriptor_,
      IndSubSvrInfoToDevmgr_ServerInfo::default_instance_,
      IndSubSvrInfoToDevmgr_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrInfoToDevmgr_ServerInfo));
  IndSubSvrInfoToDevmgr_DomainInfo_descriptor_ = IndSubSvrInfoToDevmgr_descriptor_->nested_type(2);
  static const int IndSubSvrInfoToDevmgr_DomainInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_DomainInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_DomainInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_DomainInfo, svrinfos_),
  };
  IndSubSvrInfoToDevmgr_DomainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrInfoToDevmgr_DomainInfo_descriptor_,
      IndSubSvrInfoToDevmgr_DomainInfo::default_instance_,
      IndSubSvrInfoToDevmgr_DomainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_DomainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrInfoToDevmgr_DomainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrInfoToDevmgr_DomainInfo));
  IndSubCompCapInfoToDevmgr_descriptor_ = file->message_type(26);
  static const int IndSubCompCapInfoToDevmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, operationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, compinfos_),
  };
  IndSubCompCapInfoToDevmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubCompCapInfoToDevmgr_descriptor_,
      IndSubCompCapInfoToDevmgr::default_instance_,
      IndSubCompCapInfoToDevmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubCompCapInfoToDevmgr));
  IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_ = IndSubCompCapInfoToDevmgr_descriptor_->nested_type(0);
  static const int IndSubCompCapInfoToDevmgr_LicenceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, licencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, exptime_),
  };
  IndSubCompCapInfoToDevmgr_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_,
      IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance_,
      IndSubCompCapInfoToDevmgr_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubCompCapInfoToDevmgr_LicenceInfo));
  IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_ = IndSubCompCapInfoToDevmgr_descriptor_->nested_type(1);
  static const int IndSubCompCapInfoToDevmgr_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_CompanyInfo, totallicinfos_),
  };
  IndSubCompCapInfoToDevmgr_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_,
      IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance_,
      IndSubCompCapInfoToDevmgr_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubCompCapInfoToDevmgr_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubCompCapInfoToDevmgr_CompanyInfo));
  IndSubSvrHeartTodev_descriptor_ = file->message_type(27);
  static const int IndSubSvrHeartTodev_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev, domaininfos_),
  };
  IndSubSvrHeartTodev_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrHeartTodev_descriptor_,
      IndSubSvrHeartTodev::default_instance_,
      IndSubSvrHeartTodev_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrHeartTodev));
  IndSubSvrHeartTodev_LoadInfo_descriptor_ = IndSubSvrHeartTodev_descriptor_->nested_type(0);
  static const int IndSubSvrHeartTodev_LoadInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, ternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, cpu_),
  };
  IndSubSvrHeartTodev_LoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrHeartTodev_LoadInfo_descriptor_,
      IndSubSvrHeartTodev_LoadInfo::default_instance_,
      IndSubSvrHeartTodev_LoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_LoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrHeartTodev_LoadInfo));
  IndSubSvrHeartTodev_ServerInfo_descriptor_ = IndSubSvrHeartTodev_descriptor_->nested_type(1);
  static const int IndSubSvrHeartTodev_ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_ServerInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_ServerInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_ServerInfo, loadinfos_),
  };
  IndSubSvrHeartTodev_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrHeartTodev_ServerInfo_descriptor_,
      IndSubSvrHeartTodev_ServerInfo::default_instance_,
      IndSubSvrHeartTodev_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrHeartTodev_ServerInfo));
  IndSubSvrHeartTodev_DomainInfo_descriptor_ = IndSubSvrHeartTodev_descriptor_->nested_type(2);
  static const int IndSubSvrHeartTodev_DomainInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_DomainInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_DomainInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_DomainInfo, svrinfos_),
  };
  IndSubSvrHeartTodev_DomainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndSubSvrHeartTodev_DomainInfo_descriptor_,
      IndSubSvrHeartTodev_DomainInfo::default_instance_,
      IndSubSvrHeartTodev_DomainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_DomainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndSubSvrHeartTodev_DomainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndSubSvrHeartTodev_DomainInfo));
  IndVASAnalyVideoResult_descriptor_ = file->message_type(28);
  static const int IndVASAnalyVideoResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, matchresults_),
  };
  IndVASAnalyVideoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASAnalyVideoResult_descriptor_,
      IndVASAnalyVideoResult::default_instance_,
      IndVASAnalyVideoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASAnalyVideoResult));
  IndVASAnalyVideoResult_videoMatch_descriptor_ = IndVASAnalyVideoResult_descriptor_->nested_type(0);
  static const int IndVASAnalyVideoResult_videoMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_videoMatch, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_videoMatch, rate_),
  };
  IndVASAnalyVideoResult_videoMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASAnalyVideoResult_videoMatch_descriptor_,
      IndVASAnalyVideoResult_videoMatch::default_instance_,
      IndVASAnalyVideoResult_videoMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_videoMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_videoMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASAnalyVideoResult_videoMatch));
  IndVASAnalyVideoResult_MatchResult_descriptor_ = IndVASAnalyVideoResult_descriptor_->nested_type(1);
  static const int IndVASAnalyVideoResult_MatchResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_MatchResult, hasmismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_MatchResult, videomatchs_),
  };
  IndVASAnalyVideoResult_MatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndVASAnalyVideoResult_MatchResult_descriptor_,
      IndVASAnalyVideoResult_MatchResult::default_instance_,
      IndVASAnalyVideoResult_MatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_MatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndVASAnalyVideoResult_MatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndVASAnalyVideoResult_MatchResult));
  RspConfInfoToMC_descriptor_ = file->message_type(29);
  static const int RspConfInfoToMC_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, recvpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, islimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, conftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confstartmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, mutetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, ternums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confcfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, failurereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confctrlsuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, audioenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, videoenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, encryptalg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, livesetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, autorec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confreportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, rollcalllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, permanentenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, autopolllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, confrelcompid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, complicinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, parttotalnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, partalreadynums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, rctotalnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, rcalreadynums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, aptotalnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, apalreadynums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, whitelists_),
  };
  RspConfInfoToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_descriptor_,
      RspConfInfoToMC::default_instance_,
      RspConfInfoToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC));
  RspConfInfoToMC_LicenceInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(0);
  static const int RspConfInfoToMC_LicenceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LicenceInfo, licencenum_),
  };
  RspConfInfoToMC_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_LicenceInfo_descriptor_,
      RspConfInfoToMC_LicenceInfo::default_instance_,
      RspConfInfoToMC_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_LicenceInfo));
  RspConfInfoToMC_CompanyInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(1);
  static const int RspConfInfoToMC_CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_CompanyInfo, getlicinfos_),
  };
  RspConfInfoToMC_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_CompanyInfo_descriptor_,
      RspConfInfoToMC_CompanyInfo::default_instance_,
      RspConfInfoToMC_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_CompanyInfo));
  RspConfInfoToMC_AgcSetting_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(2);
  static const int RspConfInfoToMC_AgcSetting_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, agc_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, target_level_dbfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, compression_gain_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, limiter_enable_),
  };
  RspConfInfoToMC_AgcSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_AgcSetting_descriptor_,
      RspConfInfoToMC_AgcSetting::default_instance_,
      RspConfInfoToMC_AgcSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AgcSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_AgcSetting));
  RspConfInfoToMC_Confcfg_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(3);
  static const int RspConfInfoToMC_Confcfg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, max_audiomix_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, usevideomixer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, useaudiomixer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, mixing_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, max_encoder_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, agc_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, videosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, useedgeserver_),
  };
  RspConfInfoToMC_Confcfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_Confcfg_descriptor_,
      RspConfInfoToMC_Confcfg::default_instance_,
      RspConfInfoToMC_Confcfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_Confcfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_Confcfg));
  RspConfInfoToMC_ParticipantInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(4);
  static const int RspConfInfoToMC_ParticipantInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, psuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, protocoltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, devicecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, shortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, orderno_),
  };
  RspConfInfoToMC_ParticipantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_ParticipantInfo_descriptor_,
      RspConfInfoToMC_ParticipantInfo::default_instance_,
      RspConfInfoToMC_ParticipantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_ParticipantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_ParticipantInfo));
  RspConfInfoToMC_LiveSetting_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(5);
  static const int RspConfInfoToMC_LiveSetting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, chairman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, abstract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, ispublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, livepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, isuserec_),
  };
  RspConfInfoToMC_LiveSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_LiveSetting_descriptor_,
      RspConfInfoToMC_LiveSetting::default_instance_,
      RspConfInfoToMC_LiveSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_LiveSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_LiveSetting));
  RspConfInfoToMC_RollCallInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(6);
  static const int RspConfInfoToMC_RollCallInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_RollCallInfo, rcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_RollCallInfo, rcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_RollCallInfo, parts_),
  };
  RspConfInfoToMC_RollCallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_RollCallInfo_descriptor_,
      RspConfInfoToMC_RollCallInfo::default_instance_,
      RspConfInfoToMC_RollCallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_RollCallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_RollCallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_RollCallInfo));
  RspConfInfoToMC_AutoPollInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(7);
  static const int RspConfInfoToMC_AutoPollInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AutoPollInfo, apid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AutoPollInfo, apname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AutoPollInfo, parts_),
  };
  RspConfInfoToMC_AutoPollInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_AutoPollInfo_descriptor_,
      RspConfInfoToMC_AutoPollInfo::default_instance_,
      RspConfInfoToMC_AutoPollInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AutoPollInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_AutoPollInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_AutoPollInfo));
  RspConfInfoToMC_WhiteListInfo_descriptor_ = RspConfInfoToMC_descriptor_->nested_type(8);
  static const int RspConfInfoToMC_WhiteListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_WhiteListInfo, whitelisttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_WhiteListInfo, parts_),
  };
  RspConfInfoToMC_WhiteListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspConfInfoToMC_WhiteListInfo_descriptor_,
      RspConfInfoToMC_WhiteListInfo::default_instance_,
      RspConfInfoToMC_WhiteListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_WhiteListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspConfInfoToMC_WhiteListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspConfInfoToMC_WhiteListInfo));
  IndDevtoserHeart_descriptor_ = file->message_type(30);
  static const int IndDevtoserHeart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDevtoserHeart, token_),
  };
  IndDevtoserHeart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndDevtoserHeart_descriptor_,
      IndDevtoserHeart::default_instance_,
      IndDevtoserHeart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDevtoserHeart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndDevtoserHeart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndDevtoserHeart));
  IndUpSvrInfoToDevmgr_descriptor_ = file->message_type(31);
  static const int IndUpSvrInfoToDevmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, addordel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, domaininfos_),
  };
  IndUpSvrInfoToDevmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrInfoToDevmgr_descriptor_,
      IndUpSvrInfoToDevmgr::default_instance_,
      IndUpSvrInfoToDevmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrInfoToDevmgr));
  IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_ = IndUpSvrInfoToDevmgr_descriptor_->nested_type(0);
  static const int IndUpSvrInfoToDevmgr_IPPORTInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_IPPORTInfo, inner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_IPPORTInfo, outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_IPPORTInfo, vpn_),
  };
  IndUpSvrInfoToDevmgr_IPPORTInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_,
      IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance_,
      IndUpSvrInfoToDevmgr_IPPORTInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_IPPORTInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_IPPORTInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrInfoToDevmgr_IPPORTInfo));
  IndUpSvrInfoToDevmgr_ServerInfo_descriptor_ = IndUpSvrInfoToDevmgr_descriptor_->nested_type(1);
  static const int IndUpSvrInfoToDevmgr_ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_ServerInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_ServerInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_ServerInfo, ipport_),
  };
  IndUpSvrInfoToDevmgr_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrInfoToDevmgr_ServerInfo_descriptor_,
      IndUpSvrInfoToDevmgr_ServerInfo::default_instance_,
      IndUpSvrInfoToDevmgr_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrInfoToDevmgr_ServerInfo));
  IndUpSvrInfoToDevmgr_DomainInfo_descriptor_ = IndUpSvrInfoToDevmgr_descriptor_->nested_type(2);
  static const int IndUpSvrInfoToDevmgr_DomainInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_DomainInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_DomainInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_DomainInfo, svrinfos_),
  };
  IndUpSvrInfoToDevmgr_DomainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrInfoToDevmgr_DomainInfo_descriptor_,
      IndUpSvrInfoToDevmgr_DomainInfo::default_instance_,
      IndUpSvrInfoToDevmgr_DomainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_DomainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrInfoToDevmgr_DomainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrInfoToDevmgr_DomainInfo));
  IndUpCompCapInfoToDevmgr_descriptor_ = file->message_type(32);
  static const int IndUpCompCapInfoToDevmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, operationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, compinfos_),
  };
  IndUpCompCapInfoToDevmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpCompCapInfoToDevmgr_descriptor_,
      IndUpCompCapInfoToDevmgr::default_instance_,
      IndUpCompCapInfoToDevmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpCompCapInfoToDevmgr));
  IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_ = IndUpCompCapInfoToDevmgr_descriptor_->nested_type(0);
  static const int IndUpCompCapInfoToDevmgr_LicenceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, licencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, exptime_),
  };
  IndUpCompCapInfoToDevmgr_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_,
      IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance_,
      IndUpCompCapInfoToDevmgr_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpCompCapInfoToDevmgr_LicenceInfo));
  IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_ = IndUpCompCapInfoToDevmgr_descriptor_->nested_type(1);
  static const int IndUpCompCapInfoToDevmgr_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_CompanyInfo, totallicinfos_),
  };
  IndUpCompCapInfoToDevmgr_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_,
      IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance_,
      IndUpCompCapInfoToDevmgr_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpCompCapInfoToDevmgr_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpCompCapInfoToDevmgr_CompanyInfo));
  IndUpSvrHeartTodev_descriptor_ = file->message_type(33);
  static const int IndUpSvrHeartTodev_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev, domaininfos_),
  };
  IndUpSvrHeartTodev_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrHeartTodev_descriptor_,
      IndUpSvrHeartTodev::default_instance_,
      IndUpSvrHeartTodev_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrHeartTodev));
  IndUpSvrHeartTodev_LoadInfo_descriptor_ = IndUpSvrHeartTodev_descriptor_->nested_type(0);
  static const int IndUpSvrHeartTodev_LoadInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, ternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, cpu_),
  };
  IndUpSvrHeartTodev_LoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrHeartTodev_LoadInfo_descriptor_,
      IndUpSvrHeartTodev_LoadInfo::default_instance_,
      IndUpSvrHeartTodev_LoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_LoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrHeartTodev_LoadInfo));
  IndUpSvrHeartTodev_ServerInfo_descriptor_ = IndUpSvrHeartTodev_descriptor_->nested_type(1);
  static const int IndUpSvrHeartTodev_ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_ServerInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_ServerInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_ServerInfo, loadinfos_),
  };
  IndUpSvrHeartTodev_ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrHeartTodev_ServerInfo_descriptor_,
      IndUpSvrHeartTodev_ServerInfo::default_instance_,
      IndUpSvrHeartTodev_ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrHeartTodev_ServerInfo));
  IndUpSvrHeartTodev_DomainInfo_descriptor_ = IndUpSvrHeartTodev_descriptor_->nested_type(2);
  static const int IndUpSvrHeartTodev_DomainInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_DomainInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_DomainInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_DomainInfo, svrinfos_),
  };
  IndUpSvrHeartTodev_DomainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndUpSvrHeartTodev_DomainInfo_descriptor_,
      IndUpSvrHeartTodev_DomainInfo::default_instance_,
      IndUpSvrHeartTodev_DomainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_DomainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndUpSvrHeartTodev_DomainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndUpSvrHeartTodev_DomainInfo));
  RspRegister_descriptor_ = file->message_type(34);
  static const int RspRegister_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, failurereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, capinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, sysmtu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, compinfos_),
  };
  RspRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRegister_descriptor_,
      RspRegister::default_instance_,
      RspRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRegister));
  RspRegister_Capset_descriptor_ = RspRegister_descriptor_->nested_type(0);
  static const int RspRegister_Capset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_Capset, fmt_),
  };
  RspRegister_Capset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRegister_Capset_descriptor_,
      RspRegister_Capset::default_instance_,
      RspRegister_Capset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_Capset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_Capset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRegister_Capset));
  RspRegister_CapInfo_descriptor_ = RspRegister_descriptor_->nested_type(1);
  static const int RspRegister_CapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CapInfo, captype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CapInfo, capsets_),
  };
  RspRegister_CapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRegister_CapInfo_descriptor_,
      RspRegister_CapInfo::default_instance_,
      RspRegister_CapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRegister_CapInfo));
  RspRegister_LicenceInfo_descriptor_ = RspRegister_descriptor_->nested_type(2);
  static const int RspRegister_LicenceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, licencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, exptime_),
  };
  RspRegister_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRegister_LicenceInfo_descriptor_,
      RspRegister_LicenceInfo::default_instance_,
      RspRegister_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRegister_LicenceInfo));
  RspRegister_CompanyInfo_descriptor_ = RspRegister_descriptor_->nested_type(3);
  static const int RspRegister_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CompanyInfo, totallicinfos_),
  };
  RspRegister_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspRegister_CompanyInfo_descriptor_,
      RspRegister_CompanyInfo::default_instance_,
      RspRegister_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspRegister_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspRegister_CompanyInfo));
  RspUnRegister_descriptor_ = file->message_type(35);
  static const int RspUnRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnRegister, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnRegister, failurereason_),
  };
  RspUnRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUnRegister_descriptor_,
      RspUnRegister::default_instance_,
      RspUnRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUnRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUnRegister));
  RspGetDeviceInfo_descriptor_ = file->message_type(36);
  static const int RspGetDeviceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo, deviceinfolist_),
  };
  RspGetDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetDeviceInfo_descriptor_,
      RspGetDeviceInfo::default_instance_,
      RspGetDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetDeviceInfo));
  RspGetDeviceInfo_MapIPInfo_descriptor_ = RspGetDeviceInfo_descriptor_->nested_type(0);
  static const int RspGetDeviceInfo_MapIPInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_MapIPInfo, mapip_),
  };
  RspGetDeviceInfo_MapIPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetDeviceInfo_MapIPInfo_descriptor_,
      RspGetDeviceInfo_MapIPInfo::default_instance_,
      RspGetDeviceInfo_MapIPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_MapIPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_MapIPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetDeviceInfo_MapIPInfo));
  RspGetDeviceInfo_DeviceInfo_descriptor_ = RspGetDeviceInfo_descriptor_->nested_type(1);
  static const int RspGetDeviceInfo_DeviceInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, get_svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, load2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, mapinternetips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, max_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, max_terms_),
  };
  RspGetDeviceInfo_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetDeviceInfo_DeviceInfo_descriptor_,
      RspGetDeviceInfo_DeviceInfo::default_instance_,
      RspGetDeviceInfo_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetDeviceInfo_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetDeviceInfo_DeviceInfo));
  RspGetSysDeviceInfo_descriptor_ = file->message_type(37);
  static const int RspGetSysDeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, domaininfos_),
  };
  RspGetSysDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSysDeviceInfo_descriptor_,
      RspGetSysDeviceInfo::default_instance_,
      RspGetSysDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSysDeviceInfo));
  RspGetSysDeviceInfo_LoadInfo_descriptor_ = RspGetSysDeviceInfo_descriptor_->nested_type(0);
  static const int RspGetSysDeviceInfo_LoadInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, ternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, cpu_),
  };
  RspGetSysDeviceInfo_LoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSysDeviceInfo_LoadInfo_descriptor_,
      RspGetSysDeviceInfo_LoadInfo::default_instance_,
      RspGetSysDeviceInfo_LoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_LoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSysDeviceInfo_LoadInfo));
  RspGetSysDeviceInfo_IPPORTInfo_descriptor_ = RspGetSysDeviceInfo_descriptor_->nested_type(1);
  static const int RspGetSysDeviceInfo_IPPORTInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_IPPORTInfo, inner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_IPPORTInfo, outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_IPPORTInfo, vpn_),
  };
  RspGetSysDeviceInfo_IPPORTInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSysDeviceInfo_IPPORTInfo_descriptor_,
      RspGetSysDeviceInfo_IPPORTInfo::default_instance_,
      RspGetSysDeviceInfo_IPPORTInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_IPPORTInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_IPPORTInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSysDeviceInfo_IPPORTInfo));
  RspGetSysDeviceInfo_DeviceInfo_descriptor_ = RspGetSysDeviceInfo_descriptor_->nested_type(2);
  static const int RspGetSysDeviceInfo_DeviceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DeviceInfo, ipport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DeviceInfo, loadinfos_),
  };
  RspGetSysDeviceInfo_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSysDeviceInfo_DeviceInfo_descriptor_,
      RspGetSysDeviceInfo_DeviceInfo::default_instance_,
      RspGetSysDeviceInfo_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSysDeviceInfo_DeviceInfo));
  RspGetSysDeviceInfo_DomainInfo_descriptor_ = RspGetSysDeviceInfo_descriptor_->nested_type(3);
  static const int RspGetSysDeviceInfo_DomainInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DomainInfo, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DomainInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DomainInfo, devices_),
  };
  RspGetSysDeviceInfo_DomainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSysDeviceInfo_DomainInfo_descriptor_,
      RspGetSysDeviceInfo_DomainInfo::default_instance_,
      RspGetSysDeviceInfo_DomainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DomainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSysDeviceInfo_DomainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSysDeviceInfo_DomainInfo));
  RspGetSystemCurLoad_descriptor_ = file->message_type(38);
  static const int RspGetSystemCurLoad_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, curconfcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, curreccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, curlivecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, curanalycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, compinfos_),
  };
  RspGetSystemCurLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSystemCurLoad_descriptor_,
      RspGetSystemCurLoad::default_instance_,
      RspGetSystemCurLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSystemCurLoad));
  RspGetSystemCurLoad_LoadInfo_descriptor_ = RspGetSystemCurLoad_descriptor_->nested_type(0);
  static const int RspGetSystemCurLoad_LoadInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, confcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, ternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, srcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, stdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, reccnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, livecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, analycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, monitorcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, voicecnt_),
  };
  RspGetSystemCurLoad_LoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSystemCurLoad_LoadInfo_descriptor_,
      RspGetSystemCurLoad_LoadInfo::default_instance_,
      RspGetSystemCurLoad_LoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_LoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSystemCurLoad_LoadInfo));
  RspGetSystemCurLoad_CompanyInfo_descriptor_ = RspGetSystemCurLoad_descriptor_->nested_type(1);
  static const int RspGetSystemCurLoad_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_CompanyInfo, curloads_),
  };
  RspGetSystemCurLoad_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSystemCurLoad_CompanyInfo_descriptor_,
      RspGetSystemCurLoad_CompanyInfo::default_instance_,
      RspGetSystemCurLoad_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSystemCurLoad_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSystemCurLoad_CompanyInfo));
  IndCompLicenseInfo_descriptor_ = file->message_type(39);
  static const int IndCompLicenseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, compinfos_),
  };
  IndCompLicenseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfo_descriptor_,
      IndCompLicenseInfo::default_instance_,
      IndCompLicenseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfo));
  IndCompLicenseInfo_LicenceInfo_descriptor_ = IndCompLicenseInfo_descriptor_->nested_type(0);
  static const int IndCompLicenseInfo_LicenceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, licencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, exptime_),
  };
  IndCompLicenseInfo_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfo_LicenceInfo_descriptor_,
      IndCompLicenseInfo_LicenceInfo::default_instance_,
      IndCompLicenseInfo_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfo_LicenceInfo));
  IndCompLicenseInfo_CompanyInfo_descriptor_ = IndCompLicenseInfo_descriptor_->nested_type(1);
  static const int IndCompLicenseInfo_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_CompanyInfo, licenceinfos_),
  };
  IndCompLicenseInfo_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfo_CompanyInfo_descriptor_,
      IndCompLicenseInfo_CompanyInfo::default_instance_,
      IndCompLicenseInfo_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfo_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfo_CompanyInfo));
  IndCompLicenseInfoToDevmgr_descriptor_ = file->message_type(40);
  static const int IndCompLicenseInfoToDevmgr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, compinfos_),
  };
  IndCompLicenseInfoToDevmgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfoToDevmgr_descriptor_,
      IndCompLicenseInfoToDevmgr::default_instance_,
      IndCompLicenseInfoToDevmgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfoToDevmgr));
  IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_ = IndCompLicenseInfoToDevmgr_descriptor_->nested_type(0);
  static const int IndCompLicenseInfoToDevmgr_LicenceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, licencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, exptime_),
  };
  IndCompLicenseInfoToDevmgr_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_,
      IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance_,
      IndCompLicenseInfoToDevmgr_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfoToDevmgr_LicenceInfo));
  IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_ = IndCompLicenseInfoToDevmgr_descriptor_->nested_type(1);
  static const int IndCompLicenseInfoToDevmgr_CompanyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_CompanyInfo, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_CompanyInfo, licenceinfos_),
  };
  IndCompLicenseInfoToDevmgr_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_,
      IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance_,
      IndCompLicenseInfoToDevmgr_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndCompLicenseInfoToDevmgr_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndCompLicenseInfoToDevmgr_CompanyInfo));
  RspLicenseToMC_descriptor_ = file->message_type(41);
  static const int RspLicenseToMC_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, compinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, seqnum_),
  };
  RspLicenseToMC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLicenseToMC_descriptor_,
      RspLicenseToMC::default_instance_,
      RspLicenseToMC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLicenseToMC));
  RspLicenseToMC_LicenceInfo_descriptor_ = RspLicenseToMC_descriptor_->nested_type(0);
  static const int RspLicenseToMC_LicenceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_LicenceInfo, licencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_LicenceInfo, licencenum_),
  };
  RspLicenseToMC_LicenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLicenseToMC_LicenceInfo_descriptor_,
      RspLicenseToMC_LicenceInfo::default_instance_,
      RspLicenseToMC_LicenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_LicenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_LicenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLicenseToMC_LicenceInfo));
  RspLicenseToMC_CompanyInfo_descriptor_ = RspLicenseToMC_descriptor_->nested_type(1);
  static const int RspLicenseToMC_CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_CompanyInfo, companyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_CompanyInfo, getlicinfos_),
  };
  RspLicenseToMC_CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLicenseToMC_CompanyInfo_descriptor_,
      RspLicenseToMC_CompanyInfo::default_instance_,
      RspLicenseToMC_CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLicenseToMC_CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLicenseToMC_CompanyInfo));
  RspUpdateDeviceInfo_descriptor_ = file->message_type(42);
  static const int RspUpdateDeviceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo, update_devices_),
  };
  RspUpdateDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUpdateDeviceInfo_descriptor_,
      RspUpdateDeviceInfo::default_instance_,
      RspUpdateDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUpdateDeviceInfo));
  RspUpdateDeviceInfo_DeviceInfo_descriptor_ = RspUpdateDeviceInfo_descriptor_->nested_type(0);
  static const int RspUpdateDeviceInfo_DeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, load2_),
  };
  RspUpdateDeviceInfo_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUpdateDeviceInfo_DeviceInfo_descriptor_,
      RspUpdateDeviceInfo_DeviceInfo::default_instance_,
      RspUpdateDeviceInfo_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpdateDeviceInfo_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUpdateDeviceInfo_DeviceInfo));
  CmdGWOPMonitor_descriptor_ = file->message_type(43);
  static const int CmdGWOPMonitor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, platformcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, dsturl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, platformnewcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, platformnewkey_),
  };
  CmdGWOPMonitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWOPMonitor_descriptor_,
      CmdGWOPMonitor::default_instance_,
      CmdGWOPMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPMonitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWOPMonitor));
  CmdGWOPAVConfig_descriptor_ = file->message_type(44);
  static const int CmdGWOPAVConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig, capinfos_),
  };
  CmdGWOPAVConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWOPAVConfig_descriptor_,
      CmdGWOPAVConfig::default_instance_,
      CmdGWOPAVConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWOPAVConfig));
  CmdGWOPAVConfig_Capset_descriptor_ = CmdGWOPAVConfig_descriptor_->nested_type(0);
  static const int CmdGWOPAVConfig_Capset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_Capset, fmt_),
  };
  CmdGWOPAVConfig_Capset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWOPAVConfig_Capset_descriptor_,
      CmdGWOPAVConfig_Capset::default_instance_,
      CmdGWOPAVConfig_Capset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_Capset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_Capset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWOPAVConfig_Capset));
  CmdGWOPAVConfig_CapInfo_descriptor_ = CmdGWOPAVConfig_descriptor_->nested_type(1);
  static const int CmdGWOPAVConfig_CapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_CapInfo, captype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_CapInfo, capsets_),
  };
  CmdGWOPAVConfig_CapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGWOPAVConfig_CapInfo_descriptor_,
      CmdGWOPAVConfig_CapInfo::default_instance_,
      CmdGWOPAVConfig_CapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_CapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGWOPAVConfig_CapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGWOPAVConfig_CapInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_device_5fser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRegister_descriptor_, &ReqRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRegister_TerInfo_descriptor_, &ReqRegister_TerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRegister_ConfInfo_descriptor_, &ReqRegister_ConfInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRegister_MapIPInfo_descriptor_, &ReqRegister_MapIPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUnRegister_descriptor_, &ReqUnRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqConfInfoFromDevMgr_descriptor_, &ReqConfInfoFromDevMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqConfInfoFromDevMgr_LicenceInfo_descriptor_, &ReqConfInfoFromDevMgr_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqConfInfoFromDevMgr_CompanyInfo_descriptor_, &ReqConfInfoFromDevMgr_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLicenseFromDevMgr_descriptor_, &ReqLicenseFromDevMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLicenseFromDevMgr_LicenceInfo_descriptor_, &ReqLicenseFromDevMgr_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLicenseFromDevMgr_CompanyInfo_descriptor_, &ReqLicenseFromDevMgr_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompanyUseLicenceACK_descriptor_, &IndCompanyUseLicenceACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompanyUseLicenceACK_LicenceInfo_descriptor_, &IndCompanyUseLicenceACK_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompanyUseLicenceACK_CompanyInfo_descriptor_, &IndCompanyUseLicenceACK_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetDeviceInfo_descriptor_, &ReqGetDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetSysDeviceInfo_descriptor_, &ReqGetSysDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetSystemCurLoad_descriptor_, &ReqGetSystemCurLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpdateDeviceInfo_descriptor_, &ReqUpdateDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpdateDeviceInfo_DeviceInfo_descriptor_, &ReqUpdateDeviceInfo_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_descriptor_, &IndSyncConfInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_UserInfo_descriptor_, &IndSyncConfInfo_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_DevInfo_descriptor_, &IndSyncConfInfo_DevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_RecInfo_descriptor_, &IndSyncConfInfo_RecInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_LiveAddr_descriptor_, &IndSyncConfInfo_LiveAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_LiveSetting_descriptor_, &IndSyncConfInfo_LiveSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_LiveInfo_descriptor_, &IndSyncConfInfo_LiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSyncConfInfo_ConfInfo_descriptor_, &IndSyncConfInfo_ConfInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNewTermJoinConf_descriptor_, &IndNewTermJoinConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTermLeaveConf_descriptor_, &IndTermLeaveConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCCreateConf_descriptor_, &IndMCCreateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_descriptor_, &IndsertodevHeart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_LoadInfo_descriptor_, &IndsertodevHeart_LoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_DevInfo_descriptor_, &IndsertodevHeart_DevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_UserInfo_descriptor_, &IndsertodevHeart_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_RecInfo_descriptor_, &IndsertodevHeart_RecInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_LiveInfo_descriptor_, &IndsertodevHeart_LiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_VAnalyInfo_descriptor_, &IndsertodevHeart_VAnalyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndsertodevHeart_ConfInfo_descriptor_, &IndsertodevHeart_ConfInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndMCEndConf_descriptor_, &IndMCEndConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPConfInfoInMC_descriptor_, &IndNetMPConfInfoInMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndNetMPConnStatusInMC_descriptor_, &IndNetMPConnStatusInMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStartRec_descriptor_, &IndCRSStartRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStopRec_descriptor_, &IndCRSStopRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSFileStoragePath_descriptor_, &IndCRSFileStoragePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASAnalyVideoState_descriptor_, &IndVASAnalyVideoState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStartLive_descriptor_, &IndCRSStartLive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStartLive_LiveAddr_descriptor_, &IndCRSStartLive_LiveAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStartLive_LiveSetting_descriptor_, &IndCRSStartLive_LiveSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCRSStopLive_descriptor_, &IndCRSStopLive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndModifyConfCallList_descriptor_, &IndModifyConfCallList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndModifyConfCallList_ParticipantInfo_descriptor_, &IndModifyConfCallList_ParticipantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndModifyConfCallList_RollCallInfo_descriptor_, &IndModifyConfCallList_RollCallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_descriptor_, &IndTerStatisticsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_FrameInfo_descriptor_, &IndTerStatisticsInfo_FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_AdvanceInfo_descriptor_, &IndTerStatisticsInfo_AdvanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_BaseInfo_descriptor_, &IndTerStatisticsInfo_BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_AudioInfo_descriptor_, &IndTerStatisticsInfo_AudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_VideoInfo_descriptor_, &IndTerStatisticsInfo_VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_XfeInfo_descriptor_, &IndTerStatisticsInfo_XfeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndTerStatisticsInfo_TerStatisticsInfo_descriptor_, &IndTerStatisticsInfo_TerStatisticsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrInfoToDevmgr_descriptor_, &IndSubSvrInfoToDevmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_, &IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrInfoToDevmgr_ServerInfo_descriptor_, &IndSubSvrInfoToDevmgr_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrInfoToDevmgr_DomainInfo_descriptor_, &IndSubSvrInfoToDevmgr_DomainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubCompCapInfoToDevmgr_descriptor_, &IndSubCompCapInfoToDevmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_, &IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_, &IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrHeartTodev_descriptor_, &IndSubSvrHeartTodev::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrHeartTodev_LoadInfo_descriptor_, &IndSubSvrHeartTodev_LoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrHeartTodev_ServerInfo_descriptor_, &IndSubSvrHeartTodev_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndSubSvrHeartTodev_DomainInfo_descriptor_, &IndSubSvrHeartTodev_DomainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASAnalyVideoResult_descriptor_, &IndVASAnalyVideoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASAnalyVideoResult_videoMatch_descriptor_, &IndVASAnalyVideoResult_videoMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndVASAnalyVideoResult_MatchResult_descriptor_, &IndVASAnalyVideoResult_MatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_descriptor_, &RspConfInfoToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_LicenceInfo_descriptor_, &RspConfInfoToMC_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_CompanyInfo_descriptor_, &RspConfInfoToMC_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_AgcSetting_descriptor_, &RspConfInfoToMC_AgcSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_Confcfg_descriptor_, &RspConfInfoToMC_Confcfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_ParticipantInfo_descriptor_, &RspConfInfoToMC_ParticipantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_LiveSetting_descriptor_, &RspConfInfoToMC_LiveSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_RollCallInfo_descriptor_, &RspConfInfoToMC_RollCallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_AutoPollInfo_descriptor_, &RspConfInfoToMC_AutoPollInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspConfInfoToMC_WhiteListInfo_descriptor_, &RspConfInfoToMC_WhiteListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndDevtoserHeart_descriptor_, &IndDevtoserHeart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrInfoToDevmgr_descriptor_, &IndUpSvrInfoToDevmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_, &IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrInfoToDevmgr_ServerInfo_descriptor_, &IndUpSvrInfoToDevmgr_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrInfoToDevmgr_DomainInfo_descriptor_, &IndUpSvrInfoToDevmgr_DomainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpCompCapInfoToDevmgr_descriptor_, &IndUpCompCapInfoToDevmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_, &IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_, &IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrHeartTodev_descriptor_, &IndUpSvrHeartTodev::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrHeartTodev_LoadInfo_descriptor_, &IndUpSvrHeartTodev_LoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrHeartTodev_ServerInfo_descriptor_, &IndUpSvrHeartTodev_ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndUpSvrHeartTodev_DomainInfo_descriptor_, &IndUpSvrHeartTodev_DomainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRegister_descriptor_, &RspRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRegister_Capset_descriptor_, &RspRegister_Capset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRegister_CapInfo_descriptor_, &RspRegister_CapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRegister_LicenceInfo_descriptor_, &RspRegister_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspRegister_CompanyInfo_descriptor_, &RspRegister_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUnRegister_descriptor_, &RspUnRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetDeviceInfo_descriptor_, &RspGetDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetDeviceInfo_MapIPInfo_descriptor_, &RspGetDeviceInfo_MapIPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetDeviceInfo_DeviceInfo_descriptor_, &RspGetDeviceInfo_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSysDeviceInfo_descriptor_, &RspGetSysDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSysDeviceInfo_LoadInfo_descriptor_, &RspGetSysDeviceInfo_LoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSysDeviceInfo_IPPORTInfo_descriptor_, &RspGetSysDeviceInfo_IPPORTInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSysDeviceInfo_DeviceInfo_descriptor_, &RspGetSysDeviceInfo_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSysDeviceInfo_DomainInfo_descriptor_, &RspGetSysDeviceInfo_DomainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSystemCurLoad_descriptor_, &RspGetSystemCurLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSystemCurLoad_LoadInfo_descriptor_, &RspGetSystemCurLoad_LoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSystemCurLoad_CompanyInfo_descriptor_, &RspGetSystemCurLoad_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfo_descriptor_, &IndCompLicenseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfo_LicenceInfo_descriptor_, &IndCompLicenseInfo_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfo_CompanyInfo_descriptor_, &IndCompLicenseInfo_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfoToDevmgr_descriptor_, &IndCompLicenseInfoToDevmgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_, &IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_, &IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLicenseToMC_descriptor_, &RspLicenseToMC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLicenseToMC_LicenceInfo_descriptor_, &RspLicenseToMC_LicenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLicenseToMC_CompanyInfo_descriptor_, &RspLicenseToMC_CompanyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUpdateDeviceInfo_descriptor_, &RspUpdateDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUpdateDeviceInfo_DeviceInfo_descriptor_, &RspUpdateDeviceInfo_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWOPMonitor_descriptor_, &CmdGWOPMonitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWOPAVConfig_descriptor_, &CmdGWOPAVConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWOPAVConfig_Capset_descriptor_, &CmdGWOPAVConfig_Capset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGWOPAVConfig_CapInfo_descriptor_, &CmdGWOPAVConfig_CapInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_device_5fser_2eproto() {
  delete ReqRegister::default_instance_;
  delete ReqRegister_reflection_;
  delete ReqRegister_TerInfo::default_instance_;
  delete ReqRegister_TerInfo_reflection_;
  delete ReqRegister_ConfInfo::default_instance_;
  delete ReqRegister_ConfInfo_reflection_;
  delete ReqRegister_MapIPInfo::default_instance_;
  delete ReqRegister_MapIPInfo_reflection_;
  delete ReqUnRegister::default_instance_;
  delete ReqUnRegister_reflection_;
  delete ReqConfInfoFromDevMgr::default_instance_;
  delete ReqConfInfoFromDevMgr_reflection_;
  delete ReqConfInfoFromDevMgr_LicenceInfo::default_instance_;
  delete ReqConfInfoFromDevMgr_LicenceInfo_reflection_;
  delete ReqConfInfoFromDevMgr_CompanyInfo::default_instance_;
  delete ReqConfInfoFromDevMgr_CompanyInfo_reflection_;
  delete ReqLicenseFromDevMgr::default_instance_;
  delete ReqLicenseFromDevMgr_reflection_;
  delete ReqLicenseFromDevMgr_LicenceInfo::default_instance_;
  delete ReqLicenseFromDevMgr_LicenceInfo_reflection_;
  delete ReqLicenseFromDevMgr_CompanyInfo::default_instance_;
  delete ReqLicenseFromDevMgr_CompanyInfo_reflection_;
  delete IndCompanyUseLicenceACK::default_instance_;
  delete IndCompanyUseLicenceACK_reflection_;
  delete IndCompanyUseLicenceACK_LicenceInfo::default_instance_;
  delete IndCompanyUseLicenceACK_LicenceInfo_reflection_;
  delete IndCompanyUseLicenceACK_CompanyInfo::default_instance_;
  delete IndCompanyUseLicenceACK_CompanyInfo_reflection_;
  delete ReqGetDeviceInfo::default_instance_;
  delete ReqGetDeviceInfo_reflection_;
  delete ReqGetSysDeviceInfo::default_instance_;
  delete ReqGetSysDeviceInfo_reflection_;
  delete ReqGetSystemCurLoad::default_instance_;
  delete ReqGetSystemCurLoad_reflection_;
  delete ReqUpdateDeviceInfo::default_instance_;
  delete ReqUpdateDeviceInfo_reflection_;
  delete ReqUpdateDeviceInfo_DeviceInfo::default_instance_;
  delete ReqUpdateDeviceInfo_DeviceInfo_reflection_;
  delete IndSyncConfInfo::default_instance_;
  delete IndSyncConfInfo_reflection_;
  delete IndSyncConfInfo_UserInfo::default_instance_;
  delete IndSyncConfInfo_UserInfo_reflection_;
  delete IndSyncConfInfo_DevInfo::default_instance_;
  delete IndSyncConfInfo_DevInfo_reflection_;
  delete IndSyncConfInfo_RecInfo::default_instance_;
  delete IndSyncConfInfo_RecInfo_reflection_;
  delete IndSyncConfInfo_LiveAddr::default_instance_;
  delete IndSyncConfInfo_LiveAddr_reflection_;
  delete IndSyncConfInfo_LiveSetting::default_instance_;
  delete IndSyncConfInfo_LiveSetting_reflection_;
  delete IndSyncConfInfo_LiveInfo::default_instance_;
  delete IndSyncConfInfo_LiveInfo_reflection_;
  delete IndSyncConfInfo_ConfInfo::default_instance_;
  delete IndSyncConfInfo_ConfInfo_reflection_;
  delete IndNewTermJoinConf::default_instance_;
  delete IndNewTermJoinConf_reflection_;
  delete IndTermLeaveConf::default_instance_;
  delete IndTermLeaveConf_reflection_;
  delete IndMCCreateConf::default_instance_;
  delete IndMCCreateConf_reflection_;
  delete IndsertodevHeart::default_instance_;
  delete IndsertodevHeart_reflection_;
  delete IndsertodevHeart_LoadInfo::default_instance_;
  delete IndsertodevHeart_LoadInfo_reflection_;
  delete IndsertodevHeart_DevInfo::default_instance_;
  delete IndsertodevHeart_DevInfo_reflection_;
  delete IndsertodevHeart_UserInfo::default_instance_;
  delete IndsertodevHeart_UserInfo_reflection_;
  delete IndsertodevHeart_RecInfo::default_instance_;
  delete IndsertodevHeart_RecInfo_reflection_;
  delete IndsertodevHeart_LiveInfo::default_instance_;
  delete IndsertodevHeart_LiveInfo_reflection_;
  delete IndsertodevHeart_VAnalyInfo::default_instance_;
  delete IndsertodevHeart_VAnalyInfo_reflection_;
  delete IndsertodevHeart_ConfInfo::default_instance_;
  delete IndsertodevHeart_ConfInfo_reflection_;
  delete IndMCEndConf::default_instance_;
  delete IndMCEndConf_reflection_;
  delete IndNetMPConfInfoInMC::default_instance_;
  delete IndNetMPConfInfoInMC_reflection_;
  delete IndNetMPConnStatusInMC::default_instance_;
  delete IndNetMPConnStatusInMC_reflection_;
  delete IndCRSStartRec::default_instance_;
  delete IndCRSStartRec_reflection_;
  delete IndCRSStopRec::default_instance_;
  delete IndCRSStopRec_reflection_;
  delete IndCRSFileStoragePath::default_instance_;
  delete IndCRSFileStoragePath_reflection_;
  delete IndVASAnalyVideoState::default_instance_;
  delete IndVASAnalyVideoState_reflection_;
  delete IndCRSStartLive::default_instance_;
  delete IndCRSStartLive_reflection_;
  delete IndCRSStartLive_LiveAddr::default_instance_;
  delete IndCRSStartLive_LiveAddr_reflection_;
  delete IndCRSStartLive_LiveSetting::default_instance_;
  delete IndCRSStartLive_LiveSetting_reflection_;
  delete IndCRSStopLive::default_instance_;
  delete IndCRSStopLive_reflection_;
  delete IndModifyConfCallList::default_instance_;
  delete IndModifyConfCallList_reflection_;
  delete IndModifyConfCallList_ParticipantInfo::default_instance_;
  delete IndModifyConfCallList_ParticipantInfo_reflection_;
  delete IndModifyConfCallList_RollCallInfo::default_instance_;
  delete IndModifyConfCallList_RollCallInfo_reflection_;
  delete IndTerStatisticsInfo::default_instance_;
  delete IndTerStatisticsInfo_reflection_;
  delete IndTerStatisticsInfo_FrameInfo::default_instance_;
  delete IndTerStatisticsInfo_FrameInfo_reflection_;
  delete IndTerStatisticsInfo_AdvanceInfo::default_instance_;
  delete IndTerStatisticsInfo_AdvanceInfo_reflection_;
  delete IndTerStatisticsInfo_BaseInfo::default_instance_;
  delete IndTerStatisticsInfo_BaseInfo_reflection_;
  delete IndTerStatisticsInfo_AudioInfo::default_instance_;
  delete IndTerStatisticsInfo_AudioInfo_reflection_;
  delete IndTerStatisticsInfo_VideoInfo::default_instance_;
  delete IndTerStatisticsInfo_VideoInfo_reflection_;
  delete IndTerStatisticsInfo_XfeInfo::default_instance_;
  delete IndTerStatisticsInfo_XfeInfo_reflection_;
  delete IndTerStatisticsInfo_TerStatisticsInfo::default_instance_;
  delete IndTerStatisticsInfo_TerStatisticsInfo_reflection_;
  delete IndSubSvrInfoToDevmgr::default_instance_;
  delete IndSubSvrInfoToDevmgr_reflection_;
  delete IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance_;
  delete IndSubSvrInfoToDevmgr_IPPORTInfo_reflection_;
  delete IndSubSvrInfoToDevmgr_ServerInfo::default_instance_;
  delete IndSubSvrInfoToDevmgr_ServerInfo_reflection_;
  delete IndSubSvrInfoToDevmgr_DomainInfo::default_instance_;
  delete IndSubSvrInfoToDevmgr_DomainInfo_reflection_;
  delete IndSubCompCapInfoToDevmgr::default_instance_;
  delete IndSubCompCapInfoToDevmgr_reflection_;
  delete IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance_;
  delete IndSubCompCapInfoToDevmgr_LicenceInfo_reflection_;
  delete IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance_;
  delete IndSubCompCapInfoToDevmgr_CompanyInfo_reflection_;
  delete IndSubSvrHeartTodev::default_instance_;
  delete IndSubSvrHeartTodev_reflection_;
  delete IndSubSvrHeartTodev_LoadInfo::default_instance_;
  delete IndSubSvrHeartTodev_LoadInfo_reflection_;
  delete IndSubSvrHeartTodev_ServerInfo::default_instance_;
  delete IndSubSvrHeartTodev_ServerInfo_reflection_;
  delete IndSubSvrHeartTodev_DomainInfo::default_instance_;
  delete IndSubSvrHeartTodev_DomainInfo_reflection_;
  delete IndVASAnalyVideoResult::default_instance_;
  delete IndVASAnalyVideoResult_reflection_;
  delete IndVASAnalyVideoResult_videoMatch::default_instance_;
  delete IndVASAnalyVideoResult_videoMatch_reflection_;
  delete IndVASAnalyVideoResult_MatchResult::default_instance_;
  delete IndVASAnalyVideoResult_MatchResult_reflection_;
  delete RspConfInfoToMC::default_instance_;
  delete RspConfInfoToMC_reflection_;
  delete RspConfInfoToMC_LicenceInfo::default_instance_;
  delete RspConfInfoToMC_LicenceInfo_reflection_;
  delete RspConfInfoToMC_CompanyInfo::default_instance_;
  delete RspConfInfoToMC_CompanyInfo_reflection_;
  delete RspConfInfoToMC_AgcSetting::default_instance_;
  delete RspConfInfoToMC_AgcSetting_reflection_;
  delete RspConfInfoToMC_Confcfg::default_instance_;
  delete RspConfInfoToMC_Confcfg_reflection_;
  delete RspConfInfoToMC_ParticipantInfo::default_instance_;
  delete RspConfInfoToMC_ParticipantInfo_reflection_;
  delete RspConfInfoToMC_LiveSetting::default_instance_;
  delete RspConfInfoToMC_LiveSetting_reflection_;
  delete RspConfInfoToMC_RollCallInfo::default_instance_;
  delete RspConfInfoToMC_RollCallInfo_reflection_;
  delete RspConfInfoToMC_AutoPollInfo::default_instance_;
  delete RspConfInfoToMC_AutoPollInfo_reflection_;
  delete RspConfInfoToMC_WhiteListInfo::default_instance_;
  delete RspConfInfoToMC_WhiteListInfo_reflection_;
  delete IndDevtoserHeart::default_instance_;
  delete IndDevtoserHeart_reflection_;
  delete IndUpSvrInfoToDevmgr::default_instance_;
  delete IndUpSvrInfoToDevmgr_reflection_;
  delete IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance_;
  delete IndUpSvrInfoToDevmgr_IPPORTInfo_reflection_;
  delete IndUpSvrInfoToDevmgr_ServerInfo::default_instance_;
  delete IndUpSvrInfoToDevmgr_ServerInfo_reflection_;
  delete IndUpSvrInfoToDevmgr_DomainInfo::default_instance_;
  delete IndUpSvrInfoToDevmgr_DomainInfo_reflection_;
  delete IndUpCompCapInfoToDevmgr::default_instance_;
  delete IndUpCompCapInfoToDevmgr_reflection_;
  delete IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance_;
  delete IndUpCompCapInfoToDevmgr_LicenceInfo_reflection_;
  delete IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance_;
  delete IndUpCompCapInfoToDevmgr_CompanyInfo_reflection_;
  delete IndUpSvrHeartTodev::default_instance_;
  delete IndUpSvrHeartTodev_reflection_;
  delete IndUpSvrHeartTodev_LoadInfo::default_instance_;
  delete IndUpSvrHeartTodev_LoadInfo_reflection_;
  delete IndUpSvrHeartTodev_ServerInfo::default_instance_;
  delete IndUpSvrHeartTodev_ServerInfo_reflection_;
  delete IndUpSvrHeartTodev_DomainInfo::default_instance_;
  delete IndUpSvrHeartTodev_DomainInfo_reflection_;
  delete RspRegister::default_instance_;
  delete RspRegister_reflection_;
  delete RspRegister_Capset::default_instance_;
  delete RspRegister_Capset_reflection_;
  delete RspRegister_CapInfo::default_instance_;
  delete RspRegister_CapInfo_reflection_;
  delete RspRegister_LicenceInfo::default_instance_;
  delete RspRegister_LicenceInfo_reflection_;
  delete RspRegister_CompanyInfo::default_instance_;
  delete RspRegister_CompanyInfo_reflection_;
  delete RspUnRegister::default_instance_;
  delete RspUnRegister_reflection_;
  delete RspGetDeviceInfo::default_instance_;
  delete RspGetDeviceInfo_reflection_;
  delete RspGetDeviceInfo_MapIPInfo::default_instance_;
  delete RspGetDeviceInfo_MapIPInfo_reflection_;
  delete RspGetDeviceInfo_DeviceInfo::default_instance_;
  delete RspGetDeviceInfo_DeviceInfo_reflection_;
  delete RspGetSysDeviceInfo::default_instance_;
  delete RspGetSysDeviceInfo_reflection_;
  delete RspGetSysDeviceInfo_LoadInfo::default_instance_;
  delete RspGetSysDeviceInfo_LoadInfo_reflection_;
  delete RspGetSysDeviceInfo_IPPORTInfo::default_instance_;
  delete RspGetSysDeviceInfo_IPPORTInfo_reflection_;
  delete RspGetSysDeviceInfo_DeviceInfo::default_instance_;
  delete RspGetSysDeviceInfo_DeviceInfo_reflection_;
  delete RspGetSysDeviceInfo_DomainInfo::default_instance_;
  delete RspGetSysDeviceInfo_DomainInfo_reflection_;
  delete RspGetSystemCurLoad::default_instance_;
  delete RspGetSystemCurLoad_reflection_;
  delete RspGetSystemCurLoad_LoadInfo::default_instance_;
  delete RspGetSystemCurLoad_LoadInfo_reflection_;
  delete RspGetSystemCurLoad_CompanyInfo::default_instance_;
  delete RspGetSystemCurLoad_CompanyInfo_reflection_;
  delete IndCompLicenseInfo::default_instance_;
  delete IndCompLicenseInfo_reflection_;
  delete IndCompLicenseInfo_LicenceInfo::default_instance_;
  delete IndCompLicenseInfo_LicenceInfo_reflection_;
  delete IndCompLicenseInfo_CompanyInfo::default_instance_;
  delete IndCompLicenseInfo_CompanyInfo_reflection_;
  delete IndCompLicenseInfoToDevmgr::default_instance_;
  delete IndCompLicenseInfoToDevmgr_reflection_;
  delete IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance_;
  delete IndCompLicenseInfoToDevmgr_LicenceInfo_reflection_;
  delete IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance_;
  delete IndCompLicenseInfoToDevmgr_CompanyInfo_reflection_;
  delete RspLicenseToMC::default_instance_;
  delete RspLicenseToMC_reflection_;
  delete RspLicenseToMC_LicenceInfo::default_instance_;
  delete RspLicenseToMC_LicenceInfo_reflection_;
  delete RspLicenseToMC_CompanyInfo::default_instance_;
  delete RspLicenseToMC_CompanyInfo_reflection_;
  delete RspUpdateDeviceInfo::default_instance_;
  delete RspUpdateDeviceInfo_reflection_;
  delete RspUpdateDeviceInfo_DeviceInfo::default_instance_;
  delete RspUpdateDeviceInfo_DeviceInfo_reflection_;
  delete CmdGWOPMonitor::default_instance_;
  delete CmdGWOPMonitor_reflection_;
  delete CmdGWOPAVConfig::default_instance_;
  delete CmdGWOPAVConfig_reflection_;
  delete CmdGWOPAVConfig_Capset::default_instance_;
  delete CmdGWOPAVConfig_Capset_reflection_;
  delete CmdGWOPAVConfig_CapInfo::default_instance_;
  delete CmdGWOPAVConfig_CapInfo_reflection_;
}

void protobuf_AddDesc_device_5fser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020device_ser.proto\022\006SRMsgs\"\265\004\n\013ReqRegist"
    "er\022\n\n\002ip\030\001 \001(\r\022\014\n\004port\030\002 \001(\r\022\025\n\rauth_pas"
    "sword\030\003 \001(\t\022\020\n\010svr_type\030\004 \001(\r\022\017\n\007cpunums"
    "\030\005 \001(\r\022\025\n\rmax_bandwidth\030\006 \001(\r\022.\n\010conflis"
    "t\030\007 \003(\0132\034.SRMsgs.ReqRegister.ConfInfo\022\025\n"
    "\rsystemlicence\030\010 \001(\t\022\017\n\007nettype\030\t \001(\r\022\017\n"
    "\007version\030\n \001(\t\022\022\n\ndomainname\030\013 \001(\t\022\020\n\010ht"
    "tpport\030\014 \001(\r\0225\n\016mapinternetips\030\r \003(\0132\035.S"
    "RMsgs.ReqRegister.MapIPInfo\022\021\n\tmax_terms"
    "\030\016 \001(\r\032|\n\007TerInfo\022\014\n\004suid\030\001 \001(\r\022\n\n\002ip\030\002 "
    "\001(\t\022\r\n\005alias\030\003 \001(\t\022\017\n\007netmpid\030\004 \001(\r\022\020\n\010f"
    "romtype\030\005 \001(\r\022\020\n\010termtype\030\006 \001(\r\022\023\n\013produ"
    "cttype\030\007 \001(\r\032H\n\010ConfInfo\022\016\n\006confid\030\001 \001(\004"
    "\022,\n\007terlist\030\002 \003(\0132\033.SRMsgs.ReqRegister.T"
    "erInfo\032\032\n\tMapIPInfo\022\r\n\005mapip\030\001 \001(\t\"\036\n\rRe"
    "qUnRegister\022\r\n\005token\030\001 \001(\t\"\243\002\n\025ReqConfIn"
    "foFromDevMgr\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030"
    "\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022\?\n\014complicinfos\030\004 "
    "\003(\0132).SRMsgs.ReqConfInfoFromDevMgr.Compa"
    "nyInfo\0326\n\013LicenceInfo\022\023\n\013licencetype\030\001 \001"
    "(\r\022\022\n\nlicencenum\030\002 \001(\021\032`\n\013CompanyInfo\022\021\n"
    "\tcompanyid\030\001 \001(\r\022>\n\013getlicinfos\030\002 \003(\0132)."
    "SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo"
    "\"\260\002\n\024ReqLicenseFromDevMgr\022\020\n\010deviceid\030\001 "
    "\001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022>\n\014co"
    "mplicinfos\030\004 \003(\0132(.SRMsgs.ReqLicenseFrom"
    "DevMgr.CompanyInfo\022\016\n\006seqnum\030\005 \001(\r\0326\n\013Li"
    "cenceInfo\022\023\n\013licencetype\030\001 \001(\r\022\022\n\nlicenc"
    "enum\030\002 \001(\021\032_\n\013CompanyInfo\022\021\n\tcompanyid\030\001"
    " \001(\r\022=\n\013getlicinfos\030\002 \003(\0132(.SRMsgs.ReqLi"
    "censeFromDevMgr.LicenceInfo\"\252\002\n\027IndCompa"
    "nyUseLicenceACK\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005tok"
    "en\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022A\n\014complicinfos"
    "\030\004 \003(\0132+.SRMsgs.IndCompanyUseLicenceACK."
    "CompanyInfo\0326\n\013LicenceInfo\022\023\n\013licencetyp"
    "e\030\001 \001(\r\022\022\n\nlicencenum\030\002 \001(\021\032c\n\013CompanyIn"
    "fo\022\021\n\tcompanyid\030\001 \001(\r\022A\n\014surplicinfos\030\002 "
    "\003(\0132+.SRMsgs.IndCompanyUseLicenceACK.Lic"
    "enceInfo\"\200\001\n\020ReqGetDeviceInfo\022\020\n\010devicei"
    "d\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\020\n\010svr_type\030\003 \001(\r"
    "\022\024\n\014get_svr_type\030\004 \001(\r\022\017\n\007devnums\030\005 \001(\r\022"
    "\022\n\ndomainname\030\006 \001(\t\"\213\001\n\023ReqGetSysDeviceI"
    "nfo\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\020\n\010"
    "svr_type\030\003 \001(\r\022\022\n\ndomainname\030\004 \001(\t\022\024\n\014ge"
    "t_svr_type\030\005 \001(\r\022\027\n\017get_domainnames\030\006 \003("
    "\t\"6\n\023ReqGetSystemCurLoad\022\020\n\010deviceid\030\001 \001"
    "(\r\022\r\n\005token\030\002 \001(\t\"\301\001\n\023ReqUpdateDeviceInf"
    "o\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\020\n\010sv"
    "r_type\030\003 \001(\r\022>\n\016update_devices\030\004 \003(\0132&.S"
    "RMsgs.ReqUpdateDeviceInfo.DeviceInfo\0327\n\n"
    "DeviceInfo\022\020\n\010deviceid\030\001 \001(\r\022\027\n\017update_s"
    "vr_type\030\002 \001(\r\"\212\010\n\017IndSyncConfInfo\022\020\n\010dev"
    "iceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\0223\n\tconfinfos\030"
    "\003 \003(\0132 .SRMsgs.IndSyncConfInfo.ConfInfo\032"
    "\247\001\n\010UserInfo\022\014\n\004suid\030\001 \001(\r\022\n\n\002ip\030\002 \001(\t\022\r"
    "\n\005alias\030\003 \001(\t\022\017\n\007netmpid\030\004 \001(\r\022\020\n\010fromty"
    "pe\030\005 \001(\r\022\020\n\010termtype\030\006 \001(\r\022\023\n\013producttyp"
    "e\030\007 \001(\r\022\021\n\tuserdtlid\030\010 \001(\004\022\025\n\ruserrelcom"
    "pid\030\t \001(\r\032*\n\007DevInfo\022\r\n\005devid\030\001 \001(\r\022\020\n\010d"
    "evdtlid\030\002 \001(\004\032\033\n\007RecInfo\022\020\n\010recordid\030\001 \001"
    "(\004\032%\n\010LiveAddr\022\014\n\004type\030\001 \001(\r\022\013\n\003url\030\002 \001("
    "\t\032w\n\013LiveSetting\022\020\n\010chairman\030\001 \001(\t\022\017\n\007su"
    "bject\030\002 \001(\t\022\020\n\010abstract\030\003 \001(\t\022\020\n\010ispubli"
    "c\030\004 \001(\r\022\017\n\007livepwd\030\005 \001(\t\022\020\n\010isuserec\030\006 \001"
    "(\r\032\341\001\n\010LiveInfo\022\022\n\nliveinfoid\030\001 \001(\004\022\023\n\013l"
    "ivesvrtype\030\002 \001(\r\022\023\n\013livepushurl\030\003 \001(\t\022\023\n"
    "\013livepullurl\030\004 \001(\t\022\023\n\013liveplayurl\030\005 \001(\t\022"
    "8\n\013livesetinfo\030\006 \001(\0132#.SRMsgs.IndSyncCon"
    "fInfo.LiveSetting\0223\n\tliveaddrs\030\007 \003(\0132 .S"
    "RMsgs.IndSyncConfInfo.LiveAddr\032\251\002\n\010ConfI"
    "nfo\022\016\n\006confid\030\001 \001(\004\022\024\n\014confreportid\030\002 \001("
    "\004\022\020\n\010confname\030\003 \001(\t\0221\n\010devinfos\030\004 \003(\0132\037."
    "SRMsgs.IndSyncConfInfo.DevInfo\0223\n\tuserin"
    "fos\030\005 \003(\0132 .SRMsgs.IndSyncConfInfo.UserI"
    "nfo\0221\n\010recinfos\030\006 \003(\0132\037.SRMsgs.IndSyncCo"
    "nfInfo.RecInfo\0223\n\tliveinfos\030\007 \003(\0132 .SRMs"
    "gs.IndSyncConfInfo.LiveInfo\022\025\n\rconfrelco"
    "mpid\030\010 \001(\r\"\225\002\n\022IndNewTermJoinConf\022\020\n\010dev"
    "iceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001"
    "(\004\022\014\n\004suid\030\004 \001(\r\022\n\n\002ip\030\005 \001(\t\022\r\n\005alias\030\006 "
    "\001(\t\022\017\n\007netmpid\030\007 \001(\r\022\024\n\014confreportid\030\010 \001"
    "(\004\022\020\n\010fromtype\030\t \001(\r\022\020\n\010termtype\030\n \001(\r\022\023"
    "\n\013producttype\030\013 \001(\r\022\027\n\017userrptdetailid\030\014"
    " \001(\004\022\025\n\ruserrelcompid\030\r \001(\r\022\025\n\rconfrelco"
    "mpid\030\016 \001(\r\"\376\001\n\020IndTermLeaveConf\022\020\n\010devic"
    "eid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004"
    "\022\014\n\004suid\030\004 \001(\r\022\n\n\002ip\030\005 \001(\t\022\r\n\005alias\030\006 \001("
    "\t\022\017\n\007netmpid\030\007 \001(\r\022\024\n\014confreportid\030\010 \001(\004"
    "\022\027\n\017userrptdetailid\030\t \001(\004\022\020\n\010fromtype\030\n "
    "\001(\r\022\020\n\010termtype\030\013 \001(\r\022\025\n\ruserrelcompid\030\014"
    " \001(\r\022\025\n\rconfrelcompid\030\r \001(\r\"\251\001\n\017IndMCCre"
    "ateConf\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t"
    "\022\014\n\004isok\030\003 \001(\010\022\016\n\006confid\030\004 \001(\004\022\022\n\nfailre"
    "ason\030\005 \001(\t\022\024\n\014confreportid\030\006 \001(\004\022\026\n\016mcco"
    "nfdetailid\030\007 \001(\004\022\025\n\rconfrelcompid\030\010 \001(\r\""
    "\320\007\n\020IndsertodevHeart\022\020\n\010deviceid\030\001 \001(\r\022\r"
    "\n\005token\030\002 \001(\t\022\r\n\005load1\030\003 \001(\r\022\r\n\005load2\030\004 "
    "\001(\r\022\020\n\010svr_type\030\005 \001(\r\0223\n\010loadinfo\030\006 \001(\0132"
    "!.SRMsgs.IndsertodevHeart.LoadInfo\0224\n\tco"
    "nfinfos\030\007 \003(\0132!.SRMsgs.IndsertodevHeart."
    "ConfInfo\032\260\001\n\010LoadInfo\022\016\n\006ternum\030\001 \001(\r\022\013\n"
    "\003cpu\030\002 \001(\r\022\r\n\005srcnt\030\003 \001(\r\022\016\n\006stdcnt\030\004 \001("
    "\r\022\016\n\006reccnt\030\005 \001(\r\022\017\n\007confcnt\030\006 \001(\r\022\017\n\007li"
    "vecnt\030\007 \001(\r\022\020\n\010analycnt\030\010 \001(\r\022\022\n\nmonitor"
    "cnt\030\t \001(\r\022\020\n\010voicecnt\030\n \001(\r\032*\n\007DevInfo\022\r"
    "\n\005devid\030\001 \001(\r\022\020\n\010devdtlid\030\002 \001(\004\032h\n\010UserI"
    "nfo\022\016\n\006userid\030\001 \001(\r\022\021\n\tuserdtlid\030\002 \001(\004\022\020"
    "\n\010fromtype\030\003 \001(\r\022\020\n\010termtype\030\004 \001(\r\022\025\n\rus"
    "errelcompid\030\005 \001(\r\032\033\n\007RecInfo\022\020\n\010recordid"
    "\030\001 \001(\004\032\036\n\010LiveInfo\022\022\n\nliveinfoid\030\001 \001(\004\032\""
    "\n\nVAnalyInfo\022\024\n\014vanalyinfoid\030\001 \001(\004\032\325\002\n\010C"
    "onfInfo\022\016\n\006confid\030\001 \001(\004\022\024\n\014confreportid\030"
    "\002 \001(\004\0222\n\010devinfos\030\003 \003(\0132 .SRMsgs.Indsert"
    "odevHeart.DevInfo\0224\n\tuserinfos\030\004 \003(\0132!.S"
    "RMsgs.IndsertodevHeart.UserInfo\0222\n\010recin"
    "fos\030\005 \003(\0132 .SRMsgs.IndsertodevHeart.RecI"
    "nfo\0224\n\tliveinfos\030\006 \003(\0132!.SRMsgs.Indserto"
    "devHeart.LiveInfo\0228\n\013vanalyinfos\030\007 \003(\0132#"
    ".SRMsgs.IndsertodevHeart.VAnalyInfo\022\025\n\rc"
    "onfrelcompid\030\010 \001(\r\"\235\001\n\014IndMCEndConf\022\020\n\010d"
    "eviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003"
    " \001(\004\022\024\n\014confreportid\030\004 \001(\004\022\027\n\017permanente"
    "nable\030\005 \001(\r\022\026\n\016mcconfdetailid\030\006 \001(\004\022\025\n\rc"
    "onfrelcompid\030\007 \001(\r\"\233\001\n\024IndNetMPConfInfoI"
    "nMC\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006"
    "confid\030\003 \001(\004\022\017\n\007netmpid\030\004 \001(\r\022\020\n\010addorde"
    "l\030\005 \001(\r\022\024\n\014confreportid\030\006 \001(\004\022\031\n\021netmpco"
    "nfdetailid\030\007 \001(\004\"o\n\026IndNetMPConnStatusIn"
    "MC\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\017\n\007n"
    "etmpid\030\003 \001(\r\022\022\n\nconnstatus\030\004 \001(\r\022\017\n\007grou"
    "pid\030\005 \001(\r\"\375\001\n\016IndCRSStartRec\022\020\n\010deviceid"
    "\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022\r\n"
    "\005crsid\030\004 \001(\r\022\025\n\rfilestorsvrip\030\005 \001(\t\022\024\n\014f"
    "ilestorpath\030\006 \001(\t\022\023\n\013sdefilepath\030\007 \001(\t\022\024"
    "\n\014relativepath\030\010 \001(\t\022\020\n\010confname\030\t \001(\t\022\024"
    "\n\014confreportid\030\n \001(\004\022\024\n\014confrecordid\030\013 \001"
    "(\004\022\025\n\rconfrelcompid\030\014 \001(\r\"\270\002\n\rIndCRSStop"
    "Rec\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006"
    "confid\030\003 \001(\004\022\r\n\005crsid\030\004 \001(\r\022\025\n\rfilestors"
    "vrip\030\005 \001(\t\022\024\n\014filestorpath\030\006 \001(\t\022\023\n\013sdef"
    "ilepath\030\007 \001(\t\022\024\n\014relativepath\030\010 \001(\t\022\022\n\ns"
    "topreason\030\t \001(\r\022\020\n\010confname\030\n \001(\t\022\024\n\014con"
    "freportid\030\013 \001(\004\022\020\n\010filesize\030\014 \001(\004\022\024\n\014con"
    "frecordid\030\r \001(\004\022\024\n\014recordfileid\030\016 \001(\004\022\025\n"
    "\rconfrelcompid\030\017 \001(\r\"\230\002\n\025IndCRSFileStora"
    "gePath\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022"
    "\016\n\006confid\030\003 \001(\004\022\r\n\005crsid\030\004 \001(\r\022\025\n\rfilest"
    "orsvrip\030\005 \001(\t\022\024\n\014filestorpath\030\006 \001(\t\022\023\n\013s"
    "defilepath\030\007 \001(\t\022\024\n\014relativepath\030\010 \001(\t\022\023"
    "\n\013recordstate\030\t \001(\r\022\024\n\014confreportid\030\n \001("
    "\004\022\020\n\010filesize\030\013 \001(\004\022\024\n\014confrecordid\030\014 \001("
    "\004\022\024\n\014recordfileid\030\r \001(\004\"\211\001\n\025IndVASAnalyV"
    "ideoState\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001"
    "(\t\022\016\n\006confid\030\003 \001(\004\022\024\n\014confreportid\030\004 \001(\004"
    "\022\022\n\nanalystate\030\005 \001(\r\022\025\n\rconfrelcompid\030\006 "
    "\001(\r\"\365\003\n\017IndCRSStartLive\022\020\n\010deviceid\030\001 \001("
    "\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022\r\n\005crsi"
    "d\030\004 \001(\r\022\023\n\013livepushurl\030\005 \001(\t\022\023\n\013livepull"
    "url\030\006 \001(\t\022\023\n\013liveplayurl\030\007 \001(\t\0228\n\013livese"
    "tinfo\030\010 \001(\0132#.SRMsgs.IndCRSStartLive.Liv"
    "eSetting\022\024\n\014confreportid\030\t \001(\004\022\023\n\013livesv"
    "rtype\030\n \001(\r\0223\n\tliveaddrs\030\013 \003(\0132 .SRMsgs."
    "IndCRSStartLive.LiveAddr\022\022\n\nliveinfoid\030\014"
    " \001(\004\022\025\n\rconfrelcompid\030\r \001(\r\032%\n\010LiveAddr\022"
    "\014\n\004type\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\032w\n\013LiveSettin"
    "g\022\020\n\010chairman\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022\020\n\010"
    "abstract\030\003 \001(\t\022\020\n\010ispublic\030\004 \001(\r\022\017\n\007live"
    "pwd\030\005 \001(\t\022\020\n\010isuserec\030\006 \001(\r\"\242\001\n\016IndCRSSt"
    "opLive\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022"
    "\016\n\006confid\030\003 \001(\004\022\r\n\005crsid\030\004 \001(\r\022\017\n\007liveur"
    "l\030\005 \001(\t\022\024\n\014confreportid\030\006 \001(\004\022\022\n\nliveinf"
    "oid\030\007 \001(\004\022\025\n\rconfrelcompid\030\010 \001(\r\"\272\002\n\025Ind"
    "ModifyConfCallList\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005"
    "token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022\016\n\006optype\030\004 "
    "\001(\r\022@\n\014rollcalllist\030\005 \001(\0132*.SRMsgs.IndMo"
    "difyConfCallList.RollCallInfo\0322\n\017Partici"
    "pantInfo\022\r\n\005psuid\030\001 \001(\r\022\020\n\010nickname\030\002 \001("
    "\t\032j\n\014RollCallInfo\022\014\n\004rcid\030\001 \001(\004\022\016\n\006rcnam"
    "e\030\002 \001(\t\022<\n\005parts\030\003 \003(\0132-.SRMsgs.IndModif"
    "yConfCallList.ParticipantInfo\"\261\010\n\024IndTer"
    "StatisticsInfo\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005toke"
    "n\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022>\n\006tsinfo\030\004 \003(\0132"
    "..SRMsgs.IndTerStatisticsInfo.TerStatist"
    "icsInfo\0322\n\tFrameInfo\022\013\n\003fsw\030\001 \001(\r\022\013\n\003fsh"
    "\030\002 \001(\r\022\013\n\003fps\030\003 \001(\r\032:\n\013AdvanceInfo\022\r\n\005de"
    "lay\030\001 \001(\r\022\016\n\006jitter\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\032"
    "+\n\010BaseInfo\022\016\n\006format\030\001 \001(\r\022\017\n\007bitrate\030\002"
    " \001(\r\032\263\001\n\tAudioInfo\022\r\n\005atype\030\001 \001(\r\022\020\n\010ate"
    "rsuid\030\002 \001(\r\022\021\n\tateralias\030\003 \001(\t\0227\n\010basein"
    "fo\030\004 \001(\0132%.SRMsgs.IndTerStatisticsInfo.B"
    "aseInfo\0229\n\007advinfo\030\005 \001(\0132(.SRMsgs.IndTer"
    "StatisticsInfo.AdvanceInfo\032\356\001\n\tVideoInfo"
    "\022\r\n\005vtype\030\001 \001(\r\022\020\n\010vtersuid\030\002 \001(\r\022\021\n\tvte"
    "ralias\030\003 \001(\t\0227\n\010baseinfo\030\004 \001(\0132%.SRMsgs."
    "IndTerStatisticsInfo.BaseInfo\0229\n\007advinfo"
    "\030\005 \001(\0132(.SRMsgs.IndTerStatisticsInfo.Adv"
    "anceInfo\0229\n\tframeinfo\030\006 \003(\0132&.SRMsgs.Ind"
    "TerStatisticsInfo.FrameInfo\032w\n\007XfeInfo\0225"
    "\n\005ainfo\030\001 \003(\0132&.SRMsgs.IndTerStatisticsI"
    "nfo.AudioInfo\0225\n\005vinfo\030\002 \003(\0132&.SRMsgs.In"
    "dTerStatisticsInfo.VideoInfo\032\352\001\n\021TerStat"
    "isticsInfo\022\014\n\004suid\030\001 \001(\r\022\r\n\005alias\030\002 \001(\t\022"
    "4\n\006txinfo\030\003 \003(\0132$.SRMsgs.IndTerStatistic"
    "sInfo.XfeInfo\0224\n\006rxinfo\030\004 \003(\0132$.SRMsgs.I"
    "ndTerStatisticsInfo.XfeInfo\022\020\n\010fromtype\030"
    "\005 \001(\r\022\020\n\010termtype\030\006 \001(\r\022\023\n\013txbweresult\030\007"
    " \001(\r\022\023\n\013producttype\030\010 \001(\r\"\232\003\n\025IndSubSvrI"
    "nfoToDevmgr\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002"
    " \001(\t\022\020\n\010addordel\030\003 \001(\r\022=\n\013domaininfos\030\004 "
    "\003(\0132(.SRMsgs.IndSubSvrInfoToDevmgr.Domai"
    "nInfo\0327\n\nIPPORTInfo\022\r\n\005inner\030\001 \001(\t\022\r\n\005ou"
    "ter\030\002 \001(\t\022\013\n\003vpn\030\003 \001(\t\032i\n\nServerInfo\022\017\n\007"
    "svrtype\030\001 \001(\r\022\020\n\010deviceid\030\002 \001(\r\0228\n\006ippor"
    "t\030\003 \001(\0132(.SRMsgs.IndSubSvrInfoToDevmgr.I"
    "PPORTInfo\032k\n\nDomainInfo\022\022\n\ndomainname\030\001 "
    "\001(\t\022\r\n\005level\030\002 \001(\021\022:\n\010svrinfos\030\003 \003(\0132(.S"
    "RMsgs.IndSubSvrInfoToDevmgr.ServerInfo\"\356"
    "\002\n\031IndSubCompCapInfoToDevmgr\022\020\n\010deviceid"
    "\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\025\n\roperationtype\030\003"
    " \001(\r\022@\n\tcompinfos\030\004 \003(\0132-.SRMsgs.IndSubC"
    "ompCapInfoToDevmgr.CompanyInfo\032Z\n\013Licenc"
    "eInfo\022\023\n\013licencetype\030\001 \001(\r\022\022\n\nlicencenum"
    "\030\002 \001(\021\022\021\n\tstarttime\030\003 \001(\t\022\017\n\007exptime\030\004 \001"
    "(\t\032{\n\013CompanyInfo\022\021\n\tcompanyid\030\001 \001(\r\022\023\n\013"
    "companyname\030\002 \001(\t\022D\n\rtotallicinfos\030\003 \003(\013"
    "2-.SRMsgs.IndSubCompCapInfoToDevmgr.Lice"
    "nceInfo\"\211\003\n\023IndSubSvrHeartTodev\022\020\n\010devic"
    "eid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022;\n\013domaininfos\030"
    "\003 \003(\0132&.SRMsgs.IndSubSvrHeartTodev.Domai"
    "nInfo\032\?\n\010LoadInfo\022\016\n\006ternum\030\001 \001(\r\022\n\n\002tx\030"
    "\002 \001(\r\022\n\n\002rx\030\003 \001(\r\022\013\n\003cpu\030\004 \001(\r\032h\n\nServer"
    "Info\022\017\n\007svrtype\030\001 \001(\r\022\020\n\010deviceid\030\002 \001(\r\022"
    "7\n\tloadinfos\030\003 \001(\0132$.SRMsgs.IndSubSvrHea"
    "rtTodev.LoadInfo\032i\n\nDomainInfo\022\022\n\ndomain"
    "name\030\001 \001(\t\022\r\n\005level\030\002 \001(\021\0228\n\010svrinfos\030\003 "
    "\003(\0132&.SRMsgs.IndSubSvrHeartTodev.ServerI"
    "nfo\"\261\002\n\026IndVASAnalyVideoResult\022\020\n\010device"
    "id\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\016\n\006confid\030\003 \001(\004\022"
    "\024\n\014confreportid\030\004 \001(\004\022@\n\014matchresults\030\005 "
    "\003(\0132*.SRMsgs.IndVASAnalyVideoResult.Matc"
    "hResult\032*\n\nvideoMatch\022\016\n\006userid\030\001 \001(\r\022\014\n"
    "\004rate\030\002 \001(\r\032b\n\013MatchResult\022\023\n\013hasmismatc"
    "h\030\001 \001(\010\022>\n\013videoMatchs\030\002 \003(\0132).SRMsgs.In"
    "dVASAnalyVideoResult.videoMatch\"\332\020\n\017RspC"
    "onfInfoToMC\022\014\n\004isok\030\001 \001(\010\022\014\n\004suid\030\002 \001(\r\022"
    "\016\n\006confid\030\003 \001(\004\022\017\n\007confpwd\030\004 \001(\t\022\017\n\007recv"
    "pwd\030\005 \001(\t\022\021\n\tbegintime\030\006 \001(\t\022\017\n\007endtime\030"
    "\007 \001(\t\022\021\n\tislimited\030\010 \001(\010\022\017\n\007subject\030\t \001("
    "\t\022\020\n\010conftype\030\n \001(\r\022\027\n\017confstartmethod\030\013"
    " \001(\r\022\020\n\010mutetype\030\014 \001(\r\022\017\n\007ternums\030\r \001(\r\022"
    "0\n\007confcfg\030\016 \001(\0132\037.SRMsgs.RspConfInfoToM"
    "C.Confcfg\022\025\n\rfailurereason\030\017 \001(\t\022=\n\014part"
    "icipants\030\020 \003(\0132\'.SRMsgs.RspConfInfoToMC."
    "ParticipantInfo\022\024\n\014confctrlsuid\030\021 \001(\r\022\023\n"
    "\013audioenable\030\022 \001(\r\022\023\n\013videoenable\030\023 \001(\r\022"
    "\020\n\010confname\030\024 \001(\t\022\022\n\nencryptalg\030\025 \001(\r\0228\n"
    "\013livesetinfo\030\026 \001(\0132#.SRMsgs.RspConfInfoT"
    "oMC.LiveSetting\022\017\n\007autorec\030\027 \001(\r\022\024\n\014conf"
    "reportid\030\030 \001(\004\022\021\n\terrorcode\030\031 \001(\r\022:\n\014rol"
    "lcalllist\030\032 \003(\0132$.SRMsgs.RspConfInfoToMC"
    ".RollCallInfo\022\027\n\017permanentenable\030\033 \001(\r\022:"
    "\n\014autopolllist\030\034 \003(\0132$.SRMsgs.RspConfInf"
    "oToMC.AutoPollInfo\022\025\n\rconfrelcompid\030\035 \001("
    "\r\0229\n\014complicinfos\030\036 \003(\0132#.SRMsgs.RspConf"
    "InfoToMC.CompanyInfo\022\025\n\rparttotalnums\030\037 "
    "\001(\r\022\027\n\017partalreadynums\030  \001(\r\022\023\n\013rctotaln"
    "ums\030! \001(\r\022\025\n\rrcalreadynums\030\" \001(\r\022\023\n\013apto"
    "talnums\030# \001(\r\022\025\n\rapalreadynums\030$ \001(\r\0229\n\n"
    "whitelists\030% \003(\0132%.SRMsgs.RspConfInfoToM"
    "C.WhiteListInfo\0326\n\013LicenceInfo\022\023\n\013licenc"
    "etype\030\001 \001(\r\022\022\n\nlicencenum\030\002 \001(\021\032Z\n\013Compa"
    "nyInfo\022\021\n\tcompanyid\030\001 \001(\r\0228\n\013getlicinfos"
    "\030\002 \003(\0132#.SRMsgs.RspConfInfoToMC.LicenceI"
    "nfo\032p\n\nAgcSetting\022\022\n\nagc_enable\030\001 \001(\010\022\031\n"
    "\021target_level_dbfs\030\002 \001(\005\022\033\n\023compression_"
    "gain_db\030\003 \001(\005\022\026\n\016limiter_enable\030\004 \001(\010\032\347\001"
    "\n\007Confcfg\022\030\n\020max_audiomix_num\030\001 \001(\r\022\025\n\ru"
    "seVideoMixer\030\002 \001(\r\022\025\n\ruseAudioMixer\030\003 \001("
    "\r\022\030\n\020mixing_frequency\030\004 \001(\r\022\027\n\017max_encod"
    "er_num\030\005 \001(\r\0227\n\013agc_setting\030\006 \001(\0132\".SRMs"
    "gs.RspConfInfoToMC.AgcSetting\022\021\n\tvideosi"
    "ze\030\007 \001(\r\022\025\n\ruseedgeserver\030\010 \001(\r\032\305\001\n\017Part"
    "icipantInfo\022\r\n\005psuid\030\001 \001(\r\022\020\n\010nickname\030\002"
    " \001(\t\022\n\n\002ip\030\003 \001(\t\022\024\n\014protocoltype\030\004 \001(\r\022\021"
    "\n\tbandwidth\030\005 \001(\r\022\020\n\010usertype\030\006 \001(\r\022\022\n\nd"
    "evicetype\030\007 \001(\r\022\022\n\ndevicecode\030\010 \001(\t\022\021\n\ts"
    "hortname\030\t \001(\t\022\017\n\007orderno\030\n \001(\r\032w\n\013LiveS"
    "etting\022\020\n\010chairman\030\001 \001(\t\022\017\n\007subject\030\002 \001("
    "\t\022\020\n\010abstract\030\003 \001(\t\022\020\n\010ispublic\030\004 \001(\r\022\017\n"
    "\007livepwd\030\005 \001(\t\022\020\n\010isuserec\030\006 \001(\r\032d\n\014Roll"
    "CallInfo\022\014\n\004rcid\030\001 \001(\004\022\016\n\006rcname\030\002 \001(\t\0226"
    "\n\005parts\030\003 \003(\0132\'.SRMsgs.RspConfInfoToMC.P"
    "articipantInfo\032d\n\014AutoPollInfo\022\014\n\004apid\030\001"
    " \001(\004\022\016\n\006apname\030\002 \001(\t\0226\n\005parts\030\003 \003(\0132\'.SR"
    "Msgs.RspConfInfoToMC.ParticipantInfo\032^\n\r"
    "WhiteListInfo\022\025\n\rwhitelisttype\030\001 \001(\r\0226\n\005"
    "parts\030\002 \003(\0132\'.SRMsgs.RspConfInfoToMC.Par"
    "ticipantInfo\"!\n\020IndDevtoserHeart\022\r\n\005toke"
    "n\030\001 \001(\t\"\226\003\n\024IndUpSvrInfoToDevmgr\022\020\n\010devi"
    "ceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\020\n\010addordel\030\003 "
    "\001(\r\022<\n\013domaininfos\030\004 \003(\0132\'.SRMsgs.IndUpS"
    "vrInfoToDevmgr.DomainInfo\0327\n\nIPPORTInfo\022"
    "\r\n\005inner\030\001 \001(\t\022\r\n\005outer\030\002 \001(\t\022\013\n\003vpn\030\003 \001"
    "(\t\032h\n\nServerInfo\022\017\n\007svrtype\030\001 \001(\r\022\020\n\010dev"
    "iceid\030\002 \001(\r\0227\n\006ipport\030\003 \001(\0132\'.SRMsgs.Ind"
    "UpSvrInfoToDevmgr.IPPORTInfo\032j\n\nDomainIn"
    "fo\022\022\n\ndomainname\030\001 \001(\t\022\r\n\005level\030\002 \001(\021\0229\n"
    "\010svrinfos\030\003 \003(\0132\'.SRMsgs.IndUpSvrInfoToD"
    "evmgr.ServerInfo\"\353\002\n\030IndUpCompCapInfoToD"
    "evmgr\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022\025"
    "\n\roperationtype\030\003 \001(\r\022\?\n\tcompinfos\030\004 \003(\013"
    "2,.SRMsgs.IndUpCompCapInfoToDevmgr.Compa"
    "nyInfo\032Z\n\013LicenceInfo\022\023\n\013licencetype\030\001 \001"
    "(\r\022\022\n\nlicencenum\030\002 \001(\021\022\021\n\tstarttime\030\003 \001("
    "\t\022\017\n\007exptime\030\004 \001(\t\032z\n\013CompanyInfo\022\021\n\tcom"
    "panyid\030\001 \001(\r\022\023\n\013companyname\030\002 \001(\t\022C\n\rtot"
    "allicinfos\030\003 \003(\0132,.SRMsgs.IndUpCompCapIn"
    "foToDevmgr.LicenceInfo\"\205\003\n\022IndUpSvrHeart"
    "Todev\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\022:"
    "\n\013domaininfos\030\003 \003(\0132%.SRMsgs.IndUpSvrHea"
    "rtTodev.DomainInfo\032\?\n\010LoadInfo\022\016\n\006ternum"
    "\030\001 \001(\r\022\n\n\002tx\030\002 \001(\r\022\n\n\002rx\030\003 \001(\r\022\013\n\003cpu\030\004 "
    "\001(\r\032g\n\nServerInfo\022\017\n\007svrtype\030\001 \001(\r\022\020\n\010de"
    "viceid\030\002 \001(\r\0226\n\tloadinfos\030\003 \001(\0132#.SRMsgs"
    ".IndUpSvrHeartTodev.LoadInfo\032h\n\nDomainIn"
    "fo\022\022\n\ndomainname\030\001 \001(\t\022\r\n\005level\030\002 \001(\021\0227\n"
    "\010svrinfos\030\003 \003(\0132%.SRMsgs.IndUpSvrHeartTo"
    "dev.ServerInfo\"\251\004\n\013RspRegister\022\014\n\004isok\030\001"
    " \001(\010\022\020\n\010deviceid\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\022\025\n"
    "\rfailurereason\030\004 \001(\t\022\017\n\007groupid\030\005 \001(\r\022\022\n"
    "\ndomainname\030\006 \001(\t\022\021\n\terrorcode\030\007 \001(\r\022-\n\010"
    "capinfos\030\010 \003(\0132\033.SRMsgs.RspRegister.CapI"
    "nfo\022\016\n\006sysmtu\030\t \001(\r\0222\n\tcompinfos\030\n \003(\0132\037"
    ".SRMsgs.RspRegister.CompanyInfo\032\025\n\006Capse"
    "t\022\013\n\003fmt\030\001 \001(\t\032G\n\007CapInfo\022\017\n\007captype\030\001 \001"
    "(\r\022+\n\007capsets\030\002 \003(\0132\032.SRMsgs.RspRegister"
    ".Capset\032Z\n\013LicenceInfo\022\023\n\013licencetype\030\001 "
    "\001(\r\022\022\n\nlicencenum\030\002 \001(\021\022\021\n\tstarttime\030\003 \001"
    "(\t\022\017\n\007exptime\030\004 \001(\t\032m\n\013CompanyInfo\022\021\n\tco"
    "mpanyid\030\001 \001(\r\022\023\n\013companyname\030\002 \001(\t\0226\n\rto"
    "tallicinfos\030\003 \003(\0132\037.SRMsgs.RspRegister.L"
    "icenceInfo\"4\n\rRspUnRegister\022\014\n\004isok\030\001 \001("
    "\010\022\025\n\rfailurereason\030\002 \001(\t\"\226\003\n\020RspGetDevic"
    "eInfo\022\r\n\005token\030\002 \001(\t\022;\n\016deviceinfolist\030\003"
    " \003(\0132#.SRMsgs.RspGetDeviceInfo.DeviceInf"
    "o\032\032\n\tMapIPInfo\022\r\n\005mapip\030\001 \001(\t\032\231\002\n\nDevice"
    "Info\022\020\n\010deviceid\030\001 \001(\r\022\020\n\010svr_type\030\002 \001(\r"
    "\022\024\n\014get_svr_type\030\003 \001(\r\022\n\n\002ip\030\004 \001(\r\022\014\n\004po"
    "rt\030\005 \001(\r\022\014\n\004load\030\006 \001(\r\022\r\n\005load2\030\007 \001(\r\022\017\n"
    "\007groupid\030\010 \001(\r\022\022\n\ndomainname\030\t \001(\t\022:\n\016ma"
    "pinternetips\030\n \003(\0132\".SRMsgs.RspGetDevice"
    "Info.MapIPInfo\022\017\n\007nettype\030\013 \001(\r\022\025\n\rmax_b"
    "andwidth\030\014 \001(\r\022\021\n\tmax_terms\030\r \001(\r\"\372\003\n\023Rs"
    "pGetSysDeviceInfo\022\020\n\010deviceid\030\001 \001(\r\022\r\n\005t"
    "oken\030\002 \001(\t\022\017\n\007svrtype\030\003 \001(\r\022;\n\013domaininf"
    "os\030\004 \003(\0132&.SRMsgs.RspGetSysDeviceInfo.Do"
    "mainInfo\032\?\n\010LoadInfo\022\016\n\006ternum\030\001 \001(\r\022\n\n\002"
    "tx\030\002 \001(\r\022\n\n\002rx\030\003 \001(\r\022\013\n\003cpu\030\004 \001(\r\0327\n\nIPP"
    "ORTInfo\022\r\n\005inner\030\001 \001(\t\022\r\n\005outer\030\002 \001(\t\022\013\n"
    "\003vpn\030\003 \001(\t\032\217\001\n\nDeviceInfo\022\020\n\010deviceid\030\001 "
    "\001(\r\0226\n\006ipport\030\002 \001(\0132&.SRMsgs.RspGetSysDe"
    "viceInfo.IPPORTInfo\0227\n\tloadinfos\030\003 \001(\0132$"
    ".SRMsgs.RspGetSysDeviceInfo.LoadInfo\032h\n\n"
    "DomainInfo\022\022\n\ndomainname\030\001 \001(\t\022\r\n\005level\030"
    "\002 \001(\021\0227\n\007devices\030\003 \003(\0132&.SRMsgs.RspGetSy"
    "sDeviceInfo.DeviceInfo\"\305\003\n\023RspGetSystemC"
    "urLoad\022\r\n\005token\030\001 \001(\t\022\022\n\ncurconfcnt\030\002 \001("
    "\r\022\021\n\tcurreccnt\030\003 \001(\r\022\022\n\ncurlivecnt\030\004 \001(\r"
    "\022\023\n\013curanalycnt\030\005 \001(\r\022:\n\tcompinfos\030\006 \003(\013"
    "2\'.SRMsgs.RspGetSystemCurLoad.CompanyInf"
    "o\032\243\001\n\010LoadInfo\022\017\n\007confcnt\030\001 \001(\r\022\016\n\006ternu"
    "m\030\002 \001(\r\022\r\n\005srcnt\030\003 \001(\r\022\016\n\006stdcnt\030\004 \001(\r\022\016"
    "\n\006reccnt\030\005 \001(\r\022\017\n\007livecnt\030\006 \001(\r\022\020\n\010analy"
    "cnt\030\007 \001(\r\022\022\n\nmonitorcnt\030\010 \001(\r\022\020\n\010voicecn"
    "t\030\t \001(\r\032m\n\013CompanyInfo\022\021\n\tcompanyid\030\001 \001("
    "\r\022\023\n\013companyname\030\002 \001(\t\0226\n\010curloads\030\003 \001(\013"
    "2$.SRMsgs.RspGetSystemCurLoad.LoadInfo\"\317"
    "\002\n\022IndCompLicenseInfo\022\014\n\004isok\030\001 \001(\010\022\020\n\010d"
    "eviceid\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\0229\n\tcompinfo"
    "s\030\004 \003(\0132&.SRMsgs.IndCompLicenseInfo.Comp"
    "anyInfo\032Z\n\013LicenceInfo\022\023\n\013licencetype\030\001 "
    "\001(\r\022\022\n\nlicencenum\030\002 \001(\021\022\021\n\tstarttime\030\003 \001"
    "(\t\022\017\n\007exptime\030\004 \001(\t\032s\n\013CompanyInfo\022\021\n\tco"
    "mpanyid\030\001 \001(\r\022\023\n\013companyname\030\002 \001(\t\022<\n\014li"
    "cenceinfos\030\003 \003(\0132&.SRMsgs.IndCompLicense"
    "Info.LicenceInfo\"\347\002\n\032IndCompLicenseInfoT"
    "oDevmgr\022\014\n\004isok\030\001 \001(\010\022\020\n\010deviceid\030\002 \001(\r\022"
    "\r\n\005token\030\003 \001(\t\022A\n\tcompinfos\030\004 \003(\0132..SRMs"
    "gs.IndCompLicenseInfoToDevmgr.CompanyInf"
    "o\032Z\n\013LicenceInfo\022\023\n\013licencetype\030\001 \001(\r\022\022\n"
    "\nlicencenum\030\002 \001(\021\022\021\n\tstarttime\030\003 \001(\t\022\017\n\007"
    "exptime\030\004 \001(\t\032{\n\013CompanyInfo\022\021\n\tcompanyi"
    "d\030\001 \001(\r\022\023\n\013companyname\030\002 \001(\t\022D\n\014licencei"
    "nfos\030\003 \003(\0132..SRMsgs.IndCompLicenseInfoTo"
    "Devmgr.LicenceInfo\"\251\002\n\016RspLicenseToMC\022\014\n"
    "\004isok\030\001 \001(\010\022\020\n\010deviceid\030\002 \001(\r\022\r\n\005token\030\003"
    " \001(\t\022\016\n\006confid\030\004 \001(\004\0225\n\tcompinfos\030\005 \003(\0132"
    "\".SRMsgs.RspLicenseToMC.CompanyInfo\022\016\n\006s"
    "eqnum\030\006 \001(\r\0326\n\013LicenceInfo\022\023\n\013licencetyp"
    "e\030\001 \001(\r\022\022\n\nlicencenum\030\002 \001(\021\032Y\n\013CompanyIn"
    "fo\022\021\n\tcompanyid\030\001 \001(\r\0227\n\013getlicinfos\030\002 \003"
    "(\0132\".SRMsgs.RspLicenseToMC.LicenceInfo\"\315"
    "\001\n\023RspUpdateDeviceInfo\022\r\n\005token\030\002 \001(\t\022>\n"
    "\016update_devices\030\003 \003(\0132&.SRMsgs.RspUpdate"
    "DeviceInfo.DeviceInfo\032g\n\nDeviceInfo\022\020\n\010d"
    "eviceid\030\001 \001(\r\022\020\n\010svr_type\030\002 \001(\r\022\n\n\002ip\030\004 "
    "\001(\r\022\014\n\004port\030\005 \001(\r\022\014\n\004load\030\006 \001(\r\022\r\n\005load2"
    "\030\007 \001(\r\"\206\001\n\016CmdGWOPMonitor\022\r\n\005token\030\001 \001(\t"
    "\022\016\n\006optype\030\002 \001(\r\022\024\n\014platformcode\030\003 \001(\t\022\016"
    "\n\006dsturl\030\004 \001(\t\022\027\n\017platformnewcode\030\005 \001(\t\022"
    "\026\n\016platformnewkey\030\006 \001(\t\"\307\001\n\017CmdGWOPAVCon"
    "fig\022\r\n\005token\030\001 \001(\t\022\016\n\006optype\030\002 \001(\r\0221\n\010ca"
    "pinfos\030\003 \003(\0132\037.SRMsgs.CmdGWOPAVConfig.Ca"
    "pInfo\032\025\n\006Capset\022\013\n\003fmt\030\001 \001(\t\032K\n\007CapInfo\022"
    "\017\n\007captype\030\001 \001(\r\022/\n\007capsets\030\002 \003(\0132\036.SRMs"
    "gs.CmdGWOPAVConfig.Capset", 16625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "device_ser.proto", &protobuf_RegisterTypes);
  ReqRegister::default_instance_ = new ReqRegister();
  ReqRegister_TerInfo::default_instance_ = new ReqRegister_TerInfo();
  ReqRegister_ConfInfo::default_instance_ = new ReqRegister_ConfInfo();
  ReqRegister_MapIPInfo::default_instance_ = new ReqRegister_MapIPInfo();
  ReqUnRegister::default_instance_ = new ReqUnRegister();
  ReqConfInfoFromDevMgr::default_instance_ = new ReqConfInfoFromDevMgr();
  ReqConfInfoFromDevMgr_LicenceInfo::default_instance_ = new ReqConfInfoFromDevMgr_LicenceInfo();
  ReqConfInfoFromDevMgr_CompanyInfo::default_instance_ = new ReqConfInfoFromDevMgr_CompanyInfo();
  ReqLicenseFromDevMgr::default_instance_ = new ReqLicenseFromDevMgr();
  ReqLicenseFromDevMgr_LicenceInfo::default_instance_ = new ReqLicenseFromDevMgr_LicenceInfo();
  ReqLicenseFromDevMgr_CompanyInfo::default_instance_ = new ReqLicenseFromDevMgr_CompanyInfo();
  IndCompanyUseLicenceACK::default_instance_ = new IndCompanyUseLicenceACK();
  IndCompanyUseLicenceACK_LicenceInfo::default_instance_ = new IndCompanyUseLicenceACK_LicenceInfo();
  IndCompanyUseLicenceACK_CompanyInfo::default_instance_ = new IndCompanyUseLicenceACK_CompanyInfo();
  ReqGetDeviceInfo::default_instance_ = new ReqGetDeviceInfo();
  ReqGetSysDeviceInfo::default_instance_ = new ReqGetSysDeviceInfo();
  ReqGetSystemCurLoad::default_instance_ = new ReqGetSystemCurLoad();
  ReqUpdateDeviceInfo::default_instance_ = new ReqUpdateDeviceInfo();
  ReqUpdateDeviceInfo_DeviceInfo::default_instance_ = new ReqUpdateDeviceInfo_DeviceInfo();
  IndSyncConfInfo::default_instance_ = new IndSyncConfInfo();
  IndSyncConfInfo_UserInfo::default_instance_ = new IndSyncConfInfo_UserInfo();
  IndSyncConfInfo_DevInfo::default_instance_ = new IndSyncConfInfo_DevInfo();
  IndSyncConfInfo_RecInfo::default_instance_ = new IndSyncConfInfo_RecInfo();
  IndSyncConfInfo_LiveAddr::default_instance_ = new IndSyncConfInfo_LiveAddr();
  IndSyncConfInfo_LiveSetting::default_instance_ = new IndSyncConfInfo_LiveSetting();
  IndSyncConfInfo_LiveInfo::default_instance_ = new IndSyncConfInfo_LiveInfo();
  IndSyncConfInfo_ConfInfo::default_instance_ = new IndSyncConfInfo_ConfInfo();
  IndNewTermJoinConf::default_instance_ = new IndNewTermJoinConf();
  IndTermLeaveConf::default_instance_ = new IndTermLeaveConf();
  IndMCCreateConf::default_instance_ = new IndMCCreateConf();
  IndsertodevHeart::default_instance_ = new IndsertodevHeart();
  IndsertodevHeart_LoadInfo::default_instance_ = new IndsertodevHeart_LoadInfo();
  IndsertodevHeart_DevInfo::default_instance_ = new IndsertodevHeart_DevInfo();
  IndsertodevHeart_UserInfo::default_instance_ = new IndsertodevHeart_UserInfo();
  IndsertodevHeart_RecInfo::default_instance_ = new IndsertodevHeart_RecInfo();
  IndsertodevHeart_LiveInfo::default_instance_ = new IndsertodevHeart_LiveInfo();
  IndsertodevHeart_VAnalyInfo::default_instance_ = new IndsertodevHeart_VAnalyInfo();
  IndsertodevHeart_ConfInfo::default_instance_ = new IndsertodevHeart_ConfInfo();
  IndMCEndConf::default_instance_ = new IndMCEndConf();
  IndNetMPConfInfoInMC::default_instance_ = new IndNetMPConfInfoInMC();
  IndNetMPConnStatusInMC::default_instance_ = new IndNetMPConnStatusInMC();
  IndCRSStartRec::default_instance_ = new IndCRSStartRec();
  IndCRSStopRec::default_instance_ = new IndCRSStopRec();
  IndCRSFileStoragePath::default_instance_ = new IndCRSFileStoragePath();
  IndVASAnalyVideoState::default_instance_ = new IndVASAnalyVideoState();
  IndCRSStartLive::default_instance_ = new IndCRSStartLive();
  IndCRSStartLive_LiveAddr::default_instance_ = new IndCRSStartLive_LiveAddr();
  IndCRSStartLive_LiveSetting::default_instance_ = new IndCRSStartLive_LiveSetting();
  IndCRSStopLive::default_instance_ = new IndCRSStopLive();
  IndModifyConfCallList::default_instance_ = new IndModifyConfCallList();
  IndModifyConfCallList_ParticipantInfo::default_instance_ = new IndModifyConfCallList_ParticipantInfo();
  IndModifyConfCallList_RollCallInfo::default_instance_ = new IndModifyConfCallList_RollCallInfo();
  IndTerStatisticsInfo::default_instance_ = new IndTerStatisticsInfo();
  IndTerStatisticsInfo_FrameInfo::default_instance_ = new IndTerStatisticsInfo_FrameInfo();
  IndTerStatisticsInfo_AdvanceInfo::default_instance_ = new IndTerStatisticsInfo_AdvanceInfo();
  IndTerStatisticsInfo_BaseInfo::default_instance_ = new IndTerStatisticsInfo_BaseInfo();
  IndTerStatisticsInfo_AudioInfo::default_instance_ = new IndTerStatisticsInfo_AudioInfo();
  IndTerStatisticsInfo_VideoInfo::default_instance_ = new IndTerStatisticsInfo_VideoInfo();
  IndTerStatisticsInfo_XfeInfo::default_instance_ = new IndTerStatisticsInfo_XfeInfo();
  IndTerStatisticsInfo_TerStatisticsInfo::default_instance_ = new IndTerStatisticsInfo_TerStatisticsInfo();
  IndSubSvrInfoToDevmgr::default_instance_ = new IndSubSvrInfoToDevmgr();
  IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance_ = new IndSubSvrInfoToDevmgr_IPPORTInfo();
  IndSubSvrInfoToDevmgr_ServerInfo::default_instance_ = new IndSubSvrInfoToDevmgr_ServerInfo();
  IndSubSvrInfoToDevmgr_DomainInfo::default_instance_ = new IndSubSvrInfoToDevmgr_DomainInfo();
  IndSubCompCapInfoToDevmgr::default_instance_ = new IndSubCompCapInfoToDevmgr();
  IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance_ = new IndSubCompCapInfoToDevmgr_LicenceInfo();
  IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance_ = new IndSubCompCapInfoToDevmgr_CompanyInfo();
  IndSubSvrHeartTodev::default_instance_ = new IndSubSvrHeartTodev();
  IndSubSvrHeartTodev_LoadInfo::default_instance_ = new IndSubSvrHeartTodev_LoadInfo();
  IndSubSvrHeartTodev_ServerInfo::default_instance_ = new IndSubSvrHeartTodev_ServerInfo();
  IndSubSvrHeartTodev_DomainInfo::default_instance_ = new IndSubSvrHeartTodev_DomainInfo();
  IndVASAnalyVideoResult::default_instance_ = new IndVASAnalyVideoResult();
  IndVASAnalyVideoResult_videoMatch::default_instance_ = new IndVASAnalyVideoResult_videoMatch();
  IndVASAnalyVideoResult_MatchResult::default_instance_ = new IndVASAnalyVideoResult_MatchResult();
  RspConfInfoToMC::default_instance_ = new RspConfInfoToMC();
  RspConfInfoToMC_LicenceInfo::default_instance_ = new RspConfInfoToMC_LicenceInfo();
  RspConfInfoToMC_CompanyInfo::default_instance_ = new RspConfInfoToMC_CompanyInfo();
  RspConfInfoToMC_AgcSetting::default_instance_ = new RspConfInfoToMC_AgcSetting();
  RspConfInfoToMC_Confcfg::default_instance_ = new RspConfInfoToMC_Confcfg();
  RspConfInfoToMC_ParticipantInfo::default_instance_ = new RspConfInfoToMC_ParticipantInfo();
  RspConfInfoToMC_LiveSetting::default_instance_ = new RspConfInfoToMC_LiveSetting();
  RspConfInfoToMC_RollCallInfo::default_instance_ = new RspConfInfoToMC_RollCallInfo();
  RspConfInfoToMC_AutoPollInfo::default_instance_ = new RspConfInfoToMC_AutoPollInfo();
  RspConfInfoToMC_WhiteListInfo::default_instance_ = new RspConfInfoToMC_WhiteListInfo();
  IndDevtoserHeart::default_instance_ = new IndDevtoserHeart();
  IndUpSvrInfoToDevmgr::default_instance_ = new IndUpSvrInfoToDevmgr();
  IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance_ = new IndUpSvrInfoToDevmgr_IPPORTInfo();
  IndUpSvrInfoToDevmgr_ServerInfo::default_instance_ = new IndUpSvrInfoToDevmgr_ServerInfo();
  IndUpSvrInfoToDevmgr_DomainInfo::default_instance_ = new IndUpSvrInfoToDevmgr_DomainInfo();
  IndUpCompCapInfoToDevmgr::default_instance_ = new IndUpCompCapInfoToDevmgr();
  IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance_ = new IndUpCompCapInfoToDevmgr_LicenceInfo();
  IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance_ = new IndUpCompCapInfoToDevmgr_CompanyInfo();
  IndUpSvrHeartTodev::default_instance_ = new IndUpSvrHeartTodev();
  IndUpSvrHeartTodev_LoadInfo::default_instance_ = new IndUpSvrHeartTodev_LoadInfo();
  IndUpSvrHeartTodev_ServerInfo::default_instance_ = new IndUpSvrHeartTodev_ServerInfo();
  IndUpSvrHeartTodev_DomainInfo::default_instance_ = new IndUpSvrHeartTodev_DomainInfo();
  RspRegister::default_instance_ = new RspRegister();
  RspRegister_Capset::default_instance_ = new RspRegister_Capset();
  RspRegister_CapInfo::default_instance_ = new RspRegister_CapInfo();
  RspRegister_LicenceInfo::default_instance_ = new RspRegister_LicenceInfo();
  RspRegister_CompanyInfo::default_instance_ = new RspRegister_CompanyInfo();
  RspUnRegister::default_instance_ = new RspUnRegister();
  RspGetDeviceInfo::default_instance_ = new RspGetDeviceInfo();
  RspGetDeviceInfo_MapIPInfo::default_instance_ = new RspGetDeviceInfo_MapIPInfo();
  RspGetDeviceInfo_DeviceInfo::default_instance_ = new RspGetDeviceInfo_DeviceInfo();
  RspGetSysDeviceInfo::default_instance_ = new RspGetSysDeviceInfo();
  RspGetSysDeviceInfo_LoadInfo::default_instance_ = new RspGetSysDeviceInfo_LoadInfo();
  RspGetSysDeviceInfo_IPPORTInfo::default_instance_ = new RspGetSysDeviceInfo_IPPORTInfo();
  RspGetSysDeviceInfo_DeviceInfo::default_instance_ = new RspGetSysDeviceInfo_DeviceInfo();
  RspGetSysDeviceInfo_DomainInfo::default_instance_ = new RspGetSysDeviceInfo_DomainInfo();
  RspGetSystemCurLoad::default_instance_ = new RspGetSystemCurLoad();
  RspGetSystemCurLoad_LoadInfo::default_instance_ = new RspGetSystemCurLoad_LoadInfo();
  RspGetSystemCurLoad_CompanyInfo::default_instance_ = new RspGetSystemCurLoad_CompanyInfo();
  IndCompLicenseInfo::default_instance_ = new IndCompLicenseInfo();
  IndCompLicenseInfo_LicenceInfo::default_instance_ = new IndCompLicenseInfo_LicenceInfo();
  IndCompLicenseInfo_CompanyInfo::default_instance_ = new IndCompLicenseInfo_CompanyInfo();
  IndCompLicenseInfoToDevmgr::default_instance_ = new IndCompLicenseInfoToDevmgr();
  IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance_ = new IndCompLicenseInfoToDevmgr_LicenceInfo();
  IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance_ = new IndCompLicenseInfoToDevmgr_CompanyInfo();
  RspLicenseToMC::default_instance_ = new RspLicenseToMC();
  RspLicenseToMC_LicenceInfo::default_instance_ = new RspLicenseToMC_LicenceInfo();
  RspLicenseToMC_CompanyInfo::default_instance_ = new RspLicenseToMC_CompanyInfo();
  RspUpdateDeviceInfo::default_instance_ = new RspUpdateDeviceInfo();
  RspUpdateDeviceInfo_DeviceInfo::default_instance_ = new RspUpdateDeviceInfo_DeviceInfo();
  CmdGWOPMonitor::default_instance_ = new CmdGWOPMonitor();
  CmdGWOPAVConfig::default_instance_ = new CmdGWOPAVConfig();
  CmdGWOPAVConfig_Capset::default_instance_ = new CmdGWOPAVConfig_Capset();
  CmdGWOPAVConfig_CapInfo::default_instance_ = new CmdGWOPAVConfig_CapInfo();
  ReqRegister::default_instance_->InitAsDefaultInstance();
  ReqRegister_TerInfo::default_instance_->InitAsDefaultInstance();
  ReqRegister_ConfInfo::default_instance_->InitAsDefaultInstance();
  ReqRegister_MapIPInfo::default_instance_->InitAsDefaultInstance();
  ReqUnRegister::default_instance_->InitAsDefaultInstance();
  ReqConfInfoFromDevMgr::default_instance_->InitAsDefaultInstance();
  ReqConfInfoFromDevMgr_LicenceInfo::default_instance_->InitAsDefaultInstance();
  ReqConfInfoFromDevMgr_CompanyInfo::default_instance_->InitAsDefaultInstance();
  ReqLicenseFromDevMgr::default_instance_->InitAsDefaultInstance();
  ReqLicenseFromDevMgr_LicenceInfo::default_instance_->InitAsDefaultInstance();
  ReqLicenseFromDevMgr_CompanyInfo::default_instance_->InitAsDefaultInstance();
  IndCompanyUseLicenceACK::default_instance_->InitAsDefaultInstance();
  IndCompanyUseLicenceACK_LicenceInfo::default_instance_->InitAsDefaultInstance();
  IndCompanyUseLicenceACK_CompanyInfo::default_instance_->InitAsDefaultInstance();
  ReqGetDeviceInfo::default_instance_->InitAsDefaultInstance();
  ReqGetSysDeviceInfo::default_instance_->InitAsDefaultInstance();
  ReqGetSystemCurLoad::default_instance_->InitAsDefaultInstance();
  ReqUpdateDeviceInfo::default_instance_->InitAsDefaultInstance();
  ReqUpdateDeviceInfo_DeviceInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_UserInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_DevInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_RecInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_LiveAddr::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_LiveSetting::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_LiveInfo::default_instance_->InitAsDefaultInstance();
  IndSyncConfInfo_ConfInfo::default_instance_->InitAsDefaultInstance();
  IndNewTermJoinConf::default_instance_->InitAsDefaultInstance();
  IndTermLeaveConf::default_instance_->InitAsDefaultInstance();
  IndMCCreateConf::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_LoadInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_DevInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_UserInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_RecInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_LiveInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_VAnalyInfo::default_instance_->InitAsDefaultInstance();
  IndsertodevHeart_ConfInfo::default_instance_->InitAsDefaultInstance();
  IndMCEndConf::default_instance_->InitAsDefaultInstance();
  IndNetMPConfInfoInMC::default_instance_->InitAsDefaultInstance();
  IndNetMPConnStatusInMC::default_instance_->InitAsDefaultInstance();
  IndCRSStartRec::default_instance_->InitAsDefaultInstance();
  IndCRSStopRec::default_instance_->InitAsDefaultInstance();
  IndCRSFileStoragePath::default_instance_->InitAsDefaultInstance();
  IndVASAnalyVideoState::default_instance_->InitAsDefaultInstance();
  IndCRSStartLive::default_instance_->InitAsDefaultInstance();
  IndCRSStartLive_LiveAddr::default_instance_->InitAsDefaultInstance();
  IndCRSStartLive_LiveSetting::default_instance_->InitAsDefaultInstance();
  IndCRSStopLive::default_instance_->InitAsDefaultInstance();
  IndModifyConfCallList::default_instance_->InitAsDefaultInstance();
  IndModifyConfCallList_ParticipantInfo::default_instance_->InitAsDefaultInstance();
  IndModifyConfCallList_RollCallInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_FrameInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_AdvanceInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_BaseInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_AudioInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_VideoInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_XfeInfo::default_instance_->InitAsDefaultInstance();
  IndTerStatisticsInfo_TerStatisticsInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrInfoToDevmgr::default_instance_->InitAsDefaultInstance();
  IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrInfoToDevmgr_ServerInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrInfoToDevmgr_DomainInfo::default_instance_->InitAsDefaultInstance();
  IndSubCompCapInfoToDevmgr::default_instance_->InitAsDefaultInstance();
  IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance_->InitAsDefaultInstance();
  IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrHeartTodev::default_instance_->InitAsDefaultInstance();
  IndSubSvrHeartTodev_LoadInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrHeartTodev_ServerInfo::default_instance_->InitAsDefaultInstance();
  IndSubSvrHeartTodev_DomainInfo::default_instance_->InitAsDefaultInstance();
  IndVASAnalyVideoResult::default_instance_->InitAsDefaultInstance();
  IndVASAnalyVideoResult_videoMatch::default_instance_->InitAsDefaultInstance();
  IndVASAnalyVideoResult_MatchResult::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_LicenceInfo::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_CompanyInfo::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_AgcSetting::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_Confcfg::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_ParticipantInfo::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_LiveSetting::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_RollCallInfo::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_AutoPollInfo::default_instance_->InitAsDefaultInstance();
  RspConfInfoToMC_WhiteListInfo::default_instance_->InitAsDefaultInstance();
  IndDevtoserHeart::default_instance_->InitAsDefaultInstance();
  IndUpSvrInfoToDevmgr::default_instance_->InitAsDefaultInstance();
  IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance_->InitAsDefaultInstance();
  IndUpSvrInfoToDevmgr_ServerInfo::default_instance_->InitAsDefaultInstance();
  IndUpSvrInfoToDevmgr_DomainInfo::default_instance_->InitAsDefaultInstance();
  IndUpCompCapInfoToDevmgr::default_instance_->InitAsDefaultInstance();
  IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance_->InitAsDefaultInstance();
  IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance_->InitAsDefaultInstance();
  IndUpSvrHeartTodev::default_instance_->InitAsDefaultInstance();
  IndUpSvrHeartTodev_LoadInfo::default_instance_->InitAsDefaultInstance();
  IndUpSvrHeartTodev_ServerInfo::default_instance_->InitAsDefaultInstance();
  IndUpSvrHeartTodev_DomainInfo::default_instance_->InitAsDefaultInstance();
  RspRegister::default_instance_->InitAsDefaultInstance();
  RspRegister_Capset::default_instance_->InitAsDefaultInstance();
  RspRegister_CapInfo::default_instance_->InitAsDefaultInstance();
  RspRegister_LicenceInfo::default_instance_->InitAsDefaultInstance();
  RspRegister_CompanyInfo::default_instance_->InitAsDefaultInstance();
  RspUnRegister::default_instance_->InitAsDefaultInstance();
  RspGetDeviceInfo::default_instance_->InitAsDefaultInstance();
  RspGetDeviceInfo_MapIPInfo::default_instance_->InitAsDefaultInstance();
  RspGetDeviceInfo_DeviceInfo::default_instance_->InitAsDefaultInstance();
  RspGetSysDeviceInfo::default_instance_->InitAsDefaultInstance();
  RspGetSysDeviceInfo_LoadInfo::default_instance_->InitAsDefaultInstance();
  RspGetSysDeviceInfo_IPPORTInfo::default_instance_->InitAsDefaultInstance();
  RspGetSysDeviceInfo_DeviceInfo::default_instance_->InitAsDefaultInstance();
  RspGetSysDeviceInfo_DomainInfo::default_instance_->InitAsDefaultInstance();
  RspGetSystemCurLoad::default_instance_->InitAsDefaultInstance();
  RspGetSystemCurLoad_LoadInfo::default_instance_->InitAsDefaultInstance();
  RspGetSystemCurLoad_CompanyInfo::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfo::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfo_LicenceInfo::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfo_CompanyInfo::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfoToDevmgr::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance_->InitAsDefaultInstance();
  IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance_->InitAsDefaultInstance();
  RspLicenseToMC::default_instance_->InitAsDefaultInstance();
  RspLicenseToMC_LicenceInfo::default_instance_->InitAsDefaultInstance();
  RspLicenseToMC_CompanyInfo::default_instance_->InitAsDefaultInstance();
  RspUpdateDeviceInfo::default_instance_->InitAsDefaultInstance();
  RspUpdateDeviceInfo_DeviceInfo::default_instance_->InitAsDefaultInstance();
  CmdGWOPMonitor::default_instance_->InitAsDefaultInstance();
  CmdGWOPAVConfig::default_instance_->InitAsDefaultInstance();
  CmdGWOPAVConfig_Capset::default_instance_->InitAsDefaultInstance();
  CmdGWOPAVConfig_CapInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5fser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5fser_2eproto {
  StaticDescriptorInitializer_device_5fser_2eproto() {
    protobuf_AddDesc_device_5fser_2eproto();
  }
} static_descriptor_initializer_device_5fser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqRegister_TerInfo::kSuidFieldNumber;
const int ReqRegister_TerInfo::kIpFieldNumber;
const int ReqRegister_TerInfo::kAliasFieldNumber;
const int ReqRegister_TerInfo::kNetmpidFieldNumber;
const int ReqRegister_TerInfo::kFromtypeFieldNumber;
const int ReqRegister_TerInfo::kTermtypeFieldNumber;
const int ReqRegister_TerInfo::kProducttypeFieldNumber;
#endif  // !_MSC_VER

ReqRegister_TerInfo::ReqRegister_TerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqRegister.TerInfo)
}

void ReqRegister_TerInfo::InitAsDefaultInstance() {
}

ReqRegister_TerInfo::ReqRegister_TerInfo(const ReqRegister_TerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqRegister.TerInfo)
}

void ReqRegister_TerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpid_ = 0u;
  fromtype_ = 0u;
  termtype_ = 0u;
  producttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegister_TerInfo::~ReqRegister_TerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqRegister.TerInfo)
  SharedDtor();
}

void ReqRegister_TerInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void ReqRegister_TerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister_TerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_TerInfo_descriptor_;
}

const ReqRegister_TerInfo& ReqRegister_TerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqRegister_TerInfo* ReqRegister_TerInfo::default_instance_ = NULL;

ReqRegister_TerInfo* ReqRegister_TerInfo::New() const {
  return new ReqRegister_TerInfo;
}

void ReqRegister_TerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqRegister_TerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(suid_, netmpid_);
    ZR_(fromtype_, producttype_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRegister_TerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqRegister.TerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 suid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alias;
        break;
      }

      // optional string alias = 3;
      case 3: {
        if (tag == 26) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 5;
      case 5: {
        if (tag == 40) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 6;
      case 6: {
        if (tag == 48) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 7;
      case 7: {
        if (tag == 56) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqRegister.TerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqRegister.TerInfo)
  return false;
#undef DO_
}

void ReqRegister_TerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqRegister.TerInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->suid(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string alias = 3;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alias(), output);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netmpid(), output);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fromtype(), output);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->termtype(), output);
  }

  // optional uint32 producttype = 7;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->producttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqRegister.TerInfo)
}

::google::protobuf::uint8* ReqRegister_TerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqRegister.TerInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->suid(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string alias = 3;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alias(), target);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netmpid(), target);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fromtype(), target);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->termtype(), target);
  }

  // optional uint32 producttype = 7;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->producttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqRegister.TerInfo)
  return target;
}

int ReqRegister_TerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 suid = 1;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string alias = 3;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 netmpid = 4;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 fromtype = 5;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 6;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 producttype = 7;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister_TerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRegister_TerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRegister_TerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRegister_TerInfo::MergeFrom(const ReqRegister_TerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRegister_TerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister_TerInfo::CopyFrom(const ReqRegister_TerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister_TerInfo::IsInitialized() const {

  return true;
}

void ReqRegister_TerInfo::Swap(ReqRegister_TerInfo* other) {
  if (other != this) {
    std::swap(suid_, other->suid_);
    std::swap(ip_, other->ip_);
    std::swap(alias_, other->alias_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(producttype_, other->producttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRegister_TerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_TerInfo_descriptor_;
  metadata.reflection = ReqRegister_TerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqRegister_ConfInfo::kConfidFieldNumber;
const int ReqRegister_ConfInfo::kTerlistFieldNumber;
#endif  // !_MSC_VER

ReqRegister_ConfInfo::ReqRegister_ConfInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqRegister.ConfInfo)
}

void ReqRegister_ConfInfo::InitAsDefaultInstance() {
}

ReqRegister_ConfInfo::ReqRegister_ConfInfo(const ReqRegister_ConfInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqRegister.ConfInfo)
}

void ReqRegister_ConfInfo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegister_ConfInfo::~ReqRegister_ConfInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqRegister.ConfInfo)
  SharedDtor();
}

void ReqRegister_ConfInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRegister_ConfInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister_ConfInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_ConfInfo_descriptor_;
}

const ReqRegister_ConfInfo& ReqRegister_ConfInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqRegister_ConfInfo* ReqRegister_ConfInfo::default_instance_ = NULL;

ReqRegister_ConfInfo* ReqRegister_ConfInfo::New() const {
  return new ReqRegister_ConfInfo;
}

void ReqRegister_ConfInfo::Clear() {
  confid_ = GOOGLE_ULONGLONG(0);
  terlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRegister_ConfInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqRegister.ConfInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_terlist;
        break;
      }

      // repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
      case 2: {
        if (tag == 18) {
         parse_terlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_terlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_terlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqRegister.ConfInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqRegister.ConfInfo)
  return false;
#undef DO_
}

void ReqRegister_ConfInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqRegister.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
  for (int i = 0; i < this->terlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->terlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqRegister.ConfInfo)
}

::google::protobuf::uint8* ReqRegister_ConfInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqRegister.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
  for (int i = 0; i < this->terlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->terlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqRegister.ConfInfo)
  return target;
}

int ReqRegister_ConfInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

  }
  // repeated .SRMsgs.ReqRegister.TerInfo terlist = 2;
  total_size += 1 * this->terlist_size();
  for (int i = 0; i < this->terlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister_ConfInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRegister_ConfInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRegister_ConfInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRegister_ConfInfo::MergeFrom(const ReqRegister_ConfInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  terlist_.MergeFrom(from.terlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRegister_ConfInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister_ConfInfo::CopyFrom(const ReqRegister_ConfInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister_ConfInfo::IsInitialized() const {

  return true;
}

void ReqRegister_ConfInfo::Swap(ReqRegister_ConfInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    terlist_.Swap(&other->terlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRegister_ConfInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_ConfInfo_descriptor_;
  metadata.reflection = ReqRegister_ConfInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqRegister_MapIPInfo::kMapipFieldNumber;
#endif  // !_MSC_VER

ReqRegister_MapIPInfo::ReqRegister_MapIPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqRegister.MapIPInfo)
}

void ReqRegister_MapIPInfo::InitAsDefaultInstance() {
}

ReqRegister_MapIPInfo::ReqRegister_MapIPInfo(const ReqRegister_MapIPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqRegister.MapIPInfo)
}

void ReqRegister_MapIPInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegister_MapIPInfo::~ReqRegister_MapIPInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqRegister.MapIPInfo)
  SharedDtor();
}

void ReqRegister_MapIPInfo::SharedDtor() {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapip_;
  }
  if (this != default_instance_) {
  }
}

void ReqRegister_MapIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister_MapIPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_MapIPInfo_descriptor_;
}

const ReqRegister_MapIPInfo& ReqRegister_MapIPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqRegister_MapIPInfo* ReqRegister_MapIPInfo::default_instance_ = NULL;

ReqRegister_MapIPInfo* ReqRegister_MapIPInfo::New() const {
  return new ReqRegister_MapIPInfo;
}

void ReqRegister_MapIPInfo::Clear() {
  if (has_mapip()) {
    if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapip_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRegister_MapIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqRegister.MapIPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mapip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapip().data(), this->mapip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqRegister.MapIPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqRegister.MapIPInfo)
  return false;
#undef DO_
}

void ReqRegister_MapIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqRegister.MapIPInfo)
  // optional string mapip = 1;
  if (has_mapip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapip().data(), this->mapip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqRegister.MapIPInfo)
}

::google::protobuf::uint8* ReqRegister_MapIPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqRegister.MapIPInfo)
  // optional string mapip = 1;
  if (has_mapip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapip().data(), this->mapip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqRegister.MapIPInfo)
  return target;
}

int ReqRegister_MapIPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mapip = 1;
    if (has_mapip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister_MapIPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRegister_MapIPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRegister_MapIPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRegister_MapIPInfo::MergeFrom(const ReqRegister_MapIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapip()) {
      set_mapip(from.mapip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRegister_MapIPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister_MapIPInfo::CopyFrom(const ReqRegister_MapIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister_MapIPInfo::IsInitialized() const {

  return true;
}

void ReqRegister_MapIPInfo::Swap(ReqRegister_MapIPInfo* other) {
  if (other != this) {
    std::swap(mapip_, other->mapip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRegister_MapIPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_MapIPInfo_descriptor_;
  metadata.reflection = ReqRegister_MapIPInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqRegister::kIpFieldNumber;
const int ReqRegister::kPortFieldNumber;
const int ReqRegister::kAuthPasswordFieldNumber;
const int ReqRegister::kSvrTypeFieldNumber;
const int ReqRegister::kCpunumsFieldNumber;
const int ReqRegister::kMaxBandwidthFieldNumber;
const int ReqRegister::kConflistFieldNumber;
const int ReqRegister::kSystemlicenceFieldNumber;
const int ReqRegister::kNettypeFieldNumber;
const int ReqRegister::kVersionFieldNumber;
const int ReqRegister::kDomainnameFieldNumber;
const int ReqRegister::kHttpportFieldNumber;
const int ReqRegister::kMapinternetipsFieldNumber;
const int ReqRegister::kMaxTermsFieldNumber;
#endif  // !_MSC_VER

ReqRegister::ReqRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqRegister)
}

void ReqRegister::InitAsDefaultInstance() {
}

ReqRegister::ReqRegister(const ReqRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqRegister)
}

void ReqRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  auth_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_type_ = 0u;
  cpunums_ = 0u;
  max_bandwidth_ = 0u;
  systemlicence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nettype_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httpport_ = 0u;
  max_terms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegister::~ReqRegister() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqRegister)
  SharedDtor();
}

void ReqRegister::SharedDtor() {
  if (auth_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_password_;
  }
  if (systemlicence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete systemlicence_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void ReqRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_descriptor_;
}

const ReqRegister& ReqRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqRegister* ReqRegister::default_instance_ = NULL;

ReqRegister* ReqRegister::New() const {
  return new ReqRegister;
}

void ReqRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(ip_, port_);
    ZR_(svr_type_, cpunums_);
    if (has_auth_password()) {
      if (auth_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_password_->clear();
      }
    }
    max_bandwidth_ = 0u;
    if (has_systemlicence()) {
      if (systemlicence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        systemlicence_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 12032) {
    ZR_(httpport_, max_terms_);
    nettype_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  conflist_.Clear();
  mapinternetips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auth_password;
        break;
      }

      // optional string auth_password = 3;
      case 3: {
        if (tag == 26) {
         parse_auth_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_password().data(), this->auth_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "auth_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 4;
      case 4: {
        if (tag == 32) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cpunums;
        break;
      }

      // optional uint32 cpunums = 5;
      case 5: {
        if (tag == 40) {
         parse_cpunums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpunums_)));
          set_has_cpunums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_bandwidth;
        break;
      }

      // optional uint32 max_bandwidth = 6;
      case 6: {
        if (tag == 48) {
         parse_max_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
          set_has_max_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conflist;
        break;
      }

      // repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
      case 7: {
        if (tag == 58) {
         parse_conflist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conflist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conflist;
        if (input->ExpectTag(66)) goto parse_systemlicence;
        break;
      }

      // optional string systemlicence = 8;
      case 8: {
        if (tag == 66) {
         parse_systemlicence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemlicence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->systemlicence().data(), this->systemlicence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "systemlicence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nettype;
        break;
      }

      // optional uint32 nettype = 9;
      case 9: {
        if (tag == 72) {
         parse_nettype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }

      // optional string version = 10;
      case 10: {
        if (tag == 82) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_domainname;
        break;
      }

      // optional string domainname = 11;
      case 11: {
        if (tag == 90) {
         parse_domainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_httpport;
        break;
      }

      // optional uint32 httpport = 12;
      case 12: {
        if (tag == 96) {
         parse_httpport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &httpport_)));
          set_has_httpport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mapinternetips;
        break;
      }

      // repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
      case 13: {
        if (tag == 106) {
         parse_mapinternetips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapinternetips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mapinternetips;
        if (input->ExpectTag(112)) goto parse_max_terms;
        break;
      }

      // optional uint32 max_terms = 14;
      case 14: {
        if (tag == 112) {
         parse_max_terms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_terms_)));
          set_has_max_terms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqRegister)
  return false;
#undef DO_
}

void ReqRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqRegister)
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional string auth_password = 3;
  if (has_auth_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth_password(), output);
  }

  // optional uint32 svr_type = 4;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->svr_type(), output);
  }

  // optional uint32 cpunums = 5;
  if (has_cpunums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cpunums(), output);
  }

  // optional uint32 max_bandwidth = 6;
  if (has_max_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_bandwidth(), output);
  }

  // repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
  for (int i = 0; i < this->conflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->conflist(i), output);
  }

  // optional string systemlicence = 8;
  if (has_systemlicence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemlicence().data(), this->systemlicence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "systemlicence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->systemlicence(), output);
  }

  // optional uint32 nettype = 9;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nettype(), output);
  }

  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->version(), output);
  }

  // optional string domainname = 11;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->domainname(), output);
  }

  // optional uint32 httpport = 12;
  if (has_httpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->httpport(), output);
  }

  // repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mapinternetips(i), output);
  }

  // optional uint32 max_terms = 14;
  if (has_max_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_terms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqRegister)
}

::google::protobuf::uint8* ReqRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqRegister)
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional string auth_password = 3;
  if (has_auth_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auth_password(), target);
  }

  // optional uint32 svr_type = 4;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->svr_type(), target);
  }

  // optional uint32 cpunums = 5;
  if (has_cpunums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cpunums(), target);
  }

  // optional uint32 max_bandwidth = 6;
  if (has_max_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_bandwidth(), target);
  }

  // repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
  for (int i = 0; i < this->conflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->conflist(i), target);
  }

  // optional string systemlicence = 8;
  if (has_systemlicence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemlicence().data(), this->systemlicence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "systemlicence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->systemlicence(), target);
  }

  // optional uint32 nettype = 9;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->nettype(), target);
  }

  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->version(), target);
  }

  // optional string domainname = 11;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->domainname(), target);
  }

  // optional uint32 httpport = 12;
  if (has_httpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->httpport(), target);
  }

  // repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mapinternetips(i), target);
  }

  // optional uint32 max_terms = 14;
  if (has_max_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_terms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqRegister)
  return target;
}

int ReqRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string auth_password = 3;
    if (has_auth_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_password());
    }

    // optional uint32 svr_type = 4;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 cpunums = 5;
    if (has_cpunums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpunums());
    }

    // optional uint32 max_bandwidth = 6;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional string systemlicence = 8;
    if (has_systemlicence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemlicence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 nettype = 9;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

    // optional string version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string domainname = 11;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional uint32 httpport = 12;
    if (has_httpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->httpport());
    }

    // optional uint32 max_terms = 14;
    if (has_max_terms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_terms());
    }

  }
  // repeated .SRMsgs.ReqRegister.ConfInfo conflist = 7;
  total_size += 1 * this->conflist_size();
  for (int i = 0; i < this->conflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conflist(i));
  }

  // repeated .SRMsgs.ReqRegister.MapIPInfo mapinternetips = 13;
  total_size += 1 * this->mapinternetips_size();
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapinternetips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRegister::MergeFrom(const ReqRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  conflist_.MergeFrom(from.conflist_);
  mapinternetips_.MergeFrom(from.mapinternetips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_auth_password()) {
      set_auth_password(from.auth_password());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_cpunums()) {
      set_cpunums(from.cpunums());
    }
    if (from.has_max_bandwidth()) {
      set_max_bandwidth(from.max_bandwidth());
    }
    if (from.has_systemlicence()) {
      set_systemlicence(from.systemlicence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_httpport()) {
      set_httpport(from.httpport());
    }
    if (from.has_max_terms()) {
      set_max_terms(from.max_terms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister::CopyFrom(const ReqRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister::IsInitialized() const {

  return true;
}

void ReqRegister::Swap(ReqRegister* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(auth_password_, other->auth_password_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(cpunums_, other->cpunums_);
    std::swap(max_bandwidth_, other->max_bandwidth_);
    conflist_.Swap(&other->conflist_);
    std::swap(systemlicence_, other->systemlicence_);
    std::swap(nettype_, other->nettype_);
    std::swap(version_, other->version_);
    std::swap(domainname_, other->domainname_);
    std::swap(httpport_, other->httpport_);
    mapinternetips_.Swap(&other->mapinternetips_);
    std::swap(max_terms_, other->max_terms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_descriptor_;
  metadata.reflection = ReqRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUnRegister::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqUnRegister::ReqUnRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqUnRegister)
}

void ReqUnRegister::InitAsDefaultInstance() {
}

ReqUnRegister::ReqUnRegister(const ReqUnRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqUnRegister)
}

void ReqUnRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUnRegister::~ReqUnRegister() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqUnRegister)
  SharedDtor();
}

void ReqUnRegister::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqUnRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUnRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUnRegister_descriptor_;
}

const ReqUnRegister& ReqUnRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqUnRegister* ReqUnRegister::default_instance_ = NULL;

ReqUnRegister* ReqUnRegister::New() const {
  return new ReqUnRegister;
}

void ReqUnRegister::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUnRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqUnRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqUnRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqUnRegister)
  return false;
#undef DO_
}

void ReqUnRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqUnRegister)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqUnRegister)
}

::google::protobuf::uint8* ReqUnRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqUnRegister)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqUnRegister)
  return target;
}

int ReqUnRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUnRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUnRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUnRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUnRegister::MergeFrom(const ReqUnRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUnRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnRegister::CopyFrom(const ReqUnRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnRegister::IsInitialized() const {

  return true;
}

void ReqUnRegister::Swap(ReqUnRegister* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUnRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUnRegister_descriptor_;
  metadata.reflection = ReqUnRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqConfInfoFromDevMgr_LicenceInfo::kLicencetypeFieldNumber;
const int ReqConfInfoFromDevMgr_LicenceInfo::kLicencenumFieldNumber;
#endif  // !_MSC_VER

ReqConfInfoFromDevMgr_LicenceInfo::ReqConfInfoFromDevMgr_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
}

void ReqConfInfoFromDevMgr_LicenceInfo::InitAsDefaultInstance() {
}

ReqConfInfoFromDevMgr_LicenceInfo::ReqConfInfoFromDevMgr_LicenceInfo(const ReqConfInfoFromDevMgr_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
}

void ReqConfInfoFromDevMgr_LicenceInfo::SharedCtor() {
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqConfInfoFromDevMgr_LicenceInfo::~ReqConfInfoFromDevMgr_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  SharedDtor();
}

void ReqConfInfoFromDevMgr_LicenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqConfInfoFromDevMgr_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqConfInfoFromDevMgr_LicenceInfo_descriptor_;
}

const ReqConfInfoFromDevMgr_LicenceInfo& ReqConfInfoFromDevMgr_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqConfInfoFromDevMgr_LicenceInfo* ReqConfInfoFromDevMgr_LicenceInfo::default_instance_ = NULL;

ReqConfInfoFromDevMgr_LicenceInfo* ReqConfInfoFromDevMgr_LicenceInfo::New() const {
  return new ReqConfInfoFromDevMgr_LicenceInfo;
}

void ReqConfInfoFromDevMgr_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqConfInfoFromDevMgr_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(licencetype_, licencenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqConfInfoFromDevMgr_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  return false;
#undef DO_
}

void ReqConfInfoFromDevMgr_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
}

::google::protobuf::uint8* ReqConfInfoFromDevMgr_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo)
  return target;
}

int ReqConfInfoFromDevMgr_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqConfInfoFromDevMgr_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqConfInfoFromDevMgr_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqConfInfoFromDevMgr_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqConfInfoFromDevMgr_LicenceInfo::MergeFrom(const ReqConfInfoFromDevMgr_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqConfInfoFromDevMgr_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConfInfoFromDevMgr_LicenceInfo::CopyFrom(const ReqConfInfoFromDevMgr_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConfInfoFromDevMgr_LicenceInfo::IsInitialized() const {

  return true;
}

void ReqConfInfoFromDevMgr_LicenceInfo::Swap(ReqConfInfoFromDevMgr_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqConfInfoFromDevMgr_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqConfInfoFromDevMgr_LicenceInfo_descriptor_;
  metadata.reflection = ReqConfInfoFromDevMgr_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqConfInfoFromDevMgr_CompanyInfo::kCompanyidFieldNumber;
const int ReqConfInfoFromDevMgr_CompanyInfo::kGetlicinfosFieldNumber;
#endif  // !_MSC_VER

ReqConfInfoFromDevMgr_CompanyInfo::ReqConfInfoFromDevMgr_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
}

void ReqConfInfoFromDevMgr_CompanyInfo::InitAsDefaultInstance() {
}

ReqConfInfoFromDevMgr_CompanyInfo::ReqConfInfoFromDevMgr_CompanyInfo(const ReqConfInfoFromDevMgr_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
}

void ReqConfInfoFromDevMgr_CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  companyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqConfInfoFromDevMgr_CompanyInfo::~ReqConfInfoFromDevMgr_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  SharedDtor();
}

void ReqConfInfoFromDevMgr_CompanyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqConfInfoFromDevMgr_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqConfInfoFromDevMgr_CompanyInfo_descriptor_;
}

const ReqConfInfoFromDevMgr_CompanyInfo& ReqConfInfoFromDevMgr_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqConfInfoFromDevMgr_CompanyInfo* ReqConfInfoFromDevMgr_CompanyInfo::default_instance_ = NULL;

ReqConfInfoFromDevMgr_CompanyInfo* ReqConfInfoFromDevMgr_CompanyInfo::New() const {
  return new ReqConfInfoFromDevMgr_CompanyInfo;
}

void ReqConfInfoFromDevMgr_CompanyInfo::Clear() {
  companyid_ = 0u;
  getlicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqConfInfoFromDevMgr_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        break;
      }

      // repeated .SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo getlicinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_getlicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getlicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  return false;
#undef DO_
}

void ReqConfInfoFromDevMgr_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // repeated .SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getlicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
}

::google::protobuf::uint8* ReqConfInfoFromDevMgr_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // repeated .SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getlicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo)
  return target;
}

int ReqConfInfoFromDevMgr_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

  }
  // repeated .SRMsgs.ReqConfInfoFromDevMgr.LicenceInfo getlicinfos = 2;
  total_size += 1 * this->getlicinfos_size();
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getlicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqConfInfoFromDevMgr_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqConfInfoFromDevMgr_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqConfInfoFromDevMgr_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqConfInfoFromDevMgr_CompanyInfo::MergeFrom(const ReqConfInfoFromDevMgr_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  getlicinfos_.MergeFrom(from.getlicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqConfInfoFromDevMgr_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConfInfoFromDevMgr_CompanyInfo::CopyFrom(const ReqConfInfoFromDevMgr_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConfInfoFromDevMgr_CompanyInfo::IsInitialized() const {

  return true;
}

void ReqConfInfoFromDevMgr_CompanyInfo::Swap(ReqConfInfoFromDevMgr_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    getlicinfos_.Swap(&other->getlicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqConfInfoFromDevMgr_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqConfInfoFromDevMgr_CompanyInfo_descriptor_;
  metadata.reflection = ReqConfInfoFromDevMgr_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqConfInfoFromDevMgr::kDeviceidFieldNumber;
const int ReqConfInfoFromDevMgr::kTokenFieldNumber;
const int ReqConfInfoFromDevMgr::kConfidFieldNumber;
const int ReqConfInfoFromDevMgr::kComplicinfosFieldNumber;
#endif  // !_MSC_VER

ReqConfInfoFromDevMgr::ReqConfInfoFromDevMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqConfInfoFromDevMgr)
}

void ReqConfInfoFromDevMgr::InitAsDefaultInstance() {
}

ReqConfInfoFromDevMgr::ReqConfInfoFromDevMgr(const ReqConfInfoFromDevMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqConfInfoFromDevMgr)
}

void ReqConfInfoFromDevMgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqConfInfoFromDevMgr::~ReqConfInfoFromDevMgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqConfInfoFromDevMgr)
  SharedDtor();
}

void ReqConfInfoFromDevMgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqConfInfoFromDevMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqConfInfoFromDevMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqConfInfoFromDevMgr_descriptor_;
}

const ReqConfInfoFromDevMgr& ReqConfInfoFromDevMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqConfInfoFromDevMgr* ReqConfInfoFromDevMgr::default_instance_ = NULL;

ReqConfInfoFromDevMgr* ReqConfInfoFromDevMgr::New() const {
  return new ReqConfInfoFromDevMgr;
}

void ReqConfInfoFromDevMgr::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    confid_ = GOOGLE_ULONGLONG(0);
  }
  complicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqConfInfoFromDevMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqConfInfoFromDevMgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        break;
      }

      // repeated .SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo complicinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_complicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqConfInfoFromDevMgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqConfInfoFromDevMgr)
  return false;
#undef DO_
}

void ReqConfInfoFromDevMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqConfInfoFromDevMgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // repeated .SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->complicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqConfInfoFromDevMgr)
}

::google::protobuf::uint8* ReqConfInfoFromDevMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqConfInfoFromDevMgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // repeated .SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->complicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqConfInfoFromDevMgr)
  return target;
}

int ReqConfInfoFromDevMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

  }
  // repeated .SRMsgs.ReqConfInfoFromDevMgr.CompanyInfo complicinfos = 4;
  total_size += 1 * this->complicinfos_size();
  for (int i = 0; i < this->complicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqConfInfoFromDevMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqConfInfoFromDevMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqConfInfoFromDevMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqConfInfoFromDevMgr::MergeFrom(const ReqConfInfoFromDevMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  complicinfos_.MergeFrom(from.complicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqConfInfoFromDevMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConfInfoFromDevMgr::CopyFrom(const ReqConfInfoFromDevMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConfInfoFromDevMgr::IsInitialized() const {

  return true;
}

void ReqConfInfoFromDevMgr::Swap(ReqConfInfoFromDevMgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    complicinfos_.Swap(&other->complicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqConfInfoFromDevMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqConfInfoFromDevMgr_descriptor_;
  metadata.reflection = ReqConfInfoFromDevMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLicenseFromDevMgr_LicenceInfo::kLicencetypeFieldNumber;
const int ReqLicenseFromDevMgr_LicenceInfo::kLicencenumFieldNumber;
#endif  // !_MSC_VER

ReqLicenseFromDevMgr_LicenceInfo::ReqLicenseFromDevMgr_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
}

void ReqLicenseFromDevMgr_LicenceInfo::InitAsDefaultInstance() {
}

ReqLicenseFromDevMgr_LicenceInfo::ReqLicenseFromDevMgr_LicenceInfo(const ReqLicenseFromDevMgr_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
}

void ReqLicenseFromDevMgr_LicenceInfo::SharedCtor() {
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLicenseFromDevMgr_LicenceInfo::~ReqLicenseFromDevMgr_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  SharedDtor();
}

void ReqLicenseFromDevMgr_LicenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLicenseFromDevMgr_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLicenseFromDevMgr_LicenceInfo_descriptor_;
}

const ReqLicenseFromDevMgr_LicenceInfo& ReqLicenseFromDevMgr_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqLicenseFromDevMgr_LicenceInfo* ReqLicenseFromDevMgr_LicenceInfo::default_instance_ = NULL;

ReqLicenseFromDevMgr_LicenceInfo* ReqLicenseFromDevMgr_LicenceInfo::New() const {
  return new ReqLicenseFromDevMgr_LicenceInfo;
}

void ReqLicenseFromDevMgr_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqLicenseFromDevMgr_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(licencetype_, licencenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLicenseFromDevMgr_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  return false;
#undef DO_
}

void ReqLicenseFromDevMgr_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
}

::google::protobuf::uint8* ReqLicenseFromDevMgr_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqLicenseFromDevMgr.LicenceInfo)
  return target;
}

int ReqLicenseFromDevMgr_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLicenseFromDevMgr_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLicenseFromDevMgr_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLicenseFromDevMgr_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLicenseFromDevMgr_LicenceInfo::MergeFrom(const ReqLicenseFromDevMgr_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLicenseFromDevMgr_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLicenseFromDevMgr_LicenceInfo::CopyFrom(const ReqLicenseFromDevMgr_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLicenseFromDevMgr_LicenceInfo::IsInitialized() const {

  return true;
}

void ReqLicenseFromDevMgr_LicenceInfo::Swap(ReqLicenseFromDevMgr_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLicenseFromDevMgr_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLicenseFromDevMgr_LicenceInfo_descriptor_;
  metadata.reflection = ReqLicenseFromDevMgr_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqLicenseFromDevMgr_CompanyInfo::kCompanyidFieldNumber;
const int ReqLicenseFromDevMgr_CompanyInfo::kGetlicinfosFieldNumber;
#endif  // !_MSC_VER

ReqLicenseFromDevMgr_CompanyInfo::ReqLicenseFromDevMgr_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
}

void ReqLicenseFromDevMgr_CompanyInfo::InitAsDefaultInstance() {
}

ReqLicenseFromDevMgr_CompanyInfo::ReqLicenseFromDevMgr_CompanyInfo(const ReqLicenseFromDevMgr_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
}

void ReqLicenseFromDevMgr_CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  companyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLicenseFromDevMgr_CompanyInfo::~ReqLicenseFromDevMgr_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  SharedDtor();
}

void ReqLicenseFromDevMgr_CompanyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLicenseFromDevMgr_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLicenseFromDevMgr_CompanyInfo_descriptor_;
}

const ReqLicenseFromDevMgr_CompanyInfo& ReqLicenseFromDevMgr_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqLicenseFromDevMgr_CompanyInfo* ReqLicenseFromDevMgr_CompanyInfo::default_instance_ = NULL;

ReqLicenseFromDevMgr_CompanyInfo* ReqLicenseFromDevMgr_CompanyInfo::New() const {
  return new ReqLicenseFromDevMgr_CompanyInfo;
}

void ReqLicenseFromDevMgr_CompanyInfo::Clear() {
  companyid_ = 0u;
  getlicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLicenseFromDevMgr_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        break;
      }

      // repeated .SRMsgs.ReqLicenseFromDevMgr.LicenceInfo getlicinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_getlicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getlicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  return false;
#undef DO_
}

void ReqLicenseFromDevMgr_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // repeated .SRMsgs.ReqLicenseFromDevMgr.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getlicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
}

::google::protobuf::uint8* ReqLicenseFromDevMgr_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // repeated .SRMsgs.ReqLicenseFromDevMgr.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getlicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqLicenseFromDevMgr.CompanyInfo)
  return target;
}

int ReqLicenseFromDevMgr_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

  }
  // repeated .SRMsgs.ReqLicenseFromDevMgr.LicenceInfo getlicinfos = 2;
  total_size += 1 * this->getlicinfos_size();
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getlicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLicenseFromDevMgr_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLicenseFromDevMgr_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLicenseFromDevMgr_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLicenseFromDevMgr_CompanyInfo::MergeFrom(const ReqLicenseFromDevMgr_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  getlicinfos_.MergeFrom(from.getlicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLicenseFromDevMgr_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLicenseFromDevMgr_CompanyInfo::CopyFrom(const ReqLicenseFromDevMgr_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLicenseFromDevMgr_CompanyInfo::IsInitialized() const {

  return true;
}

void ReqLicenseFromDevMgr_CompanyInfo::Swap(ReqLicenseFromDevMgr_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    getlicinfos_.Swap(&other->getlicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLicenseFromDevMgr_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLicenseFromDevMgr_CompanyInfo_descriptor_;
  metadata.reflection = ReqLicenseFromDevMgr_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqLicenseFromDevMgr::kDeviceidFieldNumber;
const int ReqLicenseFromDevMgr::kTokenFieldNumber;
const int ReqLicenseFromDevMgr::kConfidFieldNumber;
const int ReqLicenseFromDevMgr::kComplicinfosFieldNumber;
const int ReqLicenseFromDevMgr::kSeqnumFieldNumber;
#endif  // !_MSC_VER

ReqLicenseFromDevMgr::ReqLicenseFromDevMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqLicenseFromDevMgr)
}

void ReqLicenseFromDevMgr::InitAsDefaultInstance() {
}

ReqLicenseFromDevMgr::ReqLicenseFromDevMgr(const ReqLicenseFromDevMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqLicenseFromDevMgr)
}

void ReqLicenseFromDevMgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  seqnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLicenseFromDevMgr::~ReqLicenseFromDevMgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqLicenseFromDevMgr)
  SharedDtor();
}

void ReqLicenseFromDevMgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqLicenseFromDevMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLicenseFromDevMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLicenseFromDevMgr_descriptor_;
}

const ReqLicenseFromDevMgr& ReqLicenseFromDevMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqLicenseFromDevMgr* ReqLicenseFromDevMgr::default_instance_ = NULL;

ReqLicenseFromDevMgr* ReqLicenseFromDevMgr::New() const {
  return new ReqLicenseFromDevMgr;
}

void ReqLicenseFromDevMgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqLicenseFromDevMgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(confid_, seqnum_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  complicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLicenseFromDevMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqLicenseFromDevMgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        break;
      }

      // repeated .SRMsgs.ReqLicenseFromDevMgr.CompanyInfo complicinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_complicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        if (input->ExpectTag(40)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 5;
      case 5: {
        if (tag == 40) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqLicenseFromDevMgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqLicenseFromDevMgr)
  return false;
#undef DO_
}

void ReqLicenseFromDevMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqLicenseFromDevMgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // repeated .SRMsgs.ReqLicenseFromDevMgr.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->complicinfos(i), output);
  }

  // optional uint32 seqnum = 5;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seqnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqLicenseFromDevMgr)
}

::google::protobuf::uint8* ReqLicenseFromDevMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqLicenseFromDevMgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // repeated .SRMsgs.ReqLicenseFromDevMgr.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->complicinfos(i), target);
  }

  // optional uint32 seqnum = 5;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seqnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqLicenseFromDevMgr)
  return target;
}

int ReqLicenseFromDevMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 seqnum = 5;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

  }
  // repeated .SRMsgs.ReqLicenseFromDevMgr.CompanyInfo complicinfos = 4;
  total_size += 1 * this->complicinfos_size();
  for (int i = 0; i < this->complicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLicenseFromDevMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLicenseFromDevMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLicenseFromDevMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLicenseFromDevMgr::MergeFrom(const ReqLicenseFromDevMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  complicinfos_.MergeFrom(from.complicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLicenseFromDevMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLicenseFromDevMgr::CopyFrom(const ReqLicenseFromDevMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLicenseFromDevMgr::IsInitialized() const {

  return true;
}

void ReqLicenseFromDevMgr::Swap(ReqLicenseFromDevMgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    complicinfos_.Swap(&other->complicinfos_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLicenseFromDevMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLicenseFromDevMgr_descriptor_;
  metadata.reflection = ReqLicenseFromDevMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCompanyUseLicenceACK_LicenceInfo::kLicencetypeFieldNumber;
const int IndCompanyUseLicenceACK_LicenceInfo::kLicencenumFieldNumber;
#endif  // !_MSC_VER

IndCompanyUseLicenceACK_LicenceInfo::IndCompanyUseLicenceACK_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
}

void IndCompanyUseLicenceACK_LicenceInfo::InitAsDefaultInstance() {
}

IndCompanyUseLicenceACK_LicenceInfo::IndCompanyUseLicenceACK_LicenceInfo(const IndCompanyUseLicenceACK_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
}

void IndCompanyUseLicenceACK_LicenceInfo::SharedCtor() {
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompanyUseLicenceACK_LicenceInfo::~IndCompanyUseLicenceACK_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  SharedDtor();
}

void IndCompanyUseLicenceACK_LicenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCompanyUseLicenceACK_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompanyUseLicenceACK_LicenceInfo_descriptor_;
}

const IndCompanyUseLicenceACK_LicenceInfo& IndCompanyUseLicenceACK_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompanyUseLicenceACK_LicenceInfo* IndCompanyUseLicenceACK_LicenceInfo::default_instance_ = NULL;

IndCompanyUseLicenceACK_LicenceInfo* IndCompanyUseLicenceACK_LicenceInfo::New() const {
  return new IndCompanyUseLicenceACK_LicenceInfo;
}

void IndCompanyUseLicenceACK_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCompanyUseLicenceACK_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(licencetype_, licencenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompanyUseLicenceACK_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  return false;
#undef DO_
}

void IndCompanyUseLicenceACK_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
}

::google::protobuf::uint8* IndCompanyUseLicenceACK_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompanyUseLicenceACK.LicenceInfo)
  return target;
}

int IndCompanyUseLicenceACK_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompanyUseLicenceACK_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompanyUseLicenceACK_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompanyUseLicenceACK_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompanyUseLicenceACK_LicenceInfo::MergeFrom(const IndCompanyUseLicenceACK_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompanyUseLicenceACK_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompanyUseLicenceACK_LicenceInfo::CopyFrom(const IndCompanyUseLicenceACK_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompanyUseLicenceACK_LicenceInfo::IsInitialized() const {

  return true;
}

void IndCompanyUseLicenceACK_LicenceInfo::Swap(IndCompanyUseLicenceACK_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompanyUseLicenceACK_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompanyUseLicenceACK_LicenceInfo_descriptor_;
  metadata.reflection = IndCompanyUseLicenceACK_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompanyUseLicenceACK_CompanyInfo::kCompanyidFieldNumber;
const int IndCompanyUseLicenceACK_CompanyInfo::kSurplicinfosFieldNumber;
#endif  // !_MSC_VER

IndCompanyUseLicenceACK_CompanyInfo::IndCompanyUseLicenceACK_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
}

void IndCompanyUseLicenceACK_CompanyInfo::InitAsDefaultInstance() {
}

IndCompanyUseLicenceACK_CompanyInfo::IndCompanyUseLicenceACK_CompanyInfo(const IndCompanyUseLicenceACK_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
}

void IndCompanyUseLicenceACK_CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  companyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompanyUseLicenceACK_CompanyInfo::~IndCompanyUseLicenceACK_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  SharedDtor();
}

void IndCompanyUseLicenceACK_CompanyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndCompanyUseLicenceACK_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompanyUseLicenceACK_CompanyInfo_descriptor_;
}

const IndCompanyUseLicenceACK_CompanyInfo& IndCompanyUseLicenceACK_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompanyUseLicenceACK_CompanyInfo* IndCompanyUseLicenceACK_CompanyInfo::default_instance_ = NULL;

IndCompanyUseLicenceACK_CompanyInfo* IndCompanyUseLicenceACK_CompanyInfo::New() const {
  return new IndCompanyUseLicenceACK_CompanyInfo;
}

void IndCompanyUseLicenceACK_CompanyInfo::Clear() {
  companyid_ = 0u;
  surplicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompanyUseLicenceACK_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_surplicinfos;
        break;
      }

      // repeated .SRMsgs.IndCompanyUseLicenceACK.LicenceInfo surplicinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_surplicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surplicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_surplicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  return false;
#undef DO_
}

void IndCompanyUseLicenceACK_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // repeated .SRMsgs.IndCompanyUseLicenceACK.LicenceInfo surplicinfos = 2;
  for (int i = 0; i < this->surplicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->surplicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
}

::google::protobuf::uint8* IndCompanyUseLicenceACK_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // repeated .SRMsgs.IndCompanyUseLicenceACK.LicenceInfo surplicinfos = 2;
  for (int i = 0; i < this->surplicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->surplicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompanyUseLicenceACK.CompanyInfo)
  return target;
}

int IndCompanyUseLicenceACK_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

  }
  // repeated .SRMsgs.IndCompanyUseLicenceACK.LicenceInfo surplicinfos = 2;
  total_size += 1 * this->surplicinfos_size();
  for (int i = 0; i < this->surplicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surplicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompanyUseLicenceACK_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompanyUseLicenceACK_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompanyUseLicenceACK_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompanyUseLicenceACK_CompanyInfo::MergeFrom(const IndCompanyUseLicenceACK_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  surplicinfos_.MergeFrom(from.surplicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompanyUseLicenceACK_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompanyUseLicenceACK_CompanyInfo::CopyFrom(const IndCompanyUseLicenceACK_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompanyUseLicenceACK_CompanyInfo::IsInitialized() const {

  return true;
}

void IndCompanyUseLicenceACK_CompanyInfo::Swap(IndCompanyUseLicenceACK_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    surplicinfos_.Swap(&other->surplicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompanyUseLicenceACK_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompanyUseLicenceACK_CompanyInfo_descriptor_;
  metadata.reflection = IndCompanyUseLicenceACK_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompanyUseLicenceACK::kDeviceidFieldNumber;
const int IndCompanyUseLicenceACK::kTokenFieldNumber;
const int IndCompanyUseLicenceACK::kConfidFieldNumber;
const int IndCompanyUseLicenceACK::kComplicinfosFieldNumber;
#endif  // !_MSC_VER

IndCompanyUseLicenceACK::IndCompanyUseLicenceACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompanyUseLicenceACK)
}

void IndCompanyUseLicenceACK::InitAsDefaultInstance() {
}

IndCompanyUseLicenceACK::IndCompanyUseLicenceACK(const IndCompanyUseLicenceACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompanyUseLicenceACK)
}

void IndCompanyUseLicenceACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompanyUseLicenceACK::~IndCompanyUseLicenceACK() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompanyUseLicenceACK)
  SharedDtor();
}

void IndCompanyUseLicenceACK::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndCompanyUseLicenceACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompanyUseLicenceACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompanyUseLicenceACK_descriptor_;
}

const IndCompanyUseLicenceACK& IndCompanyUseLicenceACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompanyUseLicenceACK* IndCompanyUseLicenceACK::default_instance_ = NULL;

IndCompanyUseLicenceACK* IndCompanyUseLicenceACK::New() const {
  return new IndCompanyUseLicenceACK;
}

void IndCompanyUseLicenceACK::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    confid_ = GOOGLE_ULONGLONG(0);
  }
  complicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompanyUseLicenceACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompanyUseLicenceACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        break;
      }

      // repeated .SRMsgs.IndCompanyUseLicenceACK.CompanyInfo complicinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_complicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_complicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompanyUseLicenceACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompanyUseLicenceACK)
  return false;
#undef DO_
}

void IndCompanyUseLicenceACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompanyUseLicenceACK)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // repeated .SRMsgs.IndCompanyUseLicenceACK.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->complicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompanyUseLicenceACK)
}

::google::protobuf::uint8* IndCompanyUseLicenceACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompanyUseLicenceACK)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // repeated .SRMsgs.IndCompanyUseLicenceACK.CompanyInfo complicinfos = 4;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->complicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompanyUseLicenceACK)
  return target;
}

int IndCompanyUseLicenceACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

  }
  // repeated .SRMsgs.IndCompanyUseLicenceACK.CompanyInfo complicinfos = 4;
  total_size += 1 * this->complicinfos_size();
  for (int i = 0; i < this->complicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompanyUseLicenceACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompanyUseLicenceACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompanyUseLicenceACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompanyUseLicenceACK::MergeFrom(const IndCompanyUseLicenceACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  complicinfos_.MergeFrom(from.complicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompanyUseLicenceACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompanyUseLicenceACK::CopyFrom(const IndCompanyUseLicenceACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompanyUseLicenceACK::IsInitialized() const {

  return true;
}

void IndCompanyUseLicenceACK::Swap(IndCompanyUseLicenceACK* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    complicinfos_.Swap(&other->complicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompanyUseLicenceACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompanyUseLicenceACK_descriptor_;
  metadata.reflection = IndCompanyUseLicenceACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetDeviceInfo::kDeviceidFieldNumber;
const int ReqGetDeviceInfo::kTokenFieldNumber;
const int ReqGetDeviceInfo::kSvrTypeFieldNumber;
const int ReqGetDeviceInfo::kGetSvrTypeFieldNumber;
const int ReqGetDeviceInfo::kDevnumsFieldNumber;
const int ReqGetDeviceInfo::kDomainnameFieldNumber;
#endif  // !_MSC_VER

ReqGetDeviceInfo::ReqGetDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqGetDeviceInfo)
}

void ReqGetDeviceInfo::InitAsDefaultInstance() {
}

ReqGetDeviceInfo::ReqGetDeviceInfo(const ReqGetDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqGetDeviceInfo)
}

void ReqGetDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_type_ = 0u;
  get_svr_type_ = 0u;
  devnums_ = 0u;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetDeviceInfo::~ReqGetDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqGetDeviceInfo)
  SharedDtor();
}

void ReqGetDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void ReqGetDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetDeviceInfo_descriptor_;
}

const ReqGetDeviceInfo& ReqGetDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqGetDeviceInfo* ReqGetDeviceInfo::default_instance_ = NULL;

ReqGetDeviceInfo* ReqGetDeviceInfo::New() const {
  return new ReqGetDeviceInfo;
}

void ReqGetDeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqGetDeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(deviceid_, devnums_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqGetDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 3;
      case 3: {
        if (tag == 24) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_get_svr_type;
        break;
      }

      // optional uint32 get_svr_type = 4;
      case 4: {
        if (tag == 32) {
         parse_get_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_svr_type_)));
          set_has_get_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_devnums;
        break;
      }

      // optional uint32 devnums = 5;
      case 5: {
        if (tag == 40) {
         parse_devnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devnums_)));
          set_has_devnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_domainname;
        break;
      }

      // optional string domainname = 6;
      case 6: {
        if (tag == 50) {
         parse_domainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqGetDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqGetDeviceInfo)
  return false;
#undef DO_
}

void ReqGetDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqGetDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svr_type(), output);
  }

  // optional uint32 get_svr_type = 4;
  if (has_get_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->get_svr_type(), output);
  }

  // optional uint32 devnums = 5;
  if (has_devnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->devnums(), output);
  }

  // optional string domainname = 6;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->domainname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqGetDeviceInfo)
}

::google::protobuf::uint8* ReqGetDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqGetDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svr_type(), target);
  }

  // optional uint32 get_svr_type = 4;
  if (has_get_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->get_svr_type(), target);
  }

  // optional uint32 devnums = 5;
  if (has_devnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->devnums(), target);
  }

  // optional string domainname = 6;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->domainname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqGetDeviceInfo)
  return target;
}

int ReqGetDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 svr_type = 3;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 get_svr_type = 4;
    if (has_get_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_svr_type());
    }

    // optional uint32 devnums = 5;
    if (has_devnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devnums());
    }

    // optional string domainname = 6;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetDeviceInfo::MergeFrom(const ReqGetDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_get_svr_type()) {
      set_get_svr_type(from.get_svr_type());
    }
    if (from.has_devnums()) {
      set_devnums(from.devnums());
    }
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetDeviceInfo::CopyFrom(const ReqGetDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetDeviceInfo::IsInitialized() const {

  return true;
}

void ReqGetDeviceInfo::Swap(ReqGetDeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(get_svr_type_, other->get_svr_type_);
    std::swap(devnums_, other->devnums_);
    std::swap(domainname_, other->domainname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetDeviceInfo_descriptor_;
  metadata.reflection = ReqGetDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetSysDeviceInfo::kDeviceidFieldNumber;
const int ReqGetSysDeviceInfo::kTokenFieldNumber;
const int ReqGetSysDeviceInfo::kSvrTypeFieldNumber;
const int ReqGetSysDeviceInfo::kDomainnameFieldNumber;
const int ReqGetSysDeviceInfo::kGetSvrTypeFieldNumber;
const int ReqGetSysDeviceInfo::kGetDomainnamesFieldNumber;
#endif  // !_MSC_VER

ReqGetSysDeviceInfo::ReqGetSysDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqGetSysDeviceInfo)
}

void ReqGetSysDeviceInfo::InitAsDefaultInstance() {
}

ReqGetSysDeviceInfo::ReqGetSysDeviceInfo(const ReqGetSysDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqGetSysDeviceInfo)
}

void ReqGetSysDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_type_ = 0u;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_svr_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetSysDeviceInfo::~ReqGetSysDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqGetSysDeviceInfo)
  SharedDtor();
}

void ReqGetSysDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void ReqGetSysDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetSysDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetSysDeviceInfo_descriptor_;
}

const ReqGetSysDeviceInfo& ReqGetSysDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqGetSysDeviceInfo* ReqGetSysDeviceInfo::default_instance_ = NULL;

ReqGetSysDeviceInfo* ReqGetSysDeviceInfo::New() const {
  return new ReqGetSysDeviceInfo;
}

void ReqGetSysDeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqGetSysDeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(deviceid_, svr_type_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    get_svr_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  get_domainnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetSysDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqGetSysDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 3;
      case 3: {
        if (tag == 24) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domainname;
        break;
      }

      // optional string domainname = 4;
      case 4: {
        if (tag == 34) {
         parse_domainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_get_svr_type;
        break;
      }

      // optional uint32 get_svr_type = 5;
      case 5: {
        if (tag == 40) {
         parse_get_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_svr_type_)));
          set_has_get_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_domainnames;
        break;
      }

      // repeated string get_domainnames = 6;
      case 6: {
        if (tag == 50) {
         parse_get_domainnames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_get_domainnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->get_domainnames(this->get_domainnames_size() - 1).data(),
            this->get_domainnames(this->get_domainnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "get_domainnames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_domainnames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqGetSysDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqGetSysDeviceInfo)
  return false;
#undef DO_
}

void ReqGetSysDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqGetSysDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svr_type(), output);
  }

  // optional string domainname = 4;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domainname(), output);
  }

  // optional uint32 get_svr_type = 5;
  if (has_get_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->get_svr_type(), output);
  }

  // repeated string get_domainnames = 6;
  for (int i = 0; i < this->get_domainnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->get_domainnames(i).data(), this->get_domainnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "get_domainnames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->get_domainnames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqGetSysDeviceInfo)
}

::google::protobuf::uint8* ReqGetSysDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqGetSysDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svr_type(), target);
  }

  // optional string domainname = 4;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domainname(), target);
  }

  // optional uint32 get_svr_type = 5;
  if (has_get_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->get_svr_type(), target);
  }

  // repeated string get_domainnames = 6;
  for (int i = 0; i < this->get_domainnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->get_domainnames(i).data(), this->get_domainnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_domainnames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->get_domainnames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqGetSysDeviceInfo)
  return target;
}

int ReqGetSysDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 svr_type = 3;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional string domainname = 4;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional uint32 get_svr_type = 5;
    if (has_get_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_svr_type());
    }

  }
  // repeated string get_domainnames = 6;
  total_size += 1 * this->get_domainnames_size();
  for (int i = 0; i < this->get_domainnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->get_domainnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetSysDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetSysDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetSysDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetSysDeviceInfo::MergeFrom(const ReqGetSysDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_domainnames_.MergeFrom(from.get_domainnames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_get_svr_type()) {
      set_get_svr_type(from.get_svr_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetSysDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetSysDeviceInfo::CopyFrom(const ReqGetSysDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetSysDeviceInfo::IsInitialized() const {

  return true;
}

void ReqGetSysDeviceInfo::Swap(ReqGetSysDeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(domainname_, other->domainname_);
    std::swap(get_svr_type_, other->get_svr_type_);
    get_domainnames_.Swap(&other->get_domainnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetSysDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetSysDeviceInfo_descriptor_;
  metadata.reflection = ReqGetSysDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetSystemCurLoad::kDeviceidFieldNumber;
const int ReqGetSystemCurLoad::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqGetSystemCurLoad::ReqGetSystemCurLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqGetSystemCurLoad)
}

void ReqGetSystemCurLoad::InitAsDefaultInstance() {
}

ReqGetSystemCurLoad::ReqGetSystemCurLoad(const ReqGetSystemCurLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqGetSystemCurLoad)
}

void ReqGetSystemCurLoad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetSystemCurLoad::~ReqGetSystemCurLoad() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqGetSystemCurLoad)
  SharedDtor();
}

void ReqGetSystemCurLoad::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqGetSystemCurLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetSystemCurLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetSystemCurLoad_descriptor_;
}

const ReqGetSystemCurLoad& ReqGetSystemCurLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqGetSystemCurLoad* ReqGetSystemCurLoad::default_instance_ = NULL;

ReqGetSystemCurLoad* ReqGetSystemCurLoad::New() const {
  return new ReqGetSystemCurLoad;
}

void ReqGetSystemCurLoad::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetSystemCurLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqGetSystemCurLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqGetSystemCurLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqGetSystemCurLoad)
  return false;
#undef DO_
}

void ReqGetSystemCurLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqGetSystemCurLoad)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqGetSystemCurLoad)
}

::google::protobuf::uint8* ReqGetSystemCurLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqGetSystemCurLoad)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqGetSystemCurLoad)
  return target;
}

int ReqGetSystemCurLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetSystemCurLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetSystemCurLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetSystemCurLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetSystemCurLoad::MergeFrom(const ReqGetSystemCurLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetSystemCurLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetSystemCurLoad::CopyFrom(const ReqGetSystemCurLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetSystemCurLoad::IsInitialized() const {

  return true;
}

void ReqGetSystemCurLoad::Swap(ReqGetSystemCurLoad* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetSystemCurLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetSystemCurLoad_descriptor_;
  metadata.reflection = ReqGetSystemCurLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpdateDeviceInfo_DeviceInfo::kDeviceidFieldNumber;
const int ReqUpdateDeviceInfo_DeviceInfo::kUpdateSvrTypeFieldNumber;
#endif  // !_MSC_VER

ReqUpdateDeviceInfo_DeviceInfo::ReqUpdateDeviceInfo_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
}

void ReqUpdateDeviceInfo_DeviceInfo::InitAsDefaultInstance() {
}

ReqUpdateDeviceInfo_DeviceInfo::ReqUpdateDeviceInfo_DeviceInfo(const ReqUpdateDeviceInfo_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
}

void ReqUpdateDeviceInfo_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0u;
  update_svr_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpdateDeviceInfo_DeviceInfo::~ReqUpdateDeviceInfo_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  SharedDtor();
}

void ReqUpdateDeviceInfo_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUpdateDeviceInfo_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpdateDeviceInfo_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpdateDeviceInfo_DeviceInfo_descriptor_;
}

const ReqUpdateDeviceInfo_DeviceInfo& ReqUpdateDeviceInfo_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqUpdateDeviceInfo_DeviceInfo* ReqUpdateDeviceInfo_DeviceInfo::default_instance_ = NULL;

ReqUpdateDeviceInfo_DeviceInfo* ReqUpdateDeviceInfo_DeviceInfo::New() const {
  return new ReqUpdateDeviceInfo_DeviceInfo;
}

void ReqUpdateDeviceInfo_DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqUpdateDeviceInfo_DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(deviceid_, update_svr_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpdateDeviceInfo_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_svr_type;
        break;
      }

      // optional uint32 update_svr_type = 2;
      case 2: {
        if (tag == 16) {
         parse_update_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_svr_type_)));
          set_has_update_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  return false;
#undef DO_
}

void ReqUpdateDeviceInfo_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional uint32 update_svr_type = 2;
  if (has_update_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_svr_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
}

::google::protobuf::uint8* ReqUpdateDeviceInfo_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional uint32 update_svr_type = 2;
  if (has_update_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_svr_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqUpdateDeviceInfo.DeviceInfo)
  return target;
}

int ReqUpdateDeviceInfo_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional uint32 update_svr_type = 2;
    if (has_update_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_svr_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpdateDeviceInfo_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpdateDeviceInfo_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpdateDeviceInfo_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpdateDeviceInfo_DeviceInfo::MergeFrom(const ReqUpdateDeviceInfo_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_update_svr_type()) {
      set_update_svr_type(from.update_svr_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpdateDeviceInfo_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateDeviceInfo_DeviceInfo::CopyFrom(const ReqUpdateDeviceInfo_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateDeviceInfo_DeviceInfo::IsInitialized() const {

  return true;
}

void ReqUpdateDeviceInfo_DeviceInfo::Swap(ReqUpdateDeviceInfo_DeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(update_svr_type_, other->update_svr_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpdateDeviceInfo_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpdateDeviceInfo_DeviceInfo_descriptor_;
  metadata.reflection = ReqUpdateDeviceInfo_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReqUpdateDeviceInfo::kDeviceidFieldNumber;
const int ReqUpdateDeviceInfo::kTokenFieldNumber;
const int ReqUpdateDeviceInfo::kSvrTypeFieldNumber;
const int ReqUpdateDeviceInfo::kUpdateDevicesFieldNumber;
#endif  // !_MSC_VER

ReqUpdateDeviceInfo::ReqUpdateDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.ReqUpdateDeviceInfo)
}

void ReqUpdateDeviceInfo::InitAsDefaultInstance() {
}

ReqUpdateDeviceInfo::ReqUpdateDeviceInfo(const ReqUpdateDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.ReqUpdateDeviceInfo)
}

void ReqUpdateDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpdateDeviceInfo::~ReqUpdateDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.ReqUpdateDeviceInfo)
  SharedDtor();
}

void ReqUpdateDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqUpdateDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpdateDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpdateDeviceInfo_descriptor_;
}

const ReqUpdateDeviceInfo& ReqUpdateDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

ReqUpdateDeviceInfo* ReqUpdateDeviceInfo::default_instance_ = NULL;

ReqUpdateDeviceInfo* ReqUpdateDeviceInfo::New() const {
  return new ReqUpdateDeviceInfo;
}

void ReqUpdateDeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqUpdateDeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, svr_type_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  update_devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpdateDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.ReqUpdateDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 3;
      case 3: {
        if (tag == 24) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update_devices;
        break;
      }

      // repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
      case 4: {
        if (tag == 34) {
         parse_update_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.ReqUpdateDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.ReqUpdateDeviceInfo)
  return false;
#undef DO_
}

void ReqUpdateDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.ReqUpdateDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svr_type(), output);
  }

  // repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
  for (int i = 0; i < this->update_devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->update_devices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.ReqUpdateDeviceInfo)
}

::google::protobuf::uint8* ReqUpdateDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.ReqUpdateDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 svr_type = 3;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svr_type(), target);
  }

  // repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
  for (int i = 0; i < this->update_devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->update_devices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.ReqUpdateDeviceInfo)
  return target;
}

int ReqUpdateDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 svr_type = 3;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

  }
  // repeated .SRMsgs.ReqUpdateDeviceInfo.DeviceInfo update_devices = 4;
  total_size += 1 * this->update_devices_size();
  for (int i = 0; i < this->update_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update_devices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpdateDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpdateDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpdateDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpdateDeviceInfo::MergeFrom(const ReqUpdateDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_devices_.MergeFrom(from.update_devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpdateDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateDeviceInfo::CopyFrom(const ReqUpdateDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateDeviceInfo::IsInitialized() const {

  return true;
}

void ReqUpdateDeviceInfo::Swap(ReqUpdateDeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(svr_type_, other->svr_type_);
    update_devices_.Swap(&other->update_devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpdateDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpdateDeviceInfo_descriptor_;
  metadata.reflection = ReqUpdateDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndSyncConfInfo_UserInfo::kSuidFieldNumber;
const int IndSyncConfInfo_UserInfo::kIpFieldNumber;
const int IndSyncConfInfo_UserInfo::kAliasFieldNumber;
const int IndSyncConfInfo_UserInfo::kNetmpidFieldNumber;
const int IndSyncConfInfo_UserInfo::kFromtypeFieldNumber;
const int IndSyncConfInfo_UserInfo::kTermtypeFieldNumber;
const int IndSyncConfInfo_UserInfo::kProducttypeFieldNumber;
const int IndSyncConfInfo_UserInfo::kUserdtlidFieldNumber;
const int IndSyncConfInfo_UserInfo::kUserrelcompidFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_UserInfo::IndSyncConfInfo_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.UserInfo)
}

void IndSyncConfInfo_UserInfo::InitAsDefaultInstance() {
}

IndSyncConfInfo_UserInfo::IndSyncConfInfo_UserInfo(const IndSyncConfInfo_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.UserInfo)
}

void IndSyncConfInfo_UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpid_ = 0u;
  fromtype_ = 0u;
  termtype_ = 0u;
  producttype_ = 0u;
  userdtlid_ = GOOGLE_ULONGLONG(0);
  userrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_UserInfo::~IndSyncConfInfo_UserInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.UserInfo)
  SharedDtor();
}

void IndSyncConfInfo_UserInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_UserInfo_descriptor_;
}

const IndSyncConfInfo_UserInfo& IndSyncConfInfo_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_UserInfo* IndSyncConfInfo_UserInfo::default_instance_ = NULL;

IndSyncConfInfo_UserInfo* IndSyncConfInfo_UserInfo::New() const {
  return new IndSyncConfInfo_UserInfo;
}

void IndSyncConfInfo_UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSyncConfInfo_UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(suid_, netmpid_);
    ZR_(fromtype_, producttype_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }
  userrelcompid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 suid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alias;
        break;
      }

      // optional string alias = 3;
      case 3: {
        if (tag == 26) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 5;
      case 5: {
        if (tag == 40) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 6;
      case 6: {
        if (tag == 48) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 7;
      case 7: {
        if (tag == 56) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_userdtlid;
        break;
      }

      // optional uint64 userdtlid = 8;
      case 8: {
        if (tag == 64) {
         parse_userdtlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userdtlid_)));
          set_has_userdtlid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_userrelcompid;
        break;
      }

      // optional uint32 userrelcompid = 9;
      case 9: {
        if (tag == 72) {
         parse_userrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userrelcompid_)));
          set_has_userrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.UserInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.UserInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->suid(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string alias = 3;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alias(), output);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netmpid(), output);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fromtype(), output);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->termtype(), output);
  }

  // optional uint32 producttype = 7;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->producttype(), output);
  }

  // optional uint64 userdtlid = 8;
  if (has_userdtlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->userdtlid(), output);
  }

  // optional uint32 userrelcompid = 9;
  if (has_userrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->userrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.UserInfo)
}

::google::protobuf::uint8* IndSyncConfInfo_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.UserInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->suid(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string alias = 3;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alias(), target);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netmpid(), target);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fromtype(), target);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->termtype(), target);
  }

  // optional uint32 producttype = 7;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->producttype(), target);
  }

  // optional uint64 userdtlid = 8;
  if (has_userdtlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->userdtlid(), target);
  }

  // optional uint32 userrelcompid = 9;
  if (has_userrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->userrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.UserInfo)
  return target;
}

int IndSyncConfInfo_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 suid = 1;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string alias = 3;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 netmpid = 4;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 fromtype = 5;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 6;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 producttype = 7;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

    // optional uint64 userdtlid = 8;
    if (has_userdtlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userdtlid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 userrelcompid = 9;
    if (has_userrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_UserInfo::MergeFrom(const IndSyncConfInfo_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_userdtlid()) {
      set_userdtlid(from.userdtlid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userrelcompid()) {
      set_userrelcompid(from.userrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_UserInfo::CopyFrom(const IndSyncConfInfo_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_UserInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_UserInfo::Swap(IndSyncConfInfo_UserInfo* other) {
  if (other != this) {
    std::swap(suid_, other->suid_);
    std::swap(ip_, other->ip_);
    std::swap(alias_, other->alias_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(producttype_, other->producttype_);
    std::swap(userdtlid_, other->userdtlid_);
    std::swap(userrelcompid_, other->userrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_UserInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_DevInfo::kDevidFieldNumber;
const int IndSyncConfInfo_DevInfo::kDevdtlidFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_DevInfo::IndSyncConfInfo_DevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.DevInfo)
}

void IndSyncConfInfo_DevInfo::InitAsDefaultInstance() {
}

IndSyncConfInfo_DevInfo::IndSyncConfInfo_DevInfo(const IndSyncConfInfo_DevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.DevInfo)
}

void IndSyncConfInfo_DevInfo::SharedCtor() {
  _cached_size_ = 0;
  devid_ = 0u;
  devdtlid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_DevInfo::~IndSyncConfInfo_DevInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.DevInfo)
  SharedDtor();
}

void IndSyncConfInfo_DevInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_DevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_DevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_DevInfo_descriptor_;
}

const IndSyncConfInfo_DevInfo& IndSyncConfInfo_DevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_DevInfo* IndSyncConfInfo_DevInfo::default_instance_ = NULL;

IndSyncConfInfo_DevInfo* IndSyncConfInfo_DevInfo::New() const {
  return new IndSyncConfInfo_DevInfo;
}

void IndSyncConfInfo_DevInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSyncConfInfo_DevInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(devdtlid_, devid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_DevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.DevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 devid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devdtlid;
        break;
      }

      // optional uint64 devdtlid = 2;
      case 2: {
        if (tag == 16) {
         parse_devdtlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &devdtlid_)));
          set_has_devdtlid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.DevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.DevInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo_DevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.DevInfo)
  // optional uint32 devid = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devid(), output);
  }

  // optional uint64 devdtlid = 2;
  if (has_devdtlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->devdtlid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.DevInfo)
}

::google::protobuf::uint8* IndSyncConfInfo_DevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.DevInfo)
  // optional uint32 devid = 1;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devid(), target);
  }

  // optional uint64 devdtlid = 2;
  if (has_devdtlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->devdtlid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.DevInfo)
  return target;
}

int IndSyncConfInfo_DevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 devid = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devid());
    }

    // optional uint64 devdtlid = 2;
    if (has_devdtlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->devdtlid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_DevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_DevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_DevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_DevInfo::MergeFrom(const IndSyncConfInfo_DevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_devdtlid()) {
      set_devdtlid(from.devdtlid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_DevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_DevInfo::CopyFrom(const IndSyncConfInfo_DevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_DevInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_DevInfo::Swap(IndSyncConfInfo_DevInfo* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(devdtlid_, other->devdtlid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_DevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_DevInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_DevInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_RecInfo::kRecordidFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_RecInfo::IndSyncConfInfo_RecInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.RecInfo)
}

void IndSyncConfInfo_RecInfo::InitAsDefaultInstance() {
}

IndSyncConfInfo_RecInfo::IndSyncConfInfo_RecInfo(const IndSyncConfInfo_RecInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.RecInfo)
}

void IndSyncConfInfo_RecInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_RecInfo::~IndSyncConfInfo_RecInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.RecInfo)
  SharedDtor();
}

void IndSyncConfInfo_RecInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_RecInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_RecInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_RecInfo_descriptor_;
}

const IndSyncConfInfo_RecInfo& IndSyncConfInfo_RecInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_RecInfo* IndSyncConfInfo_RecInfo::default_instance_ = NULL;

IndSyncConfInfo_RecInfo* IndSyncConfInfo_RecInfo::New() const {
  return new IndSyncConfInfo_RecInfo;
}

void IndSyncConfInfo_RecInfo::Clear() {
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_RecInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.RecInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 recordid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.RecInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.RecInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo_RecInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.RecInfo)
  // optional uint64 recordid = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.RecInfo)
}

::google::protobuf::uint8* IndSyncConfInfo_RecInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.RecInfo)
  // optional uint64 recordid = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.RecInfo)
  return target;
}

int IndSyncConfInfo_RecInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 recordid = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_RecInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_RecInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_RecInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_RecInfo::MergeFrom(const IndSyncConfInfo_RecInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_RecInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_RecInfo::CopyFrom(const IndSyncConfInfo_RecInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_RecInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_RecInfo::Swap(IndSyncConfInfo_RecInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_RecInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_RecInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_RecInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_LiveAddr::kTypeFieldNumber;
const int IndSyncConfInfo_LiveAddr::kUrlFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_LiveAddr::IndSyncConfInfo_LiveAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.LiveAddr)
}

void IndSyncConfInfo_LiveAddr::InitAsDefaultInstance() {
}

IndSyncConfInfo_LiveAddr::IndSyncConfInfo_LiveAddr(const IndSyncConfInfo_LiveAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.LiveAddr)
}

void IndSyncConfInfo_LiveAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_LiveAddr::~IndSyncConfInfo_LiveAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.LiveAddr)
  SharedDtor();
}

void IndSyncConfInfo_LiveAddr::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_LiveAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_LiveAddr_descriptor_;
}

const IndSyncConfInfo_LiveAddr& IndSyncConfInfo_LiveAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_LiveAddr* IndSyncConfInfo_LiveAddr::default_instance_ = NULL;

IndSyncConfInfo_LiveAddr* IndSyncConfInfo_LiveAddr::New() const {
  return new IndSyncConfInfo_LiveAddr;
}

void IndSyncConfInfo_LiveAddr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_LiveAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.LiveAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.LiveAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.LiveAddr)
  return false;
#undef DO_
}

void IndSyncConfInfo_LiveAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.LiveAddr)
}

::google::protobuf::uint8* IndSyncConfInfo_LiveAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.LiveAddr)
  return target;
}

int IndSyncConfInfo_LiveAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_LiveAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_LiveAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_LiveAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_LiveAddr::MergeFrom(const IndSyncConfInfo_LiveAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_LiveAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_LiveAddr::CopyFrom(const IndSyncConfInfo_LiveAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_LiveAddr::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_LiveAddr::Swap(IndSyncConfInfo_LiveAddr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_LiveAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_LiveAddr_descriptor_;
  metadata.reflection = IndSyncConfInfo_LiveAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_LiveSetting::kChairmanFieldNumber;
const int IndSyncConfInfo_LiveSetting::kSubjectFieldNumber;
const int IndSyncConfInfo_LiveSetting::kAbstractFieldNumber;
const int IndSyncConfInfo_LiveSetting::kIspublicFieldNumber;
const int IndSyncConfInfo_LiveSetting::kLivepwdFieldNumber;
const int IndSyncConfInfo_LiveSetting::kIsuserecFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_LiveSetting::IndSyncConfInfo_LiveSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.LiveSetting)
}

void IndSyncConfInfo_LiveSetting::InitAsDefaultInstance() {
}

IndSyncConfInfo_LiveSetting::IndSyncConfInfo_LiveSetting(const IndSyncConfInfo_LiveSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.LiveSetting)
}

void IndSyncConfInfo_LiveSetting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispublic_ = 0u;
  livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isuserec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_LiveSetting::~IndSyncConfInfo_LiveSetting() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.LiveSetting)
  SharedDtor();
}

void IndSyncConfInfo_LiveSetting::SharedDtor() {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairman_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abstract_;
  }
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepwd_;
  }
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_LiveSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_LiveSetting_descriptor_;
}

const IndSyncConfInfo_LiveSetting& IndSyncConfInfo_LiveSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_LiveSetting* IndSyncConfInfo_LiveSetting::default_instance_ = NULL;

IndSyncConfInfo_LiveSetting* IndSyncConfInfo_LiveSetting::New() const {
  return new IndSyncConfInfo_LiveSetting;
}

void IndSyncConfInfo_LiveSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSyncConfInfo_LiveSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ispublic_, isuserec_);
    if (has_chairman()) {
      if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chairman_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_abstract()) {
      if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abstract_->clear();
      }
    }
    if (has_livepwd()) {
      if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepwd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_LiveSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.LiveSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chairman = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairman()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chairman().data(), this->chairman().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chairman");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (tag == 18) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abstract;
        break;
      }

      // optional string abstract = 3;
      case 3: {
        if (tag == 26) {
         parse_abstract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abstract().data(), this->abstract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abstract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ispublic;
        break;
      }

      // optional uint32 ispublic = 4;
      case 4: {
        if (tag == 32) {
         parse_ispublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_livepwd;
        break;
      }

      // optional string livepwd = 5;
      case 5: {
        if (tag == 42) {
         parse_livepwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepwd().data(), this->livepwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isuserec;
        break;
      }

      // optional uint32 isuserec = 6;
      case 6: {
        if (tag == 48) {
         parse_isuserec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isuserec_)));
          set_has_isuserec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.LiveSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.LiveSetting)
  return false;
#undef DO_
}

void IndSyncConfInfo_LiveSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chairman(), output);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abstract(), output);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ispublic(), output);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->livepwd(), output);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isuserec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.LiveSetting)
}

::google::protobuf::uint8* IndSyncConfInfo_LiveSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chairman(), target);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abstract(), target);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ispublic(), target);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->livepwd(), target);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isuserec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.LiveSetting)
  return target;
}

int IndSyncConfInfo_LiveSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chairman = 1;
    if (has_chairman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairman());
    }

    // optional string subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string abstract = 3;
    if (has_abstract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract());
    }

    // optional uint32 ispublic = 4;
    if (has_ispublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispublic());
    }

    // optional string livepwd = 5;
    if (has_livepwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepwd());
    }

    // optional uint32 isuserec = 6;
    if (has_isuserec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isuserec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_LiveSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_LiveSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_LiveSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_LiveSetting::MergeFrom(const IndSyncConfInfo_LiveSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairman()) {
      set_chairman(from.chairman());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_abstract()) {
      set_abstract(from.abstract());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_livepwd()) {
      set_livepwd(from.livepwd());
    }
    if (from.has_isuserec()) {
      set_isuserec(from.isuserec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_LiveSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_LiveSetting::CopyFrom(const IndSyncConfInfo_LiveSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_LiveSetting::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_LiveSetting::Swap(IndSyncConfInfo_LiveSetting* other) {
  if (other != this) {
    std::swap(chairman_, other->chairman_);
    std::swap(subject_, other->subject_);
    std::swap(abstract_, other->abstract_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(livepwd_, other->livepwd_);
    std::swap(isuserec_, other->isuserec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_LiveSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_LiveSetting_descriptor_;
  metadata.reflection = IndSyncConfInfo_LiveSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_LiveInfo::kLiveinfoidFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLivesvrtypeFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLivepushurlFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLivepullurlFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLiveplayurlFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLivesetinfoFieldNumber;
const int IndSyncConfInfo_LiveInfo::kLiveaddrsFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_LiveInfo::IndSyncConfInfo_LiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.LiveInfo)
}

void IndSyncConfInfo_LiveInfo::InitAsDefaultInstance() {
  livesetinfo_ = const_cast< ::SRMsgs::IndSyncConfInfo_LiveSetting*>(&::SRMsgs::IndSyncConfInfo_LiveSetting::default_instance());
}

IndSyncConfInfo_LiveInfo::IndSyncConfInfo_LiveInfo(const IndSyncConfInfo_LiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.LiveInfo)
}

void IndSyncConfInfo_LiveInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  liveinfoid_ = GOOGLE_ULONGLONG(0);
  livesvrtype_ = 0u;
  livepushurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livepullurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liveplayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livesetinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_LiveInfo::~IndSyncConfInfo_LiveInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.LiveInfo)
  SharedDtor();
}

void IndSyncConfInfo_LiveInfo::SharedDtor() {
  if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepushurl_;
  }
  if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepullurl_;
  }
  if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveplayurl_;
  }
  if (this != default_instance_) {
    delete livesetinfo_;
  }
}

void IndSyncConfInfo_LiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_LiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_LiveInfo_descriptor_;
}

const IndSyncConfInfo_LiveInfo& IndSyncConfInfo_LiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_LiveInfo* IndSyncConfInfo_LiveInfo::default_instance_ = NULL;

IndSyncConfInfo_LiveInfo* IndSyncConfInfo_LiveInfo::New() const {
  return new IndSyncConfInfo_LiveInfo;
}

void IndSyncConfInfo_LiveInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    liveinfoid_ = GOOGLE_ULONGLONG(0);
    livesvrtype_ = 0u;
    if (has_livepushurl()) {
      if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepushurl_->clear();
      }
    }
    if (has_livepullurl()) {
      if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepullurl_->clear();
      }
    }
    if (has_liveplayurl()) {
      if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveplayurl_->clear();
      }
    }
    if (has_livesetinfo()) {
      if (livesetinfo_ != NULL) livesetinfo_->::SRMsgs::IndSyncConfInfo_LiveSetting::Clear();
    }
  }
  liveaddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_LiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.LiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 liveinfoid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liveinfoid_)));
          set_has_liveinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_livesvrtype;
        break;
      }

      // optional uint32 livesvrtype = 2;
      case 2: {
        if (tag == 16) {
         parse_livesvrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livesvrtype_)));
          set_has_livesvrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_livepushurl;
        break;
      }

      // optional string livepushurl = 3;
      case 3: {
        if (tag == 26) {
         parse_livepushurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepushurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepushurl().data(), this->livepushurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepushurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_livepullurl;
        break;
      }

      // optional string livepullurl = 4;
      case 4: {
        if (tag == 34) {
         parse_livepullurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepullurl().data(), this->livepullurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepullurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_liveplayurl;
        break;
      }

      // optional string liveplayurl = 5;
      case 5: {
        if (tag == 42) {
         parse_liveplayurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveplayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveplayurl().data(), this->liveplayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveplayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_livesetinfo;
        break;
      }

      // optional .SRMsgs.IndSyncConfInfo.LiveSetting livesetinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_livesetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_livesetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_liveaddrs;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.LiveAddr liveaddrs = 7;
      case 7: {
        if (tag == 58) {
         parse_liveaddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveaddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_liveaddrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.LiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.LiveInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo_LiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.LiveInfo)
  // optional uint64 liveinfoid = 1;
  if (has_liveinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->liveinfoid(), output);
  }

  // optional uint32 livesvrtype = 2;
  if (has_livesvrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->livesvrtype(), output);
  }

  // optional string livepushurl = 3;
  if (has_livepushurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepushurl().data(), this->livepushurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepushurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->livepushurl(), output);
  }

  // optional string livepullurl = 4;
  if (has_livepullurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepullurl().data(), this->livepullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepullurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->livepullurl(), output);
  }

  // optional string liveplayurl = 5;
  if (has_liveplayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveplayurl().data(), this->liveplayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveplayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->liveplayurl(), output);
  }

  // optional .SRMsgs.IndSyncConfInfo.LiveSetting livesetinfo = 6;
  if (has_livesetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->livesetinfo(), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.LiveAddr liveaddrs = 7;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->liveaddrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.LiveInfo)
}

::google::protobuf::uint8* IndSyncConfInfo_LiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.LiveInfo)
  // optional uint64 liveinfoid = 1;
  if (has_liveinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->liveinfoid(), target);
  }

  // optional uint32 livesvrtype = 2;
  if (has_livesvrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->livesvrtype(), target);
  }

  // optional string livepushurl = 3;
  if (has_livepushurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepushurl().data(), this->livepushurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepushurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->livepushurl(), target);
  }

  // optional string livepullurl = 4;
  if (has_livepullurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepullurl().data(), this->livepullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepullurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->livepullurl(), target);
  }

  // optional string liveplayurl = 5;
  if (has_liveplayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveplayurl().data(), this->liveplayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveplayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->liveplayurl(), target);
  }

  // optional .SRMsgs.IndSyncConfInfo.LiveSetting livesetinfo = 6;
  if (has_livesetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->livesetinfo(), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.LiveAddr liveaddrs = 7;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->liveaddrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.LiveInfo)
  return target;
}

int IndSyncConfInfo_LiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 liveinfoid = 1;
    if (has_liveinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liveinfoid());
    }

    // optional uint32 livesvrtype = 2;
    if (has_livesvrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livesvrtype());
    }

    // optional string livepushurl = 3;
    if (has_livepushurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepushurl());
    }

    // optional string livepullurl = 4;
    if (has_livepullurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepullurl());
    }

    // optional string liveplayurl = 5;
    if (has_liveplayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveplayurl());
    }

    // optional .SRMsgs.IndSyncConfInfo.LiveSetting livesetinfo = 6;
    if (has_livesetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->livesetinfo());
    }

  }
  // repeated .SRMsgs.IndSyncConfInfo.LiveAddr liveaddrs = 7;
  total_size += 1 * this->liveaddrs_size();
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveaddrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_LiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_LiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_LiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_LiveInfo::MergeFrom(const IndSyncConfInfo_LiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  liveaddrs_.MergeFrom(from.liveaddrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liveinfoid()) {
      set_liveinfoid(from.liveinfoid());
    }
    if (from.has_livesvrtype()) {
      set_livesvrtype(from.livesvrtype());
    }
    if (from.has_livepushurl()) {
      set_livepushurl(from.livepushurl());
    }
    if (from.has_livepullurl()) {
      set_livepullurl(from.livepullurl());
    }
    if (from.has_liveplayurl()) {
      set_liveplayurl(from.liveplayurl());
    }
    if (from.has_livesetinfo()) {
      mutable_livesetinfo()->::SRMsgs::IndSyncConfInfo_LiveSetting::MergeFrom(from.livesetinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_LiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_LiveInfo::CopyFrom(const IndSyncConfInfo_LiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_LiveInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_LiveInfo::Swap(IndSyncConfInfo_LiveInfo* other) {
  if (other != this) {
    std::swap(liveinfoid_, other->liveinfoid_);
    std::swap(livesvrtype_, other->livesvrtype_);
    std::swap(livepushurl_, other->livepushurl_);
    std::swap(livepullurl_, other->livepullurl_);
    std::swap(liveplayurl_, other->liveplayurl_);
    std::swap(livesetinfo_, other->livesetinfo_);
    liveaddrs_.Swap(&other->liveaddrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_LiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_LiveInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_LiveInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo_ConfInfo::kConfidFieldNumber;
const int IndSyncConfInfo_ConfInfo::kConfreportidFieldNumber;
const int IndSyncConfInfo_ConfInfo::kConfnameFieldNumber;
const int IndSyncConfInfo_ConfInfo::kDevinfosFieldNumber;
const int IndSyncConfInfo_ConfInfo::kUserinfosFieldNumber;
const int IndSyncConfInfo_ConfInfo::kRecinfosFieldNumber;
const int IndSyncConfInfo_ConfInfo::kLiveinfosFieldNumber;
const int IndSyncConfInfo_ConfInfo::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo_ConfInfo::IndSyncConfInfo_ConfInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo.ConfInfo)
}

void IndSyncConfInfo_ConfInfo::InitAsDefaultInstance() {
}

IndSyncConfInfo_ConfInfo::IndSyncConfInfo_ConfInfo(const IndSyncConfInfo_ConfInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo.ConfInfo)
}

void IndSyncConfInfo_ConfInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  confreportid_ = GOOGLE_ULONGLONG(0);
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo_ConfInfo::~IndSyncConfInfo_ConfInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo.ConfInfo)
  SharedDtor();
}

void IndSyncConfInfo_ConfInfo::SharedDtor() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo_ConfInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo_ConfInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_ConfInfo_descriptor_;
}

const IndSyncConfInfo_ConfInfo& IndSyncConfInfo_ConfInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo_ConfInfo* IndSyncConfInfo_ConfInfo::default_instance_ = NULL;

IndSyncConfInfo_ConfInfo* IndSyncConfInfo_ConfInfo::New() const {
  return new IndSyncConfInfo_ConfInfo;
}

void IndSyncConfInfo_ConfInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSyncConfInfo_ConfInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 135) {
    ZR_(confid_, confreportid_);
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
    confrelcompid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  devinfos_.Clear();
  userinfos_.Clear();
  recinfos_.Clear();
  liveinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo_ConfInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo.ConfInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 2;
      case 2: {
        if (tag == 16) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_confname;
        break;
      }

      // optional string confname = 3;
      case 3: {
        if (tag == 26) {
         parse_confname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_devinfos;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.DevInfo devinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_devinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_devinfos;
        if (input->ExpectTag(42)) goto parse_userinfos;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.UserInfo userinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_userinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userinfos;
        if (input->ExpectTag(50)) goto parse_recinfos;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.RecInfo recinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_recinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recinfos;
        if (input->ExpectTag(58)) goto parse_liveinfos;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.LiveInfo liveinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_liveinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_liveinfos;
        if (input->ExpectTag(64)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 8;
      case 8: {
        if (tag == 64) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo.ConfInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo.ConfInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo_ConfInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint64 confreportid = 2;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confreportid(), output);
  }

  // optional string confname = 3;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->confname(), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.DevInfo devinfos = 4;
  for (int i = 0; i < this->devinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->devinfos(i), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.UserInfo userinfos = 5;
  for (int i = 0; i < this->userinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userinfos(i), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.RecInfo recinfos = 6;
  for (int i = 0; i < this->recinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recinfos(i), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.LiveInfo liveinfos = 7;
  for (int i = 0; i < this->liveinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->liveinfos(i), output);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo.ConfInfo)
}

::google::protobuf::uint8* IndSyncConfInfo_ConfInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint64 confreportid = 2;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confreportid(), target);
  }

  // optional string confname = 3;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->confname(), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.DevInfo devinfos = 4;
  for (int i = 0; i < this->devinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->devinfos(i), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.UserInfo userinfos = 5;
  for (int i = 0; i < this->userinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userinfos(i), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.RecInfo recinfos = 6;
  for (int i = 0; i < this->recinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recinfos(i), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.LiveInfo liveinfos = 7;
  for (int i = 0; i < this->liveinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->liveinfos(i), target);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo.ConfInfo)
  return target;
}

int IndSyncConfInfo_ConfInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint64 confreportid = 2;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional string confname = 3;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // optional uint32 confrelcompid = 8;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  // repeated .SRMsgs.IndSyncConfInfo.DevInfo devinfos = 4;
  total_size += 1 * this->devinfos_size();
  for (int i = 0; i < this->devinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devinfos(i));
  }

  // repeated .SRMsgs.IndSyncConfInfo.UserInfo userinfos = 5;
  total_size += 1 * this->userinfos_size();
  for (int i = 0; i < this->userinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfos(i));
  }

  // repeated .SRMsgs.IndSyncConfInfo.RecInfo recinfos = 6;
  total_size += 1 * this->recinfos_size();
  for (int i = 0; i < this->recinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recinfos(i));
  }

  // repeated .SRMsgs.IndSyncConfInfo.LiveInfo liveinfos = 7;
  total_size += 1 * this->liveinfos_size();
  for (int i = 0; i < this->liveinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo_ConfInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo_ConfInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo_ConfInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo_ConfInfo::MergeFrom(const IndSyncConfInfo_ConfInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devinfos_.MergeFrom(from.devinfos_);
  userinfos_.MergeFrom(from.userinfos_);
  recinfos_.MergeFrom(from.recinfos_);
  liveinfos_.MergeFrom(from.liveinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo_ConfInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo_ConfInfo::CopyFrom(const IndSyncConfInfo_ConfInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo_ConfInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo_ConfInfo::Swap(IndSyncConfInfo_ConfInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(confname_, other->confname_);
    devinfos_.Swap(&other->devinfos_);
    userinfos_.Swap(&other->userinfos_);
    recinfos_.Swap(&other->recinfos_);
    liveinfos_.Swap(&other->liveinfos_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo_ConfInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_ConfInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_ConfInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSyncConfInfo::kDeviceidFieldNumber;
const int IndSyncConfInfo::kTokenFieldNumber;
const int IndSyncConfInfo::kConfinfosFieldNumber;
#endif  // !_MSC_VER

IndSyncConfInfo::IndSyncConfInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSyncConfInfo)
}

void IndSyncConfInfo::InitAsDefaultInstance() {
}

IndSyncConfInfo::IndSyncConfInfo(const IndSyncConfInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSyncConfInfo)
}

void IndSyncConfInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSyncConfInfo::~IndSyncConfInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSyncConfInfo)
  SharedDtor();
}

void IndSyncConfInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndSyncConfInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSyncConfInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSyncConfInfo_descriptor_;
}

const IndSyncConfInfo& IndSyncConfInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSyncConfInfo* IndSyncConfInfo::default_instance_ = NULL;

IndSyncConfInfo* IndSyncConfInfo::New() const {
  return new IndSyncConfInfo;
}

void IndSyncConfInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  confinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSyncConfInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSyncConfInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_confinfos;
        break;
      }

      // repeated .SRMsgs.IndSyncConfInfo.ConfInfo confinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_confinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_confinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_confinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSyncConfInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSyncConfInfo)
  return false;
#undef DO_
}

void IndSyncConfInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSyncConfInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .SRMsgs.IndSyncConfInfo.ConfInfo confinfos = 3;
  for (int i = 0; i < this->confinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSyncConfInfo)
}

::google::protobuf::uint8* IndSyncConfInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSyncConfInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .SRMsgs.IndSyncConfInfo.ConfInfo confinfos = 3;
  for (int i = 0; i < this->confinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSyncConfInfo)
  return target;
}

int IndSyncConfInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.IndSyncConfInfo.ConfInfo confinfos = 3;
  total_size += 1 * this->confinfos_size();
  for (int i = 0; i < this->confinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->confinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSyncConfInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSyncConfInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSyncConfInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSyncConfInfo::MergeFrom(const IndSyncConfInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  confinfos_.MergeFrom(from.confinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSyncConfInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSyncConfInfo::CopyFrom(const IndSyncConfInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSyncConfInfo::IsInitialized() const {

  return true;
}

void IndSyncConfInfo::Swap(IndSyncConfInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    confinfos_.Swap(&other->confinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSyncConfInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSyncConfInfo_descriptor_;
  metadata.reflection = IndSyncConfInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNewTermJoinConf::kDeviceidFieldNumber;
const int IndNewTermJoinConf::kTokenFieldNumber;
const int IndNewTermJoinConf::kConfidFieldNumber;
const int IndNewTermJoinConf::kSuidFieldNumber;
const int IndNewTermJoinConf::kIpFieldNumber;
const int IndNewTermJoinConf::kAliasFieldNumber;
const int IndNewTermJoinConf::kNetmpidFieldNumber;
const int IndNewTermJoinConf::kConfreportidFieldNumber;
const int IndNewTermJoinConf::kFromtypeFieldNumber;
const int IndNewTermJoinConf::kTermtypeFieldNumber;
const int IndNewTermJoinConf::kProducttypeFieldNumber;
const int IndNewTermJoinConf::kUserrptdetailidFieldNumber;
const int IndNewTermJoinConf::kUserrelcompidFieldNumber;
const int IndNewTermJoinConf::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndNewTermJoinConf::IndNewTermJoinConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNewTermJoinConf)
}

void IndNewTermJoinConf::InitAsDefaultInstance() {
}

IndNewTermJoinConf::IndNewTermJoinConf(const IndNewTermJoinConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNewTermJoinConf)
}

void IndNewTermJoinConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  suid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpid_ = 0u;
  confreportid_ = GOOGLE_ULONGLONG(0);
  fromtype_ = 0u;
  termtype_ = 0u;
  producttype_ = 0u;
  userrptdetailid_ = GOOGLE_ULONGLONG(0);
  userrelcompid_ = 0u;
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNewTermJoinConf::~IndNewTermJoinConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNewTermJoinConf)
  SharedDtor();
}

void IndNewTermJoinConf::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void IndNewTermJoinConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNewTermJoinConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNewTermJoinConf_descriptor_;
}

const IndNewTermJoinConf& IndNewTermJoinConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndNewTermJoinConf* IndNewTermJoinConf::default_instance_ = NULL;

IndNewTermJoinConf* IndNewTermJoinConf::New() const {
  return new IndNewTermJoinConf;
}

void IndNewTermJoinConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNewTermJoinConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    ZR_(confreportid_, netmpid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(fromtype_, confrelcompid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNewTermJoinConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNewTermJoinConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 4;
      case 4: {
        if (tag == 32) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alias;
        break;
      }

      // optional string alias = 6;
      case 6: {
        if (tag == 50) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 7;
      case 7: {
        if (tag == 56) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 8;
      case 8: {
        if (tag == 64) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 9;
      case 9: {
        if (tag == 72) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 10;
      case 10: {
        if (tag == 80) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 11;
      case 11: {
        if (tag == 88) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_userrptdetailid;
        break;
      }

      // optional uint64 userrptdetailid = 12;
      case 12: {
        if (tag == 96) {
         parse_userrptdetailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userrptdetailid_)));
          set_has_userrptdetailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_userrelcompid;
        break;
      }

      // optional uint32 userrelcompid = 13;
      case 13: {
        if (tag == 104) {
         parse_userrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userrelcompid_)));
          set_has_userrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 14;
      case 14: {
        if (tag == 112) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNewTermJoinConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNewTermJoinConf)
  return false;
#undef DO_
}

void IndNewTermJoinConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNewTermJoinConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->suid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional string alias = 6;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->alias(), output);
  }

  // optional uint32 netmpid = 7;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->netmpid(), output);
  }

  // optional uint64 confreportid = 8;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->confreportid(), output);
  }

  // optional uint32 fromtype = 9;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fromtype(), output);
  }

  // optional uint32 termtype = 10;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->termtype(), output);
  }

  // optional uint32 producttype = 11;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->producttype(), output);
  }

  // optional uint64 userrptdetailid = 12;
  if (has_userrptdetailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->userrptdetailid(), output);
  }

  // optional uint32 userrelcompid = 13;
  if (has_userrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->userrelcompid(), output);
  }

  // optional uint32 confrelcompid = 14;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNewTermJoinConf)
}

::google::protobuf::uint8* IndNewTermJoinConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNewTermJoinConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->suid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional string alias = 6;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alias(), target);
  }

  // optional uint32 netmpid = 7;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->netmpid(), target);
  }

  // optional uint64 confreportid = 8;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->confreportid(), target);
  }

  // optional uint32 fromtype = 9;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fromtype(), target);
  }

  // optional uint32 termtype = 10;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->termtype(), target);
  }

  // optional uint32 producttype = 11;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->producttype(), target);
  }

  // optional uint64 userrptdetailid = 12;
  if (has_userrptdetailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->userrptdetailid(), target);
  }

  // optional uint32 userrelcompid = 13;
  if (has_userrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->userrelcompid(), target);
  }

  // optional uint32 confrelcompid = 14;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNewTermJoinConf)
  return target;
}

int IndNewTermJoinConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 suid = 4;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string alias = 6;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 netmpid = 7;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint64 confreportid = 8;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fromtype = 9;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 10;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 producttype = 11;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

    // optional uint64 userrptdetailid = 12;
    if (has_userrptdetailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userrptdetailid());
    }

    // optional uint32 userrelcompid = 13;
    if (has_userrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userrelcompid());
    }

    // optional uint32 confrelcompid = 14;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNewTermJoinConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNewTermJoinConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNewTermJoinConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNewTermJoinConf::MergeFrom(const IndNewTermJoinConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_userrptdetailid()) {
      set_userrptdetailid(from.userrptdetailid());
    }
    if (from.has_userrelcompid()) {
      set_userrelcompid(from.userrelcompid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNewTermJoinConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNewTermJoinConf::CopyFrom(const IndNewTermJoinConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNewTermJoinConf::IsInitialized() const {

  return true;
}

void IndNewTermJoinConf::Swap(IndNewTermJoinConf* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(suid_, other->suid_);
    std::swap(ip_, other->ip_);
    std::swap(alias_, other->alias_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(producttype_, other->producttype_);
    std::swap(userrptdetailid_, other->userrptdetailid_);
    std::swap(userrelcompid_, other->userrelcompid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNewTermJoinConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNewTermJoinConf_descriptor_;
  metadata.reflection = IndNewTermJoinConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndTermLeaveConf::kDeviceidFieldNumber;
const int IndTermLeaveConf::kTokenFieldNumber;
const int IndTermLeaveConf::kConfidFieldNumber;
const int IndTermLeaveConf::kSuidFieldNumber;
const int IndTermLeaveConf::kIpFieldNumber;
const int IndTermLeaveConf::kAliasFieldNumber;
const int IndTermLeaveConf::kNetmpidFieldNumber;
const int IndTermLeaveConf::kConfreportidFieldNumber;
const int IndTermLeaveConf::kUserrptdetailidFieldNumber;
const int IndTermLeaveConf::kFromtypeFieldNumber;
const int IndTermLeaveConf::kTermtypeFieldNumber;
const int IndTermLeaveConf::kUserrelcompidFieldNumber;
const int IndTermLeaveConf::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndTermLeaveConf::IndTermLeaveConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTermLeaveConf)
}

void IndTermLeaveConf::InitAsDefaultInstance() {
}

IndTermLeaveConf::IndTermLeaveConf(const IndTermLeaveConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTermLeaveConf)
}

void IndTermLeaveConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  suid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpid_ = 0u;
  confreportid_ = GOOGLE_ULONGLONG(0);
  userrptdetailid_ = GOOGLE_ULONGLONG(0);
  fromtype_ = 0u;
  termtype_ = 0u;
  userrelcompid_ = 0u;
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTermLeaveConf::~IndTermLeaveConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTermLeaveConf)
  SharedDtor();
}

void IndTermLeaveConf::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void IndTermLeaveConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTermLeaveConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTermLeaveConf_descriptor_;
}

const IndTermLeaveConf& IndTermLeaveConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTermLeaveConf* IndTermLeaveConf::default_instance_ = NULL;

IndTermLeaveConf* IndTermLeaveConf::New() const {
  return new IndTermLeaveConf;
}

void IndTermLeaveConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTermLeaveConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    ZR_(confreportid_, netmpid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(fromtype_, confrelcompid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTermLeaveConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTermLeaveConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 4;
      case 4: {
        if (tag == 32) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alias;
        break;
      }

      // optional string alias = 6;
      case 6: {
        if (tag == 50) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 7;
      case 7: {
        if (tag == 56) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 8;
      case 8: {
        if (tag == 64) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_userrptdetailid;
        break;
      }

      // optional uint64 userrptdetailid = 9;
      case 9: {
        if (tag == 72) {
         parse_userrptdetailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userrptdetailid_)));
          set_has_userrptdetailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 10;
      case 10: {
        if (tag == 80) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 11;
      case 11: {
        if (tag == 88) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_userrelcompid;
        break;
      }

      // optional uint32 userrelcompid = 12;
      case 12: {
        if (tag == 96) {
         parse_userrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userrelcompid_)));
          set_has_userrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 13;
      case 13: {
        if (tag == 104) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTermLeaveConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTermLeaveConf)
  return false;
#undef DO_
}

void IndTermLeaveConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTermLeaveConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->suid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional string alias = 6;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->alias(), output);
  }

  // optional uint32 netmpid = 7;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->netmpid(), output);
  }

  // optional uint64 confreportid = 8;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->confreportid(), output);
  }

  // optional uint64 userrptdetailid = 9;
  if (has_userrptdetailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->userrptdetailid(), output);
  }

  // optional uint32 fromtype = 10;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fromtype(), output);
  }

  // optional uint32 termtype = 11;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->termtype(), output);
  }

  // optional uint32 userrelcompid = 12;
  if (has_userrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->userrelcompid(), output);
  }

  // optional uint32 confrelcompid = 13;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTermLeaveConf)
}

::google::protobuf::uint8* IndTermLeaveConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTermLeaveConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 suid = 4;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->suid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional string alias = 6;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alias(), target);
  }

  // optional uint32 netmpid = 7;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->netmpid(), target);
  }

  // optional uint64 confreportid = 8;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->confreportid(), target);
  }

  // optional uint64 userrptdetailid = 9;
  if (has_userrptdetailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->userrptdetailid(), target);
  }

  // optional uint32 fromtype = 10;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fromtype(), target);
  }

  // optional uint32 termtype = 11;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->termtype(), target);
  }

  // optional uint32 userrelcompid = 12;
  if (has_userrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->userrelcompid(), target);
  }

  // optional uint32 confrelcompid = 13;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTermLeaveConf)
  return target;
}

int IndTermLeaveConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 suid = 4;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string alias = 6;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 netmpid = 7;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint64 confreportid = 8;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 userrptdetailid = 9;
    if (has_userrptdetailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userrptdetailid());
    }

    // optional uint32 fromtype = 10;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 11;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 userrelcompid = 12;
    if (has_userrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userrelcompid());
    }

    // optional uint32 confrelcompid = 13;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTermLeaveConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTermLeaveConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTermLeaveConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTermLeaveConf::MergeFrom(const IndTermLeaveConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userrptdetailid()) {
      set_userrptdetailid(from.userrptdetailid());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_userrelcompid()) {
      set_userrelcompid(from.userrelcompid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTermLeaveConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTermLeaveConf::CopyFrom(const IndTermLeaveConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTermLeaveConf::IsInitialized() const {

  return true;
}

void IndTermLeaveConf::Swap(IndTermLeaveConf* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(suid_, other->suid_);
    std::swap(ip_, other->ip_);
    std::swap(alias_, other->alias_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(userrptdetailid_, other->userrptdetailid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(userrelcompid_, other->userrelcompid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTermLeaveConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTermLeaveConf_descriptor_;
  metadata.reflection = IndTermLeaveConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCCreateConf::kDeviceidFieldNumber;
const int IndMCCreateConf::kTokenFieldNumber;
const int IndMCCreateConf::kIsokFieldNumber;
const int IndMCCreateConf::kConfidFieldNumber;
const int IndMCCreateConf::kFailreasonFieldNumber;
const int IndMCCreateConf::kConfreportidFieldNumber;
const int IndMCCreateConf::kMcconfdetailidFieldNumber;
const int IndMCCreateConf::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndMCCreateConf::IndMCCreateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCCreateConf)
}

void IndMCCreateConf::InitAsDefaultInstance() {
}

IndMCCreateConf::IndMCCreateConf(const IndMCCreateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCCreateConf)
}

void IndMCCreateConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isok_ = false;
  confid_ = GOOGLE_ULONGLONG(0);
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confreportid_ = GOOGLE_ULONGLONG(0);
  mcconfdetailid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCCreateConf::~IndMCCreateConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCCreateConf)
  SharedDtor();
}

void IndMCCreateConf::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failreason_;
  }
  if (this != default_instance_) {
  }
}

void IndMCCreateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCCreateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCCreateConf_descriptor_;
}

const IndMCCreateConf& IndMCCreateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndMCCreateConf* IndMCCreateConf::default_instance_ = NULL;

IndMCCreateConf* IndMCCreateConf::New() const {
  return new IndMCCreateConf;
}

void IndMCCreateConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCCreateConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    ZR_(confreportid_, confrelcompid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failreason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCCreateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCCreateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isok;
        break;
      }

      // optional bool isok = 3;
      case 3: {
        if (tag == 24) {
         parse_isok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 4;
      case 4: {
        if (tag == 32) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_failreason;
        break;
      }

      // optional string failreason = 5;
      case 5: {
        if (tag == 42) {
         parse_failreason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failreason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 6;
      case 6: {
        if (tag == 48) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mcconfdetailid;
        break;
      }

      // optional uint64 mcconfdetailid = 7;
      case 7: {
        if (tag == 56) {
         parse_mcconfdetailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mcconfdetailid_)));
          set_has_mcconfdetailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 8;
      case 8: {
        if (tag == 64) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCCreateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCCreateConf)
  return false;
#undef DO_
}

void IndMCCreateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCCreateConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional bool isok = 3;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isok(), output);
  }

  // optional uint64 confid = 4;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->confid(), output);
  }

  // optional string failreason = 5;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->failreason(), output);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->confreportid(), output);
  }

  // optional uint64 mcconfdetailid = 7;
  if (has_mcconfdetailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->mcconfdetailid(), output);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCCreateConf)
}

::google::protobuf::uint8* IndMCCreateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCCreateConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional bool isok = 3;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isok(), target);
  }

  // optional uint64 confid = 4;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->confid(), target);
  }

  // optional string failreason = 5;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failreason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->failreason(), target);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->confreportid(), target);
  }

  // optional uint64 mcconfdetailid = 7;
  if (has_mcconfdetailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->mcconfdetailid(), target);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCCreateConf)
  return target;
}

int IndMCCreateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bool isok = 3;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint64 confid = 4;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional string failreason = 5;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }

    // optional uint64 confreportid = 6;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 mcconfdetailid = 7;
    if (has_mcconfdetailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mcconfdetailid());
    }

    // optional uint32 confrelcompid = 8;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCCreateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCCreateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCCreateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCCreateConf::MergeFrom(const IndMCCreateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_mcconfdetailid()) {
      set_mcconfdetailid(from.mcconfdetailid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCCreateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCCreateConf::CopyFrom(const IndMCCreateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCCreateConf::IsInitialized() const {

  return true;
}

void IndMCCreateConf::Swap(IndMCCreateConf* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(isok_, other->isok_);
    std::swap(confid_, other->confid_);
    std::swap(failreason_, other->failreason_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(mcconfdetailid_, other->mcconfdetailid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCCreateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCCreateConf_descriptor_;
  metadata.reflection = IndMCCreateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndsertodevHeart_LoadInfo::kTernumFieldNumber;
const int IndsertodevHeart_LoadInfo::kCpuFieldNumber;
const int IndsertodevHeart_LoadInfo::kSrcntFieldNumber;
const int IndsertodevHeart_LoadInfo::kStdcntFieldNumber;
const int IndsertodevHeart_LoadInfo::kReccntFieldNumber;
const int IndsertodevHeart_LoadInfo::kConfcntFieldNumber;
const int IndsertodevHeart_LoadInfo::kLivecntFieldNumber;
const int IndsertodevHeart_LoadInfo::kAnalycntFieldNumber;
const int IndsertodevHeart_LoadInfo::kMonitorcntFieldNumber;
const int IndsertodevHeart_LoadInfo::kVoicecntFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_LoadInfo::IndsertodevHeart_LoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.LoadInfo)
}

void IndsertodevHeart_LoadInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_LoadInfo::IndsertodevHeart_LoadInfo(const IndsertodevHeart_LoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.LoadInfo)
}

void IndsertodevHeart_LoadInfo::SharedCtor() {
  _cached_size_ = 0;
  ternum_ = 0u;
  cpu_ = 0u;
  srcnt_ = 0u;
  stdcnt_ = 0u;
  reccnt_ = 0u;
  confcnt_ = 0u;
  livecnt_ = 0u;
  analycnt_ = 0u;
  monitorcnt_ = 0u;
  voicecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_LoadInfo::~IndsertodevHeart_LoadInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.LoadInfo)
  SharedDtor();
}

void IndsertodevHeart_LoadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_LoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_LoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_LoadInfo_descriptor_;
}

const IndsertodevHeart_LoadInfo& IndsertodevHeart_LoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_LoadInfo* IndsertodevHeart_LoadInfo::default_instance_ = NULL;

IndsertodevHeart_LoadInfo* IndsertodevHeart_LoadInfo::New() const {
  return new IndsertodevHeart_LoadInfo;
}

void IndsertodevHeart_LoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndsertodevHeart_LoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ternum_, analycnt_);
  }
  ZR_(monitorcnt_, voicecnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_LoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.LoadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ternum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternum_)));
          set_has_ternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cpu;
        break;
      }

      // optional uint32 cpu = 2;
      case 2: {
        if (tag == 16) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcnt;
        break;
      }

      // optional uint32 srcnt = 3;
      case 3: {
        if (tag == 24) {
         parse_srcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcnt_)));
          set_has_srcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stdcnt;
        break;
      }

      // optional uint32 stdcnt = 4;
      case 4: {
        if (tag == 32) {
         parse_stdcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdcnt_)));
          set_has_stdcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reccnt;
        break;
      }

      // optional uint32 reccnt = 5;
      case 5: {
        if (tag == 40) {
         parse_reccnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reccnt_)));
          set_has_reccnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_confcnt;
        break;
      }

      // optional uint32 confcnt = 6;
      case 6: {
        if (tag == 48) {
         parse_confcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confcnt_)));
          set_has_confcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_livecnt;
        break;
      }

      // optional uint32 livecnt = 7;
      case 7: {
        if (tag == 56) {
         parse_livecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livecnt_)));
          set_has_livecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_analycnt;
        break;
      }

      // optional uint32 analycnt = 8;
      case 8: {
        if (tag == 64) {
         parse_analycnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analycnt_)));
          set_has_analycnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_monitorcnt;
        break;
      }

      // optional uint32 monitorcnt = 9;
      case 9: {
        if (tag == 72) {
         parse_monitorcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorcnt_)));
          set_has_monitorcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_voicecnt;
        break;
      }

      // optional uint32 voicecnt = 10;
      case 10: {
        if (tag == 80) {
         parse_voicecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicecnt_)));
          set_has_voicecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.LoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.LoadInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_LoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ternum(), output);
  }

  // optional uint32 cpu = 2;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu(), output);
  }

  // optional uint32 srcnt = 3;
  if (has_srcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcnt(), output);
  }

  // optional uint32 stdcnt = 4;
  if (has_stdcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stdcnt(), output);
  }

  // optional uint32 reccnt = 5;
  if (has_reccnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reccnt(), output);
  }

  // optional uint32 confcnt = 6;
  if (has_confcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->confcnt(), output);
  }

  // optional uint32 livecnt = 7;
  if (has_livecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->livecnt(), output);
  }

  // optional uint32 analycnt = 8;
  if (has_analycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->analycnt(), output);
  }

  // optional uint32 monitorcnt = 9;
  if (has_monitorcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->monitorcnt(), output);
  }

  // optional uint32 voicecnt = 10;
  if (has_voicecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->voicecnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.LoadInfo)
}

::google::protobuf::uint8* IndsertodevHeart_LoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ternum(), target);
  }

  // optional uint32 cpu = 2;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu(), target);
  }

  // optional uint32 srcnt = 3;
  if (has_srcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcnt(), target);
  }

  // optional uint32 stdcnt = 4;
  if (has_stdcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stdcnt(), target);
  }

  // optional uint32 reccnt = 5;
  if (has_reccnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reccnt(), target);
  }

  // optional uint32 confcnt = 6;
  if (has_confcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->confcnt(), target);
  }

  // optional uint32 livecnt = 7;
  if (has_livecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->livecnt(), target);
  }

  // optional uint32 analycnt = 8;
  if (has_analycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->analycnt(), target);
  }

  // optional uint32 monitorcnt = 9;
  if (has_monitorcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->monitorcnt(), target);
  }

  // optional uint32 voicecnt = 10;
  if (has_voicecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->voicecnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.LoadInfo)
  return target;
}

int IndsertodevHeart_LoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ternum = 1;
    if (has_ternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternum());
    }

    // optional uint32 cpu = 2;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

    // optional uint32 srcnt = 3;
    if (has_srcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcnt());
    }

    // optional uint32 stdcnt = 4;
    if (has_stdcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdcnt());
    }

    // optional uint32 reccnt = 5;
    if (has_reccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reccnt());
    }

    // optional uint32 confcnt = 6;
    if (has_confcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confcnt());
    }

    // optional uint32 livecnt = 7;
    if (has_livecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livecnt());
    }

    // optional uint32 analycnt = 8;
    if (has_analycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analycnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 monitorcnt = 9;
    if (has_monitorcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitorcnt());
    }

    // optional uint32 voicecnt = 10;
    if (has_voicecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicecnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_LoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_LoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_LoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_LoadInfo::MergeFrom(const IndsertodevHeart_LoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ternum()) {
      set_ternum(from.ternum());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
    if (from.has_srcnt()) {
      set_srcnt(from.srcnt());
    }
    if (from.has_stdcnt()) {
      set_stdcnt(from.stdcnt());
    }
    if (from.has_reccnt()) {
      set_reccnt(from.reccnt());
    }
    if (from.has_confcnt()) {
      set_confcnt(from.confcnt());
    }
    if (from.has_livecnt()) {
      set_livecnt(from.livecnt());
    }
    if (from.has_analycnt()) {
      set_analycnt(from.analycnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_monitorcnt()) {
      set_monitorcnt(from.monitorcnt());
    }
    if (from.has_voicecnt()) {
      set_voicecnt(from.voicecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_LoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_LoadInfo::CopyFrom(const IndsertodevHeart_LoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_LoadInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_LoadInfo::Swap(IndsertodevHeart_LoadInfo* other) {
  if (other != this) {
    std::swap(ternum_, other->ternum_);
    std::swap(cpu_, other->cpu_);
    std::swap(srcnt_, other->srcnt_);
    std::swap(stdcnt_, other->stdcnt_);
    std::swap(reccnt_, other->reccnt_);
    std::swap(confcnt_, other->confcnt_);
    std::swap(livecnt_, other->livecnt_);
    std::swap(analycnt_, other->analycnt_);
    std::swap(monitorcnt_, other->monitorcnt_);
    std::swap(voicecnt_, other->voicecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_LoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_LoadInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_LoadInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_DevInfo::kDevidFieldNumber;
const int IndsertodevHeart_DevInfo::kDevdtlidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_DevInfo::IndsertodevHeart_DevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.DevInfo)
}

void IndsertodevHeart_DevInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_DevInfo::IndsertodevHeart_DevInfo(const IndsertodevHeart_DevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.DevInfo)
}

void IndsertodevHeart_DevInfo::SharedCtor() {
  _cached_size_ = 0;
  devid_ = 0u;
  devdtlid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_DevInfo::~IndsertodevHeart_DevInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.DevInfo)
  SharedDtor();
}

void IndsertodevHeart_DevInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_DevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_DevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_DevInfo_descriptor_;
}

const IndsertodevHeart_DevInfo& IndsertodevHeart_DevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_DevInfo* IndsertodevHeart_DevInfo::default_instance_ = NULL;

IndsertodevHeart_DevInfo* IndsertodevHeart_DevInfo::New() const {
  return new IndsertodevHeart_DevInfo;
}

void IndsertodevHeart_DevInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndsertodevHeart_DevInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(devdtlid_, devid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_DevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.DevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 devid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devdtlid;
        break;
      }

      // optional uint64 devdtlid = 2;
      case 2: {
        if (tag == 16) {
         parse_devdtlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &devdtlid_)));
          set_has_devdtlid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.DevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.DevInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_DevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.DevInfo)
  // optional uint32 devid = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devid(), output);
  }

  // optional uint64 devdtlid = 2;
  if (has_devdtlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->devdtlid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.DevInfo)
}

::google::protobuf::uint8* IndsertodevHeart_DevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.DevInfo)
  // optional uint32 devid = 1;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devid(), target);
  }

  // optional uint64 devdtlid = 2;
  if (has_devdtlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->devdtlid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.DevInfo)
  return target;
}

int IndsertodevHeart_DevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 devid = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devid());
    }

    // optional uint64 devdtlid = 2;
    if (has_devdtlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->devdtlid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_DevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_DevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_DevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_DevInfo::MergeFrom(const IndsertodevHeart_DevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_devdtlid()) {
      set_devdtlid(from.devdtlid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_DevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_DevInfo::CopyFrom(const IndsertodevHeart_DevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_DevInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_DevInfo::Swap(IndsertodevHeart_DevInfo* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(devdtlid_, other->devdtlid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_DevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_DevInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_DevInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_UserInfo::kUseridFieldNumber;
const int IndsertodevHeart_UserInfo::kUserdtlidFieldNumber;
const int IndsertodevHeart_UserInfo::kFromtypeFieldNumber;
const int IndsertodevHeart_UserInfo::kTermtypeFieldNumber;
const int IndsertodevHeart_UserInfo::kUserrelcompidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_UserInfo::IndsertodevHeart_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.UserInfo)
}

void IndsertodevHeart_UserInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_UserInfo::IndsertodevHeart_UserInfo(const IndsertodevHeart_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.UserInfo)
}

void IndsertodevHeart_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  userdtlid_ = GOOGLE_ULONGLONG(0);
  fromtype_ = 0u;
  termtype_ = 0u;
  userrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_UserInfo::~IndsertodevHeart_UserInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.UserInfo)
  SharedDtor();
}

void IndsertodevHeart_UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_UserInfo_descriptor_;
}

const IndsertodevHeart_UserInfo& IndsertodevHeart_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_UserInfo* IndsertodevHeart_UserInfo::default_instance_ = NULL;

IndsertodevHeart_UserInfo* IndsertodevHeart_UserInfo::New() const {
  return new IndsertodevHeart_UserInfo;
}

void IndsertodevHeart_UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndsertodevHeart_UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userdtlid_, userrelcompid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userdtlid;
        break;
      }

      // optional uint64 userdtlid = 2;
      case 2: {
        if (tag == 16) {
         parse_userdtlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userdtlid_)));
          set_has_userdtlid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 3;
      case 3: {
        if (tag == 24) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 4;
      case 4: {
        if (tag == 32) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userrelcompid;
        break;
      }

      // optional uint32 userrelcompid = 5;
      case 5: {
        if (tag == 40) {
         parse_userrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userrelcompid_)));
          set_has_userrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.UserInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.UserInfo)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint64 userdtlid = 2;
  if (has_userdtlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userdtlid(), output);
  }

  // optional uint32 fromtype = 3;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fromtype(), output);
  }

  // optional uint32 termtype = 4;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->termtype(), output);
  }

  // optional uint32 userrelcompid = 5;
  if (has_userrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->userrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.UserInfo)
}

::google::protobuf::uint8* IndsertodevHeart_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.UserInfo)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint64 userdtlid = 2;
  if (has_userdtlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userdtlid(), target);
  }

  // optional uint32 fromtype = 3;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fromtype(), target);
  }

  // optional uint32 termtype = 4;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->termtype(), target);
  }

  // optional uint32 userrelcompid = 5;
  if (has_userrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->userrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.UserInfo)
  return target;
}

int IndsertodevHeart_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint64 userdtlid = 2;
    if (has_userdtlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userdtlid());
    }

    // optional uint32 fromtype = 3;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 4;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 userrelcompid = 5;
    if (has_userrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_UserInfo::MergeFrom(const IndsertodevHeart_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userdtlid()) {
      set_userdtlid(from.userdtlid());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_userrelcompid()) {
      set_userrelcompid(from.userrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_UserInfo::CopyFrom(const IndsertodevHeart_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_UserInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_UserInfo::Swap(IndsertodevHeart_UserInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userdtlid_, other->userdtlid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(userrelcompid_, other->userrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_UserInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_RecInfo::kRecordidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_RecInfo::IndsertodevHeart_RecInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.RecInfo)
}

void IndsertodevHeart_RecInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_RecInfo::IndsertodevHeart_RecInfo(const IndsertodevHeart_RecInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.RecInfo)
}

void IndsertodevHeart_RecInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_RecInfo::~IndsertodevHeart_RecInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.RecInfo)
  SharedDtor();
}

void IndsertodevHeart_RecInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_RecInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_RecInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_RecInfo_descriptor_;
}

const IndsertodevHeart_RecInfo& IndsertodevHeart_RecInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_RecInfo* IndsertodevHeart_RecInfo::default_instance_ = NULL;

IndsertodevHeart_RecInfo* IndsertodevHeart_RecInfo::New() const {
  return new IndsertodevHeart_RecInfo;
}

void IndsertodevHeart_RecInfo::Clear() {
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_RecInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.RecInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 recordid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.RecInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.RecInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_RecInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.RecInfo)
  // optional uint64 recordid = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.RecInfo)
}

::google::protobuf::uint8* IndsertodevHeart_RecInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.RecInfo)
  // optional uint64 recordid = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.RecInfo)
  return target;
}

int IndsertodevHeart_RecInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 recordid = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_RecInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_RecInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_RecInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_RecInfo::MergeFrom(const IndsertodevHeart_RecInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_RecInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_RecInfo::CopyFrom(const IndsertodevHeart_RecInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_RecInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_RecInfo::Swap(IndsertodevHeart_RecInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_RecInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_RecInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_RecInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_LiveInfo::kLiveinfoidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_LiveInfo::IndsertodevHeart_LiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.LiveInfo)
}

void IndsertodevHeart_LiveInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_LiveInfo::IndsertodevHeart_LiveInfo(const IndsertodevHeart_LiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.LiveInfo)
}

void IndsertodevHeart_LiveInfo::SharedCtor() {
  _cached_size_ = 0;
  liveinfoid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_LiveInfo::~IndsertodevHeart_LiveInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.LiveInfo)
  SharedDtor();
}

void IndsertodevHeart_LiveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_LiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_LiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_LiveInfo_descriptor_;
}

const IndsertodevHeart_LiveInfo& IndsertodevHeart_LiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_LiveInfo* IndsertodevHeart_LiveInfo::default_instance_ = NULL;

IndsertodevHeart_LiveInfo* IndsertodevHeart_LiveInfo::New() const {
  return new IndsertodevHeart_LiveInfo;
}

void IndsertodevHeart_LiveInfo::Clear() {
  liveinfoid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_LiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.LiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 liveinfoid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liveinfoid_)));
          set_has_liveinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.LiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.LiveInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_LiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.LiveInfo)
  // optional uint64 liveinfoid = 1;
  if (has_liveinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->liveinfoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.LiveInfo)
}

::google::protobuf::uint8* IndsertodevHeart_LiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.LiveInfo)
  // optional uint64 liveinfoid = 1;
  if (has_liveinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->liveinfoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.LiveInfo)
  return target;
}

int IndsertodevHeart_LiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 liveinfoid = 1;
    if (has_liveinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liveinfoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_LiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_LiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_LiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_LiveInfo::MergeFrom(const IndsertodevHeart_LiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liveinfoid()) {
      set_liveinfoid(from.liveinfoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_LiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_LiveInfo::CopyFrom(const IndsertodevHeart_LiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_LiveInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_LiveInfo::Swap(IndsertodevHeart_LiveInfo* other) {
  if (other != this) {
    std::swap(liveinfoid_, other->liveinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_LiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_LiveInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_LiveInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_VAnalyInfo::kVanalyinfoidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_VAnalyInfo::IndsertodevHeart_VAnalyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.VAnalyInfo)
}

void IndsertodevHeart_VAnalyInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_VAnalyInfo::IndsertodevHeart_VAnalyInfo(const IndsertodevHeart_VAnalyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.VAnalyInfo)
}

void IndsertodevHeart_VAnalyInfo::SharedCtor() {
  _cached_size_ = 0;
  vanalyinfoid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_VAnalyInfo::~IndsertodevHeart_VAnalyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.VAnalyInfo)
  SharedDtor();
}

void IndsertodevHeart_VAnalyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_VAnalyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_VAnalyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_VAnalyInfo_descriptor_;
}

const IndsertodevHeart_VAnalyInfo& IndsertodevHeart_VAnalyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_VAnalyInfo* IndsertodevHeart_VAnalyInfo::default_instance_ = NULL;

IndsertodevHeart_VAnalyInfo* IndsertodevHeart_VAnalyInfo::New() const {
  return new IndsertodevHeart_VAnalyInfo;
}

void IndsertodevHeart_VAnalyInfo::Clear() {
  vanalyinfoid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_VAnalyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.VAnalyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 vanalyinfoid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vanalyinfoid_)));
          set_has_vanalyinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.VAnalyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.VAnalyInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_VAnalyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.VAnalyInfo)
  // optional uint64 vanalyinfoid = 1;
  if (has_vanalyinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->vanalyinfoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.VAnalyInfo)
}

::google::protobuf::uint8* IndsertodevHeart_VAnalyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.VAnalyInfo)
  // optional uint64 vanalyinfoid = 1;
  if (has_vanalyinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->vanalyinfoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.VAnalyInfo)
  return target;
}

int IndsertodevHeart_VAnalyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 vanalyinfoid = 1;
    if (has_vanalyinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vanalyinfoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_VAnalyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_VAnalyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_VAnalyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_VAnalyInfo::MergeFrom(const IndsertodevHeart_VAnalyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vanalyinfoid()) {
      set_vanalyinfoid(from.vanalyinfoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_VAnalyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_VAnalyInfo::CopyFrom(const IndsertodevHeart_VAnalyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_VAnalyInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_VAnalyInfo::Swap(IndsertodevHeart_VAnalyInfo* other) {
  if (other != this) {
    std::swap(vanalyinfoid_, other->vanalyinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_VAnalyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_VAnalyInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_VAnalyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart_ConfInfo::kConfidFieldNumber;
const int IndsertodevHeart_ConfInfo::kConfreportidFieldNumber;
const int IndsertodevHeart_ConfInfo::kDevinfosFieldNumber;
const int IndsertodevHeart_ConfInfo::kUserinfosFieldNumber;
const int IndsertodevHeart_ConfInfo::kRecinfosFieldNumber;
const int IndsertodevHeart_ConfInfo::kLiveinfosFieldNumber;
const int IndsertodevHeart_ConfInfo::kVanalyinfosFieldNumber;
const int IndsertodevHeart_ConfInfo::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart_ConfInfo::IndsertodevHeart_ConfInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart.ConfInfo)
}

void IndsertodevHeart_ConfInfo::InitAsDefaultInstance() {
}

IndsertodevHeart_ConfInfo::IndsertodevHeart_ConfInfo(const IndsertodevHeart_ConfInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart.ConfInfo)
}

void IndsertodevHeart_ConfInfo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = GOOGLE_ULONGLONG(0);
  confreportid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart_ConfInfo::~IndsertodevHeart_ConfInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart.ConfInfo)
  SharedDtor();
}

void IndsertodevHeart_ConfInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndsertodevHeart_ConfInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart_ConfInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_ConfInfo_descriptor_;
}

const IndsertodevHeart_ConfInfo& IndsertodevHeart_ConfInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart_ConfInfo* IndsertodevHeart_ConfInfo::default_instance_ = NULL;

IndsertodevHeart_ConfInfo* IndsertodevHeart_ConfInfo::New() const {
  return new IndsertodevHeart_ConfInfo;
}

void IndsertodevHeart_ConfInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndsertodevHeart_ConfInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 131) {
    ZR_(confid_, confreportid_);
    confrelcompid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  devinfos_.Clear();
  userinfos_.Clear();
  recinfos_.Clear();
  liveinfos_.Clear();
  vanalyinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart_ConfInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart.ConfInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 confid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 2;
      case 2: {
        if (tag == 16) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.DevInfo devinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_devinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devinfos;
        if (input->ExpectTag(34)) goto parse_userinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.UserInfo userinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_userinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userinfos;
        if (input->ExpectTag(42)) goto parse_recinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.RecInfo recinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_recinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recinfos;
        if (input->ExpectTag(50)) goto parse_liveinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.LiveInfo liveinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_liveinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_liveinfos;
        if (input->ExpectTag(58)) goto parse_vanalyinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.VAnalyInfo vanalyinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_vanalyinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vanalyinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vanalyinfos;
        if (input->ExpectTag(64)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 8;
      case 8: {
        if (tag == 64) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart.ConfInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart.ConfInfo)
  return false;
#undef DO_
}

void IndsertodevHeart_ConfInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->confid(), output);
  }

  // optional uint64 confreportid = 2;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->confreportid(), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.DevInfo devinfos = 3;
  for (int i = 0; i < this->devinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devinfos(i), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.UserInfo userinfos = 4;
  for (int i = 0; i < this->userinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfos(i), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.RecInfo recinfos = 5;
  for (int i = 0; i < this->recinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recinfos(i), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.LiveInfo liveinfos = 6;
  for (int i = 0; i < this->liveinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->liveinfos(i), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.VAnalyInfo vanalyinfos = 7;
  for (int i = 0; i < this->vanalyinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vanalyinfos(i), output);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart.ConfInfo)
}

::google::protobuf::uint8* IndsertodevHeart_ConfInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart.ConfInfo)
  // optional uint64 confid = 1;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->confid(), target);
  }

  // optional uint64 confreportid = 2;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->confreportid(), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.DevInfo devinfos = 3;
  for (int i = 0; i < this->devinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->devinfos(i), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.UserInfo userinfos = 4;
  for (int i = 0; i < this->userinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfos(i), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.RecInfo recinfos = 5;
  for (int i = 0; i < this->recinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recinfos(i), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.LiveInfo liveinfos = 6;
  for (int i = 0; i < this->liveinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->liveinfos(i), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.VAnalyInfo vanalyinfos = 7;
  for (int i = 0; i < this->vanalyinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vanalyinfos(i), target);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart.ConfInfo)
  return target;
}

int IndsertodevHeart_ConfInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 confid = 1;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint64 confreportid = 2;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint32 confrelcompid = 8;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  // repeated .SRMsgs.IndsertodevHeart.DevInfo devinfos = 3;
  total_size += 1 * this->devinfos_size();
  for (int i = 0; i < this->devinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devinfos(i));
  }

  // repeated .SRMsgs.IndsertodevHeart.UserInfo userinfos = 4;
  total_size += 1 * this->userinfos_size();
  for (int i = 0; i < this->userinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfos(i));
  }

  // repeated .SRMsgs.IndsertodevHeart.RecInfo recinfos = 5;
  total_size += 1 * this->recinfos_size();
  for (int i = 0; i < this->recinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recinfos(i));
  }

  // repeated .SRMsgs.IndsertodevHeart.LiveInfo liveinfos = 6;
  total_size += 1 * this->liveinfos_size();
  for (int i = 0; i < this->liveinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveinfos(i));
  }

  // repeated .SRMsgs.IndsertodevHeart.VAnalyInfo vanalyinfos = 7;
  total_size += 1 * this->vanalyinfos_size();
  for (int i = 0; i < this->vanalyinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vanalyinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart_ConfInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart_ConfInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart_ConfInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart_ConfInfo::MergeFrom(const IndsertodevHeart_ConfInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devinfos_.MergeFrom(from.devinfos_);
  userinfos_.MergeFrom(from.userinfos_);
  recinfos_.MergeFrom(from.recinfos_);
  liveinfos_.MergeFrom(from.liveinfos_);
  vanalyinfos_.MergeFrom(from.vanalyinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart_ConfInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart_ConfInfo::CopyFrom(const IndsertodevHeart_ConfInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart_ConfInfo::IsInitialized() const {

  return true;
}

void IndsertodevHeart_ConfInfo::Swap(IndsertodevHeart_ConfInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(confreportid_, other->confreportid_);
    devinfos_.Swap(&other->devinfos_);
    userinfos_.Swap(&other->userinfos_);
    recinfos_.Swap(&other->recinfos_);
    liveinfos_.Swap(&other->liveinfos_);
    vanalyinfos_.Swap(&other->vanalyinfos_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart_ConfInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_ConfInfo_descriptor_;
  metadata.reflection = IndsertodevHeart_ConfInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndsertodevHeart::kDeviceidFieldNumber;
const int IndsertodevHeart::kTokenFieldNumber;
const int IndsertodevHeart::kLoad1FieldNumber;
const int IndsertodevHeart::kLoad2FieldNumber;
const int IndsertodevHeart::kSvrTypeFieldNumber;
const int IndsertodevHeart::kLoadinfoFieldNumber;
const int IndsertodevHeart::kConfinfosFieldNumber;
#endif  // !_MSC_VER

IndsertodevHeart::IndsertodevHeart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndsertodevHeart)
}

void IndsertodevHeart::InitAsDefaultInstance() {
  loadinfo_ = const_cast< ::SRMsgs::IndsertodevHeart_LoadInfo*>(&::SRMsgs::IndsertodevHeart_LoadInfo::default_instance());
}

IndsertodevHeart::IndsertodevHeart(const IndsertodevHeart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndsertodevHeart)
}

void IndsertodevHeart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load1_ = 0u;
  load2_ = 0u;
  svr_type_ = 0u;
  loadinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndsertodevHeart::~IndsertodevHeart() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndsertodevHeart)
  SharedDtor();
}

void IndsertodevHeart::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
    delete loadinfo_;
  }
}

void IndsertodevHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndsertodevHeart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndsertodevHeart_descriptor_;
}

const IndsertodevHeart& IndsertodevHeart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndsertodevHeart* IndsertodevHeart::default_instance_ = NULL;

IndsertodevHeart* IndsertodevHeart::New() const {
  return new IndsertodevHeart;
}

void IndsertodevHeart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndsertodevHeart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(deviceid_, svr_type_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_loadinfo()) {
      if (loadinfo_ != NULL) loadinfo_->::SRMsgs::IndsertodevHeart_LoadInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  confinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndsertodevHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndsertodevHeart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_load1;
        break;
      }

      // optional uint32 load1 = 3;
      case 3: {
        if (tag == 24) {
         parse_load1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load1_)));
          set_has_load1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_load2;
        break;
      }

      // optional uint32 load2 = 4;
      case 4: {
        if (tag == 32) {
         parse_load2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load2_)));
          set_has_load2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 5;
      case 5: {
        if (tag == 40) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loadinfo;
        break;
      }

      // optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_loadinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_confinfos;
        break;
      }

      // repeated .SRMsgs.IndsertodevHeart.ConfInfo confinfos = 7;
      case 7: {
        if (tag == 58) {
         parse_confinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_confinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_confinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndsertodevHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndsertodevHeart)
  return false;
#undef DO_
}

void IndsertodevHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndsertodevHeart)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 load1 = 3;
  if (has_load1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->load1(), output);
  }

  // optional uint32 load2 = 4;
  if (has_load2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->load2(), output);
  }

  // optional uint32 svr_type = 5;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->svr_type(), output);
  }

  // optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
  if (has_loadinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->loadinfo(), output);
  }

  // repeated .SRMsgs.IndsertodevHeart.ConfInfo confinfos = 7;
  for (int i = 0; i < this->confinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->confinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndsertodevHeart)
}

::google::protobuf::uint8* IndsertodevHeart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndsertodevHeart)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 load1 = 3;
  if (has_load1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->load1(), target);
  }

  // optional uint32 load2 = 4;
  if (has_load2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->load2(), target);
  }

  // optional uint32 svr_type = 5;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->svr_type(), target);
  }

  // optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
  if (has_loadinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->loadinfo(), target);
  }

  // repeated .SRMsgs.IndsertodevHeart.ConfInfo confinfos = 7;
  for (int i = 0; i < this->confinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->confinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndsertodevHeart)
  return target;
}

int IndsertodevHeart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 load1 = 3;
    if (has_load1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load1());
    }

    // optional uint32 load2 = 4;
    if (has_load2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load2());
    }

    // optional uint32 svr_type = 5;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional .SRMsgs.IndsertodevHeart.LoadInfo loadinfo = 6;
    if (has_loadinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadinfo());
    }

  }
  // repeated .SRMsgs.IndsertodevHeart.ConfInfo confinfos = 7;
  total_size += 1 * this->confinfos_size();
  for (int i = 0; i < this->confinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->confinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndsertodevHeart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndsertodevHeart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndsertodevHeart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndsertodevHeart::MergeFrom(const IndsertodevHeart& from) {
  GOOGLE_CHECK_NE(&from, this);
  confinfos_.MergeFrom(from.confinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_load1()) {
      set_load1(from.load1());
    }
    if (from.has_load2()) {
      set_load2(from.load2());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_loadinfo()) {
      mutable_loadinfo()->::SRMsgs::IndsertodevHeart_LoadInfo::MergeFrom(from.loadinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndsertodevHeart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndsertodevHeart::CopyFrom(const IndsertodevHeart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndsertodevHeart::IsInitialized() const {

  return true;
}

void IndsertodevHeart::Swap(IndsertodevHeart* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(load1_, other->load1_);
    std::swap(load2_, other->load2_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(loadinfo_, other->loadinfo_);
    confinfos_.Swap(&other->confinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndsertodevHeart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndsertodevHeart_descriptor_;
  metadata.reflection = IndsertodevHeart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndMCEndConf::kDeviceidFieldNumber;
const int IndMCEndConf::kTokenFieldNumber;
const int IndMCEndConf::kConfidFieldNumber;
const int IndMCEndConf::kConfreportidFieldNumber;
const int IndMCEndConf::kPermanentenableFieldNumber;
const int IndMCEndConf::kMcconfdetailidFieldNumber;
const int IndMCEndConf::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndMCEndConf::IndMCEndConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndMCEndConf)
}

void IndMCEndConf::InitAsDefaultInstance() {
}

IndMCEndConf::IndMCEndConf(const IndMCEndConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndMCEndConf)
}

void IndMCEndConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  confreportid_ = GOOGLE_ULONGLONG(0);
  permanentenable_ = 0u;
  mcconfdetailid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndMCEndConf::~IndMCEndConf() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndMCEndConf)
  SharedDtor();
}

void IndMCEndConf::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndMCEndConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndMCEndConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndMCEndConf_descriptor_;
}

const IndMCEndConf& IndMCEndConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndMCEndConf* IndMCEndConf::default_instance_ = NULL;

IndMCEndConf* IndMCEndConf::New() const {
  return new IndMCEndConf;
}

void IndMCEndConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndMCEndConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(confid_, confrelcompid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndMCEndConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndMCEndConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 4;
      case 4: {
        if (tag == 32) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_permanentenable;
        break;
      }

      // optional uint32 permanentenable = 5;
      case 5: {
        if (tag == 40) {
         parse_permanentenable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permanentenable_)));
          set_has_permanentenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mcconfdetailid;
        break;
      }

      // optional uint64 mcconfdetailid = 6;
      case 6: {
        if (tag == 48) {
         parse_mcconfdetailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mcconfdetailid_)));
          set_has_mcconfdetailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 7;
      case 7: {
        if (tag == 56) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndMCEndConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndMCEndConf)
  return false;
#undef DO_
}

void IndMCEndConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndMCEndConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->confreportid(), output);
  }

  // optional uint32 permanentenable = 5;
  if (has_permanentenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->permanentenable(), output);
  }

  // optional uint64 mcconfdetailid = 6;
  if (has_mcconfdetailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->mcconfdetailid(), output);
  }

  // optional uint32 confrelcompid = 7;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndMCEndConf)
}

::google::protobuf::uint8* IndMCEndConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndMCEndConf)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->confreportid(), target);
  }

  // optional uint32 permanentenable = 5;
  if (has_permanentenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->permanentenable(), target);
  }

  // optional uint64 mcconfdetailid = 6;
  if (has_mcconfdetailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->mcconfdetailid(), target);
  }

  // optional uint32 confrelcompid = 7;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndMCEndConf)
  return target;
}

int IndMCEndConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint64 confreportid = 4;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint32 permanentenable = 5;
    if (has_permanentenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permanentenable());
    }

    // optional uint64 mcconfdetailid = 6;
    if (has_mcconfdetailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mcconfdetailid());
    }

    // optional uint32 confrelcompid = 7;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndMCEndConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndMCEndConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndMCEndConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndMCEndConf::MergeFrom(const IndMCEndConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_permanentenable()) {
      set_permanentenable(from.permanentenable());
    }
    if (from.has_mcconfdetailid()) {
      set_mcconfdetailid(from.mcconfdetailid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndMCEndConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndMCEndConf::CopyFrom(const IndMCEndConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndMCEndConf::IsInitialized() const {

  return true;
}

void IndMCEndConf::Swap(IndMCEndConf* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(permanentenable_, other->permanentenable_);
    std::swap(mcconfdetailid_, other->mcconfdetailid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndMCEndConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndMCEndConf_descriptor_;
  metadata.reflection = IndMCEndConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPConfInfoInMC::kDeviceidFieldNumber;
const int IndNetMPConfInfoInMC::kTokenFieldNumber;
const int IndNetMPConfInfoInMC::kConfidFieldNumber;
const int IndNetMPConfInfoInMC::kNetmpidFieldNumber;
const int IndNetMPConfInfoInMC::kAddordelFieldNumber;
const int IndNetMPConfInfoInMC::kConfreportidFieldNumber;
const int IndNetMPConfInfoInMC::kNetmpconfdetailidFieldNumber;
#endif  // !_MSC_VER

IndNetMPConfInfoInMC::IndNetMPConfInfoInMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPConfInfoInMC)
}

void IndNetMPConfInfoInMC::InitAsDefaultInstance() {
}

IndNetMPConfInfoInMC::IndNetMPConfInfoInMC(const IndNetMPConfInfoInMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPConfInfoInMC)
}

void IndNetMPConfInfoInMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  netmpid_ = 0u;
  addordel_ = 0u;
  confreportid_ = GOOGLE_ULONGLONG(0);
  netmpconfdetailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPConfInfoInMC::~IndNetMPConfInfoInMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPConfInfoInMC)
  SharedDtor();
}

void IndNetMPConfInfoInMC::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndNetMPConfInfoInMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPConfInfoInMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPConfInfoInMC_descriptor_;
}

const IndNetMPConfInfoInMC& IndNetMPConfInfoInMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndNetMPConfInfoInMC* IndNetMPConfInfoInMC::default_instance_ = NULL;

IndNetMPConfInfoInMC* IndNetMPConfInfoInMC::New() const {
  return new IndNetMPConfInfoInMC;
}

void IndNetMPConfInfoInMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPConfInfoInMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(deviceid_, addordel_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPConfInfoInMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPConfInfoInMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 4;
      case 4: {
        if (tag == 32) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 5;
      case 5: {
        if (tag == 40) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 6;
      case 6: {
        if (tag == 48) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_netmpconfdetailid;
        break;
      }

      // optional uint64 netmpconfdetailid = 7;
      case 7: {
        if (tag == 56) {
         parse_netmpconfdetailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &netmpconfdetailid_)));
          set_has_netmpconfdetailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPConfInfoInMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPConfInfoInMC)
  return false;
#undef DO_
}

void IndNetMPConfInfoInMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPConfInfoInMC)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->netmpid(), output);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addordel(), output);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->confreportid(), output);
  }

  // optional uint64 netmpconfdetailid = 7;
  if (has_netmpconfdetailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->netmpconfdetailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPConfInfoInMC)
}

::google::protobuf::uint8* IndNetMPConfInfoInMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPConfInfoInMC)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 netmpid = 4;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->netmpid(), target);
  }

  // optional uint32 addordel = 5;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addordel(), target);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->confreportid(), target);
  }

  // optional uint64 netmpconfdetailid = 7;
  if (has_netmpconfdetailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->netmpconfdetailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPConfInfoInMC)
  return target;
}

int IndNetMPConfInfoInMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 netmpid = 4;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 addordel = 5;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

    // optional uint64 confreportid = 6;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 netmpconfdetailid = 7;
    if (has_netmpconfdetailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->netmpconfdetailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPConfInfoInMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPConfInfoInMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPConfInfoInMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPConfInfoInMC::MergeFrom(const IndNetMPConfInfoInMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_netmpconfdetailid()) {
      set_netmpconfdetailid(from.netmpconfdetailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPConfInfoInMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPConfInfoInMC::CopyFrom(const IndNetMPConfInfoInMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPConfInfoInMC::IsInitialized() const {

  return true;
}

void IndNetMPConfInfoInMC::Swap(IndNetMPConfInfoInMC* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(addordel_, other->addordel_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(netmpconfdetailid_, other->netmpconfdetailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPConfInfoInMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPConfInfoInMC_descriptor_;
  metadata.reflection = IndNetMPConfInfoInMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndNetMPConnStatusInMC::kDeviceidFieldNumber;
const int IndNetMPConnStatusInMC::kTokenFieldNumber;
const int IndNetMPConnStatusInMC::kNetmpidFieldNumber;
const int IndNetMPConnStatusInMC::kConnstatusFieldNumber;
const int IndNetMPConnStatusInMC::kGroupidFieldNumber;
#endif  // !_MSC_VER

IndNetMPConnStatusInMC::IndNetMPConnStatusInMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndNetMPConnStatusInMC)
}

void IndNetMPConnStatusInMC::InitAsDefaultInstance() {
}

IndNetMPConnStatusInMC::IndNetMPConnStatusInMC(const IndNetMPConnStatusInMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndNetMPConnStatusInMC)
}

void IndNetMPConnStatusInMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmpid_ = 0u;
  connstatus_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndNetMPConnStatusInMC::~IndNetMPConnStatusInMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndNetMPConnStatusInMC)
  SharedDtor();
}

void IndNetMPConnStatusInMC::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndNetMPConnStatusInMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndNetMPConnStatusInMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndNetMPConnStatusInMC_descriptor_;
}

const IndNetMPConnStatusInMC& IndNetMPConnStatusInMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndNetMPConnStatusInMC* IndNetMPConnStatusInMC::default_instance_ = NULL;

IndNetMPConnStatusInMC* IndNetMPConnStatusInMC::New() const {
  return new IndNetMPConnStatusInMC;
}

void IndNetMPConnStatusInMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndNetMPConnStatusInMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(deviceid_, groupid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndNetMPConnStatusInMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndNetMPConnStatusInMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_netmpid;
        break;
      }

      // optional uint32 netmpid = 3;
      case 3: {
        if (tag == 24) {
         parse_netmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmpid_)));
          set_has_netmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_connstatus;
        break;
      }

      // optional uint32 connstatus = 4;
      case 4: {
        if (tag == 32) {
         parse_connstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connstatus_)));
          set_has_connstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 5;
      case 5: {
        if (tag == 40) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndNetMPConnStatusInMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndNetMPConnStatusInMC)
  return false;
#undef DO_
}

void IndNetMPConnStatusInMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndNetMPConnStatusInMC)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->netmpid(), output);
  }

  // optional uint32 connstatus = 4;
  if (has_connstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->connstatus(), output);
  }

  // optional uint32 groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndNetMPConnStatusInMC)
}

::google::protobuf::uint8* IndNetMPConnStatusInMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndNetMPConnStatusInMC)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 netmpid = 3;
  if (has_netmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->netmpid(), target);
  }

  // optional uint32 connstatus = 4;
  if (has_connstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->connstatus(), target);
  }

  // optional uint32 groupid = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndNetMPConnStatusInMC)
  return target;
}

int IndNetMPConnStatusInMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 netmpid = 3;
    if (has_netmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmpid());
    }

    // optional uint32 connstatus = 4;
    if (has_connstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connstatus());
    }

    // optional uint32 groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndNetMPConnStatusInMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndNetMPConnStatusInMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndNetMPConnStatusInMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndNetMPConnStatusInMC::MergeFrom(const IndNetMPConnStatusInMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_netmpid()) {
      set_netmpid(from.netmpid());
    }
    if (from.has_connstatus()) {
      set_connstatus(from.connstatus());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndNetMPConnStatusInMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndNetMPConnStatusInMC::CopyFrom(const IndNetMPConnStatusInMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndNetMPConnStatusInMC::IsInitialized() const {

  return true;
}

void IndNetMPConnStatusInMC::Swap(IndNetMPConnStatusInMC* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(netmpid_, other->netmpid_);
    std::swap(connstatus_, other->connstatus_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndNetMPConnStatusInMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndNetMPConnStatusInMC_descriptor_;
  metadata.reflection = IndNetMPConnStatusInMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSStartRec::kDeviceidFieldNumber;
const int IndCRSStartRec::kTokenFieldNumber;
const int IndCRSStartRec::kConfidFieldNumber;
const int IndCRSStartRec::kCrsidFieldNumber;
const int IndCRSStartRec::kFilestorsvripFieldNumber;
const int IndCRSStartRec::kFilestorpathFieldNumber;
const int IndCRSStartRec::kSdefilepathFieldNumber;
const int IndCRSStartRec::kRelativepathFieldNumber;
const int IndCRSStartRec::kConfnameFieldNumber;
const int IndCRSStartRec::kConfreportidFieldNumber;
const int IndCRSStartRec::kConfrecordidFieldNumber;
const int IndCRSStartRec::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndCRSStartRec::IndCRSStartRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStartRec)
}

void IndCRSStartRec::InitAsDefaultInstance() {
}

IndCRSStartRec::IndCRSStartRec(const IndCRSStartRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStartRec)
}

void IndCRSStartRec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confreportid_ = GOOGLE_ULONGLONG(0);
  confrecordid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStartRec::~IndCRSStartRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStartRec)
  SharedDtor();
}

void IndCRSStartRec::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSStartRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStartRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStartRec_descriptor_;
}

const IndCRSStartRec& IndCRSStartRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStartRec* IndCRSStartRec::default_instance_ = NULL;

IndCRSStartRec* IndCRSStartRec::New() const {
  return new IndCRSStartRec;
}

void IndCRSStartRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSStartRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(confreportid_, confrelcompid_);
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStartRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStartRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 5;
      case 5: {
        if (tag == 42) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 6;
      case 6: {
        if (tag == 50) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 7;
      case 7: {
        if (tag == 58) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 8;
      case 8: {
        if (tag == 66) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_confname;
        break;
      }

      // optional string confname = 9;
      case 9: {
        if (tag == 74) {
         parse_confname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 10;
      case 10: {
        if (tag == 80) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_confrecordid;
        break;
      }

      // optional uint64 confrecordid = 11;
      case 11: {
        if (tag == 88) {
         parse_confrecordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confrecordid_)));
          set_has_confrecordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 12;
      case 12: {
        if (tag == 96) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStartRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStartRec)
  return false;
#undef DO_
}

void IndCRSStartRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStartRec)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filestorpath(), output);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdefilepath(), output);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->relativepath(), output);
  }

  // optional string confname = 9;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->confname(), output);
  }

  // optional uint64 confreportid = 10;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->confreportid(), output);
  }

  // optional uint64 confrecordid = 11;
  if (has_confrecordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->confrecordid(), output);
  }

  // optional uint32 confrelcompid = 12;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStartRec)
}

::google::protobuf::uint8* IndCRSStartRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStartRec)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filestorpath(), target);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sdefilepath(), target);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->relativepath(), target);
  }

  // optional string confname = 9;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->confname(), target);
  }

  // optional uint64 confreportid = 10;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->confreportid(), target);
  }

  // optional uint64 confrecordid = 11;
  if (has_confrecordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->confrecordid(), target);
  }

  // optional uint32 confrelcompid = 12;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStartRec)
  return target;
}

int IndCRSStartRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional string filestorsvrip = 5;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

    // optional string filestorpath = 6;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 7;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string relativepath = 8;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string confname = 9;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // optional uint64 confreportid = 10;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 confrecordid = 11;
    if (has_confrecordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confrecordid());
    }

    // optional uint32 confrelcompid = 12;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStartRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStartRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStartRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStartRec::MergeFrom(const IndCRSStartRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_confrecordid()) {
      set_confrecordid(from.confrecordid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStartRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStartRec::CopyFrom(const IndCRSStartRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStartRec::IsInitialized() const {

  return true;
}

void IndCRSStartRec::Swap(IndCRSStartRec* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(confname_, other->confname_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(confrecordid_, other->confrecordid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStartRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStartRec_descriptor_;
  metadata.reflection = IndCRSStartRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSStopRec::kDeviceidFieldNumber;
const int IndCRSStopRec::kTokenFieldNumber;
const int IndCRSStopRec::kConfidFieldNumber;
const int IndCRSStopRec::kCrsidFieldNumber;
const int IndCRSStopRec::kFilestorsvripFieldNumber;
const int IndCRSStopRec::kFilestorpathFieldNumber;
const int IndCRSStopRec::kSdefilepathFieldNumber;
const int IndCRSStopRec::kRelativepathFieldNumber;
const int IndCRSStopRec::kStopreasonFieldNumber;
const int IndCRSStopRec::kConfnameFieldNumber;
const int IndCRSStopRec::kConfreportidFieldNumber;
const int IndCRSStopRec::kFilesizeFieldNumber;
const int IndCRSStopRec::kConfrecordidFieldNumber;
const int IndCRSStopRec::kRecordfileidFieldNumber;
const int IndCRSStopRec::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndCRSStopRec::IndCRSStopRec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStopRec)
}

void IndCRSStopRec::InitAsDefaultInstance() {
}

IndCRSStopRec::IndCRSStopRec(const IndCRSStopRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStopRec)
}

void IndCRSStopRec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopreason_ = 0u;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confreportid_ = GOOGLE_ULONGLONG(0);
  filesize_ = GOOGLE_ULONGLONG(0);
  confrecordid_ = GOOGLE_ULONGLONG(0);
  recordfileid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStopRec::~IndCRSStopRec() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStopRec)
  SharedDtor();
}

void IndCRSStopRec::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSStopRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStopRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStopRec_descriptor_;
}

const IndCRSStopRec& IndCRSStopRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStopRec* IndCRSStopRec::default_instance_ = NULL;

IndCRSStopRec* IndCRSStopRec::New() const {
  return new IndCRSStopRec;
}

void IndCRSStopRec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSStopRec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(confreportid_, recordfileid_);
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStopRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStopRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 5;
      case 5: {
        if (tag == 42) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 6;
      case 6: {
        if (tag == 50) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 7;
      case 7: {
        if (tag == 58) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 8;
      case 8: {
        if (tag == 66) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_stopreason;
        break;
      }

      // optional uint32 stopreason = 9;
      case 9: {
        if (tag == 72) {
         parse_stopreason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stopreason_)));
          set_has_stopreason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_confname;
        break;
      }

      // optional string confname = 10;
      case 10: {
        if (tag == 82) {
         parse_confname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 11;
      case 11: {
        if (tag == 88) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_filesize;
        break;
      }

      // optional uint64 filesize = 12;
      case 12: {
        if (tag == 96) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_confrecordid;
        break;
      }

      // optional uint64 confrecordid = 13;
      case 13: {
        if (tag == 104) {
         parse_confrecordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confrecordid_)));
          set_has_confrecordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_recordfileid;
        break;
      }

      // optional uint64 recordfileid = 14;
      case 14: {
        if (tag == 112) {
         parse_recordfileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordfileid_)));
          set_has_recordfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 15;
      case 15: {
        if (tag == 120) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStopRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStopRec)
  return false;
#undef DO_
}

void IndCRSStopRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStopRec)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filestorpath(), output);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdefilepath(), output);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->relativepath(), output);
  }

  // optional uint32 stopreason = 9;
  if (has_stopreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->stopreason(), output);
  }

  // optional string confname = 10;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->confname(), output);
  }

  // optional uint64 confreportid = 11;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->confreportid(), output);
  }

  // optional uint64 filesize = 12;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->filesize(), output);
  }

  // optional uint64 confrecordid = 13;
  if (has_confrecordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->confrecordid(), output);
  }

  // optional uint64 recordfileid = 14;
  if (has_recordfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->recordfileid(), output);
  }

  // optional uint32 confrelcompid = 15;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStopRec)
}

::google::protobuf::uint8* IndCRSStopRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStopRec)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filestorpath(), target);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sdefilepath(), target);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->relativepath(), target);
  }

  // optional uint32 stopreason = 9;
  if (has_stopreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->stopreason(), target);
  }

  // optional string confname = 10;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->confname(), target);
  }

  // optional uint64 confreportid = 11;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->confreportid(), target);
  }

  // optional uint64 filesize = 12;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->filesize(), target);
  }

  // optional uint64 confrecordid = 13;
  if (has_confrecordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->confrecordid(), target);
  }

  // optional uint64 recordfileid = 14;
  if (has_recordfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->recordfileid(), target);
  }

  // optional uint32 confrelcompid = 15;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStopRec)
  return target;
}

int IndCRSStopRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional string filestorsvrip = 5;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

    // optional string filestorpath = 6;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 7;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string relativepath = 8;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 stopreason = 9;
    if (has_stopreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stopreason());
    }

    // optional string confname = 10;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // optional uint64 confreportid = 11;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 filesize = 12;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesize());
    }

    // optional uint64 confrecordid = 13;
    if (has_confrecordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confrecordid());
    }

    // optional uint64 recordfileid = 14;
    if (has_recordfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordfileid());
    }

    // optional uint32 confrelcompid = 15;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStopRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStopRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStopRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStopRec::MergeFrom(const IndCRSStopRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stopreason()) {
      set_stopreason(from.stopreason());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_confrecordid()) {
      set_confrecordid(from.confrecordid());
    }
    if (from.has_recordfileid()) {
      set_recordfileid(from.recordfileid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStopRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStopRec::CopyFrom(const IndCRSStopRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStopRec::IsInitialized() const {

  return true;
}

void IndCRSStopRec::Swap(IndCRSStopRec* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(stopreason_, other->stopreason_);
    std::swap(confname_, other->confname_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(filesize_, other->filesize_);
    std::swap(confrecordid_, other->confrecordid_);
    std::swap(recordfileid_, other->recordfileid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStopRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStopRec_descriptor_;
  metadata.reflection = IndCRSStopRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSFileStoragePath::kDeviceidFieldNumber;
const int IndCRSFileStoragePath::kTokenFieldNumber;
const int IndCRSFileStoragePath::kConfidFieldNumber;
const int IndCRSFileStoragePath::kCrsidFieldNumber;
const int IndCRSFileStoragePath::kFilestorsvripFieldNumber;
const int IndCRSFileStoragePath::kFilestorpathFieldNumber;
const int IndCRSFileStoragePath::kSdefilepathFieldNumber;
const int IndCRSFileStoragePath::kRelativepathFieldNumber;
const int IndCRSFileStoragePath::kRecordstateFieldNumber;
const int IndCRSFileStoragePath::kConfreportidFieldNumber;
const int IndCRSFileStoragePath::kFilesizeFieldNumber;
const int IndCRSFileStoragePath::kConfrecordidFieldNumber;
const int IndCRSFileStoragePath::kRecordfileidFieldNumber;
#endif  // !_MSC_VER

IndCRSFileStoragePath::IndCRSFileStoragePath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSFileStoragePath)
}

void IndCRSFileStoragePath::InitAsDefaultInstance() {
}

IndCRSFileStoragePath::IndCRSFileStoragePath(const IndCRSFileStoragePath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSFileStoragePath)
}

void IndCRSFileStoragePath::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  filestorsvrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filestorpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordstate_ = 0u;
  confreportid_ = GOOGLE_ULONGLONG(0);
  filesize_ = GOOGLE_ULONGLONG(0);
  confrecordid_ = GOOGLE_ULONGLONG(0);
  recordfileid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSFileStoragePath::~IndCRSFileStoragePath() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSFileStoragePath)
  SharedDtor();
}

void IndCRSFileStoragePath::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorsvrip_;
  }
  if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filestorpath_;
  }
  if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdefilepath_;
  }
  if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relativepath_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSFileStoragePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSFileStoragePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSFileStoragePath_descriptor_;
}

const IndCRSFileStoragePath& IndCRSFileStoragePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSFileStoragePath* IndCRSFileStoragePath::default_instance_ = NULL;

IndCRSFileStoragePath* IndCRSFileStoragePath::New() const {
  return new IndCRSFileStoragePath;
}

void IndCRSFileStoragePath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSFileStoragePath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_filestorsvrip()) {
      if (filestorsvrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorsvrip_->clear();
      }
    }
    if (has_filestorpath()) {
      if (filestorpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filestorpath_->clear();
      }
    }
    if (has_sdefilepath()) {
      if (sdefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdefilepath_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relativepath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(confreportid_, recordstate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSFileStoragePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSFileStoragePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filestorsvrip;
        break;
      }

      // optional string filestorsvrip = 5;
      case 5: {
        if (tag == 42) {
         parse_filestorsvrip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorsvrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorsvrip().data(), this->filestorsvrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorsvrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filestorpath;
        break;
      }

      // optional string filestorpath = 6;
      case 6: {
        if (tag == 50) {
         parse_filestorpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filestorpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filestorpath().data(), this->filestorpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filestorpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sdefilepath;
        break;
      }

      // optional string sdefilepath = 7;
      case 7: {
        if (tag == 58) {
         parse_sdefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdefilepath().data(), this->sdefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_relativepath;
        break;
      }

      // optional string relativepath = 8;
      case 8: {
        if (tag == 66) {
         parse_relativepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relativepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recordstate;
        break;
      }

      // optional uint32 recordstate = 9;
      case 9: {
        if (tag == 72) {
         parse_recordstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordstate_)));
          set_has_recordstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 10;
      case 10: {
        if (tag == 80) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_filesize;
        break;
      }

      // optional uint64 filesize = 11;
      case 11: {
        if (tag == 88) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_confrecordid;
        break;
      }

      // optional uint64 confrecordid = 12;
      case 12: {
        if (tag == 96) {
         parse_confrecordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confrecordid_)));
          set_has_confrecordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_recordfileid;
        break;
      }

      // optional uint64 recordfileid = 13;
      case 13: {
        if (tag == 104) {
         parse_recordfileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordfileid_)));
          set_has_recordfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSFileStoragePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSFileStoragePath)
  return false;
#undef DO_
}

void IndCRSFileStoragePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSFileStoragePath)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filestorsvrip(), output);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filestorpath(), output);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdefilepath(), output);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->relativepath(), output);
  }

  // optional uint32 recordstate = 9;
  if (has_recordstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->recordstate(), output);
  }

  // optional uint64 confreportid = 10;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->confreportid(), output);
  }

  // optional uint64 filesize = 11;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->filesize(), output);
  }

  // optional uint64 confrecordid = 12;
  if (has_confrecordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->confrecordid(), output);
  }

  // optional uint64 recordfileid = 13;
  if (has_recordfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->recordfileid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSFileStoragePath)
}

::google::protobuf::uint8* IndCRSFileStoragePath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSFileStoragePath)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional string filestorsvrip = 5;
  if (has_filestorsvrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorsvrip().data(), this->filestorsvrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorsvrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filestorsvrip(), target);
  }

  // optional string filestorpath = 6;
  if (has_filestorpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filestorpath().data(), this->filestorpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filestorpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filestorpath(), target);
  }

  // optional string sdefilepath = 7;
  if (has_sdefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdefilepath().data(), this->sdefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sdefilepath(), target);
  }

  // optional string relativepath = 8;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relativepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->relativepath(), target);
  }

  // optional uint32 recordstate = 9;
  if (has_recordstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->recordstate(), target);
  }

  // optional uint64 confreportid = 10;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->confreportid(), target);
  }

  // optional uint64 filesize = 11;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->filesize(), target);
  }

  // optional uint64 confrecordid = 12;
  if (has_confrecordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->confrecordid(), target);
  }

  // optional uint64 recordfileid = 13;
  if (has_recordfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->recordfileid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSFileStoragePath)
  return target;
}

int IndCRSFileStoragePath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional string filestorsvrip = 5;
    if (has_filestorsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorsvrip());
    }

    // optional string filestorpath = 6;
    if (has_filestorpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filestorpath());
    }

    // optional string sdefilepath = 7;
    if (has_sdefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdefilepath());
    }

    // optional string relativepath = 8;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 recordstate = 9;
    if (has_recordstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordstate());
    }

    // optional uint64 confreportid = 10;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 filesize = 11;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesize());
    }

    // optional uint64 confrecordid = 12;
    if (has_confrecordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confrecordid());
    }

    // optional uint64 recordfileid = 13;
    if (has_recordfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordfileid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSFileStoragePath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSFileStoragePath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSFileStoragePath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSFileStoragePath::MergeFrom(const IndCRSFileStoragePath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_filestorsvrip()) {
      set_filestorsvrip(from.filestorsvrip());
    }
    if (from.has_filestorpath()) {
      set_filestorpath(from.filestorpath());
    }
    if (from.has_sdefilepath()) {
      set_sdefilepath(from.sdefilepath());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recordstate()) {
      set_recordstate(from.recordstate());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_confrecordid()) {
      set_confrecordid(from.confrecordid());
    }
    if (from.has_recordfileid()) {
      set_recordfileid(from.recordfileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSFileStoragePath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSFileStoragePath::CopyFrom(const IndCRSFileStoragePath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSFileStoragePath::IsInitialized() const {

  return true;
}

void IndCRSFileStoragePath::Swap(IndCRSFileStoragePath* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    std::swap(filestorsvrip_, other->filestorsvrip_);
    std::swap(filestorpath_, other->filestorpath_);
    std::swap(sdefilepath_, other->sdefilepath_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(recordstate_, other->recordstate_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(filesize_, other->filesize_);
    std::swap(confrecordid_, other->confrecordid_);
    std::swap(recordfileid_, other->recordfileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSFileStoragePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSFileStoragePath_descriptor_;
  metadata.reflection = IndCRSFileStoragePath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndVASAnalyVideoState::kDeviceidFieldNumber;
const int IndVASAnalyVideoState::kTokenFieldNumber;
const int IndVASAnalyVideoState::kConfidFieldNumber;
const int IndVASAnalyVideoState::kConfreportidFieldNumber;
const int IndVASAnalyVideoState::kAnalystateFieldNumber;
const int IndVASAnalyVideoState::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndVASAnalyVideoState::IndVASAnalyVideoState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASAnalyVideoState)
}

void IndVASAnalyVideoState::InitAsDefaultInstance() {
}

IndVASAnalyVideoState::IndVASAnalyVideoState(const IndVASAnalyVideoState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASAnalyVideoState)
}

void IndVASAnalyVideoState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  confreportid_ = GOOGLE_ULONGLONG(0);
  analystate_ = 0u;
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASAnalyVideoState::~IndVASAnalyVideoState() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASAnalyVideoState)
  SharedDtor();
}

void IndVASAnalyVideoState::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndVASAnalyVideoState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASAnalyVideoState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASAnalyVideoState_descriptor_;
}

const IndVASAnalyVideoState& IndVASAnalyVideoState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndVASAnalyVideoState* IndVASAnalyVideoState::default_instance_ = NULL;

IndVASAnalyVideoState* IndVASAnalyVideoState::New() const {
  return new IndVASAnalyVideoState;
}

void IndVASAnalyVideoState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASAnalyVideoState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(confid_, confrelcompid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASAnalyVideoState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASAnalyVideoState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 4;
      case 4: {
        if (tag == 32) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_analystate;
        break;
      }

      // optional uint32 analystate = 5;
      case 5: {
        if (tag == 40) {
         parse_analystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analystate_)));
          set_has_analystate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 6;
      case 6: {
        if (tag == 48) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASAnalyVideoState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASAnalyVideoState)
  return false;
#undef DO_
}

void IndVASAnalyVideoState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASAnalyVideoState)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->confreportid(), output);
  }

  // optional uint32 analystate = 5;
  if (has_analystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->analystate(), output);
  }

  // optional uint32 confrelcompid = 6;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASAnalyVideoState)
}

::google::protobuf::uint8* IndVASAnalyVideoState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASAnalyVideoState)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->confreportid(), target);
  }

  // optional uint32 analystate = 5;
  if (has_analystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->analystate(), target);
  }

  // optional uint32 confrelcompid = 6;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASAnalyVideoState)
  return target;
}

int IndVASAnalyVideoState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint64 confreportid = 4;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint32 analystate = 5;
    if (has_analystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analystate());
    }

    // optional uint32 confrelcompid = 6;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASAnalyVideoState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASAnalyVideoState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASAnalyVideoState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASAnalyVideoState::MergeFrom(const IndVASAnalyVideoState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_analystate()) {
      set_analystate(from.analystate());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASAnalyVideoState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASAnalyVideoState::CopyFrom(const IndVASAnalyVideoState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASAnalyVideoState::IsInitialized() const {

  return true;
}

void IndVASAnalyVideoState::Swap(IndVASAnalyVideoState* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(analystate_, other->analystate_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASAnalyVideoState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASAnalyVideoState_descriptor_;
  metadata.reflection = IndVASAnalyVideoState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSStartLive_LiveAddr::kTypeFieldNumber;
const int IndCRSStartLive_LiveAddr::kUrlFieldNumber;
#endif  // !_MSC_VER

IndCRSStartLive_LiveAddr::IndCRSStartLive_LiveAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStartLive.LiveAddr)
}

void IndCRSStartLive_LiveAddr::InitAsDefaultInstance() {
}

IndCRSStartLive_LiveAddr::IndCRSStartLive_LiveAddr(const IndCRSStartLive_LiveAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStartLive.LiveAddr)
}

void IndCRSStartLive_LiveAddr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStartLive_LiveAddr::~IndCRSStartLive_LiveAddr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStartLive.LiveAddr)
  SharedDtor();
}

void IndCRSStartLive_LiveAddr::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSStartLive_LiveAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStartLive_LiveAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStartLive_LiveAddr_descriptor_;
}

const IndCRSStartLive_LiveAddr& IndCRSStartLive_LiveAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStartLive_LiveAddr* IndCRSStartLive_LiveAddr::default_instance_ = NULL;

IndCRSStartLive_LiveAddr* IndCRSStartLive_LiveAddr::New() const {
  return new IndCRSStartLive_LiveAddr;
}

void IndCRSStartLive_LiveAddr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStartLive_LiveAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStartLive.LiveAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStartLive.LiveAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStartLive.LiveAddr)
  return false;
#undef DO_
}

void IndCRSStartLive_LiveAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStartLive.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStartLive.LiveAddr)
}

::google::protobuf::uint8* IndCRSStartLive_LiveAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStartLive.LiveAddr)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStartLive.LiveAddr)
  return target;
}

int IndCRSStartLive_LiveAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStartLive_LiveAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStartLive_LiveAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStartLive_LiveAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStartLive_LiveAddr::MergeFrom(const IndCRSStartLive_LiveAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStartLive_LiveAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStartLive_LiveAddr::CopyFrom(const IndCRSStartLive_LiveAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStartLive_LiveAddr::IsInitialized() const {

  return true;
}

void IndCRSStartLive_LiveAddr::Swap(IndCRSStartLive_LiveAddr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStartLive_LiveAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStartLive_LiveAddr_descriptor_;
  metadata.reflection = IndCRSStartLive_LiveAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCRSStartLive_LiveSetting::kChairmanFieldNumber;
const int IndCRSStartLive_LiveSetting::kSubjectFieldNumber;
const int IndCRSStartLive_LiveSetting::kAbstractFieldNumber;
const int IndCRSStartLive_LiveSetting::kIspublicFieldNumber;
const int IndCRSStartLive_LiveSetting::kLivepwdFieldNumber;
const int IndCRSStartLive_LiveSetting::kIsuserecFieldNumber;
#endif  // !_MSC_VER

IndCRSStartLive_LiveSetting::IndCRSStartLive_LiveSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStartLive.LiveSetting)
}

void IndCRSStartLive_LiveSetting::InitAsDefaultInstance() {
}

IndCRSStartLive_LiveSetting::IndCRSStartLive_LiveSetting(const IndCRSStartLive_LiveSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStartLive.LiveSetting)
}

void IndCRSStartLive_LiveSetting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispublic_ = 0u;
  livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isuserec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStartLive_LiveSetting::~IndCRSStartLive_LiveSetting() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStartLive.LiveSetting)
  SharedDtor();
}

void IndCRSStartLive_LiveSetting::SharedDtor() {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairman_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abstract_;
  }
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepwd_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSStartLive_LiveSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStartLive_LiveSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStartLive_LiveSetting_descriptor_;
}

const IndCRSStartLive_LiveSetting& IndCRSStartLive_LiveSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStartLive_LiveSetting* IndCRSStartLive_LiveSetting::default_instance_ = NULL;

IndCRSStartLive_LiveSetting* IndCRSStartLive_LiveSetting::New() const {
  return new IndCRSStartLive_LiveSetting;
}

void IndCRSStartLive_LiveSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSStartLive_LiveSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ispublic_, isuserec_);
    if (has_chairman()) {
      if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chairman_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_abstract()) {
      if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abstract_->clear();
      }
    }
    if (has_livepwd()) {
      if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepwd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStartLive_LiveSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStartLive.LiveSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chairman = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairman()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chairman().data(), this->chairman().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chairman");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (tag == 18) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abstract;
        break;
      }

      // optional string abstract = 3;
      case 3: {
        if (tag == 26) {
         parse_abstract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abstract().data(), this->abstract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abstract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ispublic;
        break;
      }

      // optional uint32 ispublic = 4;
      case 4: {
        if (tag == 32) {
         parse_ispublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_livepwd;
        break;
      }

      // optional string livepwd = 5;
      case 5: {
        if (tag == 42) {
         parse_livepwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepwd().data(), this->livepwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isuserec;
        break;
      }

      // optional uint32 isuserec = 6;
      case 6: {
        if (tag == 48) {
         parse_isuserec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isuserec_)));
          set_has_isuserec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStartLive.LiveSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStartLive.LiveSetting)
  return false;
#undef DO_
}

void IndCRSStartLive_LiveSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStartLive.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chairman(), output);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abstract(), output);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ispublic(), output);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->livepwd(), output);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isuserec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStartLive.LiveSetting)
}

::google::protobuf::uint8* IndCRSStartLive_LiveSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStartLive.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chairman(), target);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abstract(), target);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ispublic(), target);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->livepwd(), target);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isuserec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStartLive.LiveSetting)
  return target;
}

int IndCRSStartLive_LiveSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chairman = 1;
    if (has_chairman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairman());
    }

    // optional string subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string abstract = 3;
    if (has_abstract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract());
    }

    // optional uint32 ispublic = 4;
    if (has_ispublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispublic());
    }

    // optional string livepwd = 5;
    if (has_livepwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepwd());
    }

    // optional uint32 isuserec = 6;
    if (has_isuserec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isuserec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStartLive_LiveSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStartLive_LiveSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStartLive_LiveSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStartLive_LiveSetting::MergeFrom(const IndCRSStartLive_LiveSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairman()) {
      set_chairman(from.chairman());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_abstract()) {
      set_abstract(from.abstract());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_livepwd()) {
      set_livepwd(from.livepwd());
    }
    if (from.has_isuserec()) {
      set_isuserec(from.isuserec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStartLive_LiveSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStartLive_LiveSetting::CopyFrom(const IndCRSStartLive_LiveSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStartLive_LiveSetting::IsInitialized() const {

  return true;
}

void IndCRSStartLive_LiveSetting::Swap(IndCRSStartLive_LiveSetting* other) {
  if (other != this) {
    std::swap(chairman_, other->chairman_);
    std::swap(subject_, other->subject_);
    std::swap(abstract_, other->abstract_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(livepwd_, other->livepwd_);
    std::swap(isuserec_, other->isuserec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStartLive_LiveSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStartLive_LiveSetting_descriptor_;
  metadata.reflection = IndCRSStartLive_LiveSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCRSStartLive::kDeviceidFieldNumber;
const int IndCRSStartLive::kTokenFieldNumber;
const int IndCRSStartLive::kConfidFieldNumber;
const int IndCRSStartLive::kCrsidFieldNumber;
const int IndCRSStartLive::kLivepushurlFieldNumber;
const int IndCRSStartLive::kLivepullurlFieldNumber;
const int IndCRSStartLive::kLiveplayurlFieldNumber;
const int IndCRSStartLive::kLivesetinfoFieldNumber;
const int IndCRSStartLive::kConfreportidFieldNumber;
const int IndCRSStartLive::kLivesvrtypeFieldNumber;
const int IndCRSStartLive::kLiveaddrsFieldNumber;
const int IndCRSStartLive::kLiveinfoidFieldNumber;
const int IndCRSStartLive::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndCRSStartLive::IndCRSStartLive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStartLive)
}

void IndCRSStartLive::InitAsDefaultInstance() {
  livesetinfo_ = const_cast< ::SRMsgs::IndCRSStartLive_LiveSetting*>(&::SRMsgs::IndCRSStartLive_LiveSetting::default_instance());
}

IndCRSStartLive::IndCRSStartLive(const IndCRSStartLive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStartLive)
}

void IndCRSStartLive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  livepushurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livepullurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liveplayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livesetinfo_ = NULL;
  confreportid_ = GOOGLE_ULONGLONG(0);
  livesvrtype_ = 0u;
  liveinfoid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStartLive::~IndCRSStartLive() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStartLive)
  SharedDtor();
}

void IndCRSStartLive::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepushurl_;
  }
  if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepullurl_;
  }
  if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveplayurl_;
  }
  if (this != default_instance_) {
    delete livesetinfo_;
  }
}

void IndCRSStartLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStartLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStartLive_descriptor_;
}

const IndCRSStartLive& IndCRSStartLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStartLive* IndCRSStartLive::default_instance_ = NULL;

IndCRSStartLive* IndCRSStartLive::New() const {
  return new IndCRSStartLive;
}

void IndCRSStartLive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSStartLive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_livepushurl()) {
      if (livepushurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepushurl_->clear();
      }
    }
    if (has_livepullurl()) {
      if (livepullurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepullurl_->clear();
      }
    }
    if (has_liveplayurl()) {
      if (liveplayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveplayurl_->clear();
      }
    }
    if (has_livesetinfo()) {
      if (livesetinfo_ != NULL) livesetinfo_->::SRMsgs::IndCRSStartLive_LiveSetting::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 6912) {
    ZR_(livesvrtype_, liveinfoid_);
    confreportid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  liveaddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStartLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStartLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_livepushurl;
        break;
      }

      // optional string livepushurl = 5;
      case 5: {
        if (tag == 42) {
         parse_livepushurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepushurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepushurl().data(), this->livepushurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepushurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_livepullurl;
        break;
      }

      // optional string livepullurl = 6;
      case 6: {
        if (tag == 50) {
         parse_livepullurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepullurl().data(), this->livepullurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepullurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_liveplayurl;
        break;
      }

      // optional string liveplayurl = 7;
      case 7: {
        if (tag == 58) {
         parse_liveplayurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveplayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveplayurl().data(), this->liveplayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveplayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_livesetinfo;
        break;
      }

      // optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
      case 8: {
        if (tag == 66) {
         parse_livesetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_livesetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 9;
      case 9: {
        if (tag == 72) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_livesvrtype;
        break;
      }

      // optional uint32 livesvrtype = 10;
      case 10: {
        if (tag == 80) {
         parse_livesvrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livesvrtype_)));
          set_has_livesvrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_liveaddrs;
        break;
      }

      // repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
      case 11: {
        if (tag == 90) {
         parse_liveaddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveaddrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_liveaddrs;
        if (input->ExpectTag(96)) goto parse_liveinfoid;
        break;
      }

      // optional uint64 liveinfoid = 12;
      case 12: {
        if (tag == 96) {
         parse_liveinfoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liveinfoid_)));
          set_has_liveinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 13;
      case 13: {
        if (tag == 104) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStartLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStartLive)
  return false;
#undef DO_
}

void IndCRSStartLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStartLive)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional string livepushurl = 5;
  if (has_livepushurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepushurl().data(), this->livepushurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepushurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->livepushurl(), output);
  }

  // optional string livepullurl = 6;
  if (has_livepullurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepullurl().data(), this->livepullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepullurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->livepullurl(), output);
  }

  // optional string liveplayurl = 7;
  if (has_liveplayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveplayurl().data(), this->liveplayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveplayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->liveplayurl(), output);
  }

  // optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
  if (has_livesetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->livesetinfo(), output);
  }

  // optional uint64 confreportid = 9;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->confreportid(), output);
  }

  // optional uint32 livesvrtype = 10;
  if (has_livesvrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->livesvrtype(), output);
  }

  // repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->liveaddrs(i), output);
  }

  // optional uint64 liveinfoid = 12;
  if (has_liveinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->liveinfoid(), output);
  }

  // optional uint32 confrelcompid = 13;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStartLive)
}

::google::protobuf::uint8* IndCRSStartLive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStartLive)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional string livepushurl = 5;
  if (has_livepushurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepushurl().data(), this->livepushurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepushurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->livepushurl(), target);
  }

  // optional string livepullurl = 6;
  if (has_livepullurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepullurl().data(), this->livepullurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepullurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->livepullurl(), target);
  }

  // optional string liveplayurl = 7;
  if (has_liveplayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveplayurl().data(), this->liveplayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveplayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->liveplayurl(), target);
  }

  // optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
  if (has_livesetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->livesetinfo(), target);
  }

  // optional uint64 confreportid = 9;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->confreportid(), target);
  }

  // optional uint32 livesvrtype = 10;
  if (has_livesvrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->livesvrtype(), target);
  }

  // repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->liveaddrs(i), target);
  }

  // optional uint64 liveinfoid = 12;
  if (has_liveinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->liveinfoid(), target);
  }

  // optional uint32 confrelcompid = 13;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStartLive)
  return target;
}

int IndCRSStartLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional string livepushurl = 5;
    if (has_livepushurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepushurl());
    }

    // optional string livepullurl = 6;
    if (has_livepullurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepullurl());
    }

    // optional string liveplayurl = 7;
    if (has_liveplayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveplayurl());
    }

    // optional .SRMsgs.IndCRSStartLive.LiveSetting livesetinfo = 8;
    if (has_livesetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->livesetinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 confreportid = 9;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint32 livesvrtype = 10;
    if (has_livesvrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livesvrtype());
    }

    // optional uint64 liveinfoid = 12;
    if (has_liveinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liveinfoid());
    }

    // optional uint32 confrelcompid = 13;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  // repeated .SRMsgs.IndCRSStartLive.LiveAddr liveaddrs = 11;
  total_size += 1 * this->liveaddrs_size();
  for (int i = 0; i < this->liveaddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveaddrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStartLive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStartLive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStartLive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStartLive::MergeFrom(const IndCRSStartLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  liveaddrs_.MergeFrom(from.liveaddrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_livepushurl()) {
      set_livepushurl(from.livepushurl());
    }
    if (from.has_livepullurl()) {
      set_livepullurl(from.livepullurl());
    }
    if (from.has_liveplayurl()) {
      set_liveplayurl(from.liveplayurl());
    }
    if (from.has_livesetinfo()) {
      mutable_livesetinfo()->::SRMsgs::IndCRSStartLive_LiveSetting::MergeFrom(from.livesetinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_livesvrtype()) {
      set_livesvrtype(from.livesvrtype());
    }
    if (from.has_liveinfoid()) {
      set_liveinfoid(from.liveinfoid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStartLive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStartLive::CopyFrom(const IndCRSStartLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStartLive::IsInitialized() const {

  return true;
}

void IndCRSStartLive::Swap(IndCRSStartLive* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    std::swap(livepushurl_, other->livepushurl_);
    std::swap(livepullurl_, other->livepullurl_);
    std::swap(liveplayurl_, other->liveplayurl_);
    std::swap(livesetinfo_, other->livesetinfo_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(livesvrtype_, other->livesvrtype_);
    liveaddrs_.Swap(&other->liveaddrs_);
    std::swap(liveinfoid_, other->liveinfoid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStartLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStartLive_descriptor_;
  metadata.reflection = IndCRSStartLive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCRSStopLive::kDeviceidFieldNumber;
const int IndCRSStopLive::kTokenFieldNumber;
const int IndCRSStopLive::kConfidFieldNumber;
const int IndCRSStopLive::kCrsidFieldNumber;
const int IndCRSStopLive::kLiveurlFieldNumber;
const int IndCRSStopLive::kConfreportidFieldNumber;
const int IndCRSStopLive::kLiveinfoidFieldNumber;
const int IndCRSStopLive::kConfrelcompidFieldNumber;
#endif  // !_MSC_VER

IndCRSStopLive::IndCRSStopLive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCRSStopLive)
}

void IndCRSStopLive::InitAsDefaultInstance() {
}

IndCRSStopLive::IndCRSStopLive(const IndCRSStopLive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCRSStopLive)
}

void IndCRSStopLive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  crsid_ = 0u;
  liveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confreportid_ = GOOGLE_ULONGLONG(0);
  liveinfoid_ = GOOGLE_ULONGLONG(0);
  confrelcompid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCRSStopLive::~IndCRSStopLive() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCRSStopLive)
  SharedDtor();
}

void IndCRSStopLive::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liveurl_;
  }
  if (this != default_instance_) {
  }
}

void IndCRSStopLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCRSStopLive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCRSStopLive_descriptor_;
}

const IndCRSStopLive& IndCRSStopLive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCRSStopLive* IndCRSStopLive::default_instance_ = NULL;

IndCRSStopLive* IndCRSStopLive::New() const {
  return new IndCRSStopLive;
}

void IndCRSStopLive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCRSStopLive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, confid_);
    ZR_(confreportid_, confrelcompid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_liveurl()) {
      if (liveurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        liveurl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCRSStopLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCRSStopLive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_crsid;
        break;
      }

      // optional uint32 crsid = 4;
      case 4: {
        if (tag == 32) {
         parse_crsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crsid_)));
          set_has_crsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_liveurl;
        break;
      }

      // optional string liveurl = 5;
      case 5: {
        if (tag == 42) {
         parse_liveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->liveurl().data(), this->liveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "liveurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 6;
      case 6: {
        if (tag == 48) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_liveinfoid;
        break;
      }

      // optional uint64 liveinfoid = 7;
      case 7: {
        if (tag == 56) {
         parse_liveinfoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liveinfoid_)));
          set_has_liveinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 8;
      case 8: {
        if (tag == 64) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCRSStopLive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCRSStopLive)
  return false;
#undef DO_
}

void IndCRSStopLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCRSStopLive)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crsid(), output);
  }

  // optional string liveurl = 5;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->liveurl(), output);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->confreportid(), output);
  }

  // optional uint64 liveinfoid = 7;
  if (has_liveinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->liveinfoid(), output);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->confrelcompid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCRSStopLive)
}

::google::protobuf::uint8* IndCRSStopLive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCRSStopLive)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 crsid = 4;
  if (has_crsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crsid(), target);
  }

  // optional string liveurl = 5;
  if (has_liveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->liveurl().data(), this->liveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "liveurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->liveurl(), target);
  }

  // optional uint64 confreportid = 6;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->confreportid(), target);
  }

  // optional uint64 liveinfoid = 7;
  if (has_liveinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->liveinfoid(), target);
  }

  // optional uint32 confrelcompid = 8;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->confrelcompid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCRSStopLive)
  return target;
}

int IndCRSStopLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 crsid = 4;
    if (has_crsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crsid());
    }

    // optional string liveurl = 5;
    if (has_liveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->liveurl());
    }

    // optional uint64 confreportid = 6;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

    // optional uint64 liveinfoid = 7;
    if (has_liveinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liveinfoid());
    }

    // optional uint32 confrelcompid = 8;
    if (has_confrelcompid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCRSStopLive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCRSStopLive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCRSStopLive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCRSStopLive::MergeFrom(const IndCRSStopLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_crsid()) {
      set_crsid(from.crsid());
    }
    if (from.has_liveurl()) {
      set_liveurl(from.liveurl());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
    if (from.has_liveinfoid()) {
      set_liveinfoid(from.liveinfoid());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCRSStopLive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCRSStopLive::CopyFrom(const IndCRSStopLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCRSStopLive::IsInitialized() const {

  return true;
}

void IndCRSStopLive::Swap(IndCRSStopLive* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(crsid_, other->crsid_);
    std::swap(liveurl_, other->liveurl_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(liveinfoid_, other->liveinfoid_);
    std::swap(confrelcompid_, other->confrelcompid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCRSStopLive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCRSStopLive_descriptor_;
  metadata.reflection = IndCRSStopLive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndModifyConfCallList_ParticipantInfo::kPsuidFieldNumber;
const int IndModifyConfCallList_ParticipantInfo::kNicknameFieldNumber;
#endif  // !_MSC_VER

IndModifyConfCallList_ParticipantInfo::IndModifyConfCallList_ParticipantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndModifyConfCallList.ParticipantInfo)
}

void IndModifyConfCallList_ParticipantInfo::InitAsDefaultInstance() {
}

IndModifyConfCallList_ParticipantInfo::IndModifyConfCallList_ParticipantInfo(const IndModifyConfCallList_ParticipantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndModifyConfCallList.ParticipantInfo)
}

void IndModifyConfCallList_ParticipantInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  psuid_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndModifyConfCallList_ParticipantInfo::~IndModifyConfCallList_ParticipantInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  SharedDtor();
}

void IndModifyConfCallList_ParticipantInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void IndModifyConfCallList_ParticipantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndModifyConfCallList_ParticipantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndModifyConfCallList_ParticipantInfo_descriptor_;
}

const IndModifyConfCallList_ParticipantInfo& IndModifyConfCallList_ParticipantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndModifyConfCallList_ParticipantInfo* IndModifyConfCallList_ParticipantInfo::default_instance_ = NULL;

IndModifyConfCallList_ParticipantInfo* IndModifyConfCallList_ParticipantInfo::New() const {
  return new IndModifyConfCallList_ParticipantInfo;
}

void IndModifyConfCallList_ParticipantInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    psuid_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndModifyConfCallList_ParticipantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 psuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &psuid_)));
          set_has_psuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  return false;
#undef DO_
}

void IndModifyConfCallList_ParticipantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->psuid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndModifyConfCallList.ParticipantInfo)
}

::google::protobuf::uint8* IndModifyConfCallList_ParticipantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->psuid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndModifyConfCallList.ParticipantInfo)
  return target;
}

int IndModifyConfCallList_ParticipantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 psuid = 1;
    if (has_psuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->psuid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndModifyConfCallList_ParticipantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndModifyConfCallList_ParticipantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndModifyConfCallList_ParticipantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndModifyConfCallList_ParticipantInfo::MergeFrom(const IndModifyConfCallList_ParticipantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psuid()) {
      set_psuid(from.psuid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndModifyConfCallList_ParticipantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndModifyConfCallList_ParticipantInfo::CopyFrom(const IndModifyConfCallList_ParticipantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndModifyConfCallList_ParticipantInfo::IsInitialized() const {

  return true;
}

void IndModifyConfCallList_ParticipantInfo::Swap(IndModifyConfCallList_ParticipantInfo* other) {
  if (other != this) {
    std::swap(psuid_, other->psuid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndModifyConfCallList_ParticipantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndModifyConfCallList_ParticipantInfo_descriptor_;
  metadata.reflection = IndModifyConfCallList_ParticipantInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndModifyConfCallList_RollCallInfo::kRcidFieldNumber;
const int IndModifyConfCallList_RollCallInfo::kRcnameFieldNumber;
const int IndModifyConfCallList_RollCallInfo::kPartsFieldNumber;
#endif  // !_MSC_VER

IndModifyConfCallList_RollCallInfo::IndModifyConfCallList_RollCallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndModifyConfCallList.RollCallInfo)
}

void IndModifyConfCallList_RollCallInfo::InitAsDefaultInstance() {
}

IndModifyConfCallList_RollCallInfo::IndModifyConfCallList_RollCallInfo(const IndModifyConfCallList_RollCallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndModifyConfCallList.RollCallInfo)
}

void IndModifyConfCallList_RollCallInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rcid_ = GOOGLE_ULONGLONG(0);
  rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndModifyConfCallList_RollCallInfo::~IndModifyConfCallList_RollCallInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndModifyConfCallList.RollCallInfo)
  SharedDtor();
}

void IndModifyConfCallList_RollCallInfo::SharedDtor() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (this != default_instance_) {
  }
}

void IndModifyConfCallList_RollCallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndModifyConfCallList_RollCallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndModifyConfCallList_RollCallInfo_descriptor_;
}

const IndModifyConfCallList_RollCallInfo& IndModifyConfCallList_RollCallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndModifyConfCallList_RollCallInfo* IndModifyConfCallList_RollCallInfo::default_instance_ = NULL;

IndModifyConfCallList_RollCallInfo* IndModifyConfCallList_RollCallInfo::New() const {
  return new IndModifyConfCallList_RollCallInfo;
}

void IndModifyConfCallList_RollCallInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    rcid_ = GOOGLE_ULONGLONG(0);
    if (has_rcname()) {
      if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rcname_->clear();
      }
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndModifyConfCallList_RollCallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndModifyConfCallList.RollCallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcid_)));
          set_has_rcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rcname;
        break;
      }

      // optional string rcname = 2;
      case 2: {
        if (tag == 18) {
         parse_rcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rcname().data(), this->rcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rcname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        break;
      }

      // repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
      case 3: {
        if (tag == 26) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndModifyConfCallList.RollCallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndModifyConfCallList.RollCallInfo)
  return false;
#undef DO_
}

void IndModifyConfCallList_RollCallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndModifyConfCallList.RollCallInfo)
  // optional uint64 rcid = 1;
  if (has_rcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rcid(), output);
  }

  // optional string rcname = 2;
  if (has_rcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rcname().data(), this->rcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rcname(), output);
  }

  // repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndModifyConfCallList.RollCallInfo)
}

::google::protobuf::uint8* IndModifyConfCallList_RollCallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndModifyConfCallList.RollCallInfo)
  // optional uint64 rcid = 1;
  if (has_rcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rcid(), target);
  }

  // optional string rcname = 2;
  if (has_rcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rcname().data(), this->rcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rcname(), target);
  }

  // repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndModifyConfCallList.RollCallInfo)
  return target;
}

int IndModifyConfCallList_RollCallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rcid = 1;
    if (has_rcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcid());
    }

    // optional string rcname = 2;
    if (has_rcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcname());
    }

  }
  // repeated .SRMsgs.IndModifyConfCallList.ParticipantInfo parts = 3;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndModifyConfCallList_RollCallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndModifyConfCallList_RollCallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndModifyConfCallList_RollCallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndModifyConfCallList_RollCallInfo::MergeFrom(const IndModifyConfCallList_RollCallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcid()) {
      set_rcid(from.rcid());
    }
    if (from.has_rcname()) {
      set_rcname(from.rcname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndModifyConfCallList_RollCallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndModifyConfCallList_RollCallInfo::CopyFrom(const IndModifyConfCallList_RollCallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndModifyConfCallList_RollCallInfo::IsInitialized() const {

  return true;
}

void IndModifyConfCallList_RollCallInfo::Swap(IndModifyConfCallList_RollCallInfo* other) {
  if (other != this) {
    std::swap(rcid_, other->rcid_);
    std::swap(rcname_, other->rcname_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndModifyConfCallList_RollCallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndModifyConfCallList_RollCallInfo_descriptor_;
  metadata.reflection = IndModifyConfCallList_RollCallInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndModifyConfCallList::kDeviceidFieldNumber;
const int IndModifyConfCallList::kTokenFieldNumber;
const int IndModifyConfCallList::kConfidFieldNumber;
const int IndModifyConfCallList::kOptypeFieldNumber;
const int IndModifyConfCallList::kRollcalllistFieldNumber;
#endif  // !_MSC_VER

IndModifyConfCallList::IndModifyConfCallList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndModifyConfCallList)
}

void IndModifyConfCallList::InitAsDefaultInstance() {
  rollcalllist_ = const_cast< ::SRMsgs::IndModifyConfCallList_RollCallInfo*>(&::SRMsgs::IndModifyConfCallList_RollCallInfo::default_instance());
}

IndModifyConfCallList::IndModifyConfCallList(const IndModifyConfCallList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndModifyConfCallList)
}

void IndModifyConfCallList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0u;
  rollcalllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndModifyConfCallList::~IndModifyConfCallList() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndModifyConfCallList)
  SharedDtor();
}

void IndModifyConfCallList::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
    delete rollcalllist_;
  }
}

void IndModifyConfCallList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndModifyConfCallList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndModifyConfCallList_descriptor_;
}

const IndModifyConfCallList& IndModifyConfCallList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndModifyConfCallList* IndModifyConfCallList::default_instance_ = NULL;

IndModifyConfCallList* IndModifyConfCallList::New() const {
  return new IndModifyConfCallList;
}

void IndModifyConfCallList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndModifyConfCallList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(deviceid_, confid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_rollcalllist()) {
      if (rollcalllist_ != NULL) rollcalllist_->::SRMsgs::IndModifyConfCallList_RollCallInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndModifyConfCallList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndModifyConfCallList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 4;
      case 4: {
        if (tag == 32) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rollcalllist;
        break;
      }

      // optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
      case 5: {
        if (tag == 42) {
         parse_rollcalllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rollcalllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndModifyConfCallList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndModifyConfCallList)
  return false;
#undef DO_
}

void IndModifyConfCallList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndModifyConfCallList)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint32 optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->optype(), output);
  }

  // optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
  if (has_rollcalllist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rollcalllist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndModifyConfCallList)
}

::google::protobuf::uint8* IndModifyConfCallList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndModifyConfCallList)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint32 optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->optype(), target);
  }

  // optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
  if (has_rollcalllist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rollcalllist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndModifyConfCallList)
  return target;
}

int IndModifyConfCallList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional .SRMsgs.IndModifyConfCallList.RollCallInfo rollcalllist = 5;
    if (has_rollcalllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rollcalllist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndModifyConfCallList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndModifyConfCallList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndModifyConfCallList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndModifyConfCallList::MergeFrom(const IndModifyConfCallList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_rollcalllist()) {
      mutable_rollcalllist()->::SRMsgs::IndModifyConfCallList_RollCallInfo::MergeFrom(from.rollcalllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndModifyConfCallList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndModifyConfCallList::CopyFrom(const IndModifyConfCallList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndModifyConfCallList::IsInitialized() const {

  return true;
}

void IndModifyConfCallList::Swap(IndModifyConfCallList* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(optype_, other->optype_);
    std::swap(rollcalllist_, other->rollcalllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndModifyConfCallList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndModifyConfCallList_descriptor_;
  metadata.reflection = IndModifyConfCallList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndTerStatisticsInfo_FrameInfo::kFswFieldNumber;
const int IndTerStatisticsInfo_FrameInfo::kFshFieldNumber;
const int IndTerStatisticsInfo_FrameInfo::kFpsFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_FrameInfo::IndTerStatisticsInfo_FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.FrameInfo)
}

void IndTerStatisticsInfo_FrameInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo_FrameInfo::IndTerStatisticsInfo_FrameInfo(const IndTerStatisticsInfo_FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.FrameInfo)
}

void IndTerStatisticsInfo_FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  fsw_ = 0u;
  fsh_ = 0u;
  fps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_FrameInfo::~IndTerStatisticsInfo_FrameInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo_FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_FrameInfo_descriptor_;
}

const IndTerStatisticsInfo_FrameInfo& IndTerStatisticsInfo_FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_FrameInfo* IndTerStatisticsInfo_FrameInfo::default_instance_ = NULL;

IndTerStatisticsInfo_FrameInfo* IndTerStatisticsInfo_FrameInfo::New() const {
  return new IndTerStatisticsInfo_FrameInfo;
}

void IndTerStatisticsInfo_FrameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_FrameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fsw_, fps_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fsw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsw_)));
          set_has_fsw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fsh;
        break;
      }

      // optional uint32 fsh = 2;
      case 2: {
        if (tag == 16) {
         parse_fsh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsh_)));
          set_has_fsh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fps;
        break;
      }

      // optional uint32 fps = 3;
      case 3: {
        if (tag == 24) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
          set_has_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fsw(), output);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fsh(), output);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.FrameInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  // optional uint32 fsw = 1;
  if (has_fsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fsw(), target);
  }

  // optional uint32 fsh = 2;
  if (has_fsh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fsh(), target);
  }

  // optional uint32 fps = 3;
  if (has_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.FrameInfo)
  return target;
}

int IndTerStatisticsInfo_FrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fsw = 1;
    if (has_fsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsw());
    }

    // optional uint32 fsh = 2;
    if (has_fsh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsh());
    }

    // optional uint32 fps = 3;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_FrameInfo::MergeFrom(const IndTerStatisticsInfo_FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fsw()) {
      set_fsw(from.fsw());
    }
    if (from.has_fsh()) {
      set_fsh(from.fsh());
    }
    if (from.has_fps()) {
      set_fps(from.fps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_FrameInfo::CopyFrom(const IndTerStatisticsInfo_FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_FrameInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_FrameInfo::Swap(IndTerStatisticsInfo_FrameInfo* other) {
  if (other != this) {
    std::swap(fsw_, other->fsw_);
    std::swap(fsh_, other->fsh_);
    std::swap(fps_, other->fps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_FrameInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_FrameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_AdvanceInfo::kDelayFieldNumber;
const int IndTerStatisticsInfo_AdvanceInfo::kJitterFieldNumber;
const int IndTerStatisticsInfo_AdvanceInfo::kLossFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_AdvanceInfo::IndTerStatisticsInfo_AdvanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
}

void IndTerStatisticsInfo_AdvanceInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo_AdvanceInfo::IndTerStatisticsInfo_AdvanceInfo(const IndTerStatisticsInfo_AdvanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
}

void IndTerStatisticsInfo_AdvanceInfo::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0u;
  jitter_ = 0u;
  loss_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_AdvanceInfo::~IndTerStatisticsInfo_AdvanceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_AdvanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo_AdvanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_AdvanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_AdvanceInfo_descriptor_;
}

const IndTerStatisticsInfo_AdvanceInfo& IndTerStatisticsInfo_AdvanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_AdvanceInfo::default_instance_ = NULL;

IndTerStatisticsInfo_AdvanceInfo* IndTerStatisticsInfo_AdvanceInfo::New() const {
  return new IndTerStatisticsInfo_AdvanceInfo;
}

void IndTerStatisticsInfo_AdvanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_AdvanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delay_, loss_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_AdvanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jitter;
        break;
      }

      // optional uint32 jitter = 2;
      case 2: {
        if (tag == 16) {
         parse_jitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
          set_has_jitter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loss;
        break;
      }

      // optional uint32 loss = 3;
      case 3: {
        if (tag == 24) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_AdvanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jitter(), output);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_AdvanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  // optional uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  // optional uint32 jitter = 2;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jitter(), target);
  }

  // optional uint32 loss = 3;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.AdvanceInfo)
  return target;
}

int IndTerStatisticsInfo_AdvanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 jitter = 2;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

    // optional uint32 loss = 3;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_AdvanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_AdvanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_AdvanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_AdvanceInfo::MergeFrom(const IndTerStatisticsInfo_AdvanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_jitter()) {
      set_jitter(from.jitter());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_AdvanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_AdvanceInfo::CopyFrom(const IndTerStatisticsInfo_AdvanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_AdvanceInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_AdvanceInfo::Swap(IndTerStatisticsInfo_AdvanceInfo* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(jitter_, other->jitter_);
    std::swap(loss_, other->loss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_AdvanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_AdvanceInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_AdvanceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_BaseInfo::kFormatFieldNumber;
const int IndTerStatisticsInfo_BaseInfo::kBitrateFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_BaseInfo::IndTerStatisticsInfo_BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.BaseInfo)
}

void IndTerStatisticsInfo_BaseInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo_BaseInfo::IndTerStatisticsInfo_BaseInfo(const IndTerStatisticsInfo_BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.BaseInfo)
}

void IndTerStatisticsInfo_BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  format_ = 0u;
  bitrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_BaseInfo::~IndTerStatisticsInfo_BaseInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_BaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo_BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_BaseInfo_descriptor_;
}

const IndTerStatisticsInfo_BaseInfo& IndTerStatisticsInfo_BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_BaseInfo::default_instance_ = NULL;

IndTerStatisticsInfo_BaseInfo* IndTerStatisticsInfo_BaseInfo::New() const {
  return new IndTerStatisticsInfo_BaseInfo;
}

void IndTerStatisticsInfo_BaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_BaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(format_, bitrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 format = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bitrate;
        break;
      }

      // optional uint32 bitrate = 2;
      case 2: {
        if (tag == 16) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format(), output);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.BaseInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  // optional uint32 format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format(), target);
  }

  // optional uint32 bitrate = 2;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bitrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.BaseInfo)
  return target;
}

int IndTerStatisticsInfo_BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format());
    }

    // optional uint32 bitrate = 2;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_BaseInfo::MergeFrom(const IndTerStatisticsInfo_BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_BaseInfo::CopyFrom(const IndTerStatisticsInfo_BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_BaseInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_BaseInfo::Swap(IndTerStatisticsInfo_BaseInfo* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_BaseInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_BaseInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_AudioInfo::kAtypeFieldNumber;
const int IndTerStatisticsInfo_AudioInfo::kAtersuidFieldNumber;
const int IndTerStatisticsInfo_AudioInfo::kAteraliasFieldNumber;
const int IndTerStatisticsInfo_AudioInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfo_AudioInfo::kAdvinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_AudioInfo::IndTerStatisticsInfo_AudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.AudioInfo)
}

void IndTerStatisticsInfo_AudioInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfo_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfo_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::default_instance());
}

IndTerStatisticsInfo_AudioInfo::IndTerStatisticsInfo_AudioInfo(const IndTerStatisticsInfo_AudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.AudioInfo)
}

void IndTerStatisticsInfo_AudioInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  atype_ = 0u;
  atersuid_ = 0u;
  ateralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_AudioInfo::~IndTerStatisticsInfo_AudioInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_AudioInfo::SharedDtor() {
  if (ateralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ateralias_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfo_AudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_AudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_AudioInfo_descriptor_;
}

const IndTerStatisticsInfo_AudioInfo& IndTerStatisticsInfo_AudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_AudioInfo* IndTerStatisticsInfo_AudioInfo::default_instance_ = NULL;

IndTerStatisticsInfo_AudioInfo* IndTerStatisticsInfo_AudioInfo::New() const {
  return new IndTerStatisticsInfo_AudioInfo;
}

void IndTerStatisticsInfo_AudioInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_AudioInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(atype_, atersuid_);
    if (has_ateralias()) {
      if (ateralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ateralias_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfo_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_AudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atype_)));
          set_has_atype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_atersuid;
        break;
      }

      // optional uint32 atersuid = 2;
      case 2: {
        if (tag == 16) {
         parse_atersuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atersuid_)));
          set_has_atersuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ateralias;
        break;
      }

      // optional string ateralias = 3;
      case 3: {
        if (tag == 26) {
         parse_ateralias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ateralias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ateralias().data(), this->ateralias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ateralias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_AudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atype(), output);
  }

  // optional uint32 atersuid = 2;
  if (has_atersuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atersuid(), output);
  }

  // optional string ateralias = 3;
  if (has_ateralias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ateralias().data(), this->ateralias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ateralias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ateralias(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->advinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.AudioInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_AudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  // optional uint32 atype = 1;
  if (has_atype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atype(), target);
  }

  // optional uint32 atersuid = 2;
  if (has_atersuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atersuid(), target);
  }

  // optional string ateralias = 3;
  if (has_ateralias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ateralias().data(), this->ateralias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ateralias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ateralias(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->advinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.AudioInfo)
  return target;
}

int IndTerStatisticsInfo_AudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atype = 1;
    if (has_atype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atype());
    }

    // optional uint32 atersuid = 2;
    if (has_atersuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atersuid());
    }

    // optional string ateralias = 3;
    if (has_ateralias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ateralias());
    }

    // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_AudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_AudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_AudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_AudioInfo::MergeFrom(const IndTerStatisticsInfo_AudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atype()) {
      set_atype(from.atype());
    }
    if (from.has_atersuid()) {
      set_atersuid(from.atersuid());
    }
    if (from.has_ateralias()) {
      set_ateralias(from.ateralias());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfo_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_AudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_AudioInfo::CopyFrom(const IndTerStatisticsInfo_AudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_AudioInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_AudioInfo::Swap(IndTerStatisticsInfo_AudioInfo* other) {
  if (other != this) {
    std::swap(atype_, other->atype_);
    std::swap(atersuid_, other->atersuid_);
    std::swap(ateralias_, other->ateralias_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_AudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_AudioInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_AudioInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_VideoInfo::kVtypeFieldNumber;
const int IndTerStatisticsInfo_VideoInfo::kVtersuidFieldNumber;
const int IndTerStatisticsInfo_VideoInfo::kVteraliasFieldNumber;
const int IndTerStatisticsInfo_VideoInfo::kBaseinfoFieldNumber;
const int IndTerStatisticsInfo_VideoInfo::kAdvinfoFieldNumber;
const int IndTerStatisticsInfo_VideoInfo::kFrameinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_VideoInfo::IndTerStatisticsInfo_VideoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.VideoInfo)
}

void IndTerStatisticsInfo_VideoInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfo_BaseInfo*>(&::SRMsgs::IndTerStatisticsInfo_BaseInfo::default_instance());
  advinfo_ = const_cast< ::SRMsgs::IndTerStatisticsInfo_AdvanceInfo*>(&::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::default_instance());
}

IndTerStatisticsInfo_VideoInfo::IndTerStatisticsInfo_VideoInfo(const IndTerStatisticsInfo_VideoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.VideoInfo)
}

void IndTerStatisticsInfo_VideoInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vtype_ = 0u;
  vtersuid_ = 0u;
  vteralias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  advinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_VideoInfo::~IndTerStatisticsInfo_VideoInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_VideoInfo::SharedDtor() {
  if (vteralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vteralias_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete advinfo_;
  }
}

void IndTerStatisticsInfo_VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_VideoInfo_descriptor_;
}

const IndTerStatisticsInfo_VideoInfo& IndTerStatisticsInfo_VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_VideoInfo* IndTerStatisticsInfo_VideoInfo::default_instance_ = NULL;

IndTerStatisticsInfo_VideoInfo* IndTerStatisticsInfo_VideoInfo::New() const {
  return new IndTerStatisticsInfo_VideoInfo;
}

void IndTerStatisticsInfo_VideoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_VideoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(vtype_, vtersuid_);
    if (has_vteralias()) {
      if (vteralias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vteralias_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::SRMsgs::IndTerStatisticsInfo_BaseInfo::Clear();
    }
    if (has_advinfo()) {
      if (advinfo_ != NULL) advinfo_->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frameinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vtersuid;
        break;
      }

      // optional uint32 vtersuid = 2;
      case 2: {
        if (tag == 16) {
         parse_vtersuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vtersuid_)));
          set_has_vtersuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vteralias;
        break;
      }

      // optional string vteralias = 3;
      case 3: {
        if (tag == 26) {
         parse_vteralias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vteralias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vteralias().data(), this->vteralias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vteralias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baseinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_advinfo;
        break;
      }

      // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_advinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frameinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_frameinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frameinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vtype(), output);
  }

  // optional uint32 vtersuid = 2;
  if (has_vtersuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vtersuid(), output);
  }

  // optional string vteralias = 3;
  if (has_vteralias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vteralias().data(), this->vteralias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vteralias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vteralias(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->baseinfo(), output);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  if (has_advinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->advinfo(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frameinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.VideoInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_VideoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  // optional uint32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vtype(), target);
  }

  // optional uint32 vtersuid = 2;
  if (has_vtersuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vtersuid(), target);
  }

  // optional string vteralias = 3;
  if (has_vteralias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vteralias().data(), this->vteralias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vteralias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vteralias(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->baseinfo(), target);
  }

  // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
  if (has_advinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->advinfo(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
  for (int i = 0; i < this->frameinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frameinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.VideoInfo)
  return target;
}

int IndTerStatisticsInfo_VideoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vtype());
    }

    // optional uint32 vtersuid = 2;
    if (has_vtersuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vtersuid());
    }

    // optional string vteralias = 3;
    if (has_vteralias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vteralias());
    }

    // optional .SRMsgs.IndTerStatisticsInfo.BaseInfo baseinfo = 4;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .SRMsgs.IndTerStatisticsInfo.AdvanceInfo advinfo = 5;
    if (has_advinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advinfo());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfo.FrameInfo frameinfo = 6;
  total_size += 1 * this->frameinfo_size();
  for (int i = 0; i < this->frameinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frameinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_VideoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_VideoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_VideoInfo::MergeFrom(const IndTerStatisticsInfo_VideoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  frameinfo_.MergeFrom(from.frameinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_vtersuid()) {
      set_vtersuid(from.vtersuid());
    }
    if (from.has_vteralias()) {
      set_vteralias(from.vteralias());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::SRMsgs::IndTerStatisticsInfo_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_advinfo()) {
      mutable_advinfo()->::SRMsgs::IndTerStatisticsInfo_AdvanceInfo::MergeFrom(from.advinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_VideoInfo::CopyFrom(const IndTerStatisticsInfo_VideoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_VideoInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_VideoInfo::Swap(IndTerStatisticsInfo_VideoInfo* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(vtersuid_, other->vtersuid_);
    std::swap(vteralias_, other->vteralias_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(advinfo_, other->advinfo_);
    frameinfo_.Swap(&other->frameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_VideoInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_VideoInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_XfeInfo::kAinfoFieldNumber;
const int IndTerStatisticsInfo_XfeInfo::kVinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_XfeInfo::IndTerStatisticsInfo_XfeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.XfeInfo)
}

void IndTerStatisticsInfo_XfeInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo_XfeInfo::IndTerStatisticsInfo_XfeInfo(const IndTerStatisticsInfo_XfeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.XfeInfo)
}

void IndTerStatisticsInfo_XfeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_XfeInfo::~IndTerStatisticsInfo_XfeInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_XfeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo_XfeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_XfeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_XfeInfo_descriptor_;
}

const IndTerStatisticsInfo_XfeInfo& IndTerStatisticsInfo_XfeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_XfeInfo::default_instance_ = NULL;

IndTerStatisticsInfo_XfeInfo* IndTerStatisticsInfo_XfeInfo::New() const {
  return new IndTerStatisticsInfo_XfeInfo;
}

void IndTerStatisticsInfo_XfeInfo::Clear() {
  ainfo_.Clear();
  vinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_XfeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ainfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ainfo;
        if (input->ExpectTag(18)) goto parse_vinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_vinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_XfeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ainfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.XfeInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_XfeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  // repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
  for (int i = 0; i < this->ainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ainfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
  for (int i = 0; i < this->vinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.XfeInfo)
  return target;
}

int IndTerStatisticsInfo_XfeInfo::ByteSize() const {
  int total_size = 0;

  // repeated .SRMsgs.IndTerStatisticsInfo.AudioInfo ainfo = 1;
  total_size += 1 * this->ainfo_size();
  for (int i = 0; i < this->ainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ainfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.VideoInfo vinfo = 2;
  total_size += 1 * this->vinfo_size();
  for (int i = 0; i < this->vinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_XfeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_XfeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_XfeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_XfeInfo::MergeFrom(const IndTerStatisticsInfo_XfeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ainfo_.MergeFrom(from.ainfo_);
  vinfo_.MergeFrom(from.vinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_XfeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_XfeInfo::CopyFrom(const IndTerStatisticsInfo_XfeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_XfeInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_XfeInfo::Swap(IndTerStatisticsInfo_XfeInfo* other) {
  if (other != this) {
    ainfo_.Swap(&other->ainfo_);
    vinfo_.Swap(&other->vinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_XfeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_XfeInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_XfeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo_TerStatisticsInfo::kSuidFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kAliasFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kTxinfoFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kRxinfoFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kFromtypeFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kTermtypeFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kTxbweresultFieldNumber;
const int IndTerStatisticsInfo_TerStatisticsInfo::kProducttypeFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo_TerStatisticsInfo::IndTerStatisticsInfo_TerStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
}

void IndTerStatisticsInfo_TerStatisticsInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo_TerStatisticsInfo::IndTerStatisticsInfo_TerStatisticsInfo(const IndTerStatisticsInfo_TerStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
}

void IndTerStatisticsInfo_TerStatisticsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suid_ = 0u;
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromtype_ = 0u;
  termtype_ = 0u;
  txbweresult_ = 0u;
  producttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo_TerStatisticsInfo::~IndTerStatisticsInfo_TerStatisticsInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  SharedDtor();
}

void IndTerStatisticsInfo_TerStatisticsInfo::SharedDtor() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo_TerStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo_TerStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_TerStatisticsInfo_descriptor_;
}

const IndTerStatisticsInfo_TerStatisticsInfo& IndTerStatisticsInfo_TerStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo_TerStatisticsInfo* IndTerStatisticsInfo_TerStatisticsInfo::default_instance_ = NULL;

IndTerStatisticsInfo_TerStatisticsInfo* IndTerStatisticsInfo_TerStatisticsInfo::New() const {
  return new IndTerStatisticsInfo_TerStatisticsInfo;
}

void IndTerStatisticsInfo_TerStatisticsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndTerStatisticsInfo_TerStatisticsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(suid_, fromtype_);
    ZR_(termtype_, producttype_);
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  txinfo_.Clear();
  rxinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo_TerStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 suid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alias;
        break;
      }

      // optional string alias = 2;
      case 2: {
        if (tag == 18) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_txinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_txinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txinfo;
        if (input->ExpectTag(34)) goto parse_rxinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_rxinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rxinfo;
        if (input->ExpectTag(40)) goto parse_fromtype;
        break;
      }

      // optional uint32 fromtype = 5;
      case 5: {
        if (tag == 40) {
         parse_fromtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_termtype;
        break;
      }

      // optional uint32 termtype = 6;
      case 6: {
        if (tag == 48) {
         parse_termtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_txbweresult;
        break;
      }

      // optional uint32 txbweresult = 7;
      case 7: {
        if (tag == 56) {
         parse_txbweresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txbweresult_)));
          set_has_txbweresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_producttype;
        break;
      }

      // optional uint32 producttype = 8;
      case 8: {
        if (tag == 64) {
         parse_producttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo_TerStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->suid(), output);
  }

  // optional string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
  for (int i = 0; i < this->txinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->txinfo(i), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rxinfo(i), output);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fromtype(), output);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->termtype(), output);
  }

  // optional uint32 txbweresult = 7;
  if (has_txbweresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->txbweresult(), output);
  }

  // optional uint32 producttype = 8;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->producttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo_TerStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  // optional uint32 suid = 1;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->suid(), target);
  }

  // optional string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
  for (int i = 0; i < this->txinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->txinfo(i), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
  for (int i = 0; i < this->rxinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rxinfo(i), target);
  }

  // optional uint32 fromtype = 5;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fromtype(), target);
  }

  // optional uint32 termtype = 6;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->termtype(), target);
  }

  // optional uint32 txbweresult = 7;
  if (has_txbweresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->txbweresult(), target);
  }

  // optional uint32 producttype = 8;
  if (has_producttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->producttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo)
  return target;
}

int IndTerStatisticsInfo_TerStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 suid = 1;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional string alias = 2;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional uint32 fromtype = 5;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromtype());
    }

    // optional uint32 termtype = 6;
    if (has_termtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->termtype());
    }

    // optional uint32 txbweresult = 7;
    if (has_txbweresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txbweresult());
    }

    // optional uint32 producttype = 8;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo txinfo = 3;
  total_size += 1 * this->txinfo_size();
  for (int i = 0; i < this->txinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txinfo(i));
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.XfeInfo rxinfo = 4;
  total_size += 1 * this->rxinfo_size();
  for (int i = 0; i < this->rxinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rxinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo_TerStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo_TerStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo_TerStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo_TerStatisticsInfo::MergeFrom(const IndTerStatisticsInfo_TerStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  txinfo_.MergeFrom(from.txinfo_);
  rxinfo_.MergeFrom(from.rxinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_txbweresult()) {
      set_txbweresult(from.txbweresult());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo_TerStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo_TerStatisticsInfo::CopyFrom(const IndTerStatisticsInfo_TerStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo_TerStatisticsInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo_TerStatisticsInfo::Swap(IndTerStatisticsInfo_TerStatisticsInfo* other) {
  if (other != this) {
    std::swap(suid_, other->suid_);
    std::swap(alias_, other->alias_);
    txinfo_.Swap(&other->txinfo_);
    rxinfo_.Swap(&other->rxinfo_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(termtype_, other->termtype_);
    std::swap(txbweresult_, other->txbweresult_);
    std::swap(producttype_, other->producttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo_TerStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_TerStatisticsInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_TerStatisticsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndTerStatisticsInfo::kDeviceidFieldNumber;
const int IndTerStatisticsInfo::kTokenFieldNumber;
const int IndTerStatisticsInfo::kConfidFieldNumber;
const int IndTerStatisticsInfo::kTsinfoFieldNumber;
#endif  // !_MSC_VER

IndTerStatisticsInfo::IndTerStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndTerStatisticsInfo)
}

void IndTerStatisticsInfo::InitAsDefaultInstance() {
}

IndTerStatisticsInfo::IndTerStatisticsInfo(const IndTerStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndTerStatisticsInfo)
}

void IndTerStatisticsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndTerStatisticsInfo::~IndTerStatisticsInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndTerStatisticsInfo)
  SharedDtor();
}

void IndTerStatisticsInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndTerStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndTerStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndTerStatisticsInfo_descriptor_;
}

const IndTerStatisticsInfo& IndTerStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndTerStatisticsInfo* IndTerStatisticsInfo::default_instance_ = NULL;

IndTerStatisticsInfo* IndTerStatisticsInfo::New() const {
  return new IndTerStatisticsInfo;
}

void IndTerStatisticsInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    confid_ = GOOGLE_ULONGLONG(0);
  }
  tsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndTerStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndTerStatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        break;
      }

      // repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_tsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndTerStatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndTerStatisticsInfo)
  return false;
#undef DO_
}

void IndTerStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndTerStatisticsInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndTerStatisticsInfo)
}

::google::protobuf::uint8* IndTerStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndTerStatisticsInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
  for (int i = 0; i < this->tsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndTerStatisticsInfo)
  return target;
}

int IndTerStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

  }
  // repeated .SRMsgs.IndTerStatisticsInfo.TerStatisticsInfo tsinfo = 4;
  total_size += 1 * this->tsinfo_size();
  for (int i = 0; i < this->tsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndTerStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndTerStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndTerStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndTerStatisticsInfo::MergeFrom(const IndTerStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tsinfo_.MergeFrom(from.tsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndTerStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndTerStatisticsInfo::CopyFrom(const IndTerStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndTerStatisticsInfo::IsInitialized() const {

  return true;
}

void IndTerStatisticsInfo::Swap(IndTerStatisticsInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    tsinfo_.Swap(&other->tsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndTerStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndTerStatisticsInfo_descriptor_;
  metadata.reflection = IndTerStatisticsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndSubSvrInfoToDevmgr_IPPORTInfo::kInnerFieldNumber;
const int IndSubSvrInfoToDevmgr_IPPORTInfo::kOuterFieldNumber;
const int IndSubSvrInfoToDevmgr_IPPORTInfo::kVpnFieldNumber;
#endif  // !_MSC_VER

IndSubSvrInfoToDevmgr_IPPORTInfo::IndSubSvrInfoToDevmgr_IPPORTInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::InitAsDefaultInstance() {
}

IndSubSvrInfoToDevmgr_IPPORTInfo::IndSubSvrInfoToDevmgr_IPPORTInfo(const IndSubSvrInfoToDevmgr_IPPORTInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrInfoToDevmgr_IPPORTInfo::~IndSubSvrInfoToDevmgr_IPPORTInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  SharedDtor();
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::SharedDtor() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (this != default_instance_) {
  }
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_IPPORTInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_;
}

const IndSubSvrInfoToDevmgr_IPPORTInfo& IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrInfoToDevmgr_IPPORTInfo* IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance_ = NULL;

IndSubSvrInfoToDevmgr_IPPORTInfo* IndSubSvrInfoToDevmgr_IPPORTInfo::New() const {
  return new IndSubSvrInfoToDevmgr_IPPORTInfo;
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_inner()) {
      if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inner_->clear();
      }
    }
    if (has_outer()) {
      if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        outer_->clear();
      }
    }
    if (has_vpn()) {
      if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vpn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrInfoToDevmgr_IPPORTInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inner().data(), this->inner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outer;
        break;
      }

      // optional string outer = 2;
      case 2: {
        if (tag == 18) {
         parse_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outer().data(), this->outer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "outer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vpn;
        break;
      }

      // optional string vpn = 3;
      case 3: {
        if (tag == 26) {
         parse_vpn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vpn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vpn().data(), this->vpn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vpn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  return false;
#undef DO_
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner(), output);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->outer(), output);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vpn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
}

::google::protobuf::uint8* IndSubSvrInfoToDevmgr_IPPORTInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner(), target);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outer(), target);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vpn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo)
  return target;
}

int IndSubSvrInfoToDevmgr_IPPORTInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inner = 1;
    if (has_inner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inner());
    }

    // optional string outer = 2;
    if (has_outer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer());
    }

    // optional string vpn = 3;
    if (has_vpn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vpn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrInfoToDevmgr_IPPORTInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrInfoToDevmgr_IPPORTInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::MergeFrom(const IndSubSvrInfoToDevmgr_IPPORTInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inner()) {
      set_inner(from.inner());
    }
    if (from.has_outer()) {
      set_outer(from.outer());
    }
    if (from.has_vpn()) {
      set_vpn(from.vpn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::CopyFrom(const IndSubSvrInfoToDevmgr_IPPORTInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrInfoToDevmgr_IPPORTInfo::IsInitialized() const {

  return true;
}

void IndSubSvrInfoToDevmgr_IPPORTInfo::Swap(IndSubSvrInfoToDevmgr_IPPORTInfo* other) {
  if (other != this) {
    std::swap(inner_, other->inner_);
    std::swap(outer_, other->outer_);
    std::swap(vpn_, other->vpn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrInfoToDevmgr_IPPORTInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrInfoToDevmgr_IPPORTInfo_descriptor_;
  metadata.reflection = IndSubSvrInfoToDevmgr_IPPORTInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrInfoToDevmgr_ServerInfo::kSvrtypeFieldNumber;
const int IndSubSvrInfoToDevmgr_ServerInfo::kDeviceidFieldNumber;
const int IndSubSvrInfoToDevmgr_ServerInfo::kIpportFieldNumber;
#endif  // !_MSC_VER

IndSubSvrInfoToDevmgr_ServerInfo::IndSubSvrInfoToDevmgr_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
}

void IndSubSvrInfoToDevmgr_ServerInfo::InitAsDefaultInstance() {
  ipport_ = const_cast< ::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo*>(&::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo::default_instance());
}

IndSubSvrInfoToDevmgr_ServerInfo::IndSubSvrInfoToDevmgr_ServerInfo(const IndSubSvrInfoToDevmgr_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
}

void IndSubSvrInfoToDevmgr_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  deviceid_ = 0u;
  ipport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrInfoToDevmgr_ServerInfo::~IndSubSvrInfoToDevmgr_ServerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  SharedDtor();
}

void IndSubSvrInfoToDevmgr_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ipport_;
  }
}

void IndSubSvrInfoToDevmgr_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrInfoToDevmgr_ServerInfo_descriptor_;
}

const IndSubSvrInfoToDevmgr_ServerInfo& IndSubSvrInfoToDevmgr_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrInfoToDevmgr_ServerInfo* IndSubSvrInfoToDevmgr_ServerInfo::default_instance_ = NULL;

IndSubSvrInfoToDevmgr_ServerInfo* IndSubSvrInfoToDevmgr_ServerInfo::New() const {
  return new IndSubSvrInfoToDevmgr_ServerInfo;
}

void IndSubSvrInfoToDevmgr_ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubSvrInfoToDevmgr_ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(svrtype_, deviceid_);
    if (has_ipport()) {
      if (ipport_ != NULL) ipport_->::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrInfoToDevmgr_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipport;
        break;
      }

      // optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
      case 3: {
        if (tag == 26) {
         parse_ipport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  return false;
#undef DO_
}

void IndSubSvrInfoToDevmgr_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  if (has_ipport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ipport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
}

::google::protobuf::uint8* IndSubSvrInfoToDevmgr_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  if (has_ipport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ipport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo)
  return target;
}

int IndSubSvrInfoToDevmgr_ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrtype = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional .SRMsgs.IndSubSvrInfoToDevmgr.IPPORTInfo ipport = 3;
    if (has_ipport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrInfoToDevmgr_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrInfoToDevmgr_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrInfoToDevmgr_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrInfoToDevmgr_ServerInfo::MergeFrom(const IndSubSvrInfoToDevmgr_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_ipport()) {
      mutable_ipport()->::SRMsgs::IndSubSvrInfoToDevmgr_IPPORTInfo::MergeFrom(from.ipport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrInfoToDevmgr_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrInfoToDevmgr_ServerInfo::CopyFrom(const IndSubSvrInfoToDevmgr_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrInfoToDevmgr_ServerInfo::IsInitialized() const {

  return true;
}

void IndSubSvrInfoToDevmgr_ServerInfo::Swap(IndSubSvrInfoToDevmgr_ServerInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(ipport_, other->ipport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrInfoToDevmgr_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrInfoToDevmgr_ServerInfo_descriptor_;
  metadata.reflection = IndSubSvrInfoToDevmgr_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrInfoToDevmgr_DomainInfo::kDomainnameFieldNumber;
const int IndSubSvrInfoToDevmgr_DomainInfo::kLevelFieldNumber;
const int IndSubSvrInfoToDevmgr_DomainInfo::kSvrinfosFieldNumber;
#endif  // !_MSC_VER

IndSubSvrInfoToDevmgr_DomainInfo::IndSubSvrInfoToDevmgr_DomainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
}

void IndSubSvrInfoToDevmgr_DomainInfo::InitAsDefaultInstance() {
}

IndSubSvrInfoToDevmgr_DomainInfo::IndSubSvrInfoToDevmgr_DomainInfo(const IndSubSvrInfoToDevmgr_DomainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
}

void IndSubSvrInfoToDevmgr_DomainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrInfoToDevmgr_DomainInfo::~IndSubSvrInfoToDevmgr_DomainInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  SharedDtor();
}

void IndSubSvrInfoToDevmgr_DomainInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void IndSubSvrInfoToDevmgr_DomainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr_DomainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrInfoToDevmgr_DomainInfo_descriptor_;
}

const IndSubSvrInfoToDevmgr_DomainInfo& IndSubSvrInfoToDevmgr_DomainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrInfoToDevmgr_DomainInfo* IndSubSvrInfoToDevmgr_DomainInfo::default_instance_ = NULL;

IndSubSvrInfoToDevmgr_DomainInfo* IndSubSvrInfoToDevmgr_DomainInfo::New() const {
  return new IndSubSvrInfoToDevmgr_DomainInfo;
}

void IndSubSvrInfoToDevmgr_DomainInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    level_ = 0;
  }
  svrinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrInfoToDevmgr_DomainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional sint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        break;
      }

      // repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_svrinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  return false;
#undef DO_
}

void IndSubSvrInfoToDevmgr_DomainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domainname(), output);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->svrinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
}

::google::protobuf::uint8* IndSubSvrInfoToDevmgr_DomainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->svrinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo)
  return target;
}

int IndSubSvrInfoToDevmgr_DomainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainname = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  total_size += 1 * this->svrinfos_size();
  for (int i = 0; i < this->svrinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrInfoToDevmgr_DomainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrInfoToDevmgr_DomainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrInfoToDevmgr_DomainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrInfoToDevmgr_DomainInfo::MergeFrom(const IndSubSvrInfoToDevmgr_DomainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrinfos_.MergeFrom(from.svrinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrInfoToDevmgr_DomainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrInfoToDevmgr_DomainInfo::CopyFrom(const IndSubSvrInfoToDevmgr_DomainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrInfoToDevmgr_DomainInfo::IsInitialized() const {

  return true;
}

void IndSubSvrInfoToDevmgr_DomainInfo::Swap(IndSubSvrInfoToDevmgr_DomainInfo* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    std::swap(level_, other->level_);
    svrinfos_.Swap(&other->svrinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrInfoToDevmgr_DomainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrInfoToDevmgr_DomainInfo_descriptor_;
  metadata.reflection = IndSubSvrInfoToDevmgr_DomainInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrInfoToDevmgr::kDeviceidFieldNumber;
const int IndSubSvrInfoToDevmgr::kTokenFieldNumber;
const int IndSubSvrInfoToDevmgr::kAddordelFieldNumber;
const int IndSubSvrInfoToDevmgr::kDomaininfosFieldNumber;
#endif  // !_MSC_VER

IndSubSvrInfoToDevmgr::IndSubSvrInfoToDevmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrInfoToDevmgr)
}

void IndSubSvrInfoToDevmgr::InitAsDefaultInstance() {
}

IndSubSvrInfoToDevmgr::IndSubSvrInfoToDevmgr(const IndSubSvrInfoToDevmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrInfoToDevmgr)
}

void IndSubSvrInfoToDevmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrInfoToDevmgr::~IndSubSvrInfoToDevmgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrInfoToDevmgr)
  SharedDtor();
}

void IndSubSvrInfoToDevmgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndSubSvrInfoToDevmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrInfoToDevmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrInfoToDevmgr_descriptor_;
}

const IndSubSvrInfoToDevmgr& IndSubSvrInfoToDevmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrInfoToDevmgr* IndSubSvrInfoToDevmgr::default_instance_ = NULL;

IndSubSvrInfoToDevmgr* IndSubSvrInfoToDevmgr::New() const {
  return new IndSubSvrInfoToDevmgr;
}

void IndSubSvrInfoToDevmgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubSvrInfoToDevmgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, addordel_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  domaininfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrInfoToDevmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrInfoToDevmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 3;
      case 3: {
        if (tag == 24) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        break;
      }

      // repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
      case 4: {
        if (tag == 34) {
         parse_domaininfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domaininfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrInfoToDevmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrInfoToDevmgr)
  return false;
#undef DO_
}

void IndSubSvrInfoToDevmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addordel(), output);
  }

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->domaininfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrInfoToDevmgr)
}

::google::protobuf::uint8* IndSubSvrInfoToDevmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addordel(), target);
  }

  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->domaininfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrInfoToDevmgr)
  return target;
}

int IndSubSvrInfoToDevmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 addordel = 3;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  // repeated .SRMsgs.IndSubSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  total_size += 1 * this->domaininfos_size();
  for (int i = 0; i < this->domaininfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domaininfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrInfoToDevmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrInfoToDevmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrInfoToDevmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrInfoToDevmgr::MergeFrom(const IndSubSvrInfoToDevmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  domaininfos_.MergeFrom(from.domaininfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrInfoToDevmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrInfoToDevmgr::CopyFrom(const IndSubSvrInfoToDevmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrInfoToDevmgr::IsInitialized() const {

  return true;
}

void IndSubSvrInfoToDevmgr::Swap(IndSubSvrInfoToDevmgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(addordel_, other->addordel_);
    domaininfos_.Swap(&other->domaininfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrInfoToDevmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrInfoToDevmgr_descriptor_;
  metadata.reflection = IndSubSvrInfoToDevmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndSubCompCapInfoToDevmgr_LicenceInfo::kLicencetypeFieldNumber;
const int IndSubCompCapInfoToDevmgr_LicenceInfo::kLicencenumFieldNumber;
const int IndSubCompCapInfoToDevmgr_LicenceInfo::kStarttimeFieldNumber;
const int IndSubCompCapInfoToDevmgr_LicenceInfo::kExptimeFieldNumber;
#endif  // !_MSC_VER

IndSubCompCapInfoToDevmgr_LicenceInfo::IndSubCompCapInfoToDevmgr_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::InitAsDefaultInstance() {
}

IndSubCompCapInfoToDevmgr_LicenceInfo::IndSubCompCapInfoToDevmgr_LicenceInfo(const IndSubCompCapInfoToDevmgr_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubCompCapInfoToDevmgr_LicenceInfo::~IndSubCompCapInfoToDevmgr_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  SharedDtor();
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exptime_;
  }
  if (this != default_instance_) {
  }
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_;
}

const IndSubCompCapInfoToDevmgr_LicenceInfo& IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubCompCapInfoToDevmgr_LicenceInfo* IndSubCompCapInfoToDevmgr_LicenceInfo::default_instance_ = NULL;

IndSubCompCapInfoToDevmgr_LicenceInfo* IndSubCompCapInfoToDevmgr_LicenceInfo::New() const {
  return new IndSubCompCapInfoToDevmgr_LicenceInfo;
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubCompCapInfoToDevmgr_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(licencetype_, licencenum_);
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_exptime()) {
      if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exptime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubCompCapInfoToDevmgr_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_starttime;
        break;
      }

      // optional string starttime = 3;
      case 3: {
        if (tag == 26) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exptime;
        break;
      }

      // optional string exptime = 4;
      case 4: {
        if (tag == 34) {
         parse_exptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exptime().data(), this->exptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  return false;
#undef DO_
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
}

::google::protobuf::uint8* IndSubCompCapInfoToDevmgr_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo)
  return target;
}

int IndSubCompCapInfoToDevmgr_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

    // optional string starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string exptime = 4;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubCompCapInfoToDevmgr_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubCompCapInfoToDevmgr_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::MergeFrom(const IndSubCompCapInfoToDevmgr_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::CopyFrom(const IndSubCompCapInfoToDevmgr_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubCompCapInfoToDevmgr_LicenceInfo::IsInitialized() const {

  return true;
}

void IndSubCompCapInfoToDevmgr_LicenceInfo::Swap(IndSubCompCapInfoToDevmgr_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(starttime_, other->starttime_);
    std::swap(exptime_, other->exptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubCompCapInfoToDevmgr_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubCompCapInfoToDevmgr_LicenceInfo_descriptor_;
  metadata.reflection = IndSubCompCapInfoToDevmgr_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubCompCapInfoToDevmgr_CompanyInfo::kCompanyidFieldNumber;
const int IndSubCompCapInfoToDevmgr_CompanyInfo::kCompanynameFieldNumber;
const int IndSubCompCapInfoToDevmgr_CompanyInfo::kTotallicinfosFieldNumber;
#endif  // !_MSC_VER

IndSubCompCapInfoToDevmgr_CompanyInfo::IndSubCompCapInfoToDevmgr_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::InitAsDefaultInstance() {
}

IndSubCompCapInfoToDevmgr_CompanyInfo::IndSubCompCapInfoToDevmgr_CompanyInfo(const IndSubCompCapInfoToDevmgr_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubCompCapInfoToDevmgr_CompanyInfo::~IndSubCompCapInfoToDevmgr_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  SharedDtor();
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
  }
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_;
}

const IndSubCompCapInfoToDevmgr_CompanyInfo& IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubCompCapInfoToDevmgr_CompanyInfo* IndSubCompCapInfoToDevmgr_CompanyInfo::default_instance_ = NULL;

IndSubCompCapInfoToDevmgr_CompanyInfo* IndSubCompCapInfoToDevmgr_CompanyInfo::New() const {
  return new IndSubCompCapInfoToDevmgr_CompanyInfo;
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
  }
  totallicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubCompCapInfoToDevmgr_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        break;
      }

      // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_totallicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totallicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  return false;
#undef DO_
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totallicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
}

::google::protobuf::uint8* IndSubCompCapInfoToDevmgr_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totallicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo)
  return target;
}

int IndSubCompCapInfoToDevmgr_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

  }
  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  total_size += 1 * this->totallicinfos_size();
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totallicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubCompCapInfoToDevmgr_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubCompCapInfoToDevmgr_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::MergeFrom(const IndSubCompCapInfoToDevmgr_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  totallicinfos_.MergeFrom(from.totallicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::CopyFrom(const IndSubCompCapInfoToDevmgr_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubCompCapInfoToDevmgr_CompanyInfo::IsInitialized() const {

  return true;
}

void IndSubCompCapInfoToDevmgr_CompanyInfo::Swap(IndSubCompCapInfoToDevmgr_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    totallicinfos_.Swap(&other->totallicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubCompCapInfoToDevmgr_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubCompCapInfoToDevmgr_CompanyInfo_descriptor_;
  metadata.reflection = IndSubCompCapInfoToDevmgr_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubCompCapInfoToDevmgr::kDeviceidFieldNumber;
const int IndSubCompCapInfoToDevmgr::kTokenFieldNumber;
const int IndSubCompCapInfoToDevmgr::kOperationtypeFieldNumber;
const int IndSubCompCapInfoToDevmgr::kCompinfosFieldNumber;
#endif  // !_MSC_VER

IndSubCompCapInfoToDevmgr::IndSubCompCapInfoToDevmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubCompCapInfoToDevmgr)
}

void IndSubCompCapInfoToDevmgr::InitAsDefaultInstance() {
}

IndSubCompCapInfoToDevmgr::IndSubCompCapInfoToDevmgr(const IndSubCompCapInfoToDevmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubCompCapInfoToDevmgr)
}

void IndSubCompCapInfoToDevmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operationtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubCompCapInfoToDevmgr::~IndSubCompCapInfoToDevmgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubCompCapInfoToDevmgr)
  SharedDtor();
}

void IndSubCompCapInfoToDevmgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndSubCompCapInfoToDevmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubCompCapInfoToDevmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubCompCapInfoToDevmgr_descriptor_;
}

const IndSubCompCapInfoToDevmgr& IndSubCompCapInfoToDevmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubCompCapInfoToDevmgr* IndSubCompCapInfoToDevmgr::default_instance_ = NULL;

IndSubCompCapInfoToDevmgr* IndSubCompCapInfoToDevmgr::New() const {
  return new IndSubCompCapInfoToDevmgr;
}

void IndSubCompCapInfoToDevmgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubCompCapInfoToDevmgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, operationtype_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubCompCapInfoToDevmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubCompCapInfoToDevmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operationtype;
        break;
      }

      // optional uint32 operationtype = 3;
      case 3: {
        if (tag == 24) {
         parse_operationtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operationtype_)));
          set_has_operationtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubCompCapInfoToDevmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubCompCapInfoToDevmgr)
  return false;
#undef DO_
}

void IndSubCompCapInfoToDevmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubCompCapInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 operationtype = 3;
  if (has_operationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operationtype(), output);
  }

  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubCompCapInfoToDevmgr)
}

::google::protobuf::uint8* IndSubCompCapInfoToDevmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubCompCapInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 operationtype = 3;
  if (has_operationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operationtype(), target);
  }

  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubCompCapInfoToDevmgr)
  return target;
}

int IndSubCompCapInfoToDevmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 operationtype = 3;
    if (has_operationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operationtype());
    }

  }
  // repeated .SRMsgs.IndSubCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubCompCapInfoToDevmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubCompCapInfoToDevmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubCompCapInfoToDevmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubCompCapInfoToDevmgr::MergeFrom(const IndSubCompCapInfoToDevmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_operationtype()) {
      set_operationtype(from.operationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubCompCapInfoToDevmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubCompCapInfoToDevmgr::CopyFrom(const IndSubCompCapInfoToDevmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubCompCapInfoToDevmgr::IsInitialized() const {

  return true;
}

void IndSubCompCapInfoToDevmgr::Swap(IndSubCompCapInfoToDevmgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(operationtype_, other->operationtype_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubCompCapInfoToDevmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubCompCapInfoToDevmgr_descriptor_;
  metadata.reflection = IndSubCompCapInfoToDevmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndSubSvrHeartTodev_LoadInfo::kTernumFieldNumber;
const int IndSubSvrHeartTodev_LoadInfo::kTxFieldNumber;
const int IndSubSvrHeartTodev_LoadInfo::kRxFieldNumber;
const int IndSubSvrHeartTodev_LoadInfo::kCpuFieldNumber;
#endif  // !_MSC_VER

IndSubSvrHeartTodev_LoadInfo::IndSubSvrHeartTodev_LoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
}

void IndSubSvrHeartTodev_LoadInfo::InitAsDefaultInstance() {
}

IndSubSvrHeartTodev_LoadInfo::IndSubSvrHeartTodev_LoadInfo(const IndSubSvrHeartTodev_LoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
}

void IndSubSvrHeartTodev_LoadInfo::SharedCtor() {
  _cached_size_ = 0;
  ternum_ = 0u;
  tx_ = 0u;
  rx_ = 0u;
  cpu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrHeartTodev_LoadInfo::~IndSubSvrHeartTodev_LoadInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  SharedDtor();
}

void IndSubSvrHeartTodev_LoadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndSubSvrHeartTodev_LoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_LoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrHeartTodev_LoadInfo_descriptor_;
}

const IndSubSvrHeartTodev_LoadInfo& IndSubSvrHeartTodev_LoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrHeartTodev_LoadInfo* IndSubSvrHeartTodev_LoadInfo::default_instance_ = NULL;

IndSubSvrHeartTodev_LoadInfo* IndSubSvrHeartTodev_LoadInfo::New() const {
  return new IndSubSvrHeartTodev_LoadInfo;
}

void IndSubSvrHeartTodev_LoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubSvrHeartTodev_LoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ternum_, cpu_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrHeartTodev_LoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ternum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternum_)));
          set_has_ternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tx;
        break;
      }

      // optional uint32 tx = 2;
      case 2: {
        if (tag == 16) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rx;
        break;
      }

      // optional uint32 rx = 3;
      case 3: {
        if (tag == 24) {
         parse_rx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_)));
          set_has_rx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpu;
        break;
      }

      // optional uint32 cpu = 4;
      case 4: {
        if (tag == 32) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  return false;
#undef DO_
}

void IndSubSvrHeartTodev_LoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ternum(), output);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx(), output);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx(), output);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
}

::google::protobuf::uint8* IndSubSvrHeartTodev_LoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ternum(), target);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx(), target);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx(), target);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrHeartTodev.LoadInfo)
  return target;
}

int IndSubSvrHeartTodev_LoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ternum = 1;
    if (has_ternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternum());
    }

    // optional uint32 tx = 2;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx());
    }

    // optional uint32 rx = 3;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx());
    }

    // optional uint32 cpu = 4;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrHeartTodev_LoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrHeartTodev_LoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrHeartTodev_LoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrHeartTodev_LoadInfo::MergeFrom(const IndSubSvrHeartTodev_LoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ternum()) {
      set_ternum(from.ternum());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrHeartTodev_LoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrHeartTodev_LoadInfo::CopyFrom(const IndSubSvrHeartTodev_LoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrHeartTodev_LoadInfo::IsInitialized() const {

  return true;
}

void IndSubSvrHeartTodev_LoadInfo::Swap(IndSubSvrHeartTodev_LoadInfo* other) {
  if (other != this) {
    std::swap(ternum_, other->ternum_);
    std::swap(tx_, other->tx_);
    std::swap(rx_, other->rx_);
    std::swap(cpu_, other->cpu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrHeartTodev_LoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrHeartTodev_LoadInfo_descriptor_;
  metadata.reflection = IndSubSvrHeartTodev_LoadInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrHeartTodev_ServerInfo::kSvrtypeFieldNumber;
const int IndSubSvrHeartTodev_ServerInfo::kDeviceidFieldNumber;
const int IndSubSvrHeartTodev_ServerInfo::kLoadinfosFieldNumber;
#endif  // !_MSC_VER

IndSubSvrHeartTodev_ServerInfo::IndSubSvrHeartTodev_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
}

void IndSubSvrHeartTodev_ServerInfo::InitAsDefaultInstance() {
  loadinfos_ = const_cast< ::SRMsgs::IndSubSvrHeartTodev_LoadInfo*>(&::SRMsgs::IndSubSvrHeartTodev_LoadInfo::default_instance());
}

IndSubSvrHeartTodev_ServerInfo::IndSubSvrHeartTodev_ServerInfo(const IndSubSvrHeartTodev_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
}

void IndSubSvrHeartTodev_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  deviceid_ = 0u;
  loadinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrHeartTodev_ServerInfo::~IndSubSvrHeartTodev_ServerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  SharedDtor();
}

void IndSubSvrHeartTodev_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete loadinfos_;
  }
}

void IndSubSvrHeartTodev_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrHeartTodev_ServerInfo_descriptor_;
}

const IndSubSvrHeartTodev_ServerInfo& IndSubSvrHeartTodev_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrHeartTodev_ServerInfo* IndSubSvrHeartTodev_ServerInfo::default_instance_ = NULL;

IndSubSvrHeartTodev_ServerInfo* IndSubSvrHeartTodev_ServerInfo::New() const {
  return new IndSubSvrHeartTodev_ServerInfo;
}

void IndSubSvrHeartTodev_ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndSubSvrHeartTodev_ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(svrtype_, deviceid_);
    if (has_loadinfos()) {
      if (loadinfos_ != NULL) loadinfos_->::SRMsgs::IndSubSvrHeartTodev_LoadInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrHeartTodev_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loadinfos;
        break;
      }

      // optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_loadinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  return false;
#undef DO_
}

void IndSubSvrHeartTodev_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loadinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
}

::google::protobuf::uint8* IndSubSvrHeartTodev_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loadinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrHeartTodev.ServerInfo)
  return target;
}

int IndSubSvrHeartTodev_ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrtype = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional .SRMsgs.IndSubSvrHeartTodev.LoadInfo loadinfos = 3;
    if (has_loadinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrHeartTodev_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrHeartTodev_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrHeartTodev_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrHeartTodev_ServerInfo::MergeFrom(const IndSubSvrHeartTodev_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_loadinfos()) {
      mutable_loadinfos()->::SRMsgs::IndSubSvrHeartTodev_LoadInfo::MergeFrom(from.loadinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrHeartTodev_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrHeartTodev_ServerInfo::CopyFrom(const IndSubSvrHeartTodev_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrHeartTodev_ServerInfo::IsInitialized() const {

  return true;
}

void IndSubSvrHeartTodev_ServerInfo::Swap(IndSubSvrHeartTodev_ServerInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(loadinfos_, other->loadinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrHeartTodev_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrHeartTodev_ServerInfo_descriptor_;
  metadata.reflection = IndSubSvrHeartTodev_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrHeartTodev_DomainInfo::kDomainnameFieldNumber;
const int IndSubSvrHeartTodev_DomainInfo::kLevelFieldNumber;
const int IndSubSvrHeartTodev_DomainInfo::kSvrinfosFieldNumber;
#endif  // !_MSC_VER

IndSubSvrHeartTodev_DomainInfo::IndSubSvrHeartTodev_DomainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
}

void IndSubSvrHeartTodev_DomainInfo::InitAsDefaultInstance() {
}

IndSubSvrHeartTodev_DomainInfo::IndSubSvrHeartTodev_DomainInfo(const IndSubSvrHeartTodev_DomainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
}

void IndSubSvrHeartTodev_DomainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrHeartTodev_DomainInfo::~IndSubSvrHeartTodev_DomainInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  SharedDtor();
}

void IndSubSvrHeartTodev_DomainInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void IndSubSvrHeartTodev_DomainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev_DomainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrHeartTodev_DomainInfo_descriptor_;
}

const IndSubSvrHeartTodev_DomainInfo& IndSubSvrHeartTodev_DomainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrHeartTodev_DomainInfo* IndSubSvrHeartTodev_DomainInfo::default_instance_ = NULL;

IndSubSvrHeartTodev_DomainInfo* IndSubSvrHeartTodev_DomainInfo::New() const {
  return new IndSubSvrHeartTodev_DomainInfo;
}

void IndSubSvrHeartTodev_DomainInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    level_ = 0;
  }
  svrinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrHeartTodev_DomainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional sint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        break;
      }

      // repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_svrinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  return false;
#undef DO_
}

void IndSubSvrHeartTodev_DomainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domainname(), output);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->svrinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
}

::google::protobuf::uint8* IndSubSvrHeartTodev_DomainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->svrinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrHeartTodev.DomainInfo)
  return target;
}

int IndSubSvrHeartTodev_DomainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainname = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  // repeated .SRMsgs.IndSubSvrHeartTodev.ServerInfo svrinfos = 3;
  total_size += 1 * this->svrinfos_size();
  for (int i = 0; i < this->svrinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrHeartTodev_DomainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrHeartTodev_DomainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrHeartTodev_DomainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrHeartTodev_DomainInfo::MergeFrom(const IndSubSvrHeartTodev_DomainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrinfos_.MergeFrom(from.svrinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrHeartTodev_DomainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrHeartTodev_DomainInfo::CopyFrom(const IndSubSvrHeartTodev_DomainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrHeartTodev_DomainInfo::IsInitialized() const {

  return true;
}

void IndSubSvrHeartTodev_DomainInfo::Swap(IndSubSvrHeartTodev_DomainInfo* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    std::swap(level_, other->level_);
    svrinfos_.Swap(&other->svrinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrHeartTodev_DomainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrHeartTodev_DomainInfo_descriptor_;
  metadata.reflection = IndSubSvrHeartTodev_DomainInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndSubSvrHeartTodev::kDeviceidFieldNumber;
const int IndSubSvrHeartTodev::kTokenFieldNumber;
const int IndSubSvrHeartTodev::kDomaininfosFieldNumber;
#endif  // !_MSC_VER

IndSubSvrHeartTodev::IndSubSvrHeartTodev()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndSubSvrHeartTodev)
}

void IndSubSvrHeartTodev::InitAsDefaultInstance() {
}

IndSubSvrHeartTodev::IndSubSvrHeartTodev(const IndSubSvrHeartTodev& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndSubSvrHeartTodev)
}

void IndSubSvrHeartTodev::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndSubSvrHeartTodev::~IndSubSvrHeartTodev() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndSubSvrHeartTodev)
  SharedDtor();
}

void IndSubSvrHeartTodev::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndSubSvrHeartTodev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndSubSvrHeartTodev::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndSubSvrHeartTodev_descriptor_;
}

const IndSubSvrHeartTodev& IndSubSvrHeartTodev::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndSubSvrHeartTodev* IndSubSvrHeartTodev::default_instance_ = NULL;

IndSubSvrHeartTodev* IndSubSvrHeartTodev::New() const {
  return new IndSubSvrHeartTodev;
}

void IndSubSvrHeartTodev::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  domaininfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndSubSvrHeartTodev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndSubSvrHeartTodev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domaininfos;
        break;
      }

      // repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
      case 3: {
        if (tag == 26) {
         parse_domaininfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domaininfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domaininfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndSubSvrHeartTodev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndSubSvrHeartTodev)
  return false;
#undef DO_
}

void IndSubSvrHeartTodev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndSubSvrHeartTodev)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->domaininfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndSubSvrHeartTodev)
}

::google::protobuf::uint8* IndSubSvrHeartTodev::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndSubSvrHeartTodev)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->domaininfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndSubSvrHeartTodev)
  return target;
}

int IndSubSvrHeartTodev::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.IndSubSvrHeartTodev.DomainInfo domaininfos = 3;
  total_size += 1 * this->domaininfos_size();
  for (int i = 0; i < this->domaininfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domaininfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndSubSvrHeartTodev::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndSubSvrHeartTodev* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndSubSvrHeartTodev*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndSubSvrHeartTodev::MergeFrom(const IndSubSvrHeartTodev& from) {
  GOOGLE_CHECK_NE(&from, this);
  domaininfos_.MergeFrom(from.domaininfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndSubSvrHeartTodev::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndSubSvrHeartTodev::CopyFrom(const IndSubSvrHeartTodev& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndSubSvrHeartTodev::IsInitialized() const {

  return true;
}

void IndSubSvrHeartTodev::Swap(IndSubSvrHeartTodev* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    domaininfos_.Swap(&other->domaininfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndSubSvrHeartTodev::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndSubSvrHeartTodev_descriptor_;
  metadata.reflection = IndSubSvrHeartTodev_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndVASAnalyVideoResult_videoMatch::kUseridFieldNumber;
const int IndVASAnalyVideoResult_videoMatch::kRateFieldNumber;
#endif  // !_MSC_VER

IndVASAnalyVideoResult_videoMatch::IndVASAnalyVideoResult_videoMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASAnalyVideoResult.videoMatch)
}

void IndVASAnalyVideoResult_videoMatch::InitAsDefaultInstance() {
}

IndVASAnalyVideoResult_videoMatch::IndVASAnalyVideoResult_videoMatch(const IndVASAnalyVideoResult_videoMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASAnalyVideoResult.videoMatch)
}

void IndVASAnalyVideoResult_videoMatch::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASAnalyVideoResult_videoMatch::~IndVASAnalyVideoResult_videoMatch() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  SharedDtor();
}

void IndVASAnalyVideoResult_videoMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASAnalyVideoResult_videoMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult_videoMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASAnalyVideoResult_videoMatch_descriptor_;
}

const IndVASAnalyVideoResult_videoMatch& IndVASAnalyVideoResult_videoMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndVASAnalyVideoResult_videoMatch* IndVASAnalyVideoResult_videoMatch::default_instance_ = NULL;

IndVASAnalyVideoResult_videoMatch* IndVASAnalyVideoResult_videoMatch::New() const {
  return new IndVASAnalyVideoResult_videoMatch;
}

void IndVASAnalyVideoResult_videoMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASAnalyVideoResult_videoMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASAnalyVideoResult_videoMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  return false;
#undef DO_
}

void IndVASAnalyVideoResult_videoMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASAnalyVideoResult.videoMatch)
}

::google::protobuf::uint8* IndVASAnalyVideoResult_videoMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASAnalyVideoResult.videoMatch)
  return target;
}

int IndVASAnalyVideoResult_videoMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASAnalyVideoResult_videoMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASAnalyVideoResult_videoMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASAnalyVideoResult_videoMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASAnalyVideoResult_videoMatch::MergeFrom(const IndVASAnalyVideoResult_videoMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASAnalyVideoResult_videoMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASAnalyVideoResult_videoMatch::CopyFrom(const IndVASAnalyVideoResult_videoMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASAnalyVideoResult_videoMatch::IsInitialized() const {

  return true;
}

void IndVASAnalyVideoResult_videoMatch::Swap(IndVASAnalyVideoResult_videoMatch* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASAnalyVideoResult_videoMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASAnalyVideoResult_videoMatch_descriptor_;
  metadata.reflection = IndVASAnalyVideoResult_videoMatch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndVASAnalyVideoResult_MatchResult::kHasmismatchFieldNumber;
const int IndVASAnalyVideoResult_MatchResult::kVideoMatchsFieldNumber;
#endif  // !_MSC_VER

IndVASAnalyVideoResult_MatchResult::IndVASAnalyVideoResult_MatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASAnalyVideoResult.MatchResult)
}

void IndVASAnalyVideoResult_MatchResult::InitAsDefaultInstance() {
}

IndVASAnalyVideoResult_MatchResult::IndVASAnalyVideoResult_MatchResult(const IndVASAnalyVideoResult_MatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASAnalyVideoResult.MatchResult)
}

void IndVASAnalyVideoResult_MatchResult::SharedCtor() {
  _cached_size_ = 0;
  hasmismatch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASAnalyVideoResult_MatchResult::~IndVASAnalyVideoResult_MatchResult() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  SharedDtor();
}

void IndVASAnalyVideoResult_MatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndVASAnalyVideoResult_MatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult_MatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASAnalyVideoResult_MatchResult_descriptor_;
}

const IndVASAnalyVideoResult_MatchResult& IndVASAnalyVideoResult_MatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndVASAnalyVideoResult_MatchResult* IndVASAnalyVideoResult_MatchResult::default_instance_ = NULL;

IndVASAnalyVideoResult_MatchResult* IndVASAnalyVideoResult_MatchResult::New() const {
  return new IndVASAnalyVideoResult_MatchResult;
}

void IndVASAnalyVideoResult_MatchResult::Clear() {
  hasmismatch_ = false;
  videomatchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASAnalyVideoResult_MatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasmismatch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmismatch_)));
          set_has_hasmismatch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_videoMatchs;
        break;
      }

      // repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
      case 2: {
        if (tag == 18) {
         parse_videoMatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videomatchs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_videoMatchs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  return false;
#undef DO_
}

void IndVASAnalyVideoResult_MatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  // optional bool hasmismatch = 1;
  if (has_hasmismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasmismatch(), output);
  }

  // repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
  for (int i = 0; i < this->videomatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->videomatchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASAnalyVideoResult.MatchResult)
}

::google::protobuf::uint8* IndVASAnalyVideoResult_MatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  // optional bool hasmismatch = 1;
  if (has_hasmismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasmismatch(), target);
  }

  // repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
  for (int i = 0; i < this->videomatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->videomatchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASAnalyVideoResult.MatchResult)
  return target;
}

int IndVASAnalyVideoResult_MatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasmismatch = 1;
    if (has_hasmismatch()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SRMsgs.IndVASAnalyVideoResult.videoMatch videoMatchs = 2;
  total_size += 1 * this->videomatchs_size();
  for (int i = 0; i < this->videomatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videomatchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASAnalyVideoResult_MatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASAnalyVideoResult_MatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASAnalyVideoResult_MatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASAnalyVideoResult_MatchResult::MergeFrom(const IndVASAnalyVideoResult_MatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  videomatchs_.MergeFrom(from.videomatchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasmismatch()) {
      set_hasmismatch(from.hasmismatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASAnalyVideoResult_MatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASAnalyVideoResult_MatchResult::CopyFrom(const IndVASAnalyVideoResult_MatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASAnalyVideoResult_MatchResult::IsInitialized() const {

  return true;
}

void IndVASAnalyVideoResult_MatchResult::Swap(IndVASAnalyVideoResult_MatchResult* other) {
  if (other != this) {
    std::swap(hasmismatch_, other->hasmismatch_);
    videomatchs_.Swap(&other->videomatchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASAnalyVideoResult_MatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASAnalyVideoResult_MatchResult_descriptor_;
  metadata.reflection = IndVASAnalyVideoResult_MatchResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndVASAnalyVideoResult::kDeviceidFieldNumber;
const int IndVASAnalyVideoResult::kTokenFieldNumber;
const int IndVASAnalyVideoResult::kConfidFieldNumber;
const int IndVASAnalyVideoResult::kConfreportidFieldNumber;
const int IndVASAnalyVideoResult::kMatchresultsFieldNumber;
#endif  // !_MSC_VER

IndVASAnalyVideoResult::IndVASAnalyVideoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndVASAnalyVideoResult)
}

void IndVASAnalyVideoResult::InitAsDefaultInstance() {
}

IndVASAnalyVideoResult::IndVASAnalyVideoResult(const IndVASAnalyVideoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndVASAnalyVideoResult)
}

void IndVASAnalyVideoResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  confreportid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndVASAnalyVideoResult::~IndVASAnalyVideoResult() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndVASAnalyVideoResult)
  SharedDtor();
}

void IndVASAnalyVideoResult::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndVASAnalyVideoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndVASAnalyVideoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndVASAnalyVideoResult_descriptor_;
}

const IndVASAnalyVideoResult& IndVASAnalyVideoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndVASAnalyVideoResult* IndVASAnalyVideoResult::default_instance_ = NULL;

IndVASAnalyVideoResult* IndVASAnalyVideoResult::New() const {
  return new IndVASAnalyVideoResult;
}

void IndVASAnalyVideoResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndVASAnalyVideoResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confid_, confreportid_);
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  matchresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndVASAnalyVideoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndVASAnalyVideoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 4;
      case 4: {
        if (tag == 32) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_matchresults;
        break;
      }

      // repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
      case 5: {
        if (tag == 42) {
         parse_matchresults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_matchresults;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndVASAnalyVideoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndVASAnalyVideoResult)
  return false;
#undef DO_
}

void IndVASAnalyVideoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndVASAnalyVideoResult)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->confreportid(), output);
  }

  // repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
  for (int i = 0; i < this->matchresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->matchresults(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndVASAnalyVideoResult)
}

::google::protobuf::uint8* IndVASAnalyVideoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndVASAnalyVideoResult)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional uint64 confreportid = 4;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->confreportid(), target);
  }

  // repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
  for (int i = 0; i < this->matchresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->matchresults(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndVASAnalyVideoResult)
  return target;
}

int IndVASAnalyVideoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint64 confreportid = 4;
    if (has_confreportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

  }
  // repeated .SRMsgs.IndVASAnalyVideoResult.MatchResult matchresults = 5;
  total_size += 1 * this->matchresults_size();
  for (int i = 0; i < this->matchresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchresults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndVASAnalyVideoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndVASAnalyVideoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndVASAnalyVideoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndVASAnalyVideoResult::MergeFrom(const IndVASAnalyVideoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchresults_.MergeFrom(from.matchresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndVASAnalyVideoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndVASAnalyVideoResult::CopyFrom(const IndVASAnalyVideoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndVASAnalyVideoResult::IsInitialized() const {

  return true;
}

void IndVASAnalyVideoResult::Swap(IndVASAnalyVideoResult* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    std::swap(confreportid_, other->confreportid_);
    matchresults_.Swap(&other->matchresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndVASAnalyVideoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndVASAnalyVideoResult_descriptor_;
  metadata.reflection = IndVASAnalyVideoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspConfInfoToMC_LicenceInfo::kLicencetypeFieldNumber;
const int RspConfInfoToMC_LicenceInfo::kLicencenumFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_LicenceInfo::RspConfInfoToMC_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.LicenceInfo)
}

void RspConfInfoToMC_LicenceInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_LicenceInfo::RspConfInfoToMC_LicenceInfo(const RspConfInfoToMC_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.LicenceInfo)
}

void RspConfInfoToMC_LicenceInfo::SharedCtor() {
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_LicenceInfo::~RspConfInfoToMC_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.LicenceInfo)
  SharedDtor();
}

void RspConfInfoToMC_LicenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_LicenceInfo_descriptor_;
}

const RspConfInfoToMC_LicenceInfo& RspConfInfoToMC_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_LicenceInfo* RspConfInfoToMC_LicenceInfo::default_instance_ = NULL;

RspConfInfoToMC_LicenceInfo* RspConfInfoToMC_LicenceInfo::New() const {
  return new RspConfInfoToMC_LicenceInfo;
}

void RspConfInfoToMC_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(licencetype_, licencenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.LicenceInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.LicenceInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.LicenceInfo)
  return target;
}

int RspConfInfoToMC_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_LicenceInfo::MergeFrom(const RspConfInfoToMC_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_LicenceInfo::CopyFrom(const RspConfInfoToMC_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_LicenceInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_LicenceInfo::Swap(RspConfInfoToMC_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_LicenceInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_CompanyInfo::kCompanyidFieldNumber;
const int RspConfInfoToMC_CompanyInfo::kGetlicinfosFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_CompanyInfo::RspConfInfoToMC_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.CompanyInfo)
}

void RspConfInfoToMC_CompanyInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_CompanyInfo::RspConfInfoToMC_CompanyInfo(const RspConfInfoToMC_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.CompanyInfo)
}

void RspConfInfoToMC_CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  companyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_CompanyInfo::~RspConfInfoToMC_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.CompanyInfo)
  SharedDtor();
}

void RspConfInfoToMC_CompanyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_CompanyInfo_descriptor_;
}

const RspConfInfoToMC_CompanyInfo& RspConfInfoToMC_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_CompanyInfo* RspConfInfoToMC_CompanyInfo::default_instance_ = NULL;

RspConfInfoToMC_CompanyInfo* RspConfInfoToMC_CompanyInfo::New() const {
  return new RspConfInfoToMC_CompanyInfo;
}

void RspConfInfoToMC_CompanyInfo::Clear() {
  companyid_ = 0u;
  getlicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.LicenceInfo getlicinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_getlicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getlicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.CompanyInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getlicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.CompanyInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getlicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.CompanyInfo)
  return target;
}

int RspConfInfoToMC_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

  }
  // repeated .SRMsgs.RspConfInfoToMC.LicenceInfo getlicinfos = 2;
  total_size += 1 * this->getlicinfos_size();
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getlicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_CompanyInfo::MergeFrom(const RspConfInfoToMC_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  getlicinfos_.MergeFrom(from.getlicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_CompanyInfo::CopyFrom(const RspConfInfoToMC_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_CompanyInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_CompanyInfo::Swap(RspConfInfoToMC_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    getlicinfos_.Swap(&other->getlicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_CompanyInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_AgcSetting::kAgcEnableFieldNumber;
const int RspConfInfoToMC_AgcSetting::kTargetLevelDbfsFieldNumber;
const int RspConfInfoToMC_AgcSetting::kCompressionGainDbFieldNumber;
const int RspConfInfoToMC_AgcSetting::kLimiterEnableFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_AgcSetting::RspConfInfoToMC_AgcSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.AgcSetting)
}

void RspConfInfoToMC_AgcSetting::InitAsDefaultInstance() {
}

RspConfInfoToMC_AgcSetting::RspConfInfoToMC_AgcSetting(const RspConfInfoToMC_AgcSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.AgcSetting)
}

void RspConfInfoToMC_AgcSetting::SharedCtor() {
  _cached_size_ = 0;
  agc_enable_ = false;
  target_level_dbfs_ = 0;
  compression_gain_db_ = 0;
  limiter_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_AgcSetting::~RspConfInfoToMC_AgcSetting() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.AgcSetting)
  SharedDtor();
}

void RspConfInfoToMC_AgcSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_AgcSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_AgcSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_AgcSetting_descriptor_;
}

const RspConfInfoToMC_AgcSetting& RspConfInfoToMC_AgcSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_AgcSetting* RspConfInfoToMC_AgcSetting::default_instance_ = NULL;

RspConfInfoToMC_AgcSetting* RspConfInfoToMC_AgcSetting::New() const {
  return new RspConfInfoToMC_AgcSetting;
}

void RspConfInfoToMC_AgcSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC_AgcSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_level_dbfs_, compression_gain_db_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_AgcSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.AgcSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agc_enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agc_enable_)));
          set_has_agc_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_level_dbfs;
        break;
      }

      // optional int32 target_level_dbfs = 2;
      case 2: {
        if (tag == 16) {
         parse_target_level_dbfs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_level_dbfs_)));
          set_has_target_level_dbfs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compression_gain_db;
        break;
      }

      // optional int32 compression_gain_db = 3;
      case 3: {
        if (tag == 24) {
         parse_compression_gain_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_gain_db_)));
          set_has_compression_gain_db();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limiter_enable;
        break;
      }

      // optional bool limiter_enable = 4;
      case 4: {
        if (tag == 32) {
         parse_limiter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limiter_enable_)));
          set_has_limiter_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.AgcSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.AgcSetting)
  return false;
#undef DO_
}

void RspConfInfoToMC_AgcSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.AgcSetting)
  // optional bool agc_enable = 1;
  if (has_agc_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agc_enable(), output);
  }

  // optional int32 target_level_dbfs = 2;
  if (has_target_level_dbfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_level_dbfs(), output);
  }

  // optional int32 compression_gain_db = 3;
  if (has_compression_gain_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compression_gain_db(), output);
  }

  // optional bool limiter_enable = 4;
  if (has_limiter_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->limiter_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.AgcSetting)
}

::google::protobuf::uint8* RspConfInfoToMC_AgcSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.AgcSetting)
  // optional bool agc_enable = 1;
  if (has_agc_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agc_enable(), target);
  }

  // optional int32 target_level_dbfs = 2;
  if (has_target_level_dbfs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_level_dbfs(), target);
  }

  // optional int32 compression_gain_db = 3;
  if (has_compression_gain_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compression_gain_db(), target);
  }

  // optional bool limiter_enable = 4;
  if (has_limiter_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->limiter_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.AgcSetting)
  return target;
}

int RspConfInfoToMC_AgcSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agc_enable = 1;
    if (has_agc_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 target_level_dbfs = 2;
    if (has_target_level_dbfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_level_dbfs());
    }

    // optional int32 compression_gain_db = 3;
    if (has_compression_gain_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression_gain_db());
    }

    // optional bool limiter_enable = 4;
    if (has_limiter_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_AgcSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_AgcSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_AgcSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_AgcSetting::MergeFrom(const RspConfInfoToMC_AgcSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agc_enable()) {
      set_agc_enable(from.agc_enable());
    }
    if (from.has_target_level_dbfs()) {
      set_target_level_dbfs(from.target_level_dbfs());
    }
    if (from.has_compression_gain_db()) {
      set_compression_gain_db(from.compression_gain_db());
    }
    if (from.has_limiter_enable()) {
      set_limiter_enable(from.limiter_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_AgcSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_AgcSetting::CopyFrom(const RspConfInfoToMC_AgcSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_AgcSetting::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_AgcSetting::Swap(RspConfInfoToMC_AgcSetting* other) {
  if (other != this) {
    std::swap(agc_enable_, other->agc_enable_);
    std::swap(target_level_dbfs_, other->target_level_dbfs_);
    std::swap(compression_gain_db_, other->compression_gain_db_);
    std::swap(limiter_enable_, other->limiter_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_AgcSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_AgcSetting_descriptor_;
  metadata.reflection = RspConfInfoToMC_AgcSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_Confcfg::kMaxAudiomixNumFieldNumber;
const int RspConfInfoToMC_Confcfg::kUseVideoMixerFieldNumber;
const int RspConfInfoToMC_Confcfg::kUseAudioMixerFieldNumber;
const int RspConfInfoToMC_Confcfg::kMixingFrequencyFieldNumber;
const int RspConfInfoToMC_Confcfg::kMaxEncoderNumFieldNumber;
const int RspConfInfoToMC_Confcfg::kAgcSettingFieldNumber;
const int RspConfInfoToMC_Confcfg::kVideosizeFieldNumber;
const int RspConfInfoToMC_Confcfg::kUseedgeserverFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_Confcfg::RspConfInfoToMC_Confcfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.Confcfg)
}

void RspConfInfoToMC_Confcfg::InitAsDefaultInstance() {
  agc_setting_ = const_cast< ::SRMsgs::RspConfInfoToMC_AgcSetting*>(&::SRMsgs::RspConfInfoToMC_AgcSetting::default_instance());
}

RspConfInfoToMC_Confcfg::RspConfInfoToMC_Confcfg(const RspConfInfoToMC_Confcfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.Confcfg)
}

void RspConfInfoToMC_Confcfg::SharedCtor() {
  _cached_size_ = 0;
  max_audiomix_num_ = 0u;
  usevideomixer_ = 0u;
  useaudiomixer_ = 0u;
  mixing_frequency_ = 0u;
  max_encoder_num_ = 0u;
  agc_setting_ = NULL;
  videosize_ = 0u;
  useedgeserver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_Confcfg::~RspConfInfoToMC_Confcfg() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.Confcfg)
  SharedDtor();
}

void RspConfInfoToMC_Confcfg::SharedDtor() {
  if (this != default_instance_) {
    delete agc_setting_;
  }
}

void RspConfInfoToMC_Confcfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_Confcfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_Confcfg_descriptor_;
}

const RspConfInfoToMC_Confcfg& RspConfInfoToMC_Confcfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_Confcfg* RspConfInfoToMC_Confcfg::default_instance_ = NULL;

RspConfInfoToMC_Confcfg* RspConfInfoToMC_Confcfg::New() const {
  return new RspConfInfoToMC_Confcfg;
}

void RspConfInfoToMC_Confcfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC_Confcfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_audiomix_num_, mixing_frequency_);
    ZR_(max_encoder_num_, useedgeserver_);
    if (has_agc_setting()) {
      if (agc_setting_ != NULL) agc_setting_->::SRMsgs::RspConfInfoToMC_AgcSetting::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_Confcfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.Confcfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_audiomix_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_audiomix_num_)));
          set_has_max_audiomix_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_useVideoMixer;
        break;
      }

      // optional uint32 useVideoMixer = 2;
      case 2: {
        if (tag == 16) {
         parse_useVideoMixer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usevideomixer_)));
          set_has_usevideomixer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_useAudioMixer;
        break;
      }

      // optional uint32 useAudioMixer = 3;
      case 3: {
        if (tag == 24) {
         parse_useAudioMixer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useaudiomixer_)));
          set_has_useaudiomixer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mixing_frequency;
        break;
      }

      // optional uint32 mixing_frequency = 4;
      case 4: {
        if (tag == 32) {
         parse_mixing_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixing_frequency_)));
          set_has_mixing_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_encoder_num;
        break;
      }

      // optional uint32 max_encoder_num = 5;
      case 5: {
        if (tag == 40) {
         parse_max_encoder_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_encoder_num_)));
          set_has_max_encoder_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_agc_setting;
        break;
      }

      // optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
      case 6: {
        if (tag == 50) {
         parse_agc_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agc_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_videosize;
        break;
      }

      // optional uint32 videosize = 7;
      case 7: {
        if (tag == 56) {
         parse_videosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videosize_)));
          set_has_videosize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_useedgeserver;
        break;
      }

      // optional uint32 useedgeserver = 8;
      case 8: {
        if (tag == 64) {
         parse_useedgeserver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useedgeserver_)));
          set_has_useedgeserver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.Confcfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.Confcfg)
  return false;
#undef DO_
}

void RspConfInfoToMC_Confcfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.Confcfg)
  // optional uint32 max_audiomix_num = 1;
  if (has_max_audiomix_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_audiomix_num(), output);
  }

  // optional uint32 useVideoMixer = 2;
  if (has_usevideomixer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usevideomixer(), output);
  }

  // optional uint32 useAudioMixer = 3;
  if (has_useaudiomixer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->useaudiomixer(), output);
  }

  // optional uint32 mixing_frequency = 4;
  if (has_mixing_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mixing_frequency(), output);
  }

  // optional uint32 max_encoder_num = 5;
  if (has_max_encoder_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_encoder_num(), output);
  }

  // optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
  if (has_agc_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->agc_setting(), output);
  }

  // optional uint32 videosize = 7;
  if (has_videosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->videosize(), output);
  }

  // optional uint32 useedgeserver = 8;
  if (has_useedgeserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->useedgeserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.Confcfg)
}

::google::protobuf::uint8* RspConfInfoToMC_Confcfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.Confcfg)
  // optional uint32 max_audiomix_num = 1;
  if (has_max_audiomix_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_audiomix_num(), target);
  }

  // optional uint32 useVideoMixer = 2;
  if (has_usevideomixer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usevideomixer(), target);
  }

  // optional uint32 useAudioMixer = 3;
  if (has_useaudiomixer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->useaudiomixer(), target);
  }

  // optional uint32 mixing_frequency = 4;
  if (has_mixing_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mixing_frequency(), target);
  }

  // optional uint32 max_encoder_num = 5;
  if (has_max_encoder_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_encoder_num(), target);
  }

  // optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
  if (has_agc_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->agc_setting(), target);
  }

  // optional uint32 videosize = 7;
  if (has_videosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->videosize(), target);
  }

  // optional uint32 useedgeserver = 8;
  if (has_useedgeserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->useedgeserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.Confcfg)
  return target;
}

int RspConfInfoToMC_Confcfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_audiomix_num = 1;
    if (has_max_audiomix_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_audiomix_num());
    }

    // optional uint32 useVideoMixer = 2;
    if (has_usevideomixer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usevideomixer());
    }

    // optional uint32 useAudioMixer = 3;
    if (has_useaudiomixer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useaudiomixer());
    }

    // optional uint32 mixing_frequency = 4;
    if (has_mixing_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mixing_frequency());
    }

    // optional uint32 max_encoder_num = 5;
    if (has_max_encoder_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_encoder_num());
    }

    // optional .SRMsgs.RspConfInfoToMC.AgcSetting agc_setting = 6;
    if (has_agc_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agc_setting());
    }

    // optional uint32 videosize = 7;
    if (has_videosize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videosize());
    }

    // optional uint32 useedgeserver = 8;
    if (has_useedgeserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useedgeserver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_Confcfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_Confcfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_Confcfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_Confcfg::MergeFrom(const RspConfInfoToMC_Confcfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_audiomix_num()) {
      set_max_audiomix_num(from.max_audiomix_num());
    }
    if (from.has_usevideomixer()) {
      set_usevideomixer(from.usevideomixer());
    }
    if (from.has_useaudiomixer()) {
      set_useaudiomixer(from.useaudiomixer());
    }
    if (from.has_mixing_frequency()) {
      set_mixing_frequency(from.mixing_frequency());
    }
    if (from.has_max_encoder_num()) {
      set_max_encoder_num(from.max_encoder_num());
    }
    if (from.has_agc_setting()) {
      mutable_agc_setting()->::SRMsgs::RspConfInfoToMC_AgcSetting::MergeFrom(from.agc_setting());
    }
    if (from.has_videosize()) {
      set_videosize(from.videosize());
    }
    if (from.has_useedgeserver()) {
      set_useedgeserver(from.useedgeserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_Confcfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_Confcfg::CopyFrom(const RspConfInfoToMC_Confcfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_Confcfg::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_Confcfg::Swap(RspConfInfoToMC_Confcfg* other) {
  if (other != this) {
    std::swap(max_audiomix_num_, other->max_audiomix_num_);
    std::swap(usevideomixer_, other->usevideomixer_);
    std::swap(useaudiomixer_, other->useaudiomixer_);
    std::swap(mixing_frequency_, other->mixing_frequency_);
    std::swap(max_encoder_num_, other->max_encoder_num_);
    std::swap(agc_setting_, other->agc_setting_);
    std::swap(videosize_, other->videosize_);
    std::swap(useedgeserver_, other->useedgeserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_Confcfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_Confcfg_descriptor_;
  metadata.reflection = RspConfInfoToMC_Confcfg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_ParticipantInfo::kPsuidFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kNicknameFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kIpFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kProtocoltypeFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kBandwidthFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kUsertypeFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kDevicetypeFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kDevicecodeFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kShortnameFieldNumber;
const int RspConfInfoToMC_ParticipantInfo::kOrdernoFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_ParticipantInfo::RspConfInfoToMC_ParticipantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.ParticipantInfo)
}

void RspConfInfoToMC_ParticipantInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_ParticipantInfo::RspConfInfoToMC_ParticipantInfo(const RspConfInfoToMC_ParticipantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.ParticipantInfo)
}

void RspConfInfoToMC_ParticipantInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  psuid_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocoltype_ = 0u;
  bandwidth_ = 0u;
  usertype_ = 0u;
  devicetype_ = 0u;
  devicecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_ParticipantInfo::~RspConfInfoToMC_ParticipantInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  SharedDtor();
}

void RspConfInfoToMC_ParticipantInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicecode_;
  }
  if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shortname_;
  }
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_ParticipantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_ParticipantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_ParticipantInfo_descriptor_;
}

const RspConfInfoToMC_ParticipantInfo& RspConfInfoToMC_ParticipantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_ParticipantInfo::default_instance_ = NULL;

RspConfInfoToMC_ParticipantInfo* RspConfInfoToMC_ParticipantInfo::New() const {
  return new RspConfInfoToMC_ParticipantInfo;
}

void RspConfInfoToMC_ParticipantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC_ParticipantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(psuid_, protocoltype_);
    ZR_(bandwidth_, usertype_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    devicetype_ = 0u;
    if (has_devicecode()) {
      if (devicecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicecode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_shortname()) {
      if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shortname_->clear();
      }
    }
    orderno_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_ParticipantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 psuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &psuid_)));
          set_has_psuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protocoltype;
        break;
      }

      // optional uint32 protocoltype = 4;
      case 4: {
        if (tag == 32) {
         parse_protocoltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocoltype_)));
          set_has_protocoltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bandwidth;
        break;
      }

      // optional uint32 bandwidth = 5;
      case 5: {
        if (tag == 40) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usertype;
        break;
      }

      // optional uint32 usertype = 6;
      case 6: {
        if (tag == 48) {
         parse_usertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_devicetype;
        break;
      }

      // optional uint32 devicetype = 7;
      case 7: {
        if (tag == 56) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_devicecode;
        break;
      }

      // optional string devicecode = 8;
      case 8: {
        if (tag == 66) {
         parse_devicecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicecode().data(), this->devicecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_shortname;
        break;
      }

      // optional string shortname = 9;
      case 9: {
        if (tag == 74) {
         parse_shortname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortname().data(), this->shortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shortname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_orderno;
        break;
      }

      // optional uint32 orderno = 10;
      case 10: {
        if (tag == 80) {
         parse_orderno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderno_)));
          set_has_orderno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_ParticipantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->psuid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 protocoltype = 4;
  if (has_protocoltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocoltype(), output);
  }

  // optional uint32 bandwidth = 5;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bandwidth(), output);
  }

  // optional uint32 usertype = 6;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usertype(), output);
  }

  // optional uint32 devicetype = 7;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->devicetype(), output);
  }

  // optional string devicecode = 8;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->devicecode(), output);
  }

  // optional string shortname = 9;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shortname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->shortname(), output);
  }

  // optional uint32 orderno = 10;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->orderno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.ParticipantInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_ParticipantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  // optional uint32 psuid = 1;
  if (has_psuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->psuid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 protocoltype = 4;
  if (has_protocoltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocoltype(), target);
  }

  // optional uint32 bandwidth = 5;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bandwidth(), target);
  }

  // optional uint32 usertype = 6;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usertype(), target);
  }

  // optional uint32 devicetype = 7;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->devicetype(), target);
  }

  // optional string devicecode = 8;
  if (has_devicecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicecode().data(), this->devicecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicecode(), target);
  }

  // optional string shortname = 9;
  if (has_shortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortname().data(), this->shortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shortname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->shortname(), target);
  }

  // optional uint32 orderno = 10;
  if (has_orderno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->orderno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.ParticipantInfo)
  return target;
}

int RspConfInfoToMC_ParticipantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 psuid = 1;
    if (has_psuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->psuid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 protocoltype = 4;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocoltype());
    }

    // optional uint32 bandwidth = 5;
    if (has_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bandwidth());
    }

    // optional uint32 usertype = 6;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usertype());
    }

    // optional uint32 devicetype = 7;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicetype());
    }

    // optional string devicecode = 8;
    if (has_devicecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicecode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string shortname = 9;
    if (has_shortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortname());
    }

    // optional uint32 orderno = 10;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_ParticipantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_ParticipantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_ParticipantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_ParticipantInfo::MergeFrom(const RspConfInfoToMC_ParticipantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psuid()) {
      set_psuid(from.psuid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_protocoltype()) {
      set_protocoltype(from.protocoltype());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_devicecode()) {
      set_devicecode(from.devicecode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shortname()) {
      set_shortname(from.shortname());
    }
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_ParticipantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_ParticipantInfo::CopyFrom(const RspConfInfoToMC_ParticipantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_ParticipantInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_ParticipantInfo::Swap(RspConfInfoToMC_ParticipantInfo* other) {
  if (other != this) {
    std::swap(psuid_, other->psuid_);
    std::swap(nickname_, other->nickname_);
    std::swap(ip_, other->ip_);
    std::swap(protocoltype_, other->protocoltype_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(usertype_, other->usertype_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(devicecode_, other->devicecode_);
    std::swap(shortname_, other->shortname_);
    std::swap(orderno_, other->orderno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_ParticipantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_ParticipantInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_ParticipantInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_LiveSetting::kChairmanFieldNumber;
const int RspConfInfoToMC_LiveSetting::kSubjectFieldNumber;
const int RspConfInfoToMC_LiveSetting::kAbstractFieldNumber;
const int RspConfInfoToMC_LiveSetting::kIspublicFieldNumber;
const int RspConfInfoToMC_LiveSetting::kLivepwdFieldNumber;
const int RspConfInfoToMC_LiveSetting::kIsuserecFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_LiveSetting::RspConfInfoToMC_LiveSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.LiveSetting)
}

void RspConfInfoToMC_LiveSetting::InitAsDefaultInstance() {
}

RspConfInfoToMC_LiveSetting::RspConfInfoToMC_LiveSetting(const RspConfInfoToMC_LiveSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.LiveSetting)
}

void RspConfInfoToMC_LiveSetting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chairman_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abstract_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispublic_ = 0u;
  livepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isuserec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_LiveSetting::~RspConfInfoToMC_LiveSetting() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.LiveSetting)
  SharedDtor();
}

void RspConfInfoToMC_LiveSetting::SharedDtor() {
  if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chairman_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abstract_;
  }
  if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livepwd_;
  }
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_LiveSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_LiveSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_LiveSetting_descriptor_;
}

const RspConfInfoToMC_LiveSetting& RspConfInfoToMC_LiveSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_LiveSetting* RspConfInfoToMC_LiveSetting::default_instance_ = NULL;

RspConfInfoToMC_LiveSetting* RspConfInfoToMC_LiveSetting::New() const {
  return new RspConfInfoToMC_LiveSetting;
}

void RspConfInfoToMC_LiveSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC_LiveSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ispublic_, isuserec_);
    if (has_chairman()) {
      if (chairman_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chairman_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_abstract()) {
      if (abstract_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abstract_->clear();
      }
    }
    if (has_livepwd()) {
      if (livepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livepwd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_LiveSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.LiveSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chairman = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairman()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chairman().data(), this->chairman().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chairman");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (tag == 18) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abstract;
        break;
      }

      // optional string abstract = 3;
      case 3: {
        if (tag == 26) {
         parse_abstract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abstract().data(), this->abstract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abstract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ispublic;
        break;
      }

      // optional uint32 ispublic = 4;
      case 4: {
        if (tag == 32) {
         parse_ispublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispublic_)));
          set_has_ispublic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_livepwd;
        break;
      }

      // optional string livepwd = 5;
      case 5: {
        if (tag == 42) {
         parse_livepwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_livepwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->livepwd().data(), this->livepwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "livepwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isuserec;
        break;
      }

      // optional uint32 isuserec = 6;
      case 6: {
        if (tag == 48) {
         parse_isuserec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isuserec_)));
          set_has_isuserec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.LiveSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.LiveSetting)
  return false;
#undef DO_
}

void RspConfInfoToMC_LiveSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chairman(), output);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abstract(), output);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ispublic(), output);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->livepwd(), output);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isuserec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.LiveSetting)
}

::google::protobuf::uint8* RspConfInfoToMC_LiveSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.LiveSetting)
  // optional string chairman = 1;
  if (has_chairman()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chairman().data(), this->chairman().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chairman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chairman(), target);
  }

  // optional string subject = 2;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // optional string abstract = 3;
  if (has_abstract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abstract().data(), this->abstract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abstract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abstract(), target);
  }

  // optional uint32 ispublic = 4;
  if (has_ispublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ispublic(), target);
  }

  // optional string livepwd = 5;
  if (has_livepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->livepwd().data(), this->livepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "livepwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->livepwd(), target);
  }

  // optional uint32 isuserec = 6;
  if (has_isuserec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isuserec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.LiveSetting)
  return target;
}

int RspConfInfoToMC_LiveSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chairman = 1;
    if (has_chairman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairman());
    }

    // optional string subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string abstract = 3;
    if (has_abstract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract());
    }

    // optional uint32 ispublic = 4;
    if (has_ispublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispublic());
    }

    // optional string livepwd = 5;
    if (has_livepwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->livepwd());
    }

    // optional uint32 isuserec = 6;
    if (has_isuserec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isuserec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_LiveSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_LiveSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_LiveSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_LiveSetting::MergeFrom(const RspConfInfoToMC_LiveSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairman()) {
      set_chairman(from.chairman());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_abstract()) {
      set_abstract(from.abstract());
    }
    if (from.has_ispublic()) {
      set_ispublic(from.ispublic());
    }
    if (from.has_livepwd()) {
      set_livepwd(from.livepwd());
    }
    if (from.has_isuserec()) {
      set_isuserec(from.isuserec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_LiveSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_LiveSetting::CopyFrom(const RspConfInfoToMC_LiveSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_LiveSetting::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_LiveSetting::Swap(RspConfInfoToMC_LiveSetting* other) {
  if (other != this) {
    std::swap(chairman_, other->chairman_);
    std::swap(subject_, other->subject_);
    std::swap(abstract_, other->abstract_);
    std::swap(ispublic_, other->ispublic_);
    std::swap(livepwd_, other->livepwd_);
    std::swap(isuserec_, other->isuserec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_LiveSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_LiveSetting_descriptor_;
  metadata.reflection = RspConfInfoToMC_LiveSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_RollCallInfo::kRcidFieldNumber;
const int RspConfInfoToMC_RollCallInfo::kRcnameFieldNumber;
const int RspConfInfoToMC_RollCallInfo::kPartsFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_RollCallInfo::RspConfInfoToMC_RollCallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.RollCallInfo)
}

void RspConfInfoToMC_RollCallInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_RollCallInfo::RspConfInfoToMC_RollCallInfo(const RspConfInfoToMC_RollCallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.RollCallInfo)
}

void RspConfInfoToMC_RollCallInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rcid_ = GOOGLE_ULONGLONG(0);
  rcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_RollCallInfo::~RspConfInfoToMC_RollCallInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.RollCallInfo)
  SharedDtor();
}

void RspConfInfoToMC_RollCallInfo::SharedDtor() {
  if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rcname_;
  }
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_RollCallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_RollCallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_RollCallInfo_descriptor_;
}

const RspConfInfoToMC_RollCallInfo& RspConfInfoToMC_RollCallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_RollCallInfo* RspConfInfoToMC_RollCallInfo::default_instance_ = NULL;

RspConfInfoToMC_RollCallInfo* RspConfInfoToMC_RollCallInfo::New() const {
  return new RspConfInfoToMC_RollCallInfo;
}

void RspConfInfoToMC_RollCallInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    rcid_ = GOOGLE_ULONGLONG(0);
    if (has_rcname()) {
      if (rcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rcname_->clear();
      }
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_RollCallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.RollCallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcid_)));
          set_has_rcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rcname;
        break;
      }

      // optional string rcname = 2;
      case 2: {
        if (tag == 18) {
         parse_rcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rcname().data(), this->rcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rcname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
      case 3: {
        if (tag == 26) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.RollCallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.RollCallInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_RollCallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.RollCallInfo)
  // optional uint64 rcid = 1;
  if (has_rcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rcid(), output);
  }

  // optional string rcname = 2;
  if (has_rcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rcname().data(), this->rcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rcname(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.RollCallInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_RollCallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.RollCallInfo)
  // optional uint64 rcid = 1;
  if (has_rcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rcid(), target);
  }

  // optional string rcname = 2;
  if (has_rcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rcname().data(), this->rcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rcname(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.RollCallInfo)
  return target;
}

int RspConfInfoToMC_RollCallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rcid = 1;
    if (has_rcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcid());
    }

    // optional string rcname = 2;
    if (has_rcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcname());
    }

  }
  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_RollCallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_RollCallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_RollCallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_RollCallInfo::MergeFrom(const RspConfInfoToMC_RollCallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcid()) {
      set_rcid(from.rcid());
    }
    if (from.has_rcname()) {
      set_rcname(from.rcname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_RollCallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_RollCallInfo::CopyFrom(const RspConfInfoToMC_RollCallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_RollCallInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_RollCallInfo::Swap(RspConfInfoToMC_RollCallInfo* other) {
  if (other != this) {
    std::swap(rcid_, other->rcid_);
    std::swap(rcname_, other->rcname_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_RollCallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_RollCallInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_RollCallInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_AutoPollInfo::kApidFieldNumber;
const int RspConfInfoToMC_AutoPollInfo::kApnameFieldNumber;
const int RspConfInfoToMC_AutoPollInfo::kPartsFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_AutoPollInfo::RspConfInfoToMC_AutoPollInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.AutoPollInfo)
}

void RspConfInfoToMC_AutoPollInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_AutoPollInfo::RspConfInfoToMC_AutoPollInfo(const RspConfInfoToMC_AutoPollInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.AutoPollInfo)
}

void RspConfInfoToMC_AutoPollInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  apid_ = GOOGLE_ULONGLONG(0);
  apname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_AutoPollInfo::~RspConfInfoToMC_AutoPollInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  SharedDtor();
}

void RspConfInfoToMC_AutoPollInfo::SharedDtor() {
  if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apname_;
  }
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_AutoPollInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_AutoPollInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_AutoPollInfo_descriptor_;
}

const RspConfInfoToMC_AutoPollInfo& RspConfInfoToMC_AutoPollInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_AutoPollInfo* RspConfInfoToMC_AutoPollInfo::default_instance_ = NULL;

RspConfInfoToMC_AutoPollInfo* RspConfInfoToMC_AutoPollInfo::New() const {
  return new RspConfInfoToMC_AutoPollInfo;
}

void RspConfInfoToMC_AutoPollInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    apid_ = GOOGLE_ULONGLONG(0);
    if (has_apname()) {
      if (apname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apname_->clear();
      }
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_AutoPollInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apid_)));
          set_has_apid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apname;
        break;
      }

      // optional string apname = 2;
      case 2: {
        if (tag == 18) {
         parse_apname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apname().data(), this->apname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
      case 3: {
        if (tag == 26) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_AutoPollInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apid(), output);
  }

  // optional string apname = 2;
  if (has_apname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apname().data(), this->apname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->apname(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.AutoPollInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_AutoPollInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  // optional uint64 apid = 1;
  if (has_apid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apid(), target);
  }

  // optional string apname = 2;
  if (has_apname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apname().data(), this->apname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apname(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.AutoPollInfo)
  return target;
}

int RspConfInfoToMC_AutoPollInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apid = 1;
    if (has_apid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apid());
    }

    // optional string apname = 2;
    if (has_apname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apname());
    }

  }
  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 3;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_AutoPollInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_AutoPollInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_AutoPollInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_AutoPollInfo::MergeFrom(const RspConfInfoToMC_AutoPollInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apid()) {
      set_apid(from.apid());
    }
    if (from.has_apname()) {
      set_apname(from.apname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_AutoPollInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_AutoPollInfo::CopyFrom(const RspConfInfoToMC_AutoPollInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_AutoPollInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_AutoPollInfo::Swap(RspConfInfoToMC_AutoPollInfo* other) {
  if (other != this) {
    std::swap(apid_, other->apid_);
    std::swap(apname_, other->apname_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_AutoPollInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_AutoPollInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_AutoPollInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC_WhiteListInfo::kWhitelisttypeFieldNumber;
const int RspConfInfoToMC_WhiteListInfo::kPartsFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC_WhiteListInfo::RspConfInfoToMC_WhiteListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC.WhiteListInfo)
}

void RspConfInfoToMC_WhiteListInfo::InitAsDefaultInstance() {
}

RspConfInfoToMC_WhiteListInfo::RspConfInfoToMC_WhiteListInfo(const RspConfInfoToMC_WhiteListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC.WhiteListInfo)
}

void RspConfInfoToMC_WhiteListInfo::SharedCtor() {
  _cached_size_ = 0;
  whitelisttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC_WhiteListInfo::~RspConfInfoToMC_WhiteListInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  SharedDtor();
}

void RspConfInfoToMC_WhiteListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspConfInfoToMC_WhiteListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC_WhiteListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_WhiteListInfo_descriptor_;
}

const RspConfInfoToMC_WhiteListInfo& RspConfInfoToMC_WhiteListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC_WhiteListInfo* RspConfInfoToMC_WhiteListInfo::default_instance_ = NULL;

RspConfInfoToMC_WhiteListInfo* RspConfInfoToMC_WhiteListInfo::New() const {
  return new RspConfInfoToMC_WhiteListInfo;
}

void RspConfInfoToMC_WhiteListInfo::Clear() {
  whitelisttype_ = 0u;
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC_WhiteListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 whitelisttype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &whitelisttype_)));
          set_has_whitelisttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parts;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 2;
      case 2: {
        if (tag == 18) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  return false;
#undef DO_
}

void RspConfInfoToMC_WhiteListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  // optional uint32 whitelisttype = 1;
  if (has_whitelisttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->whitelisttype(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 2;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC.WhiteListInfo)
}

::google::protobuf::uint8* RspConfInfoToMC_WhiteListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  // optional uint32 whitelisttype = 1;
  if (has_whitelisttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->whitelisttype(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 2;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC.WhiteListInfo)
  return target;
}

int RspConfInfoToMC_WhiteListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 whitelisttype = 1;
    if (has_whitelisttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->whitelisttype());
    }

  }
  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo parts = 2;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC_WhiteListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC_WhiteListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC_WhiteListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC_WhiteListInfo::MergeFrom(const RspConfInfoToMC_WhiteListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_whitelisttype()) {
      set_whitelisttype(from.whitelisttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC_WhiteListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC_WhiteListInfo::CopyFrom(const RspConfInfoToMC_WhiteListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC_WhiteListInfo::IsInitialized() const {

  return true;
}

void RspConfInfoToMC_WhiteListInfo::Swap(RspConfInfoToMC_WhiteListInfo* other) {
  if (other != this) {
    std::swap(whitelisttype_, other->whitelisttype_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC_WhiteListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_WhiteListInfo_descriptor_;
  metadata.reflection = RspConfInfoToMC_WhiteListInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspConfInfoToMC::kIsokFieldNumber;
const int RspConfInfoToMC::kSuidFieldNumber;
const int RspConfInfoToMC::kConfidFieldNumber;
const int RspConfInfoToMC::kConfpwdFieldNumber;
const int RspConfInfoToMC::kRecvpwdFieldNumber;
const int RspConfInfoToMC::kBegintimeFieldNumber;
const int RspConfInfoToMC::kEndtimeFieldNumber;
const int RspConfInfoToMC::kIslimitedFieldNumber;
const int RspConfInfoToMC::kSubjectFieldNumber;
const int RspConfInfoToMC::kConftypeFieldNumber;
const int RspConfInfoToMC::kConfstartmethodFieldNumber;
const int RspConfInfoToMC::kMutetypeFieldNumber;
const int RspConfInfoToMC::kTernumsFieldNumber;
const int RspConfInfoToMC::kConfcfgFieldNumber;
const int RspConfInfoToMC::kFailurereasonFieldNumber;
const int RspConfInfoToMC::kParticipantsFieldNumber;
const int RspConfInfoToMC::kConfctrlsuidFieldNumber;
const int RspConfInfoToMC::kAudioenableFieldNumber;
const int RspConfInfoToMC::kVideoenableFieldNumber;
const int RspConfInfoToMC::kConfnameFieldNumber;
const int RspConfInfoToMC::kEncryptalgFieldNumber;
const int RspConfInfoToMC::kLivesetinfoFieldNumber;
const int RspConfInfoToMC::kAutorecFieldNumber;
const int RspConfInfoToMC::kConfreportidFieldNumber;
const int RspConfInfoToMC::kErrorcodeFieldNumber;
const int RspConfInfoToMC::kRollcalllistFieldNumber;
const int RspConfInfoToMC::kPermanentenableFieldNumber;
const int RspConfInfoToMC::kAutopolllistFieldNumber;
const int RspConfInfoToMC::kConfrelcompidFieldNumber;
const int RspConfInfoToMC::kComplicinfosFieldNumber;
const int RspConfInfoToMC::kParttotalnumsFieldNumber;
const int RspConfInfoToMC::kPartalreadynumsFieldNumber;
const int RspConfInfoToMC::kRctotalnumsFieldNumber;
const int RspConfInfoToMC::kRcalreadynumsFieldNumber;
const int RspConfInfoToMC::kAptotalnumsFieldNumber;
const int RspConfInfoToMC::kApalreadynumsFieldNumber;
const int RspConfInfoToMC::kWhitelistsFieldNumber;
#endif  // !_MSC_VER

RspConfInfoToMC::RspConfInfoToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspConfInfoToMC)
}

void RspConfInfoToMC::InitAsDefaultInstance() {
  confcfg_ = const_cast< ::SRMsgs::RspConfInfoToMC_Confcfg*>(&::SRMsgs::RspConfInfoToMC_Confcfg::default_instance());
  livesetinfo_ = const_cast< ::SRMsgs::RspConfInfoToMC_LiveSetting*>(&::SRMsgs::RspConfInfoToMC_LiveSetting::default_instance());
}

RspConfInfoToMC::RspConfInfoToMC(const RspConfInfoToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspConfInfoToMC)
}

void RspConfInfoToMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  suid_ = 0u;
  confid_ = GOOGLE_ULONGLONG(0);
  confpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  islimited_ = false;
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conftype_ = 0u;
  confstartmethod_ = 0u;
  mutetype_ = 0u;
  ternums_ = 0u;
  confcfg_ = NULL;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confctrlsuid_ = 0u;
  audioenable_ = 0u;
  videoenable_ = 0u;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptalg_ = 0u;
  livesetinfo_ = NULL;
  autorec_ = 0u;
  confreportid_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0u;
  permanentenable_ = 0u;
  confrelcompid_ = 0u;
  parttotalnums_ = 0u;
  partalreadynums_ = 0u;
  rctotalnums_ = 0u;
  rcalreadynums_ = 0u;
  aptotalnums_ = 0u;
  apalreadynums_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspConfInfoToMC::~RspConfInfoToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspConfInfoToMC)
  SharedDtor();
}

void RspConfInfoToMC::SharedDtor() {
  if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confpwd_;
  }
  if (recvpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvpwd_;
  }
  if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (this != default_instance_) {
    delete confcfg_;
    delete livesetinfo_;
  }
}

void RspConfInfoToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspConfInfoToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspConfInfoToMC_descriptor_;
}

const RspConfInfoToMC& RspConfInfoToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspConfInfoToMC* RspConfInfoToMC::default_instance_ = NULL;

RspConfInfoToMC* RspConfInfoToMC::New() const {
  return new RspConfInfoToMC;
}

void RspConfInfoToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspConfInfoToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confid_, islimited_);
    if (has_confpwd()) {
      if (confpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confpwd_->clear();
      }
    }
    if (has_recvpwd()) {
      if (recvpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recvpwd_->clear();
      }
    }
    if (has_begintime()) {
      if (begintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        begintime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(conftype_, ternums_);
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_confcfg()) {
      if (confcfg_ != NULL) confcfg_->::SRMsgs::RspConfInfoToMC_Confcfg::Clear();
    }
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failurereason_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(confctrlsuid_, audioenable_);
    ZR_(videoenable_, encryptalg_);
    ZR_(confreportid_, autorec_);
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
    if (has_livesetinfo()) {
      if (livesetinfo_ != NULL) livesetinfo_->::SRMsgs::RspConfInfoToMC_LiveSetting::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 3573547008) {
    ZR_(permanentenable_, confrelcompid_);
    ZR_(parttotalnums_, partalreadynums_);
    errorcode_ = 0u;
  }
  ZR_(rctotalnums_, apalreadynums_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  participants_.Clear();
  rollcalllist_.Clear();
  autopolllist_.Clear();
  complicinfos_.Clear();
  whitelists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspConfInfoToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspConfInfoToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_suid;
        break;
      }

      // optional uint32 suid = 2;
      case 2: {
        if (tag == 16) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 3;
      case 3: {
        if (tag == 24) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_confpwd;
        break;
      }

      // optional string confpwd = 4;
      case 4: {
        if (tag == 34) {
         parse_confpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confpwd().data(), this->confpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confpwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recvpwd;
        break;
      }

      // optional string recvpwd = 5;
      case 5: {
        if (tag == 42) {
         parse_recvpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recvpwd().data(), this->recvpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recvpwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_begintime;
        break;
      }

      // optional string begintime = 6;
      case 6: {
        if (tag == 50) {
         parse_begintime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "begintime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_endtime;
        break;
      }

      // optional string endtime = 7;
      case 7: {
        if (tag == 58) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_islimited;
        break;
      }

      // optional bool islimited = 8;
      case 8: {
        if (tag == 64) {
         parse_islimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islimited_)));
          set_has_islimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_subject;
        break;
      }

      // optional string subject = 9;
      case 9: {
        if (tag == 74) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_conftype;
        break;
      }

      // optional uint32 conftype = 10;
      case 10: {
        if (tag == 80) {
         parse_conftype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conftype_)));
          set_has_conftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_confstartmethod;
        break;
      }

      // optional uint32 confstartmethod = 11;
      case 11: {
        if (tag == 88) {
         parse_confstartmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confstartmethod_)));
          set_has_confstartmethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mutetype;
        break;
      }

      // optional uint32 mutetype = 12;
      case 12: {
        if (tag == 96) {
         parse_mutetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mutetype_)));
          set_has_mutetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ternums;
        break;
      }

      // optional uint32 ternums = 13;
      case 13: {
        if (tag == 104) {
         parse_ternums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternums_)));
          set_has_ternums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_confcfg;
        break;
      }

      // optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
      case 14: {
        if (tag == 114) {
         parse_confcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confcfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_failurereason;
        break;
      }

      // optional string failurereason = 15;
      case 15: {
        if (tag == 122) {
         parse_failurereason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failurereason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_participants;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
      case 16: {
        if (tag == 130) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_participants;
        if (input->ExpectTag(136)) goto parse_confctrlsuid;
        break;
      }

      // optional uint32 confctrlsuid = 17;
      case 17: {
        if (tag == 136) {
         parse_confctrlsuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confctrlsuid_)));
          set_has_confctrlsuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_audioenable;
        break;
      }

      // optional uint32 audioenable = 18;
      case 18: {
        if (tag == 144) {
         parse_audioenable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audioenable_)));
          set_has_audioenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_videoenable;
        break;
      }

      // optional uint32 videoenable = 19;
      case 19: {
        if (tag == 152) {
         parse_videoenable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &videoenable_)));
          set_has_videoenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_confname;
        break;
      }

      // optional string confname = 20;
      case 20: {
        if (tag == 162) {
         parse_confname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_encryptalg;
        break;
      }

      // optional uint32 encryptalg = 21;
      case 21: {
        if (tag == 168) {
         parse_encryptalg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encryptalg_)));
          set_has_encryptalg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_livesetinfo;
        break;
      }

      // optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
      case 22: {
        if (tag == 178) {
         parse_livesetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_livesetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_autorec;
        break;
      }

      // optional uint32 autorec = 23;
      case 23: {
        if (tag == 184) {
         parse_autorec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorec_)));
          set_has_autorec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_confreportid;
        break;
      }

      // optional uint64 confreportid = 24;
      case 24: {
        if (tag == 192) {
         parse_confreportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confreportid_)));
          set_has_confreportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 25;
      case 25: {
        if (tag == 200) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_rollcalllist;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
      case 26: {
        if (tag == 210) {
         parse_rollcalllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rollcalllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_rollcalllist;
        if (input->ExpectTag(216)) goto parse_permanentenable;
        break;
      }

      // optional uint32 permanentenable = 27;
      case 27: {
        if (tag == 216) {
         parse_permanentenable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permanentenable_)));
          set_has_permanentenable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_autopolllist;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
      case 28: {
        if (tag == 226) {
         parse_autopolllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autopolllist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_autopolllist;
        if (input->ExpectTag(232)) goto parse_confrelcompid;
        break;
      }

      // optional uint32 confrelcompid = 29;
      case 29: {
        if (tag == 232) {
         parse_confrelcompid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confrelcompid_)));
          set_has_confrelcompid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_complicinfos;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.CompanyInfo complicinfos = 30;
      case 30: {
        if (tag == 242) {
         parse_complicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_complicinfos;
        if (input->ExpectTag(248)) goto parse_parttotalnums;
        break;
      }

      // optional uint32 parttotalnums = 31;
      case 31: {
        if (tag == 248) {
         parse_parttotalnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parttotalnums_)));
          set_has_parttotalnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_partalreadynums;
        break;
      }

      // optional uint32 partalreadynums = 32;
      case 32: {
        if (tag == 256) {
         parse_partalreadynums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partalreadynums_)));
          set_has_partalreadynums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_rctotalnums;
        break;
      }

      // optional uint32 rctotalnums = 33;
      case 33: {
        if (tag == 264) {
         parse_rctotalnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rctotalnums_)));
          set_has_rctotalnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_rcalreadynums;
        break;
      }

      // optional uint32 rcalreadynums = 34;
      case 34: {
        if (tag == 272) {
         parse_rcalreadynums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcalreadynums_)));
          set_has_rcalreadynums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_aptotalnums;
        break;
      }

      // optional uint32 aptotalnums = 35;
      case 35: {
        if (tag == 280) {
         parse_aptotalnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aptotalnums_)));
          set_has_aptotalnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_apalreadynums;
        break;
      }

      // optional uint32 apalreadynums = 36;
      case 36: {
        if (tag == 288) {
         parse_apalreadynums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apalreadynums_)));
          set_has_apalreadynums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_whitelists;
        break;
      }

      // repeated .SRMsgs.RspConfInfoToMC.WhiteListInfo whitelists = 37;
      case 37: {
        if (tag == 298) {
         parse_whitelists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whitelists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_whitelists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspConfInfoToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspConfInfoToMC)
  return false;
#undef DO_
}

void RspConfInfoToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspConfInfoToMC)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint32 suid = 2;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->suid(), output);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confid(), output);
  }

  // optional string confpwd = 4;
  if (has_confpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confpwd().data(), this->confpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->confpwd(), output);
  }

  // optional string recvpwd = 5;
  if (has_recvpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvpwd().data(), this->recvpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->recvpwd(), output);
  }

  // optional string begintime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->begintime(), output);
  }

  // optional string endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->endtime(), output);
  }

  // optional bool islimited = 8;
  if (has_islimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->islimited(), output);
  }

  // optional string subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->subject(), output);
  }

  // optional uint32 conftype = 10;
  if (has_conftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->conftype(), output);
  }

  // optional uint32 confstartmethod = 11;
  if (has_confstartmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->confstartmethod(), output);
  }

  // optional uint32 mutetype = 12;
  if (has_mutetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mutetype(), output);
  }

  // optional uint32 ternums = 13;
  if (has_ternums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ternums(), output);
  }

  // optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
  if (has_confcfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->confcfg(), output);
  }

  // optional string failurereason = 15;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->failurereason(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->participants(i), output);
  }

  // optional uint32 confctrlsuid = 17;
  if (has_confctrlsuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->confctrlsuid(), output);
  }

  // optional uint32 audioenable = 18;
  if (has_audioenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->audioenable(), output);
  }

  // optional uint32 videoenable = 19;
  if (has_videoenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->videoenable(), output);
  }

  // optional string confname = 20;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->confname(), output);
  }

  // optional uint32 encryptalg = 21;
  if (has_encryptalg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->encryptalg(), output);
  }

  // optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
  if (has_livesetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->livesetinfo(), output);
  }

  // optional uint32 autorec = 23;
  if (has_autorec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->autorec(), output);
  }

  // optional uint64 confreportid = 24;
  if (has_confreportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->confreportid(), output);
  }

  // optional uint32 errorcode = 25;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->errorcode(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
  for (int i = 0; i < this->rollcalllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->rollcalllist(i), output);
  }

  // optional uint32 permanentenable = 27;
  if (has_permanentenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->permanentenable(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->autopolllist(i), output);
  }

  // optional uint32 confrelcompid = 29;
  if (has_confrelcompid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->confrelcompid(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.CompanyInfo complicinfos = 30;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->complicinfos(i), output);
  }

  // optional uint32 parttotalnums = 31;
  if (has_parttotalnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->parttotalnums(), output);
  }

  // optional uint32 partalreadynums = 32;
  if (has_partalreadynums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->partalreadynums(), output);
  }

  // optional uint32 rctotalnums = 33;
  if (has_rctotalnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->rctotalnums(), output);
  }

  // optional uint32 rcalreadynums = 34;
  if (has_rcalreadynums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->rcalreadynums(), output);
  }

  // optional uint32 aptotalnums = 35;
  if (has_aptotalnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->aptotalnums(), output);
  }

  // optional uint32 apalreadynums = 36;
  if (has_apalreadynums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->apalreadynums(), output);
  }

  // repeated .SRMsgs.RspConfInfoToMC.WhiteListInfo whitelists = 37;
  for (int i = 0; i < this->whitelists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->whitelists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspConfInfoToMC)
}

::google::protobuf::uint8* RspConfInfoToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspConfInfoToMC)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint32 suid = 2;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->suid(), target);
  }

  // optional uint64 confid = 3;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confid(), target);
  }

  // optional string confpwd = 4;
  if (has_confpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confpwd().data(), this->confpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->confpwd(), target);
  }

  // optional string recvpwd = 5;
  if (has_recvpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvpwd().data(), this->recvpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recvpwd(), target);
  }

  // optional string begintime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "begintime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->begintime(), target);
  }

  // optional string endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->endtime(), target);
  }

  // optional bool islimited = 8;
  if (has_islimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->islimited(), target);
  }

  // optional string subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subject(), target);
  }

  // optional uint32 conftype = 10;
  if (has_conftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->conftype(), target);
  }

  // optional uint32 confstartmethod = 11;
  if (has_confstartmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->confstartmethod(), target);
  }

  // optional uint32 mutetype = 12;
  if (has_mutetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mutetype(), target);
  }

  // optional uint32 ternums = 13;
  if (has_ternums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ternums(), target);
  }

  // optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
  if (has_confcfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->confcfg(), target);
  }

  // optional string failurereason = 15;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->failurereason(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->participants(i), target);
  }

  // optional uint32 confctrlsuid = 17;
  if (has_confctrlsuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->confctrlsuid(), target);
  }

  // optional uint32 audioenable = 18;
  if (has_audioenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->audioenable(), target);
  }

  // optional uint32 videoenable = 19;
  if (has_videoenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->videoenable(), target);
  }

  // optional string confname = 20;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->confname(), target);
  }

  // optional uint32 encryptalg = 21;
  if (has_encryptalg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->encryptalg(), target);
  }

  // optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
  if (has_livesetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->livesetinfo(), target);
  }

  // optional uint32 autorec = 23;
  if (has_autorec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->autorec(), target);
  }

  // optional uint64 confreportid = 24;
  if (has_confreportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->confreportid(), target);
  }

  // optional uint32 errorcode = 25;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->errorcode(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
  for (int i = 0; i < this->rollcalllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->rollcalllist(i), target);
  }

  // optional uint32 permanentenable = 27;
  if (has_permanentenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->permanentenable(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
  for (int i = 0; i < this->autopolllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->autopolllist(i), target);
  }

  // optional uint32 confrelcompid = 29;
  if (has_confrelcompid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->confrelcompid(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.CompanyInfo complicinfos = 30;
  for (int i = 0; i < this->complicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->complicinfos(i), target);
  }

  // optional uint32 parttotalnums = 31;
  if (has_parttotalnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->parttotalnums(), target);
  }

  // optional uint32 partalreadynums = 32;
  if (has_partalreadynums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->partalreadynums(), target);
  }

  // optional uint32 rctotalnums = 33;
  if (has_rctotalnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->rctotalnums(), target);
  }

  // optional uint32 rcalreadynums = 34;
  if (has_rcalreadynums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->rcalreadynums(), target);
  }

  // optional uint32 aptotalnums = 35;
  if (has_aptotalnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->aptotalnums(), target);
  }

  // optional uint32 apalreadynums = 36;
  if (has_apalreadynums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->apalreadynums(), target);
  }

  // repeated .SRMsgs.RspConfInfoToMC.WhiteListInfo whitelists = 37;
  for (int i = 0; i < this->whitelists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->whitelists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspConfInfoToMC)
  return target;
}

int RspConfInfoToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 suid = 2;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional uint64 confid = 3;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional string confpwd = 4;
    if (has_confpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confpwd());
    }

    // optional string recvpwd = 5;
    if (has_recvpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvpwd());
    }

    // optional string begintime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional bool islimited = 8;
    if (has_islimited()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string subject = 9;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional uint32 conftype = 10;
    if (has_conftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conftype());
    }

    // optional uint32 confstartmethod = 11;
    if (has_confstartmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confstartmethod());
    }

    // optional uint32 mutetype = 12;
    if (has_mutetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mutetype());
    }

    // optional uint32 ternums = 13;
    if (has_ternums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternums());
    }

    // optional .SRMsgs.RspConfInfoToMC.Confcfg confcfg = 14;
    if (has_confcfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confcfg());
    }

    // optional string failurereason = 15;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 confctrlsuid = 17;
    if (has_confctrlsuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confctrlsuid());
    }

    // optional uint32 audioenable = 18;
    if (has_audioenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audioenable());
    }

    // optional uint32 videoenable = 19;
    if (has_videoenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->videoenable());
    }

    // optional string confname = 20;
    if (has_confname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // optional uint32 encryptalg = 21;
    if (has_encryptalg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encryptalg());
    }

    // optional .SRMsgs.RspConfInfoToMC.LiveSetting livesetinfo = 22;
    if (has_livesetinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->livesetinfo());
    }

    // optional uint32 autorec = 23;
    if (has_autorec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorec());
    }

    // optional uint64 confreportid = 24;
    if (has_confreportid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confreportid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 errorcode = 25;
    if (has_errorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 permanentenable = 27;
    if (has_permanentenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permanentenable());
    }

    // optional uint32 confrelcompid = 29;
    if (has_confrelcompid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confrelcompid());
    }

    // optional uint32 parttotalnums = 31;
    if (has_parttotalnums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parttotalnums());
    }

    // optional uint32 partalreadynums = 32;
    if (has_partalreadynums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partalreadynums());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 rctotalnums = 33;
    if (has_rctotalnums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rctotalnums());
    }

    // optional uint32 rcalreadynums = 34;
    if (has_rcalreadynums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcalreadynums());
    }

    // optional uint32 aptotalnums = 35;
    if (has_aptotalnums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aptotalnums());
    }

    // optional uint32 apalreadynums = 36;
    if (has_apalreadynums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apalreadynums());
    }

  }
  // repeated .SRMsgs.RspConfInfoToMC.ParticipantInfo participants = 16;
  total_size += 2 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }

  // repeated .SRMsgs.RspConfInfoToMC.RollCallInfo rollcalllist = 26;
  total_size += 2 * this->rollcalllist_size();
  for (int i = 0; i < this->rollcalllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rollcalllist(i));
  }

  // repeated .SRMsgs.RspConfInfoToMC.AutoPollInfo autopolllist = 28;
  total_size += 2 * this->autopolllist_size();
  for (int i = 0; i < this->autopolllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autopolllist(i));
  }

  // repeated .SRMsgs.RspConfInfoToMC.CompanyInfo complicinfos = 30;
  total_size += 2 * this->complicinfos_size();
  for (int i = 0; i < this->complicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complicinfos(i));
  }

  // repeated .SRMsgs.RspConfInfoToMC.WhiteListInfo whitelists = 37;
  total_size += 2 * this->whitelists_size();
  for (int i = 0; i < this->whitelists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whitelists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspConfInfoToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspConfInfoToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspConfInfoToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspConfInfoToMC::MergeFrom(const RspConfInfoToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  rollcalllist_.MergeFrom(from.rollcalllist_);
  autopolllist_.MergeFrom(from.autopolllist_);
  complicinfos_.MergeFrom(from.complicinfos_);
  whitelists_.MergeFrom(from.whitelists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_confpwd()) {
      set_confpwd(from.confpwd());
    }
    if (from.has_recvpwd()) {
      set_recvpwd(from.recvpwd());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_islimited()) {
      set_islimited(from.islimited());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_conftype()) {
      set_conftype(from.conftype());
    }
    if (from.has_confstartmethod()) {
      set_confstartmethod(from.confstartmethod());
    }
    if (from.has_mutetype()) {
      set_mutetype(from.mutetype());
    }
    if (from.has_ternums()) {
      set_ternums(from.ternums());
    }
    if (from.has_confcfg()) {
      mutable_confcfg()->::SRMsgs::RspConfInfoToMC_Confcfg::MergeFrom(from.confcfg());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_confctrlsuid()) {
      set_confctrlsuid(from.confctrlsuid());
    }
    if (from.has_audioenable()) {
      set_audioenable(from.audioenable());
    }
    if (from.has_videoenable()) {
      set_videoenable(from.videoenable());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_encryptalg()) {
      set_encryptalg(from.encryptalg());
    }
    if (from.has_livesetinfo()) {
      mutable_livesetinfo()->::SRMsgs::RspConfInfoToMC_LiveSetting::MergeFrom(from.livesetinfo());
    }
    if (from.has_autorec()) {
      set_autorec(from.autorec());
    }
    if (from.has_confreportid()) {
      set_confreportid(from.confreportid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_permanentenable()) {
      set_permanentenable(from.permanentenable());
    }
    if (from.has_confrelcompid()) {
      set_confrelcompid(from.confrelcompid());
    }
    if (from.has_parttotalnums()) {
      set_parttotalnums(from.parttotalnums());
    }
    if (from.has_partalreadynums()) {
      set_partalreadynums(from.partalreadynums());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_rctotalnums()) {
      set_rctotalnums(from.rctotalnums());
    }
    if (from.has_rcalreadynums()) {
      set_rcalreadynums(from.rcalreadynums());
    }
    if (from.has_aptotalnums()) {
      set_aptotalnums(from.aptotalnums());
    }
    if (from.has_apalreadynums()) {
      set_apalreadynums(from.apalreadynums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspConfInfoToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspConfInfoToMC::CopyFrom(const RspConfInfoToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspConfInfoToMC::IsInitialized() const {

  return true;
}

void RspConfInfoToMC::Swap(RspConfInfoToMC* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(suid_, other->suid_);
    std::swap(confid_, other->confid_);
    std::swap(confpwd_, other->confpwd_);
    std::swap(recvpwd_, other->recvpwd_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(islimited_, other->islimited_);
    std::swap(subject_, other->subject_);
    std::swap(conftype_, other->conftype_);
    std::swap(confstartmethod_, other->confstartmethod_);
    std::swap(mutetype_, other->mutetype_);
    std::swap(ternums_, other->ternums_);
    std::swap(confcfg_, other->confcfg_);
    std::swap(failurereason_, other->failurereason_);
    participants_.Swap(&other->participants_);
    std::swap(confctrlsuid_, other->confctrlsuid_);
    std::swap(audioenable_, other->audioenable_);
    std::swap(videoenable_, other->videoenable_);
    std::swap(confname_, other->confname_);
    std::swap(encryptalg_, other->encryptalg_);
    std::swap(livesetinfo_, other->livesetinfo_);
    std::swap(autorec_, other->autorec_);
    std::swap(confreportid_, other->confreportid_);
    std::swap(errorcode_, other->errorcode_);
    rollcalllist_.Swap(&other->rollcalllist_);
    std::swap(permanentenable_, other->permanentenable_);
    autopolllist_.Swap(&other->autopolllist_);
    std::swap(confrelcompid_, other->confrelcompid_);
    complicinfos_.Swap(&other->complicinfos_);
    std::swap(parttotalnums_, other->parttotalnums_);
    std::swap(partalreadynums_, other->partalreadynums_);
    std::swap(rctotalnums_, other->rctotalnums_);
    std::swap(rcalreadynums_, other->rcalreadynums_);
    std::swap(aptotalnums_, other->aptotalnums_);
    std::swap(apalreadynums_, other->apalreadynums_);
    whitelists_.Swap(&other->whitelists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspConfInfoToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspConfInfoToMC_descriptor_;
  metadata.reflection = RspConfInfoToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndDevtoserHeart::kTokenFieldNumber;
#endif  // !_MSC_VER

IndDevtoserHeart::IndDevtoserHeart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndDevtoserHeart)
}

void IndDevtoserHeart::InitAsDefaultInstance() {
}

IndDevtoserHeart::IndDevtoserHeart(const IndDevtoserHeart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndDevtoserHeart)
}

void IndDevtoserHeart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndDevtoserHeart::~IndDevtoserHeart() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndDevtoserHeart)
  SharedDtor();
}

void IndDevtoserHeart::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndDevtoserHeart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndDevtoserHeart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndDevtoserHeart_descriptor_;
}

const IndDevtoserHeart& IndDevtoserHeart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndDevtoserHeart* IndDevtoserHeart::default_instance_ = NULL;

IndDevtoserHeart* IndDevtoserHeart::New() const {
  return new IndDevtoserHeart;
}

void IndDevtoserHeart::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndDevtoserHeart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndDevtoserHeart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndDevtoserHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndDevtoserHeart)
  return false;
#undef DO_
}

void IndDevtoserHeart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndDevtoserHeart)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndDevtoserHeart)
}

::google::protobuf::uint8* IndDevtoserHeart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndDevtoserHeart)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndDevtoserHeart)
  return target;
}

int IndDevtoserHeart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndDevtoserHeart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndDevtoserHeart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndDevtoserHeart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndDevtoserHeart::MergeFrom(const IndDevtoserHeart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndDevtoserHeart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndDevtoserHeart::CopyFrom(const IndDevtoserHeart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndDevtoserHeart::IsInitialized() const {

  return true;
}

void IndDevtoserHeart::Swap(IndDevtoserHeart* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndDevtoserHeart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndDevtoserHeart_descriptor_;
  metadata.reflection = IndDevtoserHeart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndUpSvrInfoToDevmgr_IPPORTInfo::kInnerFieldNumber;
const int IndUpSvrInfoToDevmgr_IPPORTInfo::kOuterFieldNumber;
const int IndUpSvrInfoToDevmgr_IPPORTInfo::kVpnFieldNumber;
#endif  // !_MSC_VER

IndUpSvrInfoToDevmgr_IPPORTInfo::IndUpSvrInfoToDevmgr_IPPORTInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::InitAsDefaultInstance() {
}

IndUpSvrInfoToDevmgr_IPPORTInfo::IndUpSvrInfoToDevmgr_IPPORTInfo(const IndUpSvrInfoToDevmgr_IPPORTInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrInfoToDevmgr_IPPORTInfo::~IndUpSvrInfoToDevmgr_IPPORTInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  SharedDtor();
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::SharedDtor() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (this != default_instance_) {
  }
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_IPPORTInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_;
}

const IndUpSvrInfoToDevmgr_IPPORTInfo& IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrInfoToDevmgr_IPPORTInfo* IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance_ = NULL;

IndUpSvrInfoToDevmgr_IPPORTInfo* IndUpSvrInfoToDevmgr_IPPORTInfo::New() const {
  return new IndUpSvrInfoToDevmgr_IPPORTInfo;
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_inner()) {
      if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inner_->clear();
      }
    }
    if (has_outer()) {
      if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        outer_->clear();
      }
    }
    if (has_vpn()) {
      if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vpn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrInfoToDevmgr_IPPORTInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inner().data(), this->inner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outer;
        break;
      }

      // optional string outer = 2;
      case 2: {
        if (tag == 18) {
         parse_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outer().data(), this->outer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "outer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vpn;
        break;
      }

      // optional string vpn = 3;
      case 3: {
        if (tag == 26) {
         parse_vpn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vpn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vpn().data(), this->vpn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vpn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  return false;
#undef DO_
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner(), output);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->outer(), output);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vpn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
}

::google::protobuf::uint8* IndUpSvrInfoToDevmgr_IPPORTInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner(), target);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outer(), target);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vpn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo)
  return target;
}

int IndUpSvrInfoToDevmgr_IPPORTInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inner = 1;
    if (has_inner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inner());
    }

    // optional string outer = 2;
    if (has_outer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer());
    }

    // optional string vpn = 3;
    if (has_vpn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vpn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrInfoToDevmgr_IPPORTInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrInfoToDevmgr_IPPORTInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::MergeFrom(const IndUpSvrInfoToDevmgr_IPPORTInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inner()) {
      set_inner(from.inner());
    }
    if (from.has_outer()) {
      set_outer(from.outer());
    }
    if (from.has_vpn()) {
      set_vpn(from.vpn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::CopyFrom(const IndUpSvrInfoToDevmgr_IPPORTInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrInfoToDevmgr_IPPORTInfo::IsInitialized() const {

  return true;
}

void IndUpSvrInfoToDevmgr_IPPORTInfo::Swap(IndUpSvrInfoToDevmgr_IPPORTInfo* other) {
  if (other != this) {
    std::swap(inner_, other->inner_);
    std::swap(outer_, other->outer_);
    std::swap(vpn_, other->vpn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrInfoToDevmgr_IPPORTInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrInfoToDevmgr_IPPORTInfo_descriptor_;
  metadata.reflection = IndUpSvrInfoToDevmgr_IPPORTInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrInfoToDevmgr_ServerInfo::kSvrtypeFieldNumber;
const int IndUpSvrInfoToDevmgr_ServerInfo::kDeviceidFieldNumber;
const int IndUpSvrInfoToDevmgr_ServerInfo::kIpportFieldNumber;
#endif  // !_MSC_VER

IndUpSvrInfoToDevmgr_ServerInfo::IndUpSvrInfoToDevmgr_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
}

void IndUpSvrInfoToDevmgr_ServerInfo::InitAsDefaultInstance() {
  ipport_ = const_cast< ::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo*>(&::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo::default_instance());
}

IndUpSvrInfoToDevmgr_ServerInfo::IndUpSvrInfoToDevmgr_ServerInfo(const IndUpSvrInfoToDevmgr_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
}

void IndUpSvrInfoToDevmgr_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  deviceid_ = 0u;
  ipport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrInfoToDevmgr_ServerInfo::~IndUpSvrInfoToDevmgr_ServerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  SharedDtor();
}

void IndUpSvrInfoToDevmgr_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ipport_;
  }
}

void IndUpSvrInfoToDevmgr_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrInfoToDevmgr_ServerInfo_descriptor_;
}

const IndUpSvrInfoToDevmgr_ServerInfo& IndUpSvrInfoToDevmgr_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrInfoToDevmgr_ServerInfo* IndUpSvrInfoToDevmgr_ServerInfo::default_instance_ = NULL;

IndUpSvrInfoToDevmgr_ServerInfo* IndUpSvrInfoToDevmgr_ServerInfo::New() const {
  return new IndUpSvrInfoToDevmgr_ServerInfo;
}

void IndUpSvrInfoToDevmgr_ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpSvrInfoToDevmgr_ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(svrtype_, deviceid_);
    if (has_ipport()) {
      if (ipport_ != NULL) ipport_->::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrInfoToDevmgr_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipport;
        break;
      }

      // optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
      case 3: {
        if (tag == 26) {
         parse_ipport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  return false;
#undef DO_
}

void IndUpSvrInfoToDevmgr_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  if (has_ipport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ipport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
}

::google::protobuf::uint8* IndUpSvrInfoToDevmgr_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
  if (has_ipport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ipport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo)
  return target;
}

int IndUpSvrInfoToDevmgr_ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrtype = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional .SRMsgs.IndUpSvrInfoToDevmgr.IPPORTInfo ipport = 3;
    if (has_ipport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrInfoToDevmgr_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrInfoToDevmgr_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrInfoToDevmgr_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrInfoToDevmgr_ServerInfo::MergeFrom(const IndUpSvrInfoToDevmgr_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_ipport()) {
      mutable_ipport()->::SRMsgs::IndUpSvrInfoToDevmgr_IPPORTInfo::MergeFrom(from.ipport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrInfoToDevmgr_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrInfoToDevmgr_ServerInfo::CopyFrom(const IndUpSvrInfoToDevmgr_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrInfoToDevmgr_ServerInfo::IsInitialized() const {

  return true;
}

void IndUpSvrInfoToDevmgr_ServerInfo::Swap(IndUpSvrInfoToDevmgr_ServerInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(ipport_, other->ipport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrInfoToDevmgr_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrInfoToDevmgr_ServerInfo_descriptor_;
  metadata.reflection = IndUpSvrInfoToDevmgr_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrInfoToDevmgr_DomainInfo::kDomainnameFieldNumber;
const int IndUpSvrInfoToDevmgr_DomainInfo::kLevelFieldNumber;
const int IndUpSvrInfoToDevmgr_DomainInfo::kSvrinfosFieldNumber;
#endif  // !_MSC_VER

IndUpSvrInfoToDevmgr_DomainInfo::IndUpSvrInfoToDevmgr_DomainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
}

void IndUpSvrInfoToDevmgr_DomainInfo::InitAsDefaultInstance() {
}

IndUpSvrInfoToDevmgr_DomainInfo::IndUpSvrInfoToDevmgr_DomainInfo(const IndUpSvrInfoToDevmgr_DomainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
}

void IndUpSvrInfoToDevmgr_DomainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrInfoToDevmgr_DomainInfo::~IndUpSvrInfoToDevmgr_DomainInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  SharedDtor();
}

void IndUpSvrInfoToDevmgr_DomainInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void IndUpSvrInfoToDevmgr_DomainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr_DomainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrInfoToDevmgr_DomainInfo_descriptor_;
}

const IndUpSvrInfoToDevmgr_DomainInfo& IndUpSvrInfoToDevmgr_DomainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrInfoToDevmgr_DomainInfo* IndUpSvrInfoToDevmgr_DomainInfo::default_instance_ = NULL;

IndUpSvrInfoToDevmgr_DomainInfo* IndUpSvrInfoToDevmgr_DomainInfo::New() const {
  return new IndUpSvrInfoToDevmgr_DomainInfo;
}

void IndUpSvrInfoToDevmgr_DomainInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    level_ = 0;
  }
  svrinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrInfoToDevmgr_DomainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional sint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        break;
      }

      // repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_svrinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  return false;
#undef DO_
}

void IndUpSvrInfoToDevmgr_DomainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domainname(), output);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->svrinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
}

::google::protobuf::uint8* IndUpSvrInfoToDevmgr_DomainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->svrinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo)
  return target;
}

int IndUpSvrInfoToDevmgr_DomainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainname = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.ServerInfo svrinfos = 3;
  total_size += 1 * this->svrinfos_size();
  for (int i = 0; i < this->svrinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrInfoToDevmgr_DomainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrInfoToDevmgr_DomainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrInfoToDevmgr_DomainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrInfoToDevmgr_DomainInfo::MergeFrom(const IndUpSvrInfoToDevmgr_DomainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrinfos_.MergeFrom(from.svrinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrInfoToDevmgr_DomainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrInfoToDevmgr_DomainInfo::CopyFrom(const IndUpSvrInfoToDevmgr_DomainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrInfoToDevmgr_DomainInfo::IsInitialized() const {

  return true;
}

void IndUpSvrInfoToDevmgr_DomainInfo::Swap(IndUpSvrInfoToDevmgr_DomainInfo* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    std::swap(level_, other->level_);
    svrinfos_.Swap(&other->svrinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrInfoToDevmgr_DomainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrInfoToDevmgr_DomainInfo_descriptor_;
  metadata.reflection = IndUpSvrInfoToDevmgr_DomainInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrInfoToDevmgr::kDeviceidFieldNumber;
const int IndUpSvrInfoToDevmgr::kTokenFieldNumber;
const int IndUpSvrInfoToDevmgr::kAddordelFieldNumber;
const int IndUpSvrInfoToDevmgr::kDomaininfosFieldNumber;
#endif  // !_MSC_VER

IndUpSvrInfoToDevmgr::IndUpSvrInfoToDevmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrInfoToDevmgr)
}

void IndUpSvrInfoToDevmgr::InitAsDefaultInstance() {
}

IndUpSvrInfoToDevmgr::IndUpSvrInfoToDevmgr(const IndUpSvrInfoToDevmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrInfoToDevmgr)
}

void IndUpSvrInfoToDevmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addordel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrInfoToDevmgr::~IndUpSvrInfoToDevmgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrInfoToDevmgr)
  SharedDtor();
}

void IndUpSvrInfoToDevmgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndUpSvrInfoToDevmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrInfoToDevmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrInfoToDevmgr_descriptor_;
}

const IndUpSvrInfoToDevmgr& IndUpSvrInfoToDevmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrInfoToDevmgr* IndUpSvrInfoToDevmgr::default_instance_ = NULL;

IndUpSvrInfoToDevmgr* IndUpSvrInfoToDevmgr::New() const {
  return new IndUpSvrInfoToDevmgr;
}

void IndUpSvrInfoToDevmgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpSvrInfoToDevmgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, addordel_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  domaininfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrInfoToDevmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrInfoToDevmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addordel;
        break;
      }

      // optional uint32 addordel = 3;
      case 3: {
        if (tag == 24) {
         parse_addordel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addordel_)));
          set_has_addordel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        break;
      }

      // repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
      case 4: {
        if (tag == 34) {
         parse_domaininfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domaininfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrInfoToDevmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrInfoToDevmgr)
  return false;
#undef DO_
}

void IndUpSvrInfoToDevmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addordel(), output);
  }

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->domaininfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrInfoToDevmgr)
}

::google::protobuf::uint8* IndUpSvrInfoToDevmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 addordel = 3;
  if (has_addordel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addordel(), target);
  }

  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->domaininfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrInfoToDevmgr)
  return target;
}

int IndUpSvrInfoToDevmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 addordel = 3;
    if (has_addordel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addordel());
    }

  }
  // repeated .SRMsgs.IndUpSvrInfoToDevmgr.DomainInfo domaininfos = 4;
  total_size += 1 * this->domaininfos_size();
  for (int i = 0; i < this->domaininfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domaininfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrInfoToDevmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrInfoToDevmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrInfoToDevmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrInfoToDevmgr::MergeFrom(const IndUpSvrInfoToDevmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  domaininfos_.MergeFrom(from.domaininfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_addordel()) {
      set_addordel(from.addordel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrInfoToDevmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrInfoToDevmgr::CopyFrom(const IndUpSvrInfoToDevmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrInfoToDevmgr::IsInitialized() const {

  return true;
}

void IndUpSvrInfoToDevmgr::Swap(IndUpSvrInfoToDevmgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(addordel_, other->addordel_);
    domaininfos_.Swap(&other->domaininfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrInfoToDevmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrInfoToDevmgr_descriptor_;
  metadata.reflection = IndUpSvrInfoToDevmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndUpCompCapInfoToDevmgr_LicenceInfo::kLicencetypeFieldNumber;
const int IndUpCompCapInfoToDevmgr_LicenceInfo::kLicencenumFieldNumber;
const int IndUpCompCapInfoToDevmgr_LicenceInfo::kStarttimeFieldNumber;
const int IndUpCompCapInfoToDevmgr_LicenceInfo::kExptimeFieldNumber;
#endif  // !_MSC_VER

IndUpCompCapInfoToDevmgr_LicenceInfo::IndUpCompCapInfoToDevmgr_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::InitAsDefaultInstance() {
}

IndUpCompCapInfoToDevmgr_LicenceInfo::IndUpCompCapInfoToDevmgr_LicenceInfo(const IndUpCompCapInfoToDevmgr_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpCompCapInfoToDevmgr_LicenceInfo::~IndUpCompCapInfoToDevmgr_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  SharedDtor();
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exptime_;
  }
  if (this != default_instance_) {
  }
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_;
}

const IndUpCompCapInfoToDevmgr_LicenceInfo& IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpCompCapInfoToDevmgr_LicenceInfo* IndUpCompCapInfoToDevmgr_LicenceInfo::default_instance_ = NULL;

IndUpCompCapInfoToDevmgr_LicenceInfo* IndUpCompCapInfoToDevmgr_LicenceInfo::New() const {
  return new IndUpCompCapInfoToDevmgr_LicenceInfo;
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpCompCapInfoToDevmgr_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(licencetype_, licencenum_);
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_exptime()) {
      if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exptime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpCompCapInfoToDevmgr_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_starttime;
        break;
      }

      // optional string starttime = 3;
      case 3: {
        if (tag == 26) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exptime;
        break;
      }

      // optional string exptime = 4;
      case 4: {
        if (tag == 34) {
         parse_exptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exptime().data(), this->exptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  return false;
#undef DO_
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
}

::google::protobuf::uint8* IndUpCompCapInfoToDevmgr_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo)
  return target;
}

int IndUpCompCapInfoToDevmgr_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

    // optional string starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string exptime = 4;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpCompCapInfoToDevmgr_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpCompCapInfoToDevmgr_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::MergeFrom(const IndUpCompCapInfoToDevmgr_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::CopyFrom(const IndUpCompCapInfoToDevmgr_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpCompCapInfoToDevmgr_LicenceInfo::IsInitialized() const {

  return true;
}

void IndUpCompCapInfoToDevmgr_LicenceInfo::Swap(IndUpCompCapInfoToDevmgr_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(starttime_, other->starttime_);
    std::swap(exptime_, other->exptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpCompCapInfoToDevmgr_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpCompCapInfoToDevmgr_LicenceInfo_descriptor_;
  metadata.reflection = IndUpCompCapInfoToDevmgr_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpCompCapInfoToDevmgr_CompanyInfo::kCompanyidFieldNumber;
const int IndUpCompCapInfoToDevmgr_CompanyInfo::kCompanynameFieldNumber;
const int IndUpCompCapInfoToDevmgr_CompanyInfo::kTotallicinfosFieldNumber;
#endif  // !_MSC_VER

IndUpCompCapInfoToDevmgr_CompanyInfo::IndUpCompCapInfoToDevmgr_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::InitAsDefaultInstance() {
}

IndUpCompCapInfoToDevmgr_CompanyInfo::IndUpCompCapInfoToDevmgr_CompanyInfo(const IndUpCompCapInfoToDevmgr_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpCompCapInfoToDevmgr_CompanyInfo::~IndUpCompCapInfoToDevmgr_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  SharedDtor();
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
  }
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_;
}

const IndUpCompCapInfoToDevmgr_CompanyInfo& IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpCompCapInfoToDevmgr_CompanyInfo* IndUpCompCapInfoToDevmgr_CompanyInfo::default_instance_ = NULL;

IndUpCompCapInfoToDevmgr_CompanyInfo* IndUpCompCapInfoToDevmgr_CompanyInfo::New() const {
  return new IndUpCompCapInfoToDevmgr_CompanyInfo;
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
  }
  totallicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpCompCapInfoToDevmgr_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        break;
      }

      // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_totallicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totallicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  return false;
#undef DO_
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totallicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
}

::google::protobuf::uint8* IndUpCompCapInfoToDevmgr_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totallicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo)
  return target;
}

int IndUpCompCapInfoToDevmgr_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

  }
  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.LicenceInfo totallicinfos = 3;
  total_size += 1 * this->totallicinfos_size();
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totallicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpCompCapInfoToDevmgr_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpCompCapInfoToDevmgr_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::MergeFrom(const IndUpCompCapInfoToDevmgr_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  totallicinfos_.MergeFrom(from.totallicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::CopyFrom(const IndUpCompCapInfoToDevmgr_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpCompCapInfoToDevmgr_CompanyInfo::IsInitialized() const {

  return true;
}

void IndUpCompCapInfoToDevmgr_CompanyInfo::Swap(IndUpCompCapInfoToDevmgr_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    totallicinfos_.Swap(&other->totallicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpCompCapInfoToDevmgr_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpCompCapInfoToDevmgr_CompanyInfo_descriptor_;
  metadata.reflection = IndUpCompCapInfoToDevmgr_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpCompCapInfoToDevmgr::kDeviceidFieldNumber;
const int IndUpCompCapInfoToDevmgr::kTokenFieldNumber;
const int IndUpCompCapInfoToDevmgr::kOperationtypeFieldNumber;
const int IndUpCompCapInfoToDevmgr::kCompinfosFieldNumber;
#endif  // !_MSC_VER

IndUpCompCapInfoToDevmgr::IndUpCompCapInfoToDevmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpCompCapInfoToDevmgr)
}

void IndUpCompCapInfoToDevmgr::InitAsDefaultInstance() {
}

IndUpCompCapInfoToDevmgr::IndUpCompCapInfoToDevmgr(const IndUpCompCapInfoToDevmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpCompCapInfoToDevmgr)
}

void IndUpCompCapInfoToDevmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operationtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpCompCapInfoToDevmgr::~IndUpCompCapInfoToDevmgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpCompCapInfoToDevmgr)
  SharedDtor();
}

void IndUpCompCapInfoToDevmgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndUpCompCapInfoToDevmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpCompCapInfoToDevmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpCompCapInfoToDevmgr_descriptor_;
}

const IndUpCompCapInfoToDevmgr& IndUpCompCapInfoToDevmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpCompCapInfoToDevmgr* IndUpCompCapInfoToDevmgr::default_instance_ = NULL;

IndUpCompCapInfoToDevmgr* IndUpCompCapInfoToDevmgr::New() const {
  return new IndUpCompCapInfoToDevmgr;
}

void IndUpCompCapInfoToDevmgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpCompCapInfoToDevmgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, operationtype_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpCompCapInfoToDevmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpCompCapInfoToDevmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operationtype;
        break;
      }

      // optional uint32 operationtype = 3;
      case 3: {
        if (tag == 24) {
         parse_operationtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operationtype_)));
          set_has_operationtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpCompCapInfoToDevmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpCompCapInfoToDevmgr)
  return false;
#undef DO_
}

void IndUpCompCapInfoToDevmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpCompCapInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 operationtype = 3;
  if (has_operationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operationtype(), output);
  }

  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpCompCapInfoToDevmgr)
}

::google::protobuf::uint8* IndUpCompCapInfoToDevmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpCompCapInfoToDevmgr)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 operationtype = 3;
  if (has_operationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operationtype(), target);
  }

  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpCompCapInfoToDevmgr)
  return target;
}

int IndUpCompCapInfoToDevmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 operationtype = 3;
    if (has_operationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operationtype());
    }

  }
  // repeated .SRMsgs.IndUpCompCapInfoToDevmgr.CompanyInfo compinfos = 4;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpCompCapInfoToDevmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpCompCapInfoToDevmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpCompCapInfoToDevmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpCompCapInfoToDevmgr::MergeFrom(const IndUpCompCapInfoToDevmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_operationtype()) {
      set_operationtype(from.operationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpCompCapInfoToDevmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpCompCapInfoToDevmgr::CopyFrom(const IndUpCompCapInfoToDevmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpCompCapInfoToDevmgr::IsInitialized() const {

  return true;
}

void IndUpCompCapInfoToDevmgr::Swap(IndUpCompCapInfoToDevmgr* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(operationtype_, other->operationtype_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpCompCapInfoToDevmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpCompCapInfoToDevmgr_descriptor_;
  metadata.reflection = IndUpCompCapInfoToDevmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndUpSvrHeartTodev_LoadInfo::kTernumFieldNumber;
const int IndUpSvrHeartTodev_LoadInfo::kTxFieldNumber;
const int IndUpSvrHeartTodev_LoadInfo::kRxFieldNumber;
const int IndUpSvrHeartTodev_LoadInfo::kCpuFieldNumber;
#endif  // !_MSC_VER

IndUpSvrHeartTodev_LoadInfo::IndUpSvrHeartTodev_LoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
}

void IndUpSvrHeartTodev_LoadInfo::InitAsDefaultInstance() {
}

IndUpSvrHeartTodev_LoadInfo::IndUpSvrHeartTodev_LoadInfo(const IndUpSvrHeartTodev_LoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
}

void IndUpSvrHeartTodev_LoadInfo::SharedCtor() {
  _cached_size_ = 0;
  ternum_ = 0u;
  tx_ = 0u;
  rx_ = 0u;
  cpu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrHeartTodev_LoadInfo::~IndUpSvrHeartTodev_LoadInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  SharedDtor();
}

void IndUpSvrHeartTodev_LoadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndUpSvrHeartTodev_LoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_LoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrHeartTodev_LoadInfo_descriptor_;
}

const IndUpSvrHeartTodev_LoadInfo& IndUpSvrHeartTodev_LoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrHeartTodev_LoadInfo* IndUpSvrHeartTodev_LoadInfo::default_instance_ = NULL;

IndUpSvrHeartTodev_LoadInfo* IndUpSvrHeartTodev_LoadInfo::New() const {
  return new IndUpSvrHeartTodev_LoadInfo;
}

void IndUpSvrHeartTodev_LoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpSvrHeartTodev_LoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ternum_, cpu_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrHeartTodev_LoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ternum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternum_)));
          set_has_ternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tx;
        break;
      }

      // optional uint32 tx = 2;
      case 2: {
        if (tag == 16) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rx;
        break;
      }

      // optional uint32 rx = 3;
      case 3: {
        if (tag == 24) {
         parse_rx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_)));
          set_has_rx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpu;
        break;
      }

      // optional uint32 cpu = 4;
      case 4: {
        if (tag == 32) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  return false;
#undef DO_
}

void IndUpSvrHeartTodev_LoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ternum(), output);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx(), output);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx(), output);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
}

::google::protobuf::uint8* IndUpSvrHeartTodev_LoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ternum(), target);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx(), target);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx(), target);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrHeartTodev.LoadInfo)
  return target;
}

int IndUpSvrHeartTodev_LoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ternum = 1;
    if (has_ternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternum());
    }

    // optional uint32 tx = 2;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx());
    }

    // optional uint32 rx = 3;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx());
    }

    // optional uint32 cpu = 4;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrHeartTodev_LoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrHeartTodev_LoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrHeartTodev_LoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrHeartTodev_LoadInfo::MergeFrom(const IndUpSvrHeartTodev_LoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ternum()) {
      set_ternum(from.ternum());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrHeartTodev_LoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrHeartTodev_LoadInfo::CopyFrom(const IndUpSvrHeartTodev_LoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrHeartTodev_LoadInfo::IsInitialized() const {

  return true;
}

void IndUpSvrHeartTodev_LoadInfo::Swap(IndUpSvrHeartTodev_LoadInfo* other) {
  if (other != this) {
    std::swap(ternum_, other->ternum_);
    std::swap(tx_, other->tx_);
    std::swap(rx_, other->rx_);
    std::swap(cpu_, other->cpu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrHeartTodev_LoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrHeartTodev_LoadInfo_descriptor_;
  metadata.reflection = IndUpSvrHeartTodev_LoadInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrHeartTodev_ServerInfo::kSvrtypeFieldNumber;
const int IndUpSvrHeartTodev_ServerInfo::kDeviceidFieldNumber;
const int IndUpSvrHeartTodev_ServerInfo::kLoadinfosFieldNumber;
#endif  // !_MSC_VER

IndUpSvrHeartTodev_ServerInfo::IndUpSvrHeartTodev_ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
}

void IndUpSvrHeartTodev_ServerInfo::InitAsDefaultInstance() {
  loadinfos_ = const_cast< ::SRMsgs::IndUpSvrHeartTodev_LoadInfo*>(&::SRMsgs::IndUpSvrHeartTodev_LoadInfo::default_instance());
}

IndUpSvrHeartTodev_ServerInfo::IndUpSvrHeartTodev_ServerInfo(const IndUpSvrHeartTodev_ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
}

void IndUpSvrHeartTodev_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  deviceid_ = 0u;
  loadinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrHeartTodev_ServerInfo::~IndUpSvrHeartTodev_ServerInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  SharedDtor();
}

void IndUpSvrHeartTodev_ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete loadinfos_;
  }
}

void IndUpSvrHeartTodev_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrHeartTodev_ServerInfo_descriptor_;
}

const IndUpSvrHeartTodev_ServerInfo& IndUpSvrHeartTodev_ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrHeartTodev_ServerInfo* IndUpSvrHeartTodev_ServerInfo::default_instance_ = NULL;

IndUpSvrHeartTodev_ServerInfo* IndUpSvrHeartTodev_ServerInfo::New() const {
  return new IndUpSvrHeartTodev_ServerInfo;
}

void IndUpSvrHeartTodev_ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndUpSvrHeartTodev_ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(svrtype_, deviceid_);
    if (has_loadinfos()) {
      if (loadinfos_ != NULL) loadinfos_->::SRMsgs::IndUpSvrHeartTodev_LoadInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrHeartTodev_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loadinfos;
        break;
      }

      // optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_loadinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  return false;
#undef DO_
}

void IndUpSvrHeartTodev_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loadinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
}

::google::protobuf::uint8* IndUpSvrHeartTodev_ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  // optional uint32 svrtype = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loadinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrHeartTodev.ServerInfo)
  return target;
}

int IndUpSvrHeartTodev_ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrtype = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional .SRMsgs.IndUpSvrHeartTodev.LoadInfo loadinfos = 3;
    if (has_loadinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrHeartTodev_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrHeartTodev_ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrHeartTodev_ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrHeartTodev_ServerInfo::MergeFrom(const IndUpSvrHeartTodev_ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_loadinfos()) {
      mutable_loadinfos()->::SRMsgs::IndUpSvrHeartTodev_LoadInfo::MergeFrom(from.loadinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrHeartTodev_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrHeartTodev_ServerInfo::CopyFrom(const IndUpSvrHeartTodev_ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrHeartTodev_ServerInfo::IsInitialized() const {

  return true;
}

void IndUpSvrHeartTodev_ServerInfo::Swap(IndUpSvrHeartTodev_ServerInfo* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(loadinfos_, other->loadinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrHeartTodev_ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrHeartTodev_ServerInfo_descriptor_;
  metadata.reflection = IndUpSvrHeartTodev_ServerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrHeartTodev_DomainInfo::kDomainnameFieldNumber;
const int IndUpSvrHeartTodev_DomainInfo::kLevelFieldNumber;
const int IndUpSvrHeartTodev_DomainInfo::kSvrinfosFieldNumber;
#endif  // !_MSC_VER

IndUpSvrHeartTodev_DomainInfo::IndUpSvrHeartTodev_DomainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
}

void IndUpSvrHeartTodev_DomainInfo::InitAsDefaultInstance() {
}

IndUpSvrHeartTodev_DomainInfo::IndUpSvrHeartTodev_DomainInfo(const IndUpSvrHeartTodev_DomainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
}

void IndUpSvrHeartTodev_DomainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrHeartTodev_DomainInfo::~IndUpSvrHeartTodev_DomainInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  SharedDtor();
}

void IndUpSvrHeartTodev_DomainInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void IndUpSvrHeartTodev_DomainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev_DomainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrHeartTodev_DomainInfo_descriptor_;
}

const IndUpSvrHeartTodev_DomainInfo& IndUpSvrHeartTodev_DomainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrHeartTodev_DomainInfo* IndUpSvrHeartTodev_DomainInfo::default_instance_ = NULL;

IndUpSvrHeartTodev_DomainInfo* IndUpSvrHeartTodev_DomainInfo::New() const {
  return new IndUpSvrHeartTodev_DomainInfo;
}

void IndUpSvrHeartTodev_DomainInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    level_ = 0;
  }
  svrinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrHeartTodev_DomainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional sint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        break;
      }

      // repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_svrinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svrinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  return false;
#undef DO_
}

void IndUpSvrHeartTodev_DomainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domainname(), output);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->svrinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
}

::google::protobuf::uint8* IndUpSvrHeartTodev_DomainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
  for (int i = 0; i < this->svrinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->svrinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrHeartTodev.DomainInfo)
  return target;
}

int IndUpSvrHeartTodev_DomainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainname = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  // repeated .SRMsgs.IndUpSvrHeartTodev.ServerInfo svrinfos = 3;
  total_size += 1 * this->svrinfos_size();
  for (int i = 0; i < this->svrinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrHeartTodev_DomainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrHeartTodev_DomainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrHeartTodev_DomainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrHeartTodev_DomainInfo::MergeFrom(const IndUpSvrHeartTodev_DomainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrinfos_.MergeFrom(from.svrinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrHeartTodev_DomainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrHeartTodev_DomainInfo::CopyFrom(const IndUpSvrHeartTodev_DomainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrHeartTodev_DomainInfo::IsInitialized() const {

  return true;
}

void IndUpSvrHeartTodev_DomainInfo::Swap(IndUpSvrHeartTodev_DomainInfo* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    std::swap(level_, other->level_);
    svrinfos_.Swap(&other->svrinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrHeartTodev_DomainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrHeartTodev_DomainInfo_descriptor_;
  metadata.reflection = IndUpSvrHeartTodev_DomainInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndUpSvrHeartTodev::kDeviceidFieldNumber;
const int IndUpSvrHeartTodev::kTokenFieldNumber;
const int IndUpSvrHeartTodev::kDomaininfosFieldNumber;
#endif  // !_MSC_VER

IndUpSvrHeartTodev::IndUpSvrHeartTodev()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndUpSvrHeartTodev)
}

void IndUpSvrHeartTodev::InitAsDefaultInstance() {
}

IndUpSvrHeartTodev::IndUpSvrHeartTodev(const IndUpSvrHeartTodev& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndUpSvrHeartTodev)
}

void IndUpSvrHeartTodev::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndUpSvrHeartTodev::~IndUpSvrHeartTodev() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndUpSvrHeartTodev)
  SharedDtor();
}

void IndUpSvrHeartTodev::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndUpSvrHeartTodev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndUpSvrHeartTodev::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndUpSvrHeartTodev_descriptor_;
}

const IndUpSvrHeartTodev& IndUpSvrHeartTodev::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndUpSvrHeartTodev* IndUpSvrHeartTodev::default_instance_ = NULL;

IndUpSvrHeartTodev* IndUpSvrHeartTodev::New() const {
  return new IndUpSvrHeartTodev;
}

void IndUpSvrHeartTodev::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deviceid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  domaininfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndUpSvrHeartTodev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndUpSvrHeartTodev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domaininfos;
        break;
      }

      // repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
      case 3: {
        if (tag == 26) {
         parse_domaininfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domaininfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domaininfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndUpSvrHeartTodev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndUpSvrHeartTodev)
  return false;
#undef DO_
}

void IndUpSvrHeartTodev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndUpSvrHeartTodev)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->domaininfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndUpSvrHeartTodev)
}

::google::protobuf::uint8* IndUpSvrHeartTodev::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndUpSvrHeartTodev)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->domaininfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndUpSvrHeartTodev)
  return target;
}

int IndUpSvrHeartTodev::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.IndUpSvrHeartTodev.DomainInfo domaininfos = 3;
  total_size += 1 * this->domaininfos_size();
  for (int i = 0; i < this->domaininfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domaininfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndUpSvrHeartTodev::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndUpSvrHeartTodev* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndUpSvrHeartTodev*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndUpSvrHeartTodev::MergeFrom(const IndUpSvrHeartTodev& from) {
  GOOGLE_CHECK_NE(&from, this);
  domaininfos_.MergeFrom(from.domaininfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndUpSvrHeartTodev::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndUpSvrHeartTodev::CopyFrom(const IndUpSvrHeartTodev& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndUpSvrHeartTodev::IsInitialized() const {

  return true;
}

void IndUpSvrHeartTodev::Swap(IndUpSvrHeartTodev* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    domaininfos_.Swap(&other->domaininfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndUpSvrHeartTodev::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndUpSvrHeartTodev_descriptor_;
  metadata.reflection = IndUpSvrHeartTodev_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspRegister_Capset::kFmtFieldNumber;
#endif  // !_MSC_VER

RspRegister_Capset::RspRegister_Capset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspRegister.Capset)
}

void RspRegister_Capset::InitAsDefaultInstance() {
}

RspRegister_Capset::RspRegister_Capset(const RspRegister_Capset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspRegister.Capset)
}

void RspRegister_Capset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRegister_Capset::~RspRegister_Capset() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspRegister.Capset)
  SharedDtor();
}

void RspRegister_Capset::SharedDtor() {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fmt_;
  }
  if (this != default_instance_) {
  }
}

void RspRegister_Capset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegister_Capset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRegister_Capset_descriptor_;
}

const RspRegister_Capset& RspRegister_Capset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspRegister_Capset* RspRegister_Capset::default_instance_ = NULL;

RspRegister_Capset* RspRegister_Capset::New() const {
  return new RspRegister_Capset;
}

void RspRegister_Capset::Clear() {
  if (has_fmt()) {
    if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fmt_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRegister_Capset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspRegister.Capset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fmt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fmt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fmt().data(), this->fmt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fmt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspRegister.Capset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspRegister.Capset)
  return false;
#undef DO_
}

void RspRegister_Capset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspRegister.Capset)
  // optional string fmt = 1;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fmt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fmt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspRegister.Capset)
}

::google::protobuf::uint8* RspRegister_Capset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspRegister.Capset)
  // optional string fmt = 1;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fmt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fmt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspRegister.Capset)
  return target;
}

int RspRegister_Capset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fmt = 1;
    if (has_fmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fmt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegister_Capset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRegister_Capset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRegister_Capset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRegister_Capset::MergeFrom(const RspRegister_Capset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmt()) {
      set_fmt(from.fmt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRegister_Capset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegister_Capset::CopyFrom(const RspRegister_Capset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegister_Capset::IsInitialized() const {

  return true;
}

void RspRegister_Capset::Swap(RspRegister_Capset* other) {
  if (other != this) {
    std::swap(fmt_, other->fmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRegister_Capset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRegister_Capset_descriptor_;
  metadata.reflection = RspRegister_Capset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspRegister_CapInfo::kCaptypeFieldNumber;
const int RspRegister_CapInfo::kCapsetsFieldNumber;
#endif  // !_MSC_VER

RspRegister_CapInfo::RspRegister_CapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspRegister.CapInfo)
}

void RspRegister_CapInfo::InitAsDefaultInstance() {
}

RspRegister_CapInfo::RspRegister_CapInfo(const RspRegister_CapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspRegister.CapInfo)
}

void RspRegister_CapInfo::SharedCtor() {
  _cached_size_ = 0;
  captype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRegister_CapInfo::~RspRegister_CapInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspRegister.CapInfo)
  SharedDtor();
}

void RspRegister_CapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspRegister_CapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegister_CapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRegister_CapInfo_descriptor_;
}

const RspRegister_CapInfo& RspRegister_CapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspRegister_CapInfo* RspRegister_CapInfo::default_instance_ = NULL;

RspRegister_CapInfo* RspRegister_CapInfo::New() const {
  return new RspRegister_CapInfo;
}

void RspRegister_CapInfo::Clear() {
  captype_ = 0u;
  capsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRegister_CapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspRegister.CapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 captype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captype_)));
          set_has_captype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capsets;
        break;
      }

      // repeated .SRMsgs.RspRegister.Capset capsets = 2;
      case 2: {
        if (tag == 18) {
         parse_capsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capsets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspRegister.CapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspRegister.CapInfo)
  return false;
#undef DO_
}

void RspRegister_CapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspRegister.CapInfo)
  // optional uint32 captype = 1;
  if (has_captype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->captype(), output);
  }

  // repeated .SRMsgs.RspRegister.Capset capsets = 2;
  for (int i = 0; i < this->capsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->capsets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspRegister.CapInfo)
}

::google::protobuf::uint8* RspRegister_CapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspRegister.CapInfo)
  // optional uint32 captype = 1;
  if (has_captype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->captype(), target);
  }

  // repeated .SRMsgs.RspRegister.Capset capsets = 2;
  for (int i = 0; i < this->capsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->capsets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspRegister.CapInfo)
  return target;
}

int RspRegister_CapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 captype = 1;
    if (has_captype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captype());
    }

  }
  // repeated .SRMsgs.RspRegister.Capset capsets = 2;
  total_size += 1 * this->capsets_size();
  for (int i = 0; i < this->capsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegister_CapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRegister_CapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRegister_CapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRegister_CapInfo::MergeFrom(const RspRegister_CapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  capsets_.MergeFrom(from.capsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_captype()) {
      set_captype(from.captype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRegister_CapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegister_CapInfo::CopyFrom(const RspRegister_CapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegister_CapInfo::IsInitialized() const {

  return true;
}

void RspRegister_CapInfo::Swap(RspRegister_CapInfo* other) {
  if (other != this) {
    std::swap(captype_, other->captype_);
    capsets_.Swap(&other->capsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRegister_CapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRegister_CapInfo_descriptor_;
  metadata.reflection = RspRegister_CapInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspRegister_LicenceInfo::kLicencetypeFieldNumber;
const int RspRegister_LicenceInfo::kLicencenumFieldNumber;
const int RspRegister_LicenceInfo::kStarttimeFieldNumber;
const int RspRegister_LicenceInfo::kExptimeFieldNumber;
#endif  // !_MSC_VER

RspRegister_LicenceInfo::RspRegister_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspRegister.LicenceInfo)
}

void RspRegister_LicenceInfo::InitAsDefaultInstance() {
}

RspRegister_LicenceInfo::RspRegister_LicenceInfo(const RspRegister_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspRegister.LicenceInfo)
}

void RspRegister_LicenceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRegister_LicenceInfo::~RspRegister_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspRegister.LicenceInfo)
  SharedDtor();
}

void RspRegister_LicenceInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exptime_;
  }
  if (this != default_instance_) {
  }
}

void RspRegister_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegister_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRegister_LicenceInfo_descriptor_;
}

const RspRegister_LicenceInfo& RspRegister_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspRegister_LicenceInfo* RspRegister_LicenceInfo::default_instance_ = NULL;

RspRegister_LicenceInfo* RspRegister_LicenceInfo::New() const {
  return new RspRegister_LicenceInfo;
}

void RspRegister_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspRegister_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(licencetype_, licencenum_);
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_exptime()) {
      if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exptime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRegister_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspRegister.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_starttime;
        break;
      }

      // optional string starttime = 3;
      case 3: {
        if (tag == 26) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exptime;
        break;
      }

      // optional string exptime = 4;
      case 4: {
        if (tag == 34) {
         parse_exptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exptime().data(), this->exptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspRegister.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspRegister.LicenceInfo)
  return false;
#undef DO_
}

void RspRegister_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspRegister.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspRegister.LicenceInfo)
}

::google::protobuf::uint8* RspRegister_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspRegister.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspRegister.LicenceInfo)
  return target;
}

int RspRegister_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

    // optional string starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string exptime = 4;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegister_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRegister_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRegister_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRegister_LicenceInfo::MergeFrom(const RspRegister_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRegister_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegister_LicenceInfo::CopyFrom(const RspRegister_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegister_LicenceInfo::IsInitialized() const {

  return true;
}

void RspRegister_LicenceInfo::Swap(RspRegister_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(starttime_, other->starttime_);
    std::swap(exptime_, other->exptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRegister_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRegister_LicenceInfo_descriptor_;
  metadata.reflection = RspRegister_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspRegister_CompanyInfo::kCompanyidFieldNumber;
const int RspRegister_CompanyInfo::kCompanynameFieldNumber;
const int RspRegister_CompanyInfo::kTotallicinfosFieldNumber;
#endif  // !_MSC_VER

RspRegister_CompanyInfo::RspRegister_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspRegister.CompanyInfo)
}

void RspRegister_CompanyInfo::InitAsDefaultInstance() {
}

RspRegister_CompanyInfo::RspRegister_CompanyInfo(const RspRegister_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspRegister.CompanyInfo)
}

void RspRegister_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRegister_CompanyInfo::~RspRegister_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspRegister.CompanyInfo)
  SharedDtor();
}

void RspRegister_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
  }
}

void RspRegister_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegister_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRegister_CompanyInfo_descriptor_;
}

const RspRegister_CompanyInfo& RspRegister_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspRegister_CompanyInfo* RspRegister_CompanyInfo::default_instance_ = NULL;

RspRegister_CompanyInfo* RspRegister_CompanyInfo::New() const {
  return new RspRegister_CompanyInfo;
}

void RspRegister_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
  }
  totallicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRegister_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspRegister.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        break;
      }

      // repeated .SRMsgs.RspRegister.LicenceInfo totallicinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_totallicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totallicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totallicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspRegister.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspRegister.CompanyInfo)
  return false;
#undef DO_
}

void RspRegister_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspRegister.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // repeated .SRMsgs.RspRegister.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totallicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspRegister.CompanyInfo)
}

::google::protobuf::uint8* RspRegister_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspRegister.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // repeated .SRMsgs.RspRegister.LicenceInfo totallicinfos = 3;
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totallicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspRegister.CompanyInfo)
  return target;
}

int RspRegister_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

  }
  // repeated .SRMsgs.RspRegister.LicenceInfo totallicinfos = 3;
  total_size += 1 * this->totallicinfos_size();
  for (int i = 0; i < this->totallicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totallicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegister_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRegister_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRegister_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRegister_CompanyInfo::MergeFrom(const RspRegister_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  totallicinfos_.MergeFrom(from.totallicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRegister_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegister_CompanyInfo::CopyFrom(const RspRegister_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegister_CompanyInfo::IsInitialized() const {

  return true;
}

void RspRegister_CompanyInfo::Swap(RspRegister_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    totallicinfos_.Swap(&other->totallicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRegister_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRegister_CompanyInfo_descriptor_;
  metadata.reflection = RspRegister_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspRegister::kIsokFieldNumber;
const int RspRegister::kDeviceidFieldNumber;
const int RspRegister::kTokenFieldNumber;
const int RspRegister::kFailurereasonFieldNumber;
const int RspRegister::kGroupidFieldNumber;
const int RspRegister::kDomainnameFieldNumber;
const int RspRegister::kErrorcodeFieldNumber;
const int RspRegister::kCapinfosFieldNumber;
const int RspRegister::kSysmtuFieldNumber;
const int RspRegister::kCompinfosFieldNumber;
#endif  // !_MSC_VER

RspRegister::RspRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspRegister)
}

void RspRegister::InitAsDefaultInstance() {
}

RspRegister::RspRegister(const RspRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspRegister)
}

void RspRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0u;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0u;
  sysmtu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspRegister::~RspRegister() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspRegister)
  SharedDtor();
}

void RspRegister::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void RspRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspRegister_descriptor_;
}

const RspRegister& RspRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspRegister* RspRegister::default_instance_ = NULL;

RspRegister* RspRegister::New() const {
  return new RspRegister;
}

void RspRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(isok_, deviceid_);
    ZR_(groupid_, errorcode_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failurereason_->clear();
      }
    }
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
  }
  sysmtu_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  capinfos_.Clear();
  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failurereason;
        break;
      }

      // optional string failurereason = 4;
      case 4: {
        if (tag == 34) {
         parse_failurereason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failurereason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 5;
      case 5: {
        if (tag == 40) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_domainname;
        break;
      }

      // optional string domainname = 6;
      case 6: {
        if (tag == 50) {
         parse_domainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_errorcode;
        break;
      }

      // optional uint32 errorcode = 7;
      case 7: {
        if (tag == 56) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_capinfos;
        break;
      }

      // repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
      case 8: {
        if (tag == 66) {
         parse_capinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_capinfos;
        if (input->ExpectTag(72)) goto parse_sysmtu;
        break;
      }

      // optional uint32 sysmtu = 9;
      case 9: {
        if (tag == 72) {
         parse_sysmtu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysmtu_)));
          set_has_sysmtu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.RspRegister.CompanyInfo compinfos = 10;
      case 10: {
        if (tag == 82) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspRegister)
  return false;
#undef DO_
}

void RspRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspRegister)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional string failurereason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failurereason(), output);
  }

  // optional uint32 groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupid(), output);
  }

  // optional string domainname = 6;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->domainname(), output);
  }

  // optional uint32 errorcode = 7;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->errorcode(), output);
  }

  // repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
  for (int i = 0; i < this->capinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->capinfos(i), output);
  }

  // optional uint32 sysmtu = 9;
  if (has_sysmtu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sysmtu(), output);
  }

  // repeated .SRMsgs.RspRegister.CompanyInfo compinfos = 10;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspRegister)
}

::google::protobuf::uint8* RspRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspRegister)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string failurereason = 4;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failurereason(), target);
  }

  // optional uint32 groupid = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupid(), target);
  }

  // optional string domainname = 6;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->domainname(), target);
  }

  // optional uint32 errorcode = 7;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->errorcode(), target);
  }

  // repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
  for (int i = 0; i < this->capinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->capinfos(i), target);
  }

  // optional uint32 sysmtu = 9;
  if (has_sysmtu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sysmtu(), target);
  }

  // repeated .SRMsgs.RspRegister.CompanyInfo compinfos = 10;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspRegister)
  return target;
}

int RspRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string failurereason = 4;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

    // optional uint32 groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string domainname = 6;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional uint32 errorcode = 7;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sysmtu = 9;
    if (has_sysmtu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysmtu());
    }

  }
  // repeated .SRMsgs.RspRegister.CapInfo capinfos = 8;
  total_size += 1 * this->capinfos_size();
  for (int i = 0; i < this->capinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capinfos(i));
  }

  // repeated .SRMsgs.RspRegister.CompanyInfo compinfos = 10;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspRegister::MergeFrom(const RspRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  capinfos_.MergeFrom(from.capinfos_);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sysmtu()) {
      set_sysmtu(from.sysmtu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspRegister::CopyFrom(const RspRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspRegister::IsInitialized() const {

  return true;
}

void RspRegister::Swap(RspRegister* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(failurereason_, other->failurereason_);
    std::swap(groupid_, other->groupid_);
    std::swap(domainname_, other->domainname_);
    std::swap(errorcode_, other->errorcode_);
    capinfos_.Swap(&other->capinfos_);
    std::swap(sysmtu_, other->sysmtu_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspRegister_descriptor_;
  metadata.reflection = RspRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspUnRegister::kIsokFieldNumber;
const int RspUnRegister::kFailurereasonFieldNumber;
#endif  // !_MSC_VER

RspUnRegister::RspUnRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspUnRegister)
}

void RspUnRegister::InitAsDefaultInstance() {
}

RspUnRegister::RspUnRegister(const RspUnRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspUnRegister)
}

void RspUnRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUnRegister::~RspUnRegister() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspUnRegister)
  SharedDtor();
}

void RspUnRegister::SharedDtor() {
  if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failurereason_;
  }
  if (this != default_instance_) {
  }
}

void RspUnRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUnRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUnRegister_descriptor_;
}

const RspUnRegister& RspUnRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspUnRegister* RspUnRegister::default_instance_ = NULL;

RspUnRegister* RspUnRegister::New() const {
  return new RspUnRegister;
}

void RspUnRegister::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    isok_ = false;
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failurereason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUnRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspUnRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failurereason;
        break;
      }

      // optional string failurereason = 2;
      case 2: {
        if (tag == 18) {
         parse_failurereason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "failurereason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspUnRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspUnRegister)
  return false;
#undef DO_
}

void RspUnRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspUnRegister)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional string failurereason = 2;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failurereason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspUnRegister)
}

::google::protobuf::uint8* RspUnRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspUnRegister)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional string failurereason = 2;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "failurereason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->failurereason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspUnRegister)
  return target;
}

int RspUnRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional string failurereason = 2;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUnRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUnRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUnRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUnRegister::MergeFrom(const RspUnRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUnRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUnRegister::CopyFrom(const RspUnRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUnRegister::IsInitialized() const {

  return true;
}

void RspUnRegister::Swap(RspUnRegister* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(failurereason_, other->failurereason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUnRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUnRegister_descriptor_;
  metadata.reflection = RspUnRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGetDeviceInfo_MapIPInfo::kMapipFieldNumber;
#endif  // !_MSC_VER

RspGetDeviceInfo_MapIPInfo::RspGetDeviceInfo_MapIPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetDeviceInfo.MapIPInfo)
}

void RspGetDeviceInfo_MapIPInfo::InitAsDefaultInstance() {
}

RspGetDeviceInfo_MapIPInfo::RspGetDeviceInfo_MapIPInfo(const RspGetDeviceInfo_MapIPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetDeviceInfo.MapIPInfo)
}

void RspGetDeviceInfo_MapIPInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetDeviceInfo_MapIPInfo::~RspGetDeviceInfo_MapIPInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  SharedDtor();
}

void RspGetDeviceInfo_MapIPInfo::SharedDtor() {
  if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapip_;
  }
  if (this != default_instance_) {
  }
}

void RspGetDeviceInfo_MapIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetDeviceInfo_MapIPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetDeviceInfo_MapIPInfo_descriptor_;
}

const RspGetDeviceInfo_MapIPInfo& RspGetDeviceInfo_MapIPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetDeviceInfo_MapIPInfo* RspGetDeviceInfo_MapIPInfo::default_instance_ = NULL;

RspGetDeviceInfo_MapIPInfo* RspGetDeviceInfo_MapIPInfo::New() const {
  return new RspGetDeviceInfo_MapIPInfo;
}

void RspGetDeviceInfo_MapIPInfo::Clear() {
  if (has_mapip()) {
    if (mapip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapip_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetDeviceInfo_MapIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mapip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapip().data(), this->mapip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  return false;
#undef DO_
}

void RspGetDeviceInfo_MapIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  // optional string mapip = 1;
  if (has_mapip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapip().data(), this->mapip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetDeviceInfo.MapIPInfo)
}

::google::protobuf::uint8* RspGetDeviceInfo_MapIPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  // optional string mapip = 1;
  if (has_mapip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapip().data(), this->mapip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetDeviceInfo.MapIPInfo)
  return target;
}

int RspGetDeviceInfo_MapIPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mapip = 1;
    if (has_mapip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetDeviceInfo_MapIPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetDeviceInfo_MapIPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetDeviceInfo_MapIPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetDeviceInfo_MapIPInfo::MergeFrom(const RspGetDeviceInfo_MapIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapip()) {
      set_mapip(from.mapip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetDeviceInfo_MapIPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetDeviceInfo_MapIPInfo::CopyFrom(const RspGetDeviceInfo_MapIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetDeviceInfo_MapIPInfo::IsInitialized() const {

  return true;
}

void RspGetDeviceInfo_MapIPInfo::Swap(RspGetDeviceInfo_MapIPInfo* other) {
  if (other != this) {
    std::swap(mapip_, other->mapip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetDeviceInfo_MapIPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetDeviceInfo_MapIPInfo_descriptor_;
  metadata.reflection = RspGetDeviceInfo_MapIPInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetDeviceInfo_DeviceInfo::kDeviceidFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kSvrTypeFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kGetSvrTypeFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kIpFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kPortFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kLoadFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kLoad2FieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kGroupidFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kDomainnameFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kMapinternetipsFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kNettypeFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kMaxBandwidthFieldNumber;
const int RspGetDeviceInfo_DeviceInfo::kMaxTermsFieldNumber;
#endif  // !_MSC_VER

RspGetDeviceInfo_DeviceInfo::RspGetDeviceInfo_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetDeviceInfo.DeviceInfo)
}

void RspGetDeviceInfo_DeviceInfo::InitAsDefaultInstance() {
}

RspGetDeviceInfo_DeviceInfo::RspGetDeviceInfo_DeviceInfo(const RspGetDeviceInfo_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetDeviceInfo.DeviceInfo)
}

void RspGetDeviceInfo_DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  svr_type_ = 0u;
  get_svr_type_ = 0u;
  ip_ = 0u;
  port_ = 0u;
  load_ = 0u;
  load2_ = 0u;
  groupid_ = 0u;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nettype_ = 0u;
  max_bandwidth_ = 0u;
  max_terms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetDeviceInfo_DeviceInfo::~RspGetDeviceInfo_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  SharedDtor();
}

void RspGetDeviceInfo_DeviceInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void RspGetDeviceInfo_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetDeviceInfo_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetDeviceInfo_DeviceInfo_descriptor_;
}

const RspGetDeviceInfo_DeviceInfo& RspGetDeviceInfo_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetDeviceInfo_DeviceInfo* RspGetDeviceInfo_DeviceInfo::default_instance_ = NULL;

RspGetDeviceInfo_DeviceInfo* RspGetDeviceInfo_DeviceInfo::New() const {
  return new RspGetDeviceInfo_DeviceInfo;
}

void RspGetDeviceInfo_DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspGetDeviceInfo_DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, groupid_);
  }
  if (_has_bits_[8 / 32] & 7424) {
    ZR_(nettype_, max_terms_);
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mapinternetips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetDeviceInfo_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 2;
      case 2: {
        if (tag == 16) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get_svr_type;
        break;
      }

      // optional uint32 get_svr_type = 3;
      case 3: {
        if (tag == 24) {
         parse_get_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_svr_type_)));
          set_has_get_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 4;
      case 4: {
        if (tag == 32) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_load;
        break;
      }

      // optional uint32 load = 6;
      case 6: {
        if (tag == 48) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_load2;
        break;
      }

      // optional uint32 load2 = 7;
      case 7: {
        if (tag == 56) {
         parse_load2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load2_)));
          set_has_load2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 8;
      case 8: {
        if (tag == 64) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_domainname;
        break;
      }

      // optional string domainname = 9;
      case 9: {
        if (tag == 74) {
         parse_domainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mapinternetips;
        break;
      }

      // repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
      case 10: {
        if (tag == 82) {
         parse_mapinternetips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapinternetips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mapinternetips;
        if (input->ExpectTag(88)) goto parse_nettype;
        break;
      }

      // optional uint32 nettype = 11;
      case 11: {
        if (tag == 88) {
         parse_nettype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_max_bandwidth;
        break;
      }

      // optional uint32 max_bandwidth = 12;
      case 12: {
        if (tag == 96) {
         parse_max_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bandwidth_)));
          set_has_max_bandwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_max_terms;
        break;
      }

      // optional uint32 max_terms = 13;
      case 13: {
        if (tag == 104) {
         parse_max_terms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_terms_)));
          set_has_max_terms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  return false;
#undef DO_
}

void RspGetDeviceInfo_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_type(), output);
  }

  // optional uint32 get_svr_type = 3;
  if (has_get_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get_svr_type(), output);
  }

  // optional uint32 ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 load = 6;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->load(), output);
  }

  // optional uint32 load2 = 7;
  if (has_load2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->load2(), output);
  }

  // optional uint32 groupid = 8;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->groupid(), output);
  }

  // optional string domainname = 9;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->domainname(), output);
  }

  // repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mapinternetips(i), output);
  }

  // optional uint32 nettype = 11;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nettype(), output);
  }

  // optional uint32 max_bandwidth = 12;
  if (has_max_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_bandwidth(), output);
  }

  // optional uint32 max_terms = 13;
  if (has_max_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_terms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetDeviceInfo.DeviceInfo)
}

::google::protobuf::uint8* RspGetDeviceInfo_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_type(), target);
  }

  // optional uint32 get_svr_type = 3;
  if (has_get_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get_svr_type(), target);
  }

  // optional uint32 ip = 4;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 load = 6;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->load(), target);
  }

  // optional uint32 load2 = 7;
  if (has_load2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->load2(), target);
  }

  // optional uint32 groupid = 8;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->groupid(), target);
  }

  // optional string domainname = 9;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->domainname(), target);
  }

  // repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mapinternetips(i), target);
  }

  // optional uint32 nettype = 11;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nettype(), target);
  }

  // optional uint32 max_bandwidth = 12;
  if (has_max_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_bandwidth(), target);
  }

  // optional uint32 max_terms = 13;
  if (has_max_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_terms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetDeviceInfo.DeviceInfo)
  return target;
}

int RspGetDeviceInfo_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional uint32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 get_svr_type = 3;
    if (has_get_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_svr_type());
    }

    // optional uint32 ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 load = 6;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load());
    }

    // optional uint32 load2 = 7;
    if (has_load2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load2());
    }

    // optional uint32 groupid = 8;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string domainname = 9;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional uint32 nettype = 11;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

    // optional uint32 max_bandwidth = 12;
    if (has_max_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bandwidth());
    }

    // optional uint32 max_terms = 13;
    if (has_max_terms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_terms());
    }

  }
  // repeated .SRMsgs.RspGetDeviceInfo.MapIPInfo mapinternetips = 10;
  total_size += 1 * this->mapinternetips_size();
  for (int i = 0; i < this->mapinternetips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapinternetips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetDeviceInfo_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetDeviceInfo_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetDeviceInfo_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetDeviceInfo_DeviceInfo::MergeFrom(const RspGetDeviceInfo_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapinternetips_.MergeFrom(from.mapinternetips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_get_svr_type()) {
      set_get_svr_type(from.get_svr_type());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
    if (from.has_load2()) {
      set_load2(from.load2());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_max_bandwidth()) {
      set_max_bandwidth(from.max_bandwidth());
    }
    if (from.has_max_terms()) {
      set_max_terms(from.max_terms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetDeviceInfo_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetDeviceInfo_DeviceInfo::CopyFrom(const RspGetDeviceInfo_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetDeviceInfo_DeviceInfo::IsInitialized() const {

  return true;
}

void RspGetDeviceInfo_DeviceInfo::Swap(RspGetDeviceInfo_DeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(get_svr_type_, other->get_svr_type_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(load_, other->load_);
    std::swap(load2_, other->load2_);
    std::swap(groupid_, other->groupid_);
    std::swap(domainname_, other->domainname_);
    mapinternetips_.Swap(&other->mapinternetips_);
    std::swap(nettype_, other->nettype_);
    std::swap(max_bandwidth_, other->max_bandwidth_);
    std::swap(max_terms_, other->max_terms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetDeviceInfo_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetDeviceInfo_DeviceInfo_descriptor_;
  metadata.reflection = RspGetDeviceInfo_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetDeviceInfo::kTokenFieldNumber;
const int RspGetDeviceInfo::kDeviceinfolistFieldNumber;
#endif  // !_MSC_VER

RspGetDeviceInfo::RspGetDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetDeviceInfo)
}

void RspGetDeviceInfo::InitAsDefaultInstance() {
}

RspGetDeviceInfo::RspGetDeviceInfo(const RspGetDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetDeviceInfo)
}

void RspGetDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetDeviceInfo::~RspGetDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetDeviceInfo)
  SharedDtor();
}

void RspGetDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspGetDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetDeviceInfo_descriptor_;
}

const RspGetDeviceInfo& RspGetDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetDeviceInfo* RspGetDeviceInfo::default_instance_ = NULL;

RspGetDeviceInfo* RspGetDeviceInfo::New() const {
  return new RspGetDeviceInfo;
}

void RspGetDeviceInfo::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  deviceinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfolist;
        break;
      }

      // repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceinfolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceinfolist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetDeviceInfo)
  return false;
#undef DO_
}

void RspGetDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetDeviceInfo)
  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
  for (int i = 0; i < this->deviceinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deviceinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetDeviceInfo)
}

::google::protobuf::uint8* RspGetDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetDeviceInfo)
  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
  for (int i = 0; i < this->deviceinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deviceinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetDeviceInfo)
  return target;
}

int RspGetDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.RspGetDeviceInfo.DeviceInfo deviceinfolist = 3;
  total_size += 1 * this->deviceinfolist_size();
  for (int i = 0; i < this->deviceinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetDeviceInfo::MergeFrom(const RspGetDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfolist_.MergeFrom(from.deviceinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetDeviceInfo::CopyFrom(const RspGetDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetDeviceInfo::IsInitialized() const {

  return true;
}

void RspGetDeviceInfo::Swap(RspGetDeviceInfo* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    deviceinfolist_.Swap(&other->deviceinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetDeviceInfo_descriptor_;
  metadata.reflection = RspGetDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGetSysDeviceInfo_LoadInfo::kTernumFieldNumber;
const int RspGetSysDeviceInfo_LoadInfo::kTxFieldNumber;
const int RspGetSysDeviceInfo_LoadInfo::kRxFieldNumber;
const int RspGetSysDeviceInfo_LoadInfo::kCpuFieldNumber;
#endif  // !_MSC_VER

RspGetSysDeviceInfo_LoadInfo::RspGetSysDeviceInfo_LoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
}

void RspGetSysDeviceInfo_LoadInfo::InitAsDefaultInstance() {
}

RspGetSysDeviceInfo_LoadInfo::RspGetSysDeviceInfo_LoadInfo(const RspGetSysDeviceInfo_LoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
}

void RspGetSysDeviceInfo_LoadInfo::SharedCtor() {
  _cached_size_ = 0;
  ternum_ = 0u;
  tx_ = 0u;
  rx_ = 0u;
  cpu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSysDeviceInfo_LoadInfo::~RspGetSysDeviceInfo_LoadInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  SharedDtor();
}

void RspGetSysDeviceInfo_LoadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGetSysDeviceInfo_LoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_LoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSysDeviceInfo_LoadInfo_descriptor_;
}

const RspGetSysDeviceInfo_LoadInfo& RspGetSysDeviceInfo_LoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSysDeviceInfo_LoadInfo* RspGetSysDeviceInfo_LoadInfo::default_instance_ = NULL;

RspGetSysDeviceInfo_LoadInfo* RspGetSysDeviceInfo_LoadInfo::New() const {
  return new RspGetSysDeviceInfo_LoadInfo;
}

void RspGetSysDeviceInfo_LoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspGetSysDeviceInfo_LoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ternum_, cpu_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSysDeviceInfo_LoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ternum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternum_)));
          set_has_ternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tx;
        break;
      }

      // optional uint32 tx = 2;
      case 2: {
        if (tag == 16) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rx;
        break;
      }

      // optional uint32 rx = 3;
      case 3: {
        if (tag == 24) {
         parse_rx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_)));
          set_has_rx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpu;
        break;
      }

      // optional uint32 cpu = 4;
      case 4: {
        if (tag == 32) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  return false;
#undef DO_
}

void RspGetSysDeviceInfo_LoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ternum(), output);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx(), output);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx(), output);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cpu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
}

::google::protobuf::uint8* RspGetSysDeviceInfo_LoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  // optional uint32 ternum = 1;
  if (has_ternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ternum(), target);
  }

  // optional uint32 tx = 2;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx(), target);
  }

  // optional uint32 rx = 3;
  if (has_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx(), target);
  }

  // optional uint32 cpu = 4;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cpu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSysDeviceInfo.LoadInfo)
  return target;
}

int RspGetSysDeviceInfo_LoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ternum = 1;
    if (has_ternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternum());
    }

    // optional uint32 tx = 2;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx());
    }

    // optional uint32 rx = 3;
    if (has_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx());
    }

    // optional uint32 cpu = 4;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSysDeviceInfo_LoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSysDeviceInfo_LoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSysDeviceInfo_LoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSysDeviceInfo_LoadInfo::MergeFrom(const RspGetSysDeviceInfo_LoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ternum()) {
      set_ternum(from.ternum());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_rx()) {
      set_rx(from.rx());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSysDeviceInfo_LoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSysDeviceInfo_LoadInfo::CopyFrom(const RspGetSysDeviceInfo_LoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSysDeviceInfo_LoadInfo::IsInitialized() const {

  return true;
}

void RspGetSysDeviceInfo_LoadInfo::Swap(RspGetSysDeviceInfo_LoadInfo* other) {
  if (other != this) {
    std::swap(ternum_, other->ternum_);
    std::swap(tx_, other->tx_);
    std::swap(rx_, other->rx_);
    std::swap(cpu_, other->cpu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSysDeviceInfo_LoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSysDeviceInfo_LoadInfo_descriptor_;
  metadata.reflection = RspGetSysDeviceInfo_LoadInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSysDeviceInfo_IPPORTInfo::kInnerFieldNumber;
const int RspGetSysDeviceInfo_IPPORTInfo::kOuterFieldNumber;
const int RspGetSysDeviceInfo_IPPORTInfo::kVpnFieldNumber;
#endif  // !_MSC_VER

RspGetSysDeviceInfo_IPPORTInfo::RspGetSysDeviceInfo_IPPORTInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
}

void RspGetSysDeviceInfo_IPPORTInfo::InitAsDefaultInstance() {
}

RspGetSysDeviceInfo_IPPORTInfo::RspGetSysDeviceInfo_IPPORTInfo(const RspGetSysDeviceInfo_IPPORTInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
}

void RspGetSysDeviceInfo_IPPORTInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vpn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSysDeviceInfo_IPPORTInfo::~RspGetSysDeviceInfo_IPPORTInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  SharedDtor();
}

void RspGetSysDeviceInfo_IPPORTInfo::SharedDtor() {
  if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inner_;
  }
  if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outer_;
  }
  if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vpn_;
  }
  if (this != default_instance_) {
  }
}

void RspGetSysDeviceInfo_IPPORTInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_IPPORTInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSysDeviceInfo_IPPORTInfo_descriptor_;
}

const RspGetSysDeviceInfo_IPPORTInfo& RspGetSysDeviceInfo_IPPORTInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSysDeviceInfo_IPPORTInfo* RspGetSysDeviceInfo_IPPORTInfo::default_instance_ = NULL;

RspGetSysDeviceInfo_IPPORTInfo* RspGetSysDeviceInfo_IPPORTInfo::New() const {
  return new RspGetSysDeviceInfo_IPPORTInfo;
}

void RspGetSysDeviceInfo_IPPORTInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_inner()) {
      if (inner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inner_->clear();
      }
    }
    if (has_outer()) {
      if (outer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        outer_->clear();
      }
    }
    if (has_vpn()) {
      if (vpn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vpn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSysDeviceInfo_IPPORTInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inner().data(), this->inner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outer;
        break;
      }

      // optional string outer = 2;
      case 2: {
        if (tag == 18) {
         parse_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outer().data(), this->outer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "outer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vpn;
        break;
      }

      // optional string vpn = 3;
      case 3: {
        if (tag == 26) {
         parse_vpn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vpn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vpn().data(), this->vpn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vpn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  return false;
#undef DO_
}

void RspGetSysDeviceInfo_IPPORTInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner(), output);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->outer(), output);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vpn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
}

::google::protobuf::uint8* RspGetSysDeviceInfo_IPPORTInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  // optional string inner = 1;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inner().data(), this->inner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner(), target);
  }

  // optional string outer = 2;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outer().data(), this->outer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outer(), target);
  }

  // optional string vpn = 3;
  if (has_vpn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpn().data(), this->vpn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vpn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSysDeviceInfo.IPPORTInfo)
  return target;
}

int RspGetSysDeviceInfo_IPPORTInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inner = 1;
    if (has_inner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inner());
    }

    // optional string outer = 2;
    if (has_outer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer());
    }

    // optional string vpn = 3;
    if (has_vpn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vpn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSysDeviceInfo_IPPORTInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSysDeviceInfo_IPPORTInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSysDeviceInfo_IPPORTInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSysDeviceInfo_IPPORTInfo::MergeFrom(const RspGetSysDeviceInfo_IPPORTInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inner()) {
      set_inner(from.inner());
    }
    if (from.has_outer()) {
      set_outer(from.outer());
    }
    if (from.has_vpn()) {
      set_vpn(from.vpn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSysDeviceInfo_IPPORTInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSysDeviceInfo_IPPORTInfo::CopyFrom(const RspGetSysDeviceInfo_IPPORTInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSysDeviceInfo_IPPORTInfo::IsInitialized() const {

  return true;
}

void RspGetSysDeviceInfo_IPPORTInfo::Swap(RspGetSysDeviceInfo_IPPORTInfo* other) {
  if (other != this) {
    std::swap(inner_, other->inner_);
    std::swap(outer_, other->outer_);
    std::swap(vpn_, other->vpn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSysDeviceInfo_IPPORTInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSysDeviceInfo_IPPORTInfo_descriptor_;
  metadata.reflection = RspGetSysDeviceInfo_IPPORTInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSysDeviceInfo_DeviceInfo::kDeviceidFieldNumber;
const int RspGetSysDeviceInfo_DeviceInfo::kIpportFieldNumber;
const int RspGetSysDeviceInfo_DeviceInfo::kLoadinfosFieldNumber;
#endif  // !_MSC_VER

RspGetSysDeviceInfo_DeviceInfo::RspGetSysDeviceInfo_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
}

void RspGetSysDeviceInfo_DeviceInfo::InitAsDefaultInstance() {
  ipport_ = const_cast< ::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo*>(&::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo::default_instance());
  loadinfos_ = const_cast< ::SRMsgs::RspGetSysDeviceInfo_LoadInfo*>(&::SRMsgs::RspGetSysDeviceInfo_LoadInfo::default_instance());
}

RspGetSysDeviceInfo_DeviceInfo::RspGetSysDeviceInfo_DeviceInfo(const RspGetSysDeviceInfo_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
}

void RspGetSysDeviceInfo_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0u;
  ipport_ = NULL;
  loadinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSysDeviceInfo_DeviceInfo::~RspGetSysDeviceInfo_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  SharedDtor();
}

void RspGetSysDeviceInfo_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ipport_;
    delete loadinfos_;
  }
}

void RspGetSysDeviceInfo_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSysDeviceInfo_DeviceInfo_descriptor_;
}

const RspGetSysDeviceInfo_DeviceInfo& RspGetSysDeviceInfo_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSysDeviceInfo_DeviceInfo* RspGetSysDeviceInfo_DeviceInfo::default_instance_ = NULL;

RspGetSysDeviceInfo_DeviceInfo* RspGetSysDeviceInfo_DeviceInfo::New() const {
  return new RspGetSysDeviceInfo_DeviceInfo;
}

void RspGetSysDeviceInfo_DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    deviceid_ = 0u;
    if (has_ipport()) {
      if (ipport_ != NULL) ipport_->::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo::Clear();
    }
    if (has_loadinfos()) {
      if (loadinfos_ != NULL) loadinfos_->::SRMsgs::RspGetSysDeviceInfo_LoadInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSysDeviceInfo_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipport;
        break;
      }

      // optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
      case 2: {
        if (tag == 18) {
         parse_ipport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loadinfos;
        break;
      }

      // optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_loadinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  return false;
#undef DO_
}

void RspGetSysDeviceInfo_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
  if (has_ipport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ipport(), output);
  }

  // optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loadinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
}

::google::protobuf::uint8* RspGetSysDeviceInfo_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
  if (has_ipport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ipport(), target);
  }

  // optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
  if (has_loadinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loadinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSysDeviceInfo.DeviceInfo)
  return target;
}

int RspGetSysDeviceInfo_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional .SRMsgs.RspGetSysDeviceInfo.IPPORTInfo ipport = 2;
    if (has_ipport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipport());
    }

    // optional .SRMsgs.RspGetSysDeviceInfo.LoadInfo loadinfos = 3;
    if (has_loadinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSysDeviceInfo_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSysDeviceInfo_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSysDeviceInfo_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSysDeviceInfo_DeviceInfo::MergeFrom(const RspGetSysDeviceInfo_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_ipport()) {
      mutable_ipport()->::SRMsgs::RspGetSysDeviceInfo_IPPORTInfo::MergeFrom(from.ipport());
    }
    if (from.has_loadinfos()) {
      mutable_loadinfos()->::SRMsgs::RspGetSysDeviceInfo_LoadInfo::MergeFrom(from.loadinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSysDeviceInfo_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSysDeviceInfo_DeviceInfo::CopyFrom(const RspGetSysDeviceInfo_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSysDeviceInfo_DeviceInfo::IsInitialized() const {

  return true;
}

void RspGetSysDeviceInfo_DeviceInfo::Swap(RspGetSysDeviceInfo_DeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(ipport_, other->ipport_);
    std::swap(loadinfos_, other->loadinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSysDeviceInfo_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSysDeviceInfo_DeviceInfo_descriptor_;
  metadata.reflection = RspGetSysDeviceInfo_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSysDeviceInfo_DomainInfo::kDomainnameFieldNumber;
const int RspGetSysDeviceInfo_DomainInfo::kLevelFieldNumber;
const int RspGetSysDeviceInfo_DomainInfo::kDevicesFieldNumber;
#endif  // !_MSC_VER

RspGetSysDeviceInfo_DomainInfo::RspGetSysDeviceInfo_DomainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
}

void RspGetSysDeviceInfo_DomainInfo::InitAsDefaultInstance() {
}

RspGetSysDeviceInfo_DomainInfo::RspGetSysDeviceInfo_DomainInfo(const RspGetSysDeviceInfo_DomainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
}

void RspGetSysDeviceInfo_DomainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSysDeviceInfo_DomainInfo::~RspGetSysDeviceInfo_DomainInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  SharedDtor();
}

void RspGetSysDeviceInfo_DomainInfo::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void RspGetSysDeviceInfo_DomainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo_DomainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSysDeviceInfo_DomainInfo_descriptor_;
}

const RspGetSysDeviceInfo_DomainInfo& RspGetSysDeviceInfo_DomainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSysDeviceInfo_DomainInfo* RspGetSysDeviceInfo_DomainInfo::default_instance_ = NULL;

RspGetSysDeviceInfo_DomainInfo* RspGetSysDeviceInfo_DomainInfo::New() const {
  return new RspGetSysDeviceInfo_DomainInfo;
}

void RspGetSysDeviceInfo_DomainInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    level_ = 0;
  }
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSysDeviceInfo_DomainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional sint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devices;
        break;
      }

      // repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
      case 3: {
        if (tag == 26) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  return false;
#undef DO_
}

void RspGetSysDeviceInfo_DomainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domainname(), output);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
}

::google::protobuf::uint8* RspGetSysDeviceInfo_DomainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  // optional string domainname = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }

  // optional sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->devices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSysDeviceInfo.DomainInfo)
  return target;
}

int RspGetSysDeviceInfo_DomainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainname = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  // repeated .SRMsgs.RspGetSysDeviceInfo.DeviceInfo devices = 3;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSysDeviceInfo_DomainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSysDeviceInfo_DomainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSysDeviceInfo_DomainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSysDeviceInfo_DomainInfo::MergeFrom(const RspGetSysDeviceInfo_DomainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSysDeviceInfo_DomainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSysDeviceInfo_DomainInfo::CopyFrom(const RspGetSysDeviceInfo_DomainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSysDeviceInfo_DomainInfo::IsInitialized() const {

  return true;
}

void RspGetSysDeviceInfo_DomainInfo::Swap(RspGetSysDeviceInfo_DomainInfo* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    std::swap(level_, other->level_);
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSysDeviceInfo_DomainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSysDeviceInfo_DomainInfo_descriptor_;
  metadata.reflection = RspGetSysDeviceInfo_DomainInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSysDeviceInfo::kDeviceidFieldNumber;
const int RspGetSysDeviceInfo::kTokenFieldNumber;
const int RspGetSysDeviceInfo::kSvrtypeFieldNumber;
const int RspGetSysDeviceInfo::kDomaininfosFieldNumber;
#endif  // !_MSC_VER

RspGetSysDeviceInfo::RspGetSysDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSysDeviceInfo)
}

void RspGetSysDeviceInfo::InitAsDefaultInstance() {
}

RspGetSysDeviceInfo::RspGetSysDeviceInfo(const RspGetSysDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSysDeviceInfo)
}

void RspGetSysDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svrtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSysDeviceInfo::~RspGetSysDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSysDeviceInfo)
  SharedDtor();
}

void RspGetSysDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspGetSysDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSysDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSysDeviceInfo_descriptor_;
}

const RspGetSysDeviceInfo& RspGetSysDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSysDeviceInfo* RspGetSysDeviceInfo::default_instance_ = NULL;

RspGetSysDeviceInfo* RspGetSysDeviceInfo::New() const {
  return new RspGetSysDeviceInfo;
}

void RspGetSysDeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspGetSysDeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deviceid_, svrtype_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  domaininfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSysDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSysDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svrtype;
        break;
      }

      // optional uint32 svrtype = 3;
      case 3: {
        if (tag == 24) {
         parse_svrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        break;
      }

      // repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
      case 4: {
        if (tag == 34) {
         parse_domaininfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domaininfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domaininfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSysDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSysDeviceInfo)
  return false;
#undef DO_
}

void RspGetSysDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSysDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 svrtype = 3;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svrtype(), output);
  }

  // repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->domaininfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSysDeviceInfo)
}

::google::protobuf::uint8* RspGetSysDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSysDeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 svrtype = 3;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svrtype(), target);
  }

  // repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
  for (int i = 0; i < this->domaininfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->domaininfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSysDeviceInfo)
  return target;
}

int RspGetSysDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 svrtype = 3;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

  }
  // repeated .SRMsgs.RspGetSysDeviceInfo.DomainInfo domaininfos = 4;
  total_size += 1 * this->domaininfos_size();
  for (int i = 0; i < this->domaininfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domaininfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSysDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSysDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSysDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSysDeviceInfo::MergeFrom(const RspGetSysDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  domaininfos_.MergeFrom(from.domaininfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSysDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSysDeviceInfo::CopyFrom(const RspGetSysDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSysDeviceInfo::IsInitialized() const {

  return true;
}

void RspGetSysDeviceInfo::Swap(RspGetSysDeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(svrtype_, other->svrtype_);
    domaininfos_.Swap(&other->domaininfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSysDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSysDeviceInfo_descriptor_;
  metadata.reflection = RspGetSysDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGetSystemCurLoad_LoadInfo::kConfcntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kTernumFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kSrcntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kStdcntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kReccntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kLivecntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kAnalycntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kMonitorcntFieldNumber;
const int RspGetSystemCurLoad_LoadInfo::kVoicecntFieldNumber;
#endif  // !_MSC_VER

RspGetSystemCurLoad_LoadInfo::RspGetSystemCurLoad_LoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSystemCurLoad.LoadInfo)
}

void RspGetSystemCurLoad_LoadInfo::InitAsDefaultInstance() {
}

RspGetSystemCurLoad_LoadInfo::RspGetSystemCurLoad_LoadInfo(const RspGetSystemCurLoad_LoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSystemCurLoad.LoadInfo)
}

void RspGetSystemCurLoad_LoadInfo::SharedCtor() {
  _cached_size_ = 0;
  confcnt_ = 0u;
  ternum_ = 0u;
  srcnt_ = 0u;
  stdcnt_ = 0u;
  reccnt_ = 0u;
  livecnt_ = 0u;
  analycnt_ = 0u;
  monitorcnt_ = 0u;
  voicecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSystemCurLoad_LoadInfo::~RspGetSystemCurLoad_LoadInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  SharedDtor();
}

void RspGetSystemCurLoad_LoadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGetSystemCurLoad_LoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSystemCurLoad_LoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSystemCurLoad_LoadInfo_descriptor_;
}

const RspGetSystemCurLoad_LoadInfo& RspGetSystemCurLoad_LoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSystemCurLoad_LoadInfo* RspGetSystemCurLoad_LoadInfo::default_instance_ = NULL;

RspGetSystemCurLoad_LoadInfo* RspGetSystemCurLoad_LoadInfo::New() const {
  return new RspGetSystemCurLoad_LoadInfo;
}

void RspGetSystemCurLoad_LoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspGetSystemCurLoad_LoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(confcnt_, monitorcnt_);
  }
  voicecnt_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSystemCurLoad_LoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 confcnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confcnt_)));
          set_has_confcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ternum;
        break;
      }

      // optional uint32 ternum = 2;
      case 2: {
        if (tag == 16) {
         parse_ternum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ternum_)));
          set_has_ternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcnt;
        break;
      }

      // optional uint32 srcnt = 3;
      case 3: {
        if (tag == 24) {
         parse_srcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcnt_)));
          set_has_srcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stdcnt;
        break;
      }

      // optional uint32 stdcnt = 4;
      case 4: {
        if (tag == 32) {
         parse_stdcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdcnt_)));
          set_has_stdcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reccnt;
        break;
      }

      // optional uint32 reccnt = 5;
      case 5: {
        if (tag == 40) {
         parse_reccnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reccnt_)));
          set_has_reccnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_livecnt;
        break;
      }

      // optional uint32 livecnt = 6;
      case 6: {
        if (tag == 48) {
         parse_livecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &livecnt_)));
          set_has_livecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_analycnt;
        break;
      }

      // optional uint32 analycnt = 7;
      case 7: {
        if (tag == 56) {
         parse_analycnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analycnt_)));
          set_has_analycnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_monitorcnt;
        break;
      }

      // optional uint32 monitorcnt = 8;
      case 8: {
        if (tag == 64) {
         parse_monitorcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorcnt_)));
          set_has_monitorcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_voicecnt;
        break;
      }

      // optional uint32 voicecnt = 9;
      case 9: {
        if (tag == 72) {
         parse_voicecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicecnt_)));
          set_has_voicecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  return false;
#undef DO_
}

void RspGetSystemCurLoad_LoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  // optional uint32 confcnt = 1;
  if (has_confcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->confcnt(), output);
  }

  // optional uint32 ternum = 2;
  if (has_ternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ternum(), output);
  }

  // optional uint32 srcnt = 3;
  if (has_srcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcnt(), output);
  }

  // optional uint32 stdcnt = 4;
  if (has_stdcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stdcnt(), output);
  }

  // optional uint32 reccnt = 5;
  if (has_reccnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reccnt(), output);
  }

  // optional uint32 livecnt = 6;
  if (has_livecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->livecnt(), output);
  }

  // optional uint32 analycnt = 7;
  if (has_analycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->analycnt(), output);
  }

  // optional uint32 monitorcnt = 8;
  if (has_monitorcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->monitorcnt(), output);
  }

  // optional uint32 voicecnt = 9;
  if (has_voicecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->voicecnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSystemCurLoad.LoadInfo)
}

::google::protobuf::uint8* RspGetSystemCurLoad_LoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  // optional uint32 confcnt = 1;
  if (has_confcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->confcnt(), target);
  }

  // optional uint32 ternum = 2;
  if (has_ternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ternum(), target);
  }

  // optional uint32 srcnt = 3;
  if (has_srcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcnt(), target);
  }

  // optional uint32 stdcnt = 4;
  if (has_stdcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stdcnt(), target);
  }

  // optional uint32 reccnt = 5;
  if (has_reccnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reccnt(), target);
  }

  // optional uint32 livecnt = 6;
  if (has_livecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->livecnt(), target);
  }

  // optional uint32 analycnt = 7;
  if (has_analycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->analycnt(), target);
  }

  // optional uint32 monitorcnt = 8;
  if (has_monitorcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->monitorcnt(), target);
  }

  // optional uint32 voicecnt = 9;
  if (has_voicecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->voicecnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSystemCurLoad.LoadInfo)
  return target;
}

int RspGetSystemCurLoad_LoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 confcnt = 1;
    if (has_confcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confcnt());
    }

    // optional uint32 ternum = 2;
    if (has_ternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ternum());
    }

    // optional uint32 srcnt = 3;
    if (has_srcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcnt());
    }

    // optional uint32 stdcnt = 4;
    if (has_stdcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdcnt());
    }

    // optional uint32 reccnt = 5;
    if (has_reccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reccnt());
    }

    // optional uint32 livecnt = 6;
    if (has_livecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->livecnt());
    }

    // optional uint32 analycnt = 7;
    if (has_analycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analycnt());
    }

    // optional uint32 monitorcnt = 8;
    if (has_monitorcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitorcnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 voicecnt = 9;
    if (has_voicecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicecnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSystemCurLoad_LoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSystemCurLoad_LoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSystemCurLoad_LoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSystemCurLoad_LoadInfo::MergeFrom(const RspGetSystemCurLoad_LoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confcnt()) {
      set_confcnt(from.confcnt());
    }
    if (from.has_ternum()) {
      set_ternum(from.ternum());
    }
    if (from.has_srcnt()) {
      set_srcnt(from.srcnt());
    }
    if (from.has_stdcnt()) {
      set_stdcnt(from.stdcnt());
    }
    if (from.has_reccnt()) {
      set_reccnt(from.reccnt());
    }
    if (from.has_livecnt()) {
      set_livecnt(from.livecnt());
    }
    if (from.has_analycnt()) {
      set_analycnt(from.analycnt());
    }
    if (from.has_monitorcnt()) {
      set_monitorcnt(from.monitorcnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_voicecnt()) {
      set_voicecnt(from.voicecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSystemCurLoad_LoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSystemCurLoad_LoadInfo::CopyFrom(const RspGetSystemCurLoad_LoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSystemCurLoad_LoadInfo::IsInitialized() const {

  return true;
}

void RspGetSystemCurLoad_LoadInfo::Swap(RspGetSystemCurLoad_LoadInfo* other) {
  if (other != this) {
    std::swap(confcnt_, other->confcnt_);
    std::swap(ternum_, other->ternum_);
    std::swap(srcnt_, other->srcnt_);
    std::swap(stdcnt_, other->stdcnt_);
    std::swap(reccnt_, other->reccnt_);
    std::swap(livecnt_, other->livecnt_);
    std::swap(analycnt_, other->analycnt_);
    std::swap(monitorcnt_, other->monitorcnt_);
    std::swap(voicecnt_, other->voicecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSystemCurLoad_LoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSystemCurLoad_LoadInfo_descriptor_;
  metadata.reflection = RspGetSystemCurLoad_LoadInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSystemCurLoad_CompanyInfo::kCompanyidFieldNumber;
const int RspGetSystemCurLoad_CompanyInfo::kCompanynameFieldNumber;
const int RspGetSystemCurLoad_CompanyInfo::kCurloadsFieldNumber;
#endif  // !_MSC_VER

RspGetSystemCurLoad_CompanyInfo::RspGetSystemCurLoad_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
}

void RspGetSystemCurLoad_CompanyInfo::InitAsDefaultInstance() {
  curloads_ = const_cast< ::SRMsgs::RspGetSystemCurLoad_LoadInfo*>(&::SRMsgs::RspGetSystemCurLoad_LoadInfo::default_instance());
}

RspGetSystemCurLoad_CompanyInfo::RspGetSystemCurLoad_CompanyInfo(const RspGetSystemCurLoad_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
}

void RspGetSystemCurLoad_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curloads_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSystemCurLoad_CompanyInfo::~RspGetSystemCurLoad_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  SharedDtor();
}

void RspGetSystemCurLoad_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
    delete curloads_;
  }
}

void RspGetSystemCurLoad_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSystemCurLoad_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSystemCurLoad_CompanyInfo_descriptor_;
}

const RspGetSystemCurLoad_CompanyInfo& RspGetSystemCurLoad_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSystemCurLoad_CompanyInfo* RspGetSystemCurLoad_CompanyInfo::default_instance_ = NULL;

RspGetSystemCurLoad_CompanyInfo* RspGetSystemCurLoad_CompanyInfo::New() const {
  return new RspGetSystemCurLoad_CompanyInfo;
}

void RspGetSystemCurLoad_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
    if (has_curloads()) {
      if (curloads_ != NULL) curloads_->::SRMsgs::RspGetSystemCurLoad_LoadInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSystemCurLoad_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_curloads;
        break;
      }

      // optional .SRMsgs.RspGetSystemCurLoad.LoadInfo curloads = 3;
      case 3: {
        if (tag == 26) {
         parse_curloads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curloads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  return false;
#undef DO_
}

void RspGetSystemCurLoad_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // optional .SRMsgs.RspGetSystemCurLoad.LoadInfo curloads = 3;
  if (has_curloads()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->curloads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
}

::google::protobuf::uint8* RspGetSystemCurLoad_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // optional .SRMsgs.RspGetSystemCurLoad.LoadInfo curloads = 3;
  if (has_curloads()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->curloads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSystemCurLoad.CompanyInfo)
  return target;
}

int RspGetSystemCurLoad_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

    // optional .SRMsgs.RspGetSystemCurLoad.LoadInfo curloads = 3;
    if (has_curloads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curloads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSystemCurLoad_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSystemCurLoad_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSystemCurLoad_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSystemCurLoad_CompanyInfo::MergeFrom(const RspGetSystemCurLoad_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
    if (from.has_curloads()) {
      mutable_curloads()->::SRMsgs::RspGetSystemCurLoad_LoadInfo::MergeFrom(from.curloads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSystemCurLoad_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSystemCurLoad_CompanyInfo::CopyFrom(const RspGetSystemCurLoad_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSystemCurLoad_CompanyInfo::IsInitialized() const {

  return true;
}

void RspGetSystemCurLoad_CompanyInfo::Swap(RspGetSystemCurLoad_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    std::swap(curloads_, other->curloads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSystemCurLoad_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSystemCurLoad_CompanyInfo_descriptor_;
  metadata.reflection = RspGetSystemCurLoad_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspGetSystemCurLoad::kTokenFieldNumber;
const int RspGetSystemCurLoad::kCurconfcntFieldNumber;
const int RspGetSystemCurLoad::kCurreccntFieldNumber;
const int RspGetSystemCurLoad::kCurlivecntFieldNumber;
const int RspGetSystemCurLoad::kCuranalycntFieldNumber;
const int RspGetSystemCurLoad::kCompinfosFieldNumber;
#endif  // !_MSC_VER

RspGetSystemCurLoad::RspGetSystemCurLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspGetSystemCurLoad)
}

void RspGetSystemCurLoad::InitAsDefaultInstance() {
}

RspGetSystemCurLoad::RspGetSystemCurLoad(const RspGetSystemCurLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspGetSystemCurLoad)
}

void RspGetSystemCurLoad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curconfcnt_ = 0u;
  curreccnt_ = 0u;
  curlivecnt_ = 0u;
  curanalycnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSystemCurLoad::~RspGetSystemCurLoad() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspGetSystemCurLoad)
  SharedDtor();
}

void RspGetSystemCurLoad::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspGetSystemCurLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSystemCurLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSystemCurLoad_descriptor_;
}

const RspGetSystemCurLoad& RspGetSystemCurLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspGetSystemCurLoad* RspGetSystemCurLoad::default_instance_ = NULL;

RspGetSystemCurLoad* RspGetSystemCurLoad::New() const {
  return new RspGetSystemCurLoad;
}

void RspGetSystemCurLoad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspGetSystemCurLoad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(curconfcnt_, curanalycnt_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSystemCurLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspGetSystemCurLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curconfcnt;
        break;
      }

      // optional uint32 curconfcnt = 2;
      case 2: {
        if (tag == 16) {
         parse_curconfcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curconfcnt_)));
          set_has_curconfcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curreccnt;
        break;
      }

      // optional uint32 curreccnt = 3;
      case 3: {
        if (tag == 24) {
         parse_curreccnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curreccnt_)));
          set_has_curreccnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curlivecnt;
        break;
      }

      // optional uint32 curlivecnt = 4;
      case 4: {
        if (tag == 32) {
         parse_curlivecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlivecnt_)));
          set_has_curlivecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curanalycnt;
        break;
      }

      // optional uint32 curanalycnt = 5;
      case 5: {
        if (tag == 40) {
         parse_curanalycnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curanalycnt_)));
          set_has_curanalycnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.RspGetSystemCurLoad.CompanyInfo compinfos = 6;
      case 6: {
        if (tag == 50) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspGetSystemCurLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspGetSystemCurLoad)
  return false;
#undef DO_
}

void RspGetSystemCurLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspGetSystemCurLoad)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional uint32 curconfcnt = 2;
  if (has_curconfcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curconfcnt(), output);
  }

  // optional uint32 curreccnt = 3;
  if (has_curreccnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curreccnt(), output);
  }

  // optional uint32 curlivecnt = 4;
  if (has_curlivecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curlivecnt(), output);
  }

  // optional uint32 curanalycnt = 5;
  if (has_curanalycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curanalycnt(), output);
  }

  // repeated .SRMsgs.RspGetSystemCurLoad.CompanyInfo compinfos = 6;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspGetSystemCurLoad)
}

::google::protobuf::uint8* RspGetSystemCurLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspGetSystemCurLoad)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional uint32 curconfcnt = 2;
  if (has_curconfcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curconfcnt(), target);
  }

  // optional uint32 curreccnt = 3;
  if (has_curreccnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curreccnt(), target);
  }

  // optional uint32 curlivecnt = 4;
  if (has_curlivecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curlivecnt(), target);
  }

  // optional uint32 curanalycnt = 5;
  if (has_curanalycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curanalycnt(), target);
  }

  // repeated .SRMsgs.RspGetSystemCurLoad.CompanyInfo compinfos = 6;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspGetSystemCurLoad)
  return target;
}

int RspGetSystemCurLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 curconfcnt = 2;
    if (has_curconfcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curconfcnt());
    }

    // optional uint32 curreccnt = 3;
    if (has_curreccnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curreccnt());
    }

    // optional uint32 curlivecnt = 4;
    if (has_curlivecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlivecnt());
    }

    // optional uint32 curanalycnt = 5;
    if (has_curanalycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curanalycnt());
    }

  }
  // repeated .SRMsgs.RspGetSystemCurLoad.CompanyInfo compinfos = 6;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSystemCurLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSystemCurLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSystemCurLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSystemCurLoad::MergeFrom(const RspGetSystemCurLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_curconfcnt()) {
      set_curconfcnt(from.curconfcnt());
    }
    if (from.has_curreccnt()) {
      set_curreccnt(from.curreccnt());
    }
    if (from.has_curlivecnt()) {
      set_curlivecnt(from.curlivecnt());
    }
    if (from.has_curanalycnt()) {
      set_curanalycnt(from.curanalycnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSystemCurLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSystemCurLoad::CopyFrom(const RspGetSystemCurLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSystemCurLoad::IsInitialized() const {

  return true;
}

void RspGetSystemCurLoad::Swap(RspGetSystemCurLoad* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(curconfcnt_, other->curconfcnt_);
    std::swap(curreccnt_, other->curreccnt_);
    std::swap(curlivecnt_, other->curlivecnt_);
    std::swap(curanalycnt_, other->curanalycnt_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSystemCurLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSystemCurLoad_descriptor_;
  metadata.reflection = RspGetSystemCurLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCompLicenseInfo_LicenceInfo::kLicencetypeFieldNumber;
const int IndCompLicenseInfo_LicenceInfo::kLicencenumFieldNumber;
const int IndCompLicenseInfo_LicenceInfo::kStarttimeFieldNumber;
const int IndCompLicenseInfo_LicenceInfo::kExptimeFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfo_LicenceInfo::IndCompLicenseInfo_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfo.LicenceInfo)
}

void IndCompLicenseInfo_LicenceInfo::InitAsDefaultInstance() {
}

IndCompLicenseInfo_LicenceInfo::IndCompLicenseInfo_LicenceInfo(const IndCompLicenseInfo_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfo.LicenceInfo)
}

void IndCompLicenseInfo_LicenceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfo_LicenceInfo::~IndCompLicenseInfo_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  SharedDtor();
}

void IndCompLicenseInfo_LicenceInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exptime_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfo_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfo_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfo_LicenceInfo_descriptor_;
}

const IndCompLicenseInfo_LicenceInfo& IndCompLicenseInfo_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfo_LicenceInfo* IndCompLicenseInfo_LicenceInfo::default_instance_ = NULL;

IndCompLicenseInfo_LicenceInfo* IndCompLicenseInfo_LicenceInfo::New() const {
  return new IndCompLicenseInfo_LicenceInfo;
}

void IndCompLicenseInfo_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCompLicenseInfo_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(licencetype_, licencenum_);
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_exptime()) {
      if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exptime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfo_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_starttime;
        break;
      }

      // optional string starttime = 3;
      case 3: {
        if (tag == 26) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exptime;
        break;
      }

      // optional string exptime = 4;
      case 4: {
        if (tag == 34) {
         parse_exptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exptime().data(), this->exptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  return false;
#undef DO_
}

void IndCompLicenseInfo_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfo.LicenceInfo)
}

::google::protobuf::uint8* IndCompLicenseInfo_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfo.LicenceInfo)
  return target;
}

int IndCompLicenseInfo_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

    // optional string starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string exptime = 4;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfo_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfo_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfo_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfo_LicenceInfo::MergeFrom(const IndCompLicenseInfo_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfo_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfo_LicenceInfo::CopyFrom(const IndCompLicenseInfo_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfo_LicenceInfo::IsInitialized() const {

  return true;
}

void IndCompLicenseInfo_LicenceInfo::Swap(IndCompLicenseInfo_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(starttime_, other->starttime_);
    std::swap(exptime_, other->exptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfo_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfo_LicenceInfo_descriptor_;
  metadata.reflection = IndCompLicenseInfo_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompLicenseInfo_CompanyInfo::kCompanyidFieldNumber;
const int IndCompLicenseInfo_CompanyInfo::kCompanynameFieldNumber;
const int IndCompLicenseInfo_CompanyInfo::kLicenceinfosFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfo_CompanyInfo::IndCompLicenseInfo_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfo.CompanyInfo)
}

void IndCompLicenseInfo_CompanyInfo::InitAsDefaultInstance() {
}

IndCompLicenseInfo_CompanyInfo::IndCompLicenseInfo_CompanyInfo(const IndCompLicenseInfo_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfo.CompanyInfo)
}

void IndCompLicenseInfo_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfo_CompanyInfo::~IndCompLicenseInfo_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  SharedDtor();
}

void IndCompLicenseInfo_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfo_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfo_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfo_CompanyInfo_descriptor_;
}

const IndCompLicenseInfo_CompanyInfo& IndCompLicenseInfo_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfo_CompanyInfo* IndCompLicenseInfo_CompanyInfo::default_instance_ = NULL;

IndCompLicenseInfo_CompanyInfo* IndCompLicenseInfo_CompanyInfo::New() const {
  return new IndCompLicenseInfo_CompanyInfo;
}

void IndCompLicenseInfo_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
  }
  licenceinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfo_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_licenceinfos;
        break;
      }

      // repeated .SRMsgs.IndCompLicenseInfo.LicenceInfo licenceinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_licenceinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenceinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_licenceinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  return false;
#undef DO_
}

void IndCompLicenseInfo_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // repeated .SRMsgs.IndCompLicenseInfo.LicenceInfo licenceinfos = 3;
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->licenceinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfo.CompanyInfo)
}

::google::protobuf::uint8* IndCompLicenseInfo_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // repeated .SRMsgs.IndCompLicenseInfo.LicenceInfo licenceinfos = 3;
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->licenceinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfo.CompanyInfo)
  return target;
}

int IndCompLicenseInfo_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

  }
  // repeated .SRMsgs.IndCompLicenseInfo.LicenceInfo licenceinfos = 3;
  total_size += 1 * this->licenceinfos_size();
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenceinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfo_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfo_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfo_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfo_CompanyInfo::MergeFrom(const IndCompLicenseInfo_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenceinfos_.MergeFrom(from.licenceinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfo_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfo_CompanyInfo::CopyFrom(const IndCompLicenseInfo_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfo_CompanyInfo::IsInitialized() const {

  return true;
}

void IndCompLicenseInfo_CompanyInfo::Swap(IndCompLicenseInfo_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    licenceinfos_.Swap(&other->licenceinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfo_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfo_CompanyInfo_descriptor_;
  metadata.reflection = IndCompLicenseInfo_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompLicenseInfo::kIsokFieldNumber;
const int IndCompLicenseInfo::kDeviceidFieldNumber;
const int IndCompLicenseInfo::kTokenFieldNumber;
const int IndCompLicenseInfo::kCompinfosFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfo::IndCompLicenseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfo)
}

void IndCompLicenseInfo::InitAsDefaultInstance() {
}

IndCompLicenseInfo::IndCompLicenseInfo(const IndCompLicenseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfo)
}

void IndCompLicenseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfo::~IndCompLicenseInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfo)
  SharedDtor();
}

void IndCompLicenseInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfo_descriptor_;
}

const IndCompLicenseInfo& IndCompLicenseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfo* IndCompLicenseInfo::default_instance_ = NULL;

IndCompLicenseInfo* IndCompLicenseInfo::New() const {
  return new IndCompLicenseInfo;
}

void IndCompLicenseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCompLicenseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(isok_, deviceid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.IndCompLicenseInfo.CompanyInfo compinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfo)
  return false;
#undef DO_
}

void IndCompLicenseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfo)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // repeated .SRMsgs.IndCompLicenseInfo.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfo)
}

::google::protobuf::uint8* IndCompLicenseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfo)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // repeated .SRMsgs.IndCompLicenseInfo.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfo)
  return target;
}

int IndCompLicenseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.IndCompLicenseInfo.CompanyInfo compinfos = 4;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfo::MergeFrom(const IndCompLicenseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfo::CopyFrom(const IndCompLicenseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfo::IsInitialized() const {

  return true;
}

void IndCompLicenseInfo::Swap(IndCompLicenseInfo* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfo_descriptor_;
  metadata.reflection = IndCompLicenseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndCompLicenseInfoToDevmgr_LicenceInfo::kLicencetypeFieldNumber;
const int IndCompLicenseInfoToDevmgr_LicenceInfo::kLicencenumFieldNumber;
const int IndCompLicenseInfoToDevmgr_LicenceInfo::kStarttimeFieldNumber;
const int IndCompLicenseInfoToDevmgr_LicenceInfo::kExptimeFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfoToDevmgr_LicenceInfo::IndCompLicenseInfoToDevmgr_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::InitAsDefaultInstance() {
}

IndCompLicenseInfoToDevmgr_LicenceInfo::IndCompLicenseInfoToDevmgr_LicenceInfo(const IndCompLicenseInfoToDevmgr_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfoToDevmgr_LicenceInfo::~IndCompLicenseInfoToDevmgr_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  SharedDtor();
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exptime_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_;
}

const IndCompLicenseInfoToDevmgr_LicenceInfo& IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfoToDevmgr_LicenceInfo* IndCompLicenseInfoToDevmgr_LicenceInfo::default_instance_ = NULL;

IndCompLicenseInfoToDevmgr_LicenceInfo* IndCompLicenseInfoToDevmgr_LicenceInfo::New() const {
  return new IndCompLicenseInfoToDevmgr_LicenceInfo;
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCompLicenseInfoToDevmgr_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(licencetype_, licencenum_);
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_exptime()) {
      if (exptime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exptime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfoToDevmgr_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_starttime;
        break;
      }

      // optional string starttime = 3;
      case 3: {
        if (tag == 26) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exptime;
        break;
      }

      // optional string exptime = 4;
      case 4: {
        if (tag == 34) {
         parse_exptime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exptime().data(), this->exptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exptime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  return false;
#undef DO_
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
}

::google::protobuf::uint8* IndCompLicenseInfoToDevmgr_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  // optional string starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string exptime = 4;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exptime().data(), this->exptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo)
  return target;
}

int IndCompLicenseInfoToDevmgr_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

    // optional string starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string exptime = 4;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfoToDevmgr_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfoToDevmgr_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::MergeFrom(const IndCompLicenseInfoToDevmgr_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::CopyFrom(const IndCompLicenseInfoToDevmgr_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfoToDevmgr_LicenceInfo::IsInitialized() const {

  return true;
}

void IndCompLicenseInfoToDevmgr_LicenceInfo::Swap(IndCompLicenseInfoToDevmgr_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(starttime_, other->starttime_);
    std::swap(exptime_, other->exptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfoToDevmgr_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfoToDevmgr_LicenceInfo_descriptor_;
  metadata.reflection = IndCompLicenseInfoToDevmgr_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompLicenseInfoToDevmgr_CompanyInfo::kCompanyidFieldNumber;
const int IndCompLicenseInfoToDevmgr_CompanyInfo::kCompanynameFieldNumber;
const int IndCompLicenseInfoToDevmgr_CompanyInfo::kLicenceinfosFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfoToDevmgr_CompanyInfo::IndCompLicenseInfoToDevmgr_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::InitAsDefaultInstance() {
}

IndCompLicenseInfoToDevmgr_CompanyInfo::IndCompLicenseInfoToDevmgr_CompanyInfo(const IndCompLicenseInfoToDevmgr_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  companyid_ = 0u;
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfoToDevmgr_CompanyInfo::~IndCompLicenseInfoToDevmgr_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  SharedDtor();
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::SharedDtor() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_;
}

const IndCompLicenseInfoToDevmgr_CompanyInfo& IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfoToDevmgr_CompanyInfo* IndCompLicenseInfoToDevmgr_CompanyInfo::default_instance_ = NULL;

IndCompLicenseInfoToDevmgr_CompanyInfo* IndCompLicenseInfoToDevmgr_CompanyInfo::New() const {
  return new IndCompLicenseInfoToDevmgr_CompanyInfo;
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    companyid_ = 0u;
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
  }
  licenceinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfoToDevmgr_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_companyname;
        break;
      }

      // optional string companyname = 2;
      case 2: {
        if (tag == 18) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_licenceinfos;
        break;
      }

      // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo licenceinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_licenceinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenceinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_licenceinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  return false;
#undef DO_
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->companyname(), output);
  }

  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo licenceinfos = 3;
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->licenceinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
}

::google::protobuf::uint8* IndCompLicenseInfoToDevmgr_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // optional string companyname = 2;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->companyname(), target);
  }

  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo licenceinfos = 3;
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->licenceinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo)
  return target;
}

int IndCompLicenseInfoToDevmgr_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

    // optional string companyname = 2;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }

  }
  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.LicenceInfo licenceinfos = 3;
  total_size += 1 * this->licenceinfos_size();
  for (int i = 0; i < this->licenceinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenceinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfoToDevmgr_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfoToDevmgr_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::MergeFrom(const IndCompLicenseInfoToDevmgr_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenceinfos_.MergeFrom(from.licenceinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::CopyFrom(const IndCompLicenseInfoToDevmgr_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfoToDevmgr_CompanyInfo::IsInitialized() const {

  return true;
}

void IndCompLicenseInfoToDevmgr_CompanyInfo::Swap(IndCompLicenseInfoToDevmgr_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    std::swap(companyname_, other->companyname_);
    licenceinfos_.Swap(&other->licenceinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfoToDevmgr_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfoToDevmgr_CompanyInfo_descriptor_;
  metadata.reflection = IndCompLicenseInfoToDevmgr_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndCompLicenseInfoToDevmgr::kIsokFieldNumber;
const int IndCompLicenseInfoToDevmgr::kDeviceidFieldNumber;
const int IndCompLicenseInfoToDevmgr::kTokenFieldNumber;
const int IndCompLicenseInfoToDevmgr::kCompinfosFieldNumber;
#endif  // !_MSC_VER

IndCompLicenseInfoToDevmgr::IndCompLicenseInfoToDevmgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.IndCompLicenseInfoToDevmgr)
}

void IndCompLicenseInfoToDevmgr::InitAsDefaultInstance() {
}

IndCompLicenseInfoToDevmgr::IndCompLicenseInfoToDevmgr(const IndCompLicenseInfoToDevmgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.IndCompLicenseInfoToDevmgr)
}

void IndCompLicenseInfoToDevmgr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndCompLicenseInfoToDevmgr::~IndCompLicenseInfoToDevmgr() {
  // @@protoc_insertion_point(destructor:SRMsgs.IndCompLicenseInfoToDevmgr)
  SharedDtor();
}

void IndCompLicenseInfoToDevmgr::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void IndCompLicenseInfoToDevmgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndCompLicenseInfoToDevmgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndCompLicenseInfoToDevmgr_descriptor_;
}

const IndCompLicenseInfoToDevmgr& IndCompLicenseInfoToDevmgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

IndCompLicenseInfoToDevmgr* IndCompLicenseInfoToDevmgr::default_instance_ = NULL;

IndCompLicenseInfoToDevmgr* IndCompLicenseInfoToDevmgr::New() const {
  return new IndCompLicenseInfoToDevmgr;
}

void IndCompLicenseInfoToDevmgr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndCompLicenseInfoToDevmgr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(isok_, deviceid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndCompLicenseInfoToDevmgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.IndCompLicenseInfoToDevmgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo compinfos = 4;
      case 4: {
        if (tag == 34) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.IndCompLicenseInfoToDevmgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.IndCompLicenseInfoToDevmgr)
  return false;
#undef DO_
}

void IndCompLicenseInfoToDevmgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.IndCompLicenseInfoToDevmgr)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.IndCompLicenseInfoToDevmgr)
}

::google::protobuf::uint8* IndCompLicenseInfoToDevmgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.IndCompLicenseInfoToDevmgr)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo compinfos = 4;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.IndCompLicenseInfoToDevmgr)
  return target;
}

int IndCompLicenseInfoToDevmgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.IndCompLicenseInfoToDevmgr.CompanyInfo compinfos = 4;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndCompLicenseInfoToDevmgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndCompLicenseInfoToDevmgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndCompLicenseInfoToDevmgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndCompLicenseInfoToDevmgr::MergeFrom(const IndCompLicenseInfoToDevmgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndCompLicenseInfoToDevmgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndCompLicenseInfoToDevmgr::CopyFrom(const IndCompLicenseInfoToDevmgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndCompLicenseInfoToDevmgr::IsInitialized() const {

  return true;
}

void IndCompLicenseInfoToDevmgr::Swap(IndCompLicenseInfoToDevmgr* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndCompLicenseInfoToDevmgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndCompLicenseInfoToDevmgr_descriptor_;
  metadata.reflection = IndCompLicenseInfoToDevmgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspLicenseToMC_LicenceInfo::kLicencetypeFieldNumber;
const int RspLicenseToMC_LicenceInfo::kLicencenumFieldNumber;
#endif  // !_MSC_VER

RspLicenseToMC_LicenceInfo::RspLicenseToMC_LicenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspLicenseToMC.LicenceInfo)
}

void RspLicenseToMC_LicenceInfo::InitAsDefaultInstance() {
}

RspLicenseToMC_LicenceInfo::RspLicenseToMC_LicenceInfo(const RspLicenseToMC_LicenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspLicenseToMC.LicenceInfo)
}

void RspLicenseToMC_LicenceInfo::SharedCtor() {
  _cached_size_ = 0;
  licencetype_ = 0u;
  licencenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLicenseToMC_LicenceInfo::~RspLicenseToMC_LicenceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspLicenseToMC.LicenceInfo)
  SharedDtor();
}

void RspLicenseToMC_LicenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspLicenseToMC_LicenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLicenseToMC_LicenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLicenseToMC_LicenceInfo_descriptor_;
}

const RspLicenseToMC_LicenceInfo& RspLicenseToMC_LicenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspLicenseToMC_LicenceInfo* RspLicenseToMC_LicenceInfo::default_instance_ = NULL;

RspLicenseToMC_LicenceInfo* RspLicenseToMC_LicenceInfo::New() const {
  return new RspLicenseToMC_LicenceInfo;
}

void RspLicenseToMC_LicenceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspLicenseToMC_LicenceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(licencetype_, licencenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLicenseToMC_LicenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspLicenseToMC.LicenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 licencetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &licencetype_)));
          set_has_licencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_licencenum;
        break;
      }

      // optional sint32 licencenum = 2;
      case 2: {
        if (tag == 16) {
         parse_licencenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &licencenum_)));
          set_has_licencenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspLicenseToMC.LicenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspLicenseToMC.LicenceInfo)
  return false;
#undef DO_
}

void RspLicenseToMC_LicenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspLicenseToMC.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->licencetype(), output);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->licencenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspLicenseToMC.LicenceInfo)
}

::google::protobuf::uint8* RspLicenseToMC_LicenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspLicenseToMC.LicenceInfo)
  // optional uint32 licencetype = 1;
  if (has_licencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->licencetype(), target);
  }

  // optional sint32 licencenum = 2;
  if (has_licencenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->licencenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspLicenseToMC.LicenceInfo)
  return target;
}

int RspLicenseToMC_LicenceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 licencetype = 1;
    if (has_licencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->licencetype());
    }

    // optional sint32 licencenum = 2;
    if (has_licencenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->licencenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLicenseToMC_LicenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLicenseToMC_LicenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLicenseToMC_LicenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLicenseToMC_LicenceInfo::MergeFrom(const RspLicenseToMC_LicenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licencetype()) {
      set_licencetype(from.licencetype());
    }
    if (from.has_licencenum()) {
      set_licencenum(from.licencenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLicenseToMC_LicenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLicenseToMC_LicenceInfo::CopyFrom(const RspLicenseToMC_LicenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLicenseToMC_LicenceInfo::IsInitialized() const {

  return true;
}

void RspLicenseToMC_LicenceInfo::Swap(RspLicenseToMC_LicenceInfo* other) {
  if (other != this) {
    std::swap(licencetype_, other->licencetype_);
    std::swap(licencenum_, other->licencenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLicenseToMC_LicenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLicenseToMC_LicenceInfo_descriptor_;
  metadata.reflection = RspLicenseToMC_LicenceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspLicenseToMC_CompanyInfo::kCompanyidFieldNumber;
const int RspLicenseToMC_CompanyInfo::kGetlicinfosFieldNumber;
#endif  // !_MSC_VER

RspLicenseToMC_CompanyInfo::RspLicenseToMC_CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspLicenseToMC.CompanyInfo)
}

void RspLicenseToMC_CompanyInfo::InitAsDefaultInstance() {
}

RspLicenseToMC_CompanyInfo::RspLicenseToMC_CompanyInfo(const RspLicenseToMC_CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspLicenseToMC.CompanyInfo)
}

void RspLicenseToMC_CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  companyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLicenseToMC_CompanyInfo::~RspLicenseToMC_CompanyInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspLicenseToMC.CompanyInfo)
  SharedDtor();
}

void RspLicenseToMC_CompanyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspLicenseToMC_CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLicenseToMC_CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLicenseToMC_CompanyInfo_descriptor_;
}

const RspLicenseToMC_CompanyInfo& RspLicenseToMC_CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspLicenseToMC_CompanyInfo* RspLicenseToMC_CompanyInfo::default_instance_ = NULL;

RspLicenseToMC_CompanyInfo* RspLicenseToMC_CompanyInfo::New() const {
  return new RspLicenseToMC_CompanyInfo;
}

void RspLicenseToMC_CompanyInfo::Clear() {
  companyid_ = 0u;
  getlicinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLicenseToMC_CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspLicenseToMC.CompanyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 companyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &companyid_)));
          set_has_companyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        break;
      }

      // repeated .SRMsgs.RspLicenseToMC.LicenceInfo getlicinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_getlicinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getlicinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getlicinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspLicenseToMC.CompanyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspLicenseToMC.CompanyInfo)
  return false;
#undef DO_
}

void RspLicenseToMC_CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspLicenseToMC.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->companyid(), output);
  }

  // repeated .SRMsgs.RspLicenseToMC.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getlicinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspLicenseToMC.CompanyInfo)
}

::google::protobuf::uint8* RspLicenseToMC_CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspLicenseToMC.CompanyInfo)
  // optional uint32 companyid = 1;
  if (has_companyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->companyid(), target);
  }

  // repeated .SRMsgs.RspLicenseToMC.LicenceInfo getlicinfos = 2;
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getlicinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspLicenseToMC.CompanyInfo)
  return target;
}

int RspLicenseToMC_CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 companyid = 1;
    if (has_companyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->companyid());
    }

  }
  // repeated .SRMsgs.RspLicenseToMC.LicenceInfo getlicinfos = 2;
  total_size += 1 * this->getlicinfos_size();
  for (int i = 0; i < this->getlicinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getlicinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLicenseToMC_CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLicenseToMC_CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLicenseToMC_CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLicenseToMC_CompanyInfo::MergeFrom(const RspLicenseToMC_CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  getlicinfos_.MergeFrom(from.getlicinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companyid()) {
      set_companyid(from.companyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLicenseToMC_CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLicenseToMC_CompanyInfo::CopyFrom(const RspLicenseToMC_CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLicenseToMC_CompanyInfo::IsInitialized() const {

  return true;
}

void RspLicenseToMC_CompanyInfo::Swap(RspLicenseToMC_CompanyInfo* other) {
  if (other != this) {
    std::swap(companyid_, other->companyid_);
    getlicinfos_.Swap(&other->getlicinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLicenseToMC_CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLicenseToMC_CompanyInfo_descriptor_;
  metadata.reflection = RspLicenseToMC_CompanyInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspLicenseToMC::kIsokFieldNumber;
const int RspLicenseToMC::kDeviceidFieldNumber;
const int RspLicenseToMC::kTokenFieldNumber;
const int RspLicenseToMC::kConfidFieldNumber;
const int RspLicenseToMC::kCompinfosFieldNumber;
const int RspLicenseToMC::kSeqnumFieldNumber;
#endif  // !_MSC_VER

RspLicenseToMC::RspLicenseToMC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspLicenseToMC)
}

void RspLicenseToMC::InitAsDefaultInstance() {
}

RspLicenseToMC::RspLicenseToMC(const RspLicenseToMC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspLicenseToMC)
}

void RspLicenseToMC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isok_ = false;
  deviceid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confid_ = GOOGLE_ULONGLONG(0);
  seqnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLicenseToMC::~RspLicenseToMC() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspLicenseToMC)
  SharedDtor();
}

void RspLicenseToMC::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspLicenseToMC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLicenseToMC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLicenseToMC_descriptor_;
}

const RspLicenseToMC& RspLicenseToMC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspLicenseToMC* RspLicenseToMC::default_instance_ = NULL;

RspLicenseToMC* RspLicenseToMC::New() const {
  return new RspLicenseToMC;
}

void RspLicenseToMC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspLicenseToMC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(isok_, deviceid_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    confid_ = GOOGLE_ULONGLONG(0);
    seqnum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  compinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLicenseToMC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspLicenseToMC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 2;
      case 2: {
        if (tag == 16) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_confid;
        break;
      }

      // optional uint64 confid = 4;
      case 4: {
        if (tag == 32) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_compinfos;
        break;
      }

      // repeated .SRMsgs.RspLicenseToMC.CompanyInfo compinfos = 5;
      case 5: {
        if (tag == 42) {
         parse_compinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_compinfos;
        if (input->ExpectTag(48)) goto parse_seqnum;
        break;
      }

      // optional uint32 seqnum = 6;
      case 6: {
        if (tag == 48) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspLicenseToMC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspLicenseToMC)
  return false;
#undef DO_
}

void RspLicenseToMC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspLicenseToMC)
  // optional bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional uint64 confid = 4;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->confid(), output);
  }

  // repeated .SRMsgs.RspLicenseToMC.CompanyInfo compinfos = 5;
  for (int i = 0; i < this->compinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->compinfos(i), output);
  }

  // optional uint32 seqnum = 6;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seqnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspLicenseToMC)
}

::google::protobuf::uint8* RspLicenseToMC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspLicenseToMC)
  // optional bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // optional uint32 deviceid = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional uint64 confid = 4;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->confid(), target);
  }

  // repeated .SRMsgs.RspLicenseToMC.CompanyInfo compinfos = 5;
  for (int i = 0; i < this->compinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->compinfos(i), target);
  }

  // optional uint32 seqnum = 6;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seqnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspLicenseToMC)
  return target;
}

int RspLicenseToMC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // optional uint32 deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 confid = 4;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->confid());
    }

    // optional uint32 seqnum = 6;
    if (has_seqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqnum());
    }

  }
  // repeated .SRMsgs.RspLicenseToMC.CompanyInfo compinfos = 5;
  total_size += 1 * this->compinfos_size();
  for (int i = 0; i < this->compinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLicenseToMC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLicenseToMC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLicenseToMC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLicenseToMC::MergeFrom(const RspLicenseToMC& from) {
  GOOGLE_CHECK_NE(&from, this);
  compinfos_.MergeFrom(from.compinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLicenseToMC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLicenseToMC::CopyFrom(const RspLicenseToMC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLicenseToMC::IsInitialized() const {

  return true;
}

void RspLicenseToMC::Swap(RspLicenseToMC* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(token_, other->token_);
    std::swap(confid_, other->confid_);
    compinfos_.Swap(&other->compinfos_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLicenseToMC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLicenseToMC_descriptor_;
  metadata.reflection = RspLicenseToMC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspUpdateDeviceInfo_DeviceInfo::kDeviceidFieldNumber;
const int RspUpdateDeviceInfo_DeviceInfo::kSvrTypeFieldNumber;
const int RspUpdateDeviceInfo_DeviceInfo::kIpFieldNumber;
const int RspUpdateDeviceInfo_DeviceInfo::kPortFieldNumber;
const int RspUpdateDeviceInfo_DeviceInfo::kLoadFieldNumber;
const int RspUpdateDeviceInfo_DeviceInfo::kLoad2FieldNumber;
#endif  // !_MSC_VER

RspUpdateDeviceInfo_DeviceInfo::RspUpdateDeviceInfo_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
}

void RspUpdateDeviceInfo_DeviceInfo::InitAsDefaultInstance() {
}

RspUpdateDeviceInfo_DeviceInfo::RspUpdateDeviceInfo_DeviceInfo(const RspUpdateDeviceInfo_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
}

void RspUpdateDeviceInfo_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0u;
  svr_type_ = 0u;
  ip_ = 0u;
  port_ = 0u;
  load_ = 0u;
  load2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUpdateDeviceInfo_DeviceInfo::~RspUpdateDeviceInfo_DeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  SharedDtor();
}

void RspUpdateDeviceInfo_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspUpdateDeviceInfo_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUpdateDeviceInfo_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUpdateDeviceInfo_DeviceInfo_descriptor_;
}

const RspUpdateDeviceInfo_DeviceInfo& RspUpdateDeviceInfo_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspUpdateDeviceInfo_DeviceInfo* RspUpdateDeviceInfo_DeviceInfo::default_instance_ = NULL;

RspUpdateDeviceInfo_DeviceInfo* RspUpdateDeviceInfo_DeviceInfo::New() const {
  return new RspUpdateDeviceInfo_DeviceInfo;
}

void RspUpdateDeviceInfo_DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RspUpdateDeviceInfo_DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(deviceid_, load2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUpdateDeviceInfo_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deviceid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 2;
      case 2: {
        if (tag == 16) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 4;
      case 4: {
        if (tag == 32) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_load;
        break;
      }

      // optional uint32 load = 6;
      case 6: {
        if (tag == 48) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_load2;
        break;
      }

      // optional uint32 load2 = 7;
      case 7: {
        if (tag == 56) {
         parse_load2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load2_)));
          set_has_load2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  return false;
#undef DO_
}

void RspUpdateDeviceInfo_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_type(), output);
  }

  // optional uint32 ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 load = 6;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->load(), output);
  }

  // optional uint32 load2 = 7;
  if (has_load2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->load2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
}

::google::protobuf::uint8* RspUpdateDeviceInfo_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  // optional uint32 deviceid = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_type(), target);
  }

  // optional uint32 ip = 4;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 load = 6;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->load(), target);
  }

  // optional uint32 load2 = 7;
  if (has_load2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->load2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspUpdateDeviceInfo.DeviceInfo)
  return target;
}

int RspUpdateDeviceInfo_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional uint32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 load = 6;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load());
    }

    // optional uint32 load2 = 7;
    if (has_load2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUpdateDeviceInfo_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUpdateDeviceInfo_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUpdateDeviceInfo_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUpdateDeviceInfo_DeviceInfo::MergeFrom(const RspUpdateDeviceInfo_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
    if (from.has_load2()) {
      set_load2(from.load2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUpdateDeviceInfo_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUpdateDeviceInfo_DeviceInfo::CopyFrom(const RspUpdateDeviceInfo_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUpdateDeviceInfo_DeviceInfo::IsInitialized() const {

  return true;
}

void RspUpdateDeviceInfo_DeviceInfo::Swap(RspUpdateDeviceInfo_DeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(load_, other->load_);
    std::swap(load2_, other->load2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUpdateDeviceInfo_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUpdateDeviceInfo_DeviceInfo_descriptor_;
  metadata.reflection = RspUpdateDeviceInfo_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RspUpdateDeviceInfo::kTokenFieldNumber;
const int RspUpdateDeviceInfo::kUpdateDevicesFieldNumber;
#endif  // !_MSC_VER

RspUpdateDeviceInfo::RspUpdateDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.RspUpdateDeviceInfo)
}

void RspUpdateDeviceInfo::InitAsDefaultInstance() {
}

RspUpdateDeviceInfo::RspUpdateDeviceInfo(const RspUpdateDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.RspUpdateDeviceInfo)
}

void RspUpdateDeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUpdateDeviceInfo::~RspUpdateDeviceInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.RspUpdateDeviceInfo)
  SharedDtor();
}

void RspUpdateDeviceInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspUpdateDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUpdateDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUpdateDeviceInfo_descriptor_;
}

const RspUpdateDeviceInfo& RspUpdateDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

RspUpdateDeviceInfo* RspUpdateDeviceInfo::default_instance_ = NULL;

RspUpdateDeviceInfo* RspUpdateDeviceInfo::New() const {
  return new RspUpdateDeviceInfo;
}

void RspUpdateDeviceInfo::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  update_devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUpdateDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.RspUpdateDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_devices;
        break;
      }

      // repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
      case 3: {
        if (tag == 26) {
         parse_update_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_devices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.RspUpdateDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.RspUpdateDeviceInfo)
  return false;
#undef DO_
}

void RspUpdateDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.RspUpdateDeviceInfo)
  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
  for (int i = 0; i < this->update_devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update_devices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.RspUpdateDeviceInfo)
}

::google::protobuf::uint8* RspUpdateDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.RspUpdateDeviceInfo)
  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
  for (int i = 0; i < this->update_devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update_devices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.RspUpdateDeviceInfo)
  return target;
}

int RspUpdateDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .SRMsgs.RspUpdateDeviceInfo.DeviceInfo update_devices = 3;
  total_size += 1 * this->update_devices_size();
  for (int i = 0; i < this->update_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update_devices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUpdateDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUpdateDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUpdateDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUpdateDeviceInfo::MergeFrom(const RspUpdateDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_devices_.MergeFrom(from.update_devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUpdateDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUpdateDeviceInfo::CopyFrom(const RspUpdateDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUpdateDeviceInfo::IsInitialized() const {

  return true;
}

void RspUpdateDeviceInfo::Swap(RspUpdateDeviceInfo* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    update_devices_.Swap(&other->update_devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUpdateDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUpdateDeviceInfo_descriptor_;
  metadata.reflection = RspUpdateDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGWOPMonitor::kTokenFieldNumber;
const int CmdGWOPMonitor::kOptypeFieldNumber;
const int CmdGWOPMonitor::kPlatformcodeFieldNumber;
const int CmdGWOPMonitor::kDsturlFieldNumber;
const int CmdGWOPMonitor::kPlatformnewcodeFieldNumber;
const int CmdGWOPMonitor::kPlatformnewkeyFieldNumber;
#endif  // !_MSC_VER

CmdGWOPMonitor::CmdGWOPMonitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWOPMonitor)
}

void CmdGWOPMonitor::InitAsDefaultInstance() {
}

CmdGWOPMonitor::CmdGWOPMonitor(const CmdGWOPMonitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWOPMonitor)
}

void CmdGWOPMonitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  platformcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dsturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platformnewcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platformnewkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWOPMonitor::~CmdGWOPMonitor() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWOPMonitor)
  SharedDtor();
}

void CmdGWOPMonitor::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (platformcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformcode_;
  }
  if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dsturl_;
  }
  if (platformnewcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformnewcode_;
  }
  if (platformnewkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformnewkey_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWOPMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWOPMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWOPMonitor_descriptor_;
}

const CmdGWOPMonitor& CmdGWOPMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

CmdGWOPMonitor* CmdGWOPMonitor::default_instance_ = NULL;

CmdGWOPMonitor* CmdGWOPMonitor::New() const {
  return new CmdGWOPMonitor;
}

void CmdGWOPMonitor::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    optype_ = 0u;
    if (has_platformcode()) {
      if (platformcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platformcode_->clear();
      }
    }
    if (has_dsturl()) {
      if (dsturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dsturl_->clear();
      }
    }
    if (has_platformnewcode()) {
      if (platformnewcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platformnewcode_->clear();
      }
    }
    if (has_platformnewkey()) {
      if (platformnewkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platformnewkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWOPMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWOPMonitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 2;
      case 2: {
        if (tag == 16) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platformcode;
        break;
      }

      // optional string platformcode = 3;
      case 3: {
        if (tag == 26) {
         parse_platformcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platformcode().data(), this->platformcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platformcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dsturl;
        break;
      }

      // optional string dsturl = 4;
      case 4: {
        if (tag == 34) {
         parse_dsturl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dsturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dsturl().data(), this->dsturl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dsturl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platformnewcode;
        break;
      }

      // optional string platformnewcode = 5;
      case 5: {
        if (tag == 42) {
         parse_platformnewcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformnewcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platformnewcode().data(), this->platformnewcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platformnewcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_platformnewkey;
        break;
      }

      // optional string platformnewkey = 6;
      case 6: {
        if (tag == 50) {
         parse_platformnewkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformnewkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platformnewkey().data(), this->platformnewkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platformnewkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWOPMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWOPMonitor)
  return false;
#undef DO_
}

void CmdGWOPMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWOPMonitor)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  // optional string platformcode = 3;
  if (has_platformcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformcode().data(), this->platformcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platformcode(), output);
  }

  // optional string dsturl = 4;
  if (has_dsturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dsturl().data(), this->dsturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsturl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dsturl(), output);
  }

  // optional string platformnewcode = 5;
  if (has_platformnewcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformnewcode().data(), this->platformnewcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformnewcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platformnewcode(), output);
  }

  // optional string platformnewkey = 6;
  if (has_platformnewkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformnewkey().data(), this->platformnewkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformnewkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->platformnewkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWOPMonitor)
}

::google::protobuf::uint8* CmdGWOPMonitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWOPMonitor)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  // optional string platformcode = 3;
  if (has_platformcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformcode().data(), this->platformcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platformcode(), target);
  }

  // optional string dsturl = 4;
  if (has_dsturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dsturl().data(), this->dsturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsturl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dsturl(), target);
  }

  // optional string platformnewcode = 5;
  if (has_platformnewcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformnewcode().data(), this->platformnewcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformnewcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platformnewcode(), target);
  }

  // optional string platformnewkey = 6;
  if (has_platformnewkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformnewkey().data(), this->platformnewkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformnewkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platformnewkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWOPMonitor)
  return target;
}

int CmdGWOPMonitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional string platformcode = 3;
    if (has_platformcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformcode());
    }

    // optional string dsturl = 4;
    if (has_dsturl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dsturl());
    }

    // optional string platformnewcode = 5;
    if (has_platformnewcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformnewcode());
    }

    // optional string platformnewkey = 6;
    if (has_platformnewkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformnewkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWOPMonitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWOPMonitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWOPMonitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWOPMonitor::MergeFrom(const CmdGWOPMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_platformcode()) {
      set_platformcode(from.platformcode());
    }
    if (from.has_dsturl()) {
      set_dsturl(from.dsturl());
    }
    if (from.has_platformnewcode()) {
      set_platformnewcode(from.platformnewcode());
    }
    if (from.has_platformnewkey()) {
      set_platformnewkey(from.platformnewkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWOPMonitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWOPMonitor::CopyFrom(const CmdGWOPMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWOPMonitor::IsInitialized() const {

  return true;
}

void CmdGWOPMonitor::Swap(CmdGWOPMonitor* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(optype_, other->optype_);
    std::swap(platformcode_, other->platformcode_);
    std::swap(dsturl_, other->dsturl_);
    std::swap(platformnewcode_, other->platformnewcode_);
    std::swap(platformnewkey_, other->platformnewkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWOPMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWOPMonitor_descriptor_;
  metadata.reflection = CmdGWOPMonitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGWOPAVConfig_Capset::kFmtFieldNumber;
#endif  // !_MSC_VER

CmdGWOPAVConfig_Capset::CmdGWOPAVConfig_Capset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWOPAVConfig.Capset)
}

void CmdGWOPAVConfig_Capset::InitAsDefaultInstance() {
}

CmdGWOPAVConfig_Capset::CmdGWOPAVConfig_Capset(const CmdGWOPAVConfig_Capset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWOPAVConfig.Capset)
}

void CmdGWOPAVConfig_Capset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fmt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWOPAVConfig_Capset::~CmdGWOPAVConfig_Capset() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWOPAVConfig.Capset)
  SharedDtor();
}

void CmdGWOPAVConfig_Capset::SharedDtor() {
  if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fmt_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWOPAVConfig_Capset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWOPAVConfig_Capset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWOPAVConfig_Capset_descriptor_;
}

const CmdGWOPAVConfig_Capset& CmdGWOPAVConfig_Capset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

CmdGWOPAVConfig_Capset* CmdGWOPAVConfig_Capset::default_instance_ = NULL;

CmdGWOPAVConfig_Capset* CmdGWOPAVConfig_Capset::New() const {
  return new CmdGWOPAVConfig_Capset;
}

void CmdGWOPAVConfig_Capset::Clear() {
  if (has_fmt()) {
    if (fmt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fmt_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWOPAVConfig_Capset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWOPAVConfig.Capset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fmt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fmt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fmt().data(), this->fmt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fmt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWOPAVConfig.Capset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWOPAVConfig.Capset)
  return false;
#undef DO_
}

void CmdGWOPAVConfig_Capset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWOPAVConfig.Capset)
  // optional string fmt = 1;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fmt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fmt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWOPAVConfig.Capset)
}

::google::protobuf::uint8* CmdGWOPAVConfig_Capset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWOPAVConfig.Capset)
  // optional string fmt = 1;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fmt().data(), this->fmt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fmt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fmt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWOPAVConfig.Capset)
  return target;
}

int CmdGWOPAVConfig_Capset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fmt = 1;
    if (has_fmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fmt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWOPAVConfig_Capset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWOPAVConfig_Capset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWOPAVConfig_Capset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWOPAVConfig_Capset::MergeFrom(const CmdGWOPAVConfig_Capset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmt()) {
      set_fmt(from.fmt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWOPAVConfig_Capset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWOPAVConfig_Capset::CopyFrom(const CmdGWOPAVConfig_Capset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWOPAVConfig_Capset::IsInitialized() const {

  return true;
}

void CmdGWOPAVConfig_Capset::Swap(CmdGWOPAVConfig_Capset* other) {
  if (other != this) {
    std::swap(fmt_, other->fmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWOPAVConfig_Capset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWOPAVConfig_Capset_descriptor_;
  metadata.reflection = CmdGWOPAVConfig_Capset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWOPAVConfig_CapInfo::kCaptypeFieldNumber;
const int CmdGWOPAVConfig_CapInfo::kCapsetsFieldNumber;
#endif  // !_MSC_VER

CmdGWOPAVConfig_CapInfo::CmdGWOPAVConfig_CapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWOPAVConfig.CapInfo)
}

void CmdGWOPAVConfig_CapInfo::InitAsDefaultInstance() {
}

CmdGWOPAVConfig_CapInfo::CmdGWOPAVConfig_CapInfo(const CmdGWOPAVConfig_CapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWOPAVConfig.CapInfo)
}

void CmdGWOPAVConfig_CapInfo::SharedCtor() {
  _cached_size_ = 0;
  captype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWOPAVConfig_CapInfo::~CmdGWOPAVConfig_CapInfo() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWOPAVConfig.CapInfo)
  SharedDtor();
}

void CmdGWOPAVConfig_CapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdGWOPAVConfig_CapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWOPAVConfig_CapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWOPAVConfig_CapInfo_descriptor_;
}

const CmdGWOPAVConfig_CapInfo& CmdGWOPAVConfig_CapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

CmdGWOPAVConfig_CapInfo* CmdGWOPAVConfig_CapInfo::default_instance_ = NULL;

CmdGWOPAVConfig_CapInfo* CmdGWOPAVConfig_CapInfo::New() const {
  return new CmdGWOPAVConfig_CapInfo;
}

void CmdGWOPAVConfig_CapInfo::Clear() {
  captype_ = 0u;
  capsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWOPAVConfig_CapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWOPAVConfig.CapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 captype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captype_)));
          set_has_captype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capsets;
        break;
      }

      // repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
      case 2: {
        if (tag == 18) {
         parse_capsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capsets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWOPAVConfig.CapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWOPAVConfig.CapInfo)
  return false;
#undef DO_
}

void CmdGWOPAVConfig_CapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWOPAVConfig.CapInfo)
  // optional uint32 captype = 1;
  if (has_captype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->captype(), output);
  }

  // repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
  for (int i = 0; i < this->capsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->capsets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWOPAVConfig.CapInfo)
}

::google::protobuf::uint8* CmdGWOPAVConfig_CapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWOPAVConfig.CapInfo)
  // optional uint32 captype = 1;
  if (has_captype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->captype(), target);
  }

  // repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
  for (int i = 0; i < this->capsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->capsets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWOPAVConfig.CapInfo)
  return target;
}

int CmdGWOPAVConfig_CapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 captype = 1;
    if (has_captype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captype());
    }

  }
  // repeated .SRMsgs.CmdGWOPAVConfig.Capset capsets = 2;
  total_size += 1 * this->capsets_size();
  for (int i = 0; i < this->capsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWOPAVConfig_CapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWOPAVConfig_CapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWOPAVConfig_CapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWOPAVConfig_CapInfo::MergeFrom(const CmdGWOPAVConfig_CapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  capsets_.MergeFrom(from.capsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_captype()) {
      set_captype(from.captype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWOPAVConfig_CapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWOPAVConfig_CapInfo::CopyFrom(const CmdGWOPAVConfig_CapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWOPAVConfig_CapInfo::IsInitialized() const {

  return true;
}

void CmdGWOPAVConfig_CapInfo::Swap(CmdGWOPAVConfig_CapInfo* other) {
  if (other != this) {
    std::swap(captype_, other->captype_);
    capsets_.Swap(&other->capsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWOPAVConfig_CapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWOPAVConfig_CapInfo_descriptor_;
  metadata.reflection = CmdGWOPAVConfig_CapInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CmdGWOPAVConfig::kTokenFieldNumber;
const int CmdGWOPAVConfig::kOptypeFieldNumber;
const int CmdGWOPAVConfig::kCapinfosFieldNumber;
#endif  // !_MSC_VER

CmdGWOPAVConfig::CmdGWOPAVConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SRMsgs.CmdGWOPAVConfig)
}

void CmdGWOPAVConfig::InitAsDefaultInstance() {
}

CmdGWOPAVConfig::CmdGWOPAVConfig(const CmdGWOPAVConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SRMsgs.CmdGWOPAVConfig)
}

void CmdGWOPAVConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGWOPAVConfig::~CmdGWOPAVConfig() {
  // @@protoc_insertion_point(destructor:SRMsgs.CmdGWOPAVConfig)
  SharedDtor();
}

void CmdGWOPAVConfig::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CmdGWOPAVConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGWOPAVConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGWOPAVConfig_descriptor_;
}

const CmdGWOPAVConfig& CmdGWOPAVConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fser_2eproto();
  return *default_instance_;
}

CmdGWOPAVConfig* CmdGWOPAVConfig::default_instance_ = NULL;

CmdGWOPAVConfig* CmdGWOPAVConfig::New() const {
  return new CmdGWOPAVConfig;
}

void CmdGWOPAVConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    optype_ = 0u;
  }
  capinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGWOPAVConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SRMsgs.CmdGWOPAVConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 2;
      case 2: {
        if (tag == 16) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capinfos;
        break;
      }

      // repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_capinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SRMsgs.CmdGWOPAVConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SRMsgs.CmdGWOPAVConfig)
  return false;
#undef DO_
}

void CmdGWOPAVConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SRMsgs.CmdGWOPAVConfig)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  // repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
  for (int i = 0; i < this->capinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->capinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SRMsgs.CmdGWOPAVConfig)
}

::google::protobuf::uint8* CmdGWOPAVConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRMsgs.CmdGWOPAVConfig)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  // repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
  for (int i = 0; i < this->capinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->capinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRMsgs.CmdGWOPAVConfig)
  return target;
}

int CmdGWOPAVConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  // repeated .SRMsgs.CmdGWOPAVConfig.CapInfo capinfos = 3;
  total_size += 1 * this->capinfos_size();
  for (int i = 0; i < this->capinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGWOPAVConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGWOPAVConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGWOPAVConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGWOPAVConfig::MergeFrom(const CmdGWOPAVConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  capinfos_.MergeFrom(from.capinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGWOPAVConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGWOPAVConfig::CopyFrom(const CmdGWOPAVConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGWOPAVConfig::IsInitialized() const {

  return true;
}

void CmdGWOPAVConfig::Swap(CmdGWOPAVConfig* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(optype_, other->optype_);
    capinfos_.Swap(&other->capinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGWOPAVConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGWOPAVConfig_descriptor_;
  metadata.reflection = CmdGWOPAVConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRMsgs

// @@protoc_insertion_point(global_scope)
